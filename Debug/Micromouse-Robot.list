
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a988  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017bc  0800ab28  0800ab28  0000bb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2e4  0800c2e4  0000e208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c2e4  0800c2e4  0000d2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2ec  0800c2ec  0000e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2ec  0800c2ec  0000d2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2f0  0800c2f0  0000d2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800c2f4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b0  20000208  0800c4fc  0000e208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016b8  0800c4fc  0000e6b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017153  00000000  00000000  0000e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003687  00000000  00000000  0002538b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00028a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001001  00000000  00000000  00029e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a72b  00000000  00000000  0002ae79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189c2  00000000  00000000  000455a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0596  00000000  00000000  0005df66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe4fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006708  00000000  00000000  000fe540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00104c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab10 	.word	0x0800ab10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0800ab10 	.word	0x0800ab10

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 fb3f 	bl	8003584 <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f004 fd77 	bl	8005a3c <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fb17 	bl	8003584 <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f004 fe1f 	bl	8005b9c <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	200002dc 	.word	0x200002dc

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f004 fe12 	bl	8005b9c <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002dc 	.word	0x200002dc

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff f95d 	bl	8000280 <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <send_bluetooth_message+0x28>)
 8000fd2:	f005 fe1d 	bl	8006c10 <HAL_UART_Transmit>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200003fc 	.word	0x200003fc

08000fe4 <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 8000fe4:	b40f      	push	{r0, r1, r2, r3}
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b0c2      	sub	sp, #264	@ 0x108
 8000fea:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8000fec:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ff8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001002:	f107 0008 	add.w	r0, r7, #8
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800100c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001010:	f007 fb50 	bl	80086b4 <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffcd 	bl	8000fb8 <send_bluetooth_message>
}
 800101e:	bf00      	nop
 8001020:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001024:	46bd      	mov	sp, r7
 8001026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800102a:	b004      	add	sp, #16
 800102c:	4770      	bx	lr
	...

08001030 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001040:	b2db      	uxtb	r3, r3
 8001042:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800104e:	4817      	ldr	r0, [pc, #92]	@ (80010ac <mpu9250_read_register+0x7c>)
 8001050:	f003 f9d6 	bl	8004400 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 8001054:	f107 010d 	add.w	r1, r7, #13
 8001058:	2364      	movs	r3, #100	@ 0x64
 800105a:	2201      	movs	r2, #1
 800105c:	4814      	ldr	r0, [pc, #80]	@ (80010b0 <mpu9250_read_register+0x80>)
 800105e:	f003 fefc 	bl	8004e5a <HAL_SPI_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 8001066:	f107 010c 	add.w	r1, r7, #12
 800106a:	2364      	movs	r3, #100	@ 0x64
 800106c:	2201      	movs	r2, #1
 800106e:	4810      	ldr	r0, [pc, #64]	@ (80010b0 <mpu9250_read_register+0x80>)
 8001070:	f004 f837 	bl	80050e2 <HAL_SPI_Receive>
 8001074:	4603      	mov	r3, r0
 8001076:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800107e:	480b      	ldr	r0, [pc, #44]	@ (80010ac <mpu9250_read_register+0x7c>)
 8001080:	f003 f9be 	bl	8004400 <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <mpu9250_read_register+0x60>
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 8001090:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <mpu9250_read_register+0x84>)
 8001092:	f7ff ff91 	bl	8000fb8 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <mpu9250_read_register+0x88>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 800109c:	23ff      	movs	r3, #255	@ 0xff
 800109e:	e000      	b.n	80010a2 <mpu9250_read_register+0x72>
    }

    return rx_data;
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020400 	.word	0x40020400
 80010b0:	20000284 	.word	0x20000284
 80010b4:	0800ab28 	.word	0x0800ab28
 80010b8:	20000224 	.word	0x20000224

080010bc <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	733b      	strb	r3, [r7, #12]
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010da:	4811      	ldr	r0, [pc, #68]	@ (8001120 <mpu9250_write_register+0x64>)
 80010dc:	f003 f990 	bl	8004400 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 80010e0:	f107 010c 	add.w	r1, r7, #12
 80010e4:	2364      	movs	r3, #100	@ 0x64
 80010e6:	2202      	movs	r2, #2
 80010e8:	480e      	ldr	r0, [pc, #56]	@ (8001124 <mpu9250_write_register+0x68>)
 80010ea:	f003 feb6 	bl	8004e5a <HAL_SPI_Transmit>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f8:	4809      	ldr	r0, [pc, #36]	@ (8001120 <mpu9250_write_register+0x64>)
 80010fa:	f003 f981 	bl	8004400 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <mpu9250_write_register+0x6c>)
 8001106:	f7ff ff57 	bl	8000fb8 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <mpu9250_write_register+0x70>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8001110:	2001      	movs	r0, #1
 8001112:	f002 fa37 	bl	8003584 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020400 	.word	0x40020400
 8001124:	20000284 	.word	0x20000284
 8001128:	0800ab4c 	.word	0x0800ab4c
 800112c:	20000224 	.word	0x20000224

08001130 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 8001136:	483c      	ldr	r0, [pc, #240]	@ (8001228 <mpu9250_init+0xf8>)
 8001138:	f7ff ff3e 	bl	8000fb8 <send_bluetooth_message>
    HAL_Delay(200);
 800113c:	20c8      	movs	r0, #200	@ 0xc8
 800113e:	f002 fa21 	bl	8003584 <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 8001142:	2180      	movs	r1, #128	@ 0x80
 8001144:	206b      	movs	r0, #107	@ 0x6b
 8001146:	f7ff ffb9 	bl	80010bc <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 800114a:	20fa      	movs	r0, #250	@ 0xfa
 800114c:	f002 fa1a 	bl	8003584 <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 8001150:	2100      	movs	r1, #0
 8001152:	206b      	movs	r0, #107	@ 0x6b
 8001154:	f7ff ffb2 	bl	80010bc <mpu9250_write_register>
    HAL_Delay(50);
 8001158:	2032      	movs	r0, #50	@ 0x32
 800115a:	f002 fa13 	bl	8003584 <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 800115e:	2101      	movs	r1, #1
 8001160:	206b      	movs	r0, #107	@ 0x6b
 8001162:	f7ff ffab 	bl	80010bc <mpu9250_write_register>
    HAL_Delay(50);
 8001166:	2032      	movs	r0, #50	@ 0x32
 8001168:	f002 fa0c 	bl	8003584 <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 800116c:	2100      	movs	r1, #0
 800116e:	206c      	movs	r0, #108	@ 0x6c
 8001170:	f7ff ffa4 	bl	80010bc <mpu9250_write_register>
    HAL_Delay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f002 fa05 	bl	8003584 <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 800117a:	206a      	movs	r0, #106	@ 0x6a
 800117c:	f7ff ff58 	bl	8001030 <mpu9250_read_register>
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f043 0310 	orr.w	r3, r3, #16
 800118a:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4619      	mov	r1, r3
 8001190:	206a      	movs	r0, #106	@ 0x6a
 8001192:	f7ff ff93 	bl	80010bc <mpu9250_write_register>
     HAL_Delay(10);
 8001196:	200a      	movs	r0, #10
 8001198:	f002 f9f4 	bl	8003584 <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 800119c:	2104      	movs	r1, #4
 800119e:	2019      	movs	r0, #25
 80011a0:	f7ff ff8c 	bl	80010bc <mpu9250_write_register>
    HAL_Delay(10);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f002 f9ed 	bl	8003584 <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 80011aa:	2102      	movs	r1, #2
 80011ac:	201a      	movs	r0, #26
 80011ae:	f7ff ff85 	bl	80010bc <mpu9250_write_register>
    HAL_Delay(10);
 80011b2:	200a      	movs	r0, #10
 80011b4:	f002 f9e6 	bl	8003584 <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 80011b8:	2108      	movs	r1, #8
 80011ba:	201b      	movs	r0, #27
 80011bc:	f7ff ff7e 	bl	80010bc <mpu9250_write_register>
    HAL_Delay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f002 f9df 	bl	8003584 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 80011c6:	2108      	movs	r1, #8
 80011c8:	201c      	movs	r0, #28
 80011ca:	f7ff ff77 	bl	80010bc <mpu9250_write_register>
    HAL_Delay(10);
 80011ce:	200a      	movs	r0, #10
 80011d0:	f002 f9d8 	bl	8003584 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 80011d4:	2102      	movs	r1, #2
 80011d6:	201d      	movs	r0, #29
 80011d8:	f7ff ff70 	bl	80010bc <mpu9250_write_register>
    HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f002 f9d1 	bl	8003584 <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 80011e2:	2075      	movs	r0, #117	@ 0x75
 80011e4:	f7ff ff24 	bl	8001030 <mpu9250_read_register>
 80011e8:	4603      	mov	r3, r0
 80011ea:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	4619      	mov	r1, r3
 80011f0:	480e      	ldr	r0, [pc, #56]	@ (800122c <mpu9250_init+0xfc>)
 80011f2:	f7ff fef7 	bl	8000fe4 <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	2b70      	cmp	r3, #112	@ 0x70
 80011fa:	d009      	beq.n	8001210 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	4619      	mov	r1, r3
 8001200:	480b      	ldr	r0, [pc, #44]	@ (8001230 <mpu9250_init+0x100>)
 8001202:	f7ff feef 	bl	8000fe4 <send_bluetooth_printf>
        mpu9250_initialized=false;
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <mpu9250_init+0x104>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
        return false;
 800120c:	2300      	movs	r3, #0
 800120e:	e006      	b.n	800121e <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8001210:	4809      	ldr	r0, [pc, #36]	@ (8001238 <mpu9250_init+0x108>)
 8001212:	f7ff fed1 	bl	8000fb8 <send_bluetooth_message>
    mpu9250_initialized=true;
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <mpu9250_init+0x104>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
    return true;
 800121c:	2301      	movs	r3, #1
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	0800ab74 	.word	0x0800ab74
 800122c:	0800aba0 	.word	0x0800aba0
 8001230:	0800abb4 	.word	0x0800abb4
 8001234:	20000224 	.word	0x20000224
 8001238:	0800abdc 	.word	0x0800abdc

0800123c <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 800123c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001240:	b088      	sub	sp, #32
 8001242:	af04      	add	r7, sp, #16
    if (!mpu9250_initialized) {
 8001244:	4b4e      	ldr	r3, [pc, #312]	@ (8001380 <mpu9250_calibrate_bias+0x144>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	f083 0301 	eor.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <mpu9250_calibrate_bias+0x1e>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 8001252:	484c      	ldr	r0, [pc, #304]	@ (8001384 <mpu9250_calibrate_bias+0x148>)
 8001254:	f7ff feb0 	bl	8000fb8 <send_bluetooth_message>
        return;
 8001258:	e08e      	b.n	8001378 <mpu9250_calibrate_bias+0x13c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 800125a:	484b      	ldr	r0, [pc, #300]	@ (8001388 <mpu9250_calibrate_bias+0x14c>)
 800125c:	f7ff feac 	bl	8000fb8 <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 1000;
 8001260:	4b4a      	ldr	r3, [pc, #296]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 8001262:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001266:	611a      	str	r2, [r3, #16]
    float sum_x = 0, sum_y = 0, sum_z = 0;
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	e02e      	b.n	80012de <mpu9250_calibrate_bias+0xa2>
        mpu9250_read_gyro();
 8001280:	f000 f88a 	bl	8001398 <mpu9250_read_gyro>
        sum_x += gyro.gyro_x;
 8001284:	4b42      	ldr	r3, [pc, #264]	@ (8001390 <mpu9250_calibrate_bias+0x154>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001292:	ed97 7a03 	vldr	s14, [r7, #12]
 8001296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129a:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_y += gyro.gyro_y;
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <mpu9250_calibrate_bias+0x154>)
 80012a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80012b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b4:	edc7 7a02 	vstr	s15, [r7, #8]
        sum_z += gyro.gyro_z;
 80012b8:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <mpu9250_calibrate_bias+0x154>)
 80012ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 80012d2:	2003      	movs	r0, #3
 80012d4:	f002 f956 	bl	8003584 <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8cb      	bhi.n	8001280 <mpu9250_calibrate_bias+0x44>
    }

    enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
 80012e8:	4b28      	ldr	r3, [pc, #160]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f4:	edd7 6a03 	vldr	s13, [r7, #12]
 80012f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 80012fe:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
 8001302:	4b22      	ldr	r3, [pc, #136]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800130e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 8001318:	edc3 7a01 	vstr	s15, [r3, #4]
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001328:	edd7 6a01 	vldr	s13, [r7, #4]
 800132c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 8001332:	edc3 7a02 	vstr	s15, [r3, #8]
    enhanced_gyro.calibrated = true;
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 8001338:	2201      	movs	r2, #1
 800133a:	731a      	strb	r2, [r3, #12]

    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 800133c:	4b13      	ldr	r3, [pc, #76]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 800133e:	681b      	ldr	r3, [r3, #0]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f909 	bl	8000558 <__aeabi_f2d>
 8001346:	4680      	mov	r8, r0
 8001348:	4689      	mov	r9, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 800134c:	685b      	ldr	r3, [r3, #4]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f902 	bl	8000558 <__aeabi_f2d>
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <mpu9250_calibrate_bias+0x150>)
 800135a:	689b      	ldr	r3, [r3, #8]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8fb 	bl	8000558 <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800136a:	e9cd 4500 	strd	r4, r5, [sp]
 800136e:	4642      	mov	r2, r8
 8001370:	464b      	mov	r3, r9
 8001372:	4808      	ldr	r0, [pc, #32]	@ (8001394 <mpu9250_calibrate_bias+0x158>)
 8001374:	f7ff fe36 	bl	8000fe4 <send_bluetooth_printf>
}
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001380:	20000224 	.word	0x20000224
 8001384:	0800abf0 	.word	0x0800abf0
 8001388:	0800ac1c 	.word	0x0800ac1c
 800138c:	20000228 	.word	0x20000228
 8001390:	20001468 	.word	0x20001468
 8001394:	0800ac50 	.word	0x0800ac50

08001398 <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 800139e:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <mpu9250_read_gyro+0xc4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	f083 0301 	eor.w	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 80013ac:	482c      	ldr	r0, [pc, #176]	@ (8001460 <mpu9250_read_gyro+0xc8>)
 80013ae:	f7ff fe03 	bl	8000fb8 <send_bluetooth_message>
        return;
 80013b2:	e050      	b.n	8001456 <mpu9250_read_gyro+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 80013b4:	23c3      	movs	r3, #195	@ 0xc3
 80013b6:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013be:	4829      	ldr	r0, [pc, #164]	@ (8001464 <mpu9250_read_gyro+0xcc>)
 80013c0:	f003 f81e 	bl	8004400 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80013c4:	1df9      	adds	r1, r7, #7
 80013c6:	2364      	movs	r3, #100	@ 0x64
 80013c8:	2201      	movs	r2, #1
 80013ca:	4827      	ldr	r0, [pc, #156]	@ (8001468 <mpu9250_read_gyro+0xd0>)
 80013cc:	f003 fd45 	bl	8004e5a <HAL_SPI_Transmit>
 80013d0:	4603      	mov	r3, r0
 80013d2:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013e0:	4820      	ldr	r0, [pc, #128]	@ (8001464 <mpu9250_read_gyro+0xcc>)
 80013e2:	f003 f80d 	bl	8004400 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 80013e6:	4821      	ldr	r0, [pc, #132]	@ (800146c <mpu9250_read_gyro+0xd4>)
 80013e8:	f7ff fde6 	bl	8000fb8 <send_bluetooth_message>
        return;
 80013ec:	e033      	b.n	8001456 <mpu9250_read_gyro+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 80013ee:	f107 0108 	add.w	r1, r7, #8
 80013f2:	2364      	movs	r3, #100	@ 0x64
 80013f4:	2206      	movs	r2, #6
 80013f6:	481c      	ldr	r0, [pc, #112]	@ (8001468 <mpu9250_read_gyro+0xd0>)
 80013f8:	f003 fe73 	bl	80050e2 <HAL_SPI_Receive>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001406:	4817      	ldr	r0, [pc, #92]	@ (8001464 <mpu9250_read_gyro+0xcc>)
 8001408:	f002 fffa 	bl	8004400 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 8001412:	4817      	ldr	r0, [pc, #92]	@ (8001470 <mpu9250_read_gyro+0xd8>)
 8001414:	f7ff fdd0 	bl	8000fb8 <send_bluetooth_message>
        return;
 8001418:	e01d      	b.n	8001456 <mpu9250_read_gyro+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 800141a:	7a3b      	ldrb	r3, [r7, #8]
 800141c:	b21b      	sxth	r3, r3
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b21a      	sxth	r2, r3
 8001422:	7a7b      	ldrb	r3, [r7, #9]
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b21a      	sxth	r2, r3
 800142a:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <mpu9250_read_gyro+0xdc>)
 800142c:	801a      	strh	r2, [r3, #0]
    gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 800142e:	7abb      	ldrb	r3, [r7, #10]
 8001430:	b21b      	sxth	r3, r3
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	7afb      	ldrb	r3, [r7, #11]
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b21a      	sxth	r2, r3
 800143e:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <mpu9250_read_gyro+0xdc>)
 8001440:	805a      	strh	r2, [r3, #2]
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001442:	7b3b      	ldrb	r3, [r7, #12]
 8001444:	b21b      	sxth	r3, r3
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	7b7b      	ldrb	r3, [r7, #13]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <mpu9250_read_gyro+0xdc>)
 8001454:	809a      	strh	r2, [r3, #4]
}
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000224 	.word	0x20000224
 8001460:	0800ac80 	.word	0x0800ac80
 8001464:	40020400 	.word	0x40020400
 8001468:	20000284 	.word	0x20000284
 800146c:	0800acb4 	.word	0x0800acb4
 8001470:	0800acd8 	.word	0x0800acd8
 8001474:	20001468 	.word	0x20001468

08001478 <initialize_hardware_systems>:


/**
 * @brief Initialize all hardware systems and perform diagnostics
 */
static void initialize_hardware_systems(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    //send_bluetooth_message("\r\n" "="*60 "\r\n");
    send_bluetooth_message("🤖 CHAMPIONSHIP MICROMOUSE INITIALIZATION 🤖\r\n");
 800147c:	4828      	ldr	r0, [pc, #160]	@ (8001520 <initialize_hardware_systems+0xa8>)
 800147e:	f7ff fd9b 	bl	8000fb8 <send_bluetooth_message>
    //send_bluetooth_message("="*60 "\r\n");

    // Initialize PWM for motors
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6 (MOTOR_IN1)
 8001482:	2100      	movs	r1, #0
 8001484:	4827      	ldr	r0, [pc, #156]	@ (8001524 <initialize_hardware_systems+0xac>)
 8001486:	f004 fad9 	bl	8005a3c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // PA7 (MOTOR_IN2)
 800148a:	2104      	movs	r1, #4
 800148c:	4825      	ldr	r0, [pc, #148]	@ (8001524 <initialize_hardware_systems+0xac>)
 800148e:	f004 fad5 	bl	8005a3c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // PB0 (MOTOR_IN3)
 8001492:	2108      	movs	r1, #8
 8001494:	4823      	ldr	r0, [pc, #140]	@ (8001524 <initialize_hardware_systems+0xac>)
 8001496:	f004 fad1 	bl	8005a3c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PB1 (MOTOR_IN4)
 800149a:	210c      	movs	r1, #12
 800149c:	4821      	ldr	r0, [pc, #132]	@ (8001524 <initialize_hardware_systems+0xac>)
 800149e:	f004 facd 	bl	8005a3c <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET); // Enable DRV8833
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014a8:	481f      	ldr	r0, [pc, #124]	@ (8001528 <initialize_hardware_systems+0xb0>)
 80014aa:	f002 ffa9 	bl	8004400 <HAL_GPIO_WritePin>

    // Verify ADC GPIO configuration
    verify_adc_gpio_configuration();
 80014ae:	f000 fc7d 	bl	8001dac <verify_adc_gpio_configuration>
    adc_system_diagnostics();
 80014b2:	f001 fb49 	bl	8002b48 <adc_system_diagnostics>

    // Initialize and test MPU9250 gyroscope
    if (mpu9250_init()) {
 80014b6:	f7ff fe3b 	bl	8001130 <mpu9250_init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00f      	beq.n	80014e0 <initialize_hardware_systems+0x68>
        send_bluetooth_message("✅ MPU9250 gyroscope initialized successfully\r\n");
 80014c0:	481a      	ldr	r0, [pc, #104]	@ (800152c <initialize_hardware_systems+0xb4>)
 80014c2:	f7ff fd79 	bl	8000fb8 <send_bluetooth_message>
        send_bluetooth_message("⚠️ KEEP ROBOT STATIONARY during gyro calibration!\r\n");
 80014c6:	481a      	ldr	r0, [pc, #104]	@ (8001530 <initialize_hardware_systems+0xb8>)
 80014c8:	f7ff fd76 	bl	8000fb8 <send_bluetooth_message>
        HAL_Delay(2000);
 80014cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014d0:	f002 f858 	bl	8003584 <HAL_Delay>
        mpu9250_calibrate_bias();
 80014d4:	f7ff feb2 	bl	800123c <mpu9250_calibrate_bias>
        send_bluetooth_message("✅ Gyro calibration complete\r\n");
 80014d8:	4816      	ldr	r0, [pc, #88]	@ (8001534 <initialize_hardware_systems+0xbc>)
 80014da:	f7ff fd6d 	bl	8000fb8 <send_bluetooth_message>
 80014de:	e002      	b.n	80014e6 <initialize_hardware_systems+0x6e>
    } else {
        send_bluetooth_message("⚠️ Gyro initialization failed - using basic movement\r\n");
 80014e0:	4815      	ldr	r0, [pc, #84]	@ (8001538 <initialize_hardware_systems+0xc0>)
 80014e2:	f7ff fd69 	bl	8000fb8 <send_bluetooth_message>
    }

    // Initialize encoders
    start_encoders();
 80014e6:	f000 fe21 	bl	800212c <start_encoders>
    HAL_Delay(100);
 80014ea:	2064      	movs	r0, #100	@ 0x64
 80014ec:	f002 f84a 	bl	8003584 <HAL_Delay>

    // Test encoder functionality
    if (get_left_encoder_total() == 0 && get_right_encoder_total() == 0) {
 80014f0:	f000 fe08 	bl	8002104 <get_left_encoder_total>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d108      	bne.n	800150c <initialize_hardware_systems+0x94>
 80014fa:	f000 fe0d 	bl	8002118 <get_right_encoder_total>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d103      	bne.n	800150c <initialize_hardware_systems+0x94>
        send_bluetooth_message("⚠️ WARNING: Encoders may not be working properly\r\n");
 8001504:	480d      	ldr	r0, [pc, #52]	@ (800153c <initialize_hardware_systems+0xc4>)
 8001506:	f7ff fd57 	bl	8000fb8 <send_bluetooth_message>
 800150a:	e002      	b.n	8001512 <initialize_hardware_systems+0x9a>
    } else {
        send_bluetooth_message("✅ Encoders initialized and responding\r\n");
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <initialize_hardware_systems+0xc8>)
 800150e:	f7ff fd53 	bl	8000fb8 <send_bluetooth_message>
    }

    // Initialize maze exploration system
    initialize_maze_exploration();
 8001512:	f000 fce3 	bl	8001edc <initialize_maze_exploration>

    send_bluetooth_message("✅ All systems initialized successfully!\r\n");
 8001516:	480b      	ldr	r0, [pc, #44]	@ (8001544 <initialize_hardware_systems+0xcc>)
 8001518:	f7ff fd4e 	bl	8000fb8 <send_bluetooth_message>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	0800ae34 	.word	0x0800ae34
 8001524:	2000036c 	.word	0x2000036c
 8001528:	40020800 	.word	0x40020800
 800152c:	0800ae68 	.word	0x0800ae68
 8001530:	0800ae9c 	.word	0x0800ae9c
 8001534:	0800aed4 	.word	0x0800aed4
 8001538:	0800aef4 	.word	0x0800aef4
 800153c:	0800af30 	.word	0x0800af30
 8001540:	0800af68 	.word	0x0800af68
 8001544:	0800af94 	.word	0x0800af94

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154e:	f001 ffa7 	bl	80034a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001552:	f000 f84f 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001556:	f000 fb47 	bl	8001be8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800155a:	f000 f8b3 	bl	80016c4 <MX_ADC1_Init>
  MX_SPI2_Init();
 800155e:	f000 f903 	bl	8001768 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001562:	f000 f937 	bl	80017d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001566:	f000 f9d5 	bl	8001914 <MX_TIM2_Init>
  MX_TIM4_Init();
 800156a:	f000 fabf 	bl	8001aec <MX_TIM4_Init>
  MX_USART6_UART_Init();
 800156e:	f000 fb11 	bl	8001b94 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001572:	f000 fa23 	bl	80019bc <MX_TIM3_Init>


  // main.c — after SystemClock_Config();


  dwt_delay_init(HAL_RCC_GetHCLKFreq());
 8001576:	f003 fbb3 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 800157a:	4603      	mov	r3, r0
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fc87 	bl	8001e90 <dwt_delay_init>


  /* USER CODE BEGIN 2 */
  // Initialize all hardware systems
  initialize_hardware_systems();
 8001582:	f7ff ff79 	bl	8001478 <initialize_hardware_systems>

  // Run system diagnostics
  //run_system_diagnostics();

  // Play startup sequence
  play_startup_tone();
 8001586:	f7ff fcfb 	bl	8000f80 <play_startup_tone>
  led_sequence_startup();
 800158a:	f001 ff3d 	bl	8003408 <led_sequence_startup>

  // Send startup message
  send_bluetooth_message("\r\n🎮 MICROMOUSE CONTROL READY 🎮\r\n");
 800158e:	4813      	ldr	r0, [pc, #76]	@ (80015dc <main+0x94>)
 8001590:	f7ff fd12 	bl	8000fb8 <send_bluetooth_message>
  send_bluetooth_message("LEFT button: Start exploration\r\n");
 8001594:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <main+0x98>)
 8001596:	f7ff fd0f 	bl	8000fb8 <send_bluetooth_message>
  send_bluetooth_message("RIGHT button: Status/Emergency stop\r\n");
 800159a:	4812      	ldr	r0, [pc, #72]	@ (80015e4 <main+0x9c>)
 800159c:	f7ff fd0c 	bl	8000fb8 <send_bluetooth_message>
  send_bluetooth_message("Waiting for user input...\r\n");
 80015a0:	4811      	ldr	r0, [pc, #68]	@ (80015e8 <main+0xa0>)
 80015a2:	f7ff fd09 	bl	8000fb8 <send_bluetooth_message>

    // Initial status
  last_status_time = HAL_GetTick();
 80015a6:	f001 ffe1 	bl	800356c <HAL_GetTick>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <main+0xa4>)
 80015ae:	6013      	str	r3, [r2, #0]
  last_blink_time = HAL_GetTick();
 80015b0:	f001 ffdc 	bl	800356c <HAL_GetTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <main+0xa8>)
 80015b8:	6013      	str	r3, [r2, #0]
//      HAL_Delay(2);                     // ~500 Hz outer loop
//  }


  // 0 = auto (both → center; else follow visible side), 1 = left, 2 = right
  int mode = 0;               // WF_AUTO
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  int base_pwm = 570;         // use the speed you tuned at
 80015be:	f240 233a 	movw	r3, #570	@ 0x23a
 80015c2:	603b      	str	r3, [r7, #0]

  // bootstrap targets & reset integrators
  wall_follow_reset_int(mode, base_pwm);
 80015c4:	6839      	ldr	r1, [r7, #0]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fe70 	bl	80022ac <wall_follow_reset_int>

  while (1) {
      wall_follow_step();     // computes e, PID, sets motor PWMs
 80015cc:	f000 fea6 	bl	800231c <wall_follow_step>
      //HAL_Delay(2);           // keep a steady loop
      dwt_delay_us(50);
 80015d0:	2032      	movs	r0, #50	@ 0x32
 80015d2:	f000 fc3b 	bl	8001e4c <dwt_delay_us>
      wall_follow_step();     // computes e, PID, sets motor PWMs
 80015d6:	bf00      	nop
 80015d8:	e7f8      	b.n	80015cc <main+0x84>
 80015da:	bf00      	nop
 80015dc:	0800b134 	.word	0x0800b134
 80015e0:	0800b15c 	.word	0x0800b15c
 80015e4:	0800b180 	.word	0x0800b180
 80015e8:	0800b1a8 	.word	0x0800b1a8
 80015ec:	20001490 	.word	0x20001490
 80015f0:	20001494 	.word	0x20001494

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b094      	sub	sp, #80	@ 0x50
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0320 	add.w	r3, r7, #32
 80015fe:	2230      	movs	r2, #48	@ 0x30
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f007 f864 	bl	80086d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <SystemClock_Config+0xc8>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	4a26      	ldr	r2, [pc, #152]	@ (80016bc <SystemClock_Config+0xc8>)
 8001622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001626:	6413      	str	r3, [r2, #64]	@ 0x40
 8001628:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <SystemClock_Config+0xc8>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <SystemClock_Config+0xcc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a20      	ldr	r2, [pc, #128]	@ (80016c0 <SystemClock_Config+0xcc>)
 800163e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <SystemClock_Config+0xcc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001650:	2302      	movs	r3, #2
 8001652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001654:	2301      	movs	r3, #1
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001658:	2310      	movs	r3, #16
 800165a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165c:	2302      	movs	r3, #2
 800165e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001660:	2300      	movs	r3, #0
 8001662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001664:	2310      	movs	r3, #16
 8001666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001668:	23a8      	movs	r3, #168	@ 0xa8
 800166a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800166c:	2302      	movs	r3, #2
 800166e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001670:	2304      	movs	r3, #4
 8001672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	4618      	mov	r0, r3
 800167a:	f002 ff0d 	bl	8004498 <HAL_RCC_OscConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001684:	f000 fbce 	bl	8001e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001688:	230f      	movs	r3, #15
 800168a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168c:	2302      	movs	r3, #2
 800168e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	2102      	movs	r1, #2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 f96f 	bl	8004988 <HAL_RCC_ClockConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016b0:	f000 fbb8 	bl	8001e24 <Error_Handler>
  }
}
 80016b4:	bf00      	nop
 80016b6:	3750      	adds	r7, #80	@ 0x50
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000

080016c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ca:	463b      	mov	r3, r7
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016d6:	4b21      	ldr	r3, [pc, #132]	@ (800175c <MX_ADC1_Init+0x98>)
 80016d8:	4a21      	ldr	r2, [pc, #132]	@ (8001760 <MX_ADC1_Init+0x9c>)
 80016da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <MX_ADC1_Init+0x98>)
 80016de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <MX_ADC1_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_ADC1_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <MX_ADC1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <MX_ADC1_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MX_ADC1_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001704:	4b15      	ldr	r3, [pc, #84]	@ (800175c <MX_ADC1_Init+0x98>)
 8001706:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <MX_ADC1_Init+0xa0>)
 8001708:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <MX_ADC1_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <MX_ADC1_Init+0x98>)
 8001712:	2201      	movs	r2, #1
 8001714:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <MX_ADC1_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <MX_ADC1_Init+0x98>)
 8001720:	2201      	movs	r2, #1
 8001722:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001724:	480d      	ldr	r0, [pc, #52]	@ (800175c <MX_ADC1_Init+0x98>)
 8001726:	f001 ff51 	bl	80035cc <HAL_ADC_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001730:	f000 fb78 	bl	8001e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001734:	2300      	movs	r3, #0
 8001736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001738:	2301      	movs	r3, #1
 800173a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800173c:	2304      	movs	r3, #4
 800173e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001740:	463b      	mov	r3, r7
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	@ (800175c <MX_ADC1_Init+0x98>)
 8001746:	f002 f905 	bl	8003954 <HAL_ADC_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001750:	f000 fb68 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2000023c 	.word	0x2000023c
 8001760:	40012000 	.word	0x40012000
 8001764:	0f000001 	.word	0x0f000001

08001768 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800176c:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <MX_SPI2_Init+0x64>)
 800176e:	4a18      	ldr	r2, [pc, #96]	@ (80017d0 <MX_SPI2_Init+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001772:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <MX_SPI2_Init+0x64>)
 8001774:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001778:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_SPI2_Init+0x64>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <MX_SPI2_Init+0x64>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_SPI2_Init+0x64>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_SPI2_Init+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_SPI2_Init+0x64>)
 8001794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001798:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_SPI2_Init+0x64>)
 800179c:	2230      	movs	r2, #48	@ 0x30
 800179e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <MX_SPI2_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_SPI2_Init+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <MX_SPI2_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_SPI2_Init+0x64>)
 80017b4:	220a      	movs	r2, #10
 80017b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <MX_SPI2_Init+0x64>)
 80017ba:	f003 fac5 	bl	8004d48 <HAL_SPI_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017c4:	f000 fb2e 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000284 	.word	0x20000284
 80017d0:	40003800 	.word	0x40003800

080017d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b096      	sub	sp, #88	@ 0x58
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2220      	movs	r2, #32
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f006 ff5f 	bl	80086d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001812:	4b3e      	ldr	r3, [pc, #248]	@ (800190c <MX_TIM1_Init+0x138>)
 8001814:	4a3e      	ldr	r2, [pc, #248]	@ (8001910 <MX_TIM1_Init+0x13c>)
 8001816:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8001818:	4b3c      	ldr	r3, [pc, #240]	@ (800190c <MX_TIM1_Init+0x138>)
 800181a:	2214      	movs	r2, #20
 800181c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b3b      	ldr	r3, [pc, #236]	@ (800190c <MX_TIM1_Init+0x138>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8001824:	4b39      	ldr	r3, [pc, #228]	@ (800190c <MX_TIM1_Init+0x138>)
 8001826:	22c8      	movs	r2, #200	@ 0xc8
 8001828:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182a:	4b38      	ldr	r3, [pc, #224]	@ (800190c <MX_TIM1_Init+0x138>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001830:	4b36      	ldr	r3, [pc, #216]	@ (800190c <MX_TIM1_Init+0x138>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001836:	4b35      	ldr	r3, [pc, #212]	@ (800190c <MX_TIM1_Init+0x138>)
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800183c:	4833      	ldr	r0, [pc, #204]	@ (800190c <MX_TIM1_Init+0x138>)
 800183e:	f004 f855 	bl	80058ec <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001848:	f000 faec 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001850:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001852:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001856:	4619      	mov	r1, r3
 8001858:	482c      	ldr	r0, [pc, #176]	@ (800190c <MX_TIM1_Init+0x138>)
 800185a:	f004 fce9 	bl	8006230 <HAL_TIM_ConfigClockSource>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001864:	f000 fade 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001868:	4828      	ldr	r0, [pc, #160]	@ (800190c <MX_TIM1_Init+0x138>)
 800186a:	f004 f88e 	bl	800598a <HAL_TIM_PWM_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001874:	f000 fad6 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001880:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001884:	4619      	mov	r1, r3
 8001886:	4821      	ldr	r0, [pc, #132]	@ (800190c <MX_TIM1_Init+0x138>)
 8001888:	f005 f89e 	bl	80069c8 <HAL_TIMEx_MasterConfigSynchronization>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001892:	f000 fac7 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001896:	2360      	movs	r3, #96	@ 0x60
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 800189a:	2364      	movs	r3, #100	@ 0x64
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a2:	2300      	movs	r3, #0
 80018a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b6:	2208      	movs	r2, #8
 80018b8:	4619      	mov	r1, r3
 80018ba:	4814      	ldr	r0, [pc, #80]	@ (800190c <MX_TIM1_Init+0x138>)
 80018bc:	f004 fbf6 	bl	80060ac <HAL_TIM_PWM_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80018c6:	f000 faad 	bl	8001e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4807      	ldr	r0, [pc, #28]	@ (800190c <MX_TIM1_Init+0x138>)
 80018ee:	f005 f8d9 	bl	8006aa4 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80018f8:	f000 fa94 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018fc:	4803      	ldr	r0, [pc, #12]	@ (800190c <MX_TIM1_Init+0x138>)
 80018fe:	f001 fb65 	bl	8002fcc <HAL_TIM_MspPostInit>

}
 8001902:	bf00      	nop
 8001904:	3758      	adds	r7, #88	@ 0x58
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002dc 	.word	0x200002dc
 8001910:	40010000 	.word	0x40010000

08001914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	@ 0x30
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	2224      	movs	r2, #36	@ 0x24
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f006 fed4 	bl	80086d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001930:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <MX_TIM2_Init+0xa4>)
 8001932:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <MX_TIM2_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_TIM2_Init+0xa4>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001944:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <MX_TIM2_Init+0xa4>)
 8001946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800194a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_TIM2_Init+0xa4>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <MX_TIM2_Init+0xa4>)
 8001954:	2280      	movs	r2, #128	@ 0x80
 8001956:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001958:	2303      	movs	r3, #3
 800195a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001960:	2301      	movs	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001970:	2301      	movs	r3, #1
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	4619      	mov	r1, r3
 8001982:	480d      	ldr	r0, [pc, #52]	@ (80019b8 <MX_TIM2_Init+0xa4>)
 8001984:	f004 f96e 	bl	8005c64 <HAL_TIM_Encoder_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800198e:	f000 fa49 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	@ (80019b8 <MX_TIM2_Init+0xa4>)
 80019a0:	f005 f812 	bl	80069c8 <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80019aa:	f000 fa3b 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3730      	adds	r7, #48	@ 0x30
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000324 	.word	0x20000324

080019bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08e      	sub	sp, #56	@ 0x38
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ec:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 80019ee:	4a3e      	ldr	r2, [pc, #248]	@ (8001ae8 <MX_TIM3_Init+0x12c>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80019f2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 80019f4:	2204      	movs	r2, #4
 80019f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 80019fe:	4b39      	ldr	r3, [pc, #228]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a00:	f240 3246 	movw	r2, #838	@ 0x346
 8001a04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a12:	4834      	ldr	r0, [pc, #208]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a14:	f003 ff6a 	bl	80058ec <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a1e:	f000 fa01 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	482d      	ldr	r0, [pc, #180]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a30:	f004 fbfe 	bl	8006230 <HAL_TIM_ConfigClockSource>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a3a:	f000 f9f3 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a3e:	4829      	ldr	r0, [pc, #164]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a40:	f003 ffa3 	bl	800598a <HAL_TIM_PWM_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a4a:	f000 f9eb 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a56:	f107 0320 	add.w	r3, r7, #32
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4821      	ldr	r0, [pc, #132]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a5e:	f004 ffb3 	bl	80069c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a68:	f000 f9dc 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a6c:	2360      	movs	r3, #96	@ 0x60
 8001a6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4818      	ldr	r0, [pc, #96]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a84:	f004 fb12 	bl	80060ac <HAL_TIM_PWM_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a8e:	f000 f9c9 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2204      	movs	r2, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4812      	ldr	r0, [pc, #72]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001a9a:	f004 fb07 	bl	80060ac <HAL_TIM_PWM_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001aa4:	f000 f9be 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2208      	movs	r2, #8
 8001aac:	4619      	mov	r1, r3
 8001aae:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001ab0:	f004 fafc 	bl	80060ac <HAL_TIM_PWM_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001aba:	f000 f9b3 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	220c      	movs	r2, #12
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001ac6:	f004 faf1 	bl	80060ac <HAL_TIM_PWM_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001ad0:	f000 f9a8 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ad4:	4803      	ldr	r0, [pc, #12]	@ (8001ae4 <MX_TIM3_Init+0x128>)
 8001ad6:	f001 fa79 	bl	8002fcc <HAL_TIM_MspPostInit>

}
 8001ada:	bf00      	nop
 8001adc:	3738      	adds	r7, #56	@ 0x38
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000036c 	.word	0x2000036c
 8001ae8:	40000400 	.word	0x40000400

08001aec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	@ 0x30
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	2224      	movs	r2, #36	@ 0x24
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f006 fde8 	bl	80086d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b08:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <MX_TIM4_Init+0xa0>)
 8001b0a:	4a21      	ldr	r2, [pc, #132]	@ (8001b90 <MX_TIM4_Init+0xa4>)
 8001b0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <MX_TIM4_Init+0xa0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <MX_TIM4_Init+0xa0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <MX_TIM4_Init+0xa0>)
 8001b1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <MX_TIM4_Init+0xa0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b28:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <MX_TIM4_Init+0xa0>)
 8001b2a:	2280      	movs	r2, #128	@ 0x80
 8001b2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b36:	2301      	movs	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b46:	2301      	movs	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	@ (8001b8c <MX_TIM4_Init+0xa0>)
 8001b5a:	f004 f883 	bl	8005c64 <HAL_TIM_Encoder_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b64:	f000 f95e 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	@ (8001b8c <MX_TIM4_Init+0xa0>)
 8001b76:	f004 ff27 	bl	80069c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001b80:	f000 f950 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3730      	adds	r7, #48	@ 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200003b4 	.word	0x200003b4
 8001b90:	40000800 	.word	0x40000800

08001b94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b98:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <MX_USART6_UART_Init+0x4c>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	@ (8001be4 <MX_USART6_UART_Init+0x50>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <MX_USART6_UART_Init+0x4c>)
 8001ba0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ba4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <MX_USART6_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <MX_USART6_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <MX_USART6_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <MX_USART6_UART_Init+0x4c>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <MX_USART6_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <MX_USART6_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	@ (8001be0 <MX_USART6_UART_Init+0x4c>)
 8001bcc:	f004 ffd0 	bl	8006b70 <HAL_UART_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001bd6:	f000 f925 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200003fc 	.word	0x200003fc
 8001be4:	40011400 	.word	0x40011400

08001be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
 8001bfc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b4b      	ldr	r3, [pc, #300]	@ (8001d30 <MX_GPIO_Init+0x148>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a4a      	ldr	r2, [pc, #296]	@ (8001d30 <MX_GPIO_Init+0x148>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b48      	ldr	r3, [pc, #288]	@ (8001d30 <MX_GPIO_Init+0x148>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b44      	ldr	r3, [pc, #272]	@ (8001d30 <MX_GPIO_Init+0x148>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a43      	ldr	r2, [pc, #268]	@ (8001d30 <MX_GPIO_Init+0x148>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b41      	ldr	r3, [pc, #260]	@ (8001d30 <MX_GPIO_Init+0x148>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d30 <MX_GPIO_Init+0x148>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d30 <MX_GPIO_Init+0x148>)
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b3a      	ldr	r3, [pc, #232]	@ (8001d30 <MX_GPIO_Init+0x148>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c58:	4836      	ldr	r0, [pc, #216]	@ (8001d34 <MX_GPIO_Init+0x14c>)
 8001c5a:	f002 fbd1 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f241 3130 	movw	r1, #4912	@ 0x1330
 8001c64:	4834      	ldr	r0, [pc, #208]	@ (8001d38 <MX_GPIO_Init+0x150>)
 8001c66:	f002 fbcb 	bl	8004400 <HAL_GPIO_WritePin>
                          |EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001c70:	4832      	ldr	r0, [pc, #200]	@ (8001d3c <MX_GPIO_Init+0x154>)
 8001c72:	f002 fbc5 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 8001c76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4829      	ldr	r0, [pc, #164]	@ (8001d34 <MX_GPIO_Init+0x14c>)
 8001c90:	f002 fa32 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8001c94:	2302      	movs	r3, #2
 8001c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4824      	ldr	r0, [pc, #144]	@ (8001d3c <MX_GPIO_Init+0x154>)
 8001caa:	f002 fa25 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 8001cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481c      	ldr	r0, [pc, #112]	@ (8001d38 <MX_GPIO_Init+0x150>)
 8001cc6:	f002 fa17 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_LEFT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 8001cca:	f241 3330 	movw	r3, #4912	@ 0x1330
 8001cce:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4815      	ldr	r0, [pc, #84]	@ (8001d38 <MX_GPIO_Init+0x150>)
 8001ce4:	f002 fa08 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_RIGHT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin;
 8001ce8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480e      	ldr	r0, [pc, #56]	@ (8001d3c <MX_GPIO_Init+0x154>)
 8001d02:	f002 f9f9 	bl	80040f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2105      	movs	r1, #5
 8001d0a:	2007      	movs	r0, #7
 8001d0c:	f002 f92b 	bl	8003f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d10:	2007      	movs	r0, #7
 8001d12:	f002 f944 	bl	8003f9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2105      	movs	r1, #5
 8001d1a:	2028      	movs	r0, #40	@ 0x28
 8001d1c:	f002 f923 	bl	8003f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d20:	2028      	movs	r0, #40	@ 0x28
 8001d22:	f002 f93c 	bl	8003f9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d26:	bf00      	nop
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020000 	.word	0x40020000

08001d40 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 8001d4a:	f001 fc0f 	bl	800356c <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_GPIO_EXTI_Callback+0x58>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2bc8      	cmp	r3, #200	@ 0xc8
 8001d5a:	d919      	bls.n	8001d90 <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d109      	bne.n	8001d76 <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 8001d68:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 8001d6e:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001d70:	f7ff f922 	bl	8000fb8 <send_bluetooth_message>
 8001d74:	e009      	b.n	8001d8a <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d7c:	d105      	bne.n	8001d8a <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d80:	2202      	movs	r2, #2
 8001d82:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 8001d84:	4808      	ldr	r0, [pc, #32]	@ (8001da8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001d86:	f7ff f917 	bl	8000fb8 <send_bluetooth_message>
        }
        last_press = current_time;
 8001d8a:	4a03      	ldr	r2, [pc, #12]	@ (8001d98 <HAL_GPIO_EXTI_Callback+0x58>)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6013      	str	r3, [r2, #0]
    }
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20001498 	.word	0x20001498
 8001d9c:	2000148c 	.word	0x2000148c
 8001da0:	2000148d 	.word	0x2000148d
 8001da4:	0800b1c4 	.word	0x0800b1c4
 8001da8:	0800b1dc 	.word	0x0800b1dc

08001dac <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4812      	ldr	r0, [pc, #72]	@ (8001e1c <verify_adc_gpio_configuration+0x70>)
 8001dd2:	f002 f991 	bl	80040f8 <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480f      	ldr	r0, [pc, #60]	@ (8001e1c <verify_adc_gpio_configuration+0x70>)
 8001de0:	f002 f98a 	bl	80040f8 <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001de4:	2308      	movs	r3, #8
 8001de6:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <verify_adc_gpio_configuration+0x70>)
 8001dee:	f002 f983 	bl	80040f8 <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001df2:	2310      	movs	r3, #16
 8001df4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4808      	ldr	r0, [pc, #32]	@ (8001e1c <verify_adc_gpio_configuration+0x70>)
 8001dfc:	f002 f97c 	bl	80040f8 <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e00:	2320      	movs	r3, #32
 8001e02:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4804      	ldr	r0, [pc, #16]	@ (8001e1c <verify_adc_gpio_configuration+0x70>)
 8001e0a:	f002 f975 	bl	80040f8 <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 8001e0e:	4804      	ldr	r0, [pc, #16]	@ (8001e20 <verify_adc_gpio_configuration+0x74>)
 8001e10:	f7ff f8d2 	bl	8000fb8 <send_bluetooth_message>
}
 8001e14:	bf00      	nop
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	0800b1f4 	.word	0x0800b1f4

08001e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8001e2c:	2110      	movs	r1, #16
 8001e2e:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <Error_Handler+0x24>)
 8001e30:	f002 faff 	bl	8004432 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8001e34:	2120      	movs	r1, #32
 8001e36:	4804      	ldr	r0, [pc, #16]	@ (8001e48 <Error_Handler+0x24>)
 8001e38:	f002 fafb 	bl	8004432 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8001e3c:	2064      	movs	r0, #100	@ 0x64
 8001e3e:	f001 fba1 	bl	8003584 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8001e42:	bf00      	nop
 8001e44:	e7f2      	b.n	8001e2c <Error_Handler+0x8>
 8001e46:	bf00      	nop
 8001e48:	40020400 	.word	0x40020400

08001e4c <dwt_delay_us>:
static Position queue_pop(BFSQueue* q) {
    return q->queue[q->head++];
}
static uint32_t dwt_cycles_per_us;

void dwt_delay_us(uint32_t us) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <dwt_delay_us+0x3c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * dwt_cycles_per_us;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <dwt_delay_us+0x40>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks) { __NOP(); }
 8001e66:	e000      	b.n	8001e6a <dwt_delay_us+0x1e>
 8001e68:	bf00      	nop
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <dwt_delay_us+0x3c>)
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <dwt_delay_us+0x1c>
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e0001000 	.word	0xe0001000
 8001e8c:	2000149c 	.word	0x2000149c

08001e90 <dwt_delay_init>:
void dwt_delay_init(uint32_t cpu_hz) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <dwt_delay_init+0x3c>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ecc <dwt_delay_init+0x3c>)
 8001e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ea2:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <dwt_delay_init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a09      	ldr	r2, [pc, #36]	@ (8001ed0 <dwt_delay_init+0x40>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]
    dwt_cycles_per_us = cpu_hz / 1000000U; // e.g., 84 for 84 MHz
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a08      	ldr	r2, [pc, #32]	@ (8001ed4 <dwt_delay_init+0x44>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	0c9b      	lsrs	r3, r3, #18
 8001eba:	4a07      	ldr	r2, [pc, #28]	@ (8001ed8 <dwt_delay_init+0x48>)
 8001ebc:	6013      	str	r3, [r2, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000edf0 	.word	0xe000edf0
 8001ed0:	e0001000 	.word	0xe0001000
 8001ed4:	431bde83 	.word	0x431bde83
 8001ed8:	2000149c 	.word	0x2000149c

08001edc <initialize_maze_exploration>:


/**
 * @brief Initialize maze for exploration
 */
void initialize_maze_exploration(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n=== INITIALIZING MAZE EXPLORATION ===\r\n");
 8001ee2:	485a      	ldr	r0, [pc, #360]	@ (800204c <initialize_maze_exploration+0x170>)
 8001ee4:	f7ff f868 	bl	8000fb8 <send_bluetooth_message>

    // Initialize maze structure
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e03e      	b.n	8001f6c <initialize_maze_exploration+0x90>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	e035      	b.n	8001f60 <initialize_maze_exploration+0x84>
            maze[x][y].distance = MAX_DISTANCE;
 8001ef4:	4956      	ldr	r1, [pc, #344]	@ (8002050 <initialize_maze_exploration+0x174>)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	011a      	lsls	r2, r3, #4
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4413      	add	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	440b      	add	r3, r1
 8001f02:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001f06:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 8001f08:	4951      	ldr	r1, [pc, #324]	@ (8002050 <initialize_maze_exploration+0x174>)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	011a      	lsls	r2, r3, #4
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	4413      	add	r3, r2
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	440b      	add	r3, r1
 8001f16:	3304      	adds	r3, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 8001f1c:	494c      	ldr	r1, [pc, #304]	@ (8002050 <initialize_maze_exploration+0x174>)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	011a      	lsls	r2, r3, #4
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	440b      	add	r3, r1
 8001f2a:	330c      	adds	r3, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

            // Initialize all walls as unknown (false)
            for (int dir = 0; dir < 4; dir++) {
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	e00e      	b.n	8001f54 <initialize_maze_exploration+0x78>
                maze[x][y].walls[dir] = false;
 8001f36:	4946      	ldr	r1, [pc, #280]	@ (8002050 <initialize_maze_exploration+0x174>)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	011a      	lsls	r2, r3, #4
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4413      	add	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	18ca      	adds	r2, r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	3305      	adds	r3, #5
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
            for (int dir = 0; dir < 4; dir++) {
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3301      	adds	r3, #1
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	dded      	ble.n	8001f36 <initialize_maze_exploration+0x5a>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	ddc6      	ble.n	8001ef4 <initialize_maze_exploration+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	ddbd      	ble.n	8001eee <initialize_maze_exploration+0x12>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	e01f      	b.n	8001fb8 <initialize_maze_exploration+0xdc>
        maze[i][0].walls[SOUTH] = true;                    // Bottom boundary
 8001f78:	4a35      	ldr	r2, [pc, #212]	@ (8002050 <initialize_maze_exploration+0x174>)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	4413      	add	r3, r2
 8001f80:	3307      	adds	r3, #7
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true;          // Top boundary
 8001f86:	4a32      	ldr	r2, [pc, #200]	@ (8002050 <initialize_maze_exploration+0x174>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	4413      	add	r3, r2
 8001f8e:	33f5      	adds	r3, #245	@ 0xf5
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;                     // Left boundary
 8001f94:	4a2e      	ldr	r2, [pc, #184]	@ (8002050 <initialize_maze_exploration+0x174>)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3308      	adds	r3, #8
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;           // Right boundary
 8001fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8002050 <initialize_maze_exploration+0x174>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	f603 7306 	addw	r3, r3, #3846	@ 0xf06
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	dddc      	ble.n	8001f78 <initialize_maze_exploration+0x9c>
    }

    // Set maze center coordinates
    maze_center_x1 = MAZE_SIZE / 2 - 1;
 8001fbe:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <initialize_maze_exploration+0x178>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
    maze_center_y1 = MAZE_SIZE / 2 - 1;
 8001fc4:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <initialize_maze_exploration+0x17c>)
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	601a      	str	r2, [r3, #0]
    maze_center_x2 = MAZE_SIZE / 2;
 8001fca:	4b24      	ldr	r3, [pc, #144]	@ (800205c <initialize_maze_exploration+0x180>)
 8001fcc:	2208      	movs	r2, #8
 8001fce:	601a      	str	r2, [r3, #0]
    maze_center_y2 = MAZE_SIZE / 2;
 8001fd0:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <initialize_maze_exploration+0x184>)
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	601a      	str	r2, [r3, #0]

    // Initialize robot state
    robot.x = 0;
 8001fd6:	4b23      	ldr	r3, [pc, #140]	@ (8002064 <initialize_maze_exploration+0x188>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <initialize_maze_exploration+0x188>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 8001fe2:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <initialize_maze_exploration+0x188>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <initialize_maze_exploration+0x188>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <initialize_maze_exploration+0x188>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <initialize_maze_exploration+0x188>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]

    // Mark starting position
    maze[0][0].visited = true;
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <initialize_maze_exploration+0x174>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 8002000:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <initialize_maze_exploration+0x174>)
 8002002:	2201      	movs	r2, #1
 8002004:	60da      	str	r2, [r3, #12]

    // Reset exploration flags
    exploration_completed = 0;
 8002006:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <initialize_maze_exploration+0x18c>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
    optimal_path_calculated = 0;
 800200c:	4b17      	ldr	r3, [pc, #92]	@ (800206c <initialize_maze_exploration+0x190>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

    send_bluetooth_printf("Maze Size: %dx%d\r\n", MAZE_SIZE, MAZE_SIZE);
 8002012:	2210      	movs	r2, #16
 8002014:	2110      	movs	r1, #16
 8002016:	4816      	ldr	r0, [pc, #88]	@ (8002070 <initialize_maze_exploration+0x194>)
 8002018:	f7fe ffe4 	bl	8000fe4 <send_bluetooth_printf>
    send_bluetooth_printf("Center: (%d,%d) to (%d,%d)\r\n",
 800201c:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <initialize_maze_exploration+0x178>)
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <initialize_maze_exploration+0x17c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <initialize_maze_exploration+0x180>)
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <initialize_maze_exploration+0x184>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	4603      	mov	r3, r0
 8002030:	4810      	ldr	r0, [pc, #64]	@ (8002074 <initialize_maze_exploration+0x198>)
 8002032:	f7fe ffd7 	bl	8000fe4 <send_bluetooth_printf>
                         maze_center_x1, maze_center_y1, maze_center_x2, maze_center_y2);
    send_bluetooth_message("Maze exploration initialized successfully!\r\n");
 8002036:	4810      	ldr	r0, [pc, #64]	@ (8002078 <initialize_maze_exploration+0x19c>)
 8002038:	f7fe ffbe 	bl	8000fb8 <send_bluetooth_message>
    send_bluetooth_message("==========================================\r\n");
 800203c:	480f      	ldr	r0, [pc, #60]	@ (800207c <initialize_maze_exploration+0x1a0>)
 800203e:	f7fe ffbb 	bl	8000fb8 <send_bluetooth_message>
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	0800b21c 	.word	0x0800b21c
 8002050:	20000444 	.word	0x20000444
 8002054:	200014a0 	.word	0x200014a0
 8002058:	200014a4 	.word	0x200014a4
 800205c:	200014a8 	.word	0x200014a8
 8002060:	200014ac 	.word	0x200014ac
 8002064:	20001444 	.word	0x20001444
 8002068:	200014b0 	.word	0x200014b0
 800206c:	200014b4 	.word	0x200014b4
 8002070:	0800b248 	.word	0x0800b248
 8002074:	0800b25c 	.word	0x0800b25c
 8002078:	0800b27c 	.word	0x0800b27c
 800207c:	0800b2ac 	.word	0x0800b2ac

08002080 <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 8002086:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <update_encoder_totals+0x6c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208c:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 800208e:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <update_encoder_totals+0x70>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 8002096:	4b17      	ldr	r3, [pc, #92]	@ (80020f4 <update_encoder_totals+0x74>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	b29b      	uxth	r3, r3
 80020a0:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <update_encoder_totals+0x78>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	88ba      	ldrh	r2, [r7, #4]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    right_diff = -right_diff;  // Make left encoder positive for forward movement
 80020ae:	883b      	ldrh	r3, [r7, #0]
 80020b0:	425b      	negs	r3, r3
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	803b      	strh	r3, [r7, #0]

    // Update totals
    left_total += left_diff;
 80020b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <update_encoder_totals+0x7c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a0e      	ldr	r2, [pc, #56]	@ (80020fc <update_encoder_totals+0x7c>)
 80020c2:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 80020c4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80020c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <update_encoder_totals+0x80>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4413      	add	r3, r2
 80020ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002100 <update_encoder_totals+0x80>)
 80020d0:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 80020d2:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <update_encoder_totals+0x74>)
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 80020d8:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <update_encoder_totals+0x78>)
 80020da:	88bb      	ldrh	r3, [r7, #4]
 80020dc:	8013      	strh	r3, [r2, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000324 	.word	0x20000324
 80020f0:	200003b4 	.word	0x200003b4
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000002 	.word	0x20000002
 80020fc:	200014b8 	.word	0x200014b8
 8002100:	200014bc 	.word	0x200014bc

08002104 <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8002108:	f7ff ffba 	bl	8002080 <update_encoder_totals>
    return left_total;
 800210c:	4b01      	ldr	r3, [pc, #4]	@ (8002114 <get_left_encoder_total+0x10>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200014b8 	.word	0x200014b8

08002118 <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
    update_encoder_totals();
 800211c:	f7ff ffb0 	bl	8002080 <update_encoder_totals>
    return right_total;
 8002120:	4b01      	ldr	r3, [pc, #4]	@ (8002128 <get_right_encoder_total+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200014bc 	.word	0x200014bc

0800212c <start_encoders>:
}

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 8002130:	213c      	movs	r1, #60	@ 0x3c
 8002132:	4815      	ldr	r0, [pc, #84]	@ (8002188 <start_encoders+0x5c>)
 8002134:	f003 fe3c 	bl	8005db0 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 8002138:	213c      	movs	r1, #60	@ 0x3c
 800213a:	4814      	ldr	r0, [pc, #80]	@ (800218c <start_encoders+0x60>)
 800213c:	f003 fe38 	bl	8005db0 <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <start_encoders+0x5c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002148:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <start_encoders+0x60>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 8002154:	2001      	movs	r0, #1
 8002156:	f001 fa15 	bl	8003584 <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <start_encoders+0x64>)
 800215c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002160:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 8002162:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <start_encoders+0x68>)
 8002164:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002168:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 800216a:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <start_encoders+0x6c>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8002170:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <start_encoders+0x70>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 8002176:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <start_encoders+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <start_encoders+0x74>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200003b4 	.word	0x200003b4
 800218c:	20000324 	.word	0x20000324
 8002190:	20000000 	.word	0x20000000
 8002194:	20000002 	.word	0x20000002
 8002198:	200014b8 	.word	0x200014b8
 800219c:	200014bc 	.word	0x200014bc
 80021a0:	2000147c 	.word	0x2000147c

080021a4 <motor_set>:



// helper to set speed (0–1000 = 0–100%)
// Fixed motor_set function for DRV8833
void motor_set(uint8_t motor, bool forward, uint16_t duty) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
 80021ae:	460b      	mov	r3, r1
 80021b0:	71bb      	strb	r3, [r7, #6]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80bb      	strh	r3, [r7, #4]
    if (motor == 0) { // Left motor
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d115      	bne.n	80021e8 <motor_set+0x44>
        if (forward) {
 80021bc:	79bb      	ldrb	r3, [r7, #6]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <motor_set+0x30>
			// Left reverse: IN1=LOW, IN2=PWM
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty); // PA6 = PWM
 80021c2:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <motor_set+0x7c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	88ba      	ldrh	r2, [r7, #4]
 80021c8:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // PA7 = LOW
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <motor_set+0x7c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	639a      	str	r2, [r3, #56]	@ 0x38
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM

        }
    }
}
 80021d2:	e020      	b.n	8002216 <motor_set+0x72>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty); // PA7 = PWM
 80021d4:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <motor_set+0x7c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	88ba      	ldrh	r2, [r7, #4]
 80021da:	639a      	str	r2, [r3, #56]	@ 0x38
        	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET); // PA6 = LOW
 80021dc:	2200      	movs	r2, #0
 80021de:	2140      	movs	r1, #64	@ 0x40
 80021e0:	4810      	ldr	r0, [pc, #64]	@ (8002224 <motor_set+0x80>)
 80021e2:	f002 f90d 	bl	8004400 <HAL_GPIO_WritePin>
}
 80021e6:	e016      	b.n	8002216 <motor_set+0x72>
    	bool actual_forward = forward;  // invert direction
 80021e8:	79bb      	ldrb	r3, [r7, #6]
 80021ea:	73fb      	strb	r3, [r7, #15]
        if (actual_forward) {
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <motor_set+0x62>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty); // PB1 = PWM
 80021f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <motor_set+0x7c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	88ba      	ldrh	r2, [r7, #4]
 80021f8:	641a      	str	r2, [r3, #64]	@ 0x40
        	HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_RESET); // PB0 = LOW
 80021fa:	2200      	movs	r2, #0
 80021fc:	2101      	movs	r1, #1
 80021fe:	480a      	ldr	r0, [pc, #40]	@ (8002228 <motor_set+0x84>)
 8002200:	f002 f8fe 	bl	8004400 <HAL_GPIO_WritePin>
}
 8002204:	e007      	b.n	8002216 <motor_set+0x72>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <motor_set+0x7c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM
 800220e:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <motor_set+0x7c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	88ba      	ldrh	r2, [r7, #4]
 8002214:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000036c 	.word	0x2000036c
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400

0800222c <clampi>:
static uint32_t wf_last_ms = 0;

static float target_left  = 23.0f;  // learned sensor targets for single-wall
static float target_right = 25.0f;

static inline int clampi(int v, int lo, int hi) { return v < lo ? lo : (v > hi ? hi : v); }
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	db05      	blt.n	800224c <clampi+0x20>
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4293      	cmp	r3, r2
 8002246:	bfa8      	it	ge
 8002248:	4613      	movge	r3, r2
 800224a:	e000      	b.n	800224e <clampi+0x22>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <clampf>:
static inline float clampf(float v, float lo, float hi){ return v < lo ? lo : (v > hi ? hi : v); }
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	ed87 0a03 	vstr	s0, [r7, #12]
 8002264:	edc7 0a02 	vstr	s1, [r7, #8]
 8002268:	ed87 1a01 	vstr	s2, [r7, #4]
 800226c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002270:	edd7 7a02 	vldr	s15, [r7, #8]
 8002274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	d501      	bpl.n	8002282 <clampf+0x28>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	e00b      	b.n	800229a <clampf+0x40>
 8002282:	ed97 7a03 	vldr	s14, [r7, #12]
 8002286:	edd7 7a01 	vldr	s15, [r7, #4]
 800228a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	dd01      	ble.n	8002298 <clampf+0x3e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	e000      	b.n	800229a <clampf+0x40>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eeb0 0a67 	vmov.f32	s0, s15
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <wall_follow_reset_int>:
void wall_follow_reset_int(int mode, int base_pwm);   // forward decl
void wall_follow_step(void);                          // forward decl

// Call once before starting wall-follow
void wall_follow_reset_int(int mode, int base_pwm)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    wf_mode = (mode == 1) ? WF_LEFT : (mode == 2) ? WF_RIGHT : WF_AUTO;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d006      	beq.n	80022ca <wall_follow_reset_int+0x1e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d101      	bne.n	80022c6 <wall_follow_reset_int+0x1a>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e002      	b.n	80022cc <wall_follow_reset_int+0x20>
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <wall_follow_reset_int+0x20>
 80022ca:	2301      	movs	r3, #1
 80022cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002304 <wall_follow_reset_int+0x58>)
 80022ce:	7013      	strb	r3, [r2, #0]
    WF_BASE_PWM = base_pwm;
 80022d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002308 <wall_follow_reset_int+0x5c>)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6013      	str	r3, [r2, #0]

    e_int = 0.0f; e_prev = 0.0f; d_filt = 0.0f;
 80022d6:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <wall_follow_reset_int+0x60>)
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <wall_follow_reset_int+0x64>)
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <wall_follow_reset_int+0x68>)
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    wf_last_ms = HAL_GetTick();
 80022ee:	f001 f93d 	bl	800356c <HAL_GetTick>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a08      	ldr	r2, [pc, #32]	@ (8002318 <wall_follow_reset_int+0x6c>)
 80022f6:	6013      	str	r3, [r2, #0]
    update_sensors();
 80022f8:	f000 fa4e 	bl	8002798 <update_sensors>

    // bootstrap targets from current readings (prevents initial jump)
    //target_left  = (float)sensors.side_left;
    //target_right = (float)sensors.side_right;
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	200014c8 	.word	0x200014c8
 8002308:	20000004 	.word	0x20000004
 800230c:	200014cc 	.word	0x200014cc
 8002310:	200014d0 	.word	0x200014d0
 8002314:	200014d4 	.word	0x200014d4
 8002318:	200014d8 	.word	0x200014d8

0800231c <wall_follow_step>:

// One control step; call at ~200–500 Hz inside your loop
void wall_follow_step(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	ed2d 8b02 	vpush	{d8}
 8002322:	b08e      	sub	sp, #56	@ 0x38
 8002324:	af00      	add	r7, sp, #0
    // Get fresh sensors (uses your emitter-sync diff scheme)
    update_sensors();  // reads FL/FR/SL/SR and sets wall flags
 8002326:	f000 fa37 	bl	8002798 <update_sensors>

    // dt
    uint32_t now = HAL_GetTick();
 800232a:	f001 f91f 	bl	800356c <HAL_GetTick>
 800232e:	6238      	str	r0, [r7, #32]
    float dt = (now - wf_last_ms) / 1000.0f;
 8002330:	4b67      	ldr	r3, [pc, #412]	@ (80024d0 <wall_follow_step+0x1b4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6a3a      	ldr	r2, [r7, #32]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002340:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80024d4 <wall_follow_step+0x1b8>
 8002344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002348:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (dt <= 0.0f) dt = 0.001f;
 800234c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	d801      	bhi.n	800235e <wall_follow_step+0x42>
 800235a:	4b5f      	ldr	r3, [pc, #380]	@ (80024d8 <wall_follow_step+0x1bc>)
 800235c:	637b      	str	r3, [r7, #52]	@ 0x34
    wf_last_ms = now;
 800235e:	4a5c      	ldr	r2, [pc, #368]	@ (80024d0 <wall_follow_step+0x1b4>)
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	6013      	str	r3, [r2, #0]

    // Determine mode automatically if requested
    bool Lw = sensors.wall_left;
 8002364:	4b5d      	ldr	r3, [pc, #372]	@ (80024dc <wall_follow_step+0x1c0>)
 8002366:	7adb      	ldrb	r3, [r3, #11]
 8002368:	77fb      	strb	r3, [r7, #31]
    bool Rw = sensors.wall_right;
 800236a:	4b5c      	ldr	r3, [pc, #368]	@ (80024dc <wall_follow_step+0x1c0>)
 800236c:	7b1b      	ldrb	r3, [r3, #12]
 800236e:	77bb      	strb	r3, [r7, #30]
    bool Fw = sensors.wall_front;
 8002370:	4b5a      	ldr	r3, [pc, #360]	@ (80024dc <wall_follow_step+0x1c0>)
 8002372:	7a9b      	ldrb	r3, [r3, #10]
 8002374:	777b      	strb	r3, [r7, #29]

    if (wf_mode == WF_AUTO) {
 8002376:	4b5a      	ldr	r3, [pc, #360]	@ (80024e0 <wall_follow_step+0x1c4>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d11a      	bne.n	80023b4 <wall_follow_step+0x98>
        if (Lw && Rw)       wf_mode = WF_AUTO;   // center using both
 800237e:	7ffb      	ldrb	r3, [r7, #31]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <wall_follow_step+0x76>
 8002384:	7fbb      	ldrb	r3, [r7, #30]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <wall_follow_step+0x76>
 800238a:	4b55      	ldr	r3, [pc, #340]	@ (80024e0 <wall_follow_step+0x1c4>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e010      	b.n	80023b4 <wall_follow_step+0x98>
        else if (Lw)        wf_mode = WF_LEFT;
 8002392:	7ffb      	ldrb	r3, [r7, #31]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <wall_follow_step+0x84>
 8002398:	4b51      	ldr	r3, [pc, #324]	@ (80024e0 <wall_follow_step+0x1c4>)
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e009      	b.n	80023b4 <wall_follow_step+0x98>
        else if (Rw)        wf_mode = WF_RIGHT;
 80023a0:	7fbb      	ldrb	r3, [r7, #30]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <wall_follow_step+0x92>
 80023a6:	4b4e      	ldr	r3, [pc, #312]	@ (80024e0 <wall_follow_step+0x1c4>)
 80023a8:	2202      	movs	r2, #2
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e002      	b.n	80023b4 <wall_follow_step+0x98>
        else                wf_mode = WF_AUTO;   // nothing: just go straight
 80023ae:	4b4c      	ldr	r3, [pc, #304]	@ (80024e0 <wall_follow_step+0x1c4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
    }

    // Log-ratio error; positive => closer to LEFT (so slow left / speed right)
    // Add +1.0f to avoid log(0). Use both-wall centering if available, else single-wall track.
    float e = 0.0f;
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (Lw && Rw) {
 80023ba:	7ffb      	ldrb	r3, [r7, #31]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d034      	beq.n	800242a <wall_follow_step+0x10e>
 80023c0:	7fbb      	ldrb	r3, [r7, #30]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d031      	beq.n	800242a <wall_follow_step+0x10e>
        float L = (float)sensors.side_left;
 80023c6:	4b45      	ldr	r3, [pc, #276]	@ (80024dc <wall_follow_step+0x1c0>)
 80023c8:	88db      	ldrh	r3, [r3, #6]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d2:	edc7 7a06 	vstr	s15, [r7, #24]
        float R = (float)sensors.side_right;
 80023d6:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <wall_follow_step+0x1c0>)
 80023d8:	889b      	ldrh	r3, [r3, #4]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e2:	edc7 7a05 	vstr	s15, [r7, #20]
        e = WF_BOTH_SCALE * (logf(L + 1.0f) - logf(R + 1.0f));
 80023e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80023ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023f2:	eeb0 0a67 	vmov.f32	s0, s15
 80023f6:	f008 fa37 	bl	800a868 <logf>
 80023fa:	eeb0 8a40 	vmov.f32	s16, s0
 80023fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	f008 fa2b 	bl	800a868 <logf>
 8002412:	eef0 7a40 	vmov.f32	s15, s0
 8002416:	ee38 7a67 	vsub.f32	s14, s16, s15
 800241a:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <wall_follow_step+0x1c8>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002424:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    if (Lw && Rw) {
 8002428:	e065      	b.n	80024f6 <wall_follow_step+0x1da>
        // keep single-wall targets gently aligned to present gap
        //target_left  = (1.0f - WF_SINGLE_ALPHA)*target_left  + WF_SINGLE_ALPHA*L;
        //target_right = (1.0f - WF_SINGLE_ALPHA)*target_right + WF_SINGLE_ALPHA*R;

    } else if (Lw) {
 800242a:	7ffb      	ldrb	r3, [r7, #31]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d025      	beq.n	800247c <wall_follow_step+0x160>
        float L = (float)sensors.side_left;
 8002430:	4b2a      	ldr	r3, [pc, #168]	@ (80024dc <wall_follow_step+0x1c0>)
 8002432:	88db      	ldrh	r3, [r3, #6]
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243c:	edc7 7a03 	vstr	s15, [r7, #12]
        //arget_left  = (1.0f - WF_SINGLE_ALPHA)*target_left  + WF_SINGLE_ALPHA*L;
        e = logf(L + 1.0f) - logf(target_left + 1.0f);
 8002440:	edd7 7a03 	vldr	s15, [r7, #12]
 8002444:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002448:	ee77 7a87 	vadd.f32	s15, s15, s14
 800244c:	eeb0 0a67 	vmov.f32	s0, s15
 8002450:	f008 fa0a 	bl	800a868 <logf>
 8002454:	eeb0 8a40 	vmov.f32	s16, s0
 8002458:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <wall_follow_step+0x1cc>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002466:	eeb0 0a67 	vmov.f32	s0, s15
 800246a:	f008 f9fd 	bl	800a868 <logf>
 800246e:	eef0 7a40 	vmov.f32	s15, s0
 8002472:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002476:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 800247a:	e03c      	b.n	80024f6 <wall_follow_step+0x1da>

    } else if (Rw) {
 800247c:	7fbb      	ldrb	r3, [r7, #30]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d036      	beq.n	80024f0 <wall_follow_step+0x1d4>
        float R = (float)sensors.side_right;
 8002482:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <wall_follow_step+0x1c0>)
 8002484:	889b      	ldrh	r3, [r3, #4]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248e:	edc7 7a04 	vstr	s15, [r7, #16]
        //target_right = (1.0f - WF_SINGLE_ALPHA)*target_right + WF_SINGLE_ALPHA*R;
        e = logf(target_right + 1.0f) - logf(R + 1.0f);
 8002492:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <wall_follow_step+0x1d0>)
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800249c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a0:	eeb0 0a67 	vmov.f32	s0, s15
 80024a4:	f008 f9e0 	bl	800a868 <logf>
 80024a8:	eeb0 8a40 	vmov.f32	s16, s0
 80024ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80024b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024b8:	eeb0 0a67 	vmov.f32	s0, s15
 80024bc:	f008 f9d4 	bl	800a868 <logf>
 80024c0:	eef0 7a40 	vmov.f32	s15, s0
 80024c4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80024c8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 80024cc:	e013      	b.n	80024f6 <wall_follow_step+0x1da>
 80024ce:	bf00      	nop
 80024d0:	200014d8 	.word	0x200014d8
 80024d4:	447a0000 	.word	0x447a0000
 80024d8:	3a83126f 	.word	0x3a83126f
 80024dc:	20001458 	.word	0x20001458
 80024e0:	200014c8 	.word	0x200014c8
 80024e4:	2000001c 	.word	0x2000001c
 80024e8:	2000002c 	.word	0x2000002c
 80024ec:	20000030 	.word	0x20000030

    } else {
        // No side walls -> no correction (let heading/gyro PID handle straightness if you run it)
        e = 0.0f;
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    // PID on error
    e_int += e * dt;
 80024f6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80024fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80024fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002502:	4b66      	ldr	r3, [pc, #408]	@ (800269c <wall_follow_step+0x380>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250c:	4b63      	ldr	r3, [pc, #396]	@ (800269c <wall_follow_step+0x380>)
 800250e:	edc3 7a00 	vstr	s15, [r3]
    e_int  = clampf(e_int, -WF_INT_LIMIT, WF_INT_LIMIT);
 8002512:	4b62      	ldr	r3, [pc, #392]	@ (800269c <wall_follow_step+0x380>)
 8002514:	ed93 7a00 	vldr	s14, [r3]
 8002518:	4b61      	ldr	r3, [pc, #388]	@ (80026a0 <wall_follow_step+0x384>)
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	eef1 7a67 	vneg.f32	s15, s15
 8002522:	4b5f      	ldr	r3, [pc, #380]	@ (80026a0 <wall_follow_step+0x384>)
 8002524:	edd3 6a00 	vldr	s13, [r3]
 8002528:	eeb0 1a66 	vmov.f32	s2, s13
 800252c:	eef0 0a67 	vmov.f32	s1, s15
 8002530:	eeb0 0a47 	vmov.f32	s0, s14
 8002534:	f7ff fe91 	bl	800225a <clampf>
 8002538:	eef0 7a40 	vmov.f32	s15, s0
 800253c:	4b57      	ldr	r3, [pc, #348]	@ (800269c <wall_follow_step+0x380>)
 800253e:	edc3 7a00 	vstr	s15, [r3]

    float d_raw = (e - e_prev) / dt;
 8002542:	4b58      	ldr	r3, [pc, #352]	@ (80026a4 <wall_follow_step+0x388>)
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800254c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002550:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002558:	edc7 7a02 	vstr	s15, [r7, #8]
    d_filt = WF_DERIV_ALPHA * d_filt + (1.0f - WF_DERIV_ALPHA) * d_raw;
 800255c:	4b52      	ldr	r3, [pc, #328]	@ (80026a8 <wall_follow_step+0x38c>)
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	4b52      	ldr	r3, [pc, #328]	@ (80026ac <wall_follow_step+0x390>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800256c:	4b4e      	ldr	r3, [pc, #312]	@ (80026a8 <wall_follow_step+0x38c>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002576:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800257a:	edd7 7a02 	vldr	s15, [r7, #8]
 800257e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002586:	4b49      	ldr	r3, [pc, #292]	@ (80026ac <wall_follow_step+0x390>)
 8002588:	edc3 7a00 	vstr	s15, [r3]

    float u_norm = WF_KP*e + WF_KI*e_int + WF_KD*d_filt;  // u > 0 => speed up right / slow left
 800258c:	4b48      	ldr	r3, [pc, #288]	@ (80026b0 <wall_follow_step+0x394>)
 800258e:	ed93 7a00 	vldr	s14, [r3]
 8002592:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800259a:	4b46      	ldr	r3, [pc, #280]	@ (80026b4 <wall_follow_step+0x398>)
 800259c:	edd3 6a00 	vldr	s13, [r3]
 80025a0:	4b3e      	ldr	r3, [pc, #248]	@ (800269c <wall_follow_step+0x380>)
 80025a2:	edd3 7a00 	vldr	s15, [r3]
 80025a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ae:	4b42      	ldr	r3, [pc, #264]	@ (80026b8 <wall_follow_step+0x39c>)
 80025b0:	edd3 6a00 	vldr	s13, [r3]
 80025b4:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <wall_follow_step+0x390>)
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c2:	edc7 7a01 	vstr	s15, [r7, #4]
    float u = u_norm * WF_U_SCALE;
 80025c6:	4b3d      	ldr	r3, [pc, #244]	@ (80026bc <wall_follow_step+0x3a0>)
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80025d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d4:	edc7 7a00 	vstr	s15, [r7]
    e_prev = e;
 80025d8:	4a32      	ldr	r2, [pc, #200]	@ (80026a4 <wall_follow_step+0x388>)
 80025da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025dc:	6013      	str	r3, [r2, #0]

    // Front wall policy
    int base = WF_BASE_PWM;
 80025de:	4b38      	ldr	r3, [pc, #224]	@ (80026c0 <wall_follow_step+0x3a4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (Fw && WF_BRAKE_ON_FRONT) {
 80025e4:	7f7b      	ldrb	r3, [r7, #29]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <wall_follow_step+0x2dc>
 80025ea:	4b36      	ldr	r3, [pc, #216]	@ (80026c4 <wall_follow_step+0x3a8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <wall_follow_step+0x2dc>
        base = WF_SLOW_PWM;
 80025f2:	4b35      	ldr	r3, [pc, #212]	@ (80026c8 <wall_follow_step+0x3ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        // If you want a hard stop, uncomment:
        // motor_set(0, true, 0); motor_set(1, true, 0); HAL_Delay(WF_FRONT_HOLD_MS); return;
    }

    // Map correction to wheel PWMs (right = base+u, left = base-u)
    int pwm_right = clampi((int)lroundf((float)base - u), 0, WF_PWM_MAX);
 80025f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002602:	edd7 7a00 	vldr	s15, [r7]
 8002606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	f008 f95f 	bl	800a8d0 <lroundf>
 8002612:	4b2e      	ldr	r3, [pc, #184]	@ (80026cc <wall_follow_step+0x3b0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	2100      	movs	r1, #0
 800261a:	f7ff fe07 	bl	800222c <clampi>
 800261e:	62b8      	str	r0, [r7, #40]	@ 0x28
    int pwm_left  = clampi((int)lroundf((float)base + u), 0, WF_PWM_MAX);
 8002620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800262a:	edd7 7a00 	vldr	s15, [r7]
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	eeb0 0a67 	vmov.f32	s0, s15
 8002636:	f008 f94b 	bl	800a8d0 <lroundf>
 800263a:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <wall_follow_step+0x3b0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	2100      	movs	r1, #0
 8002642:	f7ff fdf3 	bl	800222c <clampi>
 8002646:	6278      	str	r0, [r7, #36]	@ 0x24

    if (pwm_right > 0 && pwm_right < WF_PWM_MIN_MOVE) pwm_right = WF_PWM_MIN_MOVE;
 8002648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264a:	2b00      	cmp	r3, #0
 800264c:	dd07      	ble.n	800265e <wall_follow_step+0x342>
 800264e:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <wall_follow_step+0x3b4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002654:	429a      	cmp	r2, r3
 8002656:	da02      	bge.n	800265e <wall_follow_step+0x342>
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <wall_follow_step+0x3b4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (pwm_left  > 0 && pwm_left  < WF_PWM_MIN_MOVE) pwm_left  = WF_PWM_MIN_MOVE;
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	dd07      	ble.n	8002674 <wall_follow_step+0x358>
 8002664:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <wall_follow_step+0x3b4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266a:	429a      	cmp	r2, r3
 800266c:	da02      	bge.n	8002674 <wall_follow_step+0x358>
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <wall_follow_step+0x3b4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24

    // Apply (both forward)
    motor_set(0, true, (uint16_t)pwm_left);   // Left
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	b29b      	uxth	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	2101      	movs	r1, #1
 800267c:	2000      	movs	r0, #0
 800267e:	f7ff fd91 	bl	80021a4 <motor_set>
    motor_set(1, true, (uint16_t)pwm_right);  // Right
 8002682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	2101      	movs	r1, #1
 800268a:	2001      	movs	r0, #1
 800268c:	f7ff fd8a 	bl	80021a4 <motor_set>

//    send_bluetooth_printf("# L:%d R:%d e=%.3f u_norm=%.3f u=%.1f\n",
//        sensors.side_left, sensors.side_right, e, u_norm, u);

}
 8002690:	bf00      	nop
 8002692:	3738      	adds	r7, #56	@ 0x38
 8002694:	46bd      	mov	sp, r7
 8002696:	ecbd 8b02 	vpop	{d8}
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200014cc 	.word	0x200014cc
 80026a0:	20000018 	.word	0x20000018
 80026a4:	200014d0 	.word	0x200014d0
 80026a8:	20000014 	.word	0x20000014
 80026ac:	200014d4 	.word	0x200014d4
 80026b0:	20000010 	.word	0x20000010
 80026b4:	200014c0 	.word	0x200014c0
 80026b8:	200014c4 	.word	0x200014c4
 80026bc:	20000020 	.word	0x20000020
 80026c0:	20000004 	.word	0x20000004
 80026c4:	20000024 	.word	0x20000024
 80026c8:	20000028 	.word	0x20000028
 80026cc:	2000000c 	.word	0x2000000c
 80026d0:	20000008 	.word	0x20000008

080026d4 <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026de:	480b      	ldr	r0, [pc, #44]	@ (800270c <turn_off_emitters+0x38>)
 80026e0:	f001 fe8e 	bl	8004400 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026ea:	4809      	ldr	r0, [pc, #36]	@ (8002710 <turn_off_emitters+0x3c>)
 80026ec:	f001 fe88 	bl	8004400 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026f6:	4805      	ldr	r0, [pc, #20]	@ (800270c <turn_off_emitters+0x38>)
 80026f8:	f001 fe82 	bl	8004400 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002702:	4803      	ldr	r0, [pc, #12]	@ (8002710 <turn_off_emitters+0x3c>)
 8002704:	f001 fe7c 	bl	8004400 <HAL_GPIO_WritePin>
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40020400 	.word	0x40020400
 8002710:	40020000 	.word	0x40020000

08002714 <read_adc_channel>:

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef cfg = {0};
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
    cfg.Channel = channel;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60fb      	str	r3, [r7, #12]
    cfg.Rank = 1;
 800272e:	2301      	movs	r3, #1
 8002730:	613b      	str	r3, [r7, #16]
    cfg.SamplingTime = ADC_SAMPLETIME_480CYCLES; // more stable than 84
 8002732:	2307      	movs	r3, #7
 8002734:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &cfg) != HAL_OK) return 0;
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	4619      	mov	r1, r3
 800273c:	4815      	ldr	r0, [pc, #84]	@ (8002794 <read_adc_channel+0x80>)
 800273e:	f001 f909 	bl	8003954 <HAL_ADC_ConfigChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <read_adc_channel+0x38>
 8002748:	2300      	movs	r3, #0
 800274a:	e01f      	b.n	800278c <read_adc_channel+0x78>

    dwt_delay_us(5);                     // tiny mux settle
 800274c:	2005      	movs	r0, #5
 800274e:	f7ff fb7d 	bl	8001e4c <dwt_delay_us>

    // dummy conversion (discard)
    HAL_ADC_Start(&hadc1);
 8002752:	4810      	ldr	r0, [pc, #64]	@ (8002794 <read_adc_channel+0x80>)
 8002754:	f000 ff7e 	bl	8003654 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8002758:	210a      	movs	r1, #10
 800275a:	480e      	ldr	r0, [pc, #56]	@ (8002794 <read_adc_channel+0x80>)
 800275c:	f001 f861 	bl	8003822 <HAL_ADC_PollForConversion>
    (void)HAL_ADC_GetValue(&hadc1);
 8002760:	480c      	ldr	r0, [pc, #48]	@ (8002794 <read_adc_channel+0x80>)
 8002762:	f001 f8e9 	bl	8003938 <HAL_ADC_GetValue>
    HAL_ADC_Stop(&hadc1);
 8002766:	480b      	ldr	r0, [pc, #44]	@ (8002794 <read_adc_channel+0x80>)
 8002768:	f001 f828 	bl	80037bc <HAL_ADC_Stop>

    // real conversion
    HAL_ADC_Start(&hadc1);
 800276c:	4809      	ldr	r0, [pc, #36]	@ (8002794 <read_adc_channel+0x80>)
 800276e:	f000 ff71 	bl	8003654 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8002772:	210a      	movs	r1, #10
 8002774:	4807      	ldr	r0, [pc, #28]	@ (8002794 <read_adc_channel+0x80>)
 8002776:	f001 f854 	bl	8003822 <HAL_ADC_PollForConversion>
    uint16_t v = HAL_ADC_GetValue(&hadc1);
 800277a:	4806      	ldr	r0, [pc, #24]	@ (8002794 <read_adc_channel+0x80>)
 800277c:	f001 f8dc 	bl	8003938 <HAL_ADC_GetValue>
 8002780:	4603      	mov	r3, r0
 8002782:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 8002784:	4803      	ldr	r0, [pc, #12]	@ (8002794 <read_adc_channel+0x80>)
 8002786:	f001 f819 	bl	80037bc <HAL_ADC_Stop>
    return v;
 800278a:	8bfb      	ldrh	r3, [r7, #30]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	2000023c 	.word	0x2000023c

08002798 <update_sensors>:
uint32_t FL_buff[5];
uint32_t FR_buff[5];
uint32_t L_buff[5];
uint32_t R_buff[5];

void update_sensors(void){
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	b093      	sub	sp, #76	@ 0x4c
 800279c:	af04      	add	r7, sp, #16
	turn_off_emitters();
 800279e:	f7ff ff99 	bl	80026d4 <turn_off_emitters>
	//dwt_delay_us(500);
	uint16_t off_FL = read_adc_channel(ADC_CHANNEL_5);
 80027a2:	2005      	movs	r0, #5
 80027a4:	f7ff ffb6 	bl	8002714 <read_adc_channel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	827b      	strh	r3, [r7, #18]
	uint16_t off_FR = read_adc_channel(ADC_CHANNEL_2);
 80027ac:	2002      	movs	r0, #2
 80027ae:	f7ff ffb1 	bl	8002714 <read_adc_channel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	823b      	strh	r3, [r7, #16]
	uint16_t off_L = read_adc_channel(ADC_CHANNEL_4);
 80027b6:	2004      	movs	r0, #4
 80027b8:	f7ff ffac 	bl	8002714 <read_adc_channel>
 80027bc:	4603      	mov	r3, r0
 80027be:	81fb      	strh	r3, [r7, #14]
	uint16_t off_R = read_adc_channel(ADC_CHANNEL_3);
 80027c0:	2003      	movs	r0, #3
 80027c2:	f7ff ffa7 	bl	8002714 <read_adc_channel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	81bb      	strh	r3, [r7, #12]

	EMIT_ON(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin);
 80027ca:	2201      	movs	r2, #1
 80027cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027d0:	48a0      	ldr	r0, [pc, #640]	@ (8002a54 <update_sensors+0x2bc>)
 80027d2:	f001 fe15 	bl	8004400 <HAL_GPIO_WritePin>
	EMIT_ON(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin);
 80027d6:	2201      	movs	r2, #1
 80027d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027dc:	489e      	ldr	r0, [pc, #632]	@ (8002a58 <update_sensors+0x2c0>)
 80027de:	f001 fe0f 	bl	8004400 <HAL_GPIO_WritePin>
	dwt_delay_us(50);
 80027e2:	2032      	movs	r0, #50	@ 0x32
 80027e4:	f7ff fb32 	bl	8001e4c <dwt_delay_us>
	//HAL_Delay(1);

	uint16_t on_FL = read_adc_channel(ADC_CHANNEL_5);
 80027e8:	2005      	movs	r0, #5
 80027ea:	f7ff ff93 	bl	8002714 <read_adc_channel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
	uint16_t on_FR = read_adc_channel(ADC_CHANNEL_2);
 80027f2:	2002      	movs	r0, #2
 80027f4:	f7ff ff8e 	bl	8002714 <read_adc_channel>
 80027f8:	4603      	mov	r3, r0
 80027fa:	813b      	strh	r3, [r7, #8]

	turn_off_emitters();
 80027fc:	f7ff ff6a 	bl	80026d4 <turn_off_emitters>
	EMIT_ON(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin);
 8002800:	2201      	movs	r2, #1
 8002802:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002806:	4894      	ldr	r0, [pc, #592]	@ (8002a58 <update_sensors+0x2c0>)
 8002808:	f001 fdfa 	bl	8004400 <HAL_GPIO_WritePin>
	EMIT_ON(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin);
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002812:	4890      	ldr	r0, [pc, #576]	@ (8002a54 <update_sensors+0x2bc>)
 8002814:	f001 fdf4 	bl	8004400 <HAL_GPIO_WritePin>
	dwt_delay_us(80);
 8002818:	2050      	movs	r0, #80	@ 0x50
 800281a:	f7ff fb17 	bl	8001e4c <dwt_delay_us>
	//HAL_Delay(1);

	uint16_t on_L = read_adc_channel(ADC_CHANNEL_4);
 800281e:	2004      	movs	r0, #4
 8002820:	f7ff ff78 	bl	8002714 <read_adc_channel>
 8002824:	4603      	mov	r3, r0
 8002826:	80fb      	strh	r3, [r7, #6]
	uint16_t on_R = read_adc_channel(ADC_CHANNEL_3);
 8002828:	2003      	movs	r0, #3
 800282a:	f7ff ff73 	bl	8002714 <read_adc_channel>
 800282e:	4603      	mov	r3, r0
 8002830:	80bb      	strh	r3, [r7, #4]

	turn_off_emitters();
 8002832:	f7ff ff4f 	bl	80026d4 <turn_off_emitters>
	uint32_t diff_FL;
	uint32_t diff_FR;
	uint32_t diff_L;
	uint32_t diff_R;

	if (on_FL>off_FL){
 8002836:	897a      	ldrh	r2, [r7, #10]
 8002838:	8a7b      	ldrh	r3, [r7, #18]
 800283a:	429a      	cmp	r2, r3
 800283c:	d904      	bls.n	8002848 <update_sensors+0xb0>
		diff_FL = (uint32_t)on_FL-(uint32_t)off_FL;
 800283e:	897a      	ldrh	r2, [r7, #10]
 8002840:	8a7b      	ldrh	r3, [r7, #18]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	637b      	str	r3, [r7, #52]	@ 0x34
 8002846:	e001      	b.n	800284c <update_sensors+0xb4>
	}else{
		diff_FL =0;
 8002848:	2300      	movs	r3, #0
 800284a:	637b      	str	r3, [r7, #52]	@ 0x34
	}
	if (on_FR>off_FR){
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	8a3b      	ldrh	r3, [r7, #16]
 8002850:	429a      	cmp	r2, r3
 8002852:	d904      	bls.n	800285e <update_sensors+0xc6>
		diff_FR = (uint32_t)on_FR-(uint32_t)off_FR;
 8002854:	893a      	ldrh	r2, [r7, #8]
 8002856:	8a3b      	ldrh	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	633b      	str	r3, [r7, #48]	@ 0x30
 800285c:	e001      	b.n	8002862 <update_sensors+0xca>
	}else{
		diff_FR =0;
 800285e:	2300      	movs	r3, #0
 8002860:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	if (on_L>off_L){
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	89fb      	ldrh	r3, [r7, #14]
 8002866:	429a      	cmp	r2, r3
 8002868:	d904      	bls.n	8002874 <update_sensors+0xdc>
		diff_L = (uint32_t)on_L-(uint32_t)off_L;
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	89fb      	ldrh	r3, [r7, #14]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002872:	e001      	b.n	8002878 <update_sensors+0xe0>
	}else{
		diff_L=0;
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	if (on_R>off_R){
 8002878:	88ba      	ldrh	r2, [r7, #4]
 800287a:	89bb      	ldrh	r3, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	d904      	bls.n	800288a <update_sensors+0xf2>
		diff_R = (uint32_t)on_R-(uint32_t)off_R;
 8002880:	88ba      	ldrh	r2, [r7, #4]
 8002882:	89bb      	ldrh	r3, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002888:	e001      	b.n	800288e <update_sensors+0xf6>
	}else{
		diff_R = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	if (point>=5) point=0;
 800288e:	4b73      	ldr	r3, [pc, #460]	@ (8002a5c <update_sensors+0x2c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b04      	cmp	r3, #4
 8002894:	dd02      	ble.n	800289c <update_sensors+0x104>
 8002896:	4b71      	ldr	r3, [pc, #452]	@ (8002a5c <update_sensors+0x2c4>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]



	diff_FL=(diff_FL*NOMINAL)/1000;
 800289c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002a60 <update_sensors+0x2c8>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	637b      	str	r3, [r7, #52]	@ 0x34
	diff_FR=(diff_FR*NOMINAL)/1000;
 80028b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	4a69      	ldr	r2, [pc, #420]	@ (8002a60 <update_sensors+0x2c8>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	633b      	str	r3, [r7, #48]	@ 0x30
	diff_L=(diff_L*NOMINAL)/1000;
 80028c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	4a64      	ldr	r2, [pc, #400]	@ (8002a60 <update_sensors+0x2c8>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	diff_R=(diff_R*NOMINAL)/1000;
 80028d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a60 <update_sensors+0x2c8>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28




	FL_buff[point]=diff_FL;
 80028ec:	4b5b      	ldr	r3, [pc, #364]	@ (8002a5c <update_sensors+0x2c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	495c      	ldr	r1, [pc, #368]	@ (8002a64 <update_sensors+0x2cc>)
 80028f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	FR_buff[point]=diff_FR;
 80028f8:	4b58      	ldr	r3, [pc, #352]	@ (8002a5c <update_sensors+0x2c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	495a      	ldr	r1, [pc, #360]	@ (8002a68 <update_sensors+0x2d0>)
 80028fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	L_buff[point]=diff_L;
 8002904:	4b55      	ldr	r3, [pc, #340]	@ (8002a5c <update_sensors+0x2c4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4958      	ldr	r1, [pc, #352]	@ (8002a6c <update_sensors+0x2d4>)
 800290a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	R_buff[point]=diff_R;
 8002910:	4b52      	ldr	r3, [pc, #328]	@ (8002a5c <update_sensors+0x2c4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4956      	ldr	r1, [pc, #344]	@ (8002a70 <update_sensors+0x2d8>)
 8002916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	point++;
 800291c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a5c <update_sensors+0x2c4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	4a4e      	ldr	r2, [pc, #312]	@ (8002a5c <update_sensors+0x2c4>)
 8002924:	6013      	str	r3, [r2, #0]

	uint32_t tot_diff_FL=0;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t tot_diff_FR=0;
 800292a:	2300      	movs	r3, #0
 800292c:	623b      	str	r3, [r7, #32]
	uint32_t tot_diff_L=0;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
	uint32_t tot_diff_R=0;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]

	for (int i=0;i<5;i++){
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e01e      	b.n	800297a <update_sensors+0x1e2>
		tot_diff_FL+=FL_buff[i];
 800293c:	4a49      	ldr	r2, [pc, #292]	@ (8002a64 <update_sensors+0x2cc>)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002946:	4413      	add	r3, r2
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
		tot_diff_FR+=FR_buff[i];
 800294a:	4a47      	ldr	r2, [pc, #284]	@ (8002a68 <update_sensors+0x2d0>)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002952:	6a3a      	ldr	r2, [r7, #32]
 8002954:	4413      	add	r3, r2
 8002956:	623b      	str	r3, [r7, #32]
		tot_diff_L+=L_buff[i];
 8002958:	4a44      	ldr	r2, [pc, #272]	@ (8002a6c <update_sensors+0x2d4>)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	4413      	add	r3, r2
 8002964:	61fb      	str	r3, [r7, #28]
		tot_diff_R+=R_buff[i];
 8002966:	4a42      	ldr	r2, [pc, #264]	@ (8002a70 <update_sensors+0x2d8>)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4413      	add	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
	for (int i=0;i<5;i++){
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b04      	cmp	r3, #4
 800297e:	dddd      	ble.n	800293c <update_sensors+0x1a4>
	}

    sensors.front_left  = tot_diff_FL/5; //diff_FL; //
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	4a3c      	ldr	r2, [pc, #240]	@ (8002a74 <update_sensors+0x2dc>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	b29a      	uxth	r2, r3
 800298c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a78 <update_sensors+0x2e0>)
 800298e:	811a      	strh	r2, [r3, #8]
    sensors.front_right = tot_diff_FR/5; //diff_FR; //
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	4a38      	ldr	r2, [pc, #224]	@ (8002a74 <update_sensors+0x2dc>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	b29a      	uxth	r2, r3
 800299c:	4b36      	ldr	r3, [pc, #216]	@ (8002a78 <update_sensors+0x2e0>)
 800299e:	805a      	strh	r2, [r3, #2]
    sensors.side_left   = tot_diff_L/5;  //diff_L; //
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4a34      	ldr	r2, [pc, #208]	@ (8002a74 <update_sensors+0x2dc>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	4b32      	ldr	r3, [pc, #200]	@ (8002a78 <update_sensors+0x2e0>)
 80029ae:	80da      	strh	r2, [r3, #6]
    sensors.side_right  = tot_diff_R/5;  //diff_R; //
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4a30      	ldr	r2, [pc, #192]	@ (8002a74 <update_sensors+0x2dc>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a78 <update_sensors+0x2e0>)
 80029be:	809a      	strh	r2, [r3, #4]
    sensors.battery = read_adc_channel(ADC_CHANNEL_0);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7ff fea7 	bl	8002714 <read_adc_channel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002a78 <update_sensors+0x2e0>)
 80029cc:	801a      	strh	r2, [r3, #0]

    // Process wall detection using calibrated thresholds
    if (sensor_cal.calibration_valid) {
 80029ce:	4b2b      	ldr	r3, [pc, #172]	@ (8002a7c <update_sensors+0x2e4>)
 80029d0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d032      	beq.n	8002a3e <update_sensors+0x2a6>
        // Use dynamic thresholds
        sensors.wall_front = (sensors.front_left > get_calibrated_threshold(0)) ||
 80029d8:	4b27      	ldr	r3, [pc, #156]	@ (8002a78 <update_sensors+0x2e0>)
 80029da:	891c      	ldrh	r4, [r3, #8]
 80029dc:	2000      	movs	r0, #0
 80029de:	f000 f88d 	bl	8002afc <get_calibrated_threshold>
 80029e2:	4603      	mov	r3, r0
 80029e4:	429c      	cmp	r4, r3
 80029e6:	d807      	bhi.n	80029f8 <update_sensors+0x260>
                            (sensors.front_right > get_calibrated_threshold(1));
 80029e8:	4b23      	ldr	r3, [pc, #140]	@ (8002a78 <update_sensors+0x2e0>)
 80029ea:	885c      	ldrh	r4, [r3, #2]
 80029ec:	2001      	movs	r0, #1
 80029ee:	f000 f885 	bl	8002afc <get_calibrated_threshold>
 80029f2:	4603      	mov	r3, r0
        sensors.wall_front = (sensors.front_left > get_calibrated_threshold(0)) ||
 80029f4:	429c      	cmp	r4, r3
 80029f6:	d901      	bls.n	80029fc <update_sensors+0x264>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <update_sensors+0x266>
 80029fc:	2300      	movs	r3, #0
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	4b1c      	ldr	r3, [pc, #112]	@ (8002a78 <update_sensors+0x2e0>)
 8002a06:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > get_calibrated_threshold(2));
 8002a08:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <update_sensors+0x2e0>)
 8002a0a:	88dc      	ldrh	r4, [r3, #6]
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f000 f875 	bl	8002afc <get_calibrated_threshold>
 8002a12:	4603      	mov	r3, r0
 8002a14:	429c      	cmp	r4, r3
 8002a16:	bf8c      	ite	hi
 8002a18:	2301      	movhi	r3, #1
 8002a1a:	2300      	movls	r3, #0
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b16      	ldr	r3, [pc, #88]	@ (8002a78 <update_sensors+0x2e0>)
 8002a20:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > get_calibrated_threshold(3));
 8002a22:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <update_sensors+0x2e0>)
 8002a24:	889c      	ldrh	r4, [r3, #4]
 8002a26:	2003      	movs	r0, #3
 8002a28:	f000 f868 	bl	8002afc <get_calibrated_threshold>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	429c      	cmp	r4, r3
 8002a30:	bf8c      	ite	hi
 8002a32:	2301      	movhi	r3, #1
 8002a34:	2300      	movls	r3, #0
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <update_sensors+0x2e0>)
 8002a3a:	731a      	strb	r2, [r3, #12]
 8002a3c:	e038      	b.n	8002ab0 <update_sensors+0x318>
    } else {
        // Fallback to static thresholds
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a78 <update_sensors+0x2e0>)
 8002a40:	891b      	ldrh	r3, [r3, #8]
 8002a42:	2b32      	cmp	r3, #50	@ 0x32
 8002a44:	d803      	bhi.n	8002a4e <update_sensors+0x2b6>
                            (sensors.front_right > WALL_THRESHOLD_FRONT);
 8002a46:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <update_sensors+0x2e0>)
 8002a48:	885b      	ldrh	r3, [r3, #2]
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 8002a4a:	2b32      	cmp	r3, #50	@ 0x32
 8002a4c:	d918      	bls.n	8002a80 <update_sensors+0x2e8>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e017      	b.n	8002a82 <update_sensors+0x2ea>
 8002a52:	bf00      	nop
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	20001510 	.word	0x20001510
 8002a60:	10624dd3 	.word	0x10624dd3
 8002a64:	20001514 	.word	0x20001514
 8002a68:	20001528 	.word	0x20001528
 8002a6c:	2000153c 	.word	0x2000153c
 8002a70:	20001550 	.word	0x20001550
 8002a74:	cccccccd 	.word	0xcccccccd
 8002a78:	20001458 	.word	0x20001458
 8002a7c:	200014dc 	.word	0x200014dc
 8002a80:	2300      	movs	r3, #0
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b1a      	ldr	r3, [pc, #104]	@ (8002af4 <update_sensors+0x35c>)
 8002a8a:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > WALL_THRESHOLD_SIDE);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <update_sensors+0x35c>)
 8002a8e:	88db      	ldrh	r3, [r3, #6]
 8002a90:	2b14      	cmp	r3, #20
 8002a92:	bf8c      	ite	hi
 8002a94:	2301      	movhi	r3, #1
 8002a96:	2300      	movls	r3, #0
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <update_sensors+0x35c>)
 8002a9c:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > WALL_THRESHOLD_SIDE);
 8002a9e:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <update_sensors+0x35c>)
 8002aa0:	889b      	ldrh	r3, [r3, #4]
 8002aa2:	2b14      	cmp	r3, #20
 8002aa4:	bf8c      	ite	hi
 8002aa6:	2301      	movhi	r3, #1
 8002aa8:	2300      	movls	r3, #0
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <update_sensors+0x35c>)
 8002aae:	731a      	strb	r2, [r3, #12]
//	                          on_FL, off_FL, on_FR,off_FR,
//	                          on_L, off_L,on_R, off_R);


	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
		                          sensors.front_left, sensors.front_right,sensors.wall_front,
 8002ab0:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <update_sensors+0x35c>)
 8002ab2:	891b      	ldrh	r3, [r3, #8]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8002ab4:	461c      	mov	r4, r3
		                          sensors.front_left, sensors.front_right,sensors.wall_front,
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8002af4 <update_sensors+0x35c>)
 8002ab8:	885b      	ldrh	r3, [r3, #2]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8002aba:	461d      	mov	r5, r3
		                          sensors.front_left, sensors.front_right,sensors.wall_front,
 8002abc:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <update_sensors+0x35c>)
 8002abe:	7a9b      	ldrb	r3, [r3, #10]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8002ac0:	461e      	mov	r6, r3
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <update_sensors+0x35c>)
 8002ac4:	88db      	ldrh	r3, [r3, #6]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8002ac6:	461a      	mov	r2, r3
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <update_sensors+0x35c>)
 8002aca:	7adb      	ldrb	r3, [r3, #11]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8002acc:	4619      	mov	r1, r3
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <update_sensors+0x35c>)
 8002ad0:	889b      	ldrh	r3, [r3, #4]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8002ad2:	4618      	mov	r0, r3
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
 8002ad4:	4b07      	ldr	r3, [pc, #28]	@ (8002af4 <update_sensors+0x35c>)
 8002ad6:	7b1b      	ldrb	r3, [r3, #12]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8002ad8:	9303      	str	r3, [sp, #12]
 8002ada:	9002      	str	r0, [sp, #8]
 8002adc:	9101      	str	r1, [sp, #4]
 8002ade:	9200      	str	r2, [sp, #0]
 8002ae0:	4633      	mov	r3, r6
 8002ae2:	462a      	mov	r2, r5
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	4804      	ldr	r0, [pc, #16]	@ (8002af8 <update_sensors+0x360>)
 8002ae8:	f7fe fa7c 	bl	8000fe4 <send_bluetooth_printf>

}
 8002aec:	bf00      	nop
 8002aee:	373c      	adds	r7, #60	@ 0x3c
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002af4:	20001458 	.word	0x20001458
 8002af8:	0800b5cc 	.word	0x0800b5cc

08002afc <get_calibrated_threshold>:
 * @brief Get calibrated wall threshold for specific sensor
 * @param sensor_index: 0=Front_Left, 1=Front_Right, 2=Side_Left, 3=Side_Right
 * @return Calibrated threshold value
 */
uint16_t get_calibrated_threshold(int sensor_index)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    if (sensor_index < 0 || sensor_index > 3 || !sensor_cal.calibration_valid) {
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db0a      	blt.n	8002b20 <get_calibrated_threshold+0x24>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	dc07      	bgt.n	8002b20 <get_calibrated_threshold+0x24>
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <get_calibrated_threshold+0x48>)
 8002b12:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <get_calibrated_threshold+0x32>
        // Return default thresholds if calibration failed
        return (sensor_index < 2) ? WALL_THRESHOLD_FRONT : WALL_THRESHOLD_SIDE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	dc01      	bgt.n	8002b2a <get_calibrated_threshold+0x2e>
 8002b26:	2332      	movs	r3, #50	@ 0x32
 8002b28:	e006      	b.n	8002b38 <get_calibrated_threshold+0x3c>
 8002b2a:	2314      	movs	r3, #20
 8002b2c:	e004      	b.n	8002b38 <get_calibrated_threshold+0x3c>
    }

    return sensor_cal.wall_thresholds[sensor_index];
 8002b2e:	4a05      	ldr	r2, [pc, #20]	@ (8002b44 <get_calibrated_threshold+0x48>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	200014dc 	.word	0x200014dc

08002b48 <adc_system_diagnostics>:

    send_bluetooth_message("===============================\r\n");
}


void adc_system_diagnostics(void) {
 8002b48:	b5b0      	push	{r4, r5, r7, lr}
 8002b4a:	b08e      	sub	sp, #56	@ 0x38
 8002b4c:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 8002b4e:	484b      	ldr	r0, [pc, #300]	@ (8002c7c <adc_system_diagnostics+0x134>)
 8002b50:	f7fe fa32 	bl	8000fb8 <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 8002b54:	4b4a      	ldr	r3, [pc, #296]	@ (8002c80 <adc_system_diagnostics+0x138>)
 8002b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 8002b60:	4848      	ldr	r0, [pc, #288]	@ (8002c84 <adc_system_diagnostics+0x13c>)
 8002b62:	f7fe fa29 	bl	8000fb8 <send_bluetooth_message>
 8002b66:	e002      	b.n	8002b6e <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 8002b68:	4847      	ldr	r0, [pc, #284]	@ (8002c88 <adc_system_diagnostics+0x140>)
 8002b6a:	f7fe fa25 	bl	8000fb8 <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 8002b6e:	4b44      	ldr	r3, [pc, #272]	@ (8002c80 <adc_system_diagnostics+0x138>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 8002b7a:	4844      	ldr	r0, [pc, #272]	@ (8002c8c <adc_system_diagnostics+0x144>)
 8002b7c:	f7fe fa1c 	bl	8000fb8 <send_bluetooth_message>
 8002b80:	e002      	b.n	8002b88 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 8002b82:	4843      	ldr	r0, [pc, #268]	@ (8002c90 <adc_system_diagnostics+0x148>)
 8002b84:	f7fe fa18 	bl	8000fb8 <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 8002b88:	4b42      	ldr	r3, [pc, #264]	@ (8002c94 <adc_system_diagnostics+0x14c>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d103      	bne.n	8002b98 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 8002b90:	4841      	ldr	r0, [pc, #260]	@ (8002c98 <adc_system_diagnostics+0x150>)
 8002b92:	f7fe fa11 	bl	8000fb8 <send_bluetooth_message>
 8002b96:	e005      	b.n	8002ba4 <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 8002b98:	4b3e      	ldr	r3, [pc, #248]	@ (8002c94 <adc_system_diagnostics+0x14c>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	483f      	ldr	r0, [pc, #252]	@ (8002c9c <adc_system_diagnostics+0x154>)
 8002ba0:	f7fe fa20 	bl	8000fe4 <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 8002ba4:	483e      	ldr	r0, [pc, #248]	@ (8002ca0 <adc_system_diagnostics+0x158>)
 8002ba6:	f7fe fa07 	bl	8000fb8 <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 8002baa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca4 <adc_system_diagnostics+0x15c>)
 8002bac:	f107 0420 	add.w	r4, r7, #32
 8002bb0:	461d      	mov	r5, r3
 8002bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bb6:	682b      	ldr	r3, [r5, #0]
 8002bb8:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 8002bba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <adc_system_diagnostics+0x160>)
 8002bbc:	f107 040c 	add.w	r4, r7, #12
 8002bc0:	461d      	mov	r5, r3
 8002bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bc6:	682b      	ldr	r3, [r5, #0]
 8002bc8:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 8002bca:	2300      	movs	r3, #0
 8002bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bce:	e04b      	b.n	8002c68 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	3338      	adds	r3, #56	@ 0x38
 8002bd6:	443b      	add	r3, r7
 8002bd8:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fd99 	bl	8002714 <read_adc_channel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	461a      	mov	r2, r3
 8002be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	3338      	adds	r3, #56	@ 0x38
 8002bec:	443b      	add	r3, r7
 8002bee:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	3338      	adds	r3, #56	@ 0x38
 8002bf8:	443b      	add	r3, r7
 8002bfa:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	3338      	adds	r3, #56	@ 0x38
 8002c04:	443b      	add	r3, r7
 8002c06:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01f      	beq.n	8002c4e <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	3338      	adds	r3, #56	@ 0x38
 8002c14:	443b      	add	r3, r7
 8002c16:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d015      	beq.n	8002c4a <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	3338      	adds	r3, #56	@ 0x38
 8002c24:	443b      	add	r3, r7
 8002c26:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d00b      	beq.n	8002c46 <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	3338      	adds	r3, #56	@ 0x38
 8002c34:	443b      	add	r3, r7
 8002c36:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d101      	bne.n	8002c42 <adc_system_diagnostics+0xfa>
 8002c3e:	2204      	movs	r2, #4
 8002c40:	e006      	b.n	8002c50 <adc_system_diagnostics+0x108>
 8002c42:	2205      	movs	r2, #5
 8002c44:	e004      	b.n	8002c50 <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 8002c46:	2203      	movs	r2, #3
 8002c48:	e002      	b.n	8002c50 <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	e000      	b.n	8002c50 <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8002c4e:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 8002c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	3338      	adds	r3, #56	@ 0x38
 8002c56:	443b      	add	r3, r7
 8002c58:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8002c5c:	4813      	ldr	r0, [pc, #76]	@ (8002cac <adc_system_diagnostics+0x164>)
 8002c5e:	f7fe f9c1 	bl	8000fe4 <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	3301      	adds	r3, #1
 8002c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	ddb0      	ble.n	8002bd0 <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 8002c6e:	4810      	ldr	r0, [pc, #64]	@ (8002cb0 <adc_system_diagnostics+0x168>)
 8002c70:	f7fe f9a2 	bl	8000fb8 <send_bluetooth_message>
}
 8002c74:	bf00      	nop
 8002c76:	3738      	adds	r7, #56	@ 0x38
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7c:	0800bd44 	.word	0x0800bd44
 8002c80:	40023800 	.word	0x40023800
 8002c84:	0800bd68 	.word	0x0800bd68
 8002c88:	0800bd84 	.word	0x0800bd84
 8002c8c:	0800bda0 	.word	0x0800bda0
 8002c90:	0800bdbc 	.word	0x0800bdbc
 8002c94:	2000023c 	.word	0x2000023c
 8002c98:	0800bdd8 	.word	0x0800bdd8
 8002c9c:	0800bdf0 	.word	0x0800bdf0
 8002ca0:	0800be08 	.word	0x0800be08
 8002ca4:	0800be38 	.word	0x0800be38
 8002ca8:	0800be84 	.word	0x0800be84
 8002cac:	0800be28 	.word	0x0800be28
 8002cb0:	0800bd20 	.word	0x0800bd20

08002cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <HAL_MspInit+0x4c>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002d00 <HAL_MspInit+0x4c>)
 8002cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <HAL_MspInit+0x4c>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <HAL_MspInit+0x4c>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	4a08      	ldr	r2, [pc, #32]	@ (8002d00 <HAL_MspInit+0x4c>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_MspInit+0x4c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800

08002d04 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	@ 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a17      	ldr	r2, [pc, #92]	@ (8002d80 <HAL_ADC_MspInit+0x7c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d127      	bne.n	8002d76 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <HAL_ADC_MspInit+0x80>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2e:	4a15      	ldr	r2, [pc, #84]	@ (8002d84 <HAL_ADC_MspInit+0x80>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <HAL_ADC_MspInit+0x80>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <HAL_ADC_MspInit+0x80>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d84 <HAL_ADC_MspInit+0x80>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d52:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <HAL_ADC_MspInit+0x80>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 8002d5e:	233d      	movs	r3, #61	@ 0x3d
 8002d60:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d62:	2303      	movs	r3, #3
 8002d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4805      	ldr	r0, [pc, #20]	@ (8002d88 <HAL_ADC_MspInit+0x84>)
 8002d72:	f001 f9c1 	bl	80040f8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d76:	bf00      	nop
 8002d78:	3728      	adds	r7, #40	@ 0x28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40012000 	.word	0x40012000
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020000 	.word	0x40020000

08002d8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	@ 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a19      	ldr	r2, [pc, #100]	@ (8002e10 <HAL_SPI_MspInit+0x84>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d12c      	bne.n	8002e08 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	4b18      	ldr	r3, [pc, #96]	@ (8002e14 <HAL_SPI_MspInit+0x88>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	4a17      	ldr	r2, [pc, #92]	@ (8002e14 <HAL_SPI_MspInit+0x88>)
 8002db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbe:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <HAL_SPI_MspInit+0x88>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_SPI_MspInit+0x88>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4a10      	ldr	r2, [pc, #64]	@ (8002e14 <HAL_SPI_MspInit+0x88>)
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dda:	4b0e      	ldr	r3, [pc, #56]	@ (8002e14 <HAL_SPI_MspInit+0x88>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 8002de6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df4:	2303      	movs	r3, #3
 8002df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002df8:	2305      	movs	r3, #5
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	4619      	mov	r1, r3
 8002e02:	4805      	ldr	r0, [pc, #20]	@ (8002e18 <HAL_SPI_MspInit+0x8c>)
 8002e04:	f001 f978 	bl	80040f8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002e08:	bf00      	nop
 8002e0a:	3728      	adds	r7, #40	@ 0x28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40003800 	.word	0x40003800
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40020400 	.word	0x40020400

08002e1c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a18      	ldr	r2, [pc, #96]	@ (8002e8c <HAL_TIM_Base_MspInit+0x70>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d116      	bne.n	8002e5c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b17      	ldr	r3, [pc, #92]	@ (8002e90 <HAL_TIM_Base_MspInit+0x74>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <HAL_TIM_Base_MspInit+0x74>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3e:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <HAL_TIM_Base_MspInit+0x74>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2107      	movs	r1, #7
 8002e4e:	2019      	movs	r0, #25
 8002e50:	f001 f889 	bl	8003f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e54:	2019      	movs	r0, #25
 8002e56:	f001 f8a2 	bl	8003f9e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e5a:	e012      	b.n	8002e82 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0c      	ldr	r2, [pc, #48]	@ (8002e94 <HAL_TIM_Base_MspInit+0x78>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10d      	bne.n	8002e82 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <HAL_TIM_Base_MspInit+0x74>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	4a08      	ldr	r2, [pc, #32]	@ (8002e90 <HAL_TIM_Base_MspInit+0x74>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e76:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_TIM_Base_MspInit+0x74>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40000400 	.word	0x40000400

08002e98 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08c      	sub	sp, #48	@ 0x30
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 031c 	add.w	r3, r7, #28
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb8:	d14b      	bne.n	8002f52 <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eca:	4b3c      	ldr	r3, [pc, #240]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	4b38      	ldr	r3, [pc, #224]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a37      	ldr	r2, [pc, #220]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b35      	ldr	r3, [pc, #212]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a30      	ldr	r2, [pc, #192]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b2e      	ldr	r3, [pc, #184]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 8002f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f20:	2301      	movs	r3, #1
 8002f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 8002f24:	f107 031c 	add.w	r3, r7, #28
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4825      	ldr	r0, [pc, #148]	@ (8002fc0 <HAL_TIM_Encoder_MspInit+0x128>)
 8002f2c:	f001 f8e4 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 8002f30:	2308      	movs	r3, #8
 8002f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f40:	2301      	movs	r3, #1
 8002f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	4619      	mov	r1, r3
 8002f4a:	481e      	ldr	r0, [pc, #120]	@ (8002fc4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002f4c:	f001 f8d4 	bl	80040f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f50:	e030      	b.n	8002fb4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc8 <HAL_TIM_Encoder_MspInit+0x130>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d12b      	bne.n	8002fb4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	4b16      	ldr	r3, [pc, #88]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	4a15      	ldr	r2, [pc, #84]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f6c:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	4a0e      	ldr	r2, [pc, #56]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f88:	4b0c      	ldr	r3, [pc, #48]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 8002f94:	23c0      	movs	r3, #192	@ 0xc0
 8002f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	4619      	mov	r1, r3
 8002fae:	4805      	ldr	r0, [pc, #20]	@ (8002fc4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002fb0:	f001 f8a2 	bl	80040f8 <HAL_GPIO_Init>
}
 8002fb4:	bf00      	nop
 8002fb6:	3730      	adds	r7, #48	@ 0x30
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40000800 	.word	0x40000800

08002fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a33      	ldr	r2, [pc, #204]	@ (80030b8 <HAL_TIM_MspPostInit+0xec>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d11f      	bne.n	800302e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	4b32      	ldr	r3, [pc, #200]	@ (80030bc <HAL_TIM_MspPostInit+0xf0>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	4a31      	ldr	r2, [pc, #196]	@ (80030bc <HAL_TIM_MspPostInit+0xf0>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80030bc <HAL_TIM_MspPostInit+0xf0>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 800300a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800300e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800301c:	2301      	movs	r3, #1
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4619      	mov	r1, r3
 8003026:	4826      	ldr	r0, [pc, #152]	@ (80030c0 <HAL_TIM_MspPostInit+0xf4>)
 8003028:	f001 f866 	bl	80040f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800302c:	e040      	b.n	80030b0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a24      	ldr	r2, [pc, #144]	@ (80030c4 <HAL_TIM_MspPostInit+0xf8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d13b      	bne.n	80030b0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	4b1f      	ldr	r3, [pc, #124]	@ (80030bc <HAL_TIM_MspPostInit+0xf0>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	4a1e      	ldr	r2, [pc, #120]	@ (80030bc <HAL_TIM_MspPostInit+0xf0>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6313      	str	r3, [r2, #48]	@ 0x30
 8003048:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <HAL_TIM_MspPostInit+0xf0>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <HAL_TIM_MspPostInit+0xf0>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <HAL_TIM_MspPostInit+0xf0>)
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	6313      	str	r3, [r2, #48]	@ 0x30
 8003064:	4b15      	ldr	r3, [pc, #84]	@ (80030bc <HAL_TIM_MspPostInit+0xf0>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8003070:	23c0      	movs	r3, #192	@ 0xc0
 8003072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307c:	2300      	movs	r3, #0
 800307e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003080:	2302      	movs	r3, #2
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	4619      	mov	r1, r3
 800308a:	480d      	ldr	r0, [pc, #52]	@ (80030c0 <HAL_TIM_MspPostInit+0xf4>)
 800308c:	f001 f834 	bl	80040f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 8003090:	2303      	movs	r3, #3
 8003092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030a0:	2302      	movs	r3, #2
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	4619      	mov	r1, r3
 80030aa:	4807      	ldr	r0, [pc, #28]	@ (80030c8 <HAL_TIM_MspPostInit+0xfc>)
 80030ac:	f001 f824 	bl	80040f8 <HAL_GPIO_Init>
}
 80030b0:	bf00      	nop
 80030b2:	3728      	adds	r7, #40	@ 0x28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40020400 	.word	0x40020400

080030cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	@ 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003160 <HAL_UART_MspInit+0x94>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d134      	bne.n	8003158 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003164 <HAL_UART_MspInit+0x98>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_UART_MspInit+0x98>)
 80030f8:	f043 0320 	orr.w	r3, r3, #32
 80030fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030fe:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_UART_MspInit+0x98>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <HAL_UART_MspInit+0x98>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a14      	ldr	r2, [pc, #80]	@ (8003164 <HAL_UART_MspInit+0x98>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b12      	ldr	r3, [pc, #72]	@ (8003164 <HAL_UART_MspInit+0x98>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8003126:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800312a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003138:	2308      	movs	r3, #8
 800313a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	4619      	mov	r1, r3
 8003142:	4809      	ldr	r0, [pc, #36]	@ (8003168 <HAL_UART_MspInit+0x9c>)
 8003144:	f000 ffd8 	bl	80040f8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003148:	2200      	movs	r2, #0
 800314a:	2106      	movs	r1, #6
 800314c:	2047      	movs	r0, #71	@ 0x47
 800314e:	f000 ff0a 	bl	8003f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003152:	2047      	movs	r0, #71	@ 0x47
 8003154:	f000 ff23 	bl	8003f9e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8003158:	bf00      	nop
 800315a:	3728      	adds	r7, #40	@ 0x28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40011400 	.word	0x40011400
 8003164:	40023800 	.word	0x40023800
 8003168:	40020000 	.word	0x40020000

0800316c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <NMI_Handler+0x4>

08003174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003178:	bf00      	nop
 800317a:	e7fd      	b.n	8003178 <HardFault_Handler+0x4>

0800317c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003180:	bf00      	nop
 8003182:	e7fd      	b.n	8003180 <MemManage_Handler+0x4>

08003184 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <BusFault_Handler+0x4>

0800318c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <UsageFault_Handler+0x4>

08003194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031c2:	f000 f9bf 	bl	8003544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}

080031ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 80031ce:	2002      	movs	r0, #2
 80031d0:	f001 f94a 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031dc:	4802      	ldr	r0, [pc, #8]	@ (80031e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80031de:	f002 fe75 	bl	8005ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200002dc 	.word	0x200002dc

080031ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 80031f0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80031f4:	f001 f938 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}

080031fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003200:	4802      	ldr	r0, [pc, #8]	@ (800320c <USART6_IRQHandler+0x10>)
 8003202:	f003 fd91 	bl	8006d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	200003fc 	.word	0x200003fc

08003210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return 1;
 8003214:	2301      	movs	r3, #1
}
 8003216:	4618      	mov	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_kill>:

int _kill(int pid, int sig)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800322a:	f005 faa3 	bl	8008774 <__errno>
 800322e:	4603      	mov	r3, r0
 8003230:	2216      	movs	r2, #22
 8003232:	601a      	str	r2, [r3, #0]
  return -1;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <_exit>:

void _exit (int status)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff ffe7 	bl	8003220 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003252:	bf00      	nop
 8003254:	e7fd      	b.n	8003252 <_exit+0x12>

08003256 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	e00a      	b.n	800327e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003268:	f3af 8000 	nop.w
 800326c:	4601      	mov	r1, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	60ba      	str	r2, [r7, #8]
 8003274:	b2ca      	uxtb	r2, r1
 8003276:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3301      	adds	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	dbf0      	blt.n	8003268 <_read+0x12>
  }

  return len;
 8003286:	687b      	ldr	r3, [r7, #4]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e009      	b.n	80032b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	60ba      	str	r2, [r7, #8]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	3301      	adds	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	dbf1      	blt.n	80032a2 <_write+0x12>
  }
  return len;
 80032be:	687b      	ldr	r3, [r7, #4]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <_close>:

int _close(int file)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032f0:	605a      	str	r2, [r3, #4]
  return 0;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <_isatty>:

int _isatty(int file)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003308:	2301      	movs	r3, #1
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003316:	b480      	push	{r7}
 8003318:	b085      	sub	sp, #20
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003338:	4a14      	ldr	r2, [pc, #80]	@ (800338c <_sbrk+0x5c>)
 800333a:	4b15      	ldr	r3, [pc, #84]	@ (8003390 <_sbrk+0x60>)
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003344:	4b13      	ldr	r3, [pc, #76]	@ (8003394 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d102      	bne.n	8003352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800334c:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <_sbrk+0x64>)
 800334e:	4a12      	ldr	r2, [pc, #72]	@ (8003398 <_sbrk+0x68>)
 8003350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003352:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <_sbrk+0x64>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	429a      	cmp	r2, r3
 800335e:	d207      	bcs.n	8003370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003360:	f005 fa08 	bl	8008774 <__errno>
 8003364:	4603      	mov	r3, r0
 8003366:	220c      	movs	r2, #12
 8003368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295
 800336e:	e009      	b.n	8003384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003370:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <_sbrk+0x64>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003376:	4b07      	ldr	r3, [pc, #28]	@ (8003394 <_sbrk+0x64>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	4a05      	ldr	r2, [pc, #20]	@ (8003394 <_sbrk+0x64>)
 8003380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003382:	68fb      	ldr	r3, [r7, #12]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20020000 	.word	0x20020000
 8003390:	00000400 	.word	0x00000400
 8003394:	20001564 	.word	0x20001564
 8003398:	200016b8 	.word	0x200016b8

0800339c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033a0:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <SystemInit+0x20>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a6:	4a05      	ldr	r2, [pc, #20]	@ (80033bc <SystemInit+0x20>)
 80033a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	460a      	mov	r2, r1
 80033ca:	71fb      	strb	r3, [r7, #7]
 80033cc:	4613      	mov	r3, r2
 80033ce:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	2110      	movs	r1, #16
 80033e0:	4808      	ldr	r0, [pc, #32]	@ (8003404 <led_status+0x44>)
 80033e2:	f001 f80d 	bl	8004400 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80033e6:	79bb      	ldrb	r3, [r7, #6]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	2120      	movs	r1, #32
 80033f6:	4803      	ldr	r0, [pc, #12]	@ (8003404 <led_status+0x44>)
 80033f8:	f001 f802 	bl	8004400 <HAL_GPIO_WritePin>
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40020400 	.word	0x40020400

08003408 <led_sequence_startup>:

/**
 * @brief LED sequence for different states
 */
void led_sequence_startup(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	e010      	b.n	8003436 <led_sequence_startup+0x2e>
        led_status(1, 0);
 8003414:	2100      	movs	r1, #0
 8003416:	2001      	movs	r0, #1
 8003418:	f7ff ffd2 	bl	80033c0 <led_status>
        HAL_Delay(150);
 800341c:	2096      	movs	r0, #150	@ 0x96
 800341e:	f000 f8b1 	bl	8003584 <HAL_Delay>
        led_status(0, 1);
 8003422:	2101      	movs	r1, #1
 8003424:	2000      	movs	r0, #0
 8003426:	f7ff ffcb 	bl	80033c0 <led_status>
        HAL_Delay(150);
 800342a:	2096      	movs	r0, #150	@ 0x96
 800342c:	f000 f8aa 	bl	8003584 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3301      	adds	r3, #1
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b02      	cmp	r3, #2
 800343a:	ddeb      	ble.n	8003414 <led_sequence_startup+0xc>
    }
    led_status(0, 0);
 800343c:	2100      	movs	r1, #0
 800343e:	2000      	movs	r0, #0
 8003440:	f7ff ffbe 	bl	80033c0 <led_status>
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800344c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003484 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003450:	f7ff ffa4 	bl	800339c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003454:	480c      	ldr	r0, [pc, #48]	@ (8003488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003456:	490d      	ldr	r1, [pc, #52]	@ (800348c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003458:	4a0d      	ldr	r2, [pc, #52]	@ (8003490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800345a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800345c:	e002      	b.n	8003464 <LoopCopyDataInit>

0800345e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800345e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003462:	3304      	adds	r3, #4

08003464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003468:	d3f9      	bcc.n	800345e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800346a:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800346c:	4c0a      	ldr	r4, [pc, #40]	@ (8003498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800346e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003470:	e001      	b.n	8003476 <LoopFillZerobss>

08003472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003474:	3204      	adds	r2, #4

08003476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003478:	d3fb      	bcc.n	8003472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800347a:	f005 f981 	bl	8008780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800347e:	f7fe f863 	bl	8001548 <main>
  bx  lr    
 8003482:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800348c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003490:	0800c2f4 	.word	0x0800c2f4
  ldr r2, =_sbss
 8003494:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003498:	200016b8 	.word	0x200016b8

0800349c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800349c:	e7fe      	b.n	800349c <ADC_IRQHandler>
	...

080034a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034a4:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <HAL_Init+0x40>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0d      	ldr	r2, [pc, #52]	@ (80034e0 <HAL_Init+0x40>)
 80034aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_Init+0x40>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0a      	ldr	r2, [pc, #40]	@ (80034e0 <HAL_Init+0x40>)
 80034b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034bc:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <HAL_Init+0x40>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a07      	ldr	r2, [pc, #28]	@ (80034e0 <HAL_Init+0x40>)
 80034c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034c8:	2003      	movs	r0, #3
 80034ca:	f000 fd41 	bl	8003f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ce:	200f      	movs	r0, #15
 80034d0:	f000 f808 	bl	80034e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034d4:	f7ff fbee 	bl	8002cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00

080034e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034ec:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <HAL_InitTick+0x54>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b12      	ldr	r3, [pc, #72]	@ (800353c <HAL_InitTick+0x58>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fd59 	bl	8003fba <HAL_SYSTICK_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e00e      	b.n	8003530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b0f      	cmp	r3, #15
 8003516:	d80a      	bhi.n	800352e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003518:	2200      	movs	r2, #0
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f000 fd21 	bl	8003f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003524:	4a06      	ldr	r2, [pc, #24]	@ (8003540 <HAL_InitTick+0x5c>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000034 	.word	0x20000034
 800353c:	2000003c 	.word	0x2000003c
 8003540:	20000038 	.word	0x20000038

08003544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_IncTick+0x20>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_IncTick+0x24>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4413      	add	r3, r2
 8003554:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <HAL_IncTick+0x24>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	2000003c 	.word	0x2000003c
 8003568:	20001568 	.word	0x20001568

0800356c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return uwTick;
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <HAL_GetTick+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20001568 	.word	0x20001568

08003584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff ffee 	bl	800356c <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d005      	beq.n	80035aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800359e:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <HAL_Delay+0x44>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035aa:	bf00      	nop
 80035ac:	f7ff ffde 	bl	800356c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d8f7      	bhi.n	80035ac <HAL_Delay+0x28>
  {
  }
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000003c 	.word	0x2000003c

080035cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e033      	b.n	800364a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff fb8a 	bl	8002d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003612:	f023 0302 	bic.w	r3, r3, #2
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 faca 	bl	8003bb8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	f043 0201 	orr.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	641a      	str	r2, [r3, #64]	@ 0x40
 800363a:	e001      	b.n	8003640 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_ADC_Start+0x1a>
 800366a:	2302      	movs	r3, #2
 800366c:	e097      	b.n	800379e <HAL_ADC_Start+0x14a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d018      	beq.n	80036b6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003694:	4b45      	ldr	r3, [pc, #276]	@ (80037ac <HAL_ADC_Start+0x158>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a45      	ldr	r2, [pc, #276]	@ (80037b0 <HAL_ADC_Start+0x15c>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	0c9a      	lsrs	r2, r3, #18
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80036a8:	e002      	b.n	80036b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f9      	bne.n	80036aa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d15f      	bne.n	8003784 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003702:	d106      	bne.n	8003712 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003708:	f023 0206 	bic.w	r2, r3, #6
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003710:	e002      	b.n	8003718 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003720:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_ADC_Start+0x160>)
 8003722:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800372c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d129      	bne.n	800379c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	e020      	b.n	800379c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a16      	ldr	r2, [pc, #88]	@ (80037b8 <HAL_ADC_Start+0x164>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d11b      	bne.n	800379c <HAL_ADC_Start+0x148>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d114      	bne.n	800379c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	e00b      	b.n	800379c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	f043 0210 	orr.w	r2, r3, #16
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003794:	f043 0201 	orr.w	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000034 	.word	0x20000034
 80037b0:	431bde83 	.word	0x431bde83
 80037b4:	40012300 	.word	0x40012300
 80037b8:	40012000 	.word	0x40012000

080037bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_Stop+0x16>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e021      	b.n	8003816 <HAL_ADC_Stop+0x5a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	f043 0201 	orr.w	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383e:	d113      	bne.n	8003868 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800384a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800384e:	d10b      	bne.n	8003868 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e063      	b.n	8003930 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003868:	f7ff fe80 	bl	800356c <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800386e:	e021      	b.n	80038b4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	d01d      	beq.n	80038b4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_ADC_PollForConversion+0x6c>
 800387e:	f7ff fe75 	bl	800356c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d212      	bcs.n	80038b4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b02      	cmp	r3, #2
 800389a:	d00b      	beq.n	80038b4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	f043 0204 	orr.w	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e03d      	b.n	8003930 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d1d6      	bne.n	8003870 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f06f 0212 	mvn.w	r2, #18
 80038ca:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d123      	bne.n	800392e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11f      	bne.n	800392e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003906:	2b00      	cmp	r3, #0
 8003908:	d111      	bne.n	800392e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d105      	bne.n	800392e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x1c>
 800396c:	2302      	movs	r3, #2
 800396e:	e113      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x244>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b09      	cmp	r3, #9
 800397e:	d925      	bls.n	80039cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68d9      	ldr	r1, [r3, #12]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	3b1e      	subs	r3, #30
 8003996:	2207      	movs	r2, #7
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43da      	mvns	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	400a      	ands	r2, r1
 80039a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68d9      	ldr	r1, [r3, #12]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	4618      	mov	r0, r3
 80039b8:	4603      	mov	r3, r0
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4403      	add	r3, r0
 80039be:	3b1e      	subs	r3, #30
 80039c0:	409a      	lsls	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	e022      	b.n	8003a12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6919      	ldr	r1, [r3, #16]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	4613      	mov	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	2207      	movs	r2, #7
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43da      	mvns	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	400a      	ands	r2, r1
 80039ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6919      	ldr	r1, [r3, #16]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	4618      	mov	r0, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	4403      	add	r3, r0
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d824      	bhi.n	8003a64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	3b05      	subs	r3, #5
 8003a2c:	221f      	movs	r2, #31
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43da      	mvns	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	400a      	ands	r2, r1
 8003a3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	3b05      	subs	r3, #5
 8003a56:	fa00 f203 	lsl.w	r2, r0, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a62:	e04c      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d824      	bhi.n	8003ab6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3b23      	subs	r3, #35	@ 0x23
 8003a7e:	221f      	movs	r2, #31
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43da      	mvns	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3b23      	subs	r3, #35	@ 0x23
 8003aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ab4:	e023      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3b41      	subs	r3, #65	@ 0x41
 8003ac8:	221f      	movs	r2, #31
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	3b41      	subs	r3, #65	@ 0x41
 8003af2:	fa00 f203 	lsl.w	r2, r0, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003afe:	4b29      	ldr	r3, [pc, #164]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x250>)
 8003b00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a28      	ldr	r2, [pc, #160]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x254>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10f      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x1d8>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b12      	cmp	r3, #18
 8003b12:	d10b      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x254>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d12b      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x23a>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bac <HAL_ADC_ConfigChannel+0x258>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <HAL_ADC_ConfigChannel+0x1f4>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b11      	cmp	r3, #17
 8003b46:	d122      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a11      	ldr	r2, [pc, #68]	@ (8003bac <HAL_ADC_ConfigChannel+0x258>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d111      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b6a:	4b11      	ldr	r3, [pc, #68]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x25c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a11      	ldr	r2, [pc, #68]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x260>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	0c9a      	lsrs	r2, r3, #18
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b80:	e002      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f9      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40012300 	.word	0x40012300
 8003ba8:	40012000 	.word	0x40012000
 8003bac:	10000012 	.word	0x10000012
 8003bb0:	20000034 	.word	0x20000034
 8003bb4:	431bde83 	.word	0x431bde83

08003bb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bc0:	4b79      	ldr	r3, [pc, #484]	@ (8003da8 <ADC_Init+0x1f0>)
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	021a      	lsls	r2, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6899      	ldr	r1, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	4a58      	ldr	r2, [pc, #352]	@ (8003dac <ADC_Init+0x1f4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d022      	beq.n	8003c96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6899      	ldr	r1, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6899      	ldr	r1, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	e00f      	b.n	8003cb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ca4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003cb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0202 	bic.w	r2, r2, #2
 8003cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6899      	ldr	r1, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7e1b      	ldrb	r3, [r3, #24]
 8003cd0:	005a      	lsls	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01b      	beq.n	8003d1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cf2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003d02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6859      	ldr	r1, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	035a      	lsls	r2, r3, #13
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	e007      	b.n	8003d2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	051a      	lsls	r2, r3, #20
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6899      	ldr	r1, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d6e:	025a      	lsls	r2, r3, #9
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6899      	ldr	r1, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	029a      	lsls	r2, r3, #10
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40012300 	.word	0x40012300
 8003dac:	0f000001 	.word	0x0f000001

08003db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003de2:	4a04      	ldr	r2, [pc, #16]	@ (8003df4 <__NVIC_SetPriorityGrouping+0x44>)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	60d3      	str	r3, [r2, #12]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dfc:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <__NVIC_GetPriorityGrouping+0x18>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	f003 0307 	and.w	r3, r3, #7
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	db0b      	blt.n	8003e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	4907      	ldr	r1, [pc, #28]	@ (8003e4c <__NVIC_EnableIRQ+0x38>)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2001      	movs	r0, #1
 8003e36:	fa00 f202 	lsl.w	r2, r0, r2
 8003e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	e000e100 	.word	0xe000e100

08003e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	6039      	str	r1, [r7, #0]
 8003e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	db0a      	blt.n	8003e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	490c      	ldr	r1, [pc, #48]	@ (8003e9c <__NVIC_SetPriority+0x4c>)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	0112      	lsls	r2, r2, #4
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	440b      	add	r3, r1
 8003e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e78:	e00a      	b.n	8003e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4908      	ldr	r1, [pc, #32]	@ (8003ea0 <__NVIC_SetPriority+0x50>)
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	3b04      	subs	r3, #4
 8003e88:	0112      	lsls	r2, r2, #4
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	761a      	strb	r2, [r3, #24]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000e100 	.word	0xe000e100
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b089      	sub	sp, #36	@ 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f1c3 0307 	rsb	r3, r3, #7
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	bf28      	it	cs
 8003ec2:	2304      	movcs	r3, #4
 8003ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	2b06      	cmp	r3, #6
 8003ecc:	d902      	bls.n	8003ed4 <NVIC_EncodePriority+0x30>
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3b03      	subs	r3, #3
 8003ed2:	e000      	b.n	8003ed6 <NVIC_EncodePriority+0x32>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eec:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	43d9      	mvns	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003efc:	4313      	orrs	r3, r2
         );
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3724      	adds	r7, #36	@ 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f1c:	d301      	bcc.n	8003f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e00f      	b.n	8003f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f22:	4a0a      	ldr	r2, [pc, #40]	@ (8003f4c <SysTick_Config+0x40>)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f2a:	210f      	movs	r1, #15
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	f7ff ff8e 	bl	8003e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <SysTick_Config+0x40>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f3a:	4b04      	ldr	r3, [pc, #16]	@ (8003f4c <SysTick_Config+0x40>)
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	e000e010 	.word	0xe000e010

08003f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff29 	bl	8003db0 <__NVIC_SetPriorityGrouping>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f78:	f7ff ff3e 	bl	8003df8 <__NVIC_GetPriorityGrouping>
 8003f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	6978      	ldr	r0, [r7, #20]
 8003f84:	f7ff ff8e 	bl	8003ea4 <NVIC_EncodePriority>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff5d 	bl	8003e50 <__NVIC_SetPriority>
}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff ff31 	bl	8003e14 <__NVIC_EnableIRQ>
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ffa2 	bl	8003f0c <SysTick_Config>
 8003fc8:	4603      	mov	r3, r0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003fe0:	f7ff fac4 	bl	800356c <HAL_GetTick>
 8003fe4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d008      	beq.n	8004004 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2280      	movs	r2, #128	@ 0x80
 8003ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e052      	b.n	80040aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0216 	bic.w	r2, r2, #22
 8004012:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004022:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <HAL_DMA_Abort+0x62>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0208 	bic.w	r2, r2, #8
 8004042:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004054:	e013      	b.n	800407e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004056:	f7ff fa89 	bl	800356c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b05      	cmp	r3, #5
 8004062:	d90c      	bls.n	800407e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2203      	movs	r2, #3
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e015      	b.n	80040aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e4      	bne.n	8004056 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004090:	223f      	movs	r2, #63	@ 0x3f
 8004092:	409a      	lsls	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d004      	beq.n	80040d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2280      	movs	r2, #128	@ 0x80
 80040ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e00c      	b.n	80040ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2205      	movs	r2, #5
 80040d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	@ 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e159      	b.n	80043c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004114:	2201      	movs	r2, #1
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	429a      	cmp	r2, r3
 800412e:	f040 8148 	bne.w	80043c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d005      	beq.n	800414a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004146:	2b02      	cmp	r3, #2
 8004148:	d130      	bne.n	80041ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	2203      	movs	r2, #3
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004180:	2201      	movs	r2, #1
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 0201 	and.w	r2, r3, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d017      	beq.n	80041e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d123      	bne.n	800423c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	08da      	lsrs	r2, r3, #3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3208      	adds	r2, #8
 80041fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	220f      	movs	r2, #15
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	08da      	lsrs	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3208      	adds	r2, #8
 8004236:	69b9      	ldr	r1, [r7, #24]
 8004238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	2203      	movs	r2, #3
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0203 	and.w	r2, r3, #3
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80a2 	beq.w	80043c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	4b57      	ldr	r3, [pc, #348]	@ (80043e0 <HAL_GPIO_Init+0x2e8>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	4a56      	ldr	r2, [pc, #344]	@ (80043e0 <HAL_GPIO_Init+0x2e8>)
 8004288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800428c:	6453      	str	r3, [r2, #68]	@ 0x44
 800428e:	4b54      	ldr	r3, [pc, #336]	@ (80043e0 <HAL_GPIO_Init+0x2e8>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800429a:	4a52      	ldr	r2, [pc, #328]	@ (80043e4 <HAL_GPIO_Init+0x2ec>)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	089b      	lsrs	r3, r3, #2
 80042a0:	3302      	adds	r3, #2
 80042a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	220f      	movs	r2, #15
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a49      	ldr	r2, [pc, #292]	@ (80043e8 <HAL_GPIO_Init+0x2f0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d019      	beq.n	80042fa <HAL_GPIO_Init+0x202>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a48      	ldr	r2, [pc, #288]	@ (80043ec <HAL_GPIO_Init+0x2f4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <HAL_GPIO_Init+0x1fe>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a47      	ldr	r2, [pc, #284]	@ (80043f0 <HAL_GPIO_Init+0x2f8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00d      	beq.n	80042f2 <HAL_GPIO_Init+0x1fa>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a46      	ldr	r2, [pc, #280]	@ (80043f4 <HAL_GPIO_Init+0x2fc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d007      	beq.n	80042ee <HAL_GPIO_Init+0x1f6>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a45      	ldr	r2, [pc, #276]	@ (80043f8 <HAL_GPIO_Init+0x300>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d101      	bne.n	80042ea <HAL_GPIO_Init+0x1f2>
 80042e6:	2304      	movs	r3, #4
 80042e8:	e008      	b.n	80042fc <HAL_GPIO_Init+0x204>
 80042ea:	2307      	movs	r3, #7
 80042ec:	e006      	b.n	80042fc <HAL_GPIO_Init+0x204>
 80042ee:	2303      	movs	r3, #3
 80042f0:	e004      	b.n	80042fc <HAL_GPIO_Init+0x204>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e002      	b.n	80042fc <HAL_GPIO_Init+0x204>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_GPIO_Init+0x204>
 80042fa:	2300      	movs	r3, #0
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	f002 0203 	and.w	r2, r2, #3
 8004302:	0092      	lsls	r2, r2, #2
 8004304:	4093      	lsls	r3, r2
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800430c:	4935      	ldr	r1, [pc, #212]	@ (80043e4 <HAL_GPIO_Init+0x2ec>)
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	3302      	adds	r3, #2
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800431a:	4b38      	ldr	r3, [pc, #224]	@ (80043fc <HAL_GPIO_Init+0x304>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800433e:	4a2f      	ldr	r2, [pc, #188]	@ (80043fc <HAL_GPIO_Init+0x304>)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004344:	4b2d      	ldr	r3, [pc, #180]	@ (80043fc <HAL_GPIO_Init+0x304>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004368:	4a24      	ldr	r2, [pc, #144]	@ (80043fc <HAL_GPIO_Init+0x304>)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800436e:	4b23      	ldr	r3, [pc, #140]	@ (80043fc <HAL_GPIO_Init+0x304>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004392:	4a1a      	ldr	r2, [pc, #104]	@ (80043fc <HAL_GPIO_Init+0x304>)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004398:	4b18      	ldr	r3, [pc, #96]	@ (80043fc <HAL_GPIO_Init+0x304>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043bc:	4a0f      	ldr	r2, [pc, #60]	@ (80043fc <HAL_GPIO_Init+0x304>)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3301      	adds	r3, #1
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b0f      	cmp	r3, #15
 80043cc:	f67f aea2 	bls.w	8004114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	3724      	adds	r7, #36	@ 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40013800 	.word	0x40013800
 80043e8:	40020000 	.word	0x40020000
 80043ec:	40020400 	.word	0x40020400
 80043f0:	40020800 	.word	0x40020800
 80043f4:	40020c00 	.word	0x40020c00
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40013c00 	.word	0x40013c00

08004400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
 800440c:	4613      	mov	r3, r2
 800440e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004410:	787b      	ldrb	r3, [r7, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800441c:	e003      	b.n	8004426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441e:	887b      	ldrh	r3, [r7, #2]
 8004420:	041a      	lsls	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	619a      	str	r2, [r3, #24]
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004444:	887a      	ldrh	r2, [r7, #2]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4013      	ands	r3, r2
 800444a:	041a      	lsls	r2, r3, #16
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	43d9      	mvns	r1, r3
 8004450:	887b      	ldrh	r3, [r7, #2]
 8004452:	400b      	ands	r3, r1
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	619a      	str	r2, [r3, #24]
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004472:	4b08      	ldr	r3, [pc, #32]	@ (8004494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d006      	beq.n	800448c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800447e:	4a05      	ldr	r2, [pc, #20]	@ (8004494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fd fc5a 	bl	8001d40 <HAL_GPIO_EXTI_Callback>
  }
}
 800448c:	bf00      	nop
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40013c00 	.word	0x40013c00

08004498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e267      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d075      	beq.n	80045a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044b6:	4b88      	ldr	r3, [pc, #544]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d00c      	beq.n	80044dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c2:	4b85      	ldr	r3, [pc, #532]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d112      	bne.n	80044f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ce:	4b82      	ldr	r3, [pc, #520]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044da:	d10b      	bne.n	80044f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044dc:	4b7e      	ldr	r3, [pc, #504]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d05b      	beq.n	80045a0 <HAL_RCC_OscConfig+0x108>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d157      	bne.n	80045a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e242      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044fc:	d106      	bne.n	800450c <HAL_RCC_OscConfig+0x74>
 80044fe:	4b76      	ldr	r3, [pc, #472]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a75      	ldr	r2, [pc, #468]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e01d      	b.n	8004548 <HAL_RCC_OscConfig+0xb0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0x98>
 8004516:	4b70      	ldr	r3, [pc, #448]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6f      	ldr	r2, [pc, #444]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 800451c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	4b6d      	ldr	r3, [pc, #436]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6c      	ldr	r2, [pc, #432]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e00b      	b.n	8004548 <HAL_RCC_OscConfig+0xb0>
 8004530:	4b69      	ldr	r3, [pc, #420]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a68      	ldr	r2, [pc, #416]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4b66      	ldr	r3, [pc, #408]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a65      	ldr	r2, [pc, #404]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7ff f80c 	bl	800356c <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7ff f808 	bl	800356c <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	@ 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e207      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	4b5b      	ldr	r3, [pc, #364]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0xc0>
 8004576:	e014      	b.n	80045a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fe fff8 	bl	800356c <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004580:	f7fe fff4 	bl	800356c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	@ 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e1f3      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	4b51      	ldr	r3, [pc, #324]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0xe8>
 800459e:	e000      	b.n	80045a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d063      	beq.n	8004676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ae:	4b4a      	ldr	r3, [pc, #296]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ba:	4b47      	ldr	r3, [pc, #284]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d11c      	bne.n	8004600 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c6:	4b44      	ldr	r3, [pc, #272]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d116      	bne.n	8004600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	4b41      	ldr	r3, [pc, #260]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_RCC_OscConfig+0x152>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e1c7      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ea:	4b3b      	ldr	r3, [pc, #236]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4937      	ldr	r1, [pc, #220]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	e03a      	b.n	8004676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004608:	4b34      	ldr	r3, [pc, #208]	@ (80046dc <HAL_RCC_OscConfig+0x244>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fe ffad 	bl	800356c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004616:	f7fe ffa9 	bl	800356c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e1a8      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004628:	4b2b      	ldr	r3, [pc, #172]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b28      	ldr	r3, [pc, #160]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4925      	ldr	r1, [pc, #148]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
 8004648:	e015      	b.n	8004676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464a:	4b24      	ldr	r3, [pc, #144]	@ (80046dc <HAL_RCC_OscConfig+0x244>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fe ff8c 	bl	800356c <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004658:	f7fe ff88 	bl	800356c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e187      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466a:	4b1b      	ldr	r3, [pc, #108]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d036      	beq.n	80046f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468a:	4b15      	ldr	r3, [pc, #84]	@ (80046e0 <HAL_RCC_OscConfig+0x248>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fe ff6c 	bl	800356c <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004698:	f7fe ff68 	bl	800356c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e167      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046aa:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <HAL_RCC_OscConfig+0x240>)
 80046ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0x200>
 80046b6:	e01b      	b.n	80046f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b8:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <HAL_RCC_OscConfig+0x248>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046be:	f7fe ff55 	bl	800356c <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c4:	e00e      	b.n	80046e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c6:	f7fe ff51 	bl	800356c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d907      	bls.n	80046e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e150      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
 80046d8:	40023800 	.word	0x40023800
 80046dc:	42470000 	.word	0x42470000
 80046e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b88      	ldr	r3, [pc, #544]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 80046e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ea      	bne.n	80046c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8097 	beq.w	800482c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004702:	4b81      	ldr	r3, [pc, #516]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	4b7d      	ldr	r3, [pc, #500]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	4a7c      	ldr	r2, [pc, #496]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471c:	6413      	str	r3, [r2, #64]	@ 0x40
 800471e:	4b7a      	ldr	r3, [pc, #488]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	4b77      	ldr	r3, [pc, #476]	@ (800490c <HAL_RCC_OscConfig+0x474>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d118      	bne.n	800476c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473a:	4b74      	ldr	r3, [pc, #464]	@ (800490c <HAL_RCC_OscConfig+0x474>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a73      	ldr	r2, [pc, #460]	@ (800490c <HAL_RCC_OscConfig+0x474>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004746:	f7fe ff11 	bl	800356c <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474e:	f7fe ff0d 	bl	800356c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e10c      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004760:	4b6a      	ldr	r3, [pc, #424]	@ (800490c <HAL_RCC_OscConfig+0x474>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d106      	bne.n	8004782 <HAL_RCC_OscConfig+0x2ea>
 8004774:	4b64      	ldr	r3, [pc, #400]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004778:	4a63      	ldr	r2, [pc, #396]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004780:	e01c      	b.n	80047bc <HAL_RCC_OscConfig+0x324>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b05      	cmp	r3, #5
 8004788:	d10c      	bne.n	80047a4 <HAL_RCC_OscConfig+0x30c>
 800478a:	4b5f      	ldr	r3, [pc, #380]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478e:	4a5e      	ldr	r2, [pc, #376]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004790:	f043 0304 	orr.w	r3, r3, #4
 8004794:	6713      	str	r3, [r2, #112]	@ 0x70
 8004796:	4b5c      	ldr	r3, [pc, #368]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479a:	4a5b      	ldr	r2, [pc, #364]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a2:	e00b      	b.n	80047bc <HAL_RCC_OscConfig+0x324>
 80047a4:	4b58      	ldr	r3, [pc, #352]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a8:	4a57      	ldr	r2, [pc, #348]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b0:	4b55      	ldr	r3, [pc, #340]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b4:	4a54      	ldr	r2, [pc, #336]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 80047b6:	f023 0304 	bic.w	r3, r3, #4
 80047ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d015      	beq.n	80047f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fe fed2 	bl	800356c <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fe fece 	bl	800356c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0cb      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e2:	4b49      	ldr	r3, [pc, #292]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0ee      	beq.n	80047cc <HAL_RCC_OscConfig+0x334>
 80047ee:	e014      	b.n	800481a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f0:	f7fe febc 	bl	800356c <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f8:	f7fe feb8 	bl	800356c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e0b5      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480e:	4b3e      	ldr	r3, [pc, #248]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1ee      	bne.n	80047f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800481a:	7dfb      	ldrb	r3, [r7, #23]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d105      	bne.n	800482c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004820:	4b39      	ldr	r3, [pc, #228]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004824:	4a38      	ldr	r2, [pc, #224]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800482a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80a1 	beq.w	8004978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004836:	4b34      	ldr	r3, [pc, #208]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b08      	cmp	r3, #8
 8004840:	d05c      	beq.n	80048fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d141      	bne.n	80048ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484a:	4b31      	ldr	r3, [pc, #196]	@ (8004910 <HAL_RCC_OscConfig+0x478>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004850:	f7fe fe8c 	bl	800356c <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004858:	f7fe fe88 	bl	800356c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e087      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486a:	4b27      	ldr	r3, [pc, #156]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	019b      	lsls	r3, r3, #6
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	3b01      	subs	r3, #1
 8004890:	041b      	lsls	r3, r3, #16
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	491b      	ldr	r1, [pc, #108]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 800489c:	4313      	orrs	r3, r2
 800489e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004910 <HAL_RCC_OscConfig+0x478>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a6:	f7fe fe61 	bl	800356c <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ae:	f7fe fe5d 	bl	800356c <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e05c      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c0:	4b11      	ldr	r3, [pc, #68]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x416>
 80048cc:	e054      	b.n	8004978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ce:	4b10      	ldr	r3, [pc, #64]	@ (8004910 <HAL_RCC_OscConfig+0x478>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fe fe4a 	bl	800356c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fe fe46 	bl	800356c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e045      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ee:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <HAL_RCC_OscConfig+0x470>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x444>
 80048fa:	e03d      	b.n	8004978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d107      	bne.n	8004914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e038      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
 8004908:	40023800 	.word	0x40023800
 800490c:	40007000 	.word	0x40007000
 8004910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004914:	4b1b      	ldr	r3, [pc, #108]	@ (8004984 <HAL_RCC_OscConfig+0x4ec>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d028      	beq.n	8004974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d121      	bne.n	8004974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d11a      	bne.n	8004974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800494a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800494c:	4293      	cmp	r3, r2
 800494e:	d111      	bne.n	8004974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	3b01      	subs	r3, #1
 800495e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d107      	bne.n	8004974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800

08004988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0cc      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	4b68      	ldr	r3, [pc, #416]	@ (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d90c      	bls.n	80049c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b65      	ldr	r3, [pc, #404]	@ (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b63      	ldr	r3, [pc, #396]	@ (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0b8      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049dc:	4b59      	ldr	r3, [pc, #356]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a58      	ldr	r2, [pc, #352]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f4:	4b53      	ldr	r3, [pc, #332]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a52      	ldr	r2, [pc, #328]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a00:	4b50      	ldr	r3, [pc, #320]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	494d      	ldr	r1, [pc, #308]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d044      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	4b47      	ldr	r3, [pc, #284]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d119      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e07f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a46:	4b3f      	ldr	r3, [pc, #252]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e06f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a56:	4b3b      	ldr	r3, [pc, #236]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e067      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a66:	4b37      	ldr	r3, [pc, #220]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4934      	ldr	r1, [pc, #208]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a78:	f7fe fd78 	bl	800356c <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7fe fd74 	bl	800356c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e04f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	4b2b      	ldr	r3, [pc, #172]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 020c 	and.w	r2, r3, #12
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d1eb      	bne.n	8004a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b25      	ldr	r3, [pc, #148]	@ (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d20c      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b22      	ldr	r3, [pc, #136]	@ (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b20      	ldr	r3, [pc, #128]	@ (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e032      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004adc:	4b19      	ldr	r3, [pc, #100]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4916      	ldr	r1, [pc, #88]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004afa:	4b12      	ldr	r3, [pc, #72]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	490e      	ldr	r1, [pc, #56]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b0e:	f000 f821 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	490a      	ldr	r1, [pc, #40]	@ (8004b48 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	5ccb      	ldrb	r3, [r1, r3]
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	4a09      	ldr	r2, [pc, #36]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b2a:	4b09      	ldr	r3, [pc, #36]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fcd8 	bl	80034e4 <HAL_InitTick>

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40023c00 	.word	0x40023c00
 8004b44:	40023800 	.word	0x40023800
 8004b48:	0800bf54 	.word	0x0800bf54
 8004b4c:	20000034 	.word	0x20000034
 8004b50:	20000038 	.word	0x20000038

08004b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b58:	b090      	sub	sp, #64	@ 0x40
 8004b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b6c:	4b59      	ldr	r3, [pc, #356]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d00d      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x40>
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	f200 80a1 	bhi.w	8004cc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x34>
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b86:	e09b      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b88:	4b53      	ldr	r3, [pc, #332]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b8c:	e09b      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b8e:	4b53      	ldr	r3, [pc, #332]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8004b90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b92:	e098      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b94:	4b4f      	ldr	r3, [pc, #316]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d028      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004baa:	4b4a      	ldr	r3, [pc, #296]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	623b      	str	r3, [r7, #32]
 8004bb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4b47      	ldr	r3, [pc, #284]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8004bc0:	fb03 f201 	mul.w	r2, r3, r1
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	fb00 f303 	mul.w	r3, r0, r3
 8004bca:	4413      	add	r3, r2
 8004bcc:	4a43      	ldr	r2, [pc, #268]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8004bce:	fba0 1202 	umull	r1, r2, r0, r2
 8004bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bd4:	460a      	mov	r2, r1
 8004bd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bda:	4413      	add	r3, r2
 8004bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be0:	2200      	movs	r2, #0
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	61fa      	str	r2, [r7, #28]
 8004be6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004bee:	f7fb ffe3 	bl	8000bb8 <__aeabi_uldivmod>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bfa:	e053      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bfc:	4b35      	ldr	r3, [pc, #212]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	099b      	lsrs	r3, r3, #6
 8004c02:	2200      	movs	r2, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	617a      	str	r2, [r7, #20]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c0e:	f04f 0b00 	mov.w	fp, #0
 8004c12:	4652      	mov	r2, sl
 8004c14:	465b      	mov	r3, fp
 8004c16:	f04f 0000 	mov.w	r0, #0
 8004c1a:	f04f 0100 	mov.w	r1, #0
 8004c1e:	0159      	lsls	r1, r3, #5
 8004c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c24:	0150      	lsls	r0, r2, #5
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	ebb2 080a 	subs.w	r8, r2, sl
 8004c2e:	eb63 090b 	sbc.w	r9, r3, fp
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c46:	ebb2 0408 	subs.w	r4, r2, r8
 8004c4a:	eb63 0509 	sbc.w	r5, r3, r9
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	00eb      	lsls	r3, r5, #3
 8004c58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c5c:	00e2      	lsls	r2, r4, #3
 8004c5e:	4614      	mov	r4, r2
 8004c60:	461d      	mov	r5, r3
 8004c62:	eb14 030a 	adds.w	r3, r4, sl
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	eb45 030b 	adc.w	r3, r5, fp
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	028b      	lsls	r3, r1, #10
 8004c7e:	4621      	mov	r1, r4
 8004c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c84:	4621      	mov	r1, r4
 8004c86:	028a      	lsls	r2, r1, #10
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8e:	2200      	movs	r2, #0
 8004c90:	60bb      	str	r3, [r7, #8]
 8004c92:	60fa      	str	r2, [r7, #12]
 8004c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c98:	f7fb ff8e 	bl	8000bb8 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004cb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3740      	adds	r7, #64	@ 0x40
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	00f42400 	.word	0x00f42400
 8004cdc:	017d7840 	.word	0x017d7840

08004ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	@ (8004cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000034 	.word	0x20000034

08004cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cfc:	f7ff fff0 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004d00:	4602      	mov	r2, r0
 8004d02:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	0a9b      	lsrs	r3, r3, #10
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	4903      	ldr	r1, [pc, #12]	@ (8004d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0e:	5ccb      	ldrb	r3, [r1, r3]
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	0800bf64 	.word	0x0800bf64

08004d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d24:	f7ff ffdc 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	0b5b      	lsrs	r3, r3, #13
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	4903      	ldr	r1, [pc, #12]	@ (8004d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d36:	5ccb      	ldrb	r3, [r1, r3]
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40023800 	.word	0x40023800
 8004d44:	0800bf64 	.word	0x0800bf64

08004d48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e07b      	b.n	8004e52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d108      	bne.n	8004d74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d6a:	d009      	beq.n	8004d80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	61da      	str	r2, [r3, #28]
 8004d72:	e005      	b.n	8004d80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fd fff6 	bl	8002d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004db6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e04:	ea42 0103 	orr.w	r1, r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	f003 0104 	and.w	r1, r3, #4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	f003 0210 	and.w	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b088      	sub	sp, #32
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e6a:	f7fe fb7f 	bl	800356c <HAL_GetTick>
 8004e6e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d001      	beq.n	8004e84 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
 8004e82:	e12a      	b.n	80050da <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_SPI_Transmit+0x36>
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e122      	b.n	80050da <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_SPI_Transmit+0x48>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e11b      	b.n	80050da <HAL_SPI_Transmit+0x280>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2203      	movs	r2, #3
 8004eae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ef0:	d10f      	bne.n	8004f12 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1c:	2b40      	cmp	r3, #64	@ 0x40
 8004f1e:	d007      	beq.n	8004f30 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f38:	d152      	bne.n	8004fe0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_Transmit+0xee>
 8004f42:	8b7b      	ldrh	r3, [r7, #26]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d145      	bne.n	8004fd4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4c:	881a      	ldrh	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f58:	1c9a      	adds	r2, r3, #2
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f6c:	e032      	b.n	8004fd4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d112      	bne.n	8004fa2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	881a      	ldrh	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8c:	1c9a      	adds	r2, r3, #2
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fa0:	e018      	b.n	8004fd4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fa2:	f7fe fae3 	bl	800356c <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d803      	bhi.n	8004fba <HAL_SPI_Transmit+0x160>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d102      	bne.n	8004fc0 <HAL_SPI_Transmit+0x166>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e082      	b.n	80050da <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1c7      	bne.n	8004f6e <HAL_SPI_Transmit+0x114>
 8004fde:	e053      	b.n	8005088 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_SPI_Transmit+0x194>
 8004fe8:	8b7b      	ldrh	r3, [r7, #26]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d147      	bne.n	800507e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	7812      	ldrb	r2, [r2, #0]
 8004ffa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005014:	e033      	b.n	800507e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d113      	bne.n	800504c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	86da      	strh	r2, [r3, #54]	@ 0x36
 800504a:	e018      	b.n	800507e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800504c:	f7fe fa8e 	bl	800356c <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d803      	bhi.n	8005064 <HAL_SPI_Transmit+0x20a>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d102      	bne.n	800506a <HAL_SPI_Transmit+0x210>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e02d      	b.n	80050da <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1c6      	bne.n	8005016 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fbd9 	bl	8005844 <SPI_EndRxTxTransaction>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b088      	sub	sp, #32
 80050e6:	af02      	add	r7, sp, #8
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d001      	beq.n	8005102 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
 8005100:	e104      	b.n	800530c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <HAL_SPI_Receive+0x2c>
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0fc      	b.n	800530c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511a:	d112      	bne.n	8005142 <HAL_SPI_Receive+0x60>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10e      	bne.n	8005142 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2204      	movs	r2, #4
 8005128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	4613      	mov	r3, r2
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f8eb 	bl	8005314 <HAL_SPI_TransmitReceive>
 800513e:	4603      	mov	r3, r0
 8005140:	e0e4      	b.n	800530c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005142:	f7fe fa13 	bl	800356c <HAL_GetTick>
 8005146:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_SPI_Receive+0x74>
 8005152:	2302      	movs	r3, #2
 8005154:	e0da      	b.n	800530c <HAL_SPI_Receive+0x22a>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2204      	movs	r2, #4
 8005162:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a4:	d10f      	bne.n	80051c6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d007      	beq.n	80051e4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d170      	bne.n	80052ce <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051ec:	e035      	b.n	800525a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d115      	bne.n	8005228 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f103 020c 	add.w	r2, r3, #12
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005208:	7812      	ldrb	r2, [r2, #0]
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005226:	e018      	b.n	800525a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005228:	f7fe f9a0 	bl	800356c <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d803      	bhi.n	8005240 <HAL_SPI_Receive+0x15e>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d102      	bne.n	8005246 <HAL_SPI_Receive+0x164>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e058      	b.n	800530c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1c4      	bne.n	80051ee <HAL_SPI_Receive+0x10c>
 8005264:	e038      	b.n	80052d8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b01      	cmp	r3, #1
 8005272:	d113      	bne.n	800529c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527e:	b292      	uxth	r2, r2
 8005280:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005286:	1c9a      	adds	r2, r3, #2
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800529a:	e018      	b.n	80052ce <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800529c:	f7fe f966 	bl	800356c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d803      	bhi.n	80052b4 <HAL_SPI_Receive+0x1d2>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d102      	bne.n	80052ba <HAL_SPI_Receive+0x1d8>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e01e      	b.n	800530c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1c6      	bne.n	8005266 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fa4b 	bl	8005778 <SPI_EndRxTransaction>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800530a:	2300      	movs	r3, #0
  }
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	@ 0x28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005322:	2301      	movs	r3, #1
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005326:	f7fe f921 	bl	800356c <HAL_GetTick>
 800532a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005332:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800533e:	7ffb      	ldrb	r3, [r7, #31]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d00c      	beq.n	800535e <HAL_SPI_TransmitReceive+0x4a>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800534a:	d106      	bne.n	800535a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <HAL_SPI_TransmitReceive+0x46>
 8005354:	7ffb      	ldrb	r3, [r7, #31]
 8005356:	2b04      	cmp	r3, #4
 8005358:	d001      	beq.n	800535e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800535a:	2302      	movs	r3, #2
 800535c:	e17f      	b.n	800565e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_SPI_TransmitReceive+0x5c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_SPI_TransmitReceive+0x5c>
 800536a:	887b      	ldrh	r3, [r7, #2]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e174      	b.n	800565e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_SPI_TransmitReceive+0x6e>
 800537e:	2302      	movs	r3, #2
 8005380:	e16d      	b.n	800565e <HAL_SPI_TransmitReceive+0x34a>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b04      	cmp	r3, #4
 8005394:	d003      	beq.n	800539e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2205      	movs	r2, #5
 800539a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	887a      	ldrh	r2, [r7, #2]
 80053ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	887a      	ldrh	r2, [r7, #2]
 80053b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	887a      	ldrh	r2, [r7, #2]
 80053c0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	887a      	ldrh	r2, [r7, #2]
 80053c6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053de:	2b40      	cmp	r3, #64	@ 0x40
 80053e0:	d007      	beq.n	80053f2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053fa:	d17e      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_SPI_TransmitReceive+0xf6>
 8005404:	8afb      	ldrh	r3, [r7, #22]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d16c      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	881a      	ldrh	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541a:	1c9a      	adds	r2, r3, #2
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800542e:	e059      	b.n	80054e4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b02      	cmp	r3, #2
 800543c:	d11b      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x162>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d016      	beq.n	8005476 <HAL_SPI_TransmitReceive+0x162>
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	2b01      	cmp	r3, #1
 800544c:	d113      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005452:	881a      	ldrh	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545e:	1c9a      	adds	r2, r3, #2
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b01      	cmp	r3, #1
 8005482:	d119      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x1a4>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d014      	beq.n	80054b8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005498:	b292      	uxth	r2, r2
 800549a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054b4:	2301      	movs	r3, #1
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054b8:	f7fe f858 	bl	800356c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d80d      	bhi.n	80054e4 <HAL_SPI_TransmitReceive+0x1d0>
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ce:	d009      	beq.n	80054e4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e0bc      	b.n	800565e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1a0      	bne.n	8005430 <HAL_SPI_TransmitReceive+0x11c>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d19b      	bne.n	8005430 <HAL_SPI_TransmitReceive+0x11c>
 80054f8:	e082      	b.n	8005600 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_SPI_TransmitReceive+0x1f4>
 8005502:	8afb      	ldrh	r3, [r7, #22]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d171      	bne.n	80055ec <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	7812      	ldrb	r2, [r2, #0]
 8005514:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800552e:	e05d      	b.n	80055ec <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b02      	cmp	r3, #2
 800553c:	d11c      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x264>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d017      	beq.n	8005578 <HAL_SPI_TransmitReceive+0x264>
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	2b01      	cmp	r3, #1
 800554c:	d114      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b01      	cmp	r3, #1
 8005584:	d119      	bne.n	80055ba <HAL_SPI_TransmitReceive+0x2a6>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d014      	beq.n	80055ba <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055b6:	2301      	movs	r3, #1
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055ba:	f7fd ffd7 	bl	800356c <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d803      	bhi.n	80055d2 <HAL_SPI_TransmitReceive+0x2be>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d102      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x2c4>
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e038      	b.n	800565e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d19c      	bne.n	8005530 <HAL_SPI_TransmitReceive+0x21c>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d197      	bne.n	8005530 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f91d 	bl	8005844 <SPI_EndRxTxTransaction>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e01d      	b.n	800565e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800565c:	2300      	movs	r3, #0
  }
}
 800565e:	4618      	mov	r0, r3
 8005660:	3728      	adds	r7, #40	@ 0x28
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005678:	f7fd ff78 	bl	800356c <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	4413      	add	r3, r2
 8005686:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005688:	f7fd ff70 	bl	800356c <HAL_GetTick>
 800568c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800568e:	4b39      	ldr	r3, [pc, #228]	@ (8005774 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	015b      	lsls	r3, r3, #5
 8005694:	0d1b      	lsrs	r3, r3, #20
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	fb02 f303 	mul.w	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800569e:	e055      	b.n	800574c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d051      	beq.n	800574c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056a8:	f7fd ff60 	bl	800356c <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d902      	bls.n	80056be <SPI_WaitFlagStateUntilTimeout+0x56>
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d13d      	bne.n	800573a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056d6:	d111      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e0:	d004      	beq.n	80056ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ea:	d107      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005704:	d10f      	bne.n	8005726 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005724:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e018      	b.n	800576c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
 8005744:	e002      	b.n	800574c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	3b01      	subs	r3, #1
 800574a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	429a      	cmp	r2, r3
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	429a      	cmp	r2, r3
 8005768:	d19a      	bne.n	80056a0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20000034 	.word	0x20000034

08005778 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800578c:	d111      	bne.n	80057b2 <SPI_EndRxTransaction+0x3a>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005796:	d004      	beq.n	80057a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a0:	d107      	bne.n	80057b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ba:	d12a      	bne.n	8005812 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c4:	d012      	beq.n	80057ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2200      	movs	r2, #0
 80057ce:	2180      	movs	r1, #128	@ 0x80
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7ff ff49 	bl	8005668 <SPI_WaitFlagStateUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d02d      	beq.n	8005838 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e0:	f043 0220 	orr.w	r2, r3, #32
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e026      	b.n	800583a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	2101      	movs	r1, #1
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff ff36 	bl	8005668 <SPI_WaitFlagStateUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01a      	beq.n	8005838 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e013      	b.n	800583a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2200      	movs	r2, #0
 800581a:	2101      	movs	r1, #1
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7ff ff23 	bl	8005668 <SPI_WaitFlagStateUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e000      	b.n	800583a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2201      	movs	r2, #1
 8005858:	2102      	movs	r1, #2
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7ff ff04 	bl	8005668 <SPI_WaitFlagStateUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586a:	f043 0220 	orr.w	r2, r3, #32
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e032      	b.n	80058dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005876:	4b1b      	ldr	r3, [pc, #108]	@ (80058e4 <SPI_EndRxTxTransaction+0xa0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1b      	ldr	r2, [pc, #108]	@ (80058e8 <SPI_EndRxTxTransaction+0xa4>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	0d5b      	lsrs	r3, r3, #21
 8005882:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005894:	d112      	bne.n	80058bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2200      	movs	r2, #0
 800589e:	2180      	movs	r1, #128	@ 0x80
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7ff fee1 	bl	8005668 <SPI_WaitFlagStateUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d016      	beq.n	80058da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b0:	f043 0220 	orr.w	r2, r3, #32
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e00f      	b.n	80058dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d2:	2b80      	cmp	r3, #128	@ 0x80
 80058d4:	d0f2      	beq.n	80058bc <SPI_EndRxTxTransaction+0x78>
 80058d6:	e000      	b.n	80058da <SPI_EndRxTxTransaction+0x96>
        break;
 80058d8:	bf00      	nop
  }

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000034 	.word	0x20000034
 80058e8:	165e9f81 	.word	0x165e9f81

080058ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e041      	b.n	8005982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fd fa82 	bl	8002e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f000 fd7a 	bl	8006424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e041      	b.n	8005a20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f839 	bl	8005a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4619      	mov	r1, r3
 80059c8:	4610      	mov	r0, r2
 80059ca:	f000 fd2b 	bl	8006424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <HAL_TIM_PWM_Start+0x24>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e022      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d109      	bne.n	8005a7a <HAL_TIM_PWM_Start+0x3e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	e015      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d109      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x58>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e008      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e068      	b.n	8005b80 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_PWM_Start+0x82>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005abc:	e013      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_PWM_Start+0x92>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005acc:	e00b      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d104      	bne.n	8005ade <HAL_TIM_PWM_Start+0xa2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005adc:	e003      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2201      	movs	r2, #1
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 ff44 	bl	800697c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a23      	ldr	r2, [pc, #140]	@ (8005b88 <HAL_TIM_PWM_Start+0x14c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d107      	bne.n	8005b0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	@ (8005b88 <HAL_TIM_PWM_Start+0x14c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d018      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x10e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b20:	d013      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x10e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a19      	ldr	r2, [pc, #100]	@ (8005b8c <HAL_TIM_PWM_Start+0x150>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00e      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x10e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <HAL_TIM_PWM_Start+0x154>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x10e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a16      	ldr	r2, [pc, #88]	@ (8005b94 <HAL_TIM_PWM_Start+0x158>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x10e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a14      	ldr	r2, [pc, #80]	@ (8005b98 <HAL_TIM_PWM_Start+0x15c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d111      	bne.n	8005b6e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b06      	cmp	r3, #6
 8005b5a:	d010      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6c:	e007      	b.n	8005b7e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0201 	orr.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40000400 	.word	0x40000400
 8005b90:	40000800 	.word	0x40000800
 8005b94:	40000c00 	.word	0x40000c00
 8005b98:	40014000 	.word	0x40014000

08005b9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2200      	movs	r2, #0
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fee4 	bl	800697c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a29      	ldr	r2, [pc, #164]	@ (8005c60 <HAL_TIM_PWM_Stop+0xc4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d117      	bne.n	8005bee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10f      	bne.n	8005bee <HAL_TIM_PWM_Stop+0x52>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
 8005bd4:	f240 4344 	movw	r3, #1092	@ 0x444
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d107      	bne.n	8005bee <HAL_TIM_PWM_Stop+0x52>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10f      	bne.n	8005c1e <HAL_TIM_PWM_Stop+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a1a      	ldr	r2, [r3, #32]
 8005c04:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d107      	bne.n	8005c1e <HAL_TIM_PWM_Stop+0x82>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0201 	bic.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d104      	bne.n	8005c2e <HAL_TIM_PWM_Stop+0x92>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c2c:	e013      	b.n	8005c56 <HAL_TIM_PWM_Stop+0xba>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d104      	bne.n	8005c3e <HAL_TIM_PWM_Stop+0xa2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c3c:	e00b      	b.n	8005c56 <HAL_TIM_PWM_Stop+0xba>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d104      	bne.n	8005c4e <HAL_TIM_PWM_Stop+0xb2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c4c:	e003      	b.n	8005c56 <HAL_TIM_PWM_Stop+0xba>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40010000 	.word	0x40010000

08005c64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e097      	b.n	8005da8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fd f903 	bl	8002e98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ca8:	f023 0307 	bic.w	r3, r3, #7
 8005cac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f000 fbb3 	bl	8006424 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d04:	f023 030c 	bic.w	r3, r3, #12
 8005d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	4313      	orrs	r3, r2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	011a      	lsls	r2, r3, #4
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	031b      	lsls	r3, r3, #12
 8005d34:	4313      	orrs	r3, r2
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	4313      	orrs	r3, r2
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005dc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d110      	bne.n	8005e02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d102      	bne.n	8005dec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005de6:	7b7b      	ldrb	r3, [r7, #13]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d001      	beq.n	8005df0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e069      	b.n	8005ec4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e00:	e031      	b.n	8005e66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d110      	bne.n	8005e2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e08:	7bbb      	ldrb	r3, [r7, #14]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d102      	bne.n	8005e14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e0e:	7b3b      	ldrb	r3, [r7, #12]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d001      	beq.n	8005e18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e055      	b.n	8005ec4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e28:	e01d      	b.n	8005e66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d108      	bne.n	8005e42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d105      	bne.n	8005e42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e36:	7b7b      	ldrb	r3, [r7, #13]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d102      	bne.n	8005e42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e3c:	7b3b      	ldrb	r3, [r7, #12]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d001      	beq.n	8005e46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e03e      	b.n	8005ec4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2202      	movs	r2, #2
 8005e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_TIM_Encoder_Start+0xc4>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d008      	beq.n	8005e84 <HAL_TIM_Encoder_Start+0xd4>
 8005e72:	e00f      	b.n	8005e94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fd7d 	bl	800697c <TIM_CCxChannelCmd>
      break;
 8005e82:	e016      	b.n	8005eb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	2104      	movs	r1, #4
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fd75 	bl	800697c <TIM_CCxChannelCmd>
      break;
 8005e92:	e00e      	b.n	8005eb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fd6d 	bl	800697c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	2104      	movs	r1, #4
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fd66 	bl	800697c <TIM_CCxChannelCmd>
      break;
 8005eb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0201 	orr.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d020      	beq.n	8005f30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01b      	beq.n	8005f30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0202 	mvn.w	r2, #2
 8005f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fa65 	bl	80063e6 <HAL_TIM_IC_CaptureCallback>
 8005f1c:	e005      	b.n	8005f2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fa57 	bl	80063d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fa68 	bl	80063fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d020      	beq.n	8005f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01b      	beq.n	8005f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f06f 0204 	mvn.w	r2, #4
 8005f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2202      	movs	r2, #2
 8005f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa3f 	bl	80063e6 <HAL_TIM_IC_CaptureCallback>
 8005f68:	e005      	b.n	8005f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa31 	bl	80063d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fa42 	bl	80063fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d020      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01b      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0208 	mvn.w	r2, #8
 8005f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa19 	bl	80063e6 <HAL_TIM_IC_CaptureCallback>
 8005fb4:	e005      	b.n	8005fc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa0b 	bl	80063d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fa1c 	bl	80063fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0310 	and.w	r3, r3, #16
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d020      	beq.n	8006014 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01b      	beq.n	8006014 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0210 	mvn.w	r2, #16
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2208      	movs	r2, #8
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f9f3 	bl	80063e6 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f9e5 	bl	80063d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f9f6 	bl	80063fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0201 	mvn.w	r2, #1
 8006030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f9c3 	bl	80063be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00c      	beq.n	800605c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fd80 	bl	8006b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f9c7 	bl	800640e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00c      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0220 	mvn.w	r2, #32
 800609c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fd52 	bl	8006b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e0ae      	b.n	8006228 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	f200 809f 	bhi.w	8006218 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060da:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	08006115 	.word	0x08006115
 80060e4:	08006219 	.word	0x08006219
 80060e8:	08006219 	.word	0x08006219
 80060ec:	08006219 	.word	0x08006219
 80060f0:	08006155 	.word	0x08006155
 80060f4:	08006219 	.word	0x08006219
 80060f8:	08006219 	.word	0x08006219
 80060fc:	08006219 	.word	0x08006219
 8006100:	08006197 	.word	0x08006197
 8006104:	08006219 	.word	0x08006219
 8006108:	08006219 	.word	0x08006219
 800610c:	08006219 	.word	0x08006219
 8006110:	080061d7 	.word	0x080061d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fa08 	bl	8006530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0208 	orr.w	r2, r2, #8
 800612e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0204 	bic.w	r2, r2, #4
 800613e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6999      	ldr	r1, [r3, #24]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	619a      	str	r2, [r3, #24]
      break;
 8006152:	e064      	b.n	800621e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fa4e 	bl	80065fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800616e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800617e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6999      	ldr	r1, [r3, #24]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	021a      	lsls	r2, r3, #8
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	619a      	str	r2, [r3, #24]
      break;
 8006194:	e043      	b.n	800621e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fa99 	bl	80066d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0208 	orr.w	r2, r2, #8
 80061b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0204 	bic.w	r2, r2, #4
 80061c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69d9      	ldr	r1, [r3, #28]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	61da      	str	r2, [r3, #28]
      break;
 80061d4:	e023      	b.n	800621e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fae3 	bl	80067a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69d9      	ldr	r1, [r3, #28]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	021a      	lsls	r2, r3, #8
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	61da      	str	r2, [r3, #28]
      break;
 8006216:	e002      	b.n	800621e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	75fb      	strb	r3, [r7, #23]
      break;
 800621c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006226:	7dfb      	ldrb	r3, [r7, #23]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_TIM_ConfigClockSource+0x1c>
 8006248:	2302      	movs	r3, #2
 800624a:	e0b4      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x186>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800626a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006284:	d03e      	beq.n	8006304 <HAL_TIM_ConfigClockSource+0xd4>
 8006286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800628a:	f200 8087 	bhi.w	800639c <HAL_TIM_ConfigClockSource+0x16c>
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006292:	f000 8086 	beq.w	80063a2 <HAL_TIM_ConfigClockSource+0x172>
 8006296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629a:	d87f      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x16c>
 800629c:	2b70      	cmp	r3, #112	@ 0x70
 800629e:	d01a      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0xa6>
 80062a0:	2b70      	cmp	r3, #112	@ 0x70
 80062a2:	d87b      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x16c>
 80062a4:	2b60      	cmp	r3, #96	@ 0x60
 80062a6:	d050      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x11a>
 80062a8:	2b60      	cmp	r3, #96	@ 0x60
 80062aa:	d877      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x16c>
 80062ac:	2b50      	cmp	r3, #80	@ 0x50
 80062ae:	d03c      	beq.n	800632a <HAL_TIM_ConfigClockSource+0xfa>
 80062b0:	2b50      	cmp	r3, #80	@ 0x50
 80062b2:	d873      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x16c>
 80062b4:	2b40      	cmp	r3, #64	@ 0x40
 80062b6:	d058      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x13a>
 80062b8:	2b40      	cmp	r3, #64	@ 0x40
 80062ba:	d86f      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x16c>
 80062bc:	2b30      	cmp	r3, #48	@ 0x30
 80062be:	d064      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15a>
 80062c0:	2b30      	cmp	r3, #48	@ 0x30
 80062c2:	d86b      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x16c>
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d060      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15a>
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d867      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x16c>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d05c      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15a>
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d05a      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15a>
 80062d4:	e062      	b.n	800639c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062e6:	f000 fb29 	bl	800693c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	609a      	str	r2, [r3, #8]
      break;
 8006302:	e04f      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006314:	f000 fb12 	bl	800693c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006326:	609a      	str	r2, [r3, #8]
      break;
 8006328:	e03c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006336:	461a      	mov	r2, r3
 8006338:	f000 fa86 	bl	8006848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2150      	movs	r1, #80	@ 0x50
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fadf 	bl	8006906 <TIM_ITRx_SetConfig>
      break;
 8006348:	e02c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006356:	461a      	mov	r2, r3
 8006358:	f000 faa5 	bl	80068a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2160      	movs	r1, #96	@ 0x60
 8006362:	4618      	mov	r0, r3
 8006364:	f000 facf 	bl	8006906 <TIM_ITRx_SetConfig>
      break;
 8006368:	e01c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006376:	461a      	mov	r2, r3
 8006378:	f000 fa66 	bl	8006848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2140      	movs	r1, #64	@ 0x40
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fabf 	bl	8006906 <TIM_ITRx_SetConfig>
      break;
 8006388:	e00c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f000 fab6 	bl	8006906 <TIM_ITRx_SetConfig>
      break;
 800639a:	e003      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
      break;
 80063a0:	e000      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a37      	ldr	r2, [pc, #220]	@ (8006514 <TIM_Base_SetConfig+0xf0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00f      	beq.n	800645c <TIM_Base_SetConfig+0x38>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006442:	d00b      	beq.n	800645c <TIM_Base_SetConfig+0x38>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a34      	ldr	r2, [pc, #208]	@ (8006518 <TIM_Base_SetConfig+0xf4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d007      	beq.n	800645c <TIM_Base_SetConfig+0x38>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a33      	ldr	r2, [pc, #204]	@ (800651c <TIM_Base_SetConfig+0xf8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_Base_SetConfig+0x38>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a32      	ldr	r2, [pc, #200]	@ (8006520 <TIM_Base_SetConfig+0xfc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d108      	bne.n	800646e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a28      	ldr	r2, [pc, #160]	@ (8006514 <TIM_Base_SetConfig+0xf0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d01b      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800647c:	d017      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a25      	ldr	r2, [pc, #148]	@ (8006518 <TIM_Base_SetConfig+0xf4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a24      	ldr	r2, [pc, #144]	@ (800651c <TIM_Base_SetConfig+0xf8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00f      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a23      	ldr	r2, [pc, #140]	@ (8006520 <TIM_Base_SetConfig+0xfc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00b      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a22      	ldr	r2, [pc, #136]	@ (8006524 <TIM_Base_SetConfig+0x100>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a21      	ldr	r2, [pc, #132]	@ (8006528 <TIM_Base_SetConfig+0x104>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a20      	ldr	r2, [pc, #128]	@ (800652c <TIM_Base_SetConfig+0x108>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d108      	bne.n	80064c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006514 <TIM_Base_SetConfig+0xf0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d103      	bne.n	80064ee <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f043 0204 	orr.w	r2, r3, #4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	601a      	str	r2, [r3, #0]
}
 8006506:	bf00      	nop
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40010000 	.word	0x40010000
 8006518:	40000400 	.word	0x40000400
 800651c:	40000800 	.word	0x40000800
 8006520:	40000c00 	.word	0x40000c00
 8006524:	40014000 	.word	0x40014000
 8006528:	40014400 	.word	0x40014400
 800652c:	40014800 	.word	0x40014800

08006530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	f023 0201 	bic.w	r2, r3, #1
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0303 	bic.w	r3, r3, #3
 8006566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 0302 	bic.w	r3, r3, #2
 8006578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a1c      	ldr	r2, [pc, #112]	@ (80065f8 <TIM_OC1_SetConfig+0xc8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d10c      	bne.n	80065a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f023 0308 	bic.w	r3, r3, #8
 8006592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f023 0304 	bic.w	r3, r3, #4
 80065a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a13      	ldr	r2, [pc, #76]	@ (80065f8 <TIM_OC1_SetConfig+0xc8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d111      	bne.n	80065d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	621a      	str	r2, [r3, #32]
}
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	40010000 	.word	0x40010000

080065fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f023 0210 	bic.w	r2, r3, #16
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800662a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f023 0320 	bic.w	r3, r3, #32
 8006646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a1e      	ldr	r2, [pc, #120]	@ (80066d0 <TIM_OC2_SetConfig+0xd4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d10d      	bne.n	8006678 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006676:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a15      	ldr	r2, [pc, #84]	@ (80066d0 <TIM_OC2_SetConfig+0xd4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d113      	bne.n	80066a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006686:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800668e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	621a      	str	r2, [r3, #32]
}
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40010000 	.word	0x40010000

080066d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800671c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1d      	ldr	r2, [pc, #116]	@ (80067a4 <TIM_OC3_SetConfig+0xd0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d10d      	bne.n	800674e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800674c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a14      	ldr	r2, [pc, #80]	@ (80067a4 <TIM_OC3_SetConfig+0xd0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d113      	bne.n	800677e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800675c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	621a      	str	r2, [r3, #32]
}
 8006798:	bf00      	nop
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	40010000 	.word	0x40010000

080067a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	021b      	lsls	r3, r3, #8
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	031b      	lsls	r3, r3, #12
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a10      	ldr	r2, [pc, #64]	@ (8006844 <TIM_OC4_SetConfig+0x9c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d109      	bne.n	800681c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800680e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	019b      	lsls	r3, r3, #6
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	621a      	str	r2, [r3, #32]
}
 8006836:	bf00      	nop
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	40010000 	.word	0x40010000

08006848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f023 0201 	bic.w	r2, r3, #1
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f023 030a 	bic.w	r3, r3, #10
 8006884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	621a      	str	r2, [r3, #32]
}
 800689a:	bf00      	nop
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b087      	sub	sp, #28
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f023 0210 	bic.w	r2, r3, #16
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	031b      	lsls	r3, r3, #12
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006906:	b480      	push	{r7}
 8006908:	b085      	sub	sp, #20
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	f043 0307 	orr.w	r3, r3, #7
 8006928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	609a      	str	r2, [r3, #8]
}
 8006930:	bf00      	nop
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	021a      	lsls	r2, r3, #8
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	431a      	orrs	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4313      	orrs	r3, r2
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	609a      	str	r2, [r3, #8]
}
 8006970:	bf00      	nop
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	2201      	movs	r2, #1
 8006990:	fa02 f303 	lsl.w	r3, r2, r3
 8006994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1a      	ldr	r2, [r3, #32]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	43db      	mvns	r3, r3
 800699e:	401a      	ands	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a1a      	ldr	r2, [r3, #32]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	fa01 f303 	lsl.w	r3, r1, r3
 80069b4:	431a      	orrs	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069dc:	2302      	movs	r3, #2
 80069de:	e050      	b.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d018      	beq.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2c:	d013      	beq.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a18      	ldr	r2, [pc, #96]	@ (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00e      	beq.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a16      	ldr	r2, [pc, #88]	@ (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d009      	beq.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a15      	ldr	r2, [pc, #84]	@ (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a13      	ldr	r2, [pc, #76]	@ (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d10c      	bne.n	8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40000400 	.word	0x40000400
 8006a98:	40000800 	.word	0x40000800
 8006a9c:	40000c00 	.word	0x40000c00
 8006aa0:	40014000 	.word	0x40014000

08006aa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e03d      	b.n	8006b3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e042      	b.n	8006c08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fc fa98 	bl	80030cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2224      	movs	r2, #36	@ 0x24
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fd7f 	bl	80076b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695a      	ldr	r2, [r3, #20]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	@ 0x28
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d175      	bne.n	8006d1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_UART_Transmit+0x2c>
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e06e      	b.n	8006d1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2221      	movs	r2, #33	@ 0x21
 8006c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c4e:	f7fc fc8d 	bl	800356c <HAL_GetTick>
 8006c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	88fa      	ldrh	r2, [r7, #6]
 8006c5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c68:	d108      	bne.n	8006c7c <HAL_UART_Transmit+0x6c>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d104      	bne.n	8006c7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	e003      	b.n	8006c84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c84:	e02e      	b.n	8006ce4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2180      	movs	r1, #128	@ 0x80
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fb1d 	bl	80072d0 <UART_WaitOnFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e03a      	b.n	8006d1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10b      	bne.n	8006cc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	3302      	adds	r3, #2
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	e007      	b.n	8006cd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1cb      	bne.n	8006c86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2140      	movs	r1, #64	@ 0x40
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 fae9 	bl	80072d0 <UART_WaitOnFlagUntilTimeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e006      	b.n	8006d1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10f      	bne.n	8006d8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <HAL_UART_IRQHandler+0x66>
 8006d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fbd7 	bl	800753a <UART_Receive_IT>
      return;
 8006d8c:	e273      	b.n	8007276 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80de 	beq.w	8006f54 <HAL_UART_IRQHandler+0x22c>
 8006d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80d1 	beq.w	8006f54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xae>
 8006dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dce:	f043 0201 	orr.w	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <HAL_UART_IRQHandler+0xd2>
 8006de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df2:	f043 0202 	orr.w	r2, r3, #2
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00b      	beq.n	8006e1e <HAL_UART_IRQHandler+0xf6>
 8006e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e16:	f043 0204 	orr.w	r2, r3, #4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d011      	beq.n	8006e4e <HAL_UART_IRQHandler+0x126>
 8006e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e46:	f043 0208 	orr.w	r2, r3, #8
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 820a 	beq.w	800726c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d008      	beq.n	8006e76 <HAL_UART_IRQHandler+0x14e>
 8006e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fb62 	bl	800753a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e80:	2b40      	cmp	r3, #64	@ 0x40
 8006e82:	bf0c      	ite	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	2300      	movne	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d103      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x17a>
 8006e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d04f      	beq.n	8006f42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa6d 	bl	8007382 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb2:	2b40      	cmp	r3, #64	@ 0x40
 8006eb4:	d141      	bne.n	8006f3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3314      	adds	r3, #20
 8006ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3314      	adds	r3, #20
 8006ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1d9      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d013      	beq.n	8006f32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0e:	4a8a      	ldr	r2, [pc, #552]	@ (8007138 <HAL_UART_IRQHandler+0x410>)
 8006f10:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fd f8cb 	bl	80040b2 <HAL_DMA_Abort_IT>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d016      	beq.n	8006f50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f30:	e00e      	b.n	8006f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f9b6 	bl	80072a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f38:	e00a      	b.n	8006f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f9b2 	bl	80072a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f40:	e006      	b.n	8006f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f9ae 	bl	80072a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006f4e:	e18d      	b.n	800726c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f50:	bf00      	nop
    return;
 8006f52:	e18b      	b.n	800726c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	f040 8167 	bne.w	800722c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f62:	f003 0310 	and.w	r3, r3, #16
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 8160 	beq.w	800722c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 8159 	beq.w	800722c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9a:	2b40      	cmp	r3, #64	@ 0x40
 8006f9c:	f040 80ce 	bne.w	800713c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 80a9 	beq.w	8007108 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	f080 80a2 	bcs.w	8007108 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fd6:	f000 8088 	beq.w	80070ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	330c      	adds	r3, #12
 8006fe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007006:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800700a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007012:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800701e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1d9      	bne.n	8006fda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3314      	adds	r3, #20
 800702c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007036:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3314      	adds	r3, #20
 8007046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800704a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800704e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007052:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800705c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e1      	bne.n	8007026 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3314      	adds	r3, #20
 8007068:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3314      	adds	r3, #20
 8007082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007086:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007088:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800708c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e3      	bne.n	8007062 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	330c      	adds	r3, #12
 80070ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ba:	f023 0310 	bic.w	r3, r3, #16
 80070be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	330c      	adds	r3, #12
 80070c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80070cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80070ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e3      	bne.n	80070a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fc ff74 	bl	8003fd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2202      	movs	r2, #2
 80070ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f8d9 	bl	80072b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007106:	e0b3      	b.n	8007270 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800710c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007110:	429a      	cmp	r2, r3
 8007112:	f040 80ad 	bne.w	8007270 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007120:	f040 80a6 	bne.w	8007270 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f8c1 	bl	80072b8 <HAL_UARTEx_RxEventCallback>
      return;
 8007136:	e09b      	b.n	8007270 <HAL_UART_IRQHandler+0x548>
 8007138:	08007449 	.word	0x08007449
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007144:	b29b      	uxth	r3, r3
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 808e 	beq.w	8007274 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8089 	beq.w	8007274 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007186:	647a      	str	r2, [r7, #68]	@ 0x44
 8007188:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800718c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e3      	bne.n	8007162 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3314      	adds	r3, #20
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	623b      	str	r3, [r7, #32]
   return(result);
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	f023 0301 	bic.w	r3, r3, #1
 80071b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3314      	adds	r3, #20
 80071ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80071be:	633a      	str	r2, [r7, #48]	@ 0x30
 80071c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e3      	bne.n	800719a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	330c      	adds	r3, #12
 80071e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0310 	bic.w	r3, r3, #16
 80071f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	330c      	adds	r3, #12
 8007200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007204:	61fa      	str	r2, [r7, #28]
 8007206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	69b9      	ldr	r1, [r7, #24]
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	e841 2300 	strex	r3, r2, [r1]
 8007210:	617b      	str	r3, [r7, #20]
   return(result);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e3      	bne.n	80071e0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800721e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f847 	bl	80072b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800722a:	e023      	b.n	8007274 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <HAL_UART_IRQHandler+0x524>
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800723c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f910 	bl	800746a <UART_Transmit_IT>
    return;
 800724a:	e014      	b.n	8007276 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800724c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00e      	beq.n	8007276 <HAL_UART_IRQHandler+0x54e>
 8007258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800725c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f950 	bl	800750a <UART_EndTransmit_IT>
    return;
 800726a:	e004      	b.n	8007276 <HAL_UART_IRQHandler+0x54e>
    return;
 800726c:	bf00      	nop
 800726e:	e002      	b.n	8007276 <HAL_UART_IRQHandler+0x54e>
      return;
 8007270:	bf00      	nop
 8007272:	e000      	b.n	8007276 <HAL_UART_IRQHandler+0x54e>
      return;
 8007274:	bf00      	nop
  }
}
 8007276:	37e8      	adds	r7, #232	@ 0xe8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	4613      	mov	r3, r2
 80072de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e0:	e03b      	b.n	800735a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e8:	d037      	beq.n	800735a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ea:	f7fc f93f 	bl	800356c <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	6a3a      	ldr	r2, [r7, #32]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d302      	bcc.n	8007300 <UART_WaitOnFlagUntilTimeout+0x30>
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e03a      	b.n	800737a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f003 0304 	and.w	r3, r3, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	d023      	beq.n	800735a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b80      	cmp	r3, #128	@ 0x80
 8007316:	d020      	beq.n	800735a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b40      	cmp	r3, #64	@ 0x40
 800731c:	d01d      	beq.n	800735a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0308 	and.w	r3, r3, #8
 8007328:	2b08      	cmp	r3, #8
 800732a:	d116      	bne.n	800735a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f81d 	bl	8007382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2208      	movs	r2, #8
 800734c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e00f      	b.n	800737a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4013      	ands	r3, r2
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	bf0c      	ite	eq
 800736a:	2301      	moveq	r3, #1
 800736c:	2300      	movne	r3, #0
 800736e:	b2db      	uxtb	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	429a      	cmp	r2, r3
 8007376:	d0b4      	beq.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007382:	b480      	push	{r7}
 8007384:	b095      	sub	sp, #84	@ 0x54
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330c      	adds	r3, #12
 8007390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80073ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e5      	bne.n	800738a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3314      	adds	r3, #20
 80073c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e5      	bne.n	80073be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d119      	bne.n	800742e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	60bb      	str	r3, [r7, #8]
   return(result);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f023 0310 	bic.w	r3, r3, #16
 8007410:	647b      	str	r3, [r7, #68]	@ 0x44
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	330c      	adds	r3, #12
 8007418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800741a:	61ba      	str	r2, [r7, #24]
 800741c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6979      	ldr	r1, [r7, #20]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	613b      	str	r3, [r7, #16]
   return(result);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e5      	bne.n	80073fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800743c:	bf00      	nop
 800743e:	3754      	adds	r7, #84	@ 0x54
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007454:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff ff21 	bl	80072a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007462:	bf00      	nop
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b21      	cmp	r3, #33	@ 0x21
 800747c:	d13e      	bne.n	80074fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007486:	d114      	bne.n	80074b2 <UART_Transmit_IT+0x48>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d110      	bne.n	80074b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	1c9a      	adds	r2, r3, #2
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	621a      	str	r2, [r3, #32]
 80074b0:	e008      	b.n	80074c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	1c59      	adds	r1, r3, #1
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6211      	str	r1, [r2, #32]
 80074bc:	781a      	ldrb	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	4619      	mov	r1, r3
 80074d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10f      	bne.n	80074f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	e000      	b.n	80074fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074fc:	2302      	movs	r3, #2
  }
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007520:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff fea6 	bl	800727c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b08c      	sub	sp, #48	@ 0x30
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b22      	cmp	r3, #34	@ 0x22
 8007554:	f040 80aa 	bne.w	80076ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007560:	d115      	bne.n	800758e <UART_Receive_IT+0x54>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d111      	bne.n	800758e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757c:	b29a      	uxth	r2, r3
 800757e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007580:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	1c9a      	adds	r2, r3, #2
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	629a      	str	r2, [r3, #40]	@ 0x28
 800758c:	e024      	b.n	80075d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007592:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800759c:	d007      	beq.n	80075ae <UART_Receive_IT+0x74>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <UART_Receive_IT+0x82>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	e008      	b.n	80075ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	4619      	mov	r1, r3
 80075e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d15d      	bne.n	80076a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0220 	bic.w	r2, r2, #32
 80075fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800760a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695a      	ldr	r2, [r3, #20]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762e:	2b01      	cmp	r3, #1
 8007630:	d135      	bne.n	800769e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	330c      	adds	r3, #12
 800763e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	613b      	str	r3, [r7, #16]
   return(result);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f023 0310 	bic.w	r3, r3, #16
 800764e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	330c      	adds	r3, #12
 8007656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007658:	623a      	str	r2, [r7, #32]
 800765a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	69f9      	ldr	r1, [r7, #28]
 800765e:	6a3a      	ldr	r2, [r7, #32]
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	61bb      	str	r3, [r7, #24]
   return(result);
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e5      	bne.n	8007638 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b10      	cmp	r3, #16
 8007678:	d10a      	bne.n	8007690 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff fe0e 	bl	80072b8 <HAL_UARTEx_RxEventCallback>
 800769c:	e002      	b.n	80076a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff fdf6 	bl	8007290 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	e002      	b.n	80076ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3730      	adds	r7, #48	@ 0x30
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076bc:	b0c0      	sub	sp, #256	@ 0x100
 80076be:	af00      	add	r7, sp, #0
 80076c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d4:	68d9      	ldr	r1, [r3, #12]
 80076d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	ea40 0301 	orr.w	r3, r0, r1
 80076e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007710:	f021 010c 	bic.w	r1, r1, #12
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800771e:	430b      	orrs	r3, r1
 8007720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800772e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007732:	6999      	ldr	r1, [r3, #24]
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	ea40 0301 	orr.w	r3, r0, r1
 800773e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	4b8f      	ldr	r3, [pc, #572]	@ (8007984 <UART_SetConfig+0x2cc>)
 8007748:	429a      	cmp	r2, r3
 800774a:	d005      	beq.n	8007758 <UART_SetConfig+0xa0>
 800774c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b8d      	ldr	r3, [pc, #564]	@ (8007988 <UART_SetConfig+0x2d0>)
 8007754:	429a      	cmp	r2, r3
 8007756:	d104      	bne.n	8007762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007758:	f7fd fae2 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 800775c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007760:	e003      	b.n	800776a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007762:	f7fd fac9 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8007766:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800776a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007774:	f040 810c 	bne.w	8007990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800777c:	2200      	movs	r2, #0
 800777e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007782:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800778a:	4622      	mov	r2, r4
 800778c:	462b      	mov	r3, r5
 800778e:	1891      	adds	r1, r2, r2
 8007790:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007792:	415b      	adcs	r3, r3
 8007794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800779a:	4621      	mov	r1, r4
 800779c:	eb12 0801 	adds.w	r8, r2, r1
 80077a0:	4629      	mov	r1, r5
 80077a2:	eb43 0901 	adc.w	r9, r3, r1
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	f04f 0300 	mov.w	r3, #0
 80077ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077ba:	4690      	mov	r8, r2
 80077bc:	4699      	mov	r9, r3
 80077be:	4623      	mov	r3, r4
 80077c0:	eb18 0303 	adds.w	r3, r8, r3
 80077c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077c8:	462b      	mov	r3, r5
 80077ca:	eb49 0303 	adc.w	r3, r9, r3
 80077ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80077e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077e6:	460b      	mov	r3, r1
 80077e8:	18db      	adds	r3, r3, r3
 80077ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80077ec:	4613      	mov	r3, r2
 80077ee:	eb42 0303 	adc.w	r3, r2, r3
 80077f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80077fc:	f7f9 f9dc 	bl	8000bb8 <__aeabi_uldivmod>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4b61      	ldr	r3, [pc, #388]	@ (800798c <UART_SetConfig+0x2d4>)
 8007806:	fba3 2302 	umull	r2, r3, r3, r2
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	011c      	lsls	r4, r3, #4
 800780e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007812:	2200      	movs	r2, #0
 8007814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007818:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800781c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007820:	4642      	mov	r2, r8
 8007822:	464b      	mov	r3, r9
 8007824:	1891      	adds	r1, r2, r2
 8007826:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007828:	415b      	adcs	r3, r3
 800782a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800782c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007830:	4641      	mov	r1, r8
 8007832:	eb12 0a01 	adds.w	sl, r2, r1
 8007836:	4649      	mov	r1, r9
 8007838:	eb43 0b01 	adc.w	fp, r3, r1
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	f04f 0300 	mov.w	r3, #0
 8007844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800784c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007850:	4692      	mov	sl, r2
 8007852:	469b      	mov	fp, r3
 8007854:	4643      	mov	r3, r8
 8007856:	eb1a 0303 	adds.w	r3, sl, r3
 800785a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800785e:	464b      	mov	r3, r9
 8007860:	eb4b 0303 	adc.w	r3, fp, r3
 8007864:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007874:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800787c:	460b      	mov	r3, r1
 800787e:	18db      	adds	r3, r3, r3
 8007880:	643b      	str	r3, [r7, #64]	@ 0x40
 8007882:	4613      	mov	r3, r2
 8007884:	eb42 0303 	adc.w	r3, r2, r3
 8007888:	647b      	str	r3, [r7, #68]	@ 0x44
 800788a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800788e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007892:	f7f9 f991 	bl	8000bb8 <__aeabi_uldivmod>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4611      	mov	r1, r2
 800789c:	4b3b      	ldr	r3, [pc, #236]	@ (800798c <UART_SetConfig+0x2d4>)
 800789e:	fba3 2301 	umull	r2, r3, r3, r1
 80078a2:	095b      	lsrs	r3, r3, #5
 80078a4:	2264      	movs	r2, #100	@ 0x64
 80078a6:	fb02 f303 	mul.w	r3, r2, r3
 80078aa:	1acb      	subs	r3, r1, r3
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078b2:	4b36      	ldr	r3, [pc, #216]	@ (800798c <UART_SetConfig+0x2d4>)
 80078b4:	fba3 2302 	umull	r2, r3, r3, r2
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078c0:	441c      	add	r4, r3
 80078c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078d4:	4642      	mov	r2, r8
 80078d6:	464b      	mov	r3, r9
 80078d8:	1891      	adds	r1, r2, r2
 80078da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078dc:	415b      	adcs	r3, r3
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80078e4:	4641      	mov	r1, r8
 80078e6:	1851      	adds	r1, r2, r1
 80078e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80078ea:	4649      	mov	r1, r9
 80078ec:	414b      	adcs	r3, r1
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	f04f 0300 	mov.w	r3, #0
 80078f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80078fc:	4659      	mov	r1, fp
 80078fe:	00cb      	lsls	r3, r1, #3
 8007900:	4651      	mov	r1, sl
 8007902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007906:	4651      	mov	r1, sl
 8007908:	00ca      	lsls	r2, r1, #3
 800790a:	4610      	mov	r0, r2
 800790c:	4619      	mov	r1, r3
 800790e:	4603      	mov	r3, r0
 8007910:	4642      	mov	r2, r8
 8007912:	189b      	adds	r3, r3, r2
 8007914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007918:	464b      	mov	r3, r9
 800791a:	460a      	mov	r2, r1
 800791c:	eb42 0303 	adc.w	r3, r2, r3
 8007920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007930:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007938:	460b      	mov	r3, r1
 800793a:	18db      	adds	r3, r3, r3
 800793c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800793e:	4613      	mov	r3, r2
 8007940:	eb42 0303 	adc.w	r3, r2, r3
 8007944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800794a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800794e:	f7f9 f933 	bl	8000bb8 <__aeabi_uldivmod>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4b0d      	ldr	r3, [pc, #52]	@ (800798c <UART_SetConfig+0x2d4>)
 8007958:	fba3 1302 	umull	r1, r3, r3, r2
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	2164      	movs	r1, #100	@ 0x64
 8007960:	fb01 f303 	mul.w	r3, r1, r3
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	3332      	adds	r3, #50	@ 0x32
 800796a:	4a08      	ldr	r2, [pc, #32]	@ (800798c <UART_SetConfig+0x2d4>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	f003 0207 	and.w	r2, r3, #7
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4422      	add	r2, r4
 800797e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007980:	e106      	b.n	8007b90 <UART_SetConfig+0x4d8>
 8007982:	bf00      	nop
 8007984:	40011000 	.word	0x40011000
 8007988:	40011400 	.word	0x40011400
 800798c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007994:	2200      	movs	r2, #0
 8007996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800799a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800799e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079a2:	4642      	mov	r2, r8
 80079a4:	464b      	mov	r3, r9
 80079a6:	1891      	adds	r1, r2, r2
 80079a8:	6239      	str	r1, [r7, #32]
 80079aa:	415b      	adcs	r3, r3
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079b2:	4641      	mov	r1, r8
 80079b4:	1854      	adds	r4, r2, r1
 80079b6:	4649      	mov	r1, r9
 80079b8:	eb43 0501 	adc.w	r5, r3, r1
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	00eb      	lsls	r3, r5, #3
 80079c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079ca:	00e2      	lsls	r2, r4, #3
 80079cc:	4614      	mov	r4, r2
 80079ce:	461d      	mov	r5, r3
 80079d0:	4643      	mov	r3, r8
 80079d2:	18e3      	adds	r3, r4, r3
 80079d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079d8:	464b      	mov	r3, r9
 80079da:	eb45 0303 	adc.w	r3, r5, r3
 80079de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	f04f 0300 	mov.w	r3, #0
 80079fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80079fe:	4629      	mov	r1, r5
 8007a00:	008b      	lsls	r3, r1, #2
 8007a02:	4621      	mov	r1, r4
 8007a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a08:	4621      	mov	r1, r4
 8007a0a:	008a      	lsls	r2, r1, #2
 8007a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a10:	f7f9 f8d2 	bl	8000bb8 <__aeabi_uldivmod>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4b60      	ldr	r3, [pc, #384]	@ (8007b9c <UART_SetConfig+0x4e4>)
 8007a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	011c      	lsls	r4, r3, #4
 8007a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a34:	4642      	mov	r2, r8
 8007a36:	464b      	mov	r3, r9
 8007a38:	1891      	adds	r1, r2, r2
 8007a3a:	61b9      	str	r1, [r7, #24]
 8007a3c:	415b      	adcs	r3, r3
 8007a3e:	61fb      	str	r3, [r7, #28]
 8007a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a44:	4641      	mov	r1, r8
 8007a46:	1851      	adds	r1, r2, r1
 8007a48:	6139      	str	r1, [r7, #16]
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	414b      	adcs	r3, r1
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	f04f 0200 	mov.w	r2, #0
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a5c:	4659      	mov	r1, fp
 8007a5e:	00cb      	lsls	r3, r1, #3
 8007a60:	4651      	mov	r1, sl
 8007a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a66:	4651      	mov	r1, sl
 8007a68:	00ca      	lsls	r2, r1, #3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4603      	mov	r3, r0
 8007a70:	4642      	mov	r2, r8
 8007a72:	189b      	adds	r3, r3, r2
 8007a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a78:	464b      	mov	r3, r9
 8007a7a:	460a      	mov	r2, r1
 8007a7c:	eb42 0303 	adc.w	r3, r2, r3
 8007a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007a90:	f04f 0200 	mov.w	r2, #0
 8007a94:	f04f 0300 	mov.w	r3, #0
 8007a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	008b      	lsls	r3, r1, #2
 8007aa0:	4641      	mov	r1, r8
 8007aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	008a      	lsls	r2, r1, #2
 8007aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007aae:	f7f9 f883 	bl	8000bb8 <__aeabi_uldivmod>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4b38      	ldr	r3, [pc, #224]	@ (8007b9c <UART_SetConfig+0x4e4>)
 8007aba:	fba3 2301 	umull	r2, r3, r3, r1
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	2264      	movs	r2, #100	@ 0x64
 8007ac2:	fb02 f303 	mul.w	r3, r2, r3
 8007ac6:	1acb      	subs	r3, r1, r3
 8007ac8:	011b      	lsls	r3, r3, #4
 8007aca:	3332      	adds	r3, #50	@ 0x32
 8007acc:	4a33      	ldr	r2, [pc, #204]	@ (8007b9c <UART_SetConfig+0x4e4>)
 8007ace:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ad8:	441c      	add	r4, r3
 8007ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ade:	2200      	movs	r2, #0
 8007ae0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ae2:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ae4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ae8:	4642      	mov	r2, r8
 8007aea:	464b      	mov	r3, r9
 8007aec:	1891      	adds	r1, r2, r2
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	415b      	adcs	r3, r3
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007af8:	4641      	mov	r1, r8
 8007afa:	1851      	adds	r1, r2, r1
 8007afc:	6039      	str	r1, [r7, #0]
 8007afe:	4649      	mov	r1, r9
 8007b00:	414b      	adcs	r3, r1
 8007b02:	607b      	str	r3, [r7, #4]
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b10:	4659      	mov	r1, fp
 8007b12:	00cb      	lsls	r3, r1, #3
 8007b14:	4651      	mov	r1, sl
 8007b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b1a:	4651      	mov	r1, sl
 8007b1c:	00ca      	lsls	r2, r1, #3
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	4642      	mov	r2, r8
 8007b26:	189b      	adds	r3, r3, r2
 8007b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	460a      	mov	r2, r1
 8007b2e:	eb42 0303 	adc.w	r3, r2, r3
 8007b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	008b      	lsls	r3, r1, #2
 8007b50:	4641      	mov	r1, r8
 8007b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b56:	4641      	mov	r1, r8
 8007b58:	008a      	lsls	r2, r1, #2
 8007b5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b5e:	f7f9 f82b 	bl	8000bb8 <__aeabi_uldivmod>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <UART_SetConfig+0x4e4>)
 8007b68:	fba3 1302 	umull	r1, r3, r3, r2
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	2164      	movs	r1, #100	@ 0x64
 8007b70:	fb01 f303 	mul.w	r3, r1, r3
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	3332      	adds	r3, #50	@ 0x32
 8007b7a:	4a08      	ldr	r2, [pc, #32]	@ (8007b9c <UART_SetConfig+0x4e4>)
 8007b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b80:	095b      	lsrs	r3, r3, #5
 8007b82:	f003 020f 	and.w	r2, r3, #15
 8007b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4422      	add	r2, r4
 8007b8e:	609a      	str	r2, [r3, #8]
}
 8007b90:	bf00      	nop
 8007b92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007b96:	46bd      	mov	sp, r7
 8007b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b9c:	51eb851f 	.word	0x51eb851f

08007ba0 <__cvt>:
 8007ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba4:	ec57 6b10 	vmov	r6, r7, d0
 8007ba8:	2f00      	cmp	r7, #0
 8007baa:	460c      	mov	r4, r1
 8007bac:	4619      	mov	r1, r3
 8007bae:	463b      	mov	r3, r7
 8007bb0:	bfbb      	ittet	lt
 8007bb2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007bb6:	461f      	movlt	r7, r3
 8007bb8:	2300      	movge	r3, #0
 8007bba:	232d      	movlt	r3, #45	@ 0x2d
 8007bbc:	700b      	strb	r3, [r1, #0]
 8007bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bc0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007bc4:	4691      	mov	r9, r2
 8007bc6:	f023 0820 	bic.w	r8, r3, #32
 8007bca:	bfbc      	itt	lt
 8007bcc:	4632      	movlt	r2, r6
 8007bce:	4616      	movlt	r6, r2
 8007bd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007bd4:	d005      	beq.n	8007be2 <__cvt+0x42>
 8007bd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007bda:	d100      	bne.n	8007bde <__cvt+0x3e>
 8007bdc:	3401      	adds	r4, #1
 8007bde:	2102      	movs	r1, #2
 8007be0:	e000      	b.n	8007be4 <__cvt+0x44>
 8007be2:	2103      	movs	r1, #3
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	ab02      	add	r3, sp, #8
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	ec47 6b10 	vmov	d0, r6, r7
 8007bf0:	4653      	mov	r3, sl
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	f000 fe74 	bl	80088e0 <_dtoa_r>
 8007bf8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	d119      	bne.n	8007c34 <__cvt+0x94>
 8007c00:	f019 0f01 	tst.w	r9, #1
 8007c04:	d00e      	beq.n	8007c24 <__cvt+0x84>
 8007c06:	eb00 0904 	add.w	r9, r0, r4
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4630      	mov	r0, r6
 8007c10:	4639      	mov	r1, r7
 8007c12:	f7f8 ff61 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c16:	b108      	cbz	r0, 8007c1c <__cvt+0x7c>
 8007c18:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c1c:	2230      	movs	r2, #48	@ 0x30
 8007c1e:	9b03      	ldr	r3, [sp, #12]
 8007c20:	454b      	cmp	r3, r9
 8007c22:	d31e      	bcc.n	8007c62 <__cvt+0xc2>
 8007c24:	9b03      	ldr	r3, [sp, #12]
 8007c26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c28:	1b5b      	subs	r3, r3, r5
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	b004      	add	sp, #16
 8007c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c38:	eb00 0904 	add.w	r9, r0, r4
 8007c3c:	d1e5      	bne.n	8007c0a <__cvt+0x6a>
 8007c3e:	7803      	ldrb	r3, [r0, #0]
 8007c40:	2b30      	cmp	r3, #48	@ 0x30
 8007c42:	d10a      	bne.n	8007c5a <__cvt+0xba>
 8007c44:	2200      	movs	r2, #0
 8007c46:	2300      	movs	r3, #0
 8007c48:	4630      	mov	r0, r6
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	f7f8 ff44 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c50:	b918      	cbnz	r0, 8007c5a <__cvt+0xba>
 8007c52:	f1c4 0401 	rsb	r4, r4, #1
 8007c56:	f8ca 4000 	str.w	r4, [sl]
 8007c5a:	f8da 3000 	ldr.w	r3, [sl]
 8007c5e:	4499      	add	r9, r3
 8007c60:	e7d3      	b.n	8007c0a <__cvt+0x6a>
 8007c62:	1c59      	adds	r1, r3, #1
 8007c64:	9103      	str	r1, [sp, #12]
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e7d9      	b.n	8007c1e <__cvt+0x7e>

08007c6a <__exponent>:
 8007c6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	bfba      	itte	lt
 8007c70:	4249      	neglt	r1, r1
 8007c72:	232d      	movlt	r3, #45	@ 0x2d
 8007c74:	232b      	movge	r3, #43	@ 0x2b
 8007c76:	2909      	cmp	r1, #9
 8007c78:	7002      	strb	r2, [r0, #0]
 8007c7a:	7043      	strb	r3, [r0, #1]
 8007c7c:	dd29      	ble.n	8007cd2 <__exponent+0x68>
 8007c7e:	f10d 0307 	add.w	r3, sp, #7
 8007c82:	461d      	mov	r5, r3
 8007c84:	270a      	movs	r7, #10
 8007c86:	461a      	mov	r2, r3
 8007c88:	fbb1 f6f7 	udiv	r6, r1, r7
 8007c8c:	fb07 1416 	mls	r4, r7, r6, r1
 8007c90:	3430      	adds	r4, #48	@ 0x30
 8007c92:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c96:	460c      	mov	r4, r1
 8007c98:	2c63      	cmp	r4, #99	@ 0x63
 8007c9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	dcf1      	bgt.n	8007c86 <__exponent+0x1c>
 8007ca2:	3130      	adds	r1, #48	@ 0x30
 8007ca4:	1e94      	subs	r4, r2, #2
 8007ca6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007caa:	1c41      	adds	r1, r0, #1
 8007cac:	4623      	mov	r3, r4
 8007cae:	42ab      	cmp	r3, r5
 8007cb0:	d30a      	bcc.n	8007cc8 <__exponent+0x5e>
 8007cb2:	f10d 0309 	add.w	r3, sp, #9
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	42ac      	cmp	r4, r5
 8007cba:	bf88      	it	hi
 8007cbc:	2300      	movhi	r3, #0
 8007cbe:	3302      	adds	r3, #2
 8007cc0:	4403      	add	r3, r0
 8007cc2:	1a18      	subs	r0, r3, r0
 8007cc4:	b003      	add	sp, #12
 8007cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cc8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ccc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007cd0:	e7ed      	b.n	8007cae <__exponent+0x44>
 8007cd2:	2330      	movs	r3, #48	@ 0x30
 8007cd4:	3130      	adds	r1, #48	@ 0x30
 8007cd6:	7083      	strb	r3, [r0, #2]
 8007cd8:	70c1      	strb	r1, [r0, #3]
 8007cda:	1d03      	adds	r3, r0, #4
 8007cdc:	e7f1      	b.n	8007cc2 <__exponent+0x58>
	...

08007ce0 <_printf_float>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	b08d      	sub	sp, #52	@ 0x34
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007cec:	4616      	mov	r6, r2
 8007cee:	461f      	mov	r7, r3
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	f000 fcf5 	bl	80086e0 <_localeconv_r>
 8007cf6:	6803      	ldr	r3, [r0, #0]
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7f8 fac0 	bl	8000280 <strlen>
 8007d00:	2300      	movs	r3, #0
 8007d02:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d04:	f8d8 3000 	ldr.w	r3, [r8]
 8007d08:	9005      	str	r0, [sp, #20]
 8007d0a:	3307      	adds	r3, #7
 8007d0c:	f023 0307 	bic.w	r3, r3, #7
 8007d10:	f103 0208 	add.w	r2, r3, #8
 8007d14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d18:	f8d4 b000 	ldr.w	fp, [r4]
 8007d1c:	f8c8 2000 	str.w	r2, [r8]
 8007d20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d28:	9307      	str	r3, [sp, #28]
 8007d2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d36:	4b9c      	ldr	r3, [pc, #624]	@ (8007fa8 <_printf_float+0x2c8>)
 8007d38:	f04f 32ff 	mov.w	r2, #4294967295
 8007d3c:	f7f8 fefe 	bl	8000b3c <__aeabi_dcmpun>
 8007d40:	bb70      	cbnz	r0, 8007da0 <_printf_float+0xc0>
 8007d42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d46:	4b98      	ldr	r3, [pc, #608]	@ (8007fa8 <_printf_float+0x2c8>)
 8007d48:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4c:	f7f8 fed8 	bl	8000b00 <__aeabi_dcmple>
 8007d50:	bb30      	cbnz	r0, 8007da0 <_printf_float+0xc0>
 8007d52:	2200      	movs	r2, #0
 8007d54:	2300      	movs	r3, #0
 8007d56:	4640      	mov	r0, r8
 8007d58:	4649      	mov	r1, r9
 8007d5a:	f7f8 fec7 	bl	8000aec <__aeabi_dcmplt>
 8007d5e:	b110      	cbz	r0, 8007d66 <_printf_float+0x86>
 8007d60:	232d      	movs	r3, #45	@ 0x2d
 8007d62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d66:	4a91      	ldr	r2, [pc, #580]	@ (8007fac <_printf_float+0x2cc>)
 8007d68:	4b91      	ldr	r3, [pc, #580]	@ (8007fb0 <_printf_float+0x2d0>)
 8007d6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d6e:	bf8c      	ite	hi
 8007d70:	4690      	movhi	r8, r2
 8007d72:	4698      	movls	r8, r3
 8007d74:	2303      	movs	r3, #3
 8007d76:	6123      	str	r3, [r4, #16]
 8007d78:	f02b 0304 	bic.w	r3, fp, #4
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	f04f 0900 	mov.w	r9, #0
 8007d82:	9700      	str	r7, [sp, #0]
 8007d84:	4633      	mov	r3, r6
 8007d86:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 f9d2 	bl	8008134 <_printf_common>
 8007d90:	3001      	adds	r0, #1
 8007d92:	f040 808d 	bne.w	8007eb0 <_printf_float+0x1d0>
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	b00d      	add	sp, #52	@ 0x34
 8007d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da0:	4642      	mov	r2, r8
 8007da2:	464b      	mov	r3, r9
 8007da4:	4640      	mov	r0, r8
 8007da6:	4649      	mov	r1, r9
 8007da8:	f7f8 fec8 	bl	8000b3c <__aeabi_dcmpun>
 8007dac:	b140      	cbz	r0, 8007dc0 <_printf_float+0xe0>
 8007dae:	464b      	mov	r3, r9
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bfbc      	itt	lt
 8007db4:	232d      	movlt	r3, #45	@ 0x2d
 8007db6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007dba:	4a7e      	ldr	r2, [pc, #504]	@ (8007fb4 <_printf_float+0x2d4>)
 8007dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8007fb8 <_printf_float+0x2d8>)
 8007dbe:	e7d4      	b.n	8007d6a <_printf_float+0x8a>
 8007dc0:	6863      	ldr	r3, [r4, #4]
 8007dc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007dc6:	9206      	str	r2, [sp, #24]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	d13b      	bne.n	8007e44 <_printf_float+0x164>
 8007dcc:	2306      	movs	r3, #6
 8007dce:	6063      	str	r3, [r4, #4]
 8007dd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	6022      	str	r2, [r4, #0]
 8007dd8:	9303      	str	r3, [sp, #12]
 8007dda:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ddc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007de0:	ab09      	add	r3, sp, #36	@ 0x24
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	6861      	ldr	r1, [r4, #4]
 8007de6:	ec49 8b10 	vmov	d0, r8, r9
 8007dea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007dee:	4628      	mov	r0, r5
 8007df0:	f7ff fed6 	bl	8007ba0 <__cvt>
 8007df4:	9b06      	ldr	r3, [sp, #24]
 8007df6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007df8:	2b47      	cmp	r3, #71	@ 0x47
 8007dfa:	4680      	mov	r8, r0
 8007dfc:	d129      	bne.n	8007e52 <_printf_float+0x172>
 8007dfe:	1cc8      	adds	r0, r1, #3
 8007e00:	db02      	blt.n	8007e08 <_printf_float+0x128>
 8007e02:	6863      	ldr	r3, [r4, #4]
 8007e04:	4299      	cmp	r1, r3
 8007e06:	dd41      	ble.n	8007e8c <_printf_float+0x1ac>
 8007e08:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e0c:	fa5f fa8a 	uxtb.w	sl, sl
 8007e10:	3901      	subs	r1, #1
 8007e12:	4652      	mov	r2, sl
 8007e14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e18:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e1a:	f7ff ff26 	bl	8007c6a <__exponent>
 8007e1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e20:	1813      	adds	r3, r2, r0
 8007e22:	2a01      	cmp	r2, #1
 8007e24:	4681      	mov	r9, r0
 8007e26:	6123      	str	r3, [r4, #16]
 8007e28:	dc02      	bgt.n	8007e30 <_printf_float+0x150>
 8007e2a:	6822      	ldr	r2, [r4, #0]
 8007e2c:	07d2      	lsls	r2, r2, #31
 8007e2e:	d501      	bpl.n	8007e34 <_printf_float+0x154>
 8007e30:	3301      	adds	r3, #1
 8007e32:	6123      	str	r3, [r4, #16]
 8007e34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0a2      	beq.n	8007d82 <_printf_float+0xa2>
 8007e3c:	232d      	movs	r3, #45	@ 0x2d
 8007e3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e42:	e79e      	b.n	8007d82 <_printf_float+0xa2>
 8007e44:	9a06      	ldr	r2, [sp, #24]
 8007e46:	2a47      	cmp	r2, #71	@ 0x47
 8007e48:	d1c2      	bne.n	8007dd0 <_printf_float+0xf0>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1c0      	bne.n	8007dd0 <_printf_float+0xf0>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e7bd      	b.n	8007dce <_printf_float+0xee>
 8007e52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e56:	d9db      	bls.n	8007e10 <_printf_float+0x130>
 8007e58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e5c:	d118      	bne.n	8007e90 <_printf_float+0x1b0>
 8007e5e:	2900      	cmp	r1, #0
 8007e60:	6863      	ldr	r3, [r4, #4]
 8007e62:	dd0b      	ble.n	8007e7c <_printf_float+0x19c>
 8007e64:	6121      	str	r1, [r4, #16]
 8007e66:	b913      	cbnz	r3, 8007e6e <_printf_float+0x18e>
 8007e68:	6822      	ldr	r2, [r4, #0]
 8007e6a:	07d0      	lsls	r0, r2, #31
 8007e6c:	d502      	bpl.n	8007e74 <_printf_float+0x194>
 8007e6e:	3301      	adds	r3, #1
 8007e70:	440b      	add	r3, r1
 8007e72:	6123      	str	r3, [r4, #16]
 8007e74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e76:	f04f 0900 	mov.w	r9, #0
 8007e7a:	e7db      	b.n	8007e34 <_printf_float+0x154>
 8007e7c:	b913      	cbnz	r3, 8007e84 <_printf_float+0x1a4>
 8007e7e:	6822      	ldr	r2, [r4, #0]
 8007e80:	07d2      	lsls	r2, r2, #31
 8007e82:	d501      	bpl.n	8007e88 <_printf_float+0x1a8>
 8007e84:	3302      	adds	r3, #2
 8007e86:	e7f4      	b.n	8007e72 <_printf_float+0x192>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e7f2      	b.n	8007e72 <_printf_float+0x192>
 8007e8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e92:	4299      	cmp	r1, r3
 8007e94:	db05      	blt.n	8007ea2 <_printf_float+0x1c2>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	6121      	str	r1, [r4, #16]
 8007e9a:	07d8      	lsls	r0, r3, #31
 8007e9c:	d5ea      	bpl.n	8007e74 <_printf_float+0x194>
 8007e9e:	1c4b      	adds	r3, r1, #1
 8007ea0:	e7e7      	b.n	8007e72 <_printf_float+0x192>
 8007ea2:	2900      	cmp	r1, #0
 8007ea4:	bfd4      	ite	le
 8007ea6:	f1c1 0202 	rsble	r2, r1, #2
 8007eaa:	2201      	movgt	r2, #1
 8007eac:	4413      	add	r3, r2
 8007eae:	e7e0      	b.n	8007e72 <_printf_float+0x192>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	055a      	lsls	r2, r3, #21
 8007eb4:	d407      	bmi.n	8007ec6 <_printf_float+0x1e6>
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	4642      	mov	r2, r8
 8007eba:	4631      	mov	r1, r6
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	47b8      	blx	r7
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d12b      	bne.n	8007f1c <_printf_float+0x23c>
 8007ec4:	e767      	b.n	8007d96 <_printf_float+0xb6>
 8007ec6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007eca:	f240 80dd 	bls.w	8008088 <_printf_float+0x3a8>
 8007ece:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f7f8 fdff 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d033      	beq.n	8007f46 <_printf_float+0x266>
 8007ede:	4a37      	ldr	r2, [pc, #220]	@ (8007fbc <_printf_float+0x2dc>)
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b8      	blx	r7
 8007ee8:	3001      	adds	r0, #1
 8007eea:	f43f af54 	beq.w	8007d96 <_printf_float+0xb6>
 8007eee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007ef2:	4543      	cmp	r3, r8
 8007ef4:	db02      	blt.n	8007efc <_printf_float+0x21c>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	07d8      	lsls	r0, r3, #31
 8007efa:	d50f      	bpl.n	8007f1c <_printf_float+0x23c>
 8007efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f00:	4631      	mov	r1, r6
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	f43f af45 	beq.w	8007d96 <_printf_float+0xb6>
 8007f0c:	f04f 0900 	mov.w	r9, #0
 8007f10:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f14:	f104 0a1a 	add.w	sl, r4, #26
 8007f18:	45c8      	cmp	r8, r9
 8007f1a:	dc09      	bgt.n	8007f30 <_printf_float+0x250>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	079b      	lsls	r3, r3, #30
 8007f20:	f100 8103 	bmi.w	800812a <_printf_float+0x44a>
 8007f24:	68e0      	ldr	r0, [r4, #12]
 8007f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f28:	4298      	cmp	r0, r3
 8007f2a:	bfb8      	it	lt
 8007f2c:	4618      	movlt	r0, r3
 8007f2e:	e734      	b.n	8007d9a <_printf_float+0xba>
 8007f30:	2301      	movs	r3, #1
 8007f32:	4652      	mov	r2, sl
 8007f34:	4631      	mov	r1, r6
 8007f36:	4628      	mov	r0, r5
 8007f38:	47b8      	blx	r7
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	f43f af2b 	beq.w	8007d96 <_printf_float+0xb6>
 8007f40:	f109 0901 	add.w	r9, r9, #1
 8007f44:	e7e8      	b.n	8007f18 <_printf_float+0x238>
 8007f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	dc39      	bgt.n	8007fc0 <_printf_float+0x2e0>
 8007f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007fbc <_printf_float+0x2dc>)
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4631      	mov	r1, r6
 8007f52:	4628      	mov	r0, r5
 8007f54:	47b8      	blx	r7
 8007f56:	3001      	adds	r0, #1
 8007f58:	f43f af1d 	beq.w	8007d96 <_printf_float+0xb6>
 8007f5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f60:	ea59 0303 	orrs.w	r3, r9, r3
 8007f64:	d102      	bne.n	8007f6c <_printf_float+0x28c>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	07d9      	lsls	r1, r3, #31
 8007f6a:	d5d7      	bpl.n	8007f1c <_printf_float+0x23c>
 8007f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f70:	4631      	mov	r1, r6
 8007f72:	4628      	mov	r0, r5
 8007f74:	47b8      	blx	r7
 8007f76:	3001      	adds	r0, #1
 8007f78:	f43f af0d 	beq.w	8007d96 <_printf_float+0xb6>
 8007f7c:	f04f 0a00 	mov.w	sl, #0
 8007f80:	f104 0b1a 	add.w	fp, r4, #26
 8007f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f86:	425b      	negs	r3, r3
 8007f88:	4553      	cmp	r3, sl
 8007f8a:	dc01      	bgt.n	8007f90 <_printf_float+0x2b0>
 8007f8c:	464b      	mov	r3, r9
 8007f8e:	e793      	b.n	8007eb8 <_printf_float+0x1d8>
 8007f90:	2301      	movs	r3, #1
 8007f92:	465a      	mov	r2, fp
 8007f94:	4631      	mov	r1, r6
 8007f96:	4628      	mov	r0, r5
 8007f98:	47b8      	blx	r7
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	f43f aefb 	beq.w	8007d96 <_printf_float+0xb6>
 8007fa0:	f10a 0a01 	add.w	sl, sl, #1
 8007fa4:	e7ee      	b.n	8007f84 <_printf_float+0x2a4>
 8007fa6:	bf00      	nop
 8007fa8:	7fefffff 	.word	0x7fefffff
 8007fac:	0800bf70 	.word	0x0800bf70
 8007fb0:	0800bf6c 	.word	0x0800bf6c
 8007fb4:	0800bf78 	.word	0x0800bf78
 8007fb8:	0800bf74 	.word	0x0800bf74
 8007fbc:	0800bf7c 	.word	0x0800bf7c
 8007fc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fc2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fc6:	4553      	cmp	r3, sl
 8007fc8:	bfa8      	it	ge
 8007fca:	4653      	movge	r3, sl
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	4699      	mov	r9, r3
 8007fd0:	dc36      	bgt.n	8008040 <_printf_float+0x360>
 8007fd2:	f04f 0b00 	mov.w	fp, #0
 8007fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fda:	f104 021a 	add.w	r2, r4, #26
 8007fde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fe0:	9306      	str	r3, [sp, #24]
 8007fe2:	eba3 0309 	sub.w	r3, r3, r9
 8007fe6:	455b      	cmp	r3, fp
 8007fe8:	dc31      	bgt.n	800804e <_printf_float+0x36e>
 8007fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fec:	459a      	cmp	sl, r3
 8007fee:	dc3a      	bgt.n	8008066 <_printf_float+0x386>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	07da      	lsls	r2, r3, #31
 8007ff4:	d437      	bmi.n	8008066 <_printf_float+0x386>
 8007ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff8:	ebaa 0903 	sub.w	r9, sl, r3
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	ebaa 0303 	sub.w	r3, sl, r3
 8008002:	4599      	cmp	r9, r3
 8008004:	bfa8      	it	ge
 8008006:	4699      	movge	r9, r3
 8008008:	f1b9 0f00 	cmp.w	r9, #0
 800800c:	dc33      	bgt.n	8008076 <_printf_float+0x396>
 800800e:	f04f 0800 	mov.w	r8, #0
 8008012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008016:	f104 0b1a 	add.w	fp, r4, #26
 800801a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800801c:	ebaa 0303 	sub.w	r3, sl, r3
 8008020:	eba3 0309 	sub.w	r3, r3, r9
 8008024:	4543      	cmp	r3, r8
 8008026:	f77f af79 	ble.w	8007f1c <_printf_float+0x23c>
 800802a:	2301      	movs	r3, #1
 800802c:	465a      	mov	r2, fp
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	f43f aeae 	beq.w	8007d96 <_printf_float+0xb6>
 800803a:	f108 0801 	add.w	r8, r8, #1
 800803e:	e7ec      	b.n	800801a <_printf_float+0x33a>
 8008040:	4642      	mov	r2, r8
 8008042:	4631      	mov	r1, r6
 8008044:	4628      	mov	r0, r5
 8008046:	47b8      	blx	r7
 8008048:	3001      	adds	r0, #1
 800804a:	d1c2      	bne.n	8007fd2 <_printf_float+0x2f2>
 800804c:	e6a3      	b.n	8007d96 <_printf_float+0xb6>
 800804e:	2301      	movs	r3, #1
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	9206      	str	r2, [sp, #24]
 8008056:	47b8      	blx	r7
 8008058:	3001      	adds	r0, #1
 800805a:	f43f ae9c 	beq.w	8007d96 <_printf_float+0xb6>
 800805e:	9a06      	ldr	r2, [sp, #24]
 8008060:	f10b 0b01 	add.w	fp, fp, #1
 8008064:	e7bb      	b.n	8007fde <_printf_float+0x2fe>
 8008066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	47b8      	blx	r7
 8008070:	3001      	adds	r0, #1
 8008072:	d1c0      	bne.n	8007ff6 <_printf_float+0x316>
 8008074:	e68f      	b.n	8007d96 <_printf_float+0xb6>
 8008076:	9a06      	ldr	r2, [sp, #24]
 8008078:	464b      	mov	r3, r9
 800807a:	4442      	add	r2, r8
 800807c:	4631      	mov	r1, r6
 800807e:	4628      	mov	r0, r5
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	d1c3      	bne.n	800800e <_printf_float+0x32e>
 8008086:	e686      	b.n	8007d96 <_printf_float+0xb6>
 8008088:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800808c:	f1ba 0f01 	cmp.w	sl, #1
 8008090:	dc01      	bgt.n	8008096 <_printf_float+0x3b6>
 8008092:	07db      	lsls	r3, r3, #31
 8008094:	d536      	bpl.n	8008104 <_printf_float+0x424>
 8008096:	2301      	movs	r3, #1
 8008098:	4642      	mov	r2, r8
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	f43f ae78 	beq.w	8007d96 <_printf_float+0xb6>
 80080a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080aa:	4631      	mov	r1, r6
 80080ac:	4628      	mov	r0, r5
 80080ae:	47b8      	blx	r7
 80080b0:	3001      	adds	r0, #1
 80080b2:	f43f ae70 	beq.w	8007d96 <_printf_float+0xb6>
 80080b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080ba:	2200      	movs	r2, #0
 80080bc:	2300      	movs	r3, #0
 80080be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080c2:	f7f8 fd09 	bl	8000ad8 <__aeabi_dcmpeq>
 80080c6:	b9c0      	cbnz	r0, 80080fa <_printf_float+0x41a>
 80080c8:	4653      	mov	r3, sl
 80080ca:	f108 0201 	add.w	r2, r8, #1
 80080ce:	4631      	mov	r1, r6
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	d10c      	bne.n	80080f2 <_printf_float+0x412>
 80080d8:	e65d      	b.n	8007d96 <_printf_float+0xb6>
 80080da:	2301      	movs	r3, #1
 80080dc:	465a      	mov	r2, fp
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	f43f ae56 	beq.w	8007d96 <_printf_float+0xb6>
 80080ea:	f108 0801 	add.w	r8, r8, #1
 80080ee:	45d0      	cmp	r8, sl
 80080f0:	dbf3      	blt.n	80080da <_printf_float+0x3fa>
 80080f2:	464b      	mov	r3, r9
 80080f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80080f8:	e6df      	b.n	8007eba <_printf_float+0x1da>
 80080fa:	f04f 0800 	mov.w	r8, #0
 80080fe:	f104 0b1a 	add.w	fp, r4, #26
 8008102:	e7f4      	b.n	80080ee <_printf_float+0x40e>
 8008104:	2301      	movs	r3, #1
 8008106:	4642      	mov	r2, r8
 8008108:	e7e1      	b.n	80080ce <_printf_float+0x3ee>
 800810a:	2301      	movs	r3, #1
 800810c:	464a      	mov	r2, r9
 800810e:	4631      	mov	r1, r6
 8008110:	4628      	mov	r0, r5
 8008112:	47b8      	blx	r7
 8008114:	3001      	adds	r0, #1
 8008116:	f43f ae3e 	beq.w	8007d96 <_printf_float+0xb6>
 800811a:	f108 0801 	add.w	r8, r8, #1
 800811e:	68e3      	ldr	r3, [r4, #12]
 8008120:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008122:	1a5b      	subs	r3, r3, r1
 8008124:	4543      	cmp	r3, r8
 8008126:	dcf0      	bgt.n	800810a <_printf_float+0x42a>
 8008128:	e6fc      	b.n	8007f24 <_printf_float+0x244>
 800812a:	f04f 0800 	mov.w	r8, #0
 800812e:	f104 0919 	add.w	r9, r4, #25
 8008132:	e7f4      	b.n	800811e <_printf_float+0x43e>

08008134 <_printf_common>:
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	4616      	mov	r6, r2
 800813a:	4698      	mov	r8, r3
 800813c:	688a      	ldr	r2, [r1, #8]
 800813e:	690b      	ldr	r3, [r1, #16]
 8008140:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008144:	4293      	cmp	r3, r2
 8008146:	bfb8      	it	lt
 8008148:	4613      	movlt	r3, r2
 800814a:	6033      	str	r3, [r6, #0]
 800814c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008150:	4607      	mov	r7, r0
 8008152:	460c      	mov	r4, r1
 8008154:	b10a      	cbz	r2, 800815a <_printf_common+0x26>
 8008156:	3301      	adds	r3, #1
 8008158:	6033      	str	r3, [r6, #0]
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	0699      	lsls	r1, r3, #26
 800815e:	bf42      	ittt	mi
 8008160:	6833      	ldrmi	r3, [r6, #0]
 8008162:	3302      	addmi	r3, #2
 8008164:	6033      	strmi	r3, [r6, #0]
 8008166:	6825      	ldr	r5, [r4, #0]
 8008168:	f015 0506 	ands.w	r5, r5, #6
 800816c:	d106      	bne.n	800817c <_printf_common+0x48>
 800816e:	f104 0a19 	add.w	sl, r4, #25
 8008172:	68e3      	ldr	r3, [r4, #12]
 8008174:	6832      	ldr	r2, [r6, #0]
 8008176:	1a9b      	subs	r3, r3, r2
 8008178:	42ab      	cmp	r3, r5
 800817a:	dc26      	bgt.n	80081ca <_printf_common+0x96>
 800817c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008180:	6822      	ldr	r2, [r4, #0]
 8008182:	3b00      	subs	r3, #0
 8008184:	bf18      	it	ne
 8008186:	2301      	movne	r3, #1
 8008188:	0692      	lsls	r2, r2, #26
 800818a:	d42b      	bmi.n	80081e4 <_printf_common+0xb0>
 800818c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008190:	4641      	mov	r1, r8
 8008192:	4638      	mov	r0, r7
 8008194:	47c8      	blx	r9
 8008196:	3001      	adds	r0, #1
 8008198:	d01e      	beq.n	80081d8 <_printf_common+0xa4>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	6922      	ldr	r2, [r4, #16]
 800819e:	f003 0306 	and.w	r3, r3, #6
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	bf02      	ittt	eq
 80081a6:	68e5      	ldreq	r5, [r4, #12]
 80081a8:	6833      	ldreq	r3, [r6, #0]
 80081aa:	1aed      	subeq	r5, r5, r3
 80081ac:	68a3      	ldr	r3, [r4, #8]
 80081ae:	bf0c      	ite	eq
 80081b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081b4:	2500      	movne	r5, #0
 80081b6:	4293      	cmp	r3, r2
 80081b8:	bfc4      	itt	gt
 80081ba:	1a9b      	subgt	r3, r3, r2
 80081bc:	18ed      	addgt	r5, r5, r3
 80081be:	2600      	movs	r6, #0
 80081c0:	341a      	adds	r4, #26
 80081c2:	42b5      	cmp	r5, r6
 80081c4:	d11a      	bne.n	80081fc <_printf_common+0xc8>
 80081c6:	2000      	movs	r0, #0
 80081c8:	e008      	b.n	80081dc <_printf_common+0xa8>
 80081ca:	2301      	movs	r3, #1
 80081cc:	4652      	mov	r2, sl
 80081ce:	4641      	mov	r1, r8
 80081d0:	4638      	mov	r0, r7
 80081d2:	47c8      	blx	r9
 80081d4:	3001      	adds	r0, #1
 80081d6:	d103      	bne.n	80081e0 <_printf_common+0xac>
 80081d8:	f04f 30ff 	mov.w	r0, #4294967295
 80081dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e0:	3501      	adds	r5, #1
 80081e2:	e7c6      	b.n	8008172 <_printf_common+0x3e>
 80081e4:	18e1      	adds	r1, r4, r3
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	2030      	movs	r0, #48	@ 0x30
 80081ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081ee:	4422      	add	r2, r4
 80081f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081f8:	3302      	adds	r3, #2
 80081fa:	e7c7      	b.n	800818c <_printf_common+0x58>
 80081fc:	2301      	movs	r3, #1
 80081fe:	4622      	mov	r2, r4
 8008200:	4641      	mov	r1, r8
 8008202:	4638      	mov	r0, r7
 8008204:	47c8      	blx	r9
 8008206:	3001      	adds	r0, #1
 8008208:	d0e6      	beq.n	80081d8 <_printf_common+0xa4>
 800820a:	3601      	adds	r6, #1
 800820c:	e7d9      	b.n	80081c2 <_printf_common+0x8e>
	...

08008210 <_printf_i>:
 8008210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008214:	7e0f      	ldrb	r7, [r1, #24]
 8008216:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008218:	2f78      	cmp	r7, #120	@ 0x78
 800821a:	4691      	mov	r9, r2
 800821c:	4680      	mov	r8, r0
 800821e:	460c      	mov	r4, r1
 8008220:	469a      	mov	sl, r3
 8008222:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008226:	d807      	bhi.n	8008238 <_printf_i+0x28>
 8008228:	2f62      	cmp	r7, #98	@ 0x62
 800822a:	d80a      	bhi.n	8008242 <_printf_i+0x32>
 800822c:	2f00      	cmp	r7, #0
 800822e:	f000 80d1 	beq.w	80083d4 <_printf_i+0x1c4>
 8008232:	2f58      	cmp	r7, #88	@ 0x58
 8008234:	f000 80b8 	beq.w	80083a8 <_printf_i+0x198>
 8008238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800823c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008240:	e03a      	b.n	80082b8 <_printf_i+0xa8>
 8008242:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008246:	2b15      	cmp	r3, #21
 8008248:	d8f6      	bhi.n	8008238 <_printf_i+0x28>
 800824a:	a101      	add	r1, pc, #4	@ (adr r1, 8008250 <_printf_i+0x40>)
 800824c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008250:	080082a9 	.word	0x080082a9
 8008254:	080082bd 	.word	0x080082bd
 8008258:	08008239 	.word	0x08008239
 800825c:	08008239 	.word	0x08008239
 8008260:	08008239 	.word	0x08008239
 8008264:	08008239 	.word	0x08008239
 8008268:	080082bd 	.word	0x080082bd
 800826c:	08008239 	.word	0x08008239
 8008270:	08008239 	.word	0x08008239
 8008274:	08008239 	.word	0x08008239
 8008278:	08008239 	.word	0x08008239
 800827c:	080083bb 	.word	0x080083bb
 8008280:	080082e7 	.word	0x080082e7
 8008284:	08008375 	.word	0x08008375
 8008288:	08008239 	.word	0x08008239
 800828c:	08008239 	.word	0x08008239
 8008290:	080083dd 	.word	0x080083dd
 8008294:	08008239 	.word	0x08008239
 8008298:	080082e7 	.word	0x080082e7
 800829c:	08008239 	.word	0x08008239
 80082a0:	08008239 	.word	0x08008239
 80082a4:	0800837d 	.word	0x0800837d
 80082a8:	6833      	ldr	r3, [r6, #0]
 80082aa:	1d1a      	adds	r2, r3, #4
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6032      	str	r2, [r6, #0]
 80082b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082b8:	2301      	movs	r3, #1
 80082ba:	e09c      	b.n	80083f6 <_printf_i+0x1e6>
 80082bc:	6833      	ldr	r3, [r6, #0]
 80082be:	6820      	ldr	r0, [r4, #0]
 80082c0:	1d19      	adds	r1, r3, #4
 80082c2:	6031      	str	r1, [r6, #0]
 80082c4:	0606      	lsls	r6, r0, #24
 80082c6:	d501      	bpl.n	80082cc <_printf_i+0xbc>
 80082c8:	681d      	ldr	r5, [r3, #0]
 80082ca:	e003      	b.n	80082d4 <_printf_i+0xc4>
 80082cc:	0645      	lsls	r5, r0, #25
 80082ce:	d5fb      	bpl.n	80082c8 <_printf_i+0xb8>
 80082d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	da03      	bge.n	80082e0 <_printf_i+0xd0>
 80082d8:	232d      	movs	r3, #45	@ 0x2d
 80082da:	426d      	negs	r5, r5
 80082dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082e0:	4858      	ldr	r0, [pc, #352]	@ (8008444 <_printf_i+0x234>)
 80082e2:	230a      	movs	r3, #10
 80082e4:	e011      	b.n	800830a <_printf_i+0xfa>
 80082e6:	6821      	ldr	r1, [r4, #0]
 80082e8:	6833      	ldr	r3, [r6, #0]
 80082ea:	0608      	lsls	r0, r1, #24
 80082ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80082f0:	d402      	bmi.n	80082f8 <_printf_i+0xe8>
 80082f2:	0649      	lsls	r1, r1, #25
 80082f4:	bf48      	it	mi
 80082f6:	b2ad      	uxthmi	r5, r5
 80082f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80082fa:	4852      	ldr	r0, [pc, #328]	@ (8008444 <_printf_i+0x234>)
 80082fc:	6033      	str	r3, [r6, #0]
 80082fe:	bf14      	ite	ne
 8008300:	230a      	movne	r3, #10
 8008302:	2308      	moveq	r3, #8
 8008304:	2100      	movs	r1, #0
 8008306:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800830a:	6866      	ldr	r6, [r4, #4]
 800830c:	60a6      	str	r6, [r4, #8]
 800830e:	2e00      	cmp	r6, #0
 8008310:	db05      	blt.n	800831e <_printf_i+0x10e>
 8008312:	6821      	ldr	r1, [r4, #0]
 8008314:	432e      	orrs	r6, r5
 8008316:	f021 0104 	bic.w	r1, r1, #4
 800831a:	6021      	str	r1, [r4, #0]
 800831c:	d04b      	beq.n	80083b6 <_printf_i+0x1a6>
 800831e:	4616      	mov	r6, r2
 8008320:	fbb5 f1f3 	udiv	r1, r5, r3
 8008324:	fb03 5711 	mls	r7, r3, r1, r5
 8008328:	5dc7      	ldrb	r7, [r0, r7]
 800832a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800832e:	462f      	mov	r7, r5
 8008330:	42bb      	cmp	r3, r7
 8008332:	460d      	mov	r5, r1
 8008334:	d9f4      	bls.n	8008320 <_printf_i+0x110>
 8008336:	2b08      	cmp	r3, #8
 8008338:	d10b      	bne.n	8008352 <_printf_i+0x142>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	07df      	lsls	r7, r3, #31
 800833e:	d508      	bpl.n	8008352 <_printf_i+0x142>
 8008340:	6923      	ldr	r3, [r4, #16]
 8008342:	6861      	ldr	r1, [r4, #4]
 8008344:	4299      	cmp	r1, r3
 8008346:	bfde      	ittt	le
 8008348:	2330      	movle	r3, #48	@ 0x30
 800834a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800834e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008352:	1b92      	subs	r2, r2, r6
 8008354:	6122      	str	r2, [r4, #16]
 8008356:	f8cd a000 	str.w	sl, [sp]
 800835a:	464b      	mov	r3, r9
 800835c:	aa03      	add	r2, sp, #12
 800835e:	4621      	mov	r1, r4
 8008360:	4640      	mov	r0, r8
 8008362:	f7ff fee7 	bl	8008134 <_printf_common>
 8008366:	3001      	adds	r0, #1
 8008368:	d14a      	bne.n	8008400 <_printf_i+0x1f0>
 800836a:	f04f 30ff 	mov.w	r0, #4294967295
 800836e:	b004      	add	sp, #16
 8008370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	f043 0320 	orr.w	r3, r3, #32
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	4832      	ldr	r0, [pc, #200]	@ (8008448 <_printf_i+0x238>)
 800837e:	2778      	movs	r7, #120	@ 0x78
 8008380:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	6831      	ldr	r1, [r6, #0]
 8008388:	061f      	lsls	r7, r3, #24
 800838a:	f851 5b04 	ldr.w	r5, [r1], #4
 800838e:	d402      	bmi.n	8008396 <_printf_i+0x186>
 8008390:	065f      	lsls	r7, r3, #25
 8008392:	bf48      	it	mi
 8008394:	b2ad      	uxthmi	r5, r5
 8008396:	6031      	str	r1, [r6, #0]
 8008398:	07d9      	lsls	r1, r3, #31
 800839a:	bf44      	itt	mi
 800839c:	f043 0320 	orrmi.w	r3, r3, #32
 80083a0:	6023      	strmi	r3, [r4, #0]
 80083a2:	b11d      	cbz	r5, 80083ac <_printf_i+0x19c>
 80083a4:	2310      	movs	r3, #16
 80083a6:	e7ad      	b.n	8008304 <_printf_i+0xf4>
 80083a8:	4826      	ldr	r0, [pc, #152]	@ (8008444 <_printf_i+0x234>)
 80083aa:	e7e9      	b.n	8008380 <_printf_i+0x170>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	f023 0320 	bic.w	r3, r3, #32
 80083b2:	6023      	str	r3, [r4, #0]
 80083b4:	e7f6      	b.n	80083a4 <_printf_i+0x194>
 80083b6:	4616      	mov	r6, r2
 80083b8:	e7bd      	b.n	8008336 <_printf_i+0x126>
 80083ba:	6833      	ldr	r3, [r6, #0]
 80083bc:	6825      	ldr	r5, [r4, #0]
 80083be:	6961      	ldr	r1, [r4, #20]
 80083c0:	1d18      	adds	r0, r3, #4
 80083c2:	6030      	str	r0, [r6, #0]
 80083c4:	062e      	lsls	r6, r5, #24
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	d501      	bpl.n	80083ce <_printf_i+0x1be>
 80083ca:	6019      	str	r1, [r3, #0]
 80083cc:	e002      	b.n	80083d4 <_printf_i+0x1c4>
 80083ce:	0668      	lsls	r0, r5, #25
 80083d0:	d5fb      	bpl.n	80083ca <_printf_i+0x1ba>
 80083d2:	8019      	strh	r1, [r3, #0]
 80083d4:	2300      	movs	r3, #0
 80083d6:	6123      	str	r3, [r4, #16]
 80083d8:	4616      	mov	r6, r2
 80083da:	e7bc      	b.n	8008356 <_printf_i+0x146>
 80083dc:	6833      	ldr	r3, [r6, #0]
 80083de:	1d1a      	adds	r2, r3, #4
 80083e0:	6032      	str	r2, [r6, #0]
 80083e2:	681e      	ldr	r6, [r3, #0]
 80083e4:	6862      	ldr	r2, [r4, #4]
 80083e6:	2100      	movs	r1, #0
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7f7 fef9 	bl	80001e0 <memchr>
 80083ee:	b108      	cbz	r0, 80083f4 <_printf_i+0x1e4>
 80083f0:	1b80      	subs	r0, r0, r6
 80083f2:	6060      	str	r0, [r4, #4]
 80083f4:	6863      	ldr	r3, [r4, #4]
 80083f6:	6123      	str	r3, [r4, #16]
 80083f8:	2300      	movs	r3, #0
 80083fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083fe:	e7aa      	b.n	8008356 <_printf_i+0x146>
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	4632      	mov	r2, r6
 8008404:	4649      	mov	r1, r9
 8008406:	4640      	mov	r0, r8
 8008408:	47d0      	blx	sl
 800840a:	3001      	adds	r0, #1
 800840c:	d0ad      	beq.n	800836a <_printf_i+0x15a>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	079b      	lsls	r3, r3, #30
 8008412:	d413      	bmi.n	800843c <_printf_i+0x22c>
 8008414:	68e0      	ldr	r0, [r4, #12]
 8008416:	9b03      	ldr	r3, [sp, #12]
 8008418:	4298      	cmp	r0, r3
 800841a:	bfb8      	it	lt
 800841c:	4618      	movlt	r0, r3
 800841e:	e7a6      	b.n	800836e <_printf_i+0x15e>
 8008420:	2301      	movs	r3, #1
 8008422:	4632      	mov	r2, r6
 8008424:	4649      	mov	r1, r9
 8008426:	4640      	mov	r0, r8
 8008428:	47d0      	blx	sl
 800842a:	3001      	adds	r0, #1
 800842c:	d09d      	beq.n	800836a <_printf_i+0x15a>
 800842e:	3501      	adds	r5, #1
 8008430:	68e3      	ldr	r3, [r4, #12]
 8008432:	9903      	ldr	r1, [sp, #12]
 8008434:	1a5b      	subs	r3, r3, r1
 8008436:	42ab      	cmp	r3, r5
 8008438:	dcf2      	bgt.n	8008420 <_printf_i+0x210>
 800843a:	e7eb      	b.n	8008414 <_printf_i+0x204>
 800843c:	2500      	movs	r5, #0
 800843e:	f104 0619 	add.w	r6, r4, #25
 8008442:	e7f5      	b.n	8008430 <_printf_i+0x220>
 8008444:	0800bf7e 	.word	0x0800bf7e
 8008448:	0800bf8f 	.word	0x0800bf8f

0800844c <std>:
 800844c:	2300      	movs	r3, #0
 800844e:	b510      	push	{r4, lr}
 8008450:	4604      	mov	r4, r0
 8008452:	e9c0 3300 	strd	r3, r3, [r0]
 8008456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800845a:	6083      	str	r3, [r0, #8]
 800845c:	8181      	strh	r1, [r0, #12]
 800845e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008460:	81c2      	strh	r2, [r0, #14]
 8008462:	6183      	str	r3, [r0, #24]
 8008464:	4619      	mov	r1, r3
 8008466:	2208      	movs	r2, #8
 8008468:	305c      	adds	r0, #92	@ 0x5c
 800846a:	f000 f931 	bl	80086d0 <memset>
 800846e:	4b0d      	ldr	r3, [pc, #52]	@ (80084a4 <std+0x58>)
 8008470:	6263      	str	r3, [r4, #36]	@ 0x24
 8008472:	4b0d      	ldr	r3, [pc, #52]	@ (80084a8 <std+0x5c>)
 8008474:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008476:	4b0d      	ldr	r3, [pc, #52]	@ (80084ac <std+0x60>)
 8008478:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800847a:	4b0d      	ldr	r3, [pc, #52]	@ (80084b0 <std+0x64>)
 800847c:	6323      	str	r3, [r4, #48]	@ 0x30
 800847e:	4b0d      	ldr	r3, [pc, #52]	@ (80084b4 <std+0x68>)
 8008480:	6224      	str	r4, [r4, #32]
 8008482:	429c      	cmp	r4, r3
 8008484:	d006      	beq.n	8008494 <std+0x48>
 8008486:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800848a:	4294      	cmp	r4, r2
 800848c:	d002      	beq.n	8008494 <std+0x48>
 800848e:	33d0      	adds	r3, #208	@ 0xd0
 8008490:	429c      	cmp	r4, r3
 8008492:	d105      	bne.n	80084a0 <std+0x54>
 8008494:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800849c:	f000 b994 	b.w	80087c8 <__retarget_lock_init_recursive>
 80084a0:	bd10      	pop	{r4, pc}
 80084a2:	bf00      	nop
 80084a4:	080085d1 	.word	0x080085d1
 80084a8:	080085f3 	.word	0x080085f3
 80084ac:	0800862b 	.word	0x0800862b
 80084b0:	0800864f 	.word	0x0800864f
 80084b4:	2000156c 	.word	0x2000156c

080084b8 <stdio_exit_handler>:
 80084b8:	4a02      	ldr	r2, [pc, #8]	@ (80084c4 <stdio_exit_handler+0xc>)
 80084ba:	4903      	ldr	r1, [pc, #12]	@ (80084c8 <stdio_exit_handler+0x10>)
 80084bc:	4803      	ldr	r0, [pc, #12]	@ (80084cc <stdio_exit_handler+0x14>)
 80084be:	f000 b869 	b.w	8008594 <_fwalk_sglue>
 80084c2:	bf00      	nop
 80084c4:	20000040 	.word	0x20000040
 80084c8:	0800a12d 	.word	0x0800a12d
 80084cc:	20000050 	.word	0x20000050

080084d0 <cleanup_stdio>:
 80084d0:	6841      	ldr	r1, [r0, #4]
 80084d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <cleanup_stdio+0x34>)
 80084d4:	4299      	cmp	r1, r3
 80084d6:	b510      	push	{r4, lr}
 80084d8:	4604      	mov	r4, r0
 80084da:	d001      	beq.n	80084e0 <cleanup_stdio+0x10>
 80084dc:	f001 fe26 	bl	800a12c <_fflush_r>
 80084e0:	68a1      	ldr	r1, [r4, #8]
 80084e2:	4b09      	ldr	r3, [pc, #36]	@ (8008508 <cleanup_stdio+0x38>)
 80084e4:	4299      	cmp	r1, r3
 80084e6:	d002      	beq.n	80084ee <cleanup_stdio+0x1e>
 80084e8:	4620      	mov	r0, r4
 80084ea:	f001 fe1f 	bl	800a12c <_fflush_r>
 80084ee:	68e1      	ldr	r1, [r4, #12]
 80084f0:	4b06      	ldr	r3, [pc, #24]	@ (800850c <cleanup_stdio+0x3c>)
 80084f2:	4299      	cmp	r1, r3
 80084f4:	d004      	beq.n	8008500 <cleanup_stdio+0x30>
 80084f6:	4620      	mov	r0, r4
 80084f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084fc:	f001 be16 	b.w	800a12c <_fflush_r>
 8008500:	bd10      	pop	{r4, pc}
 8008502:	bf00      	nop
 8008504:	2000156c 	.word	0x2000156c
 8008508:	200015d4 	.word	0x200015d4
 800850c:	2000163c 	.word	0x2000163c

08008510 <global_stdio_init.part.0>:
 8008510:	b510      	push	{r4, lr}
 8008512:	4b0b      	ldr	r3, [pc, #44]	@ (8008540 <global_stdio_init.part.0+0x30>)
 8008514:	4c0b      	ldr	r4, [pc, #44]	@ (8008544 <global_stdio_init.part.0+0x34>)
 8008516:	4a0c      	ldr	r2, [pc, #48]	@ (8008548 <global_stdio_init.part.0+0x38>)
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	4620      	mov	r0, r4
 800851c:	2200      	movs	r2, #0
 800851e:	2104      	movs	r1, #4
 8008520:	f7ff ff94 	bl	800844c <std>
 8008524:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008528:	2201      	movs	r2, #1
 800852a:	2109      	movs	r1, #9
 800852c:	f7ff ff8e 	bl	800844c <std>
 8008530:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008534:	2202      	movs	r2, #2
 8008536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800853a:	2112      	movs	r1, #18
 800853c:	f7ff bf86 	b.w	800844c <std>
 8008540:	200016a4 	.word	0x200016a4
 8008544:	2000156c 	.word	0x2000156c
 8008548:	080084b9 	.word	0x080084b9

0800854c <__sfp_lock_acquire>:
 800854c:	4801      	ldr	r0, [pc, #4]	@ (8008554 <__sfp_lock_acquire+0x8>)
 800854e:	f000 b93c 	b.w	80087ca <__retarget_lock_acquire_recursive>
 8008552:	bf00      	nop
 8008554:	200016ad 	.word	0x200016ad

08008558 <__sfp_lock_release>:
 8008558:	4801      	ldr	r0, [pc, #4]	@ (8008560 <__sfp_lock_release+0x8>)
 800855a:	f000 b937 	b.w	80087cc <__retarget_lock_release_recursive>
 800855e:	bf00      	nop
 8008560:	200016ad 	.word	0x200016ad

08008564 <__sinit>:
 8008564:	b510      	push	{r4, lr}
 8008566:	4604      	mov	r4, r0
 8008568:	f7ff fff0 	bl	800854c <__sfp_lock_acquire>
 800856c:	6a23      	ldr	r3, [r4, #32]
 800856e:	b11b      	cbz	r3, 8008578 <__sinit+0x14>
 8008570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008574:	f7ff bff0 	b.w	8008558 <__sfp_lock_release>
 8008578:	4b04      	ldr	r3, [pc, #16]	@ (800858c <__sinit+0x28>)
 800857a:	6223      	str	r3, [r4, #32]
 800857c:	4b04      	ldr	r3, [pc, #16]	@ (8008590 <__sinit+0x2c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1f5      	bne.n	8008570 <__sinit+0xc>
 8008584:	f7ff ffc4 	bl	8008510 <global_stdio_init.part.0>
 8008588:	e7f2      	b.n	8008570 <__sinit+0xc>
 800858a:	bf00      	nop
 800858c:	080084d1 	.word	0x080084d1
 8008590:	200016a4 	.word	0x200016a4

08008594 <_fwalk_sglue>:
 8008594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008598:	4607      	mov	r7, r0
 800859a:	4688      	mov	r8, r1
 800859c:	4614      	mov	r4, r2
 800859e:	2600      	movs	r6, #0
 80085a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085a4:	f1b9 0901 	subs.w	r9, r9, #1
 80085a8:	d505      	bpl.n	80085b6 <_fwalk_sglue+0x22>
 80085aa:	6824      	ldr	r4, [r4, #0]
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	d1f7      	bne.n	80085a0 <_fwalk_sglue+0xc>
 80085b0:	4630      	mov	r0, r6
 80085b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b6:	89ab      	ldrh	r3, [r5, #12]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d907      	bls.n	80085cc <_fwalk_sglue+0x38>
 80085bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085c0:	3301      	adds	r3, #1
 80085c2:	d003      	beq.n	80085cc <_fwalk_sglue+0x38>
 80085c4:	4629      	mov	r1, r5
 80085c6:	4638      	mov	r0, r7
 80085c8:	47c0      	blx	r8
 80085ca:	4306      	orrs	r6, r0
 80085cc:	3568      	adds	r5, #104	@ 0x68
 80085ce:	e7e9      	b.n	80085a4 <_fwalk_sglue+0x10>

080085d0 <__sread>:
 80085d0:	b510      	push	{r4, lr}
 80085d2:	460c      	mov	r4, r1
 80085d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d8:	f000 f8a8 	bl	800872c <_read_r>
 80085dc:	2800      	cmp	r0, #0
 80085de:	bfab      	itete	ge
 80085e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085e2:	89a3      	ldrhlt	r3, [r4, #12]
 80085e4:	181b      	addge	r3, r3, r0
 80085e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085ea:	bfac      	ite	ge
 80085ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085ee:	81a3      	strhlt	r3, [r4, #12]
 80085f0:	bd10      	pop	{r4, pc}

080085f2 <__swrite>:
 80085f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f6:	461f      	mov	r7, r3
 80085f8:	898b      	ldrh	r3, [r1, #12]
 80085fa:	05db      	lsls	r3, r3, #23
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	4616      	mov	r6, r2
 8008602:	d505      	bpl.n	8008610 <__swrite+0x1e>
 8008604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008608:	2302      	movs	r3, #2
 800860a:	2200      	movs	r2, #0
 800860c:	f000 f87c 	bl	8008708 <_lseek_r>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	4632      	mov	r2, r6
 800861e:	463b      	mov	r3, r7
 8008620:	4628      	mov	r0, r5
 8008622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008626:	f000 b893 	b.w	8008750 <_write_r>

0800862a <__sseek>:
 800862a:	b510      	push	{r4, lr}
 800862c:	460c      	mov	r4, r1
 800862e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008632:	f000 f869 	bl	8008708 <_lseek_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	bf15      	itete	ne
 800863c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800863e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008642:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008646:	81a3      	strheq	r3, [r4, #12]
 8008648:	bf18      	it	ne
 800864a:	81a3      	strhne	r3, [r4, #12]
 800864c:	bd10      	pop	{r4, pc}

0800864e <__sclose>:
 800864e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008652:	f000 b849 	b.w	80086e8 <_close_r>

08008656 <_vsniprintf_r>:
 8008656:	b530      	push	{r4, r5, lr}
 8008658:	4614      	mov	r4, r2
 800865a:	2c00      	cmp	r4, #0
 800865c:	b09b      	sub	sp, #108	@ 0x6c
 800865e:	4605      	mov	r5, r0
 8008660:	461a      	mov	r2, r3
 8008662:	da05      	bge.n	8008670 <_vsniprintf_r+0x1a>
 8008664:	238b      	movs	r3, #139	@ 0x8b
 8008666:	6003      	str	r3, [r0, #0]
 8008668:	f04f 30ff 	mov.w	r0, #4294967295
 800866c:	b01b      	add	sp, #108	@ 0x6c
 800866e:	bd30      	pop	{r4, r5, pc}
 8008670:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008674:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	9319      	str	r3, [sp, #100]	@ 0x64
 800867e:	bf14      	ite	ne
 8008680:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008684:	4623      	moveq	r3, r4
 8008686:	9302      	str	r3, [sp, #8]
 8008688:	9305      	str	r3, [sp, #20]
 800868a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800868e:	9100      	str	r1, [sp, #0]
 8008690:	9104      	str	r1, [sp, #16]
 8008692:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008696:	4669      	mov	r1, sp
 8008698:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800869a:	f001 fbc7 	bl	8009e2c <_svfiprintf_r>
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	bfbc      	itt	lt
 80086a2:	238b      	movlt	r3, #139	@ 0x8b
 80086a4:	602b      	strlt	r3, [r5, #0]
 80086a6:	2c00      	cmp	r4, #0
 80086a8:	d0e0      	beq.n	800866c <_vsniprintf_r+0x16>
 80086aa:	9b00      	ldr	r3, [sp, #0]
 80086ac:	2200      	movs	r2, #0
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	e7dc      	b.n	800866c <_vsniprintf_r+0x16>
	...

080086b4 <vsniprintf>:
 80086b4:	b507      	push	{r0, r1, r2, lr}
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	4613      	mov	r3, r2
 80086ba:	460a      	mov	r2, r1
 80086bc:	4601      	mov	r1, r0
 80086be:	4803      	ldr	r0, [pc, #12]	@ (80086cc <vsniprintf+0x18>)
 80086c0:	6800      	ldr	r0, [r0, #0]
 80086c2:	f7ff ffc8 	bl	8008656 <_vsniprintf_r>
 80086c6:	b003      	add	sp, #12
 80086c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80086cc:	2000004c 	.word	0x2000004c

080086d0 <memset>:
 80086d0:	4402      	add	r2, r0
 80086d2:	4603      	mov	r3, r0
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d100      	bne.n	80086da <memset+0xa>
 80086d8:	4770      	bx	lr
 80086da:	f803 1b01 	strb.w	r1, [r3], #1
 80086de:	e7f9      	b.n	80086d4 <memset+0x4>

080086e0 <_localeconv_r>:
 80086e0:	4800      	ldr	r0, [pc, #0]	@ (80086e4 <_localeconv_r+0x4>)
 80086e2:	4770      	bx	lr
 80086e4:	2000018c 	.word	0x2000018c

080086e8 <_close_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4d06      	ldr	r5, [pc, #24]	@ (8008704 <_close_r+0x1c>)
 80086ec:	2300      	movs	r3, #0
 80086ee:	4604      	mov	r4, r0
 80086f0:	4608      	mov	r0, r1
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	f7fa fde8 	bl	80032c8 <_close>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d102      	bne.n	8008702 <_close_r+0x1a>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	b103      	cbz	r3, 8008702 <_close_r+0x1a>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	200016a8 	.word	0x200016a8

08008708 <_lseek_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d07      	ldr	r5, [pc, #28]	@ (8008728 <_lseek_r+0x20>)
 800870c:	4604      	mov	r4, r0
 800870e:	4608      	mov	r0, r1
 8008710:	4611      	mov	r1, r2
 8008712:	2200      	movs	r2, #0
 8008714:	602a      	str	r2, [r5, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	f7fa fdfd 	bl	8003316 <_lseek>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_lseek_r+0x1e>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	b103      	cbz	r3, 8008726 <_lseek_r+0x1e>
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	200016a8 	.word	0x200016a8

0800872c <_read_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4d07      	ldr	r5, [pc, #28]	@ (800874c <_read_r+0x20>)
 8008730:	4604      	mov	r4, r0
 8008732:	4608      	mov	r0, r1
 8008734:	4611      	mov	r1, r2
 8008736:	2200      	movs	r2, #0
 8008738:	602a      	str	r2, [r5, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	f7fa fd8b 	bl	8003256 <_read>
 8008740:	1c43      	adds	r3, r0, #1
 8008742:	d102      	bne.n	800874a <_read_r+0x1e>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	b103      	cbz	r3, 800874a <_read_r+0x1e>
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	200016a8 	.word	0x200016a8

08008750 <_write_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d07      	ldr	r5, [pc, #28]	@ (8008770 <_write_r+0x20>)
 8008754:	4604      	mov	r4, r0
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	2200      	movs	r2, #0
 800875c:	602a      	str	r2, [r5, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	f7fa fd96 	bl	8003290 <_write>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_write_r+0x1e>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_write_r+0x1e>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	200016a8 	.word	0x200016a8

08008774 <__errno>:
 8008774:	4b01      	ldr	r3, [pc, #4]	@ (800877c <__errno+0x8>)
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	2000004c 	.word	0x2000004c

08008780 <__libc_init_array>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	4d0d      	ldr	r5, [pc, #52]	@ (80087b8 <__libc_init_array+0x38>)
 8008784:	4c0d      	ldr	r4, [pc, #52]	@ (80087bc <__libc_init_array+0x3c>)
 8008786:	1b64      	subs	r4, r4, r5
 8008788:	10a4      	asrs	r4, r4, #2
 800878a:	2600      	movs	r6, #0
 800878c:	42a6      	cmp	r6, r4
 800878e:	d109      	bne.n	80087a4 <__libc_init_array+0x24>
 8008790:	4d0b      	ldr	r5, [pc, #44]	@ (80087c0 <__libc_init_array+0x40>)
 8008792:	4c0c      	ldr	r4, [pc, #48]	@ (80087c4 <__libc_init_array+0x44>)
 8008794:	f002 f9bc 	bl	800ab10 <_init>
 8008798:	1b64      	subs	r4, r4, r5
 800879a:	10a4      	asrs	r4, r4, #2
 800879c:	2600      	movs	r6, #0
 800879e:	42a6      	cmp	r6, r4
 80087a0:	d105      	bne.n	80087ae <__libc_init_array+0x2e>
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a8:	4798      	blx	r3
 80087aa:	3601      	adds	r6, #1
 80087ac:	e7ee      	b.n	800878c <__libc_init_array+0xc>
 80087ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b2:	4798      	blx	r3
 80087b4:	3601      	adds	r6, #1
 80087b6:	e7f2      	b.n	800879e <__libc_init_array+0x1e>
 80087b8:	0800c2ec 	.word	0x0800c2ec
 80087bc:	0800c2ec 	.word	0x0800c2ec
 80087c0:	0800c2ec 	.word	0x0800c2ec
 80087c4:	0800c2f0 	.word	0x0800c2f0

080087c8 <__retarget_lock_init_recursive>:
 80087c8:	4770      	bx	lr

080087ca <__retarget_lock_acquire_recursive>:
 80087ca:	4770      	bx	lr

080087cc <__retarget_lock_release_recursive>:
 80087cc:	4770      	bx	lr

080087ce <quorem>:
 80087ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d2:	6903      	ldr	r3, [r0, #16]
 80087d4:	690c      	ldr	r4, [r1, #16]
 80087d6:	42a3      	cmp	r3, r4
 80087d8:	4607      	mov	r7, r0
 80087da:	db7e      	blt.n	80088da <quorem+0x10c>
 80087dc:	3c01      	subs	r4, #1
 80087de:	f101 0814 	add.w	r8, r1, #20
 80087e2:	00a3      	lsls	r3, r4, #2
 80087e4:	f100 0514 	add.w	r5, r0, #20
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087f8:	3301      	adds	r3, #1
 80087fa:	429a      	cmp	r2, r3
 80087fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008800:	fbb2 f6f3 	udiv	r6, r2, r3
 8008804:	d32e      	bcc.n	8008864 <quorem+0x96>
 8008806:	f04f 0a00 	mov.w	sl, #0
 800880a:	46c4      	mov	ip, r8
 800880c:	46ae      	mov	lr, r5
 800880e:	46d3      	mov	fp, sl
 8008810:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008814:	b298      	uxth	r0, r3
 8008816:	fb06 a000 	mla	r0, r6, r0, sl
 800881a:	0c02      	lsrs	r2, r0, #16
 800881c:	0c1b      	lsrs	r3, r3, #16
 800881e:	fb06 2303 	mla	r3, r6, r3, r2
 8008822:	f8de 2000 	ldr.w	r2, [lr]
 8008826:	b280      	uxth	r0, r0
 8008828:	b292      	uxth	r2, r2
 800882a:	1a12      	subs	r2, r2, r0
 800882c:	445a      	add	r2, fp
 800882e:	f8de 0000 	ldr.w	r0, [lr]
 8008832:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008836:	b29b      	uxth	r3, r3
 8008838:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800883c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008840:	b292      	uxth	r2, r2
 8008842:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008846:	45e1      	cmp	r9, ip
 8008848:	f84e 2b04 	str.w	r2, [lr], #4
 800884c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008850:	d2de      	bcs.n	8008810 <quorem+0x42>
 8008852:	9b00      	ldr	r3, [sp, #0]
 8008854:	58eb      	ldr	r3, [r5, r3]
 8008856:	b92b      	cbnz	r3, 8008864 <quorem+0x96>
 8008858:	9b01      	ldr	r3, [sp, #4]
 800885a:	3b04      	subs	r3, #4
 800885c:	429d      	cmp	r5, r3
 800885e:	461a      	mov	r2, r3
 8008860:	d32f      	bcc.n	80088c2 <quorem+0xf4>
 8008862:	613c      	str	r4, [r7, #16]
 8008864:	4638      	mov	r0, r7
 8008866:	f001 f97d 	bl	8009b64 <__mcmp>
 800886a:	2800      	cmp	r0, #0
 800886c:	db25      	blt.n	80088ba <quorem+0xec>
 800886e:	4629      	mov	r1, r5
 8008870:	2000      	movs	r0, #0
 8008872:	f858 2b04 	ldr.w	r2, [r8], #4
 8008876:	f8d1 c000 	ldr.w	ip, [r1]
 800887a:	fa1f fe82 	uxth.w	lr, r2
 800887e:	fa1f f38c 	uxth.w	r3, ip
 8008882:	eba3 030e 	sub.w	r3, r3, lr
 8008886:	4403      	add	r3, r0
 8008888:	0c12      	lsrs	r2, r2, #16
 800888a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800888e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008892:	b29b      	uxth	r3, r3
 8008894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008898:	45c1      	cmp	r9, r8
 800889a:	f841 3b04 	str.w	r3, [r1], #4
 800889e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80088a2:	d2e6      	bcs.n	8008872 <quorem+0xa4>
 80088a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088ac:	b922      	cbnz	r2, 80088b8 <quorem+0xea>
 80088ae:	3b04      	subs	r3, #4
 80088b0:	429d      	cmp	r5, r3
 80088b2:	461a      	mov	r2, r3
 80088b4:	d30b      	bcc.n	80088ce <quorem+0x100>
 80088b6:	613c      	str	r4, [r7, #16]
 80088b8:	3601      	adds	r6, #1
 80088ba:	4630      	mov	r0, r6
 80088bc:	b003      	add	sp, #12
 80088be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c2:	6812      	ldr	r2, [r2, #0]
 80088c4:	3b04      	subs	r3, #4
 80088c6:	2a00      	cmp	r2, #0
 80088c8:	d1cb      	bne.n	8008862 <quorem+0x94>
 80088ca:	3c01      	subs	r4, #1
 80088cc:	e7c6      	b.n	800885c <quorem+0x8e>
 80088ce:	6812      	ldr	r2, [r2, #0]
 80088d0:	3b04      	subs	r3, #4
 80088d2:	2a00      	cmp	r2, #0
 80088d4:	d1ef      	bne.n	80088b6 <quorem+0xe8>
 80088d6:	3c01      	subs	r4, #1
 80088d8:	e7ea      	b.n	80088b0 <quorem+0xe2>
 80088da:	2000      	movs	r0, #0
 80088dc:	e7ee      	b.n	80088bc <quorem+0xee>
	...

080088e0 <_dtoa_r>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	69c7      	ldr	r7, [r0, #28]
 80088e6:	b097      	sub	sp, #92	@ 0x5c
 80088e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80088ec:	ec55 4b10 	vmov	r4, r5, d0
 80088f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80088f2:	9107      	str	r1, [sp, #28]
 80088f4:	4681      	mov	r9, r0
 80088f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80088f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80088fa:	b97f      	cbnz	r7, 800891c <_dtoa_r+0x3c>
 80088fc:	2010      	movs	r0, #16
 80088fe:	f000 fe09 	bl	8009514 <malloc>
 8008902:	4602      	mov	r2, r0
 8008904:	f8c9 001c 	str.w	r0, [r9, #28]
 8008908:	b920      	cbnz	r0, 8008914 <_dtoa_r+0x34>
 800890a:	4ba9      	ldr	r3, [pc, #676]	@ (8008bb0 <_dtoa_r+0x2d0>)
 800890c:	21ef      	movs	r1, #239	@ 0xef
 800890e:	48a9      	ldr	r0, [pc, #676]	@ (8008bb4 <_dtoa_r+0x2d4>)
 8008910:	f001 fc6c 	bl	800a1ec <__assert_func>
 8008914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008918:	6007      	str	r7, [r0, #0]
 800891a:	60c7      	str	r7, [r0, #12]
 800891c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008920:	6819      	ldr	r1, [r3, #0]
 8008922:	b159      	cbz	r1, 800893c <_dtoa_r+0x5c>
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	604a      	str	r2, [r1, #4]
 8008928:	2301      	movs	r3, #1
 800892a:	4093      	lsls	r3, r2
 800892c:	608b      	str	r3, [r1, #8]
 800892e:	4648      	mov	r0, r9
 8008930:	f000 fee6 	bl	8009700 <_Bfree>
 8008934:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	1e2b      	subs	r3, r5, #0
 800893e:	bfb9      	ittee	lt
 8008940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008944:	9305      	strlt	r3, [sp, #20]
 8008946:	2300      	movge	r3, #0
 8008948:	6033      	strge	r3, [r6, #0]
 800894a:	9f05      	ldr	r7, [sp, #20]
 800894c:	4b9a      	ldr	r3, [pc, #616]	@ (8008bb8 <_dtoa_r+0x2d8>)
 800894e:	bfbc      	itt	lt
 8008950:	2201      	movlt	r2, #1
 8008952:	6032      	strlt	r2, [r6, #0]
 8008954:	43bb      	bics	r3, r7
 8008956:	d112      	bne.n	800897e <_dtoa_r+0x9e>
 8008958:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800895a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008964:	4323      	orrs	r3, r4
 8008966:	f000 855a 	beq.w	800941e <_dtoa_r+0xb3e>
 800896a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800896c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008bcc <_dtoa_r+0x2ec>
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 855c 	beq.w	800942e <_dtoa_r+0xb4e>
 8008976:	f10a 0303 	add.w	r3, sl, #3
 800897a:	f000 bd56 	b.w	800942a <_dtoa_r+0xb4a>
 800897e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008982:	2200      	movs	r2, #0
 8008984:	ec51 0b17 	vmov	r0, r1, d7
 8008988:	2300      	movs	r3, #0
 800898a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800898e:	f7f8 f8a3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008992:	4680      	mov	r8, r0
 8008994:	b158      	cbz	r0, 80089ae <_dtoa_r+0xce>
 8008996:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008998:	2301      	movs	r3, #1
 800899a:	6013      	str	r3, [r2, #0]
 800899c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800899e:	b113      	cbz	r3, 80089a6 <_dtoa_r+0xc6>
 80089a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80089a2:	4b86      	ldr	r3, [pc, #536]	@ (8008bbc <_dtoa_r+0x2dc>)
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008bd0 <_dtoa_r+0x2f0>
 80089aa:	f000 bd40 	b.w	800942e <_dtoa_r+0xb4e>
 80089ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80089b2:	aa14      	add	r2, sp, #80	@ 0x50
 80089b4:	a915      	add	r1, sp, #84	@ 0x54
 80089b6:	4648      	mov	r0, r9
 80089b8:	f001 f984 	bl	8009cc4 <__d2b>
 80089bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80089c0:	9002      	str	r0, [sp, #8]
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	d078      	beq.n	8008ab8 <_dtoa_r+0x1d8>
 80089c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80089cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80089d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80089d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80089dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80089e0:	4619      	mov	r1, r3
 80089e2:	2200      	movs	r2, #0
 80089e4:	4b76      	ldr	r3, [pc, #472]	@ (8008bc0 <_dtoa_r+0x2e0>)
 80089e6:	f7f7 fc57 	bl	8000298 <__aeabi_dsub>
 80089ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8008b98 <_dtoa_r+0x2b8>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	f7f7 fe0a 	bl	8000608 <__aeabi_dmul>
 80089f4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008ba0 <_dtoa_r+0x2c0>)
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f7f7 fc4f 	bl	800029c <__adddf3>
 80089fe:	4604      	mov	r4, r0
 8008a00:	4630      	mov	r0, r6
 8008a02:	460d      	mov	r5, r1
 8008a04:	f7f7 fd96 	bl	8000534 <__aeabi_i2d>
 8008a08:	a367      	add	r3, pc, #412	@ (adr r3, 8008ba8 <_dtoa_r+0x2c8>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	f7f7 fdfb 	bl	8000608 <__aeabi_dmul>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4620      	mov	r0, r4
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7f7 fc3f 	bl	800029c <__adddf3>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	460d      	mov	r5, r1
 8008a22:	f7f8 f8a1 	bl	8000b68 <__aeabi_d2iz>
 8008a26:	2200      	movs	r2, #0
 8008a28:	4607      	mov	r7, r0
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f8 f85c 	bl	8000aec <__aeabi_dcmplt>
 8008a34:	b140      	cbz	r0, 8008a48 <_dtoa_r+0x168>
 8008a36:	4638      	mov	r0, r7
 8008a38:	f7f7 fd7c 	bl	8000534 <__aeabi_i2d>
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	462b      	mov	r3, r5
 8008a40:	f7f8 f84a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a44:	b900      	cbnz	r0, 8008a48 <_dtoa_r+0x168>
 8008a46:	3f01      	subs	r7, #1
 8008a48:	2f16      	cmp	r7, #22
 8008a4a:	d852      	bhi.n	8008af2 <_dtoa_r+0x212>
 8008a4c:	4b5d      	ldr	r3, [pc, #372]	@ (8008bc4 <_dtoa_r+0x2e4>)
 8008a4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a5a:	f7f8 f847 	bl	8000aec <__aeabi_dcmplt>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d049      	beq.n	8008af6 <_dtoa_r+0x216>
 8008a62:	3f01      	subs	r7, #1
 8008a64:	2300      	movs	r3, #0
 8008a66:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008a6a:	1b9b      	subs	r3, r3, r6
 8008a6c:	1e5a      	subs	r2, r3, #1
 8008a6e:	bf45      	ittet	mi
 8008a70:	f1c3 0301 	rsbmi	r3, r3, #1
 8008a74:	9300      	strmi	r3, [sp, #0]
 8008a76:	2300      	movpl	r3, #0
 8008a78:	2300      	movmi	r3, #0
 8008a7a:	9206      	str	r2, [sp, #24]
 8008a7c:	bf54      	ite	pl
 8008a7e:	9300      	strpl	r3, [sp, #0]
 8008a80:	9306      	strmi	r3, [sp, #24]
 8008a82:	2f00      	cmp	r7, #0
 8008a84:	db39      	blt.n	8008afa <_dtoa_r+0x21a>
 8008a86:	9b06      	ldr	r3, [sp, #24]
 8008a88:	970d      	str	r7, [sp, #52]	@ 0x34
 8008a8a:	443b      	add	r3, r7
 8008a8c:	9306      	str	r3, [sp, #24]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9308      	str	r3, [sp, #32]
 8008a92:	9b07      	ldr	r3, [sp, #28]
 8008a94:	2b09      	cmp	r3, #9
 8008a96:	d863      	bhi.n	8008b60 <_dtoa_r+0x280>
 8008a98:	2b05      	cmp	r3, #5
 8008a9a:	bfc4      	itt	gt
 8008a9c:	3b04      	subgt	r3, #4
 8008a9e:	9307      	strgt	r3, [sp, #28]
 8008aa0:	9b07      	ldr	r3, [sp, #28]
 8008aa2:	f1a3 0302 	sub.w	r3, r3, #2
 8008aa6:	bfcc      	ite	gt
 8008aa8:	2400      	movgt	r4, #0
 8008aaa:	2401      	movle	r4, #1
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d863      	bhi.n	8008b78 <_dtoa_r+0x298>
 8008ab0:	e8df f003 	tbb	[pc, r3]
 8008ab4:	2b375452 	.word	0x2b375452
 8008ab8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008abc:	441e      	add	r6, r3
 8008abe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	bfc1      	itttt	gt
 8008ac6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008aca:	409f      	lslgt	r7, r3
 8008acc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ad0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008ad4:	bfd6      	itet	le
 8008ad6:	f1c3 0320 	rsble	r3, r3, #32
 8008ada:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ade:	fa04 f003 	lslle.w	r0, r4, r3
 8008ae2:	f7f7 fd17 	bl	8000514 <__aeabi_ui2d>
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008aec:	3e01      	subs	r6, #1
 8008aee:	9212      	str	r2, [sp, #72]	@ 0x48
 8008af0:	e776      	b.n	80089e0 <_dtoa_r+0x100>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e7b7      	b.n	8008a66 <_dtoa_r+0x186>
 8008af6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008af8:	e7b6      	b.n	8008a68 <_dtoa_r+0x188>
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	1bdb      	subs	r3, r3, r7
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	427b      	negs	r3, r7
 8008b02:	9308      	str	r3, [sp, #32]
 8008b04:	2300      	movs	r3, #0
 8008b06:	930d      	str	r3, [sp, #52]	@ 0x34
 8008b08:	e7c3      	b.n	8008a92 <_dtoa_r+0x1b2>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b10:	eb07 0b03 	add.w	fp, r7, r3
 8008b14:	f10b 0301 	add.w	r3, fp, #1
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	9303      	str	r3, [sp, #12]
 8008b1c:	bfb8      	it	lt
 8008b1e:	2301      	movlt	r3, #1
 8008b20:	e006      	b.n	8008b30 <_dtoa_r+0x250>
 8008b22:	2301      	movs	r3, #1
 8008b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dd28      	ble.n	8008b7e <_dtoa_r+0x29e>
 8008b2c:	469b      	mov	fp, r3
 8008b2e:	9303      	str	r3, [sp, #12]
 8008b30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008b34:	2100      	movs	r1, #0
 8008b36:	2204      	movs	r2, #4
 8008b38:	f102 0514 	add.w	r5, r2, #20
 8008b3c:	429d      	cmp	r5, r3
 8008b3e:	d926      	bls.n	8008b8e <_dtoa_r+0x2ae>
 8008b40:	6041      	str	r1, [r0, #4]
 8008b42:	4648      	mov	r0, r9
 8008b44:	f000 fd9c 	bl	8009680 <_Balloc>
 8008b48:	4682      	mov	sl, r0
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d142      	bne.n	8008bd4 <_dtoa_r+0x2f4>
 8008b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008bc8 <_dtoa_r+0x2e8>)
 8008b50:	4602      	mov	r2, r0
 8008b52:	f240 11af 	movw	r1, #431	@ 0x1af
 8008b56:	e6da      	b.n	800890e <_dtoa_r+0x2e>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	e7e3      	b.n	8008b24 <_dtoa_r+0x244>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e7d5      	b.n	8008b0c <_dtoa_r+0x22c>
 8008b60:	2401      	movs	r4, #1
 8008b62:	2300      	movs	r3, #0
 8008b64:	9307      	str	r3, [sp, #28]
 8008b66:	9409      	str	r4, [sp, #36]	@ 0x24
 8008b68:	f04f 3bff 	mov.w	fp, #4294967295
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008b72:	2312      	movs	r3, #18
 8008b74:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b76:	e7db      	b.n	8008b30 <_dtoa_r+0x250>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7c:	e7f4      	b.n	8008b68 <_dtoa_r+0x288>
 8008b7e:	f04f 0b01 	mov.w	fp, #1
 8008b82:	f8cd b00c 	str.w	fp, [sp, #12]
 8008b86:	465b      	mov	r3, fp
 8008b88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008b8c:	e7d0      	b.n	8008b30 <_dtoa_r+0x250>
 8008b8e:	3101      	adds	r1, #1
 8008b90:	0052      	lsls	r2, r2, #1
 8008b92:	e7d1      	b.n	8008b38 <_dtoa_r+0x258>
 8008b94:	f3af 8000 	nop.w
 8008b98:	636f4361 	.word	0x636f4361
 8008b9c:	3fd287a7 	.word	0x3fd287a7
 8008ba0:	8b60c8b3 	.word	0x8b60c8b3
 8008ba4:	3fc68a28 	.word	0x3fc68a28
 8008ba8:	509f79fb 	.word	0x509f79fb
 8008bac:	3fd34413 	.word	0x3fd34413
 8008bb0:	0800bfad 	.word	0x0800bfad
 8008bb4:	0800bfc4 	.word	0x0800bfc4
 8008bb8:	7ff00000 	.word	0x7ff00000
 8008bbc:	0800bf7d 	.word	0x0800bf7d
 8008bc0:	3ff80000 	.word	0x3ff80000
 8008bc4:	0800c118 	.word	0x0800c118
 8008bc8:	0800c01c 	.word	0x0800c01c
 8008bcc:	0800bfa9 	.word	0x0800bfa9
 8008bd0:	0800bf7c 	.word	0x0800bf7c
 8008bd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008bd8:	6018      	str	r0, [r3, #0]
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	2b0e      	cmp	r3, #14
 8008bde:	f200 80a1 	bhi.w	8008d24 <_dtoa_r+0x444>
 8008be2:	2c00      	cmp	r4, #0
 8008be4:	f000 809e 	beq.w	8008d24 <_dtoa_r+0x444>
 8008be8:	2f00      	cmp	r7, #0
 8008bea:	dd33      	ble.n	8008c54 <_dtoa_r+0x374>
 8008bec:	4b9c      	ldr	r3, [pc, #624]	@ (8008e60 <_dtoa_r+0x580>)
 8008bee:	f007 020f 	and.w	r2, r7, #15
 8008bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bf6:	ed93 7b00 	vldr	d7, [r3]
 8008bfa:	05f8      	lsls	r0, r7, #23
 8008bfc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008c00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c04:	d516      	bpl.n	8008c34 <_dtoa_r+0x354>
 8008c06:	4b97      	ldr	r3, [pc, #604]	@ (8008e64 <_dtoa_r+0x584>)
 8008c08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c10:	f7f7 fe24 	bl	800085c <__aeabi_ddiv>
 8008c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c18:	f004 040f 	and.w	r4, r4, #15
 8008c1c:	2603      	movs	r6, #3
 8008c1e:	4d91      	ldr	r5, [pc, #580]	@ (8008e64 <_dtoa_r+0x584>)
 8008c20:	b954      	cbnz	r4, 8008c38 <_dtoa_r+0x358>
 8008c22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c2a:	f7f7 fe17 	bl	800085c <__aeabi_ddiv>
 8008c2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c32:	e028      	b.n	8008c86 <_dtoa_r+0x3a6>
 8008c34:	2602      	movs	r6, #2
 8008c36:	e7f2      	b.n	8008c1e <_dtoa_r+0x33e>
 8008c38:	07e1      	lsls	r1, r4, #31
 8008c3a:	d508      	bpl.n	8008c4e <_dtoa_r+0x36e>
 8008c3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008c40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c44:	f7f7 fce0 	bl	8000608 <__aeabi_dmul>
 8008c48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008c4c:	3601      	adds	r6, #1
 8008c4e:	1064      	asrs	r4, r4, #1
 8008c50:	3508      	adds	r5, #8
 8008c52:	e7e5      	b.n	8008c20 <_dtoa_r+0x340>
 8008c54:	f000 80af 	beq.w	8008db6 <_dtoa_r+0x4d6>
 8008c58:	427c      	negs	r4, r7
 8008c5a:	4b81      	ldr	r3, [pc, #516]	@ (8008e60 <_dtoa_r+0x580>)
 8008c5c:	4d81      	ldr	r5, [pc, #516]	@ (8008e64 <_dtoa_r+0x584>)
 8008c5e:	f004 020f 	and.w	r2, r4, #15
 8008c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c6e:	f7f7 fccb 	bl	8000608 <__aeabi_dmul>
 8008c72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c76:	1124      	asrs	r4, r4, #4
 8008c78:	2300      	movs	r3, #0
 8008c7a:	2602      	movs	r6, #2
 8008c7c:	2c00      	cmp	r4, #0
 8008c7e:	f040 808f 	bne.w	8008da0 <_dtoa_r+0x4c0>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1d3      	bne.n	8008c2e <_dtoa_r+0x34e>
 8008c86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 8094 	beq.w	8008dba <_dtoa_r+0x4da>
 8008c92:	4b75      	ldr	r3, [pc, #468]	@ (8008e68 <_dtoa_r+0x588>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	4620      	mov	r0, r4
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f7f7 ff27 	bl	8000aec <__aeabi_dcmplt>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f000 808b 	beq.w	8008dba <_dtoa_r+0x4da>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 8087 	beq.w	8008dba <_dtoa_r+0x4da>
 8008cac:	f1bb 0f00 	cmp.w	fp, #0
 8008cb0:	dd34      	ble.n	8008d1c <_dtoa_r+0x43c>
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	4b6d      	ldr	r3, [pc, #436]	@ (8008e6c <_dtoa_r+0x58c>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4629      	mov	r1, r5
 8008cba:	f7f7 fca5 	bl	8000608 <__aeabi_dmul>
 8008cbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cc2:	f107 38ff 	add.w	r8, r7, #4294967295
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	465c      	mov	r4, fp
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7f7 fc32 	bl	8000534 <__aeabi_i2d>
 8008cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd4:	f7f7 fc98 	bl	8000608 <__aeabi_dmul>
 8008cd8:	4b65      	ldr	r3, [pc, #404]	@ (8008e70 <_dtoa_r+0x590>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f7f7 fade 	bl	800029c <__adddf3>
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ce6:	2c00      	cmp	r4, #0
 8008ce8:	d16a      	bne.n	8008dc0 <_dtoa_r+0x4e0>
 8008cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cee:	4b61      	ldr	r3, [pc, #388]	@ (8008e74 <_dtoa_r+0x594>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f7f7 fad1 	bl	8000298 <__aeabi_dsub>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cfe:	462a      	mov	r2, r5
 8008d00:	4633      	mov	r3, r6
 8008d02:	f7f7 ff11 	bl	8000b28 <__aeabi_dcmpgt>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f040 8298 	bne.w	800923c <_dtoa_r+0x95c>
 8008d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d10:	462a      	mov	r2, r5
 8008d12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d16:	f7f7 fee9 	bl	8000aec <__aeabi_dcmplt>
 8008d1a:	bb38      	cbnz	r0, 8008d6c <_dtoa_r+0x48c>
 8008d1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008d20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008d24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f2c0 8157 	blt.w	8008fda <_dtoa_r+0x6fa>
 8008d2c:	2f0e      	cmp	r7, #14
 8008d2e:	f300 8154 	bgt.w	8008fda <_dtoa_r+0x6fa>
 8008d32:	4b4b      	ldr	r3, [pc, #300]	@ (8008e60 <_dtoa_r+0x580>)
 8008d34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d38:	ed93 7b00 	vldr	d7, [r3]
 8008d3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	ed8d 7b00 	vstr	d7, [sp]
 8008d44:	f280 80e5 	bge.w	8008f12 <_dtoa_r+0x632>
 8008d48:	9b03      	ldr	r3, [sp, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f300 80e1 	bgt.w	8008f12 <_dtoa_r+0x632>
 8008d50:	d10c      	bne.n	8008d6c <_dtoa_r+0x48c>
 8008d52:	4b48      	ldr	r3, [pc, #288]	@ (8008e74 <_dtoa_r+0x594>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	ec51 0b17 	vmov	r0, r1, d7
 8008d5a:	f7f7 fc55 	bl	8000608 <__aeabi_dmul>
 8008d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d62:	f7f7 fed7 	bl	8000b14 <__aeabi_dcmpge>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f000 8266 	beq.w	8009238 <_dtoa_r+0x958>
 8008d6c:	2400      	movs	r4, #0
 8008d6e:	4625      	mov	r5, r4
 8008d70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d72:	4656      	mov	r6, sl
 8008d74:	ea6f 0803 	mvn.w	r8, r3
 8008d78:	2700      	movs	r7, #0
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4648      	mov	r0, r9
 8008d7e:	f000 fcbf 	bl	8009700 <_Bfree>
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	f000 80bd 	beq.w	8008f02 <_dtoa_r+0x622>
 8008d88:	b12f      	cbz	r7, 8008d96 <_dtoa_r+0x4b6>
 8008d8a:	42af      	cmp	r7, r5
 8008d8c:	d003      	beq.n	8008d96 <_dtoa_r+0x4b6>
 8008d8e:	4639      	mov	r1, r7
 8008d90:	4648      	mov	r0, r9
 8008d92:	f000 fcb5 	bl	8009700 <_Bfree>
 8008d96:	4629      	mov	r1, r5
 8008d98:	4648      	mov	r0, r9
 8008d9a:	f000 fcb1 	bl	8009700 <_Bfree>
 8008d9e:	e0b0      	b.n	8008f02 <_dtoa_r+0x622>
 8008da0:	07e2      	lsls	r2, r4, #31
 8008da2:	d505      	bpl.n	8008db0 <_dtoa_r+0x4d0>
 8008da4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008da8:	f7f7 fc2e 	bl	8000608 <__aeabi_dmul>
 8008dac:	3601      	adds	r6, #1
 8008dae:	2301      	movs	r3, #1
 8008db0:	1064      	asrs	r4, r4, #1
 8008db2:	3508      	adds	r5, #8
 8008db4:	e762      	b.n	8008c7c <_dtoa_r+0x39c>
 8008db6:	2602      	movs	r6, #2
 8008db8:	e765      	b.n	8008c86 <_dtoa_r+0x3a6>
 8008dba:	9c03      	ldr	r4, [sp, #12]
 8008dbc:	46b8      	mov	r8, r7
 8008dbe:	e784      	b.n	8008cca <_dtoa_r+0x3ea>
 8008dc0:	4b27      	ldr	r3, [pc, #156]	@ (8008e60 <_dtoa_r+0x580>)
 8008dc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008dc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dcc:	4454      	add	r4, sl
 8008dce:	2900      	cmp	r1, #0
 8008dd0:	d054      	beq.n	8008e7c <_dtoa_r+0x59c>
 8008dd2:	4929      	ldr	r1, [pc, #164]	@ (8008e78 <_dtoa_r+0x598>)
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	f7f7 fd41 	bl	800085c <__aeabi_ddiv>
 8008dda:	4633      	mov	r3, r6
 8008ddc:	462a      	mov	r2, r5
 8008dde:	f7f7 fa5b 	bl	8000298 <__aeabi_dsub>
 8008de2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008de6:	4656      	mov	r6, sl
 8008de8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dec:	f7f7 febc 	bl	8000b68 <__aeabi_d2iz>
 8008df0:	4605      	mov	r5, r0
 8008df2:	f7f7 fb9f 	bl	8000534 <__aeabi_i2d>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dfe:	f7f7 fa4b 	bl	8000298 <__aeabi_dsub>
 8008e02:	3530      	adds	r5, #48	@ 0x30
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e0c:	f806 5b01 	strb.w	r5, [r6], #1
 8008e10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e14:	f7f7 fe6a 	bl	8000aec <__aeabi_dcmplt>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d172      	bne.n	8008f02 <_dtoa_r+0x622>
 8008e1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e20:	4911      	ldr	r1, [pc, #68]	@ (8008e68 <_dtoa_r+0x588>)
 8008e22:	2000      	movs	r0, #0
 8008e24:	f7f7 fa38 	bl	8000298 <__aeabi_dsub>
 8008e28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e2c:	f7f7 fe5e 	bl	8000aec <__aeabi_dcmplt>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	f040 80b4 	bne.w	8008f9e <_dtoa_r+0x6be>
 8008e36:	42a6      	cmp	r6, r4
 8008e38:	f43f af70 	beq.w	8008d1c <_dtoa_r+0x43c>
 8008e3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008e40:	4b0a      	ldr	r3, [pc, #40]	@ (8008e6c <_dtoa_r+0x58c>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	f7f7 fbe0 	bl	8000608 <__aeabi_dmul>
 8008e48:	4b08      	ldr	r3, [pc, #32]	@ (8008e6c <_dtoa_r+0x58c>)
 8008e4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008e4e:	2200      	movs	r2, #0
 8008e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e54:	f7f7 fbd8 	bl	8000608 <__aeabi_dmul>
 8008e58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e5c:	e7c4      	b.n	8008de8 <_dtoa_r+0x508>
 8008e5e:	bf00      	nop
 8008e60:	0800c118 	.word	0x0800c118
 8008e64:	0800c0f0 	.word	0x0800c0f0
 8008e68:	3ff00000 	.word	0x3ff00000
 8008e6c:	40240000 	.word	0x40240000
 8008e70:	401c0000 	.word	0x401c0000
 8008e74:	40140000 	.word	0x40140000
 8008e78:	3fe00000 	.word	0x3fe00000
 8008e7c:	4631      	mov	r1, r6
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f7f7 fbc2 	bl	8000608 <__aeabi_dmul>
 8008e84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008e88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008e8a:	4656      	mov	r6, sl
 8008e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e90:	f7f7 fe6a 	bl	8000b68 <__aeabi_d2iz>
 8008e94:	4605      	mov	r5, r0
 8008e96:	f7f7 fb4d 	bl	8000534 <__aeabi_i2d>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ea2:	f7f7 f9f9 	bl	8000298 <__aeabi_dsub>
 8008ea6:	3530      	adds	r5, #48	@ 0x30
 8008ea8:	f806 5b01 	strb.w	r5, [r6], #1
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	42a6      	cmp	r6, r4
 8008eb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	d124      	bne.n	8008f06 <_dtoa_r+0x626>
 8008ebc:	4baf      	ldr	r3, [pc, #700]	@ (800917c <_dtoa_r+0x89c>)
 8008ebe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ec2:	f7f7 f9eb 	bl	800029c <__adddf3>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ece:	f7f7 fe2b 	bl	8000b28 <__aeabi_dcmpgt>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d163      	bne.n	8008f9e <_dtoa_r+0x6be>
 8008ed6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008eda:	49a8      	ldr	r1, [pc, #672]	@ (800917c <_dtoa_r+0x89c>)
 8008edc:	2000      	movs	r0, #0
 8008ede:	f7f7 f9db 	bl	8000298 <__aeabi_dsub>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eea:	f7f7 fdff 	bl	8000aec <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f43f af14 	beq.w	8008d1c <_dtoa_r+0x43c>
 8008ef4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008ef6:	1e73      	subs	r3, r6, #1
 8008ef8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008efa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008efe:	2b30      	cmp	r3, #48	@ 0x30
 8008f00:	d0f8      	beq.n	8008ef4 <_dtoa_r+0x614>
 8008f02:	4647      	mov	r7, r8
 8008f04:	e03b      	b.n	8008f7e <_dtoa_r+0x69e>
 8008f06:	4b9e      	ldr	r3, [pc, #632]	@ (8009180 <_dtoa_r+0x8a0>)
 8008f08:	f7f7 fb7e 	bl	8000608 <__aeabi_dmul>
 8008f0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f10:	e7bc      	b.n	8008e8c <_dtoa_r+0x5ac>
 8008f12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008f16:	4656      	mov	r6, sl
 8008f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7f7 fc9c 	bl	800085c <__aeabi_ddiv>
 8008f24:	f7f7 fe20 	bl	8000b68 <__aeabi_d2iz>
 8008f28:	4680      	mov	r8, r0
 8008f2a:	f7f7 fb03 	bl	8000534 <__aeabi_i2d>
 8008f2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f32:	f7f7 fb69 	bl	8000608 <__aeabi_dmul>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008f42:	f7f7 f9a9 	bl	8000298 <__aeabi_dsub>
 8008f46:	f806 4b01 	strb.w	r4, [r6], #1
 8008f4a:	9d03      	ldr	r5, [sp, #12]
 8008f4c:	eba6 040a 	sub.w	r4, r6, sl
 8008f50:	42a5      	cmp	r5, r4
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	d133      	bne.n	8008fc0 <_dtoa_r+0x6e0>
 8008f58:	f7f7 f9a0 	bl	800029c <__adddf3>
 8008f5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f60:	4604      	mov	r4, r0
 8008f62:	460d      	mov	r5, r1
 8008f64:	f7f7 fde0 	bl	8000b28 <__aeabi_dcmpgt>
 8008f68:	b9c0      	cbnz	r0, 8008f9c <_dtoa_r+0x6bc>
 8008f6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f76:	b110      	cbz	r0, 8008f7e <_dtoa_r+0x69e>
 8008f78:	f018 0f01 	tst.w	r8, #1
 8008f7c:	d10e      	bne.n	8008f9c <_dtoa_r+0x6bc>
 8008f7e:	9902      	ldr	r1, [sp, #8]
 8008f80:	4648      	mov	r0, r9
 8008f82:	f000 fbbd 	bl	8009700 <_Bfree>
 8008f86:	2300      	movs	r3, #0
 8008f88:	7033      	strb	r3, [r6, #0]
 8008f8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f8c:	3701      	adds	r7, #1
 8008f8e:	601f      	str	r7, [r3, #0]
 8008f90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 824b 	beq.w	800942e <_dtoa_r+0xb4e>
 8008f98:	601e      	str	r6, [r3, #0]
 8008f9a:	e248      	b.n	800942e <_dtoa_r+0xb4e>
 8008f9c:	46b8      	mov	r8, r7
 8008f9e:	4633      	mov	r3, r6
 8008fa0:	461e      	mov	r6, r3
 8008fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fa6:	2a39      	cmp	r2, #57	@ 0x39
 8008fa8:	d106      	bne.n	8008fb8 <_dtoa_r+0x6d8>
 8008faa:	459a      	cmp	sl, r3
 8008fac:	d1f8      	bne.n	8008fa0 <_dtoa_r+0x6c0>
 8008fae:	2230      	movs	r2, #48	@ 0x30
 8008fb0:	f108 0801 	add.w	r8, r8, #1
 8008fb4:	f88a 2000 	strb.w	r2, [sl]
 8008fb8:	781a      	ldrb	r2, [r3, #0]
 8008fba:	3201      	adds	r2, #1
 8008fbc:	701a      	strb	r2, [r3, #0]
 8008fbe:	e7a0      	b.n	8008f02 <_dtoa_r+0x622>
 8008fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8009180 <_dtoa_r+0x8a0>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f7f7 fb20 	bl	8000608 <__aeabi_dmul>
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2300      	movs	r3, #0
 8008fcc:	4604      	mov	r4, r0
 8008fce:	460d      	mov	r5, r1
 8008fd0:	f7f7 fd82 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d09f      	beq.n	8008f18 <_dtoa_r+0x638>
 8008fd8:	e7d1      	b.n	8008f7e <_dtoa_r+0x69e>
 8008fda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fdc:	2a00      	cmp	r2, #0
 8008fde:	f000 80ea 	beq.w	80091b6 <_dtoa_r+0x8d6>
 8008fe2:	9a07      	ldr	r2, [sp, #28]
 8008fe4:	2a01      	cmp	r2, #1
 8008fe6:	f300 80cd 	bgt.w	8009184 <_dtoa_r+0x8a4>
 8008fea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008fec:	2a00      	cmp	r2, #0
 8008fee:	f000 80c1 	beq.w	8009174 <_dtoa_r+0x894>
 8008ff2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008ff6:	9c08      	ldr	r4, [sp, #32]
 8008ff8:	9e00      	ldr	r6, [sp, #0]
 8008ffa:	9a00      	ldr	r2, [sp, #0]
 8008ffc:	441a      	add	r2, r3
 8008ffe:	9200      	str	r2, [sp, #0]
 8009000:	9a06      	ldr	r2, [sp, #24]
 8009002:	2101      	movs	r1, #1
 8009004:	441a      	add	r2, r3
 8009006:	4648      	mov	r0, r9
 8009008:	9206      	str	r2, [sp, #24]
 800900a:	f000 fc2d 	bl	8009868 <__i2b>
 800900e:	4605      	mov	r5, r0
 8009010:	b166      	cbz	r6, 800902c <_dtoa_r+0x74c>
 8009012:	9b06      	ldr	r3, [sp, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	dd09      	ble.n	800902c <_dtoa_r+0x74c>
 8009018:	42b3      	cmp	r3, r6
 800901a:	9a00      	ldr	r2, [sp, #0]
 800901c:	bfa8      	it	ge
 800901e:	4633      	movge	r3, r6
 8009020:	1ad2      	subs	r2, r2, r3
 8009022:	9200      	str	r2, [sp, #0]
 8009024:	9a06      	ldr	r2, [sp, #24]
 8009026:	1af6      	subs	r6, r6, r3
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	9306      	str	r3, [sp, #24]
 800902c:	9b08      	ldr	r3, [sp, #32]
 800902e:	b30b      	cbz	r3, 8009074 <_dtoa_r+0x794>
 8009030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 80c6 	beq.w	80091c4 <_dtoa_r+0x8e4>
 8009038:	2c00      	cmp	r4, #0
 800903a:	f000 80c0 	beq.w	80091be <_dtoa_r+0x8de>
 800903e:	4629      	mov	r1, r5
 8009040:	4622      	mov	r2, r4
 8009042:	4648      	mov	r0, r9
 8009044:	f000 fcc8 	bl	80099d8 <__pow5mult>
 8009048:	9a02      	ldr	r2, [sp, #8]
 800904a:	4601      	mov	r1, r0
 800904c:	4605      	mov	r5, r0
 800904e:	4648      	mov	r0, r9
 8009050:	f000 fc20 	bl	8009894 <__multiply>
 8009054:	9902      	ldr	r1, [sp, #8]
 8009056:	4680      	mov	r8, r0
 8009058:	4648      	mov	r0, r9
 800905a:	f000 fb51 	bl	8009700 <_Bfree>
 800905e:	9b08      	ldr	r3, [sp, #32]
 8009060:	1b1b      	subs	r3, r3, r4
 8009062:	9308      	str	r3, [sp, #32]
 8009064:	f000 80b1 	beq.w	80091ca <_dtoa_r+0x8ea>
 8009068:	9a08      	ldr	r2, [sp, #32]
 800906a:	4641      	mov	r1, r8
 800906c:	4648      	mov	r0, r9
 800906e:	f000 fcb3 	bl	80099d8 <__pow5mult>
 8009072:	9002      	str	r0, [sp, #8]
 8009074:	2101      	movs	r1, #1
 8009076:	4648      	mov	r0, r9
 8009078:	f000 fbf6 	bl	8009868 <__i2b>
 800907c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800907e:	4604      	mov	r4, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 81d8 	beq.w	8009436 <_dtoa_r+0xb56>
 8009086:	461a      	mov	r2, r3
 8009088:	4601      	mov	r1, r0
 800908a:	4648      	mov	r0, r9
 800908c:	f000 fca4 	bl	80099d8 <__pow5mult>
 8009090:	9b07      	ldr	r3, [sp, #28]
 8009092:	2b01      	cmp	r3, #1
 8009094:	4604      	mov	r4, r0
 8009096:	f300 809f 	bgt.w	80091d8 <_dtoa_r+0x8f8>
 800909a:	9b04      	ldr	r3, [sp, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f040 8097 	bne.w	80091d0 <_dtoa_r+0x8f0>
 80090a2:	9b05      	ldr	r3, [sp, #20]
 80090a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f040 8093 	bne.w	80091d4 <_dtoa_r+0x8f4>
 80090ae:	9b05      	ldr	r3, [sp, #20]
 80090b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090b4:	0d1b      	lsrs	r3, r3, #20
 80090b6:	051b      	lsls	r3, r3, #20
 80090b8:	b133      	cbz	r3, 80090c8 <_dtoa_r+0x7e8>
 80090ba:	9b00      	ldr	r3, [sp, #0]
 80090bc:	3301      	adds	r3, #1
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	9b06      	ldr	r3, [sp, #24]
 80090c2:	3301      	adds	r3, #1
 80090c4:	9306      	str	r3, [sp, #24]
 80090c6:	2301      	movs	r3, #1
 80090c8:	9308      	str	r3, [sp, #32]
 80090ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 81b8 	beq.w	8009442 <_dtoa_r+0xb62>
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090d8:	6918      	ldr	r0, [r3, #16]
 80090da:	f000 fb79 	bl	80097d0 <__hi0bits>
 80090de:	f1c0 0020 	rsb	r0, r0, #32
 80090e2:	9b06      	ldr	r3, [sp, #24]
 80090e4:	4418      	add	r0, r3
 80090e6:	f010 001f 	ands.w	r0, r0, #31
 80090ea:	f000 8082 	beq.w	80091f2 <_dtoa_r+0x912>
 80090ee:	f1c0 0320 	rsb	r3, r0, #32
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	dd73      	ble.n	80091de <_dtoa_r+0x8fe>
 80090f6:	9b00      	ldr	r3, [sp, #0]
 80090f8:	f1c0 001c 	rsb	r0, r0, #28
 80090fc:	4403      	add	r3, r0
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	9b06      	ldr	r3, [sp, #24]
 8009102:	4403      	add	r3, r0
 8009104:	4406      	add	r6, r0
 8009106:	9306      	str	r3, [sp, #24]
 8009108:	9b00      	ldr	r3, [sp, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	dd05      	ble.n	800911a <_dtoa_r+0x83a>
 800910e:	9902      	ldr	r1, [sp, #8]
 8009110:	461a      	mov	r2, r3
 8009112:	4648      	mov	r0, r9
 8009114:	f000 fcba 	bl	8009a8c <__lshift>
 8009118:	9002      	str	r0, [sp, #8]
 800911a:	9b06      	ldr	r3, [sp, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	dd05      	ble.n	800912c <_dtoa_r+0x84c>
 8009120:	4621      	mov	r1, r4
 8009122:	461a      	mov	r2, r3
 8009124:	4648      	mov	r0, r9
 8009126:	f000 fcb1 	bl	8009a8c <__lshift>
 800912a:	4604      	mov	r4, r0
 800912c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800912e:	2b00      	cmp	r3, #0
 8009130:	d061      	beq.n	80091f6 <_dtoa_r+0x916>
 8009132:	9802      	ldr	r0, [sp, #8]
 8009134:	4621      	mov	r1, r4
 8009136:	f000 fd15 	bl	8009b64 <__mcmp>
 800913a:	2800      	cmp	r0, #0
 800913c:	da5b      	bge.n	80091f6 <_dtoa_r+0x916>
 800913e:	2300      	movs	r3, #0
 8009140:	9902      	ldr	r1, [sp, #8]
 8009142:	220a      	movs	r2, #10
 8009144:	4648      	mov	r0, r9
 8009146:	f000 fafd 	bl	8009744 <__multadd>
 800914a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914c:	9002      	str	r0, [sp, #8]
 800914e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 8177 	beq.w	8009446 <_dtoa_r+0xb66>
 8009158:	4629      	mov	r1, r5
 800915a:	2300      	movs	r3, #0
 800915c:	220a      	movs	r2, #10
 800915e:	4648      	mov	r0, r9
 8009160:	f000 faf0 	bl	8009744 <__multadd>
 8009164:	f1bb 0f00 	cmp.w	fp, #0
 8009168:	4605      	mov	r5, r0
 800916a:	dc6f      	bgt.n	800924c <_dtoa_r+0x96c>
 800916c:	9b07      	ldr	r3, [sp, #28]
 800916e:	2b02      	cmp	r3, #2
 8009170:	dc49      	bgt.n	8009206 <_dtoa_r+0x926>
 8009172:	e06b      	b.n	800924c <_dtoa_r+0x96c>
 8009174:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009176:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800917a:	e73c      	b.n	8008ff6 <_dtoa_r+0x716>
 800917c:	3fe00000 	.word	0x3fe00000
 8009180:	40240000 	.word	0x40240000
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	1e5c      	subs	r4, r3, #1
 8009188:	9b08      	ldr	r3, [sp, #32]
 800918a:	42a3      	cmp	r3, r4
 800918c:	db09      	blt.n	80091a2 <_dtoa_r+0x8c2>
 800918e:	1b1c      	subs	r4, r3, r4
 8009190:	9b03      	ldr	r3, [sp, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	f6bf af30 	bge.w	8008ff8 <_dtoa_r+0x718>
 8009198:	9b00      	ldr	r3, [sp, #0]
 800919a:	9a03      	ldr	r2, [sp, #12]
 800919c:	1a9e      	subs	r6, r3, r2
 800919e:	2300      	movs	r3, #0
 80091a0:	e72b      	b.n	8008ffa <_dtoa_r+0x71a>
 80091a2:	9b08      	ldr	r3, [sp, #32]
 80091a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80091a6:	9408      	str	r4, [sp, #32]
 80091a8:	1ae3      	subs	r3, r4, r3
 80091aa:	441a      	add	r2, r3
 80091ac:	9e00      	ldr	r6, [sp, #0]
 80091ae:	9b03      	ldr	r3, [sp, #12]
 80091b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80091b2:	2400      	movs	r4, #0
 80091b4:	e721      	b.n	8008ffa <_dtoa_r+0x71a>
 80091b6:	9c08      	ldr	r4, [sp, #32]
 80091b8:	9e00      	ldr	r6, [sp, #0]
 80091ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80091bc:	e728      	b.n	8009010 <_dtoa_r+0x730>
 80091be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80091c2:	e751      	b.n	8009068 <_dtoa_r+0x788>
 80091c4:	9a08      	ldr	r2, [sp, #32]
 80091c6:	9902      	ldr	r1, [sp, #8]
 80091c8:	e750      	b.n	800906c <_dtoa_r+0x78c>
 80091ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80091ce:	e751      	b.n	8009074 <_dtoa_r+0x794>
 80091d0:	2300      	movs	r3, #0
 80091d2:	e779      	b.n	80090c8 <_dtoa_r+0x7e8>
 80091d4:	9b04      	ldr	r3, [sp, #16]
 80091d6:	e777      	b.n	80090c8 <_dtoa_r+0x7e8>
 80091d8:	2300      	movs	r3, #0
 80091da:	9308      	str	r3, [sp, #32]
 80091dc:	e779      	b.n	80090d2 <_dtoa_r+0x7f2>
 80091de:	d093      	beq.n	8009108 <_dtoa_r+0x828>
 80091e0:	9a00      	ldr	r2, [sp, #0]
 80091e2:	331c      	adds	r3, #28
 80091e4:	441a      	add	r2, r3
 80091e6:	9200      	str	r2, [sp, #0]
 80091e8:	9a06      	ldr	r2, [sp, #24]
 80091ea:	441a      	add	r2, r3
 80091ec:	441e      	add	r6, r3
 80091ee:	9206      	str	r2, [sp, #24]
 80091f0:	e78a      	b.n	8009108 <_dtoa_r+0x828>
 80091f2:	4603      	mov	r3, r0
 80091f4:	e7f4      	b.n	80091e0 <_dtoa_r+0x900>
 80091f6:	9b03      	ldr	r3, [sp, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	46b8      	mov	r8, r7
 80091fc:	dc20      	bgt.n	8009240 <_dtoa_r+0x960>
 80091fe:	469b      	mov	fp, r3
 8009200:	9b07      	ldr	r3, [sp, #28]
 8009202:	2b02      	cmp	r3, #2
 8009204:	dd1e      	ble.n	8009244 <_dtoa_r+0x964>
 8009206:	f1bb 0f00 	cmp.w	fp, #0
 800920a:	f47f adb1 	bne.w	8008d70 <_dtoa_r+0x490>
 800920e:	4621      	mov	r1, r4
 8009210:	465b      	mov	r3, fp
 8009212:	2205      	movs	r2, #5
 8009214:	4648      	mov	r0, r9
 8009216:	f000 fa95 	bl	8009744 <__multadd>
 800921a:	4601      	mov	r1, r0
 800921c:	4604      	mov	r4, r0
 800921e:	9802      	ldr	r0, [sp, #8]
 8009220:	f000 fca0 	bl	8009b64 <__mcmp>
 8009224:	2800      	cmp	r0, #0
 8009226:	f77f ada3 	ble.w	8008d70 <_dtoa_r+0x490>
 800922a:	4656      	mov	r6, sl
 800922c:	2331      	movs	r3, #49	@ 0x31
 800922e:	f806 3b01 	strb.w	r3, [r6], #1
 8009232:	f108 0801 	add.w	r8, r8, #1
 8009236:	e59f      	b.n	8008d78 <_dtoa_r+0x498>
 8009238:	9c03      	ldr	r4, [sp, #12]
 800923a:	46b8      	mov	r8, r7
 800923c:	4625      	mov	r5, r4
 800923e:	e7f4      	b.n	800922a <_dtoa_r+0x94a>
 8009240:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 8101 	beq.w	800944e <_dtoa_r+0xb6e>
 800924c:	2e00      	cmp	r6, #0
 800924e:	dd05      	ble.n	800925c <_dtoa_r+0x97c>
 8009250:	4629      	mov	r1, r5
 8009252:	4632      	mov	r2, r6
 8009254:	4648      	mov	r0, r9
 8009256:	f000 fc19 	bl	8009a8c <__lshift>
 800925a:	4605      	mov	r5, r0
 800925c:	9b08      	ldr	r3, [sp, #32]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d05c      	beq.n	800931c <_dtoa_r+0xa3c>
 8009262:	6869      	ldr	r1, [r5, #4]
 8009264:	4648      	mov	r0, r9
 8009266:	f000 fa0b 	bl	8009680 <_Balloc>
 800926a:	4606      	mov	r6, r0
 800926c:	b928      	cbnz	r0, 800927a <_dtoa_r+0x99a>
 800926e:	4b82      	ldr	r3, [pc, #520]	@ (8009478 <_dtoa_r+0xb98>)
 8009270:	4602      	mov	r2, r0
 8009272:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009276:	f7ff bb4a 	b.w	800890e <_dtoa_r+0x2e>
 800927a:	692a      	ldr	r2, [r5, #16]
 800927c:	3202      	adds	r2, #2
 800927e:	0092      	lsls	r2, r2, #2
 8009280:	f105 010c 	add.w	r1, r5, #12
 8009284:	300c      	adds	r0, #12
 8009286:	f000 ffa3 	bl	800a1d0 <memcpy>
 800928a:	2201      	movs	r2, #1
 800928c:	4631      	mov	r1, r6
 800928e:	4648      	mov	r0, r9
 8009290:	f000 fbfc 	bl	8009a8c <__lshift>
 8009294:	f10a 0301 	add.w	r3, sl, #1
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	eb0a 030b 	add.w	r3, sl, fp
 800929e:	9308      	str	r3, [sp, #32]
 80092a0:	9b04      	ldr	r3, [sp, #16]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	462f      	mov	r7, r5
 80092a8:	9306      	str	r3, [sp, #24]
 80092aa:	4605      	mov	r5, r0
 80092ac:	9b00      	ldr	r3, [sp, #0]
 80092ae:	9802      	ldr	r0, [sp, #8]
 80092b0:	4621      	mov	r1, r4
 80092b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80092b6:	f7ff fa8a 	bl	80087ce <quorem>
 80092ba:	4603      	mov	r3, r0
 80092bc:	3330      	adds	r3, #48	@ 0x30
 80092be:	9003      	str	r0, [sp, #12]
 80092c0:	4639      	mov	r1, r7
 80092c2:	9802      	ldr	r0, [sp, #8]
 80092c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092c6:	f000 fc4d 	bl	8009b64 <__mcmp>
 80092ca:	462a      	mov	r2, r5
 80092cc:	9004      	str	r0, [sp, #16]
 80092ce:	4621      	mov	r1, r4
 80092d0:	4648      	mov	r0, r9
 80092d2:	f000 fc63 	bl	8009b9c <__mdiff>
 80092d6:	68c2      	ldr	r2, [r0, #12]
 80092d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092da:	4606      	mov	r6, r0
 80092dc:	bb02      	cbnz	r2, 8009320 <_dtoa_r+0xa40>
 80092de:	4601      	mov	r1, r0
 80092e0:	9802      	ldr	r0, [sp, #8]
 80092e2:	f000 fc3f 	bl	8009b64 <__mcmp>
 80092e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e8:	4602      	mov	r2, r0
 80092ea:	4631      	mov	r1, r6
 80092ec:	4648      	mov	r0, r9
 80092ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80092f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80092f2:	f000 fa05 	bl	8009700 <_Bfree>
 80092f6:	9b07      	ldr	r3, [sp, #28]
 80092f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80092fa:	9e00      	ldr	r6, [sp, #0]
 80092fc:	ea42 0103 	orr.w	r1, r2, r3
 8009300:	9b06      	ldr	r3, [sp, #24]
 8009302:	4319      	orrs	r1, r3
 8009304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009306:	d10d      	bne.n	8009324 <_dtoa_r+0xa44>
 8009308:	2b39      	cmp	r3, #57	@ 0x39
 800930a:	d027      	beq.n	800935c <_dtoa_r+0xa7c>
 800930c:	9a04      	ldr	r2, [sp, #16]
 800930e:	2a00      	cmp	r2, #0
 8009310:	dd01      	ble.n	8009316 <_dtoa_r+0xa36>
 8009312:	9b03      	ldr	r3, [sp, #12]
 8009314:	3331      	adds	r3, #49	@ 0x31
 8009316:	f88b 3000 	strb.w	r3, [fp]
 800931a:	e52e      	b.n	8008d7a <_dtoa_r+0x49a>
 800931c:	4628      	mov	r0, r5
 800931e:	e7b9      	b.n	8009294 <_dtoa_r+0x9b4>
 8009320:	2201      	movs	r2, #1
 8009322:	e7e2      	b.n	80092ea <_dtoa_r+0xa0a>
 8009324:	9904      	ldr	r1, [sp, #16]
 8009326:	2900      	cmp	r1, #0
 8009328:	db04      	blt.n	8009334 <_dtoa_r+0xa54>
 800932a:	9807      	ldr	r0, [sp, #28]
 800932c:	4301      	orrs	r1, r0
 800932e:	9806      	ldr	r0, [sp, #24]
 8009330:	4301      	orrs	r1, r0
 8009332:	d120      	bne.n	8009376 <_dtoa_r+0xa96>
 8009334:	2a00      	cmp	r2, #0
 8009336:	ddee      	ble.n	8009316 <_dtoa_r+0xa36>
 8009338:	9902      	ldr	r1, [sp, #8]
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	2201      	movs	r2, #1
 800933e:	4648      	mov	r0, r9
 8009340:	f000 fba4 	bl	8009a8c <__lshift>
 8009344:	4621      	mov	r1, r4
 8009346:	9002      	str	r0, [sp, #8]
 8009348:	f000 fc0c 	bl	8009b64 <__mcmp>
 800934c:	2800      	cmp	r0, #0
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	dc02      	bgt.n	8009358 <_dtoa_r+0xa78>
 8009352:	d1e0      	bne.n	8009316 <_dtoa_r+0xa36>
 8009354:	07da      	lsls	r2, r3, #31
 8009356:	d5de      	bpl.n	8009316 <_dtoa_r+0xa36>
 8009358:	2b39      	cmp	r3, #57	@ 0x39
 800935a:	d1da      	bne.n	8009312 <_dtoa_r+0xa32>
 800935c:	2339      	movs	r3, #57	@ 0x39
 800935e:	f88b 3000 	strb.w	r3, [fp]
 8009362:	4633      	mov	r3, r6
 8009364:	461e      	mov	r6, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800936c:	2a39      	cmp	r2, #57	@ 0x39
 800936e:	d04e      	beq.n	800940e <_dtoa_r+0xb2e>
 8009370:	3201      	adds	r2, #1
 8009372:	701a      	strb	r2, [r3, #0]
 8009374:	e501      	b.n	8008d7a <_dtoa_r+0x49a>
 8009376:	2a00      	cmp	r2, #0
 8009378:	dd03      	ble.n	8009382 <_dtoa_r+0xaa2>
 800937a:	2b39      	cmp	r3, #57	@ 0x39
 800937c:	d0ee      	beq.n	800935c <_dtoa_r+0xa7c>
 800937e:	3301      	adds	r3, #1
 8009380:	e7c9      	b.n	8009316 <_dtoa_r+0xa36>
 8009382:	9a00      	ldr	r2, [sp, #0]
 8009384:	9908      	ldr	r1, [sp, #32]
 8009386:	f802 3c01 	strb.w	r3, [r2, #-1]
 800938a:	428a      	cmp	r2, r1
 800938c:	d028      	beq.n	80093e0 <_dtoa_r+0xb00>
 800938e:	9902      	ldr	r1, [sp, #8]
 8009390:	2300      	movs	r3, #0
 8009392:	220a      	movs	r2, #10
 8009394:	4648      	mov	r0, r9
 8009396:	f000 f9d5 	bl	8009744 <__multadd>
 800939a:	42af      	cmp	r7, r5
 800939c:	9002      	str	r0, [sp, #8]
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	f04f 020a 	mov.w	r2, #10
 80093a6:	4639      	mov	r1, r7
 80093a8:	4648      	mov	r0, r9
 80093aa:	d107      	bne.n	80093bc <_dtoa_r+0xadc>
 80093ac:	f000 f9ca 	bl	8009744 <__multadd>
 80093b0:	4607      	mov	r7, r0
 80093b2:	4605      	mov	r5, r0
 80093b4:	9b00      	ldr	r3, [sp, #0]
 80093b6:	3301      	adds	r3, #1
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	e777      	b.n	80092ac <_dtoa_r+0x9cc>
 80093bc:	f000 f9c2 	bl	8009744 <__multadd>
 80093c0:	4629      	mov	r1, r5
 80093c2:	4607      	mov	r7, r0
 80093c4:	2300      	movs	r3, #0
 80093c6:	220a      	movs	r2, #10
 80093c8:	4648      	mov	r0, r9
 80093ca:	f000 f9bb 	bl	8009744 <__multadd>
 80093ce:	4605      	mov	r5, r0
 80093d0:	e7f0      	b.n	80093b4 <_dtoa_r+0xad4>
 80093d2:	f1bb 0f00 	cmp.w	fp, #0
 80093d6:	bfcc      	ite	gt
 80093d8:	465e      	movgt	r6, fp
 80093da:	2601      	movle	r6, #1
 80093dc:	4456      	add	r6, sl
 80093de:	2700      	movs	r7, #0
 80093e0:	9902      	ldr	r1, [sp, #8]
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	2201      	movs	r2, #1
 80093e6:	4648      	mov	r0, r9
 80093e8:	f000 fb50 	bl	8009a8c <__lshift>
 80093ec:	4621      	mov	r1, r4
 80093ee:	9002      	str	r0, [sp, #8]
 80093f0:	f000 fbb8 	bl	8009b64 <__mcmp>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	dcb4      	bgt.n	8009362 <_dtoa_r+0xa82>
 80093f8:	d102      	bne.n	8009400 <_dtoa_r+0xb20>
 80093fa:	9b00      	ldr	r3, [sp, #0]
 80093fc:	07db      	lsls	r3, r3, #31
 80093fe:	d4b0      	bmi.n	8009362 <_dtoa_r+0xa82>
 8009400:	4633      	mov	r3, r6
 8009402:	461e      	mov	r6, r3
 8009404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009408:	2a30      	cmp	r2, #48	@ 0x30
 800940a:	d0fa      	beq.n	8009402 <_dtoa_r+0xb22>
 800940c:	e4b5      	b.n	8008d7a <_dtoa_r+0x49a>
 800940e:	459a      	cmp	sl, r3
 8009410:	d1a8      	bne.n	8009364 <_dtoa_r+0xa84>
 8009412:	2331      	movs	r3, #49	@ 0x31
 8009414:	f108 0801 	add.w	r8, r8, #1
 8009418:	f88a 3000 	strb.w	r3, [sl]
 800941c:	e4ad      	b.n	8008d7a <_dtoa_r+0x49a>
 800941e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009420:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800947c <_dtoa_r+0xb9c>
 8009424:	b11b      	cbz	r3, 800942e <_dtoa_r+0xb4e>
 8009426:	f10a 0308 	add.w	r3, sl, #8
 800942a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	4650      	mov	r0, sl
 8009430:	b017      	add	sp, #92	@ 0x5c
 8009432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009436:	9b07      	ldr	r3, [sp, #28]
 8009438:	2b01      	cmp	r3, #1
 800943a:	f77f ae2e 	ble.w	800909a <_dtoa_r+0x7ba>
 800943e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009440:	9308      	str	r3, [sp, #32]
 8009442:	2001      	movs	r0, #1
 8009444:	e64d      	b.n	80090e2 <_dtoa_r+0x802>
 8009446:	f1bb 0f00 	cmp.w	fp, #0
 800944a:	f77f aed9 	ble.w	8009200 <_dtoa_r+0x920>
 800944e:	4656      	mov	r6, sl
 8009450:	9802      	ldr	r0, [sp, #8]
 8009452:	4621      	mov	r1, r4
 8009454:	f7ff f9bb 	bl	80087ce <quorem>
 8009458:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800945c:	f806 3b01 	strb.w	r3, [r6], #1
 8009460:	eba6 020a 	sub.w	r2, r6, sl
 8009464:	4593      	cmp	fp, r2
 8009466:	ddb4      	ble.n	80093d2 <_dtoa_r+0xaf2>
 8009468:	9902      	ldr	r1, [sp, #8]
 800946a:	2300      	movs	r3, #0
 800946c:	220a      	movs	r2, #10
 800946e:	4648      	mov	r0, r9
 8009470:	f000 f968 	bl	8009744 <__multadd>
 8009474:	9002      	str	r0, [sp, #8]
 8009476:	e7eb      	b.n	8009450 <_dtoa_r+0xb70>
 8009478:	0800c01c 	.word	0x0800c01c
 800947c:	0800bfa0 	.word	0x0800bfa0

08009480 <_free_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4605      	mov	r5, r0
 8009484:	2900      	cmp	r1, #0
 8009486:	d041      	beq.n	800950c <_free_r+0x8c>
 8009488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948c:	1f0c      	subs	r4, r1, #4
 800948e:	2b00      	cmp	r3, #0
 8009490:	bfb8      	it	lt
 8009492:	18e4      	addlt	r4, r4, r3
 8009494:	f000 f8e8 	bl	8009668 <__malloc_lock>
 8009498:	4a1d      	ldr	r2, [pc, #116]	@ (8009510 <_free_r+0x90>)
 800949a:	6813      	ldr	r3, [r2, #0]
 800949c:	b933      	cbnz	r3, 80094ac <_free_r+0x2c>
 800949e:	6063      	str	r3, [r4, #4]
 80094a0:	6014      	str	r4, [r2, #0]
 80094a2:	4628      	mov	r0, r5
 80094a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094a8:	f000 b8e4 	b.w	8009674 <__malloc_unlock>
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	d908      	bls.n	80094c2 <_free_r+0x42>
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	1821      	adds	r1, r4, r0
 80094b4:	428b      	cmp	r3, r1
 80094b6:	bf01      	itttt	eq
 80094b8:	6819      	ldreq	r1, [r3, #0]
 80094ba:	685b      	ldreq	r3, [r3, #4]
 80094bc:	1809      	addeq	r1, r1, r0
 80094be:	6021      	streq	r1, [r4, #0]
 80094c0:	e7ed      	b.n	800949e <_free_r+0x1e>
 80094c2:	461a      	mov	r2, r3
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	b10b      	cbz	r3, 80094cc <_free_r+0x4c>
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	d9fa      	bls.n	80094c2 <_free_r+0x42>
 80094cc:	6811      	ldr	r1, [r2, #0]
 80094ce:	1850      	adds	r0, r2, r1
 80094d0:	42a0      	cmp	r0, r4
 80094d2:	d10b      	bne.n	80094ec <_free_r+0x6c>
 80094d4:	6820      	ldr	r0, [r4, #0]
 80094d6:	4401      	add	r1, r0
 80094d8:	1850      	adds	r0, r2, r1
 80094da:	4283      	cmp	r3, r0
 80094dc:	6011      	str	r1, [r2, #0]
 80094de:	d1e0      	bne.n	80094a2 <_free_r+0x22>
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	6053      	str	r3, [r2, #4]
 80094e6:	4408      	add	r0, r1
 80094e8:	6010      	str	r0, [r2, #0]
 80094ea:	e7da      	b.n	80094a2 <_free_r+0x22>
 80094ec:	d902      	bls.n	80094f4 <_free_r+0x74>
 80094ee:	230c      	movs	r3, #12
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	e7d6      	b.n	80094a2 <_free_r+0x22>
 80094f4:	6820      	ldr	r0, [r4, #0]
 80094f6:	1821      	adds	r1, r4, r0
 80094f8:	428b      	cmp	r3, r1
 80094fa:	bf04      	itt	eq
 80094fc:	6819      	ldreq	r1, [r3, #0]
 80094fe:	685b      	ldreq	r3, [r3, #4]
 8009500:	6063      	str	r3, [r4, #4]
 8009502:	bf04      	itt	eq
 8009504:	1809      	addeq	r1, r1, r0
 8009506:	6021      	streq	r1, [r4, #0]
 8009508:	6054      	str	r4, [r2, #4]
 800950a:	e7ca      	b.n	80094a2 <_free_r+0x22>
 800950c:	bd38      	pop	{r3, r4, r5, pc}
 800950e:	bf00      	nop
 8009510:	200016b4 	.word	0x200016b4

08009514 <malloc>:
 8009514:	4b02      	ldr	r3, [pc, #8]	@ (8009520 <malloc+0xc>)
 8009516:	4601      	mov	r1, r0
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	f000 b825 	b.w	8009568 <_malloc_r>
 800951e:	bf00      	nop
 8009520:	2000004c 	.word	0x2000004c

08009524 <sbrk_aligned>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	4e0f      	ldr	r6, [pc, #60]	@ (8009564 <sbrk_aligned+0x40>)
 8009528:	460c      	mov	r4, r1
 800952a:	6831      	ldr	r1, [r6, #0]
 800952c:	4605      	mov	r5, r0
 800952e:	b911      	cbnz	r1, 8009536 <sbrk_aligned+0x12>
 8009530:	f000 fe3e 	bl	800a1b0 <_sbrk_r>
 8009534:	6030      	str	r0, [r6, #0]
 8009536:	4621      	mov	r1, r4
 8009538:	4628      	mov	r0, r5
 800953a:	f000 fe39 	bl	800a1b0 <_sbrk_r>
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	d103      	bne.n	800954a <sbrk_aligned+0x26>
 8009542:	f04f 34ff 	mov.w	r4, #4294967295
 8009546:	4620      	mov	r0, r4
 8009548:	bd70      	pop	{r4, r5, r6, pc}
 800954a:	1cc4      	adds	r4, r0, #3
 800954c:	f024 0403 	bic.w	r4, r4, #3
 8009550:	42a0      	cmp	r0, r4
 8009552:	d0f8      	beq.n	8009546 <sbrk_aligned+0x22>
 8009554:	1a21      	subs	r1, r4, r0
 8009556:	4628      	mov	r0, r5
 8009558:	f000 fe2a 	bl	800a1b0 <_sbrk_r>
 800955c:	3001      	adds	r0, #1
 800955e:	d1f2      	bne.n	8009546 <sbrk_aligned+0x22>
 8009560:	e7ef      	b.n	8009542 <sbrk_aligned+0x1e>
 8009562:	bf00      	nop
 8009564:	200016b0 	.word	0x200016b0

08009568 <_malloc_r>:
 8009568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800956c:	1ccd      	adds	r5, r1, #3
 800956e:	f025 0503 	bic.w	r5, r5, #3
 8009572:	3508      	adds	r5, #8
 8009574:	2d0c      	cmp	r5, #12
 8009576:	bf38      	it	cc
 8009578:	250c      	movcc	r5, #12
 800957a:	2d00      	cmp	r5, #0
 800957c:	4606      	mov	r6, r0
 800957e:	db01      	blt.n	8009584 <_malloc_r+0x1c>
 8009580:	42a9      	cmp	r1, r5
 8009582:	d904      	bls.n	800958e <_malloc_r+0x26>
 8009584:	230c      	movs	r3, #12
 8009586:	6033      	str	r3, [r6, #0]
 8009588:	2000      	movs	r0, #0
 800958a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009664 <_malloc_r+0xfc>
 8009592:	f000 f869 	bl	8009668 <__malloc_lock>
 8009596:	f8d8 3000 	ldr.w	r3, [r8]
 800959a:	461c      	mov	r4, r3
 800959c:	bb44      	cbnz	r4, 80095f0 <_malloc_r+0x88>
 800959e:	4629      	mov	r1, r5
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7ff ffbf 	bl	8009524 <sbrk_aligned>
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	4604      	mov	r4, r0
 80095aa:	d158      	bne.n	800965e <_malloc_r+0xf6>
 80095ac:	f8d8 4000 	ldr.w	r4, [r8]
 80095b0:	4627      	mov	r7, r4
 80095b2:	2f00      	cmp	r7, #0
 80095b4:	d143      	bne.n	800963e <_malloc_r+0xd6>
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	d04b      	beq.n	8009652 <_malloc_r+0xea>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	4639      	mov	r1, r7
 80095be:	4630      	mov	r0, r6
 80095c0:	eb04 0903 	add.w	r9, r4, r3
 80095c4:	f000 fdf4 	bl	800a1b0 <_sbrk_r>
 80095c8:	4581      	cmp	r9, r0
 80095ca:	d142      	bne.n	8009652 <_malloc_r+0xea>
 80095cc:	6821      	ldr	r1, [r4, #0]
 80095ce:	1a6d      	subs	r5, r5, r1
 80095d0:	4629      	mov	r1, r5
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ffa6 	bl	8009524 <sbrk_aligned>
 80095d8:	3001      	adds	r0, #1
 80095da:	d03a      	beq.n	8009652 <_malloc_r+0xea>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	442b      	add	r3, r5
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	f8d8 3000 	ldr.w	r3, [r8]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	bb62      	cbnz	r2, 8009644 <_malloc_r+0xdc>
 80095ea:	f8c8 7000 	str.w	r7, [r8]
 80095ee:	e00f      	b.n	8009610 <_malloc_r+0xa8>
 80095f0:	6822      	ldr	r2, [r4, #0]
 80095f2:	1b52      	subs	r2, r2, r5
 80095f4:	d420      	bmi.n	8009638 <_malloc_r+0xd0>
 80095f6:	2a0b      	cmp	r2, #11
 80095f8:	d917      	bls.n	800962a <_malloc_r+0xc2>
 80095fa:	1961      	adds	r1, r4, r5
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	6025      	str	r5, [r4, #0]
 8009600:	bf18      	it	ne
 8009602:	6059      	strne	r1, [r3, #4]
 8009604:	6863      	ldr	r3, [r4, #4]
 8009606:	bf08      	it	eq
 8009608:	f8c8 1000 	streq.w	r1, [r8]
 800960c:	5162      	str	r2, [r4, r5]
 800960e:	604b      	str	r3, [r1, #4]
 8009610:	4630      	mov	r0, r6
 8009612:	f000 f82f 	bl	8009674 <__malloc_unlock>
 8009616:	f104 000b 	add.w	r0, r4, #11
 800961a:	1d23      	adds	r3, r4, #4
 800961c:	f020 0007 	bic.w	r0, r0, #7
 8009620:	1ac2      	subs	r2, r0, r3
 8009622:	bf1c      	itt	ne
 8009624:	1a1b      	subne	r3, r3, r0
 8009626:	50a3      	strne	r3, [r4, r2]
 8009628:	e7af      	b.n	800958a <_malloc_r+0x22>
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	42a3      	cmp	r3, r4
 800962e:	bf0c      	ite	eq
 8009630:	f8c8 2000 	streq.w	r2, [r8]
 8009634:	605a      	strne	r2, [r3, #4]
 8009636:	e7eb      	b.n	8009610 <_malloc_r+0xa8>
 8009638:	4623      	mov	r3, r4
 800963a:	6864      	ldr	r4, [r4, #4]
 800963c:	e7ae      	b.n	800959c <_malloc_r+0x34>
 800963e:	463c      	mov	r4, r7
 8009640:	687f      	ldr	r7, [r7, #4]
 8009642:	e7b6      	b.n	80095b2 <_malloc_r+0x4a>
 8009644:	461a      	mov	r2, r3
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	42a3      	cmp	r3, r4
 800964a:	d1fb      	bne.n	8009644 <_malloc_r+0xdc>
 800964c:	2300      	movs	r3, #0
 800964e:	6053      	str	r3, [r2, #4]
 8009650:	e7de      	b.n	8009610 <_malloc_r+0xa8>
 8009652:	230c      	movs	r3, #12
 8009654:	6033      	str	r3, [r6, #0]
 8009656:	4630      	mov	r0, r6
 8009658:	f000 f80c 	bl	8009674 <__malloc_unlock>
 800965c:	e794      	b.n	8009588 <_malloc_r+0x20>
 800965e:	6005      	str	r5, [r0, #0]
 8009660:	e7d6      	b.n	8009610 <_malloc_r+0xa8>
 8009662:	bf00      	nop
 8009664:	200016b4 	.word	0x200016b4

08009668 <__malloc_lock>:
 8009668:	4801      	ldr	r0, [pc, #4]	@ (8009670 <__malloc_lock+0x8>)
 800966a:	f7ff b8ae 	b.w	80087ca <__retarget_lock_acquire_recursive>
 800966e:	bf00      	nop
 8009670:	200016ac 	.word	0x200016ac

08009674 <__malloc_unlock>:
 8009674:	4801      	ldr	r0, [pc, #4]	@ (800967c <__malloc_unlock+0x8>)
 8009676:	f7ff b8a9 	b.w	80087cc <__retarget_lock_release_recursive>
 800967a:	bf00      	nop
 800967c:	200016ac 	.word	0x200016ac

08009680 <_Balloc>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	69c6      	ldr	r6, [r0, #28]
 8009684:	4604      	mov	r4, r0
 8009686:	460d      	mov	r5, r1
 8009688:	b976      	cbnz	r6, 80096a8 <_Balloc+0x28>
 800968a:	2010      	movs	r0, #16
 800968c:	f7ff ff42 	bl	8009514 <malloc>
 8009690:	4602      	mov	r2, r0
 8009692:	61e0      	str	r0, [r4, #28]
 8009694:	b920      	cbnz	r0, 80096a0 <_Balloc+0x20>
 8009696:	4b18      	ldr	r3, [pc, #96]	@ (80096f8 <_Balloc+0x78>)
 8009698:	4818      	ldr	r0, [pc, #96]	@ (80096fc <_Balloc+0x7c>)
 800969a:	216b      	movs	r1, #107	@ 0x6b
 800969c:	f000 fda6 	bl	800a1ec <__assert_func>
 80096a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a4:	6006      	str	r6, [r0, #0]
 80096a6:	60c6      	str	r6, [r0, #12]
 80096a8:	69e6      	ldr	r6, [r4, #28]
 80096aa:	68f3      	ldr	r3, [r6, #12]
 80096ac:	b183      	cbz	r3, 80096d0 <_Balloc+0x50>
 80096ae:	69e3      	ldr	r3, [r4, #28]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096b6:	b9b8      	cbnz	r0, 80096e8 <_Balloc+0x68>
 80096b8:	2101      	movs	r1, #1
 80096ba:	fa01 f605 	lsl.w	r6, r1, r5
 80096be:	1d72      	adds	r2, r6, #5
 80096c0:	0092      	lsls	r2, r2, #2
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 fdb0 	bl	800a228 <_calloc_r>
 80096c8:	b160      	cbz	r0, 80096e4 <_Balloc+0x64>
 80096ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096ce:	e00e      	b.n	80096ee <_Balloc+0x6e>
 80096d0:	2221      	movs	r2, #33	@ 0x21
 80096d2:	2104      	movs	r1, #4
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fda7 	bl	800a228 <_calloc_r>
 80096da:	69e3      	ldr	r3, [r4, #28]
 80096dc:	60f0      	str	r0, [r6, #12]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e4      	bne.n	80096ae <_Balloc+0x2e>
 80096e4:	2000      	movs	r0, #0
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	6802      	ldr	r2, [r0, #0]
 80096ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096ee:	2300      	movs	r3, #0
 80096f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096f4:	e7f7      	b.n	80096e6 <_Balloc+0x66>
 80096f6:	bf00      	nop
 80096f8:	0800bfad 	.word	0x0800bfad
 80096fc:	0800c02d 	.word	0x0800c02d

08009700 <_Bfree>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	69c6      	ldr	r6, [r0, #28]
 8009704:	4605      	mov	r5, r0
 8009706:	460c      	mov	r4, r1
 8009708:	b976      	cbnz	r6, 8009728 <_Bfree+0x28>
 800970a:	2010      	movs	r0, #16
 800970c:	f7ff ff02 	bl	8009514 <malloc>
 8009710:	4602      	mov	r2, r0
 8009712:	61e8      	str	r0, [r5, #28]
 8009714:	b920      	cbnz	r0, 8009720 <_Bfree+0x20>
 8009716:	4b09      	ldr	r3, [pc, #36]	@ (800973c <_Bfree+0x3c>)
 8009718:	4809      	ldr	r0, [pc, #36]	@ (8009740 <_Bfree+0x40>)
 800971a:	218f      	movs	r1, #143	@ 0x8f
 800971c:	f000 fd66 	bl	800a1ec <__assert_func>
 8009720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009724:	6006      	str	r6, [r0, #0]
 8009726:	60c6      	str	r6, [r0, #12]
 8009728:	b13c      	cbz	r4, 800973a <_Bfree+0x3a>
 800972a:	69eb      	ldr	r3, [r5, #28]
 800972c:	6862      	ldr	r2, [r4, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009734:	6021      	str	r1, [r4, #0]
 8009736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	0800bfad 	.word	0x0800bfad
 8009740:	0800c02d 	.word	0x0800c02d

08009744 <__multadd>:
 8009744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009748:	690d      	ldr	r5, [r1, #16]
 800974a:	4607      	mov	r7, r0
 800974c:	460c      	mov	r4, r1
 800974e:	461e      	mov	r6, r3
 8009750:	f101 0c14 	add.w	ip, r1, #20
 8009754:	2000      	movs	r0, #0
 8009756:	f8dc 3000 	ldr.w	r3, [ip]
 800975a:	b299      	uxth	r1, r3
 800975c:	fb02 6101 	mla	r1, r2, r1, r6
 8009760:	0c1e      	lsrs	r6, r3, #16
 8009762:	0c0b      	lsrs	r3, r1, #16
 8009764:	fb02 3306 	mla	r3, r2, r6, r3
 8009768:	b289      	uxth	r1, r1
 800976a:	3001      	adds	r0, #1
 800976c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009770:	4285      	cmp	r5, r0
 8009772:	f84c 1b04 	str.w	r1, [ip], #4
 8009776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800977a:	dcec      	bgt.n	8009756 <__multadd+0x12>
 800977c:	b30e      	cbz	r6, 80097c2 <__multadd+0x7e>
 800977e:	68a3      	ldr	r3, [r4, #8]
 8009780:	42ab      	cmp	r3, r5
 8009782:	dc19      	bgt.n	80097b8 <__multadd+0x74>
 8009784:	6861      	ldr	r1, [r4, #4]
 8009786:	4638      	mov	r0, r7
 8009788:	3101      	adds	r1, #1
 800978a:	f7ff ff79 	bl	8009680 <_Balloc>
 800978e:	4680      	mov	r8, r0
 8009790:	b928      	cbnz	r0, 800979e <__multadd+0x5a>
 8009792:	4602      	mov	r2, r0
 8009794:	4b0c      	ldr	r3, [pc, #48]	@ (80097c8 <__multadd+0x84>)
 8009796:	480d      	ldr	r0, [pc, #52]	@ (80097cc <__multadd+0x88>)
 8009798:	21ba      	movs	r1, #186	@ 0xba
 800979a:	f000 fd27 	bl	800a1ec <__assert_func>
 800979e:	6922      	ldr	r2, [r4, #16]
 80097a0:	3202      	adds	r2, #2
 80097a2:	f104 010c 	add.w	r1, r4, #12
 80097a6:	0092      	lsls	r2, r2, #2
 80097a8:	300c      	adds	r0, #12
 80097aa:	f000 fd11 	bl	800a1d0 <memcpy>
 80097ae:	4621      	mov	r1, r4
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff ffa5 	bl	8009700 <_Bfree>
 80097b6:	4644      	mov	r4, r8
 80097b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097bc:	3501      	adds	r5, #1
 80097be:	615e      	str	r6, [r3, #20]
 80097c0:	6125      	str	r5, [r4, #16]
 80097c2:	4620      	mov	r0, r4
 80097c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c8:	0800c01c 	.word	0x0800c01c
 80097cc:	0800c02d 	.word	0x0800c02d

080097d0 <__hi0bits>:
 80097d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097d4:	4603      	mov	r3, r0
 80097d6:	bf36      	itet	cc
 80097d8:	0403      	lslcc	r3, r0, #16
 80097da:	2000      	movcs	r0, #0
 80097dc:	2010      	movcc	r0, #16
 80097de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097e2:	bf3c      	itt	cc
 80097e4:	021b      	lslcc	r3, r3, #8
 80097e6:	3008      	addcc	r0, #8
 80097e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ec:	bf3c      	itt	cc
 80097ee:	011b      	lslcc	r3, r3, #4
 80097f0:	3004      	addcc	r0, #4
 80097f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f6:	bf3c      	itt	cc
 80097f8:	009b      	lslcc	r3, r3, #2
 80097fa:	3002      	addcc	r0, #2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	db05      	blt.n	800980c <__hi0bits+0x3c>
 8009800:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009804:	f100 0001 	add.w	r0, r0, #1
 8009808:	bf08      	it	eq
 800980a:	2020      	moveq	r0, #32
 800980c:	4770      	bx	lr

0800980e <__lo0bits>:
 800980e:	6803      	ldr	r3, [r0, #0]
 8009810:	4602      	mov	r2, r0
 8009812:	f013 0007 	ands.w	r0, r3, #7
 8009816:	d00b      	beq.n	8009830 <__lo0bits+0x22>
 8009818:	07d9      	lsls	r1, r3, #31
 800981a:	d421      	bmi.n	8009860 <__lo0bits+0x52>
 800981c:	0798      	lsls	r0, r3, #30
 800981e:	bf49      	itett	mi
 8009820:	085b      	lsrmi	r3, r3, #1
 8009822:	089b      	lsrpl	r3, r3, #2
 8009824:	2001      	movmi	r0, #1
 8009826:	6013      	strmi	r3, [r2, #0]
 8009828:	bf5c      	itt	pl
 800982a:	6013      	strpl	r3, [r2, #0]
 800982c:	2002      	movpl	r0, #2
 800982e:	4770      	bx	lr
 8009830:	b299      	uxth	r1, r3
 8009832:	b909      	cbnz	r1, 8009838 <__lo0bits+0x2a>
 8009834:	0c1b      	lsrs	r3, r3, #16
 8009836:	2010      	movs	r0, #16
 8009838:	b2d9      	uxtb	r1, r3
 800983a:	b909      	cbnz	r1, 8009840 <__lo0bits+0x32>
 800983c:	3008      	adds	r0, #8
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	0719      	lsls	r1, r3, #28
 8009842:	bf04      	itt	eq
 8009844:	091b      	lsreq	r3, r3, #4
 8009846:	3004      	addeq	r0, #4
 8009848:	0799      	lsls	r1, r3, #30
 800984a:	bf04      	itt	eq
 800984c:	089b      	lsreq	r3, r3, #2
 800984e:	3002      	addeq	r0, #2
 8009850:	07d9      	lsls	r1, r3, #31
 8009852:	d403      	bmi.n	800985c <__lo0bits+0x4e>
 8009854:	085b      	lsrs	r3, r3, #1
 8009856:	f100 0001 	add.w	r0, r0, #1
 800985a:	d003      	beq.n	8009864 <__lo0bits+0x56>
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	4770      	bx	lr
 8009860:	2000      	movs	r0, #0
 8009862:	4770      	bx	lr
 8009864:	2020      	movs	r0, #32
 8009866:	4770      	bx	lr

08009868 <__i2b>:
 8009868:	b510      	push	{r4, lr}
 800986a:	460c      	mov	r4, r1
 800986c:	2101      	movs	r1, #1
 800986e:	f7ff ff07 	bl	8009680 <_Balloc>
 8009872:	4602      	mov	r2, r0
 8009874:	b928      	cbnz	r0, 8009882 <__i2b+0x1a>
 8009876:	4b05      	ldr	r3, [pc, #20]	@ (800988c <__i2b+0x24>)
 8009878:	4805      	ldr	r0, [pc, #20]	@ (8009890 <__i2b+0x28>)
 800987a:	f240 1145 	movw	r1, #325	@ 0x145
 800987e:	f000 fcb5 	bl	800a1ec <__assert_func>
 8009882:	2301      	movs	r3, #1
 8009884:	6144      	str	r4, [r0, #20]
 8009886:	6103      	str	r3, [r0, #16]
 8009888:	bd10      	pop	{r4, pc}
 800988a:	bf00      	nop
 800988c:	0800c01c 	.word	0x0800c01c
 8009890:	0800c02d 	.word	0x0800c02d

08009894 <__multiply>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	4617      	mov	r7, r2
 800989a:	690a      	ldr	r2, [r1, #16]
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	429a      	cmp	r2, r3
 80098a0:	bfa8      	it	ge
 80098a2:	463b      	movge	r3, r7
 80098a4:	4689      	mov	r9, r1
 80098a6:	bfa4      	itt	ge
 80098a8:	460f      	movge	r7, r1
 80098aa:	4699      	movge	r9, r3
 80098ac:	693d      	ldr	r5, [r7, #16]
 80098ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	eb05 060a 	add.w	r6, r5, sl
 80098ba:	42b3      	cmp	r3, r6
 80098bc:	b085      	sub	sp, #20
 80098be:	bfb8      	it	lt
 80098c0:	3101      	addlt	r1, #1
 80098c2:	f7ff fedd 	bl	8009680 <_Balloc>
 80098c6:	b930      	cbnz	r0, 80098d6 <__multiply+0x42>
 80098c8:	4602      	mov	r2, r0
 80098ca:	4b41      	ldr	r3, [pc, #260]	@ (80099d0 <__multiply+0x13c>)
 80098cc:	4841      	ldr	r0, [pc, #260]	@ (80099d4 <__multiply+0x140>)
 80098ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098d2:	f000 fc8b 	bl	800a1ec <__assert_func>
 80098d6:	f100 0414 	add.w	r4, r0, #20
 80098da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80098de:	4623      	mov	r3, r4
 80098e0:	2200      	movs	r2, #0
 80098e2:	4573      	cmp	r3, lr
 80098e4:	d320      	bcc.n	8009928 <__multiply+0x94>
 80098e6:	f107 0814 	add.w	r8, r7, #20
 80098ea:	f109 0114 	add.w	r1, r9, #20
 80098ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80098f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80098f6:	9302      	str	r3, [sp, #8]
 80098f8:	1beb      	subs	r3, r5, r7
 80098fa:	3b15      	subs	r3, #21
 80098fc:	f023 0303 	bic.w	r3, r3, #3
 8009900:	3304      	adds	r3, #4
 8009902:	3715      	adds	r7, #21
 8009904:	42bd      	cmp	r5, r7
 8009906:	bf38      	it	cc
 8009908:	2304      	movcc	r3, #4
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	9b02      	ldr	r3, [sp, #8]
 800990e:	9103      	str	r1, [sp, #12]
 8009910:	428b      	cmp	r3, r1
 8009912:	d80c      	bhi.n	800992e <__multiply+0x9a>
 8009914:	2e00      	cmp	r6, #0
 8009916:	dd03      	ble.n	8009920 <__multiply+0x8c>
 8009918:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800991c:	2b00      	cmp	r3, #0
 800991e:	d055      	beq.n	80099cc <__multiply+0x138>
 8009920:	6106      	str	r6, [r0, #16]
 8009922:	b005      	add	sp, #20
 8009924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009928:	f843 2b04 	str.w	r2, [r3], #4
 800992c:	e7d9      	b.n	80098e2 <__multiply+0x4e>
 800992e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009932:	f1ba 0f00 	cmp.w	sl, #0
 8009936:	d01f      	beq.n	8009978 <__multiply+0xe4>
 8009938:	46c4      	mov	ip, r8
 800993a:	46a1      	mov	r9, r4
 800993c:	2700      	movs	r7, #0
 800993e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009942:	f8d9 3000 	ldr.w	r3, [r9]
 8009946:	fa1f fb82 	uxth.w	fp, r2
 800994a:	b29b      	uxth	r3, r3
 800994c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009950:	443b      	add	r3, r7
 8009952:	f8d9 7000 	ldr.w	r7, [r9]
 8009956:	0c12      	lsrs	r2, r2, #16
 8009958:	0c3f      	lsrs	r7, r7, #16
 800995a:	fb0a 7202 	mla	r2, sl, r2, r7
 800995e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009962:	b29b      	uxth	r3, r3
 8009964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009968:	4565      	cmp	r5, ip
 800996a:	f849 3b04 	str.w	r3, [r9], #4
 800996e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009972:	d8e4      	bhi.n	800993e <__multiply+0xaa>
 8009974:	9b01      	ldr	r3, [sp, #4]
 8009976:	50e7      	str	r7, [r4, r3]
 8009978:	9b03      	ldr	r3, [sp, #12]
 800997a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800997e:	3104      	adds	r1, #4
 8009980:	f1b9 0f00 	cmp.w	r9, #0
 8009984:	d020      	beq.n	80099c8 <__multiply+0x134>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	4647      	mov	r7, r8
 800998a:	46a4      	mov	ip, r4
 800998c:	f04f 0a00 	mov.w	sl, #0
 8009990:	f8b7 b000 	ldrh.w	fp, [r7]
 8009994:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009998:	fb09 220b 	mla	r2, r9, fp, r2
 800999c:	4452      	add	r2, sl
 800999e:	b29b      	uxth	r3, r3
 80099a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099a4:	f84c 3b04 	str.w	r3, [ip], #4
 80099a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80099ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80099b4:	fb09 330a 	mla	r3, r9, sl, r3
 80099b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80099bc:	42bd      	cmp	r5, r7
 80099be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099c2:	d8e5      	bhi.n	8009990 <__multiply+0xfc>
 80099c4:	9a01      	ldr	r2, [sp, #4]
 80099c6:	50a3      	str	r3, [r4, r2]
 80099c8:	3404      	adds	r4, #4
 80099ca:	e79f      	b.n	800990c <__multiply+0x78>
 80099cc:	3e01      	subs	r6, #1
 80099ce:	e7a1      	b.n	8009914 <__multiply+0x80>
 80099d0:	0800c01c 	.word	0x0800c01c
 80099d4:	0800c02d 	.word	0x0800c02d

080099d8 <__pow5mult>:
 80099d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099dc:	4615      	mov	r5, r2
 80099de:	f012 0203 	ands.w	r2, r2, #3
 80099e2:	4607      	mov	r7, r0
 80099e4:	460e      	mov	r6, r1
 80099e6:	d007      	beq.n	80099f8 <__pow5mult+0x20>
 80099e8:	4c25      	ldr	r4, [pc, #148]	@ (8009a80 <__pow5mult+0xa8>)
 80099ea:	3a01      	subs	r2, #1
 80099ec:	2300      	movs	r3, #0
 80099ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099f2:	f7ff fea7 	bl	8009744 <__multadd>
 80099f6:	4606      	mov	r6, r0
 80099f8:	10ad      	asrs	r5, r5, #2
 80099fa:	d03d      	beq.n	8009a78 <__pow5mult+0xa0>
 80099fc:	69fc      	ldr	r4, [r7, #28]
 80099fe:	b97c      	cbnz	r4, 8009a20 <__pow5mult+0x48>
 8009a00:	2010      	movs	r0, #16
 8009a02:	f7ff fd87 	bl	8009514 <malloc>
 8009a06:	4602      	mov	r2, r0
 8009a08:	61f8      	str	r0, [r7, #28]
 8009a0a:	b928      	cbnz	r0, 8009a18 <__pow5mult+0x40>
 8009a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8009a84 <__pow5mult+0xac>)
 8009a0e:	481e      	ldr	r0, [pc, #120]	@ (8009a88 <__pow5mult+0xb0>)
 8009a10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a14:	f000 fbea 	bl	800a1ec <__assert_func>
 8009a18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a1c:	6004      	str	r4, [r0, #0]
 8009a1e:	60c4      	str	r4, [r0, #12]
 8009a20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a28:	b94c      	cbnz	r4, 8009a3e <__pow5mult+0x66>
 8009a2a:	f240 2171 	movw	r1, #625	@ 0x271
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f7ff ff1a 	bl	8009868 <__i2b>
 8009a34:	2300      	movs	r3, #0
 8009a36:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	6003      	str	r3, [r0, #0]
 8009a3e:	f04f 0900 	mov.w	r9, #0
 8009a42:	07eb      	lsls	r3, r5, #31
 8009a44:	d50a      	bpl.n	8009a5c <__pow5mult+0x84>
 8009a46:	4631      	mov	r1, r6
 8009a48:	4622      	mov	r2, r4
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	f7ff ff22 	bl	8009894 <__multiply>
 8009a50:	4631      	mov	r1, r6
 8009a52:	4680      	mov	r8, r0
 8009a54:	4638      	mov	r0, r7
 8009a56:	f7ff fe53 	bl	8009700 <_Bfree>
 8009a5a:	4646      	mov	r6, r8
 8009a5c:	106d      	asrs	r5, r5, #1
 8009a5e:	d00b      	beq.n	8009a78 <__pow5mult+0xa0>
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	b938      	cbnz	r0, 8009a74 <__pow5mult+0x9c>
 8009a64:	4622      	mov	r2, r4
 8009a66:	4621      	mov	r1, r4
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7ff ff13 	bl	8009894 <__multiply>
 8009a6e:	6020      	str	r0, [r4, #0]
 8009a70:	f8c0 9000 	str.w	r9, [r0]
 8009a74:	4604      	mov	r4, r0
 8009a76:	e7e4      	b.n	8009a42 <__pow5mult+0x6a>
 8009a78:	4630      	mov	r0, r6
 8009a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a7e:	bf00      	nop
 8009a80:	0800c0e0 	.word	0x0800c0e0
 8009a84:	0800bfad 	.word	0x0800bfad
 8009a88:	0800c02d 	.word	0x0800c02d

08009a8c <__lshift>:
 8009a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a90:	460c      	mov	r4, r1
 8009a92:	6849      	ldr	r1, [r1, #4]
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a9a:	68a3      	ldr	r3, [r4, #8]
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	4691      	mov	r9, r2
 8009aa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009aa4:	f108 0601 	add.w	r6, r8, #1
 8009aa8:	42b3      	cmp	r3, r6
 8009aaa:	db0b      	blt.n	8009ac4 <__lshift+0x38>
 8009aac:	4638      	mov	r0, r7
 8009aae:	f7ff fde7 	bl	8009680 <_Balloc>
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	b948      	cbnz	r0, 8009aca <__lshift+0x3e>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	4b28      	ldr	r3, [pc, #160]	@ (8009b5c <__lshift+0xd0>)
 8009aba:	4829      	ldr	r0, [pc, #164]	@ (8009b60 <__lshift+0xd4>)
 8009abc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ac0:	f000 fb94 	bl	800a1ec <__assert_func>
 8009ac4:	3101      	adds	r1, #1
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	e7ee      	b.n	8009aa8 <__lshift+0x1c>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f100 0114 	add.w	r1, r0, #20
 8009ad0:	f100 0210 	add.w	r2, r0, #16
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	4553      	cmp	r3, sl
 8009ad8:	db33      	blt.n	8009b42 <__lshift+0xb6>
 8009ada:	6920      	ldr	r0, [r4, #16]
 8009adc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ae0:	f104 0314 	add.w	r3, r4, #20
 8009ae4:	f019 091f 	ands.w	r9, r9, #31
 8009ae8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009aec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009af0:	d02b      	beq.n	8009b4a <__lshift+0xbe>
 8009af2:	f1c9 0e20 	rsb	lr, r9, #32
 8009af6:	468a      	mov	sl, r1
 8009af8:	2200      	movs	r2, #0
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	fa00 f009 	lsl.w	r0, r0, r9
 8009b00:	4310      	orrs	r0, r2
 8009b02:	f84a 0b04 	str.w	r0, [sl], #4
 8009b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0a:	459c      	cmp	ip, r3
 8009b0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b10:	d8f3      	bhi.n	8009afa <__lshift+0x6e>
 8009b12:	ebac 0304 	sub.w	r3, ip, r4
 8009b16:	3b15      	subs	r3, #21
 8009b18:	f023 0303 	bic.w	r3, r3, #3
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	f104 0015 	add.w	r0, r4, #21
 8009b22:	4560      	cmp	r0, ip
 8009b24:	bf88      	it	hi
 8009b26:	2304      	movhi	r3, #4
 8009b28:	50ca      	str	r2, [r1, r3]
 8009b2a:	b10a      	cbz	r2, 8009b30 <__lshift+0xa4>
 8009b2c:	f108 0602 	add.w	r6, r8, #2
 8009b30:	3e01      	subs	r6, #1
 8009b32:	4638      	mov	r0, r7
 8009b34:	612e      	str	r6, [r5, #16]
 8009b36:	4621      	mov	r1, r4
 8009b38:	f7ff fde2 	bl	8009700 <_Bfree>
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b42:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b46:	3301      	adds	r3, #1
 8009b48:	e7c5      	b.n	8009ad6 <__lshift+0x4a>
 8009b4a:	3904      	subs	r1, #4
 8009b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b50:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b54:	459c      	cmp	ip, r3
 8009b56:	d8f9      	bhi.n	8009b4c <__lshift+0xc0>
 8009b58:	e7ea      	b.n	8009b30 <__lshift+0xa4>
 8009b5a:	bf00      	nop
 8009b5c:	0800c01c 	.word	0x0800c01c
 8009b60:	0800c02d 	.word	0x0800c02d

08009b64 <__mcmp>:
 8009b64:	690a      	ldr	r2, [r1, #16]
 8009b66:	4603      	mov	r3, r0
 8009b68:	6900      	ldr	r0, [r0, #16]
 8009b6a:	1a80      	subs	r0, r0, r2
 8009b6c:	b530      	push	{r4, r5, lr}
 8009b6e:	d10e      	bne.n	8009b8e <__mcmp+0x2a>
 8009b70:	3314      	adds	r3, #20
 8009b72:	3114      	adds	r1, #20
 8009b74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b84:	4295      	cmp	r5, r2
 8009b86:	d003      	beq.n	8009b90 <__mcmp+0x2c>
 8009b88:	d205      	bcs.n	8009b96 <__mcmp+0x32>
 8009b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8e:	bd30      	pop	{r4, r5, pc}
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	d3f3      	bcc.n	8009b7c <__mcmp+0x18>
 8009b94:	e7fb      	b.n	8009b8e <__mcmp+0x2a>
 8009b96:	2001      	movs	r0, #1
 8009b98:	e7f9      	b.n	8009b8e <__mcmp+0x2a>
	...

08009b9c <__mdiff>:
 8009b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	4689      	mov	r9, r1
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4648      	mov	r0, r9
 8009ba8:	4614      	mov	r4, r2
 8009baa:	f7ff ffdb 	bl	8009b64 <__mcmp>
 8009bae:	1e05      	subs	r5, r0, #0
 8009bb0:	d112      	bne.n	8009bd8 <__mdiff+0x3c>
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7ff fd63 	bl	8009680 <_Balloc>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	b928      	cbnz	r0, 8009bca <__mdiff+0x2e>
 8009bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8009cbc <__mdiff+0x120>)
 8009bc0:	f240 2137 	movw	r1, #567	@ 0x237
 8009bc4:	483e      	ldr	r0, [pc, #248]	@ (8009cc0 <__mdiff+0x124>)
 8009bc6:	f000 fb11 	bl	800a1ec <__assert_func>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	b003      	add	sp, #12
 8009bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd8:	bfbc      	itt	lt
 8009bda:	464b      	movlt	r3, r9
 8009bdc:	46a1      	movlt	r9, r4
 8009bde:	4630      	mov	r0, r6
 8009be0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009be4:	bfba      	itte	lt
 8009be6:	461c      	movlt	r4, r3
 8009be8:	2501      	movlt	r5, #1
 8009bea:	2500      	movge	r5, #0
 8009bec:	f7ff fd48 	bl	8009680 <_Balloc>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	b918      	cbnz	r0, 8009bfc <__mdiff+0x60>
 8009bf4:	4b31      	ldr	r3, [pc, #196]	@ (8009cbc <__mdiff+0x120>)
 8009bf6:	f240 2145 	movw	r1, #581	@ 0x245
 8009bfa:	e7e3      	b.n	8009bc4 <__mdiff+0x28>
 8009bfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c00:	6926      	ldr	r6, [r4, #16]
 8009c02:	60c5      	str	r5, [r0, #12]
 8009c04:	f109 0310 	add.w	r3, r9, #16
 8009c08:	f109 0514 	add.w	r5, r9, #20
 8009c0c:	f104 0e14 	add.w	lr, r4, #20
 8009c10:	f100 0b14 	add.w	fp, r0, #20
 8009c14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	46d9      	mov	r9, fp
 8009c20:	f04f 0c00 	mov.w	ip, #0
 8009c24:	9b01      	ldr	r3, [sp, #4]
 8009c26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	fa1f f38a 	uxth.w	r3, sl
 8009c34:	4619      	mov	r1, r3
 8009c36:	b283      	uxth	r3, r0
 8009c38:	1acb      	subs	r3, r1, r3
 8009c3a:	0c00      	lsrs	r0, r0, #16
 8009c3c:	4463      	add	r3, ip
 8009c3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c4c:	4576      	cmp	r6, lr
 8009c4e:	f849 3b04 	str.w	r3, [r9], #4
 8009c52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c56:	d8e5      	bhi.n	8009c24 <__mdiff+0x88>
 8009c58:	1b33      	subs	r3, r6, r4
 8009c5a:	3b15      	subs	r3, #21
 8009c5c:	f023 0303 	bic.w	r3, r3, #3
 8009c60:	3415      	adds	r4, #21
 8009c62:	3304      	adds	r3, #4
 8009c64:	42a6      	cmp	r6, r4
 8009c66:	bf38      	it	cc
 8009c68:	2304      	movcc	r3, #4
 8009c6a:	441d      	add	r5, r3
 8009c6c:	445b      	add	r3, fp
 8009c6e:	461e      	mov	r6, r3
 8009c70:	462c      	mov	r4, r5
 8009c72:	4544      	cmp	r4, r8
 8009c74:	d30e      	bcc.n	8009c94 <__mdiff+0xf8>
 8009c76:	f108 0103 	add.w	r1, r8, #3
 8009c7a:	1b49      	subs	r1, r1, r5
 8009c7c:	f021 0103 	bic.w	r1, r1, #3
 8009c80:	3d03      	subs	r5, #3
 8009c82:	45a8      	cmp	r8, r5
 8009c84:	bf38      	it	cc
 8009c86:	2100      	movcc	r1, #0
 8009c88:	440b      	add	r3, r1
 8009c8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c8e:	b191      	cbz	r1, 8009cb6 <__mdiff+0x11a>
 8009c90:	6117      	str	r7, [r2, #16]
 8009c92:	e79d      	b.n	8009bd0 <__mdiff+0x34>
 8009c94:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c98:	46e6      	mov	lr, ip
 8009c9a:	0c08      	lsrs	r0, r1, #16
 8009c9c:	fa1c fc81 	uxtah	ip, ip, r1
 8009ca0:	4471      	add	r1, lr
 8009ca2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ca6:	b289      	uxth	r1, r1
 8009ca8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009cac:	f846 1b04 	str.w	r1, [r6], #4
 8009cb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cb4:	e7dd      	b.n	8009c72 <__mdiff+0xd6>
 8009cb6:	3f01      	subs	r7, #1
 8009cb8:	e7e7      	b.n	8009c8a <__mdiff+0xee>
 8009cba:	bf00      	nop
 8009cbc:	0800c01c 	.word	0x0800c01c
 8009cc0:	0800c02d 	.word	0x0800c02d

08009cc4 <__d2b>:
 8009cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cc8:	460f      	mov	r7, r1
 8009cca:	2101      	movs	r1, #1
 8009ccc:	ec59 8b10 	vmov	r8, r9, d0
 8009cd0:	4616      	mov	r6, r2
 8009cd2:	f7ff fcd5 	bl	8009680 <_Balloc>
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	b930      	cbnz	r0, 8009ce8 <__d2b+0x24>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	4b23      	ldr	r3, [pc, #140]	@ (8009d6c <__d2b+0xa8>)
 8009cde:	4824      	ldr	r0, [pc, #144]	@ (8009d70 <__d2b+0xac>)
 8009ce0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ce4:	f000 fa82 	bl	800a1ec <__assert_func>
 8009ce8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cf0:	b10d      	cbz	r5, 8009cf6 <__d2b+0x32>
 8009cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	f1b8 0300 	subs.w	r3, r8, #0
 8009cfc:	d023      	beq.n	8009d46 <__d2b+0x82>
 8009cfe:	4668      	mov	r0, sp
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	f7ff fd84 	bl	800980e <__lo0bits>
 8009d06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d0a:	b1d0      	cbz	r0, 8009d42 <__d2b+0x7e>
 8009d0c:	f1c0 0320 	rsb	r3, r0, #32
 8009d10:	fa02 f303 	lsl.w	r3, r2, r3
 8009d14:	430b      	orrs	r3, r1
 8009d16:	40c2      	lsrs	r2, r0
 8009d18:	6163      	str	r3, [r4, #20]
 8009d1a:	9201      	str	r2, [sp, #4]
 8009d1c:	9b01      	ldr	r3, [sp, #4]
 8009d1e:	61a3      	str	r3, [r4, #24]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	bf0c      	ite	eq
 8009d24:	2201      	moveq	r2, #1
 8009d26:	2202      	movne	r2, #2
 8009d28:	6122      	str	r2, [r4, #16]
 8009d2a:	b1a5      	cbz	r5, 8009d56 <__d2b+0x92>
 8009d2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d30:	4405      	add	r5, r0
 8009d32:	603d      	str	r5, [r7, #0]
 8009d34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d38:	6030      	str	r0, [r6, #0]
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	b003      	add	sp, #12
 8009d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d42:	6161      	str	r1, [r4, #20]
 8009d44:	e7ea      	b.n	8009d1c <__d2b+0x58>
 8009d46:	a801      	add	r0, sp, #4
 8009d48:	f7ff fd61 	bl	800980e <__lo0bits>
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	6163      	str	r3, [r4, #20]
 8009d50:	3020      	adds	r0, #32
 8009d52:	2201      	movs	r2, #1
 8009d54:	e7e8      	b.n	8009d28 <__d2b+0x64>
 8009d56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d5e:	6038      	str	r0, [r7, #0]
 8009d60:	6918      	ldr	r0, [r3, #16]
 8009d62:	f7ff fd35 	bl	80097d0 <__hi0bits>
 8009d66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d6a:	e7e5      	b.n	8009d38 <__d2b+0x74>
 8009d6c:	0800c01c 	.word	0x0800c01c
 8009d70:	0800c02d 	.word	0x0800c02d

08009d74 <__ssputs_r>:
 8009d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d78:	688e      	ldr	r6, [r1, #8]
 8009d7a:	461f      	mov	r7, r3
 8009d7c:	42be      	cmp	r6, r7
 8009d7e:	680b      	ldr	r3, [r1, #0]
 8009d80:	4682      	mov	sl, r0
 8009d82:	460c      	mov	r4, r1
 8009d84:	4690      	mov	r8, r2
 8009d86:	d82d      	bhi.n	8009de4 <__ssputs_r+0x70>
 8009d88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d90:	d026      	beq.n	8009de0 <__ssputs_r+0x6c>
 8009d92:	6965      	ldr	r5, [r4, #20]
 8009d94:	6909      	ldr	r1, [r1, #16]
 8009d96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d9a:	eba3 0901 	sub.w	r9, r3, r1
 8009d9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009da2:	1c7b      	adds	r3, r7, #1
 8009da4:	444b      	add	r3, r9
 8009da6:	106d      	asrs	r5, r5, #1
 8009da8:	429d      	cmp	r5, r3
 8009daa:	bf38      	it	cc
 8009dac:	461d      	movcc	r5, r3
 8009dae:	0553      	lsls	r3, r2, #21
 8009db0:	d527      	bpl.n	8009e02 <__ssputs_r+0x8e>
 8009db2:	4629      	mov	r1, r5
 8009db4:	f7ff fbd8 	bl	8009568 <_malloc_r>
 8009db8:	4606      	mov	r6, r0
 8009dba:	b360      	cbz	r0, 8009e16 <__ssputs_r+0xa2>
 8009dbc:	6921      	ldr	r1, [r4, #16]
 8009dbe:	464a      	mov	r2, r9
 8009dc0:	f000 fa06 	bl	800a1d0 <memcpy>
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dce:	81a3      	strh	r3, [r4, #12]
 8009dd0:	6126      	str	r6, [r4, #16]
 8009dd2:	6165      	str	r5, [r4, #20]
 8009dd4:	444e      	add	r6, r9
 8009dd6:	eba5 0509 	sub.w	r5, r5, r9
 8009dda:	6026      	str	r6, [r4, #0]
 8009ddc:	60a5      	str	r5, [r4, #8]
 8009dde:	463e      	mov	r6, r7
 8009de0:	42be      	cmp	r6, r7
 8009de2:	d900      	bls.n	8009de6 <__ssputs_r+0x72>
 8009de4:	463e      	mov	r6, r7
 8009de6:	6820      	ldr	r0, [r4, #0]
 8009de8:	4632      	mov	r2, r6
 8009dea:	4641      	mov	r1, r8
 8009dec:	f000 f9c6 	bl	800a17c <memmove>
 8009df0:	68a3      	ldr	r3, [r4, #8]
 8009df2:	1b9b      	subs	r3, r3, r6
 8009df4:	60a3      	str	r3, [r4, #8]
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	4433      	add	r3, r6
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e02:	462a      	mov	r2, r5
 8009e04:	f000 fa36 	bl	800a274 <_realloc_r>
 8009e08:	4606      	mov	r6, r0
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d1e0      	bne.n	8009dd0 <__ssputs_r+0x5c>
 8009e0e:	6921      	ldr	r1, [r4, #16]
 8009e10:	4650      	mov	r0, sl
 8009e12:	f7ff fb35 	bl	8009480 <_free_r>
 8009e16:	230c      	movs	r3, #12
 8009e18:	f8ca 3000 	str.w	r3, [sl]
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295
 8009e28:	e7e9      	b.n	8009dfe <__ssputs_r+0x8a>
	...

08009e2c <_svfiprintf_r>:
 8009e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	4698      	mov	r8, r3
 8009e32:	898b      	ldrh	r3, [r1, #12]
 8009e34:	061b      	lsls	r3, r3, #24
 8009e36:	b09d      	sub	sp, #116	@ 0x74
 8009e38:	4607      	mov	r7, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	4614      	mov	r4, r2
 8009e3e:	d510      	bpl.n	8009e62 <_svfiprintf_r+0x36>
 8009e40:	690b      	ldr	r3, [r1, #16]
 8009e42:	b973      	cbnz	r3, 8009e62 <_svfiprintf_r+0x36>
 8009e44:	2140      	movs	r1, #64	@ 0x40
 8009e46:	f7ff fb8f 	bl	8009568 <_malloc_r>
 8009e4a:	6028      	str	r0, [r5, #0]
 8009e4c:	6128      	str	r0, [r5, #16]
 8009e4e:	b930      	cbnz	r0, 8009e5e <_svfiprintf_r+0x32>
 8009e50:	230c      	movs	r3, #12
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	b01d      	add	sp, #116	@ 0x74
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5e:	2340      	movs	r3, #64	@ 0x40
 8009e60:	616b      	str	r3, [r5, #20]
 8009e62:	2300      	movs	r3, #0
 8009e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e66:	2320      	movs	r3, #32
 8009e68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e70:	2330      	movs	r3, #48	@ 0x30
 8009e72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a010 <_svfiprintf_r+0x1e4>
 8009e76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e7a:	f04f 0901 	mov.w	r9, #1
 8009e7e:	4623      	mov	r3, r4
 8009e80:	469a      	mov	sl, r3
 8009e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e86:	b10a      	cbz	r2, 8009e8c <_svfiprintf_r+0x60>
 8009e88:	2a25      	cmp	r2, #37	@ 0x25
 8009e8a:	d1f9      	bne.n	8009e80 <_svfiprintf_r+0x54>
 8009e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e90:	d00b      	beq.n	8009eaa <_svfiprintf_r+0x7e>
 8009e92:	465b      	mov	r3, fp
 8009e94:	4622      	mov	r2, r4
 8009e96:	4629      	mov	r1, r5
 8009e98:	4638      	mov	r0, r7
 8009e9a:	f7ff ff6b 	bl	8009d74 <__ssputs_r>
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	f000 80a7 	beq.w	8009ff2 <_svfiprintf_r+0x1c6>
 8009ea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ea6:	445a      	add	r2, fp
 8009ea8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 809f 	beq.w	8009ff2 <_svfiprintf_r+0x1c6>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ebe:	f10a 0a01 	add.w	sl, sl, #1
 8009ec2:	9304      	str	r3, [sp, #16]
 8009ec4:	9307      	str	r3, [sp, #28]
 8009ec6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009eca:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ecc:	4654      	mov	r4, sl
 8009ece:	2205      	movs	r2, #5
 8009ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed4:	484e      	ldr	r0, [pc, #312]	@ (800a010 <_svfiprintf_r+0x1e4>)
 8009ed6:	f7f6 f983 	bl	80001e0 <memchr>
 8009eda:	9a04      	ldr	r2, [sp, #16]
 8009edc:	b9d8      	cbnz	r0, 8009f16 <_svfiprintf_r+0xea>
 8009ede:	06d0      	lsls	r0, r2, #27
 8009ee0:	bf44      	itt	mi
 8009ee2:	2320      	movmi	r3, #32
 8009ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ee8:	0711      	lsls	r1, r2, #28
 8009eea:	bf44      	itt	mi
 8009eec:	232b      	movmi	r3, #43	@ 0x2b
 8009eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ef8:	d015      	beq.n	8009f26 <_svfiprintf_r+0xfa>
 8009efa:	9a07      	ldr	r2, [sp, #28]
 8009efc:	4654      	mov	r4, sl
 8009efe:	2000      	movs	r0, #0
 8009f00:	f04f 0c0a 	mov.w	ip, #10
 8009f04:	4621      	mov	r1, r4
 8009f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f0a:	3b30      	subs	r3, #48	@ 0x30
 8009f0c:	2b09      	cmp	r3, #9
 8009f0e:	d94b      	bls.n	8009fa8 <_svfiprintf_r+0x17c>
 8009f10:	b1b0      	cbz	r0, 8009f40 <_svfiprintf_r+0x114>
 8009f12:	9207      	str	r2, [sp, #28]
 8009f14:	e014      	b.n	8009f40 <_svfiprintf_r+0x114>
 8009f16:	eba0 0308 	sub.w	r3, r0, r8
 8009f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	46a2      	mov	sl, r4
 8009f24:	e7d2      	b.n	8009ecc <_svfiprintf_r+0xa0>
 8009f26:	9b03      	ldr	r3, [sp, #12]
 8009f28:	1d19      	adds	r1, r3, #4
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	9103      	str	r1, [sp, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	bfbb      	ittet	lt
 8009f32:	425b      	neglt	r3, r3
 8009f34:	f042 0202 	orrlt.w	r2, r2, #2
 8009f38:	9307      	strge	r3, [sp, #28]
 8009f3a:	9307      	strlt	r3, [sp, #28]
 8009f3c:	bfb8      	it	lt
 8009f3e:	9204      	strlt	r2, [sp, #16]
 8009f40:	7823      	ldrb	r3, [r4, #0]
 8009f42:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f44:	d10a      	bne.n	8009f5c <_svfiprintf_r+0x130>
 8009f46:	7863      	ldrb	r3, [r4, #1]
 8009f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f4a:	d132      	bne.n	8009fb2 <_svfiprintf_r+0x186>
 8009f4c:	9b03      	ldr	r3, [sp, #12]
 8009f4e:	1d1a      	adds	r2, r3, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	9203      	str	r2, [sp, #12]
 8009f54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f58:	3402      	adds	r4, #2
 8009f5a:	9305      	str	r3, [sp, #20]
 8009f5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a020 <_svfiprintf_r+0x1f4>
 8009f60:	7821      	ldrb	r1, [r4, #0]
 8009f62:	2203      	movs	r2, #3
 8009f64:	4650      	mov	r0, sl
 8009f66:	f7f6 f93b 	bl	80001e0 <memchr>
 8009f6a:	b138      	cbz	r0, 8009f7c <_svfiprintf_r+0x150>
 8009f6c:	9b04      	ldr	r3, [sp, #16]
 8009f6e:	eba0 000a 	sub.w	r0, r0, sl
 8009f72:	2240      	movs	r2, #64	@ 0x40
 8009f74:	4082      	lsls	r2, r0
 8009f76:	4313      	orrs	r3, r2
 8009f78:	3401      	adds	r4, #1
 8009f7a:	9304      	str	r3, [sp, #16]
 8009f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f80:	4824      	ldr	r0, [pc, #144]	@ (800a014 <_svfiprintf_r+0x1e8>)
 8009f82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f86:	2206      	movs	r2, #6
 8009f88:	f7f6 f92a 	bl	80001e0 <memchr>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d036      	beq.n	8009ffe <_svfiprintf_r+0x1d2>
 8009f90:	4b21      	ldr	r3, [pc, #132]	@ (800a018 <_svfiprintf_r+0x1ec>)
 8009f92:	bb1b      	cbnz	r3, 8009fdc <_svfiprintf_r+0x1b0>
 8009f94:	9b03      	ldr	r3, [sp, #12]
 8009f96:	3307      	adds	r3, #7
 8009f98:	f023 0307 	bic.w	r3, r3, #7
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	9303      	str	r3, [sp, #12]
 8009fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa2:	4433      	add	r3, r6
 8009fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fa6:	e76a      	b.n	8009e7e <_svfiprintf_r+0x52>
 8009fa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fac:	460c      	mov	r4, r1
 8009fae:	2001      	movs	r0, #1
 8009fb0:	e7a8      	b.n	8009f04 <_svfiprintf_r+0xd8>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	3401      	adds	r4, #1
 8009fb6:	9305      	str	r3, [sp, #20]
 8009fb8:	4619      	mov	r1, r3
 8009fba:	f04f 0c0a 	mov.w	ip, #10
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fc4:	3a30      	subs	r2, #48	@ 0x30
 8009fc6:	2a09      	cmp	r2, #9
 8009fc8:	d903      	bls.n	8009fd2 <_svfiprintf_r+0x1a6>
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0c6      	beq.n	8009f5c <_svfiprintf_r+0x130>
 8009fce:	9105      	str	r1, [sp, #20]
 8009fd0:	e7c4      	b.n	8009f5c <_svfiprintf_r+0x130>
 8009fd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e7f0      	b.n	8009fbe <_svfiprintf_r+0x192>
 8009fdc:	ab03      	add	r3, sp, #12
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	462a      	mov	r2, r5
 8009fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800a01c <_svfiprintf_r+0x1f0>)
 8009fe4:	a904      	add	r1, sp, #16
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	f7fd fe7a 	bl	8007ce0 <_printf_float>
 8009fec:	1c42      	adds	r2, r0, #1
 8009fee:	4606      	mov	r6, r0
 8009ff0:	d1d6      	bne.n	8009fa0 <_svfiprintf_r+0x174>
 8009ff2:	89ab      	ldrh	r3, [r5, #12]
 8009ff4:	065b      	lsls	r3, r3, #25
 8009ff6:	f53f af2d 	bmi.w	8009e54 <_svfiprintf_r+0x28>
 8009ffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ffc:	e72c      	b.n	8009e58 <_svfiprintf_r+0x2c>
 8009ffe:	ab03      	add	r3, sp, #12
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	462a      	mov	r2, r5
 800a004:	4b05      	ldr	r3, [pc, #20]	@ (800a01c <_svfiprintf_r+0x1f0>)
 800a006:	a904      	add	r1, sp, #16
 800a008:	4638      	mov	r0, r7
 800a00a:	f7fe f901 	bl	8008210 <_printf_i>
 800a00e:	e7ed      	b.n	8009fec <_svfiprintf_r+0x1c0>
 800a010:	0800c086 	.word	0x0800c086
 800a014:	0800c090 	.word	0x0800c090
 800a018:	08007ce1 	.word	0x08007ce1
 800a01c:	08009d75 	.word	0x08009d75
 800a020:	0800c08c 	.word	0x0800c08c

0800a024 <__sflush_r>:
 800a024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02c:	0716      	lsls	r6, r2, #28
 800a02e:	4605      	mov	r5, r0
 800a030:	460c      	mov	r4, r1
 800a032:	d454      	bmi.n	800a0de <__sflush_r+0xba>
 800a034:	684b      	ldr	r3, [r1, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	dc02      	bgt.n	800a040 <__sflush_r+0x1c>
 800a03a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	dd48      	ble.n	800a0d2 <__sflush_r+0xae>
 800a040:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a042:	2e00      	cmp	r6, #0
 800a044:	d045      	beq.n	800a0d2 <__sflush_r+0xae>
 800a046:	2300      	movs	r3, #0
 800a048:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a04c:	682f      	ldr	r7, [r5, #0]
 800a04e:	6a21      	ldr	r1, [r4, #32]
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	d030      	beq.n	800a0b6 <__sflush_r+0x92>
 800a054:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a056:	89a3      	ldrh	r3, [r4, #12]
 800a058:	0759      	lsls	r1, r3, #29
 800a05a:	d505      	bpl.n	800a068 <__sflush_r+0x44>
 800a05c:	6863      	ldr	r3, [r4, #4]
 800a05e:	1ad2      	subs	r2, r2, r3
 800a060:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a062:	b10b      	cbz	r3, 800a068 <__sflush_r+0x44>
 800a064:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a066:	1ad2      	subs	r2, r2, r3
 800a068:	2300      	movs	r3, #0
 800a06a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a06c:	6a21      	ldr	r1, [r4, #32]
 800a06e:	4628      	mov	r0, r5
 800a070:	47b0      	blx	r6
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	d106      	bne.n	800a086 <__sflush_r+0x62>
 800a078:	6829      	ldr	r1, [r5, #0]
 800a07a:	291d      	cmp	r1, #29
 800a07c:	d82b      	bhi.n	800a0d6 <__sflush_r+0xb2>
 800a07e:	4a2a      	ldr	r2, [pc, #168]	@ (800a128 <__sflush_r+0x104>)
 800a080:	40ca      	lsrs	r2, r1
 800a082:	07d6      	lsls	r6, r2, #31
 800a084:	d527      	bpl.n	800a0d6 <__sflush_r+0xb2>
 800a086:	2200      	movs	r2, #0
 800a088:	6062      	str	r2, [r4, #4]
 800a08a:	04d9      	lsls	r1, r3, #19
 800a08c:	6922      	ldr	r2, [r4, #16]
 800a08e:	6022      	str	r2, [r4, #0]
 800a090:	d504      	bpl.n	800a09c <__sflush_r+0x78>
 800a092:	1c42      	adds	r2, r0, #1
 800a094:	d101      	bne.n	800a09a <__sflush_r+0x76>
 800a096:	682b      	ldr	r3, [r5, #0]
 800a098:	b903      	cbnz	r3, 800a09c <__sflush_r+0x78>
 800a09a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a09e:	602f      	str	r7, [r5, #0]
 800a0a0:	b1b9      	cbz	r1, 800a0d2 <__sflush_r+0xae>
 800a0a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0a6:	4299      	cmp	r1, r3
 800a0a8:	d002      	beq.n	800a0b0 <__sflush_r+0x8c>
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	f7ff f9e8 	bl	8009480 <_free_r>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0b4:	e00d      	b.n	800a0d2 <__sflush_r+0xae>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	47b0      	blx	r6
 800a0bc:	4602      	mov	r2, r0
 800a0be:	1c50      	adds	r0, r2, #1
 800a0c0:	d1c9      	bne.n	800a056 <__sflush_r+0x32>
 800a0c2:	682b      	ldr	r3, [r5, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0c6      	beq.n	800a056 <__sflush_r+0x32>
 800a0c8:	2b1d      	cmp	r3, #29
 800a0ca:	d001      	beq.n	800a0d0 <__sflush_r+0xac>
 800a0cc:	2b16      	cmp	r3, #22
 800a0ce:	d11e      	bne.n	800a10e <__sflush_r+0xea>
 800a0d0:	602f      	str	r7, [r5, #0]
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	e022      	b.n	800a11c <__sflush_r+0xf8>
 800a0d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0da:	b21b      	sxth	r3, r3
 800a0dc:	e01b      	b.n	800a116 <__sflush_r+0xf2>
 800a0de:	690f      	ldr	r7, [r1, #16]
 800a0e0:	2f00      	cmp	r7, #0
 800a0e2:	d0f6      	beq.n	800a0d2 <__sflush_r+0xae>
 800a0e4:	0793      	lsls	r3, r2, #30
 800a0e6:	680e      	ldr	r6, [r1, #0]
 800a0e8:	bf08      	it	eq
 800a0ea:	694b      	ldreq	r3, [r1, #20]
 800a0ec:	600f      	str	r7, [r1, #0]
 800a0ee:	bf18      	it	ne
 800a0f0:	2300      	movne	r3, #0
 800a0f2:	eba6 0807 	sub.w	r8, r6, r7
 800a0f6:	608b      	str	r3, [r1, #8]
 800a0f8:	f1b8 0f00 	cmp.w	r8, #0
 800a0fc:	dde9      	ble.n	800a0d2 <__sflush_r+0xae>
 800a0fe:	6a21      	ldr	r1, [r4, #32]
 800a100:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a102:	4643      	mov	r3, r8
 800a104:	463a      	mov	r2, r7
 800a106:	4628      	mov	r0, r5
 800a108:	47b0      	blx	r6
 800a10a:	2800      	cmp	r0, #0
 800a10c:	dc08      	bgt.n	800a120 <__sflush_r+0xfc>
 800a10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a116:	81a3      	strh	r3, [r4, #12]
 800a118:	f04f 30ff 	mov.w	r0, #4294967295
 800a11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a120:	4407      	add	r7, r0
 800a122:	eba8 0800 	sub.w	r8, r8, r0
 800a126:	e7e7      	b.n	800a0f8 <__sflush_r+0xd4>
 800a128:	20400001 	.word	0x20400001

0800a12c <_fflush_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	690b      	ldr	r3, [r1, #16]
 800a130:	4605      	mov	r5, r0
 800a132:	460c      	mov	r4, r1
 800a134:	b913      	cbnz	r3, 800a13c <_fflush_r+0x10>
 800a136:	2500      	movs	r5, #0
 800a138:	4628      	mov	r0, r5
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	b118      	cbz	r0, 800a146 <_fflush_r+0x1a>
 800a13e:	6a03      	ldr	r3, [r0, #32]
 800a140:	b90b      	cbnz	r3, 800a146 <_fflush_r+0x1a>
 800a142:	f7fe fa0f 	bl	8008564 <__sinit>
 800a146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0f3      	beq.n	800a136 <_fflush_r+0xa>
 800a14e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a150:	07d0      	lsls	r0, r2, #31
 800a152:	d404      	bmi.n	800a15e <_fflush_r+0x32>
 800a154:	0599      	lsls	r1, r3, #22
 800a156:	d402      	bmi.n	800a15e <_fflush_r+0x32>
 800a158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a15a:	f7fe fb36 	bl	80087ca <__retarget_lock_acquire_recursive>
 800a15e:	4628      	mov	r0, r5
 800a160:	4621      	mov	r1, r4
 800a162:	f7ff ff5f 	bl	800a024 <__sflush_r>
 800a166:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a168:	07da      	lsls	r2, r3, #31
 800a16a:	4605      	mov	r5, r0
 800a16c:	d4e4      	bmi.n	800a138 <_fflush_r+0xc>
 800a16e:	89a3      	ldrh	r3, [r4, #12]
 800a170:	059b      	lsls	r3, r3, #22
 800a172:	d4e1      	bmi.n	800a138 <_fflush_r+0xc>
 800a174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a176:	f7fe fb29 	bl	80087cc <__retarget_lock_release_recursive>
 800a17a:	e7dd      	b.n	800a138 <_fflush_r+0xc>

0800a17c <memmove>:
 800a17c:	4288      	cmp	r0, r1
 800a17e:	b510      	push	{r4, lr}
 800a180:	eb01 0402 	add.w	r4, r1, r2
 800a184:	d902      	bls.n	800a18c <memmove+0x10>
 800a186:	4284      	cmp	r4, r0
 800a188:	4623      	mov	r3, r4
 800a18a:	d807      	bhi.n	800a19c <memmove+0x20>
 800a18c:	1e43      	subs	r3, r0, #1
 800a18e:	42a1      	cmp	r1, r4
 800a190:	d008      	beq.n	800a1a4 <memmove+0x28>
 800a192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a19a:	e7f8      	b.n	800a18e <memmove+0x12>
 800a19c:	4402      	add	r2, r0
 800a19e:	4601      	mov	r1, r0
 800a1a0:	428a      	cmp	r2, r1
 800a1a2:	d100      	bne.n	800a1a6 <memmove+0x2a>
 800a1a4:	bd10      	pop	{r4, pc}
 800a1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1ae:	e7f7      	b.n	800a1a0 <memmove+0x24>

0800a1b0 <_sbrk_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4d06      	ldr	r5, [pc, #24]	@ (800a1cc <_sbrk_r+0x1c>)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	602b      	str	r3, [r5, #0]
 800a1bc:	f7f9 f8b8 	bl	8003330 <_sbrk>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d102      	bne.n	800a1ca <_sbrk_r+0x1a>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	b103      	cbz	r3, 800a1ca <_sbrk_r+0x1a>
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	200016a8 	.word	0x200016a8

0800a1d0 <memcpy>:
 800a1d0:	440a      	add	r2, r1
 800a1d2:	4291      	cmp	r1, r2
 800a1d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1d8:	d100      	bne.n	800a1dc <memcpy+0xc>
 800a1da:	4770      	bx	lr
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1e6:	4291      	cmp	r1, r2
 800a1e8:	d1f9      	bne.n	800a1de <memcpy+0xe>
 800a1ea:	bd10      	pop	{r4, pc}

0800a1ec <__assert_func>:
 800a1ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ee:	4614      	mov	r4, r2
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4b09      	ldr	r3, [pc, #36]	@ (800a218 <__assert_func+0x2c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	68d8      	ldr	r0, [r3, #12]
 800a1fa:	b14c      	cbz	r4, 800a210 <__assert_func+0x24>
 800a1fc:	4b07      	ldr	r3, [pc, #28]	@ (800a21c <__assert_func+0x30>)
 800a1fe:	9100      	str	r1, [sp, #0]
 800a200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a204:	4906      	ldr	r1, [pc, #24]	@ (800a220 <__assert_func+0x34>)
 800a206:	462b      	mov	r3, r5
 800a208:	f000 f870 	bl	800a2ec <fiprintf>
 800a20c:	f000 f880 	bl	800a310 <abort>
 800a210:	4b04      	ldr	r3, [pc, #16]	@ (800a224 <__assert_func+0x38>)
 800a212:	461c      	mov	r4, r3
 800a214:	e7f3      	b.n	800a1fe <__assert_func+0x12>
 800a216:	bf00      	nop
 800a218:	2000004c 	.word	0x2000004c
 800a21c:	0800c0a1 	.word	0x0800c0a1
 800a220:	0800c0ae 	.word	0x0800c0ae
 800a224:	0800c0dc 	.word	0x0800c0dc

0800a228 <_calloc_r>:
 800a228:	b570      	push	{r4, r5, r6, lr}
 800a22a:	fba1 5402 	umull	r5, r4, r1, r2
 800a22e:	b934      	cbnz	r4, 800a23e <_calloc_r+0x16>
 800a230:	4629      	mov	r1, r5
 800a232:	f7ff f999 	bl	8009568 <_malloc_r>
 800a236:	4606      	mov	r6, r0
 800a238:	b928      	cbnz	r0, 800a246 <_calloc_r+0x1e>
 800a23a:	4630      	mov	r0, r6
 800a23c:	bd70      	pop	{r4, r5, r6, pc}
 800a23e:	220c      	movs	r2, #12
 800a240:	6002      	str	r2, [r0, #0]
 800a242:	2600      	movs	r6, #0
 800a244:	e7f9      	b.n	800a23a <_calloc_r+0x12>
 800a246:	462a      	mov	r2, r5
 800a248:	4621      	mov	r1, r4
 800a24a:	f7fe fa41 	bl	80086d0 <memset>
 800a24e:	e7f4      	b.n	800a23a <_calloc_r+0x12>

0800a250 <__ascii_mbtowc>:
 800a250:	b082      	sub	sp, #8
 800a252:	b901      	cbnz	r1, 800a256 <__ascii_mbtowc+0x6>
 800a254:	a901      	add	r1, sp, #4
 800a256:	b142      	cbz	r2, 800a26a <__ascii_mbtowc+0x1a>
 800a258:	b14b      	cbz	r3, 800a26e <__ascii_mbtowc+0x1e>
 800a25a:	7813      	ldrb	r3, [r2, #0]
 800a25c:	600b      	str	r3, [r1, #0]
 800a25e:	7812      	ldrb	r2, [r2, #0]
 800a260:	1e10      	subs	r0, r2, #0
 800a262:	bf18      	it	ne
 800a264:	2001      	movne	r0, #1
 800a266:	b002      	add	sp, #8
 800a268:	4770      	bx	lr
 800a26a:	4610      	mov	r0, r2
 800a26c:	e7fb      	b.n	800a266 <__ascii_mbtowc+0x16>
 800a26e:	f06f 0001 	mvn.w	r0, #1
 800a272:	e7f8      	b.n	800a266 <__ascii_mbtowc+0x16>

0800a274 <_realloc_r>:
 800a274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a278:	4607      	mov	r7, r0
 800a27a:	4614      	mov	r4, r2
 800a27c:	460d      	mov	r5, r1
 800a27e:	b921      	cbnz	r1, 800a28a <_realloc_r+0x16>
 800a280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a284:	4611      	mov	r1, r2
 800a286:	f7ff b96f 	b.w	8009568 <_malloc_r>
 800a28a:	b92a      	cbnz	r2, 800a298 <_realloc_r+0x24>
 800a28c:	f7ff f8f8 	bl	8009480 <_free_r>
 800a290:	4625      	mov	r5, r4
 800a292:	4628      	mov	r0, r5
 800a294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a298:	f000 f841 	bl	800a31e <_malloc_usable_size_r>
 800a29c:	4284      	cmp	r4, r0
 800a29e:	4606      	mov	r6, r0
 800a2a0:	d802      	bhi.n	800a2a8 <_realloc_r+0x34>
 800a2a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2a6:	d8f4      	bhi.n	800a292 <_realloc_r+0x1e>
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	f7ff f95c 	bl	8009568 <_malloc_r>
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	b908      	cbnz	r0, 800a2b8 <_realloc_r+0x44>
 800a2b4:	4645      	mov	r5, r8
 800a2b6:	e7ec      	b.n	800a292 <_realloc_r+0x1e>
 800a2b8:	42b4      	cmp	r4, r6
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	4629      	mov	r1, r5
 800a2be:	bf28      	it	cs
 800a2c0:	4632      	movcs	r2, r6
 800a2c2:	f7ff ff85 	bl	800a1d0 <memcpy>
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	f7ff f8d9 	bl	8009480 <_free_r>
 800a2ce:	e7f1      	b.n	800a2b4 <_realloc_r+0x40>

0800a2d0 <__ascii_wctomb>:
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	4608      	mov	r0, r1
 800a2d4:	b141      	cbz	r1, 800a2e8 <__ascii_wctomb+0x18>
 800a2d6:	2aff      	cmp	r2, #255	@ 0xff
 800a2d8:	d904      	bls.n	800a2e4 <__ascii_wctomb+0x14>
 800a2da:	228a      	movs	r2, #138	@ 0x8a
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e2:	4770      	bx	lr
 800a2e4:	700a      	strb	r2, [r1, #0]
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	4770      	bx	lr
	...

0800a2ec <fiprintf>:
 800a2ec:	b40e      	push	{r1, r2, r3}
 800a2ee:	b503      	push	{r0, r1, lr}
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	ab03      	add	r3, sp, #12
 800a2f4:	4805      	ldr	r0, [pc, #20]	@ (800a30c <fiprintf+0x20>)
 800a2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2fa:	6800      	ldr	r0, [r0, #0]
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	f000 f83f 	bl	800a380 <_vfiprintf_r>
 800a302:	b002      	add	sp, #8
 800a304:	f85d eb04 	ldr.w	lr, [sp], #4
 800a308:	b003      	add	sp, #12
 800a30a:	4770      	bx	lr
 800a30c:	2000004c 	.word	0x2000004c

0800a310 <abort>:
 800a310:	b508      	push	{r3, lr}
 800a312:	2006      	movs	r0, #6
 800a314:	f000 fa08 	bl	800a728 <raise>
 800a318:	2001      	movs	r0, #1
 800a31a:	f7f8 ff91 	bl	8003240 <_exit>

0800a31e <_malloc_usable_size_r>:
 800a31e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a322:	1f18      	subs	r0, r3, #4
 800a324:	2b00      	cmp	r3, #0
 800a326:	bfbc      	itt	lt
 800a328:	580b      	ldrlt	r3, [r1, r0]
 800a32a:	18c0      	addlt	r0, r0, r3
 800a32c:	4770      	bx	lr

0800a32e <__sfputc_r>:
 800a32e:	6893      	ldr	r3, [r2, #8]
 800a330:	3b01      	subs	r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	b410      	push	{r4}
 800a336:	6093      	str	r3, [r2, #8]
 800a338:	da08      	bge.n	800a34c <__sfputc_r+0x1e>
 800a33a:	6994      	ldr	r4, [r2, #24]
 800a33c:	42a3      	cmp	r3, r4
 800a33e:	db01      	blt.n	800a344 <__sfputc_r+0x16>
 800a340:	290a      	cmp	r1, #10
 800a342:	d103      	bne.n	800a34c <__sfputc_r+0x1e>
 800a344:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a348:	f000 b932 	b.w	800a5b0 <__swbuf_r>
 800a34c:	6813      	ldr	r3, [r2, #0]
 800a34e:	1c58      	adds	r0, r3, #1
 800a350:	6010      	str	r0, [r2, #0]
 800a352:	7019      	strb	r1, [r3, #0]
 800a354:	4608      	mov	r0, r1
 800a356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <__sfputs_r>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	4606      	mov	r6, r0
 800a360:	460f      	mov	r7, r1
 800a362:	4614      	mov	r4, r2
 800a364:	18d5      	adds	r5, r2, r3
 800a366:	42ac      	cmp	r4, r5
 800a368:	d101      	bne.n	800a36e <__sfputs_r+0x12>
 800a36a:	2000      	movs	r0, #0
 800a36c:	e007      	b.n	800a37e <__sfputs_r+0x22>
 800a36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a372:	463a      	mov	r2, r7
 800a374:	4630      	mov	r0, r6
 800a376:	f7ff ffda 	bl	800a32e <__sfputc_r>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	d1f3      	bne.n	800a366 <__sfputs_r+0xa>
 800a37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a380 <_vfiprintf_r>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	460d      	mov	r5, r1
 800a386:	b09d      	sub	sp, #116	@ 0x74
 800a388:	4614      	mov	r4, r2
 800a38a:	4698      	mov	r8, r3
 800a38c:	4606      	mov	r6, r0
 800a38e:	b118      	cbz	r0, 800a398 <_vfiprintf_r+0x18>
 800a390:	6a03      	ldr	r3, [r0, #32]
 800a392:	b90b      	cbnz	r3, 800a398 <_vfiprintf_r+0x18>
 800a394:	f7fe f8e6 	bl	8008564 <__sinit>
 800a398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a39a:	07d9      	lsls	r1, r3, #31
 800a39c:	d405      	bmi.n	800a3aa <_vfiprintf_r+0x2a>
 800a39e:	89ab      	ldrh	r3, [r5, #12]
 800a3a0:	059a      	lsls	r2, r3, #22
 800a3a2:	d402      	bmi.n	800a3aa <_vfiprintf_r+0x2a>
 800a3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3a6:	f7fe fa10 	bl	80087ca <__retarget_lock_acquire_recursive>
 800a3aa:	89ab      	ldrh	r3, [r5, #12]
 800a3ac:	071b      	lsls	r3, r3, #28
 800a3ae:	d501      	bpl.n	800a3b4 <_vfiprintf_r+0x34>
 800a3b0:	692b      	ldr	r3, [r5, #16]
 800a3b2:	b99b      	cbnz	r3, 800a3dc <_vfiprintf_r+0x5c>
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f000 f938 	bl	800a62c <__swsetup_r>
 800a3bc:	b170      	cbz	r0, 800a3dc <_vfiprintf_r+0x5c>
 800a3be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3c0:	07dc      	lsls	r4, r3, #31
 800a3c2:	d504      	bpl.n	800a3ce <_vfiprintf_r+0x4e>
 800a3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c8:	b01d      	add	sp, #116	@ 0x74
 800a3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ce:	89ab      	ldrh	r3, [r5, #12]
 800a3d0:	0598      	lsls	r0, r3, #22
 800a3d2:	d4f7      	bmi.n	800a3c4 <_vfiprintf_r+0x44>
 800a3d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3d6:	f7fe f9f9 	bl	80087cc <__retarget_lock_release_recursive>
 800a3da:	e7f3      	b.n	800a3c4 <_vfiprintf_r+0x44>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ea:	2330      	movs	r3, #48	@ 0x30
 800a3ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a59c <_vfiprintf_r+0x21c>
 800a3f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3f4:	f04f 0901 	mov.w	r9, #1
 800a3f8:	4623      	mov	r3, r4
 800a3fa:	469a      	mov	sl, r3
 800a3fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a400:	b10a      	cbz	r2, 800a406 <_vfiprintf_r+0x86>
 800a402:	2a25      	cmp	r2, #37	@ 0x25
 800a404:	d1f9      	bne.n	800a3fa <_vfiprintf_r+0x7a>
 800a406:	ebba 0b04 	subs.w	fp, sl, r4
 800a40a:	d00b      	beq.n	800a424 <_vfiprintf_r+0xa4>
 800a40c:	465b      	mov	r3, fp
 800a40e:	4622      	mov	r2, r4
 800a410:	4629      	mov	r1, r5
 800a412:	4630      	mov	r0, r6
 800a414:	f7ff ffa2 	bl	800a35c <__sfputs_r>
 800a418:	3001      	adds	r0, #1
 800a41a:	f000 80a7 	beq.w	800a56c <_vfiprintf_r+0x1ec>
 800a41e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a420:	445a      	add	r2, fp
 800a422:	9209      	str	r2, [sp, #36]	@ 0x24
 800a424:	f89a 3000 	ldrb.w	r3, [sl]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 809f 	beq.w	800a56c <_vfiprintf_r+0x1ec>
 800a42e:	2300      	movs	r3, #0
 800a430:	f04f 32ff 	mov.w	r2, #4294967295
 800a434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a438:	f10a 0a01 	add.w	sl, sl, #1
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	9307      	str	r3, [sp, #28]
 800a440:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a444:	931a      	str	r3, [sp, #104]	@ 0x68
 800a446:	4654      	mov	r4, sl
 800a448:	2205      	movs	r2, #5
 800a44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44e:	4853      	ldr	r0, [pc, #332]	@ (800a59c <_vfiprintf_r+0x21c>)
 800a450:	f7f5 fec6 	bl	80001e0 <memchr>
 800a454:	9a04      	ldr	r2, [sp, #16]
 800a456:	b9d8      	cbnz	r0, 800a490 <_vfiprintf_r+0x110>
 800a458:	06d1      	lsls	r1, r2, #27
 800a45a:	bf44      	itt	mi
 800a45c:	2320      	movmi	r3, #32
 800a45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a462:	0713      	lsls	r3, r2, #28
 800a464:	bf44      	itt	mi
 800a466:	232b      	movmi	r3, #43	@ 0x2b
 800a468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a46c:	f89a 3000 	ldrb.w	r3, [sl]
 800a470:	2b2a      	cmp	r3, #42	@ 0x2a
 800a472:	d015      	beq.n	800a4a0 <_vfiprintf_r+0x120>
 800a474:	9a07      	ldr	r2, [sp, #28]
 800a476:	4654      	mov	r4, sl
 800a478:	2000      	movs	r0, #0
 800a47a:	f04f 0c0a 	mov.w	ip, #10
 800a47e:	4621      	mov	r1, r4
 800a480:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a484:	3b30      	subs	r3, #48	@ 0x30
 800a486:	2b09      	cmp	r3, #9
 800a488:	d94b      	bls.n	800a522 <_vfiprintf_r+0x1a2>
 800a48a:	b1b0      	cbz	r0, 800a4ba <_vfiprintf_r+0x13a>
 800a48c:	9207      	str	r2, [sp, #28]
 800a48e:	e014      	b.n	800a4ba <_vfiprintf_r+0x13a>
 800a490:	eba0 0308 	sub.w	r3, r0, r8
 800a494:	fa09 f303 	lsl.w	r3, r9, r3
 800a498:	4313      	orrs	r3, r2
 800a49a:	9304      	str	r3, [sp, #16]
 800a49c:	46a2      	mov	sl, r4
 800a49e:	e7d2      	b.n	800a446 <_vfiprintf_r+0xc6>
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	1d19      	adds	r1, r3, #4
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	9103      	str	r1, [sp, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	bfbb      	ittet	lt
 800a4ac:	425b      	neglt	r3, r3
 800a4ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a4b2:	9307      	strge	r3, [sp, #28]
 800a4b4:	9307      	strlt	r3, [sp, #28]
 800a4b6:	bfb8      	it	lt
 800a4b8:	9204      	strlt	r2, [sp, #16]
 800a4ba:	7823      	ldrb	r3, [r4, #0]
 800a4bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4be:	d10a      	bne.n	800a4d6 <_vfiprintf_r+0x156>
 800a4c0:	7863      	ldrb	r3, [r4, #1]
 800a4c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4c4:	d132      	bne.n	800a52c <_vfiprintf_r+0x1ac>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	1d1a      	adds	r2, r3, #4
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	9203      	str	r2, [sp, #12]
 800a4ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4d2:	3402      	adds	r4, #2
 800a4d4:	9305      	str	r3, [sp, #20]
 800a4d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a5ac <_vfiprintf_r+0x22c>
 800a4da:	7821      	ldrb	r1, [r4, #0]
 800a4dc:	2203      	movs	r2, #3
 800a4de:	4650      	mov	r0, sl
 800a4e0:	f7f5 fe7e 	bl	80001e0 <memchr>
 800a4e4:	b138      	cbz	r0, 800a4f6 <_vfiprintf_r+0x176>
 800a4e6:	9b04      	ldr	r3, [sp, #16]
 800a4e8:	eba0 000a 	sub.w	r0, r0, sl
 800a4ec:	2240      	movs	r2, #64	@ 0x40
 800a4ee:	4082      	lsls	r2, r0
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	3401      	adds	r4, #1
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fa:	4829      	ldr	r0, [pc, #164]	@ (800a5a0 <_vfiprintf_r+0x220>)
 800a4fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a500:	2206      	movs	r2, #6
 800a502:	f7f5 fe6d 	bl	80001e0 <memchr>
 800a506:	2800      	cmp	r0, #0
 800a508:	d03f      	beq.n	800a58a <_vfiprintf_r+0x20a>
 800a50a:	4b26      	ldr	r3, [pc, #152]	@ (800a5a4 <_vfiprintf_r+0x224>)
 800a50c:	bb1b      	cbnz	r3, 800a556 <_vfiprintf_r+0x1d6>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	3307      	adds	r3, #7
 800a512:	f023 0307 	bic.w	r3, r3, #7
 800a516:	3308      	adds	r3, #8
 800a518:	9303      	str	r3, [sp, #12]
 800a51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a51c:	443b      	add	r3, r7
 800a51e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a520:	e76a      	b.n	800a3f8 <_vfiprintf_r+0x78>
 800a522:	fb0c 3202 	mla	r2, ip, r2, r3
 800a526:	460c      	mov	r4, r1
 800a528:	2001      	movs	r0, #1
 800a52a:	e7a8      	b.n	800a47e <_vfiprintf_r+0xfe>
 800a52c:	2300      	movs	r3, #0
 800a52e:	3401      	adds	r4, #1
 800a530:	9305      	str	r3, [sp, #20]
 800a532:	4619      	mov	r1, r3
 800a534:	f04f 0c0a 	mov.w	ip, #10
 800a538:	4620      	mov	r0, r4
 800a53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a53e:	3a30      	subs	r2, #48	@ 0x30
 800a540:	2a09      	cmp	r2, #9
 800a542:	d903      	bls.n	800a54c <_vfiprintf_r+0x1cc>
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0c6      	beq.n	800a4d6 <_vfiprintf_r+0x156>
 800a548:	9105      	str	r1, [sp, #20]
 800a54a:	e7c4      	b.n	800a4d6 <_vfiprintf_r+0x156>
 800a54c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a550:	4604      	mov	r4, r0
 800a552:	2301      	movs	r3, #1
 800a554:	e7f0      	b.n	800a538 <_vfiprintf_r+0x1b8>
 800a556:	ab03      	add	r3, sp, #12
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	462a      	mov	r2, r5
 800a55c:	4b12      	ldr	r3, [pc, #72]	@ (800a5a8 <_vfiprintf_r+0x228>)
 800a55e:	a904      	add	r1, sp, #16
 800a560:	4630      	mov	r0, r6
 800a562:	f7fd fbbd 	bl	8007ce0 <_printf_float>
 800a566:	4607      	mov	r7, r0
 800a568:	1c78      	adds	r0, r7, #1
 800a56a:	d1d6      	bne.n	800a51a <_vfiprintf_r+0x19a>
 800a56c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a56e:	07d9      	lsls	r1, r3, #31
 800a570:	d405      	bmi.n	800a57e <_vfiprintf_r+0x1fe>
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	059a      	lsls	r2, r3, #22
 800a576:	d402      	bmi.n	800a57e <_vfiprintf_r+0x1fe>
 800a578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a57a:	f7fe f927 	bl	80087cc <__retarget_lock_release_recursive>
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	065b      	lsls	r3, r3, #25
 800a582:	f53f af1f 	bmi.w	800a3c4 <_vfiprintf_r+0x44>
 800a586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a588:	e71e      	b.n	800a3c8 <_vfiprintf_r+0x48>
 800a58a:	ab03      	add	r3, sp, #12
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	462a      	mov	r2, r5
 800a590:	4b05      	ldr	r3, [pc, #20]	@ (800a5a8 <_vfiprintf_r+0x228>)
 800a592:	a904      	add	r1, sp, #16
 800a594:	4630      	mov	r0, r6
 800a596:	f7fd fe3b 	bl	8008210 <_printf_i>
 800a59a:	e7e4      	b.n	800a566 <_vfiprintf_r+0x1e6>
 800a59c:	0800c086 	.word	0x0800c086
 800a5a0:	0800c090 	.word	0x0800c090
 800a5a4:	08007ce1 	.word	0x08007ce1
 800a5a8:	0800a35d 	.word	0x0800a35d
 800a5ac:	0800c08c 	.word	0x0800c08c

0800a5b0 <__swbuf_r>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	460e      	mov	r6, r1
 800a5b4:	4614      	mov	r4, r2
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	b118      	cbz	r0, 800a5c2 <__swbuf_r+0x12>
 800a5ba:	6a03      	ldr	r3, [r0, #32]
 800a5bc:	b90b      	cbnz	r3, 800a5c2 <__swbuf_r+0x12>
 800a5be:	f7fd ffd1 	bl	8008564 <__sinit>
 800a5c2:	69a3      	ldr	r3, [r4, #24]
 800a5c4:	60a3      	str	r3, [r4, #8]
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	071a      	lsls	r2, r3, #28
 800a5ca:	d501      	bpl.n	800a5d0 <__swbuf_r+0x20>
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	b943      	cbnz	r3, 800a5e2 <__swbuf_r+0x32>
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f000 f82a 	bl	800a62c <__swsetup_r>
 800a5d8:	b118      	cbz	r0, 800a5e2 <__swbuf_r+0x32>
 800a5da:	f04f 37ff 	mov.w	r7, #4294967295
 800a5de:	4638      	mov	r0, r7
 800a5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	6922      	ldr	r2, [r4, #16]
 800a5e6:	1a98      	subs	r0, r3, r2
 800a5e8:	6963      	ldr	r3, [r4, #20]
 800a5ea:	b2f6      	uxtb	r6, r6
 800a5ec:	4283      	cmp	r3, r0
 800a5ee:	4637      	mov	r7, r6
 800a5f0:	dc05      	bgt.n	800a5fe <__swbuf_r+0x4e>
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	f7ff fd99 	bl	800a12c <_fflush_r>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d1ed      	bne.n	800a5da <__swbuf_r+0x2a>
 800a5fe:	68a3      	ldr	r3, [r4, #8]
 800a600:	3b01      	subs	r3, #1
 800a602:	60a3      	str	r3, [r4, #8]
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	6022      	str	r2, [r4, #0]
 800a60a:	701e      	strb	r6, [r3, #0]
 800a60c:	6962      	ldr	r2, [r4, #20]
 800a60e:	1c43      	adds	r3, r0, #1
 800a610:	429a      	cmp	r2, r3
 800a612:	d004      	beq.n	800a61e <__swbuf_r+0x6e>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	07db      	lsls	r3, r3, #31
 800a618:	d5e1      	bpl.n	800a5de <__swbuf_r+0x2e>
 800a61a:	2e0a      	cmp	r6, #10
 800a61c:	d1df      	bne.n	800a5de <__swbuf_r+0x2e>
 800a61e:	4621      	mov	r1, r4
 800a620:	4628      	mov	r0, r5
 800a622:	f7ff fd83 	bl	800a12c <_fflush_r>
 800a626:	2800      	cmp	r0, #0
 800a628:	d0d9      	beq.n	800a5de <__swbuf_r+0x2e>
 800a62a:	e7d6      	b.n	800a5da <__swbuf_r+0x2a>

0800a62c <__swsetup_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4b29      	ldr	r3, [pc, #164]	@ (800a6d4 <__swsetup_r+0xa8>)
 800a630:	4605      	mov	r5, r0
 800a632:	6818      	ldr	r0, [r3, #0]
 800a634:	460c      	mov	r4, r1
 800a636:	b118      	cbz	r0, 800a640 <__swsetup_r+0x14>
 800a638:	6a03      	ldr	r3, [r0, #32]
 800a63a:	b90b      	cbnz	r3, 800a640 <__swsetup_r+0x14>
 800a63c:	f7fd ff92 	bl	8008564 <__sinit>
 800a640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a644:	0719      	lsls	r1, r3, #28
 800a646:	d422      	bmi.n	800a68e <__swsetup_r+0x62>
 800a648:	06da      	lsls	r2, r3, #27
 800a64a:	d407      	bmi.n	800a65c <__swsetup_r+0x30>
 800a64c:	2209      	movs	r2, #9
 800a64e:	602a      	str	r2, [r5, #0]
 800a650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a654:	81a3      	strh	r3, [r4, #12]
 800a656:	f04f 30ff 	mov.w	r0, #4294967295
 800a65a:	e033      	b.n	800a6c4 <__swsetup_r+0x98>
 800a65c:	0758      	lsls	r0, r3, #29
 800a65e:	d512      	bpl.n	800a686 <__swsetup_r+0x5a>
 800a660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a662:	b141      	cbz	r1, 800a676 <__swsetup_r+0x4a>
 800a664:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a668:	4299      	cmp	r1, r3
 800a66a:	d002      	beq.n	800a672 <__swsetup_r+0x46>
 800a66c:	4628      	mov	r0, r5
 800a66e:	f7fe ff07 	bl	8009480 <_free_r>
 800a672:	2300      	movs	r3, #0
 800a674:	6363      	str	r3, [r4, #52]	@ 0x34
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	2300      	movs	r3, #0
 800a680:	6063      	str	r3, [r4, #4]
 800a682:	6923      	ldr	r3, [r4, #16]
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	f043 0308 	orr.w	r3, r3, #8
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	b94b      	cbnz	r3, 800a6a6 <__swsetup_r+0x7a>
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a69c:	d003      	beq.n	800a6a6 <__swsetup_r+0x7a>
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f000 f883 	bl	800a7ac <__smakebuf_r>
 800a6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6aa:	f013 0201 	ands.w	r2, r3, #1
 800a6ae:	d00a      	beq.n	800a6c6 <__swsetup_r+0x9a>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	60a2      	str	r2, [r4, #8]
 800a6b4:	6962      	ldr	r2, [r4, #20]
 800a6b6:	4252      	negs	r2, r2
 800a6b8:	61a2      	str	r2, [r4, #24]
 800a6ba:	6922      	ldr	r2, [r4, #16]
 800a6bc:	b942      	cbnz	r2, 800a6d0 <__swsetup_r+0xa4>
 800a6be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6c2:	d1c5      	bne.n	800a650 <__swsetup_r+0x24>
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	0799      	lsls	r1, r3, #30
 800a6c8:	bf58      	it	pl
 800a6ca:	6962      	ldrpl	r2, [r4, #20]
 800a6cc:	60a2      	str	r2, [r4, #8]
 800a6ce:	e7f4      	b.n	800a6ba <__swsetup_r+0x8e>
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	e7f7      	b.n	800a6c4 <__swsetup_r+0x98>
 800a6d4:	2000004c 	.word	0x2000004c

0800a6d8 <_raise_r>:
 800a6d8:	291f      	cmp	r1, #31
 800a6da:	b538      	push	{r3, r4, r5, lr}
 800a6dc:	4605      	mov	r5, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	d904      	bls.n	800a6ec <_raise_r+0x14>
 800a6e2:	2316      	movs	r3, #22
 800a6e4:	6003      	str	r3, [r0, #0]
 800a6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6ee:	b112      	cbz	r2, 800a6f6 <_raise_r+0x1e>
 800a6f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6f4:	b94b      	cbnz	r3, 800a70a <_raise_r+0x32>
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	f000 f830 	bl	800a75c <_getpid_r>
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	4601      	mov	r1, r0
 800a700:	4628      	mov	r0, r5
 800a702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a706:	f000 b817 	b.w	800a738 <_kill_r>
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d00a      	beq.n	800a724 <_raise_r+0x4c>
 800a70e:	1c59      	adds	r1, r3, #1
 800a710:	d103      	bne.n	800a71a <_raise_r+0x42>
 800a712:	2316      	movs	r3, #22
 800a714:	6003      	str	r3, [r0, #0]
 800a716:	2001      	movs	r0, #1
 800a718:	e7e7      	b.n	800a6ea <_raise_r+0x12>
 800a71a:	2100      	movs	r1, #0
 800a71c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a720:	4620      	mov	r0, r4
 800a722:	4798      	blx	r3
 800a724:	2000      	movs	r0, #0
 800a726:	e7e0      	b.n	800a6ea <_raise_r+0x12>

0800a728 <raise>:
 800a728:	4b02      	ldr	r3, [pc, #8]	@ (800a734 <raise+0xc>)
 800a72a:	4601      	mov	r1, r0
 800a72c:	6818      	ldr	r0, [r3, #0]
 800a72e:	f7ff bfd3 	b.w	800a6d8 <_raise_r>
 800a732:	bf00      	nop
 800a734:	2000004c 	.word	0x2000004c

0800a738 <_kill_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4d07      	ldr	r5, [pc, #28]	@ (800a758 <_kill_r+0x20>)
 800a73c:	2300      	movs	r3, #0
 800a73e:	4604      	mov	r4, r0
 800a740:	4608      	mov	r0, r1
 800a742:	4611      	mov	r1, r2
 800a744:	602b      	str	r3, [r5, #0]
 800a746:	f7f8 fd6b 	bl	8003220 <_kill>
 800a74a:	1c43      	adds	r3, r0, #1
 800a74c:	d102      	bne.n	800a754 <_kill_r+0x1c>
 800a74e:	682b      	ldr	r3, [r5, #0]
 800a750:	b103      	cbz	r3, 800a754 <_kill_r+0x1c>
 800a752:	6023      	str	r3, [r4, #0]
 800a754:	bd38      	pop	{r3, r4, r5, pc}
 800a756:	bf00      	nop
 800a758:	200016a8 	.word	0x200016a8

0800a75c <_getpid_r>:
 800a75c:	f7f8 bd58 	b.w	8003210 <_getpid>

0800a760 <__swhatbuf_r>:
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	460c      	mov	r4, r1
 800a764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a768:	2900      	cmp	r1, #0
 800a76a:	b096      	sub	sp, #88	@ 0x58
 800a76c:	4615      	mov	r5, r2
 800a76e:	461e      	mov	r6, r3
 800a770:	da0d      	bge.n	800a78e <__swhatbuf_r+0x2e>
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a778:	f04f 0100 	mov.w	r1, #0
 800a77c:	bf14      	ite	ne
 800a77e:	2340      	movne	r3, #64	@ 0x40
 800a780:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a784:	2000      	movs	r0, #0
 800a786:	6031      	str	r1, [r6, #0]
 800a788:	602b      	str	r3, [r5, #0]
 800a78a:	b016      	add	sp, #88	@ 0x58
 800a78c:	bd70      	pop	{r4, r5, r6, pc}
 800a78e:	466a      	mov	r2, sp
 800a790:	f000 f848 	bl	800a824 <_fstat_r>
 800a794:	2800      	cmp	r0, #0
 800a796:	dbec      	blt.n	800a772 <__swhatbuf_r+0x12>
 800a798:	9901      	ldr	r1, [sp, #4]
 800a79a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a79e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7a2:	4259      	negs	r1, r3
 800a7a4:	4159      	adcs	r1, r3
 800a7a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7aa:	e7eb      	b.n	800a784 <__swhatbuf_r+0x24>

0800a7ac <__smakebuf_r>:
 800a7ac:	898b      	ldrh	r3, [r1, #12]
 800a7ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7b0:	079d      	lsls	r5, r3, #30
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	d507      	bpl.n	800a7c8 <__smakebuf_r+0x1c>
 800a7b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	6123      	str	r3, [r4, #16]
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	6163      	str	r3, [r4, #20]
 800a7c4:	b003      	add	sp, #12
 800a7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c8:	ab01      	add	r3, sp, #4
 800a7ca:	466a      	mov	r2, sp
 800a7cc:	f7ff ffc8 	bl	800a760 <__swhatbuf_r>
 800a7d0:	9f00      	ldr	r7, [sp, #0]
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f7fe fec6 	bl	8009568 <_malloc_r>
 800a7dc:	b948      	cbnz	r0, 800a7f2 <__smakebuf_r+0x46>
 800a7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e2:	059a      	lsls	r2, r3, #22
 800a7e4:	d4ee      	bmi.n	800a7c4 <__smakebuf_r+0x18>
 800a7e6:	f023 0303 	bic.w	r3, r3, #3
 800a7ea:	f043 0302 	orr.w	r3, r3, #2
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	e7e2      	b.n	800a7b8 <__smakebuf_r+0xc>
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	6020      	str	r0, [r4, #0]
 800a7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7fa:	81a3      	strh	r3, [r4, #12]
 800a7fc:	9b01      	ldr	r3, [sp, #4]
 800a7fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a802:	b15b      	cbz	r3, 800a81c <__smakebuf_r+0x70>
 800a804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a808:	4630      	mov	r0, r6
 800a80a:	f000 f81d 	bl	800a848 <_isatty_r>
 800a80e:	b128      	cbz	r0, 800a81c <__smakebuf_r+0x70>
 800a810:	89a3      	ldrh	r3, [r4, #12]
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	f043 0301 	orr.w	r3, r3, #1
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	431d      	orrs	r5, r3
 800a820:	81a5      	strh	r5, [r4, #12]
 800a822:	e7cf      	b.n	800a7c4 <__smakebuf_r+0x18>

0800a824 <_fstat_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4d07      	ldr	r5, [pc, #28]	@ (800a844 <_fstat_r+0x20>)
 800a828:	2300      	movs	r3, #0
 800a82a:	4604      	mov	r4, r0
 800a82c:	4608      	mov	r0, r1
 800a82e:	4611      	mov	r1, r2
 800a830:	602b      	str	r3, [r5, #0]
 800a832:	f7f8 fd55 	bl	80032e0 <_fstat>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	d102      	bne.n	800a840 <_fstat_r+0x1c>
 800a83a:	682b      	ldr	r3, [r5, #0]
 800a83c:	b103      	cbz	r3, 800a840 <_fstat_r+0x1c>
 800a83e:	6023      	str	r3, [r4, #0]
 800a840:	bd38      	pop	{r3, r4, r5, pc}
 800a842:	bf00      	nop
 800a844:	200016a8 	.word	0x200016a8

0800a848 <_isatty_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4d06      	ldr	r5, [pc, #24]	@ (800a864 <_isatty_r+0x1c>)
 800a84c:	2300      	movs	r3, #0
 800a84e:	4604      	mov	r4, r0
 800a850:	4608      	mov	r0, r1
 800a852:	602b      	str	r3, [r5, #0]
 800a854:	f7f8 fd54 	bl	8003300 <_isatty>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_isatty_r+0x1a>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_isatty_r+0x1a>
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	200016a8 	.word	0x200016a8

0800a868 <logf>:
 800a868:	b508      	push	{r3, lr}
 800a86a:	ed2d 8b02 	vpush	{d8}
 800a86e:	eeb0 8a40 	vmov.f32	s16, s0
 800a872:	f000 f85b 	bl	800a92c <__ieee754_logf>
 800a876:	eeb4 8a48 	vcmp.f32	s16, s16
 800a87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a87e:	d60f      	bvs.n	800a8a0 <logf+0x38>
 800a880:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a888:	dc0a      	bgt.n	800a8a0 <logf+0x38>
 800a88a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a892:	d108      	bne.n	800a8a6 <logf+0x3e>
 800a894:	f7fd ff6e 	bl	8008774 <__errno>
 800a898:	2322      	movs	r3, #34	@ 0x22
 800a89a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a8bc <logf+0x54>
 800a89e:	6003      	str	r3, [r0, #0]
 800a8a0:	ecbd 8b02 	vpop	{d8}
 800a8a4:	bd08      	pop	{r3, pc}
 800a8a6:	f7fd ff65 	bl	8008774 <__errno>
 800a8aa:	ecbd 8b02 	vpop	{d8}
 800a8ae:	2321      	movs	r3, #33	@ 0x21
 800a8b0:	6003      	str	r3, [r0, #0]
 800a8b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a8b6:	4802      	ldr	r0, [pc, #8]	@ (800a8c0 <logf+0x58>)
 800a8b8:	f000 b804 	b.w	800a8c4 <nanf>
 800a8bc:	ff800000 	.word	0xff800000
 800a8c0:	0800c0dc 	.word	0x0800c0dc

0800a8c4 <nanf>:
 800a8c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a8cc <nanf+0x8>
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	7fc00000 	.word	0x7fc00000

0800a8d0 <lroundf>:
 800a8d0:	ee10 1a10 	vmov	r1, s0
 800a8d4:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800a8d8:	2900      	cmp	r1, #0
 800a8da:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 800a8de:	bfac      	ite	ge
 800a8e0:	2001      	movge	r0, #1
 800a8e2:	f04f 30ff 	movlt.w	r0, #4294967295
 800a8e6:	2a1e      	cmp	r2, #30
 800a8e8:	dc1a      	bgt.n	800a920 <lroundf+0x50>
 800a8ea:	2a00      	cmp	r2, #0
 800a8ec:	da03      	bge.n	800a8f6 <lroundf+0x26>
 800a8ee:	3201      	adds	r2, #1
 800a8f0:	bf18      	it	ne
 800a8f2:	2000      	movne	r0, #0
 800a8f4:	4770      	bx	lr
 800a8f6:	2a16      	cmp	r2, #22
 800a8f8:	bfd8      	it	le
 800a8fa:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 800a8fe:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800a902:	bfd8      	it	le
 800a904:	4113      	asrle	r3, r2
 800a906:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800a90a:	bfcd      	iteet	gt
 800a90c:	3b96      	subgt	r3, #150	@ 0x96
 800a90e:	185b      	addle	r3, r3, r1
 800a910:	f1c2 0217 	rsble	r2, r2, #23
 800a914:	fa01 f303 	lslgt.w	r3, r1, r3
 800a918:	bfd8      	it	le
 800a91a:	40d3      	lsrle	r3, r2
 800a91c:	4358      	muls	r0, r3
 800a91e:	4770      	bx	lr
 800a920:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a924:	ee17 0a90 	vmov	r0, s15
 800a928:	4770      	bx	lr
	...

0800a92c <__ieee754_logf>:
 800a92c:	ee10 3a10 	vmov	r3, s0
 800a930:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a934:	d106      	bne.n	800a944 <__ieee754_logf+0x18>
 800a936:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800aad0 <__ieee754_logf+0x1a4>
 800a93a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800aad4 <__ieee754_logf+0x1a8>
 800a93e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a942:	4770      	bx	lr
 800a944:	2b00      	cmp	r3, #0
 800a946:	461a      	mov	r2, r3
 800a948:	da02      	bge.n	800a950 <__ieee754_logf+0x24>
 800a94a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a94e:	e7f4      	b.n	800a93a <__ieee754_logf+0xe>
 800a950:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a954:	db02      	blt.n	800a95c <__ieee754_logf+0x30>
 800a956:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a95a:	4770      	bx	lr
 800a95c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a960:	bfb8      	it	lt
 800a962:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800aad8 <__ieee754_logf+0x1ac>
 800a966:	485d      	ldr	r0, [pc, #372]	@ (800aadc <__ieee754_logf+0x1b0>)
 800a968:	bfbe      	ittt	lt
 800a96a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a96e:	f06f 0118 	mvnlt.w	r1, #24
 800a972:	ee17 2a90 	vmovlt	r2, s15
 800a976:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a97a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a97e:	4410      	add	r0, r2
 800a980:	bfa8      	it	ge
 800a982:	2100      	movge	r1, #0
 800a984:	3b7f      	subs	r3, #127	@ 0x7f
 800a986:	440b      	add	r3, r1
 800a988:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800a98c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800a990:	4311      	orrs	r1, r2
 800a992:	ee00 1a10 	vmov	s0, r1
 800a996:	4952      	ldr	r1, [pc, #328]	@ (800aae0 <__ieee754_logf+0x1b4>)
 800a998:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800a99c:	f102 000f 	add.w	r0, r2, #15
 800a9a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a9a4:	4001      	ands	r1, r0
 800a9a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a9aa:	bb89      	cbnz	r1, 800aa10 <__ieee754_logf+0xe4>
 800a9ac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b4:	d10f      	bne.n	800a9d6 <__ieee754_logf+0xaa>
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 8087 	beq.w	800aaca <__ieee754_logf+0x19e>
 800a9bc:	ee07 3a90 	vmov	s15, r3
 800a9c0:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800aae4 <__ieee754_logf+0x1b8>
 800a9c4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800aae8 <__ieee754_logf+0x1bc>
 800a9c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9cc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a9d0:	eea7 0a87 	vfma.f32	s0, s15, s14
 800a9d4:	4770      	bx	lr
 800a9d6:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800aaec <__ieee754_logf+0x1c0>
 800a9da:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a9de:	eee0 7a66 	vfms.f32	s15, s0, s13
 800a9e2:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a9e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9ea:	b913      	cbnz	r3, 800a9f2 <__ieee754_logf+0xc6>
 800a9ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a9f0:	4770      	bx	lr
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800aae4 <__ieee754_logf+0x1b8>
 800a9fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9fe:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800aa02:	ee37 0a40 	vsub.f32	s0, s14, s0
 800aa06:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800aae8 <__ieee754_logf+0x1bc>
 800aa0a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800aa0e:	4770      	bx	lr
 800aa10:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800aa14:	ee70 7a27 	vadd.f32	s15, s0, s15
 800aa18:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800aaf0 <__ieee754_logf+0x1c4>
 800aa1c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800aaf4 <__ieee754_logf+0x1c8>
 800aa20:	4935      	ldr	r1, [pc, #212]	@ (800aaf8 <__ieee754_logf+0x1cc>)
 800aa22:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800aa26:	4411      	add	r1, r2
 800aa28:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800aa2c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800aa30:	430a      	orrs	r2, r1
 800aa32:	2a00      	cmp	r2, #0
 800aa34:	ee07 3a90 	vmov	s15, r3
 800aa38:	ee26 5a06 	vmul.f32	s10, s12, s12
 800aa3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa40:	ee25 7a05 	vmul.f32	s14, s10, s10
 800aa44:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800aafc <__ieee754_logf+0x1d0>
 800aa48:	eee7 7a25 	vfma.f32	s15, s14, s11
 800aa4c:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800ab00 <__ieee754_logf+0x1d4>
 800aa50:	eee7 5a87 	vfma.f32	s11, s15, s14
 800aa54:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800ab04 <__ieee754_logf+0x1d8>
 800aa58:	eee7 7a24 	vfma.f32	s15, s14, s9
 800aa5c:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800ab08 <__ieee754_logf+0x1dc>
 800aa60:	eee7 4a87 	vfma.f32	s9, s15, s14
 800aa64:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800ab0c <__ieee754_logf+0x1e0>
 800aa68:	eee4 7a87 	vfma.f32	s15, s9, s14
 800aa6c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800aa70:	eee5 7a87 	vfma.f32	s15, s11, s14
 800aa74:	dd1a      	ble.n	800aaac <__ieee754_logf+0x180>
 800aa76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800aa7a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800aa7e:	ee27 7a00 	vmul.f32	s14, s14, s0
 800aa82:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa86:	ee67 7a86 	vmul.f32	s15, s15, s12
 800aa8a:	b913      	cbnz	r3, 800aa92 <__ieee754_logf+0x166>
 800aa8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa90:	e7ac      	b.n	800a9ec <__ieee754_logf+0xc0>
 800aa92:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800aae4 <__ieee754_logf+0x1b8>
 800aa96:	eee6 7a86 	vfma.f32	s15, s13, s12
 800aa9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa9e:	ee37 0a40 	vsub.f32	s0, s14, s0
 800aaa2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800aae8 <__ieee754_logf+0x1bc>
 800aaa6:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800aaaa:	4770      	bx	lr
 800aaac:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aab0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800aab4:	b913      	cbnz	r3, 800aabc <__ieee754_logf+0x190>
 800aab6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aaba:	4770      	bx	lr
 800aabc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800aae4 <__ieee754_logf+0x1b8>
 800aac0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800aac4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800aac8:	e7eb      	b.n	800aaa2 <__ieee754_logf+0x176>
 800aaca:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800aad4 <__ieee754_logf+0x1a8>
 800aace:	4770      	bx	lr
 800aad0:	cc000000 	.word	0xcc000000
 800aad4:	00000000 	.word	0x00000000
 800aad8:	4c000000 	.word	0x4c000000
 800aadc:	004afb20 	.word	0x004afb20
 800aae0:	007ffff0 	.word	0x007ffff0
 800aae4:	3717f7d1 	.word	0x3717f7d1
 800aae8:	3f317180 	.word	0x3f317180
 800aaec:	3eaaaaab 	.word	0x3eaaaaab
 800aaf0:	3e1cd04f 	.word	0x3e1cd04f
 800aaf4:	3e178897 	.word	0x3e178897
 800aaf8:	ffcf5c30 	.word	0xffcf5c30
 800aafc:	3e638e29 	.word	0x3e638e29
 800ab00:	3ecccccd 	.word	0x3ecccccd
 800ab04:	3e3a3325 	.word	0x3e3a3325
 800ab08:	3e924925 	.word	0x3e924925
 800ab0c:	3f2aaaab 	.word	0x3f2aaaab

0800ab10 <_init>:
 800ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab12:	bf00      	nop
 800ab14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab16:	bc08      	pop	{r3}
 800ab18:	469e      	mov	lr, r3
 800ab1a:	4770      	bx	lr

0800ab1c <_fini>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	bf00      	nop
 800ab20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab22:	bc08      	pop	{r3}
 800ab24:	469e      	mov	lr, r3
 800ab26:	4770      	bx	lr
