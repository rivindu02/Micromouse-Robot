
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021bc  0800d960  0800d960  0000e960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb1c  0800fb1c  00011234  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fb1c  0800fb1c  00010b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb24  0800fb24  00011234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb24  0800fb24  00010b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb28  0800fb28  00010b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0800fb2c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000127c  20000234  0800fd60  00011234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014b0  0800fd60  000114b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017886  00000000  00000000  00011264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399d  00000000  00000000  00028aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0002c488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001048  00000000  00000000  0002d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aaa2  00000000  00000000  0002e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001962b  00000000  00000000  0004941a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a089f  00000000  00000000  00062a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001032e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068b0  00000000  00000000  00103328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00109bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000234 	.word	0x20000234
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d948 	.word	0x0800d948

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000238 	.word	0x20000238
 80001dc:	0800d948 	.word	0x0800d948

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f005 fad1 	bl	80064a8 <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f007 fd09 	bl	8008960 <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 faa9 	bl	80064a8 <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f007 fdb1 	bl	8008ac0 <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	20000300 	.word	0x20000300

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f007 fda4 	bl	8008ac0 <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000300 	.word	0x20000300

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <play_confirmation_tone>:

/**
 * @brief Play confirmation tone
 */
void play_confirmation_tone(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    play_tone(784, 150);  // G5
 8000fbc:	2196      	movs	r1, #150	@ 0x96
 8000fbe:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fc2:	f7ff ff8f 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fc6:	2132      	movs	r1, #50	@ 0x32
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff8b 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000fce:	21c8      	movs	r1, #200	@ 0xc8
 8000fd0:	f240 4017 	movw	r0, #1047	@ 0x417
 8000fd4:	f7ff ff86 	bl	8000ee4 <play_tone>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <play_success_tone>:

/**
 * @brief Play success tone sequence
 */
void play_success_tone(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    play_tone(523, 100);  // C5
 8000fe0:	2164      	movs	r1, #100	@ 0x64
 8000fe2:	f240 200b 	movw	r0, #523	@ 0x20b
 8000fe6:	f7ff ff7d 	bl	8000ee4 <play_tone>
    play_tone(659, 100);  // E5
 8000fea:	2164      	movs	r1, #100	@ 0x64
 8000fec:	f240 2093 	movw	r0, #659	@ 0x293
 8000ff0:	f7ff ff78 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 8000ff4:	2164      	movs	r1, #100	@ 0x64
 8000ff6:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000ffa:	f7ff ff73 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000ffe:	21c8      	movs	r1, #200	@ 0xc8
 8001000:	f240 4017 	movw	r0, #1047	@ 0x417
 8001004:	f7ff ff6e 	bl	8000ee4 <play_tone>
    play_tone(0, 100);    // Pause
 8001008:	2164      	movs	r1, #100	@ 0x64
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ff6a 	bl	8000ee4 <play_tone>
    play_tone(1047, 100); // C6
 8001010:	2164      	movs	r1, #100	@ 0x64
 8001012:	f240 4017 	movw	r0, #1047	@ 0x417
 8001016:	f7ff ff65 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 800101a:	2164      	movs	r1, #100	@ 0x64
 800101c:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001020:	f7ff ff60 	bl	8000ee4 <play_tone>
    play_tone(1047, 300); // C6
 8001024:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001028:	f240 4017 	movw	r0, #1047	@ 0x417
 800102c:	f7ff ff5a 	bl	8000ee4 <play_tone>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <play_error_tone>:

/**
 * @brief Play error tone sequence
 */
void play_error_tone(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e00a      	b.n	8001056 <play_error_tone+0x22>
        play_tone(220, 200);  // A3
 8001040:	21c8      	movs	r1, #200	@ 0xc8
 8001042:	20dc      	movs	r0, #220	@ 0xdc
 8001044:	f7ff ff4e 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 8001048:	2164      	movs	r1, #100	@ 0x64
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff4a 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 3; i++) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	ddf1      	ble.n	8001040 <play_error_tone+0xc>
    }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <play_wall_beep>:

/**
 * @brief Play wall detection beep
 */
void play_wall_beep(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
    play_tone(1000, 50);
 800106a:	2132      	movs	r1, #50	@ 0x32
 800106c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001070:	f7ff ff38 	bl	8000ee4 <play_tone>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <play_turn_beep>:

/**
 * @brief Play turn signal beep
 */
void play_turn_beep(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    play_tone(800, 30);
 800107c:	211e      	movs	r1, #30
 800107e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001082:	f7ff ff2f 	bl	8000ee4 <play_tone>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <play_battery_warning>:

/**
 * @brief Play battery low warning
 */
void play_battery_warning(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	e00b      	b.n	80010ae <play_battery_warning+0x24>
        play_tone(440, 100);  // A4
 8001096:	2164      	movs	r1, #100	@ 0x64
 8001098:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 800109c:	f7ff ff22 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 80010a0:	2164      	movs	r1, #100	@ 0x64
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff ff1e 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 5; i++) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	ddf0      	ble.n	8001096 <play_battery_warning+0xc>
    }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff f8d9 	bl	8000280 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <send_bluetooth_message+0x28>)
 80010da:	f008 fd2b 	bl	8009b34 <HAL_UART_Transmit>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000420 	.word	0x20000420

080010ec <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 80010ec:	b40f      	push	{r0, r1, r2, r3}
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b0c2      	sub	sp, #264	@ 0x108
 80010f2:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 80010f4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80010f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001100:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800110a:	f107 0008 	add.w	r0, r7, #8
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001114:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001118:	f00a fa80 	bl	800b61c <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffcd 	bl	80010c0 <send_bluetooth_message>
}
 8001126:	bf00      	nop
 8001128:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800112c:	46bd      	mov	sp, r7
 800112e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001132:	b004      	add	sp, #16
 8001134:	4770      	bx	lr
	...

08001138 <send_maze_state>:

/**
 * @brief Send current maze state
 */
void send_maze_state(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	@ 0x50
 800113c:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== MAZE STATE ===\r\n");
 800113e:	4848      	ldr	r0, [pc, #288]	@ (8001260 <send_maze_state+0x128>)
 8001140:	f7ff ffbe 	bl	80010c0 <send_bluetooth_message>

    // Send maze in ASCII format
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 8001144:	230b      	movs	r3, #11
 8001146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001148:	e061      	b.n	800120e <send_maze_state+0xd6>
        char line[64] = "";
 800114a:	463b      	mov	r3, r7
 800114c:	2240      	movs	r2, #64	@ 0x40
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f00a fa71 	bl	800b638 <memset>
        for (int x = 0; x < MAZE_SIZE; x++) {
 8001156:	2300      	movs	r3, #0
 8001158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800115a:	e041      	b.n	80011e0 <send_maze_state+0xa8>
            char cell[8];
            if (maze[x][y].visited) {
 800115c:	4941      	ldr	r1, [pc, #260]	@ (8001264 <send_maze_state+0x12c>)
 800115e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800116a:	4413      	add	r3, r2
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	440b      	add	r3, r1
 8001170:	3304      	adds	r3, #4
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d023      	beq.n	80011c0 <send_maze_state+0x88>
                sprintf(cell, "%3d ", maze[x][y].distance < MAX_DISTANCE ? maze[x][y].distance : 999);
 8001178:	493a      	ldr	r1, [pc, #232]	@ (8001264 <send_maze_state+0x12c>)
 800117a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001186:	4413      	add	r3, r2
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	440b      	add	r3, r1
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001192:	4293      	cmp	r3, r2
 8001194:	dc0b      	bgt.n	80011ae <send_maze_state+0x76>
 8001196:	4933      	ldr	r1, [pc, #204]	@ (8001264 <send_maze_state+0x12c>)
 8001198:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011a4:	4413      	add	r3, r2
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	440b      	add	r3, r1
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	e001      	b.n	80011b2 <send_maze_state+0x7a>
 80011ae:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80011b2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80011b6:	461a      	mov	r2, r3
 80011b8:	492b      	ldr	r1, [pc, #172]	@ (8001268 <send_maze_state+0x130>)
 80011ba:	f00a f99b 	bl	800b4f4 <siprintf>
 80011be:	e005      	b.n	80011cc <send_maze_state+0x94>
            } else {
                sprintf(cell, " -- ");
 80011c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011c4:	4929      	ldr	r1, [pc, #164]	@ (800126c <send_maze_state+0x134>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a f994 	bl	800b4f4 <siprintf>
            }
            strcat(line, cell);
 80011cc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80011d0:	463b      	mov	r3, r7
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00a fa37 	bl	800b648 <strcat>
        for (int x = 0; x < MAZE_SIZE; x++) {
 80011da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011dc:	3301      	adds	r3, #1
 80011de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011e2:	2b0b      	cmp	r3, #11
 80011e4:	ddba      	ble.n	800115c <send_maze_state+0x24>
        }
        strcat(line, "\r\n");
 80011e6:	463b      	mov	r3, r7
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f849 	bl	8000280 <strlen>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	463b      	mov	r3, r7
 80011f4:	4413      	add	r3, r2
 80011f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001270 <send_maze_state+0x138>)
 80011f8:	8811      	ldrh	r1, [r2, #0]
 80011fa:	7892      	ldrb	r2, [r2, #2]
 80011fc:	8019      	strh	r1, [r3, #0]
 80011fe:	709a      	strb	r2, [r3, #2]
        send_bluetooth_message(line);
 8001200:	463b      	mov	r3, r7
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff5c 	bl	80010c0 <send_bluetooth_message>
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 8001208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800120a:	3b01      	subs	r3, #1
 800120c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800120e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001210:	2b00      	cmp	r3, #0
 8001212:	da9a      	bge.n	800114a <send_maze_state+0x12>
    }

    send_bluetooth_printf("Robot Position: (%d,%d) Direction: %d\r\n",
 8001214:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <send_maze_state+0x13c>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <send_maze_state+0x13c>)
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <send_maze_state+0x13c>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4815      	ldr	r0, [pc, #84]	@ (8001278 <send_maze_state+0x140>)
 8001222:	f7ff ff63 	bl	80010ec <send_bluetooth_printf>
                         robot.x, robot.y, robot.direction);
    send_bluetooth_printf("Center Reached: %s\r\n", robot.center_reached ? "YES" : "NO");
 8001226:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <send_maze_state+0x13c>)
 8001228:	7b1b      	ldrb	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <send_maze_state+0xfa>
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <send_maze_state+0x144>)
 8001230:	e000      	b.n	8001234 <send_maze_state+0xfc>
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <send_maze_state+0x148>)
 8001234:	4619      	mov	r1, r3
 8001236:	4813      	ldr	r0, [pc, #76]	@ (8001284 <send_maze_state+0x14c>)
 8001238:	f7ff ff58 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Returned to Start: %s\r\n", robot.returned_to_start ? "YES" : "NO");
 800123c:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <send_maze_state+0x13c>)
 800123e:	7b5b      	ldrb	r3, [r3, #13]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <send_maze_state+0x110>
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <send_maze_state+0x144>)
 8001246:	e000      	b.n	800124a <send_maze_state+0x112>
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <send_maze_state+0x148>)
 800124a:	4619      	mov	r1, r3
 800124c:	480e      	ldr	r0, [pc, #56]	@ (8001288 <send_maze_state+0x150>)
 800124e:	f7ff ff4d 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_message("==================\r\n");
 8001252:	480e      	ldr	r0, [pc, #56]	@ (800128c <send_maze_state+0x154>)
 8001254:	f7ff ff34 	bl	80010c0 <send_bluetooth_message>
}
 8001258:	bf00      	nop
 800125a:	3750      	adds	r7, #80	@ 0x50
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	0800d960 	.word	0x0800d960
 8001264:	20000468 	.word	0x20000468
 8001268:	0800d978 	.word	0x0800d978
 800126c:	0800d980 	.word	0x0800d980
 8001270:	0800d988 	.word	0x0800d988
 8001274:	20000d68 	.word	0x20000d68
 8001278:	0800d98c 	.word	0x0800d98c
 800127c:	0800d9b4 	.word	0x0800d9b4
 8001280:	0800d9b8 	.word	0x0800d9b8
 8001284:	0800d9bc 	.word	0x0800d9bc
 8001288:	0800d9d4 	.word	0x0800d9d4
 800128c:	0800d9ec 	.word	0x0800d9ec

08001290 <send_sensor_data>:

/**
 * @brief Send current sensor data
 */
void send_sensor_data(void)
{
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	b087      	sub	sp, #28
 8001294:	af06      	add	r7, sp, #24
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001296:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <send_sensor_data+0x54>)
 8001298:	881b      	ldrh	r3, [r3, #0]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800129a:	461d      	mov	r5, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <send_sensor_data+0x54>)
 800129e:	891b      	ldrh	r3, [r3, #8]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012a0:	461e      	mov	r6, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <send_sensor_data+0x54>)
 80012a4:	885b      	ldrh	r3, [r3, #2]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012a6:	469c      	mov	ip, r3
                         sensors.side_left, sensors.side_right,
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <send_sensor_data+0x54>)
 80012aa:	88db      	ldrh	r3, [r3, #6]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012ac:	461a      	mov	r2, r3
                         sensors.side_left, sensors.side_right,
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <send_sensor_data+0x54>)
 80012b0:	889b      	ldrh	r3, [r3, #4]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012b2:	4619      	mov	r1, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <send_sensor_data+0x54>)
 80012b6:	7a9b      	ldrb	r3, [r3, #10]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012b8:	4618      	mov	r0, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <send_sensor_data+0x54>)
 80012bc:	7adb      	ldrb	r3, [r3, #11]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012be:	461c      	mov	r4, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <send_sensor_data+0x54>)
 80012c2:	7b1b      	ldrb	r3, [r3, #12]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012c4:	9304      	str	r3, [sp, #16]
 80012c6:	9403      	str	r4, [sp, #12]
 80012c8:	9002      	str	r0, [sp, #8]
 80012ca:	9101      	str	r1, [sp, #4]
 80012cc:	9200      	str	r2, [sp, #0]
 80012ce:	4663      	mov	r3, ip
 80012d0:	4632      	mov	r2, r6
 80012d2:	4629      	mov	r1, r5
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <send_sensor_data+0x58>)
 80012d6:	f7ff ff09 	bl	80010ec <send_bluetooth_printf>
}
 80012da:	bf00      	nop
 80012dc:	3704      	adds	r7, #4
 80012de:	46bd      	mov	sp, r7
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000d7c 	.word	0x20000d7c
 80012e8:	0800da04 	.word	0x0800da04

080012ec <send_position_data>:

/**
 * @brief Send current position and encoder data
 */
void send_position_data(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af02      	add	r7, sp, #8
    int32_t left_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <send_position_data+0x44>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80012fc:	607b      	str	r3, [r7, #4]
    int32_t right_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim4) - 32768;
 80012fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <send_position_data+0x48>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001304:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001308:	603b      	str	r3, [r7, #0]

    send_bluetooth_printf("POSITION - X:%d Y:%d Dir:%d EncL:%ld EncR:%ld\r\n",
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <send_position_data+0x4c>)
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <send_position_data+0x4c>)
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <send_position_data+0x4c>)
 8001314:	6898      	ldr	r0, [r3, #8]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4603      	mov	r3, r0
 8001320:	4806      	ldr	r0, [pc, #24]	@ (800133c <send_position_data+0x50>)
 8001322:	f7ff fee3 	bl	80010ec <send_bluetooth_printf>
                         robot.x, robot.y, robot.direction, left_count, right_count);
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000348 	.word	0x20000348
 8001334:	200003d8 	.word	0x200003d8
 8001338:	20000d68 	.word	0x20000d68
 800133c:	0800da48 	.word	0x0800da48

08001340 <send_performance_metrics>:

/**
 * @brief Send performance metrics
 */
void send_performance_metrics(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
    float efficiency = get_exploration_efficiency();  // make functions
 8001346:	f002 fa89 	bl	800385c <get_exploration_efficiency>
 800134a:	ed87 0a01 	vstr	s0, [r7, #4]
    int optimal_distance = get_optimal_distance();		// make functions
 800134e:	f002 fad5 	bl	80038fc <get_optimal_distance>
 8001352:	6038      	str	r0, [r7, #0]

    send_bluetooth_message("\r\n=== PERFORMANCE METRICS ===\r\n");
 8001354:	4824      	ldr	r0, [pc, #144]	@ (80013e8 <send_performance_metrics+0xa8>)
 8001356:	f7ff feb3 	bl	80010c0 <send_bluetooth_message>
    send_bluetooth_printf("Exploration Steps: %d\r\n", robot.exploration_steps);
 800135a:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <send_performance_metrics+0xac>)
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	4619      	mov	r1, r3
 8001360:	4823      	ldr	r0, [pc, #140]	@ (80013f0 <send_performance_metrics+0xb0>)
 8001362:	f7ff fec3 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Exploration Efficiency: %.1f%%\r\n", efficiency);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff f8f6 	bl	8000558 <__aeabi_f2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4820      	ldr	r0, [pc, #128]	@ (80013f4 <send_performance_metrics+0xb4>)
 8001372:	f7ff febb 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Optimal Path Distance: %d steps\r\n", optimal_distance);
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	481f      	ldr	r0, [pc, #124]	@ (80013f8 <send_performance_metrics+0xb8>)
 800137a:	f7ff feb7 	bl	80010ec <send_bluetooth_printf>

    // Performance rating
    if (efficiency <= 50.0f && optimal_distance > 0) {
 800137e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001382:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80013fc <send_performance_metrics+0xbc>
 8001386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	d806      	bhi.n	800139e <send_performance_metrics+0x5e>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	dd03      	ble.n	800139e <send_performance_metrics+0x5e>
        send_bluetooth_message("Rating: ⭐⭐⭐⭐⭐ LEVEL\r\n");
 8001396:	481a      	ldr	r0, [pc, #104]	@ (8001400 <send_performance_metrics+0xc0>)
 8001398:	f7ff fe92 	bl	80010c0 <send_bluetooth_message>
 800139c:	e01c      	b.n	80013d8 <send_performance_metrics+0x98>
    } else if (efficiency <= 65.0f) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001404 <send_performance_metrics+0xc4>
 80013a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	d803      	bhi.n	80013b8 <send_performance_metrics+0x78>
        send_bluetooth_message("Rating: ⭐⭐⭐⭐ COMPETITION READY\r\n");
 80013b0:	4815      	ldr	r0, [pc, #84]	@ (8001408 <send_performance_metrics+0xc8>)
 80013b2:	f7ff fe85 	bl	80010c0 <send_bluetooth_message>
 80013b6:	e00f      	b.n	80013d8 <send_performance_metrics+0x98>
    } else if (efficiency <= 80.0f) {
 80013b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013bc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800140c <send_performance_metrics+0xcc>
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	d803      	bhi.n	80013d2 <send_performance_metrics+0x92>
        send_bluetooth_message("Rating: ⭐⭐⭐ GOOD PERFORMANCE\r\n");
 80013ca:	4811      	ldr	r0, [pc, #68]	@ (8001410 <send_performance_metrics+0xd0>)
 80013cc:	f7ff fe78 	bl	80010c0 <send_bluetooth_message>
 80013d0:	e002      	b.n	80013d8 <send_performance_metrics+0x98>
    } else {
        send_bluetooth_message("Rating: ⭐⭐ NEEDS OPTIMIZATION\r\n");
 80013d2:	4810      	ldr	r0, [pc, #64]	@ (8001414 <send_performance_metrics+0xd4>)
 80013d4:	f7ff fe74 	bl	80010c0 <send_bluetooth_message>
    }
    send_bluetooth_message("===========================\r\n");
 80013d8:	480f      	ldr	r0, [pc, #60]	@ (8001418 <send_performance_metrics+0xd8>)
 80013da:	f7ff fe71 	bl	80010c0 <send_bluetooth_message>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	0800da78 	.word	0x0800da78
 80013ec:	20000d68 	.word	0x20000d68
 80013f0:	0800da98 	.word	0x0800da98
 80013f4:	0800dab0 	.word	0x0800dab0
 80013f8:	0800dad4 	.word	0x0800dad4
 80013fc:	42480000 	.word	0x42480000
 8001400:	0800daf8 	.word	0x0800daf8
 8001404:	42820000 	.word	0x42820000
 8001408:	0800db18 	.word	0x0800db18
 800140c:	42a00000 	.word	0x42a00000
 8001410:	0800db44 	.word	0x0800db44
 8001414:	0800db6c 	.word	0x0800db6c
 8001418:	0800db90 	.word	0x0800db90

0800141c <send_battery_status>:

/**
 * @brief Send battery status
 */
void send_battery_status(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af02      	add	r7, sp, #8
    // Convert ADC reading to voltage (assuming 3.3V reference)
    float voltage = (sensors.battery * 3.3f) / 4096.0f;
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <send_battery_status+0x60>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001480 <send_battery_status+0x64>
 8001432:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001436:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001484 <send_battery_status+0x68>
 800143a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143e:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_printf("Battery: %.2fV (ADC:%d)", voltage, sensors.battery);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff f888 	bl	8000558 <__aeabi_f2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	490b      	ldr	r1, [pc, #44]	@ (800147c <send_battery_status+0x60>)
 800144e:	8809      	ldrh	r1, [r1, #0]
 8001450:	9100      	str	r1, [sp, #0]
 8001452:	480d      	ldr	r0, [pc, #52]	@ (8001488 <send_battery_status+0x6c>)
 8001454:	f7ff fe4a 	bl	80010ec <send_bluetooth_printf>

    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <send_battery_status+0x60>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001460:	4293      	cmp	r3, r2
 8001462:	d803      	bhi.n	800146c <send_battery_status+0x50>
        send_bluetooth_message(" - LOW BATTERY WARNING!\r\n");
 8001464:	4809      	ldr	r0, [pc, #36]	@ (800148c <send_battery_status+0x70>)
 8001466:	f7ff fe2b 	bl	80010c0 <send_bluetooth_message>
    } else {
        send_bluetooth_message(" - OK\r\n");
    }
}
 800146a:	e002      	b.n	8001472 <send_battery_status+0x56>
        send_bluetooth_message(" - OK\r\n");
 800146c:	4808      	ldr	r0, [pc, #32]	@ (8001490 <send_battery_status+0x74>)
 800146e:	f7ff fe27 	bl	80010c0 <send_bluetooth_message>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000d7c 	.word	0x20000d7c
 8001480:	40533333 	.word	0x40533333
 8001484:	45800000 	.word	0x45800000
 8001488:	0800dbb0 	.word	0x0800dbb0
 800148c:	0800dbc8 	.word	0x0800dbc8
 8001490:	0800dbe4 	.word	0x0800dbe4

08001494 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014b2:	4817      	ldr	r0, [pc, #92]	@ (8001510 <mpu9250_read_register+0x7c>)
 80014b4:	f005 ff36 	bl	8007324 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 80014b8:	f107 010d 	add.w	r1, r7, #13
 80014bc:	2364      	movs	r3, #100	@ 0x64
 80014be:	2201      	movs	r2, #1
 80014c0:	4814      	ldr	r0, [pc, #80]	@ (8001514 <mpu9250_read_register+0x80>)
 80014c2:	f006 fc5c 	bl	8007d7e <HAL_SPI_Transmit>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 80014ca:	f107 010c 	add.w	r1, r7, #12
 80014ce:	2364      	movs	r3, #100	@ 0x64
 80014d0:	2201      	movs	r2, #1
 80014d2:	4810      	ldr	r0, [pc, #64]	@ (8001514 <mpu9250_read_register+0x80>)
 80014d4:	f006 fd97 	bl	8008006 <HAL_SPI_Receive>
 80014d8:	4603      	mov	r3, r0
 80014da:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014e2:	480b      	ldr	r0, [pc, #44]	@ (8001510 <mpu9250_read_register+0x7c>)
 80014e4:	f005 ff1e 	bl	8007324 <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <mpu9250_read_register+0x60>
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 80014f4:	4808      	ldr	r0, [pc, #32]	@ (8001518 <mpu9250_read_register+0x84>)
 80014f6:	f7ff fde3 	bl	80010c0 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <mpu9250_read_register+0x88>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 8001500:	23ff      	movs	r3, #255	@ 0xff
 8001502:	e000      	b.n	8001506 <mpu9250_read_register+0x72>
    }

    return rx_data;
 8001504:	7b3b      	ldrb	r3, [r7, #12]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40020400 	.word	0x40020400
 8001514:	200002a8 	.word	0x200002a8
 8001518:	0800dd04 	.word	0x0800dd04
 800151c:	20000250 	.word	0x20000250

08001520 <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	460a      	mov	r2, r1
 800152a:	71fb      	strb	r3, [r7, #7]
 800152c:	4613      	mov	r3, r2
 800152e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	733b      	strb	r3, [r7, #12]
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800153e:	4811      	ldr	r0, [pc, #68]	@ (8001584 <mpu9250_write_register+0x64>)
 8001540:	f005 fef0 	bl	8007324 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 8001544:	f107 010c 	add.w	r1, r7, #12
 8001548:	2364      	movs	r3, #100	@ 0x64
 800154a:	2202      	movs	r2, #2
 800154c:	480e      	ldr	r0, [pc, #56]	@ (8001588 <mpu9250_write_register+0x68>)
 800154e:	f006 fc16 	bl	8007d7e <HAL_SPI_Transmit>
 8001552:	4603      	mov	r3, r0
 8001554:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800155c:	4809      	ldr	r0, [pc, #36]	@ (8001584 <mpu9250_write_register+0x64>)
 800155e:	f005 fee1 	bl	8007324 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 8001568:	4808      	ldr	r0, [pc, #32]	@ (800158c <mpu9250_write_register+0x6c>)
 800156a:	f7ff fda9 	bl	80010c0 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <mpu9250_write_register+0x70>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8001574:	2001      	movs	r0, #1
 8001576:	f004 ff97 	bl	80064a8 <HAL_Delay>
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40020400 	.word	0x40020400
 8001588:	200002a8 	.word	0x200002a8
 800158c:	0800dd28 	.word	0x0800dd28
 8001590:	20000250 	.word	0x20000250

08001594 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 800159a:	483c      	ldr	r0, [pc, #240]	@ (800168c <mpu9250_init+0xf8>)
 800159c:	f7ff fd90 	bl	80010c0 <send_bluetooth_message>
    HAL_Delay(200);
 80015a0:	20c8      	movs	r0, #200	@ 0xc8
 80015a2:	f004 ff81 	bl	80064a8 <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 80015a6:	2180      	movs	r1, #128	@ 0x80
 80015a8:	206b      	movs	r0, #107	@ 0x6b
 80015aa:	f7ff ffb9 	bl	8001520 <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 80015ae:	20fa      	movs	r0, #250	@ 0xfa
 80015b0:	f004 ff7a 	bl	80064a8 <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 80015b4:	2100      	movs	r1, #0
 80015b6:	206b      	movs	r0, #107	@ 0x6b
 80015b8:	f7ff ffb2 	bl	8001520 <mpu9250_write_register>
    HAL_Delay(50);
 80015bc:	2032      	movs	r0, #50	@ 0x32
 80015be:	f004 ff73 	bl	80064a8 <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 80015c2:	2101      	movs	r1, #1
 80015c4:	206b      	movs	r0, #107	@ 0x6b
 80015c6:	f7ff ffab 	bl	8001520 <mpu9250_write_register>
    HAL_Delay(50);
 80015ca:	2032      	movs	r0, #50	@ 0x32
 80015cc:	f004 ff6c 	bl	80064a8 <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 80015d0:	2100      	movs	r1, #0
 80015d2:	206c      	movs	r0, #108	@ 0x6c
 80015d4:	f7ff ffa4 	bl	8001520 <mpu9250_write_register>
    HAL_Delay(10);
 80015d8:	200a      	movs	r0, #10
 80015da:	f004 ff65 	bl	80064a8 <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 80015de:	206a      	movs	r0, #106	@ 0x6a
 80015e0:	f7ff ff58 	bl	8001494 <mpu9250_read_register>
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4619      	mov	r1, r3
 80015f4:	206a      	movs	r0, #106	@ 0x6a
 80015f6:	f7ff ff93 	bl	8001520 <mpu9250_write_register>
     HAL_Delay(10);
 80015fa:	200a      	movs	r0, #10
 80015fc:	f004 ff54 	bl	80064a8 <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 8001600:	2104      	movs	r1, #4
 8001602:	2019      	movs	r0, #25
 8001604:	f7ff ff8c 	bl	8001520 <mpu9250_write_register>
    HAL_Delay(10);
 8001608:	200a      	movs	r0, #10
 800160a:	f004 ff4d 	bl	80064a8 <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 800160e:	2102      	movs	r1, #2
 8001610:	201a      	movs	r0, #26
 8001612:	f7ff ff85 	bl	8001520 <mpu9250_write_register>
    HAL_Delay(10);
 8001616:	200a      	movs	r0, #10
 8001618:	f004 ff46 	bl	80064a8 <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 800161c:	2108      	movs	r1, #8
 800161e:	201b      	movs	r0, #27
 8001620:	f7ff ff7e 	bl	8001520 <mpu9250_write_register>
    HAL_Delay(10);
 8001624:	200a      	movs	r0, #10
 8001626:	f004 ff3f 	bl	80064a8 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 800162a:	2108      	movs	r1, #8
 800162c:	201c      	movs	r0, #28
 800162e:	f7ff ff77 	bl	8001520 <mpu9250_write_register>
    HAL_Delay(10);
 8001632:	200a      	movs	r0, #10
 8001634:	f004 ff38 	bl	80064a8 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 8001638:	2102      	movs	r1, #2
 800163a:	201d      	movs	r0, #29
 800163c:	f7ff ff70 	bl	8001520 <mpu9250_write_register>
    HAL_Delay(10);
 8001640:	200a      	movs	r0, #10
 8001642:	f004 ff31 	bl	80064a8 <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001646:	2075      	movs	r0, #117	@ 0x75
 8001648:	f7ff ff24 	bl	8001494 <mpu9250_read_register>
 800164c:	4603      	mov	r3, r0
 800164e:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	4619      	mov	r1, r3
 8001654:	480e      	ldr	r0, [pc, #56]	@ (8001690 <mpu9250_init+0xfc>)
 8001656:	f7ff fd49 	bl	80010ec <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	2b70      	cmp	r3, #112	@ 0x70
 800165e:	d009      	beq.n	8001674 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	4619      	mov	r1, r3
 8001664:	480b      	ldr	r0, [pc, #44]	@ (8001694 <mpu9250_init+0x100>)
 8001666:	f7ff fd41 	bl	80010ec <send_bluetooth_printf>
        mpu9250_initialized=false;
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <mpu9250_init+0x104>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
        return false;
 8001670:	2300      	movs	r3, #0
 8001672:	e006      	b.n	8001682 <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8001674:	4809      	ldr	r0, [pc, #36]	@ (800169c <mpu9250_init+0x108>)
 8001676:	f7ff fd23 	bl	80010c0 <send_bluetooth_message>
    mpu9250_initialized=true;
 800167a:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <mpu9250_init+0x104>)
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
    return true;
 8001680:	2301      	movs	r3, #1
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	0800dd50 	.word	0x0800dd50
 8001690:	0800dd7c 	.word	0x0800dd7c
 8001694:	0800dd90 	.word	0x0800dd90
 8001698:	20000250 	.word	0x20000250
 800169c:	0800ddb8 	.word	0x0800ddb8

080016a0 <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 80016a6:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <mpu9250_calibrate_bias+0xa4>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f083 0301 	eor.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <mpu9250_calibrate_bias+0x1c>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 80016b4:	4824      	ldr	r0, [pc, #144]	@ (8001748 <mpu9250_calibrate_bias+0xa8>)
 80016b6:	f7ff fd03 	bl	80010c0 <send_bluetooth_message>
        return;
 80016ba:	e03f      	b.n	800173c <mpu9250_calibrate_bias+0x9c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 80016bc:	4823      	ldr	r0, [pc, #140]	@ (800174c <mpu9250_calibrate_bias+0xac>)
 80016be:	f7ff fcff 	bl	80010c0 <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 100;
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <mpu9250_calibrate_bias+0xb0>)
 80016c4:	2264      	movs	r2, #100	@ 0x64
 80016c6:	609a      	str	r2, [r3, #8]
    //float sum_x = 0, sum_y = 0, sum_z = 0;
    float sum_z = 0;
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	e014      	b.n	80016fe <mpu9250_calibrate_bias+0x5e>
        mpu9250_read_gyro();
 80016d4:	f000 f87c 	bl	80017d0 <mpu9250_read_gyro>
        //sum_x += gyro.gyro_x;
        //sum_y += gyro.gyro_y;
        sum_z += gyro.gyro_z;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <mpu9250_calibrate_bias+0xb4>)
 80016da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 80016f2:	2003      	movs	r0, #3
 80016f4:	f004 fed8 	bl	80064a8 <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <mpu9250_calibrate_bias+0xb0>)
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8e5      	bhi.n	80016d4 <mpu9250_calibrate_bias+0x34>
    }

    //enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
    //enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <mpu9250_calibrate_bias+0xb0>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001714:	edd7 6a01 	vldr	s13, [r7, #4]
 8001718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <mpu9250_calibrate_bias+0xb0>)
 800171e:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.calibrated = true;
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <mpu9250_calibrate_bias+0xb0>)
 8001724:	2201      	movs	r2, #1
 8001726:	711a      	strb	r2, [r3, #4]

//    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
//                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
    send_bluetooth_printf("Gyro bias calibrated: Z:%.1f\r\n", enhanced_gyro.gyro_bias_z);
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <mpu9250_calibrate_bias+0xb0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff13 	bl	8000558 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4808      	ldr	r0, [pc, #32]	@ (8001758 <mpu9250_calibrate_bias+0xb8>)
 8001738:	f7ff fcd8 	bl	80010ec <send_bluetooth_printf>
}
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000250 	.word	0x20000250
 8001748:	0800ddcc 	.word	0x0800ddcc
 800174c:	0800ddf8 	.word	0x0800ddf8
 8001750:	20000254 	.word	0x20000254
 8001754:	20000d8c 	.word	0x20000d8c
 8001758:	0800de2c 	.word	0x0800de2c

0800175c <mpu9250_get_gyro_z_compensated>:

/**
 * @brief Get bias-compensated gyro Z value in degrees per second
 */
float mpu9250_get_gyro_z_compensated(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
    if (!enhanced_gyro.calibrated) {
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <mpu9250_get_gyro_z_compensated+0x50>)
 8001764:	791b      	ldrb	r3, [r3, #4]
 8001766:	f083 0301 	eor.w	r3, r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <mpu9250_get_gyro_z_compensated+0x1e>
        return mpu9250_get_gyro_z_dps(); // Fall back to uncompensated
 8001770:	f000 f902 	bl	8001978 <mpu9250_get_gyro_z_dps>
 8001774:	eef0 7a40 	vmov.f32	s15, s0
 8001778:	e013      	b.n	80017a2 <mpu9250_get_gyro_z_compensated+0x46>
    }

    float raw_z_dps = (float)(gyro.gyro_z - enhanced_gyro.gyro_bias_z) / 65.5f;
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <mpu9250_get_gyro_z_compensated+0x54>)
 800177c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <mpu9250_get_gyro_z_compensated+0x50>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001792:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80017b4 <mpu9250_get_gyro_z_compensated+0x58>
 8001796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800179a:	edc7 7a01 	vstr	s15, [r7, #4]
    return raw_z_dps;
 800179e:	edd7 7a01 	vldr	s15, [r7, #4]
}
 80017a2:	eeb0 0a67 	vmov.f32	s0, s15
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000254 	.word	0x20000254
 80017b0:	20000d8c 	.word	0x20000d8c
 80017b4:	42830000 	.word	0x42830000

080017b8 <mpu9250_is_initialized>:

/**
 * @brief Check if MPU9250 is initialized - NEW FUNCTION
 */
bool mpu9250_is_initialized(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
    return mpu9250_initialized;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <mpu9250_is_initialized+0x14>)
 80017be:	781b      	ldrb	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000250 	.word	0x20000250

080017d0 <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 80017d6:	4b25      	ldr	r3, [pc, #148]	@ (800186c <mpu9250_read_gyro+0x9c>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	f083 0301 	eor.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 80017e4:	4822      	ldr	r0, [pc, #136]	@ (8001870 <mpu9250_read_gyro+0xa0>)
 80017e6:	f7ff fc6b 	bl	80010c0 <send_bluetooth_message>
        return;
 80017ea:	e03c      	b.n	8001866 <mpu9250_read_gyro+0x96>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 80017ec:	23c3      	movs	r3, #195	@ 0xc3
 80017ee:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017f6:	481f      	ldr	r0, [pc, #124]	@ (8001874 <mpu9250_read_gyro+0xa4>)
 80017f8:	f005 fd94 	bl	8007324 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80017fc:	1df9      	adds	r1, r7, #7
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	2201      	movs	r2, #1
 8001802:	481d      	ldr	r0, [pc, #116]	@ (8001878 <mpu9250_read_gyro+0xa8>)
 8001804:	f006 fabb 	bl	8007d7e <HAL_SPI_Transmit>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001818:	4816      	ldr	r0, [pc, #88]	@ (8001874 <mpu9250_read_gyro+0xa4>)
 800181a:	f005 fd83 	bl	8007324 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 800181e:	4817      	ldr	r0, [pc, #92]	@ (800187c <mpu9250_read_gyro+0xac>)
 8001820:	f7ff fc4e 	bl	80010c0 <send_bluetooth_message>
        return;
 8001824:	e01f      	b.n	8001866 <mpu9250_read_gyro+0x96>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 8001826:	f107 0108 	add.w	r1, r7, #8
 800182a:	2364      	movs	r3, #100	@ 0x64
 800182c:	2206      	movs	r2, #6
 800182e:	4812      	ldr	r0, [pc, #72]	@ (8001878 <mpu9250_read_gyro+0xa8>)
 8001830:	f006 fbe9 	bl	8008006 <HAL_SPI_Receive>
 8001834:	4603      	mov	r3, r0
 8001836:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800183e:	480d      	ldr	r0, [pc, #52]	@ (8001874 <mpu9250_read_gyro+0xa4>)
 8001840:	f005 fd70 	bl	8007324 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 800184a:	480d      	ldr	r0, [pc, #52]	@ (8001880 <mpu9250_read_gyro+0xb0>)
 800184c:	f7ff fc38 	bl	80010c0 <send_bluetooth_message>
        return;
 8001850:	e009      	b.n	8001866 <mpu9250_read_gyro+0x96>
    }

    // Convert to signed 16-bit values
    //gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
    //gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001852:	7b3b      	ldrb	r3, [r7, #12]
 8001854:	b21b      	sxth	r3, r3
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	7b7b      	ldrb	r3, [r7, #13]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <mpu9250_read_gyro+0xb4>)
 8001864:	809a      	strh	r2, [r3, #4]
}
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000250 	.word	0x20000250
 8001870:	0800de4c 	.word	0x0800de4c
 8001874:	40020400 	.word	0x40020400
 8001878:	200002a8 	.word	0x200002a8
 800187c:	0800de80 	.word	0x0800de80
 8001880:	0800dea4 	.word	0x0800dea4
 8001884:	20000d8c 	.word	0x20000d8c

08001888 <mpu9250_read_accel>:

/**
 * @brief Read raw accelerometer data - FIXED with error checking
 */
void mpu9250_read_accel(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 800188e:	4b2f      	ldr	r3, [pc, #188]	@ (800194c <mpu9250_read_accel+0xc4>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	f083 0301 	eor.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <mpu9250_read_accel+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read accel\r\n");
 800189c:	482c      	ldr	r0, [pc, #176]	@ (8001950 <mpu9250_read_accel+0xc8>)
 800189e:	f7ff fc0f 	bl	80010c0 <send_bluetooth_message>
        return;
 80018a2:	e050      	b.n	8001946 <mpu9250_read_accel+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_ACCEL_XOUT_H | 0x80; // Set read bit
 80018a4:	23bb      	movs	r3, #187	@ 0xbb
 80018a6:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ae:	4829      	ldr	r0, [pc, #164]	@ (8001954 <mpu9250_read_accel+0xcc>)
 80018b0:	f005 fd38 	bl	8007324 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80018b4:	1df9      	adds	r1, r7, #7
 80018b6:	2364      	movs	r3, #100	@ 0x64
 80018b8:	2201      	movs	r2, #1
 80018ba:	4827      	ldr	r0, [pc, #156]	@ (8001958 <mpu9250_read_accel+0xd0>)
 80018bc:	f006 fa5f 	bl	8007d7e <HAL_SPI_Transmit>
 80018c0:	4603      	mov	r3, r0
 80018c2:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <mpu9250_read_accel+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018d0:	4820      	ldr	r0, [pc, #128]	@ (8001954 <mpu9250_read_accel+0xcc>)
 80018d2:	f005 fd27 	bl	8007324 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in accel read\r\n");
 80018d6:	4821      	ldr	r0, [pc, #132]	@ (800195c <mpu9250_read_accel+0xd4>)
 80018d8:	f7ff fbf2 	bl	80010c0 <send_bluetooth_message>
        return;
 80018dc:	e033      	b.n	8001946 <mpu9250_read_accel+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 80018de:	f107 0108 	add.w	r1, r7, #8
 80018e2:	2364      	movs	r3, #100	@ 0x64
 80018e4:	2206      	movs	r2, #6
 80018e6:	481c      	ldr	r0, [pc, #112]	@ (8001958 <mpu9250_read_accel+0xd0>)
 80018e8:	f006 fb8d 	bl	8008006 <HAL_SPI_Receive>
 80018ec:	4603      	mov	r3, r0
 80018ee:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f6:	4817      	ldr	r0, [pc, #92]	@ (8001954 <mpu9250_read_accel+0xcc>)
 80018f8:	f005 fd14 	bl	8007324 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <mpu9250_read_accel+0x82>
        send_bluetooth_message("SPI receive error in accel read\r\n");
 8001902:	4817      	ldr	r0, [pc, #92]	@ (8001960 <mpu9250_read_accel+0xd8>)
 8001904:	f7ff fbdc 	bl	80010c0 <send_bluetooth_message>
        return;
 8001908:	e01d      	b.n	8001946 <mpu9250_read_accel+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.accel_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 800190a:	7a3b      	ldrb	r3, [r7, #8]
 800190c:	b21b      	sxth	r3, r3
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21a      	sxth	r2, r3
 8001912:	7a7b      	ldrb	r3, [r7, #9]
 8001914:	b21b      	sxth	r3, r3
 8001916:	4313      	orrs	r3, r2
 8001918:	b21a      	sxth	r2, r3
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <mpu9250_read_accel+0xdc>)
 800191c:	80da      	strh	r2, [r3, #6]
    gyro.accel_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 800191e:	7abb      	ldrb	r3, [r7, #10]
 8001920:	b21b      	sxth	r3, r3
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21a      	sxth	r2, r3
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <mpu9250_read_accel+0xdc>)
 8001930:	811a      	strh	r2, [r3, #8]
    gyro.accel_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001932:	7b3b      	ldrb	r3, [r7, #12]
 8001934:	b21b      	sxth	r3, r3
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	7b7b      	ldrb	r3, [r7, #13]
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b21a      	sxth	r2, r3
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <mpu9250_read_accel+0xdc>)
 8001944:	815a      	strh	r2, [r3, #10]
}
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000250 	.word	0x20000250
 8001950:	0800dec8 	.word	0x0800dec8
 8001954:	40020400 	.word	0x40020400
 8001958:	200002a8 	.word	0x200002a8
 800195c:	0800df00 	.word	0x0800df00
 8001960:	0800df24 	.word	0x0800df24
 8001964:	20000d8c 	.word	0x20000d8c

08001968 <mpu9250_read_all>:

/**
 * @brief Read all IMU data
 */
void mpu9250_read_all(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
    mpu9250_read_accel();
 800196c:	f7ff ff8c 	bl	8001888 <mpu9250_read_accel>
    mpu9250_read_gyro();
 8001970:	f7ff ff2e 	bl	80017d0 <mpu9250_read_gyro>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <mpu9250_get_gyro_z_dps>:

/**
 * @brief Get gyro Z-axis in degrees per second
 */
float mpu9250_get_gyro_z_dps(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
    // ±500 dps range, 16-bit resolution
    // Sensitivity: 65.5 LSB/(dps)

    return (float)gyro.gyro_z / 65.5f;
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <mpu9250_get_gyro_z_dps+0x2c>)
 800197e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80019a8 <mpu9250_get_gyro_z_dps+0x30>
 800198e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001992:	eef0 7a66 	vmov.f32	s15, s13
}
 8001996:	eeb0 0a67 	vmov.f32	s0, s15
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000d8c 	.word	0x20000d8c
 80019a8:	42830000 	.word	0x42830000

080019ac <mpu9250_send_status>:

/**
 * @brief Get MPU9250 status for debugging - NEW FUNCTION
 */
void mpu9250_send_status(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
                         mpu9250_initialized ? "OK" : "FAILED");
 80019b2:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <mpu9250_send_status+0xa8>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <mpu9250_send_status+0x12>
 80019ba:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <mpu9250_send_status+0xac>)
 80019bc:	e000      	b.n	80019c0 <mpu9250_send_status+0x14>
 80019be:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <mpu9250_send_status+0xb0>)
 80019c0:	4619      	mov	r1, r3
 80019c2:	4827      	ldr	r0, [pc, #156]	@ (8001a60 <mpu9250_send_status+0xb4>)
 80019c4:	f7ff fb92 	bl	80010ec <send_bluetooth_printf>

    if (mpu9250_initialized) {
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <mpu9250_send_status+0xa8>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d03c      	beq.n	8001a4a <mpu9250_send_status+0x9e>
        uint8_t who_am_i = mpu9250_read_register(MPU9250_WHO_AM_I);
 80019d0:	2075      	movs	r0, #117	@ 0x75
 80019d2:	f7ff fd5f 	bl	8001494 <mpu9250_read_register>
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
        uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 80019da:	206a      	movs	r0, #106	@ 0x6a
 80019dc:	f7ff fd5a 	bl	8001494 <mpu9250_read_register>
 80019e0:	4603      	mov	r3, r0
 80019e2:	71bb      	strb	r3, [r7, #6]
        uint8_t pwr_mgmt = mpu9250_read_register(MPU9250_PWR_MGMT_1);
 80019e4:	206b      	movs	r0, #107	@ 0x6b
 80019e6:	f7ff fd55 	bl	8001494 <mpu9250_read_register>
 80019ea:	4603      	mov	r3, r0
 80019ec:	717b      	strb	r3, [r7, #5]

        send_bluetooth_printf("WHO_AM_I:0x%02X USER_CTRL:0x%02X PWR_MGMT:0x%02X\r\n",
 80019ee:	79f9      	ldrb	r1, [r7, #7]
 80019f0:	79ba      	ldrb	r2, [r7, #6]
 80019f2:	797b      	ldrb	r3, [r7, #5]
 80019f4:	481b      	ldr	r0, [pc, #108]	@ (8001a64 <mpu9250_send_status+0xb8>)
 80019f6:	f7ff fb79 	bl	80010ec <send_bluetooth_printf>
                             who_am_i, user_ctrl, pwr_mgmt);

        if (user_ctrl & 0x10) {
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <mpu9250_send_status+0x60>
            send_bluetooth_message("I2C disabled: ✅\r\n");
 8001a04:	4818      	ldr	r0, [pc, #96]	@ (8001a68 <mpu9250_send_status+0xbc>)
 8001a06:	f7ff fb5b 	bl	80010c0 <send_bluetooth_message>
 8001a0a:	e002      	b.n	8001a12 <mpu9250_send_status+0x66>
        } else {
            send_bluetooth_message("I2C disabled: ❌\r\n");
 8001a0c:	4817      	ldr	r0, [pc, #92]	@ (8001a6c <mpu9250_send_status+0xc0>)
 8001a0e:	f7ff fb57 	bl	80010c0 <send_bluetooth_message>
        }

        // Read current sensor values
        mpu9250_read_all();
 8001a12:	f7ff ffa9 	bl	8001968 <mpu9250_read_all>
//        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
//                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001a16:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <mpu9250_send_status+0xc4>)
 8001a18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001a1c:	4619      	mov	r1, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001a1e:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <mpu9250_send_status+0xc4>)
 8001a20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001a24:	461a      	mov	r2, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <mpu9250_send_status+0xc4>)
 8001a28:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001a2c:	4811      	ldr	r0, [pc, #68]	@ (8001a74 <mpu9250_send_status+0xc8>)
 8001a2e:	f7ff fb5d 	bl	80010ec <send_bluetooth_printf>
        send_bluetooth_printf("Gyro Z:%.1f°/s\r\n",mpu9250_get_gyro_z_dps());
 8001a32:	f7ff ffa1 	bl	8001978 <mpu9250_get_gyro_z_dps>
 8001a36:	ee10 3a10 	vmov	r3, s0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd8c 	bl	8000558 <__aeabi_f2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	480c      	ldr	r0, [pc, #48]	@ (8001a78 <mpu9250_send_status+0xcc>)
 8001a46:	f7ff fb51 	bl	80010ec <send_bluetooth_printf>
    }
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000250 	.word	0x20000250
 8001a58:	0800df48 	.word	0x0800df48
 8001a5c:	0800df4c 	.word	0x0800df4c
 8001a60:	0800df54 	.word	0x0800df54
 8001a64:	0800df70 	.word	0x0800df70
 8001a68:	0800dfa4 	.word	0x0800dfa4
 8001a6c:	0800dfb8 	.word	0x0800dfb8
 8001a70:	20000d8c 	.word	0x20000d8c
 8001a74:	0800dfcc 	.word	0x0800dfcc
 8001a78:	0800dfe4 	.word	0x0800dfe4

08001a7c <initialize_hardware_systems>:


/**
 * @brief Initialize all hardware systems and perform diagnostics
 */
static void initialize_hardware_systems(void) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
    //send_bluetooth_message("\r\n" "="*60 "\r\n");
    send_bluetooth_message("🤖 CHAMPIONSHIP MICROMOUSE INITIALIZATION 🤖\r\n");
 8001a80:	4828      	ldr	r0, [pc, #160]	@ (8001b24 <initialize_hardware_systems+0xa8>)
 8001a82:	f7ff fb1d 	bl	80010c0 <send_bluetooth_message>
    //send_bluetooth_message("="*60 "\r\n");

    // Initialize PWM for motors
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6 (MOTOR_IN1)
 8001a86:	2100      	movs	r1, #0
 8001a88:	4827      	ldr	r0, [pc, #156]	@ (8001b28 <initialize_hardware_systems+0xac>)
 8001a8a:	f006 ff69 	bl	8008960 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // PA7 (MOTOR_IN2)
 8001a8e:	2104      	movs	r1, #4
 8001a90:	4825      	ldr	r0, [pc, #148]	@ (8001b28 <initialize_hardware_systems+0xac>)
 8001a92:	f006 ff65 	bl	8008960 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // PB0 (MOTOR_IN3)
 8001a96:	2108      	movs	r1, #8
 8001a98:	4823      	ldr	r0, [pc, #140]	@ (8001b28 <initialize_hardware_systems+0xac>)
 8001a9a:	f006 ff61 	bl	8008960 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PB1 (MOTOR_IN4)
 8001a9e:	210c      	movs	r1, #12
 8001aa0:	4821      	ldr	r0, [pc, #132]	@ (8001b28 <initialize_hardware_systems+0xac>)
 8001aa2:	f006 ff5d 	bl	8008960 <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET); // Enable DRV8833
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aac:	481f      	ldr	r0, [pc, #124]	@ (8001b2c <initialize_hardware_systems+0xb0>)
 8001aae:	f005 fc39 	bl	8007324 <HAL_GPIO_WritePin>

    // Verify ADC GPIO configuration
    verify_adc_gpio_configuration();
 8001ab2:	f000 fd9b 	bl	80025ec <verify_adc_gpio_configuration>
    adc_system_diagnostics();
 8001ab6:	f002 febb 	bl	8004830 <adc_system_diagnostics>

    // Initialize and test MPU9250 gyroscope
    if (mpu9250_init()) {
 8001aba:	f7ff fd6b 	bl	8001594 <mpu9250_init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00f      	beq.n	8001ae4 <initialize_hardware_systems+0x68>
        send_bluetooth_message("✅ MPU9250 gyroscope initialized successfully\r\n");
 8001ac4:	481a      	ldr	r0, [pc, #104]	@ (8001b30 <initialize_hardware_systems+0xb4>)
 8001ac6:	f7ff fafb 	bl	80010c0 <send_bluetooth_message>
        send_bluetooth_message("⚠️ KEEP ROBOT STATIONARY during gyro calibration!\r\n");
 8001aca:	481a      	ldr	r0, [pc, #104]	@ (8001b34 <initialize_hardware_systems+0xb8>)
 8001acc:	f7ff faf8 	bl	80010c0 <send_bluetooth_message>
        HAL_Delay(2000);
 8001ad0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ad4:	f004 fce8 	bl	80064a8 <HAL_Delay>
        mpu9250_calibrate_bias();
 8001ad8:	f7ff fde2 	bl	80016a0 <mpu9250_calibrate_bias>
        send_bluetooth_message("✅ Gyro calibration complete\r\n");
 8001adc:	4816      	ldr	r0, [pc, #88]	@ (8001b38 <initialize_hardware_systems+0xbc>)
 8001ade:	f7ff faef 	bl	80010c0 <send_bluetooth_message>
 8001ae2:	e002      	b.n	8001aea <initialize_hardware_systems+0x6e>
    } else {
        send_bluetooth_message("⚠️ Gyro initialization failed - using basic movement\r\n");
 8001ae4:	4815      	ldr	r0, [pc, #84]	@ (8001b3c <initialize_hardware_systems+0xc0>)
 8001ae6:	f7ff faeb 	bl	80010c0 <send_bluetooth_message>
    }

    // Initialize encoders
    start_encoders();
 8001aea:	f001 ff8f 	bl	8003a0c <start_encoders>
    HAL_Delay(100);
 8001aee:	2064      	movs	r0, #100	@ 0x64
 8001af0:	f004 fcda 	bl	80064a8 <HAL_Delay>

    // Test encoder functionality
    if (get_left_encoder_total() == 0 && get_right_encoder_total() == 0) {
 8001af4:	f001 ff50 	bl	8003998 <get_left_encoder_total>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d108      	bne.n	8001b10 <initialize_hardware_systems+0x94>
 8001afe:	f001 ff55 	bl	80039ac <get_right_encoder_total>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <initialize_hardware_systems+0x94>
        send_bluetooth_message("⚠️ WARNING: Encoders may not be working properly\r\n");
 8001b08:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <initialize_hardware_systems+0xc4>)
 8001b0a:	f7ff fad9 	bl	80010c0 <send_bluetooth_message>
 8001b0e:	e002      	b.n	8001b16 <initialize_hardware_systems+0x9a>
    } else {
        send_bluetooth_message("✅ Encoders initialized and responding\r\n");
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <initialize_hardware_systems+0xc8>)
 8001b12:	f7ff fad5 	bl	80010c0 <send_bluetooth_message>
    }

    // Initialize maze exploration system
    initialize_maze_exploration();
 8001b16:	f000 fe65 	bl	80027e4 <initialize_maze_exploration>

    send_bluetooth_message("✅ All systems initialized successfully!\r\n");
 8001b1a:	480b      	ldr	r0, [pc, #44]	@ (8001b48 <initialize_hardware_systems+0xcc>)
 8001b1c:	f7ff fad0 	bl	80010c0 <send_bluetooth_message>
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	0800dff8 	.word	0x0800dff8
 8001b28:	20000390 	.word	0x20000390
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	0800e02c 	.word	0x0800e02c
 8001b34:	0800e060 	.word	0x0800e060
 8001b38:	0800e098 	.word	0x0800e098
 8001b3c:	0800e0b8 	.word	0x0800e0b8
 8001b40:	0800e0f4 	.word	0x0800e0f4
 8001b44:	0800e12c 	.word	0x0800e12c
 8001b48:	0800e158 	.word	0x0800e158

08001b4c <run_system_diagnostics>:

/**
 * @brief Run comprehensive system diagnostics
 */
static void run_system_diagnostics(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🔧 SYSTEM DIAGNOSTICS 🔧\r\n");
 8001b50:	4821      	ldr	r0, [pc, #132]	@ (8001bd8 <run_system_diagnostics+0x8c>)
 8001b52:	f7ff fab5 	bl	80010c0 <send_bluetooth_message>

    // Test sensors
    update_sensors();
 8001b56:	f002 fd83 	bl	8004660 <update_sensors>
    if (sensors.battery == 0 && sensors.front_left == 0 &&
 8001b5a:	4b20      	ldr	r3, [pc, #128]	@ (8001bdc <run_system_diagnostics+0x90>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d113      	bne.n	8001b8a <run_system_diagnostics+0x3e>
 8001b62:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <run_system_diagnostics+0x90>)
 8001b64:	891b      	ldrh	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10f      	bne.n	8001b8a <run_system_diagnostics+0x3e>
        sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <run_system_diagnostics+0x90>)
 8001b6c:	885b      	ldrh	r3, [r3, #2]
    if (sensors.battery == 0 && sensors.front_left == 0 &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10b      	bne.n	8001b8a <run_system_diagnostics+0x3e>
        sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8001b72:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <run_system_diagnostics+0x90>)
 8001b74:	88db      	ldrh	r3, [r3, #6]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d107      	bne.n	8001b8a <run_system_diagnostics+0x3e>
 8001b7a:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <run_system_diagnostics+0x90>)
 8001b7c:	889b      	ldrh	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <run_system_diagnostics+0x3e>
        send_bluetooth_message("❌ CRITICAL: All sensors reading zero - check connections!\r\n");
 8001b82:	4817      	ldr	r0, [pc, #92]	@ (8001be0 <run_system_diagnostics+0x94>)
 8001b84:	f7ff fa9c 	bl	80010c0 <send_bluetooth_message>
 8001b88:	e004      	b.n	8001b94 <run_system_diagnostics+0x48>
    } else {
        send_bluetooth_message("✅ Sensors responding normally\r\n");
 8001b8a:	4816      	ldr	r0, [pc, #88]	@ (8001be4 <run_system_diagnostics+0x98>)
 8001b8c:	f7ff fa98 	bl	80010c0 <send_bluetooth_message>
        send_sensor_data();
 8001b90:	f7ff fb7e 	bl	8001290 <send_sensor_data>
    }

    // Test battery
    send_battery_status();
 8001b94:	f7ff fc42 	bl	800141c <send_battery_status>

    // Test gyro if available
    if (mpu9250_is_initialized()) {
 8001b98:	f7ff fe0e 	bl	80017b8 <mpu9250_is_initialized>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <run_system_diagnostics+0x5a>
        mpu9250_send_status();
 8001ba2:	f7ff ff03 	bl	80019ac <mpu9250_send_status>
    }

    // Test encoders
    send_encoder_status();
 8001ba6:	f002 f90b 	bl	8003dc0 <send_encoder_status>

    // System health check
    if (system_health_check()) {
 8001baa:	f003 fb3d 	bl	8005228 <system_health_check>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <run_system_diagnostics+0x76>
        send_bluetooth_message("✅ System health check PASSED\r\n");
 8001bb4:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <run_system_diagnostics+0x9c>)
 8001bb6:	f7ff fa83 	bl	80010c0 <send_bluetooth_message>
        system_ready = true;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <run_system_diagnostics+0xa0>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
 8001bc0:	e005      	b.n	8001bce <run_system_diagnostics+0x82>
    } else {
        send_bluetooth_message("⚠️ System health check FAILED - check warnings above\r\n");
 8001bc2:	480b      	ldr	r0, [pc, #44]	@ (8001bf0 <run_system_diagnostics+0xa4>)
 8001bc4:	f7ff fa7c 	bl	80010c0 <send_bluetooth_message>
        system_ready = true;//false;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <run_system_diagnostics+0xa0>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
    }

    send_bluetooth_message("🔧 Diagnostics complete!\r\n");
 8001bce:	4809      	ldr	r0, [pc, #36]	@ (8001bf4 <run_system_diagnostics+0xa8>)
 8001bd0:	f7ff fa76 	bl	80010c0 <send_bluetooth_message>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	0800e184 	.word	0x0800e184
 8001bdc:	20000d7c 	.word	0x20000d7c
 8001be0:	0800e1a8 	.word	0x0800e1a8
 8001be4:	0800e1e8 	.word	0x0800e1e8
 8001be8:	0800e20c 	.word	0x0800e20c
 8001bec:	20000db2 	.word	0x20000db2
 8001bf0:	0800e230 	.word	0x0800e230
 8001bf4:	0800e26c 	.word	0x0800e26c

08001bf8 <send_periodic_status>:


/**
 * @brief Send periodic status updates
 */
static void send_periodic_status(void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8001bfe:	f004 fc47 	bl	8006490 <HAL_GetTick>
 8001c02:	6078      	str	r0, [r7, #4]

    // Send status every 10 seconds when not exploring
    if (current_time - last_status_time > 10000 && !exploration_started) {
 8001c04:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <send_periodic_status+0x80>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d916      	bls.n	8001c42 <send_periodic_status+0x4a>
 8001c14:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <send_periodic_status+0x84>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	f083 0301 	eor.w	r3, r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00f      	beq.n	8001c42 <send_periodic_status+0x4a>
        send_battery_status();
 8001c22:	f7ff fbfb 	bl	800141c <send_battery_status>

        if (system_ready) {
 8001c26:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <send_periodic_status+0x88>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <send_periodic_status+0x3e>
            send_bluetooth_message("💚 System ready - Press LEFT button to start exploration\r\n");
 8001c2e:	4815      	ldr	r0, [pc, #84]	@ (8001c84 <send_periodic_status+0x8c>)
 8001c30:	f7ff fa46 	bl	80010c0 <send_bluetooth_message>
 8001c34:	e002      	b.n	8001c3c <send_periodic_status+0x44>
        } else {
            send_bluetooth_message("🔴 System not ready - Check diagnostics\r\n");
 8001c36:	4814      	ldr	r0, [pc, #80]	@ (8001c88 <send_periodic_status+0x90>)
 8001c38:	f7ff fa42 	bl	80010c0 <send_bluetooth_message>
        }

        last_status_time = current_time;
 8001c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c78 <send_periodic_status+0x80>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
    }

    // Blink LED to show system is alive
    if (current_time - last_blink_time > 2000) {
 8001c42:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <send_periodic_status+0x94>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c4e:	d90f      	bls.n	8001c70 <send_periodic_status+0x78>
        if (system_ready) {
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <send_periodic_status+0x88>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <send_periodic_status+0x6a>
            HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8001c58:	2110      	movs	r1, #16
 8001c5a:	480d      	ldr	r0, [pc, #52]	@ (8001c90 <send_periodic_status+0x98>)
 8001c5c:	f005 fb7b 	bl	8007356 <HAL_GPIO_TogglePin>
 8001c60:	e003      	b.n	8001c6a <send_periodic_status+0x72>
        } else {
            // Fast blink if system not ready
            HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8001c62:	2120      	movs	r1, #32
 8001c64:	480a      	ldr	r0, [pc, #40]	@ (8001c90 <send_periodic_status+0x98>)
 8001c66:	f005 fb76 	bl	8007356 <HAL_GPIO_TogglePin>
        }
        last_blink_time = current_time;
 8001c6a:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <send_periodic_status+0x94>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6013      	str	r3, [r2, #0]
    }
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000db4 	.word	0x20000db4
 8001c7c:	20000db3 	.word	0x20000db3
 8001c80:	20000db2 	.word	0x20000db2
 8001c84:	0800e28c 	.word	0x0800e28c
 8001c88:	0800e2cc 	.word	0x0800e2cc
 8001c8c:	20000db8 	.word	0x20000db8
 8001c90:	40020400 	.word	0x40020400

08001c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c98:	f004 fb94 	bl	80063c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c9c:	f000 f8ca 	bl	8001e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca0:	f000 fbc2 	bl	8002428 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ca4:	f000 f92e 	bl	8001f04 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001ca8:	f000 f97e 	bl	8001fa8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001cac:	f000 f9b2 	bl	8002014 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cb0:	f000 fa50 	bl	8002154 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001cb4:	f000 fb3a 	bl	800232c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001cb8:	f000 fb8c 	bl	80023d4 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001cbc:	f000 fa9e 	bl	80021fc <MX_TIM3_Init>


  // main.c — after SystemClock_Config();


  dwt_delay_init(HAL_RCC_GetHCLKFreq());
 8001cc0:	f005 ffa0 	bl	8007c04 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fd66 	bl	8002798 <dwt_delay_init>


  /* USER CODE BEGIN 2 */
  // Initialize all hardware systems
  initialize_hardware_systems();
 8001ccc:	f7ff fed6 	bl	8001a7c <initialize_hardware_systems>

  // Run system diagnostics
  run_system_diagnostics();
 8001cd0:	f7ff ff3c 	bl	8001b4c <run_system_diagnostics>

  // Play startup sequence
  play_startup_tone();
 8001cd4:	f7ff f954 	bl	8000f80 <play_startup_tone>
  led_sequence_startup();
 8001cd8:	f003 fa0a 	bl	80050f0 <led_sequence_startup>

  // Send startup message
  send_bluetooth_message("\r\n🎮 MICROMOUSE CONTROL READY 🎮\r\n");
 8001cdc:	4847      	ldr	r0, [pc, #284]	@ (8001dfc <main+0x168>)
 8001cde:	f7ff f9ef 	bl	80010c0 <send_bluetooth_message>
  send_bluetooth_message("LEFT button: Start exploration\r\n");
 8001ce2:	4847      	ldr	r0, [pc, #284]	@ (8001e00 <main+0x16c>)
 8001ce4:	f7ff f9ec 	bl	80010c0 <send_bluetooth_message>
  send_bluetooth_message("RIGHT button: Status/Emergency stop\r\n");
 8001ce8:	4846      	ldr	r0, [pc, #280]	@ (8001e04 <main+0x170>)
 8001cea:	f7ff f9e9 	bl	80010c0 <send_bluetooth_message>
  send_bluetooth_message("Waiting for user input...\r\n");
 8001cee:	4846      	ldr	r0, [pc, #280]	@ (8001e08 <main+0x174>)
 8001cf0:	f7ff f9e6 	bl	80010c0 <send_bluetooth_message>

    // Initial status
  last_status_time = HAL_GetTick();
 8001cf4:	f004 fbcc 	bl	8006490 <HAL_GetTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a44      	ldr	r2, [pc, #272]	@ (8001e0c <main+0x178>)
 8001cfc:	6013      	str	r3, [r2, #0]
  last_blink_time = HAL_GetTick();
 8001cfe:	f004 fbc7 	bl	8006490 <HAL_GetTick>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a42      	ldr	r2, [pc, #264]	@ (8001e10 <main+0x17c>)
 8001d06:	6013      	str	r3, [r2, #0]
//
//	}

	//fusion_reset();
	//fusion_set_heading_ref_to_current();  // lock the present heading
	fusion_align_entry(600, 3000);
 8001d08:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001d0c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001d10:	f004 f97a 	bl	8006008 <fusion_align_entry>

    /* USER CODE BEGIN 3 */

	//update_sensors();
	// Handle button events
	if (button_pressed == 1) {
 8001d14:	4b3f      	ldr	r3, [pc, #252]	@ (8001e14 <main+0x180>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d133      	bne.n	8001d86 <main+0xf2>
		button_pressed = 0;
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e14 <main+0x180>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]

		if (!exploration_started && system_ready) {
 8001d24:	4b3c      	ldr	r3, [pc, #240]	@ (8001e18 <main+0x184>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	f083 0301 	eor.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <main+0xc4>
 8001d32:	4b3a      	ldr	r3, [pc, #232]	@ (8001e1c <main+0x188>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00e      	beq.n	8001d58 <main+0xc4>
			send_bluetooth_message("\r\n🚀 STARTING MAZE EXPLORATION! 🚀\r\n");
 8001d3a:	4839      	ldr	r0, [pc, #228]	@ (8001e20 <main+0x18c>)
 8001d3c:	f7ff f9c0 	bl	80010c0 <send_bluetooth_message>
			play_confirmation_tone();
 8001d40:	f7ff f93a 	bl	8000fb8 <play_confirmation_tone>
			HAL_Delay(1000);
 8001d44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d48:	f004 fbae 	bl	80064a8 <HAL_Delay>

			exploration_started = true;
 8001d4c:	4b32      	ldr	r3, [pc, #200]	@ (8001e18 <main+0x184>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
			run_maze_exploration_sequence();
 8001d52:	f001 fcdd 	bl	8003710 <run_maze_exploration_sequence>
 8001d56:	e016      	b.n	8001d86 <main+0xf2>

		} else if (is_exploration_complete()) {
 8001d58:	f001 fd70 	bl	800383c <is_exploration_complete>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <main+0xda>
			send_bluetooth_message("\r\n🏁 EXPLORATION COMPLETE - Ready for speed run! 🏁\r\n");
 8001d62:	4830      	ldr	r0, [pc, #192]	@ (8001e24 <main+0x190>)
 8001d64:	f7ff f9ac 	bl	80010c0 <send_bluetooth_message>
			send_performance_metrics();
 8001d68:	f7ff faea 	bl	8001340 <send_performance_metrics>
 8001d6c:	e00b      	b.n	8001d86 <main+0xf2>

		} else if (!system_ready) {
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <main+0x188>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <main+0xf2>
			send_bluetooth_message("⚠️ System not ready - check diagnostics!\r\n");
 8001d7c:	482a      	ldr	r0, [pc, #168]	@ (8001e28 <main+0x194>)
 8001d7e:	f7ff f99f 	bl	80010c0 <send_bluetooth_message>
			play_error_tone();
 8001d82:	f7ff f957 	bl	8001034 <play_error_tone>
		}
	}

	if (button_pressed == 2) {
 8001d86:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <main+0x180>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d128      	bne.n	8001de2 <main+0x14e>
		button_pressed = 0;
 8001d90:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <main+0x180>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]

		// Right button - emergency stop or reset
		if (exploration_started && !is_exploration_complete()) {
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <main+0x184>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d012      	beq.n	8001dc4 <main+0x130>
 8001d9e:	f001 fd4d 	bl	800383c <is_exploration_complete>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f083 0301 	eor.w	r3, r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00a      	beq.n	8001dc4 <main+0x130>
			send_bluetooth_message("🛑 EMERGENCY STOP!\r\n");
 8001dae:	481f      	ldr	r0, [pc, #124]	@ (8001e2c <main+0x198>)
 8001db0:	f7ff f986 	bl	80010c0 <send_bluetooth_message>
			stop_motors();
 8001db4:	f001 ff0e 	bl	8003bd4 <stop_motors>
			play_error_tone();
 8001db8:	f7ff f93c 	bl	8001034 <play_error_tone>
			exploration_started = false;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <main+0x184>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e00e      	b.n	8001de2 <main+0x14e>
		} else {
			// Send detailed status
			send_bluetooth_message("\r\n📊 DETAILED STATUS REPORT 📊\r\n");
 8001dc4:	481a      	ldr	r0, [pc, #104]	@ (8001e30 <main+0x19c>)
 8001dc6:	f7ff f97b 	bl	80010c0 <send_bluetooth_message>
			send_maze_state();
 8001dca:	f7ff f9b5 	bl	8001138 <send_maze_state>
			send_sensor_data();
 8001dce:	f7ff fa5f 	bl	8001290 <send_sensor_data>
			send_position_data();
 8001dd2:	f7ff fa8b 	bl	80012ec <send_position_data>
			if (exploration_started) {
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <main+0x184>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <main+0x14e>
				send_performance_metrics();
 8001dde:	f7ff faaf 	bl	8001340 <send_performance_metrics>
			}
		}
	}

	// Send periodic status updates
	send_periodic_status();
 8001de2:	f7ff ff09 	bl	8001bf8 <send_periodic_status>

	// If exploration is running, let it continue
	if (exploration_started && !is_exploration_complete()) {
 8001de6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <main+0x184>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <main+0x15e>
 8001dee:	f001 fd25 	bl	800383c <is_exploration_complete>
		// The exploration runs in run_maze_exploration_sequence()
		// and handles its own loop until complete
	}

	// Small delay to prevent overwhelming the system
	HAL_Delay(50);
 8001df2:	2032      	movs	r0, #50	@ 0x32
 8001df4:	f004 fb58 	bl	80064a8 <HAL_Delay>
	if (button_pressed == 1) {
 8001df8:	e78c      	b.n	8001d14 <main+0x80>
 8001dfa:	bf00      	nop
 8001dfc:	0800e2f8 	.word	0x0800e2f8
 8001e00:	0800e320 	.word	0x0800e320
 8001e04:	0800e344 	.word	0x0800e344
 8001e08:	0800e36c 	.word	0x0800e36c
 8001e0c:	20000db4 	.word	0x20000db4
 8001e10:	20000db8 	.word	0x20000db8
 8001e14:	20000db0 	.word	0x20000db0
 8001e18:	20000db3 	.word	0x20000db3
 8001e1c:	20000db2 	.word	0x20000db2
 8001e20:	0800e388 	.word	0x0800e388
 8001e24:	0800e3b4 	.word	0x0800e3b4
 8001e28:	0800e3f0 	.word	0x0800e3f0
 8001e2c:	0800e420 	.word	0x0800e420
 8001e30:	0800e438 	.word	0x0800e438

08001e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b094      	sub	sp, #80	@ 0x50
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	2230      	movs	r2, #48	@ 0x30
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f009 fbf8 	bl	800b638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <SystemClock_Config+0xc8>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	4a26      	ldr	r2, [pc, #152]	@ (8001efc <SystemClock_Config+0xc8>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e68:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <SystemClock_Config+0xc8>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <SystemClock_Config+0xcc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a20      	ldr	r2, [pc, #128]	@ (8001f00 <SystemClock_Config+0xcc>)
 8001e7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <SystemClock_Config+0xcc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e94:	2301      	movs	r3, #1
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e98:	2310      	movs	r3, #16
 8001e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ea4:	2310      	movs	r3, #16
 8001ea6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ea8:	23a8      	movs	r3, #168	@ 0xa8
 8001eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb4:	f107 0320 	add.w	r3, r7, #32
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f005 fa7f 	bl	80073bc <HAL_RCC_OscConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ec4:	f000 fbce 	bl	8002664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec8:	230f      	movs	r3, #15
 8001eca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f005 fce1 	bl	80078ac <HAL_RCC_ClockConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ef0:	f000 fbb8 	bl	8002664 <Error_Handler>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3750      	adds	r7, #80	@ 0x50
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40007000 	.word	0x40007000

08001f04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f16:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f18:	4a21      	ldr	r2, [pc, #132]	@ (8001fa0 <MX_ADC1_Init+0x9c>)
 8001f1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f3e:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f44:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f46:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <MX_ADC1_Init+0xa0>)
 8001f48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f64:	480d      	ldr	r0, [pc, #52]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f66:	f004 fac3 	bl	80064f0 <HAL_ADC_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f70:	f000 fb78 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f80:	463b      	mov	r3, r7
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <MX_ADC1_Init+0x98>)
 8001f86:	f004 fc77 	bl	8006878 <HAL_ADC_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f90:	f000 fb68 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000260 	.word	0x20000260
 8001fa0:	40012000 	.word	0x40012000
 8001fa4:	0f000001 	.word	0x0f000001

08001fa8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fac:	4b17      	ldr	r3, [pc, #92]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fae:	4a18      	ldr	r2, [pc, #96]	@ (8002010 <MX_SPI2_Init+0x68>)
 8001fb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fba:	4b14      	ldr	r3, [pc, #80]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fda:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fdc:	2230      	movs	r2, #48	@ 0x30
 8001fde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe6:	4b09      	ldr	r3, [pc, #36]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fec:	4b07      	ldr	r3, [pc, #28]	@ (800200c <MX_SPI2_Init+0x64>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <MX_SPI2_Init+0x64>)
 8001ff4:	220a      	movs	r2, #10
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ff8:	4804      	ldr	r0, [pc, #16]	@ (800200c <MX_SPI2_Init+0x64>)
 8001ffa:	f005 fe37 	bl	8007c6c <HAL_SPI_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002004:	f000 fb2e 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	200002a8 	.word	0x200002a8
 8002010:	40003800 	.word	0x40003800

08002014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b096      	sub	sp, #88	@ 0x58
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	615a      	str	r2, [r3, #20]
 8002044:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2220      	movs	r2, #32
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f009 faf3 	bl	800b638 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002052:	4b3e      	ldr	r3, [pc, #248]	@ (800214c <MX_TIM1_Init+0x138>)
 8002054:	4a3e      	ldr	r2, [pc, #248]	@ (8002150 <MX_TIM1_Init+0x13c>)
 8002056:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8002058:	4b3c      	ldr	r3, [pc, #240]	@ (800214c <MX_TIM1_Init+0x138>)
 800205a:	2214      	movs	r2, #20
 800205c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <MX_TIM1_Init+0x138>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8002064:	4b39      	ldr	r3, [pc, #228]	@ (800214c <MX_TIM1_Init+0x138>)
 8002066:	22c8      	movs	r2, #200	@ 0xc8
 8002068:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b38      	ldr	r3, [pc, #224]	@ (800214c <MX_TIM1_Init+0x138>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002070:	4b36      	ldr	r3, [pc, #216]	@ (800214c <MX_TIM1_Init+0x138>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002076:	4b35      	ldr	r3, [pc, #212]	@ (800214c <MX_TIM1_Init+0x138>)
 8002078:	2280      	movs	r2, #128	@ 0x80
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800207c:	4833      	ldr	r0, [pc, #204]	@ (800214c <MX_TIM1_Init+0x138>)
 800207e:	f006 fbc7 	bl	8008810 <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002088:	f000 faec 	bl	8002664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002090:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002092:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002096:	4619      	mov	r1, r3
 8002098:	482c      	ldr	r0, [pc, #176]	@ (800214c <MX_TIM1_Init+0x138>)
 800209a:	f007 f85b 	bl	8009154 <HAL_TIM_ConfigClockSource>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80020a4:	f000 fade 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020a8:	4828      	ldr	r0, [pc, #160]	@ (800214c <MX_TIM1_Init+0x138>)
 80020aa:	f006 fc00 	bl	80088ae <HAL_TIM_PWM_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80020b4:	f000 fad6 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020c4:	4619      	mov	r1, r3
 80020c6:	4821      	ldr	r0, [pc, #132]	@ (800214c <MX_TIM1_Init+0x138>)
 80020c8:	f007 fc10 	bl	80098ec <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80020d2:	f000 fac7 	bl	8002664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d6:	2360      	movs	r3, #96	@ 0x60
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 80020da:	2364      	movs	r3, #100	@ 0x64
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020e2:	2300      	movs	r3, #0
 80020e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f6:	2208      	movs	r2, #8
 80020f8:	4619      	mov	r1, r3
 80020fa:	4814      	ldr	r0, [pc, #80]	@ (800214c <MX_TIM1_Init+0x138>)
 80020fc:	f006 ff68 	bl	8008fd0 <HAL_TIM_PWM_ConfigChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002106:	f000 faad 	bl	8002664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800211e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002122:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	4619      	mov	r1, r3
 800212c:	4807      	ldr	r0, [pc, #28]	@ (800214c <MX_TIM1_Init+0x138>)
 800212e:	f007 fc4b 	bl	80099c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002138:	f000 fa94 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800213c:	4803      	ldr	r0, [pc, #12]	@ (800214c <MX_TIM1_Init+0x138>)
 800213e:	f002 fdb9 	bl	8004cb4 <HAL_TIM_MspPostInit>

}
 8002142:	bf00      	nop
 8002144:	3758      	adds	r7, #88	@ 0x58
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000300 	.word	0x20000300
 8002150:	40010000 	.word	0x40010000

08002154 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	@ 0x30
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	2224      	movs	r2, #36	@ 0x24
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f009 fa68 	bl	800b638 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002170:	4b21      	ldr	r3, [pc, #132]	@ (80021f8 <MX_TIM2_Init+0xa4>)
 8002172:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002176:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002178:	4b1f      	ldr	r3, [pc, #124]	@ (80021f8 <MX_TIM2_Init+0xa4>)
 800217a:	2200      	movs	r2, #0
 800217c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217e:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <MX_TIM2_Init+0xa4>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002184:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <MX_TIM2_Init+0xa4>)
 8002186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800218a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <MX_TIM2_Init+0xa4>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002192:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <MX_TIM2_Init+0xa4>)
 8002194:	2280      	movs	r2, #128	@ 0x80
 8002196:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002198:	2303      	movs	r3, #3
 800219a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021a0:	2301      	movs	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021b0:	2301      	movs	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	4619      	mov	r1, r3
 80021c2:	480d      	ldr	r0, [pc, #52]	@ (80021f8 <MX_TIM2_Init+0xa4>)
 80021c4:	f006 fce0 	bl	8008b88 <HAL_TIM_Encoder_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80021ce:	f000 fa49 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4806      	ldr	r0, [pc, #24]	@ (80021f8 <MX_TIM2_Init+0xa4>)
 80021e0:	f007 fb84 	bl	80098ec <HAL_TIMEx_MasterConfigSynchronization>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80021ea:	f000 fa3b 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	3730      	adds	r7, #48	@ 0x30
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000348 	.word	0x20000348

080021fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	@ 0x38
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002202:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002210:	f107 0320 	add.w	r3, r7, #32
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
 8002228:	615a      	str	r2, [r3, #20]
 800222a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800222c:	4b3d      	ldr	r3, [pc, #244]	@ (8002324 <MX_TIM3_Init+0x128>)
 800222e:	4a3e      	ldr	r2, [pc, #248]	@ (8002328 <MX_TIM3_Init+0x12c>)
 8002230:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8002232:	4b3c      	ldr	r3, [pc, #240]	@ (8002324 <MX_TIM3_Init+0x128>)
 8002234:	2204      	movs	r2, #4
 8002236:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002238:	4b3a      	ldr	r3, [pc, #232]	@ (8002324 <MX_TIM3_Init+0x128>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 800223e:	4b39      	ldr	r3, [pc, #228]	@ (8002324 <MX_TIM3_Init+0x128>)
 8002240:	f240 3246 	movw	r2, #838	@ 0x346
 8002244:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002246:	4b37      	ldr	r3, [pc, #220]	@ (8002324 <MX_TIM3_Init+0x128>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800224c:	4b35      	ldr	r3, [pc, #212]	@ (8002324 <MX_TIM3_Init+0x128>)
 800224e:	2280      	movs	r2, #128	@ 0x80
 8002250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002252:	4834      	ldr	r0, [pc, #208]	@ (8002324 <MX_TIM3_Init+0x128>)
 8002254:	f006 fadc 	bl	8008810 <HAL_TIM_Base_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800225e:	f000 fa01 	bl	8002664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002262:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002266:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002268:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800226c:	4619      	mov	r1, r3
 800226e:	482d      	ldr	r0, [pc, #180]	@ (8002324 <MX_TIM3_Init+0x128>)
 8002270:	f006 ff70 	bl	8009154 <HAL_TIM_ConfigClockSource>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800227a:	f000 f9f3 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800227e:	4829      	ldr	r0, [pc, #164]	@ (8002324 <MX_TIM3_Init+0x128>)
 8002280:	f006 fb15 	bl	80088ae <HAL_TIM_PWM_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800228a:	f000 f9eb 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002296:	f107 0320 	add.w	r3, r7, #32
 800229a:	4619      	mov	r1, r3
 800229c:	4821      	ldr	r0, [pc, #132]	@ (8002324 <MX_TIM3_Init+0x128>)
 800229e:	f007 fb25 	bl	80098ec <HAL_TIMEx_MasterConfigSynchronization>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022a8:	f000 f9dc 	bl	8002664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ac:	2360      	movs	r3, #96	@ 0x60
 80022ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	2200      	movs	r2, #0
 80022c0:	4619      	mov	r1, r3
 80022c2:	4818      	ldr	r0, [pc, #96]	@ (8002324 <MX_TIM3_Init+0x128>)
 80022c4:	f006 fe84 	bl	8008fd0 <HAL_TIM_PWM_ConfigChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022ce:	f000 f9c9 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2204      	movs	r2, #4
 80022d6:	4619      	mov	r1, r3
 80022d8:	4812      	ldr	r0, [pc, #72]	@ (8002324 <MX_TIM3_Init+0x128>)
 80022da:	f006 fe79 	bl	8008fd0 <HAL_TIM_PWM_ConfigChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80022e4:	f000 f9be 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	2208      	movs	r2, #8
 80022ec:	4619      	mov	r1, r3
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <MX_TIM3_Init+0x128>)
 80022f0:	f006 fe6e 	bl	8008fd0 <HAL_TIM_PWM_ConfigChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80022fa:	f000 f9b3 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	220c      	movs	r2, #12
 8002302:	4619      	mov	r1, r3
 8002304:	4807      	ldr	r0, [pc, #28]	@ (8002324 <MX_TIM3_Init+0x128>)
 8002306:	f006 fe63 	bl	8008fd0 <HAL_TIM_PWM_ConfigChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002310:	f000 f9a8 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002314:	4803      	ldr	r0, [pc, #12]	@ (8002324 <MX_TIM3_Init+0x128>)
 8002316:	f002 fccd 	bl	8004cb4 <HAL_TIM_MspPostInit>

}
 800231a:	bf00      	nop
 800231c:	3738      	adds	r7, #56	@ 0x38
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000390 	.word	0x20000390
 8002328:	40000400 	.word	0x40000400

0800232c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	@ 0x30
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	2224      	movs	r2, #36	@ 0x24
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f009 f97c 	bl	800b638 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002348:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <MX_TIM4_Init+0xa0>)
 800234a:	4a21      	ldr	r2, [pc, #132]	@ (80023d0 <MX_TIM4_Init+0xa4>)
 800234c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800234e:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <MX_TIM4_Init+0xa0>)
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002354:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <MX_TIM4_Init+0xa0>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800235a:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <MX_TIM4_Init+0xa0>)
 800235c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002360:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <MX_TIM4_Init+0xa0>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002368:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <MX_TIM4_Init+0xa0>)
 800236a:	2280      	movs	r2, #128	@ 0x80
 800236c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800236e:	2303      	movs	r3, #3
 8002370:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002376:	2301      	movs	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002386:	2301      	movs	r3, #1
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	4619      	mov	r1, r3
 8002398:	480c      	ldr	r0, [pc, #48]	@ (80023cc <MX_TIM4_Init+0xa0>)
 800239a:	f006 fbf5 	bl	8008b88 <HAL_TIM_Encoder_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80023a4:	f000 f95e 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	@ (80023cc <MX_TIM4_Init+0xa0>)
 80023b6:	f007 fa99 	bl	80098ec <HAL_TIMEx_MasterConfigSynchronization>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80023c0:	f000 f950 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023c4:	bf00      	nop
 80023c6:	3730      	adds	r7, #48	@ 0x30
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	200003d8 	.word	0x200003d8
 80023d0:	40000800 	.word	0x40000800

080023d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023d8:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <MX_USART6_UART_Init+0x4c>)
 80023da:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <MX_USART6_UART_Init+0x50>)
 80023dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80023de:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <MX_USART6_UART_Init+0x4c>)
 80023e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <MX_USART6_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <MX_USART6_UART_Init+0x4c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <MX_USART6_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023f8:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <MX_USART6_UART_Init+0x4c>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fe:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <MX_USART6_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <MX_USART6_UART_Init+0x4c>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800240a:	4805      	ldr	r0, [pc, #20]	@ (8002420 <MX_USART6_UART_Init+0x4c>)
 800240c:	f007 fb42 	bl	8009a94 <HAL_UART_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002416:	f000 f925 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000420 	.word	0x20000420
 8002424:	40011400 	.word	0x40011400

08002428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	4b4b      	ldr	r3, [pc, #300]	@ (8002570 <MX_GPIO_Init+0x148>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a4a      	ldr	r2, [pc, #296]	@ (8002570 <MX_GPIO_Init+0x148>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b48      	ldr	r3, [pc, #288]	@ (8002570 <MX_GPIO_Init+0x148>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4b44      	ldr	r3, [pc, #272]	@ (8002570 <MX_GPIO_Init+0x148>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a43      	ldr	r2, [pc, #268]	@ (8002570 <MX_GPIO_Init+0x148>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b41      	ldr	r3, [pc, #260]	@ (8002570 <MX_GPIO_Init+0x148>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4b3d      	ldr	r3, [pc, #244]	@ (8002570 <MX_GPIO_Init+0x148>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	4a3c      	ldr	r2, [pc, #240]	@ (8002570 <MX_GPIO_Init+0x148>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	6313      	str	r3, [r2, #48]	@ 0x30
 8002486:	4b3a      	ldr	r3, [pc, #232]	@ (8002570 <MX_GPIO_Init+0x148>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002498:	4836      	ldr	r0, [pc, #216]	@ (8002574 <MX_GPIO_Init+0x14c>)
 800249a:	f004 ff43 	bl	8007324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 800249e:	2200      	movs	r2, #0
 80024a0:	f241 3130 	movw	r1, #4912	@ 0x1330
 80024a4:	4834      	ldr	r0, [pc, #208]	@ (8002578 <MX_GPIO_Init+0x150>)
 80024a6:	f004 ff3d 	bl	8007324 <HAL_GPIO_WritePin>
                          |EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 80024aa:	2200      	movs	r2, #0
 80024ac:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80024b0:	4832      	ldr	r0, [pc, #200]	@ (800257c <MX_GPIO_Init+0x154>)
 80024b2:	f004 ff37 	bl	8007324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 80024b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024bc:	2301      	movs	r3, #1
 80024be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	4619      	mov	r1, r3
 80024ce:	4829      	ldr	r0, [pc, #164]	@ (8002574 <MX_GPIO_Init+0x14c>)
 80024d0:	f004 fda4 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 80024d4:	2302      	movs	r3, #2
 80024d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	4619      	mov	r1, r3
 80024e8:	4824      	ldr	r0, [pc, #144]	@ (800257c <MX_GPIO_Init+0x154>)
 80024ea:	f004 fd97 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 80024ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80024fe:	f107 030c 	add.w	r3, r7, #12
 8002502:	4619      	mov	r1, r3
 8002504:	481c      	ldr	r0, [pc, #112]	@ (8002578 <MX_GPIO_Init+0x150>)
 8002506:	f004 fd89 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_LEFT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 800250a:	f241 3330 	movw	r3, #4912	@ 0x1330
 800250e:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	4619      	mov	r1, r3
 8002522:	4815      	ldr	r0, [pc, #84]	@ (8002578 <MX_GPIO_Init+0x150>)
 8002524:	f004 fd7a 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_RIGHT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin;
 8002528:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800252c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252e:	2301      	movs	r3, #1
 8002530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	4619      	mov	r1, r3
 8002540:	480e      	ldr	r0, [pc, #56]	@ (800257c <MX_GPIO_Init+0x154>)
 8002542:	f004 fd6b 	bl	800701c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2105      	movs	r1, #5
 800254a:	2007      	movs	r0, #7
 800254c:	f004 fc9d 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002550:	2007      	movs	r0, #7
 8002552:	f004 fcb6 	bl	8006ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2105      	movs	r1, #5
 800255a:	2028      	movs	r0, #40	@ 0x28
 800255c:	f004 fc95 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002560:	2028      	movs	r0, #40	@ 0x28
 8002562:	f004 fcae 	bl	8006ec2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002566:	bf00      	nop
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40020800 	.word	0x40020800
 8002578:	40020400 	.word	0x40020400
 800257c:	40020000 	.word	0x40020000

08002580 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 800258a:	f003 ff81 	bl	8006490 <HAL_GetTick>
 800258e:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 8002590:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x58>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2bc8      	cmp	r3, #200	@ 0xc8
 800259a:	d919      	bls.n	80025d0 <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d109      	bne.n	80025b6 <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 80025a8:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <HAL_GPIO_EXTI_Callback+0x60>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 80025ae:	480d      	ldr	r0, [pc, #52]	@ (80025e4 <HAL_GPIO_EXTI_Callback+0x64>)
 80025b0:	f7fe fd86 	bl	80010c0 <send_bluetooth_message>
 80025b4:	e009      	b.n	80025ca <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025bc:	d105      	bne.n	80025ca <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80025c0:	2202      	movs	r2, #2
 80025c2:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 80025c4:	4808      	ldr	r0, [pc, #32]	@ (80025e8 <HAL_GPIO_EXTI_Callback+0x68>)
 80025c6:	f7fe fd7b 	bl	80010c0 <send_bluetooth_message>
        }
        last_press = current_time;
 80025ca:	4a03      	ldr	r2, [pc, #12]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x58>)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6013      	str	r3, [r2, #0]
    }
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000dbc 	.word	0x20000dbc
 80025dc:	20000db0 	.word	0x20000db0
 80025e0:	20000db1 	.word	0x20000db1
 80025e4:	0800e460 	.word	0x0800e460
 80025e8:	0800e478 	.word	0x0800e478

080025ec <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002600:	2301      	movs	r3, #1
 8002602:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002604:	2303      	movs	r3, #3
 8002606:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	4619      	mov	r1, r3
 8002610:	4812      	ldr	r0, [pc, #72]	@ (800265c <verify_adc_gpio_configuration+0x70>)
 8002612:	f004 fd03 	bl	800701c <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002616:	2304      	movs	r3, #4
 8002618:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	4619      	mov	r1, r3
 800261e:	480f      	ldr	r0, [pc, #60]	@ (800265c <verify_adc_gpio_configuration+0x70>)
 8002620:	f004 fcfc 	bl	800701c <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002624:	2308      	movs	r3, #8
 8002626:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	4619      	mov	r1, r3
 800262c:	480b      	ldr	r0, [pc, #44]	@ (800265c <verify_adc_gpio_configuration+0x70>)
 800262e:	f004 fcf5 	bl	800701c <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002632:	2310      	movs	r3, #16
 8002634:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4808      	ldr	r0, [pc, #32]	@ (800265c <verify_adc_gpio_configuration+0x70>)
 800263c:	f004 fcee 	bl	800701c <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002640:	2320      	movs	r3, #32
 8002642:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4804      	ldr	r0, [pc, #16]	@ (800265c <verify_adc_gpio_configuration+0x70>)
 800264a:	f004 fce7 	bl	800701c <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 800264e:	4804      	ldr	r0, [pc, #16]	@ (8002660 <verify_adc_gpio_configuration+0x74>)
 8002650:	f7fe fd36 	bl	80010c0 <send_bluetooth_message>
}
 8002654:	bf00      	nop
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40020000 	.word	0x40020000
 8002660:	0800e490 	.word	0x0800e490

08002664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
}
 800266a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 800266c:	2110      	movs	r1, #16
 800266e:	4806      	ldr	r0, [pc, #24]	@ (8002688 <Error_Handler+0x24>)
 8002670:	f004 fe71 	bl	8007356 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8002674:	2120      	movs	r1, #32
 8002676:	4804      	ldr	r0, [pc, #16]	@ (8002688 <Error_Handler+0x24>)
 8002678:	f004 fe6d 	bl	8007356 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 800267c:	2064      	movs	r0, #100	@ 0x64
 800267e:	f003 ff13 	bl	80064a8 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002682:	bf00      	nop
 8002684:	e7f2      	b.n	800266c <Error_Handler+0x8>
 8002686:	bf00      	nop
 8002688:	40020400 	.word	0x40020400

0800268c <queue_init>:
} BFSQueue;

static BFSQueue bfs_queue;

/* Queue Operations */
static void queue_init(BFSQueue* q) {
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
    q->head = q->tail = 0;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <queue_empty>:

static int queue_empty(BFSQueue* q) {
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
    return q->head == q->tail;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80026c8:	429a      	cmp	r2, r3
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <queue_push>:

static void queue_push(BFSQueue* q, Position pos) {
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	e883 0006 	stmia.w	r3, {r1, r2}
    if (q->tail < QUEUE_MAX_SIZE) {
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80026f2:	2b9f      	cmp	r3, #159	@ 0x9f
 80026f4:	dc0e      	bgt.n	8002714 <queue_push+0x36>
        q->queue[q->tail++] = pos;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80026fc:	1c59      	adds	r1, r3, #1
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	f8c2 1504 	str.w	r1, [r2, #1284]	@ 0x504
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	1d3a      	adds	r2, r7, #4
 800270c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002710:	e883 0003 	stmia.w	r3, {r0, r1}
    }
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <queue_pop>:

static Position queue_pop(BFSQueue* q) {
 8002720:	b490      	push	{r4, r7}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
    return q->queue[q->head++];
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8002730:	1c59      	adds	r1, r3, #1
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	f8c2 1500 	str.w	r1, [r2, #1280]	@ 0x500
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	460c      	mov	r4, r1
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002746:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bc90      	pop	{r4, r7}
 8002752:	4770      	bx	lr

08002754 <dwt_delay_us>:
static uint32_t dwt_cycles_per_us;

void dwt_delay_us(uint32_t us) {
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <dwt_delay_us+0x3c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * dwt_cycles_per_us;
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <dwt_delay_us+0x40>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks) { __NOP(); }
 800276e:	e000      	b.n	8002772 <dwt_delay_us+0x1e>
 8002770:	bf00      	nop
 8002772:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <dwt_delay_us+0x3c>)
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	429a      	cmp	r2, r3
 800277e:	d8f7      	bhi.n	8002770 <dwt_delay_us+0x1c>
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e0001000 	.word	0xe0001000
 8002794:	200012e0 	.word	0x200012e0

08002798 <dwt_delay_init>:
void dwt_delay_init(uint32_t cpu_hz) {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <dwt_delay_init+0x3c>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a0b      	ldr	r2, [pc, #44]	@ (80027d4 <dwt_delay_init+0x3c>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027aa:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80027ac:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <dwt_delay_init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a09      	ldr	r2, [pc, #36]	@ (80027d8 <dwt_delay_init+0x40>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6013      	str	r3, [r2, #0]
    dwt_cycles_per_us = cpu_hz / 1000000U; // e.g., 84 for 84 MHz
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a08      	ldr	r2, [pc, #32]	@ (80027dc <dwt_delay_init+0x44>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	4a07      	ldr	r2, [pc, #28]	@ (80027e0 <dwt_delay_init+0x48>)
 80027c4:	6013      	str	r3, [r2, #0]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000edf0 	.word	0xe000edf0
 80027d8:	e0001000 	.word	0xe0001000
 80027dc:	431bde83 	.word	0x431bde83
 80027e0:	200012e0 	.word	0x200012e0

080027e4 <initialize_maze_exploration>:


/**
 * @brief Initialize maze for exploration
 */
void initialize_maze_exploration(void) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n=== INITIALIZING MAZE EXPLORATION ===\r\n");
 80027ea:	4863      	ldr	r0, [pc, #396]	@ (8002978 <initialize_maze_exploration+0x194>)
 80027ec:	f7fe fc68 	bl	80010c0 <send_bluetooth_message>

    // Initialize maze structure
    for (int x = 0; x < MAZE_SIZE; x++) {
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e04a      	b.n	800288c <initialize_maze_exploration+0xa8>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	e041      	b.n	8002880 <initialize_maze_exploration+0x9c>
            maze[x][y].distance = MAX_DISTANCE;
 80027fc:	495f      	ldr	r1, [pc, #380]	@ (800297c <initialize_maze_exploration+0x198>)
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	4413      	add	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	440b      	add	r3, r1
 8002810:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002814:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 8002816:	4959      	ldr	r1, [pc, #356]	@ (800297c <initialize_maze_exploration+0x198>)
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	4413      	add	r3, r2
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	440b      	add	r3, r1
 800282a:	3304      	adds	r3, #4
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 8002830:	4952      	ldr	r1, [pc, #328]	@ (800297c <initialize_maze_exploration+0x198>)
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	4413      	add	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	440b      	add	r3, r1
 8002844:	330c      	adds	r3, #12
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

            // Initialize all walls as unknown (false)
            for (int dir = 0; dir < 4; dir++) {
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	e011      	b.n	8002874 <initialize_maze_exploration+0x90>
                maze[x][y].walls[dir] = false;
 8002850:	494a      	ldr	r1, [pc, #296]	@ (800297c <initialize_maze_exploration+0x198>)
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	4413      	add	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	18ca      	adds	r2, r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4413      	add	r3, r2
 8002868:	3305      	adds	r3, #5
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
            for (int dir = 0; dir < 4; dir++) {
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3301      	adds	r3, #1
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b03      	cmp	r3, #3
 8002878:	ddea      	ble.n	8002850 <initialize_maze_exploration+0x6c>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3301      	adds	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b0b      	cmp	r3, #11
 8002884:	ddba      	ble.n	80027fc <initialize_maze_exploration+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3301      	adds	r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b0b      	cmp	r3, #11
 8002890:	ddb1      	ble.n	80027f6 <initialize_maze_exploration+0x12>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002892:	2300      	movs	r3, #0
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	e025      	b.n	80028e4 <initialize_maze_exploration+0x100>
        maze[i][0].walls[SOUTH] = true;                    // Bottom boundary
 8002898:	4938      	ldr	r1, [pc, #224]	@ (800297c <initialize_maze_exploration+0x198>)
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	019b      	lsls	r3, r3, #6
 80028a4:	440b      	add	r3, r1
 80028a6:	3307      	adds	r3, #7
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true;          // Top boundary
 80028ac:	4933      	ldr	r1, [pc, #204]	@ (800297c <initialize_maze_exploration+0x198>)
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	019b      	lsls	r3, r3, #6
 80028b8:	440b      	add	r3, r1
 80028ba:	33b5      	adds	r3, #181	@ 0xb5
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;                     // Left boundary
 80028c0:	4a2e      	ldr	r2, [pc, #184]	@ (800297c <initialize_maze_exploration+0x198>)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	3308      	adds	r3, #8
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;           // Right boundary
 80028ce:	4a2b      	ldr	r2, [pc, #172]	@ (800297c <initialize_maze_exploration+0x198>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	4413      	add	r3, r2
 80028d6:	f603 0346 	addw	r3, r3, #2118	@ 0x846
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b0b      	cmp	r3, #11
 80028e8:	ddd6      	ble.n	8002898 <initialize_maze_exploration+0xb4>
    }

    // Set maze center coordinates
    maze_center_x1 = MAZE_SIZE / 2 - 1;
 80028ea:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <initialize_maze_exploration+0x19c>)
 80028ec:	2205      	movs	r2, #5
 80028ee:	601a      	str	r2, [r3, #0]
    maze_center_y1 = MAZE_SIZE / 2 - 1;
 80028f0:	4b24      	ldr	r3, [pc, #144]	@ (8002984 <initialize_maze_exploration+0x1a0>)
 80028f2:	2205      	movs	r2, #5
 80028f4:	601a      	str	r2, [r3, #0]
    maze_center_x2 = MAZE_SIZE / 2;
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <initialize_maze_exploration+0x1a4>)
 80028f8:	2206      	movs	r2, #6
 80028fa:	601a      	str	r2, [r3, #0]
    maze_center_y2 = MAZE_SIZE / 2;
 80028fc:	4b23      	ldr	r3, [pc, #140]	@ (800298c <initialize_maze_exploration+0x1a8>)
 80028fe:	2206      	movs	r2, #6
 8002900:	601a      	str	r2, [r3, #0]

    // Initialize robot state
    robot.x = 0;
 8002902:	4b23      	ldr	r3, [pc, #140]	@ (8002990 <initialize_maze_exploration+0x1ac>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8002908:	4b21      	ldr	r3, [pc, #132]	@ (8002990 <initialize_maze_exploration+0x1ac>)
 800290a:	2200      	movs	r2, #0
 800290c:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 800290e:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <initialize_maze_exploration+0x1ac>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 8002914:	4b1e      	ldr	r3, [pc, #120]	@ (8002990 <initialize_maze_exploration+0x1ac>)
 8002916:	2200      	movs	r2, #0
 8002918:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 800291a:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <initialize_maze_exploration+0x1ac>)
 800291c:	2200      	movs	r2, #0
 800291e:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 8002920:	4b1b      	ldr	r3, [pc, #108]	@ (8002990 <initialize_maze_exploration+0x1ac>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]

    // Mark starting position
    maze[0][0].visited = true;
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <initialize_maze_exploration+0x198>)
 8002928:	2201      	movs	r2, #1
 800292a:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 800292c:	4b13      	ldr	r3, [pc, #76]	@ (800297c <initialize_maze_exploration+0x198>)
 800292e:	2201      	movs	r2, #1
 8002930:	60da      	str	r2, [r3, #12]

    // Reset exploration flags
    exploration_completed = 0;
 8002932:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <initialize_maze_exploration+0x1b0>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
    optimal_path_calculated = 0;
 8002938:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <initialize_maze_exploration+0x1b4>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]

    send_bluetooth_printf("Maze Size: %dx%d\r\n", MAZE_SIZE, MAZE_SIZE);
 800293e:	220c      	movs	r2, #12
 8002940:	210c      	movs	r1, #12
 8002942:	4816      	ldr	r0, [pc, #88]	@ (800299c <initialize_maze_exploration+0x1b8>)
 8002944:	f7fe fbd2 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Center: (%d,%d) to (%d,%d)\r\n",
 8002948:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <initialize_maze_exploration+0x19c>)
 800294a:	6819      	ldr	r1, [r3, #0]
 800294c:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <initialize_maze_exploration+0x1a0>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <initialize_maze_exploration+0x1a4>)
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <initialize_maze_exploration+0x1a8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	4603      	mov	r3, r0
 800295c:	4810      	ldr	r0, [pc, #64]	@ (80029a0 <initialize_maze_exploration+0x1bc>)
 800295e:	f7fe fbc5 	bl	80010ec <send_bluetooth_printf>
                         maze_center_x1, maze_center_y1, maze_center_x2, maze_center_y2);
    send_bluetooth_message("Maze exploration initialized successfully!\r\n");
 8002962:	4810      	ldr	r0, [pc, #64]	@ (80029a4 <initialize_maze_exploration+0x1c0>)
 8002964:	f7fe fbac 	bl	80010c0 <send_bluetooth_message>
    send_bluetooth_message("==========================================\r\n");
 8002968:	480f      	ldr	r0, [pc, #60]	@ (80029a8 <initialize_maze_exploration+0x1c4>)
 800296a:	f7fe fba9 	bl	80010c0 <send_bluetooth_message>
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	0800e4b8 	.word	0x0800e4b8
 800297c:	20000468 	.word	0x20000468
 8002980:	20000dc0 	.word	0x20000dc0
 8002984:	20000dc4 	.word	0x20000dc4
 8002988:	20000dc8 	.word	0x20000dc8
 800298c:	20000dcc 	.word	0x20000dcc
 8002990:	20000d68 	.word	0x20000d68
 8002994:	20000dd0 	.word	0x20000dd0
 8002998:	20000dd4 	.word	0x20000dd4
 800299c:	0800e4e4 	.word	0x0800e4e4
 80029a0:	0800e4f8 	.word	0x0800e4f8
 80029a4:	0800e518 	.word	0x0800e518
 80029a8:	0800e548 	.word	0x0800e548

080029ac <flood_fill_algorithm>:

/**
 * @brief Flood fill algorithm implementation
 */
void flood_fill_algorithm(void) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b098      	sub	sp, #96	@ 0x60
 80029b0:	af00      	add	r7, sp, #0
    // Initialize all distances to MAX_DISTANCE
    for (int x = 0; x < MAZE_SIZE; x++) {
 80029b2:	2300      	movs	r3, #0
 80029b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029b6:	e018      	b.n	80029ea <flood_fill_algorithm+0x3e>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80029b8:	2300      	movs	r3, #0
 80029ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029bc:	e00f      	b.n	80029de <flood_fill_algorithm+0x32>
            maze[x][y].distance = MAX_DISTANCE;
 80029be:	4992      	ldr	r1, [pc, #584]	@ (8002c08 <flood_fill_algorithm+0x25c>)
 80029c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029cc:	4413      	add	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	440b      	add	r3, r1
 80029d2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80029d6:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 80029d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029da:	3301      	adds	r3, #1
 80029dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029e0:	2b0b      	cmp	r3, #11
 80029e2:	ddec      	ble.n	80029be <flood_fill_algorithm+0x12>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80029e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029e6:	3301      	adds	r3, #1
 80029e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029ec:	2b0b      	cmp	r3, #11
 80029ee:	dde3      	ble.n	80029b8 <flood_fill_algorithm+0xc>
        }
    }

    // Initialize queue
    queue_init(&bfs_queue);
 80029f0:	4886      	ldr	r0, [pc, #536]	@ (8002c0c <flood_fill_algorithm+0x260>)
 80029f2:	f7ff fe4b 	bl	800268c <queue_init>

    // Set goal distances and add to queue
    if (!robot.center_reached) {
 80029f6:	4b86      	ldr	r3, [pc, #536]	@ (8002c10 <flood_fill_algorithm+0x264>)
 80029f8:	7b1b      	ldrb	r3, [r3, #12]
 80029fa:	f083 0301 	eor.w	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d06c      	beq.n	8002ade <flood_fill_algorithm+0x132>
        // Heading to center
        maze[maze_center_x1][maze_center_y1].distance = 0;
 8002a04:	4b83      	ldr	r3, [pc, #524]	@ (8002c14 <flood_fill_algorithm+0x268>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b83      	ldr	r3, [pc, #524]	@ (8002c18 <flood_fill_algorithm+0x26c>)
 8002a0a:	6819      	ldr	r1, [r3, #0]
 8002a0c:	487e      	ldr	r0, [pc, #504]	@ (8002c08 <flood_fill_algorithm+0x25c>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	4403      	add	r3, r0
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
        maze[maze_center_x2][maze_center_y1].distance = 0;
 8002a20:	4b7e      	ldr	r3, [pc, #504]	@ (8002c1c <flood_fill_algorithm+0x270>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b7c      	ldr	r3, [pc, #496]	@ (8002c18 <flood_fill_algorithm+0x26c>)
 8002a26:	6819      	ldr	r1, [r3, #0]
 8002a28:	4877      	ldr	r0, [pc, #476]	@ (8002c08 <flood_fill_algorithm+0x25c>)
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4403      	add	r3, r0
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
        maze[maze_center_x1][maze_center_y2].distance = 0;
 8002a3c:	4b75      	ldr	r3, [pc, #468]	@ (8002c14 <flood_fill_algorithm+0x268>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b77      	ldr	r3, [pc, #476]	@ (8002c20 <flood_fill_algorithm+0x274>)
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	4870      	ldr	r0, [pc, #448]	@ (8002c08 <flood_fill_algorithm+0x25c>)
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	4403      	add	r3, r0
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
        maze[maze_center_x2][maze_center_y2].distance = 0;
 8002a58:	4b70      	ldr	r3, [pc, #448]	@ (8002c1c <flood_fill_algorithm+0x270>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b70      	ldr	r3, [pc, #448]	@ (8002c20 <flood_fill_algorithm+0x274>)
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	4869      	ldr	r0, [pc, #420]	@ (8002c08 <flood_fill_algorithm+0x25c>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	4403      	add	r3, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

        queue_push(&bfs_queue, (Position){maze_center_x1, maze_center_y1});
 8002a74:	4b67      	ldr	r3, [pc, #412]	@ (8002c14 <flood_fill_algorithm+0x268>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a7a:	4b67      	ldr	r3, [pc, #412]	@ (8002c18 <flood_fill_algorithm+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a80:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a84:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a88:	4860      	ldr	r0, [pc, #384]	@ (8002c0c <flood_fill_algorithm+0x260>)
 8002a8a:	f7ff fe28 	bl	80026de <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x2, maze_center_y1});
 8002a8e:	4b63      	ldr	r3, [pc, #396]	@ (8002c1c <flood_fill_algorithm+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a94:	4b60      	ldr	r3, [pc, #384]	@ (8002c18 <flood_fill_algorithm+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a9e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002aa2:	485a      	ldr	r0, [pc, #360]	@ (8002c0c <flood_fill_algorithm+0x260>)
 8002aa4:	f7ff fe1b 	bl	80026de <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x1, maze_center_y2});
 8002aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8002c14 <flood_fill_algorithm+0x268>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aae:	4b5c      	ldr	r3, [pc, #368]	@ (8002c20 <flood_fill_algorithm+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002abc:	4853      	ldr	r0, [pc, #332]	@ (8002c0c <flood_fill_algorithm+0x260>)
 8002abe:	f7ff fe0e 	bl	80026de <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x2, maze_center_y2});
 8002ac2:	4b56      	ldr	r3, [pc, #344]	@ (8002c1c <flood_fill_algorithm+0x270>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	4b55      	ldr	r3, [pc, #340]	@ (8002c20 <flood_fill_algorithm+0x274>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	f107 031c 	add.w	r3, r7, #28
 8002ad2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ad6:	484d      	ldr	r0, [pc, #308]	@ (8002c0c <flood_fill_algorithm+0x260>)
 8002ad8:	f7ff fe01 	bl	80026de <queue_push>
 8002adc:	e00d      	b.n	8002afa <flood_fill_algorithm+0x14e>
    } else {
        // Returning to start
        maze[0][0].distance = 0;
 8002ade:	4b4a      	ldr	r3, [pc, #296]	@ (8002c08 <flood_fill_algorithm+0x25c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
        queue_push(&bfs_queue, (Position){0, 0});
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002af4:	4845      	ldr	r0, [pc, #276]	@ (8002c0c <flood_fill_algorithm+0x260>)
 8002af6:	f7ff fdf2 	bl	80026de <queue_push>
    }

    // Flood fill propagation
    int updates = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	657b      	str	r3, [r7, #84]	@ 0x54
    while (!queue_empty(&bfs_queue)) {
 8002afe:	e074      	b.n	8002bea <flood_fill_algorithm+0x23e>
        Position current = queue_pop(&bfs_queue);
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	4941      	ldr	r1, [pc, #260]	@ (8002c0c <flood_fill_algorithm+0x260>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fe0a 	bl	8002720 <queue_pop>
        int x = current.x;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        int y = current.y;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Check all four directions
        for (int dir = 0; dir < 4; dir++) {
 8002b14:	2300      	movs	r3, #0
 8002b16:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b18:	e064      	b.n	8002be4 <flood_fill_algorithm+0x238>
            if (maze[x][y].walls[dir]) continue; // Wall blocks this direction
 8002b1a:	493b      	ldr	r1, [pc, #236]	@ (8002c08 <flood_fill_algorithm+0x25c>)
 8002b1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b28:	4413      	add	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	18ca      	adds	r2, r1, r3
 8002b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b30:	4413      	add	r3, r2
 8002b32:	3305      	adds	r3, #5
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d14e      	bne.n	8002bd8 <flood_fill_algorithm+0x22c>

            int nx = x + dx[dir];
 8002b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c24 <flood_fill_algorithm+0x278>)
 8002b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b44:	4413      	add	r3, r2
 8002b46:	647b      	str	r3, [r7, #68]	@ 0x44
            int ny = y + dy[dir];
 8002b48:	4a37      	ldr	r2, [pc, #220]	@ (8002c28 <flood_fill_algorithm+0x27c>)
 8002b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b52:	4413      	add	r3, r2
 8002b54:	643b      	str	r3, [r7, #64]	@ 0x40

            // Check bounds
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002b56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db3f      	blt.n	8002bdc <flood_fill_algorithm+0x230>
 8002b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5e:	2b0b      	cmp	r3, #11
 8002b60:	dc3c      	bgt.n	8002bdc <flood_fill_algorithm+0x230>
 8002b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db39      	blt.n	8002bdc <flood_fill_algorithm+0x230>
 8002b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b6a:	2b0b      	cmp	r3, #11
 8002b6c:	dc36      	bgt.n	8002bdc <flood_fill_algorithm+0x230>

            int new_distance = maze[x][y].distance + 1;
 8002b6e:	4926      	ldr	r1, [pc, #152]	@ (8002c08 <flood_fill_algorithm+0x25c>)
 8002b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b7c:	4413      	add	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	440b      	add	r3, r1
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (new_distance < maze[nx][ny].distance) {
 8002b88:	491f      	ldr	r1, [pc, #124]	@ (8002c08 <flood_fill_algorithm+0x25c>)
 8002b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b96:	4413      	add	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	440b      	add	r3, r1
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	da1c      	bge.n	8002bde <flood_fill_algorithm+0x232>
                maze[nx][ny].distance = new_distance;
 8002ba4:	4918      	ldr	r1, [pc, #96]	@ (8002c08 <flood_fill_algorithm+0x25c>)
 8002ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bb2:	4413      	add	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	440b      	add	r3, r1
 8002bb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bba:	601a      	str	r2, [r3, #0]
                queue_push(&bfs_queue, (Position){nx, ny});
 8002bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002bca:	4810      	ldr	r0, [pc, #64]	@ (8002c0c <flood_fill_algorithm+0x260>)
 8002bcc:	f7ff fd87 	bl	80026de <queue_push>
                updates++;
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bd6:	e002      	b.n	8002bde <flood_fill_algorithm+0x232>
            if (maze[x][y].walls[dir]) continue; // Wall blocks this direction
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <flood_fill_algorithm+0x232>
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002bdc:	bf00      	nop
        for (int dir = 0; dir < 4; dir++) {
 8002bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002be0:	3301      	adds	r3, #1
 8002be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	dd97      	ble.n	8002b1a <flood_fill_algorithm+0x16e>
    while (!queue_empty(&bfs_queue)) {
 8002bea:	4808      	ldr	r0, [pc, #32]	@ (8002c0c <flood_fill_algorithm+0x260>)
 8002bec:	f7ff fd62 	bl	80026b4 <queue_empty>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d084      	beq.n	8002b00 <flood_fill_algorithm+0x154>
            }
        }
    }

    send_bluetooth_printf("Flood fill complete: %d updates\r\n", updates);
 8002bf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bf8:	480c      	ldr	r0, [pc, #48]	@ (8002c2c <flood_fill_algorithm+0x280>)
 8002bfa:	f7fe fa77 	bl	80010ec <send_bluetooth_printf>
}
 8002bfe:	bf00      	nop
 8002c00:	3760      	adds	r7, #96	@ 0x60
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000468 	.word	0x20000468
 8002c0c:	20000dd8 	.word	0x20000dd8
 8002c10:	20000d68 	.word	0x20000d68
 8002c14:	20000dc0 	.word	0x20000dc0
 8002c18:	20000dc4 	.word	0x20000dc4
 8002c1c:	20000dc8 	.word	0x20000dc8
 8002c20:	20000dcc 	.word	0x20000dcc
 8002c24:	0800f564 	.word	0x0800f564
 8002c28:	0800f574 	.word	0x0800f574
 8002c2c:	0800e578 	.word	0x0800e578

08002c30 <get_best_direction>:

/**
 * @brief Get best direction to move based on flood fill values
 */
int get_best_direction(void) {
 8002c30:	b480      	push	{r7}
 8002c32:	b093      	sub	sp, #76	@ 0x4c
 8002c34:	af00      	add	r7, sp, #0
    int best_dir = robot.direction;
 8002c36:	4b93      	ldr	r3, [pc, #588]	@ (8002e84 <get_best_direction+0x254>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	647b      	str	r3, [r7, #68]	@ 0x44
    int min_distance = MAX_DISTANCE;
 8002c3c:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002c40:	643b      	str	r3, [r7, #64]	@ 0x40
    int min_visits = 999;
 8002c42:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    bool found_unvisited = false;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Direction priority: forward, right, left, backward
    int priority[4];
    priority[0] = robot.direction;                    // Forward
 8002c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002e84 <get_best_direction+0x254>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	603b      	str	r3, [r7, #0]
    priority[1] = (robot.direction + 1) % 4;         // Right
 8002c54:	4b8b      	ldr	r3, [pc, #556]	@ (8002e84 <get_best_direction+0x254>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	425a      	negs	r2, r3
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	f002 0203 	and.w	r2, r2, #3
 8002c64:	bf58      	it	pl
 8002c66:	4253      	negpl	r3, r2
 8002c68:	607b      	str	r3, [r7, #4]
    priority[2] = (robot.direction + 3) % 4;         // Left
 8002c6a:	4b86      	ldr	r3, [pc, #536]	@ (8002e84 <get_best_direction+0x254>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	3303      	adds	r3, #3
 8002c70:	425a      	negs	r2, r3
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	bf58      	it	pl
 8002c7c:	4253      	negpl	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
    priority[3] = (robot.direction + 2) % 4;         // Backward
 8002c80:	4b80      	ldr	r3, [pc, #512]	@ (8002e84 <get_best_direction+0x254>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	3302      	adds	r3, #2
 8002c86:	425a      	negs	r2, r3
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	f002 0203 	and.w	r2, r2, #3
 8002c90:	bf58      	it	pl
 8002c92:	4253      	negpl	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

    // First pass: prioritize unvisited cells
    for (int p = 0; p < 4; p++) {
 8002c96:	2300      	movs	r3, #0
 8002c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c9a:	e068      	b.n	8002d6e <get_best_direction+0x13e>
        int dir = priority[p];
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	3348      	adds	r3, #72	@ 0x48
 8002ca2:	443b      	add	r3, r7
 8002ca4:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002ca8:	61bb      	str	r3, [r7, #24]

        // Check if there's a wall in this direction
        if (maze[robot.x][robot.y].walls[dir]) continue;
 8002caa:	4b76      	ldr	r3, [pc, #472]	@ (8002e84 <get_best_direction+0x254>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b75      	ldr	r3, [pc, #468]	@ (8002e84 <get_best_direction+0x254>)
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	4875      	ldr	r0, [pc, #468]	@ (8002e88 <get_best_direction+0x258>)
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	18c2      	adds	r2, r0, r3
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3305      	adds	r3, #5
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d149      	bne.n	8002d62 <get_best_direction+0x132>

        int nx = robot.x + dx[dir];
 8002cce:	4b6d      	ldr	r3, [pc, #436]	@ (8002e84 <get_best_direction+0x254>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	496e      	ldr	r1, [pc, #440]	@ (8002e8c <get_best_direction+0x25c>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cda:	4413      	add	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
        int ny = robot.y + dy[dir];
 8002cde:	4b69      	ldr	r3, [pc, #420]	@ (8002e84 <get_best_direction+0x254>)
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	496b      	ldr	r1, [pc, #428]	@ (8002e90 <get_best_direction+0x260>)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cea:	4413      	add	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]

        // Check bounds
        if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db38      	blt.n	8002d66 <get_best_direction+0x136>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b0b      	cmp	r3, #11
 8002cf8:	dc35      	bgt.n	8002d66 <get_best_direction+0x136>
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db32      	blt.n	8002d66 <get_best_direction+0x136>
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b0b      	cmp	r3, #11
 8002d04:	dc2f      	bgt.n	8002d66 <get_best_direction+0x136>

        // Prioritize unvisited cells
        if (maze[nx][ny].visit_count == 0) {
 8002d06:	4960      	ldr	r1, [pc, #384]	@ (8002e88 <get_best_direction+0x258>)
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	440b      	add	r3, r1
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d122      	bne.n	8002d68 <get_best_direction+0x138>
            found_unvisited = true;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            if (maze[nx][ny].distance < min_distance) {
 8002d28:	4957      	ldr	r1, [pc, #348]	@ (8002e88 <get_best_direction+0x258>)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4413      	add	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	440b      	add	r3, r1
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d40:	429a      	cmp	r2, r3
 8002d42:	dd11      	ble.n	8002d68 <get_best_direction+0x138>
                min_distance = maze[nx][ny].distance;
 8002d44:	4950      	ldr	r1, [pc, #320]	@ (8002e88 <get_best_direction+0x258>)
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	440b      	add	r3, r1
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	643b      	str	r3, [r7, #64]	@ 0x40
                best_dir = dir;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d60:	e002      	b.n	8002d68 <get_best_direction+0x138>
        if (maze[robot.x][robot.y].walls[dir]) continue;
 8002d62:	bf00      	nop
 8002d64:	e000      	b.n	8002d68 <get_best_direction+0x138>
        if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002d66:	bf00      	nop
    for (int p = 0; p < 4; p++) {
 8002d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	dd93      	ble.n	8002c9c <get_best_direction+0x6c>
            }
        }
    }

    // Second pass: if no unvisited cells, choose based on distance and visit count
    if (!found_unvisited) {
 8002d74:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002d78:	f083 0301 	eor.w	r3, r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d079      	beq.n	8002e76 <get_best_direction+0x246>
        for (int p = 0; p < 4; p++) {
 8002d82:	2300      	movs	r3, #0
 8002d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d86:	e073      	b.n	8002e70 <get_best_direction+0x240>
            int dir = priority[p];
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	3348      	adds	r3, #72	@ 0x48
 8002d8e:	443b      	add	r3, r7
 8002d90:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002d94:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (maze[robot.x][robot.y].walls[dir]) continue;
 8002d96:	4b3b      	ldr	r3, [pc, #236]	@ (8002e84 <get_best_direction+0x254>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e84 <get_best_direction+0x254>)
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	483a      	ldr	r0, [pc, #232]	@ (8002e88 <get_best_direction+0x258>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	18c2      	adds	r2, r0, r3
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	4413      	add	r3, r2
 8002db2:	3305      	adds	r3, #5
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d154      	bne.n	8002e64 <get_best_direction+0x234>

            int nx = robot.x + dx[dir];
 8002dba:	4b32      	ldr	r3, [pc, #200]	@ (8002e84 <get_best_direction+0x254>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4933      	ldr	r1, [pc, #204]	@ (8002e8c <get_best_direction+0x25c>)
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
            int ny = robot.y + dy[dir];
 8002dca:	4b2e      	ldr	r3, [pc, #184]	@ (8002e84 <get_best_direction+0x254>)
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4930      	ldr	r1, [pc, #192]	@ (8002e90 <get_best_direction+0x260>)
 8002dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db43      	blt.n	8002e68 <get_best_direction+0x238>
 8002de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de2:	2b0b      	cmp	r3, #11
 8002de4:	dc40      	bgt.n	8002e68 <get_best_direction+0x238>
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db3d      	blt.n	8002e68 <get_best_direction+0x238>
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	2b0b      	cmp	r3, #11
 8002df0:	dc3a      	bgt.n	8002e68 <get_best_direction+0x238>

            int nd = maze[nx][ny].distance;
 8002df2:	4925      	ldr	r1, [pc, #148]	@ (8002e88 <get_best_direction+0x258>)
 8002df4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e00:	4413      	add	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	440b      	add	r3, r1
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	623b      	str	r3, [r7, #32]
            int nv = maze[nx][ny].visit_count;
 8002e0a:	491f      	ldr	r1, [pc, #124]	@ (8002e88 <get_best_direction+0x258>)
 8002e0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e18:	4413      	add	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	440b      	add	r3, r1
 8002e1e:	330c      	adds	r3, #12
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61fb      	str	r3, [r7, #28]

            // Choose cell with minimum distance, then minimum visits, then prefer forward
            if (nd < min_distance ||
 8002e24:	6a3a      	ldr	r2, [r7, #32]
 8002e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	db14      	blt.n	8002e56 <get_best_direction+0x226>
 8002e2c:	6a3a      	ldr	r2, [r7, #32]
 8002e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d103      	bne.n	8002e3c <get_best_direction+0x20c>
                (nd == min_distance && nv < min_visits) ||
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	db0c      	blt.n	8002e56 <get_best_direction+0x226>
 8002e3c:	6a3a      	ldr	r2, [r7, #32]
 8002e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d112      	bne.n	8002e6a <get_best_direction+0x23a>
                (nd == min_distance && nv == min_visits && dir == robot.direction)) {
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d10e      	bne.n	8002e6a <get_best_direction+0x23a>
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <get_best_direction+0x254>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d109      	bne.n	8002e6a <get_best_direction+0x23a>
                min_distance = nd;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	643b      	str	r3, [r7, #64]	@ 0x40
                min_visits = nv;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                best_dir = dir;
 8002e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e62:	e002      	b.n	8002e6a <get_best_direction+0x23a>
            if (maze[robot.x][robot.y].walls[dir]) continue;
 8002e64:	bf00      	nop
 8002e66:	e000      	b.n	8002e6a <get_best_direction+0x23a>
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002e68:	bf00      	nop
        for (int p = 0; p < 4; p++) {
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	dd88      	ble.n	8002d88 <get_best_direction+0x158>
            }
        }
    }

    return best_dir;
 8002e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	374c      	adds	r7, #76	@ 0x4c
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	20000d68 	.word	0x20000d68
 8002e88:	20000468 	.word	0x20000468
 8002e8c:	0800f564 	.word	0x0800f564
 8002e90:	0800f574 	.word	0x0800f574

08002e94 <turn_to_direction>:
int r=0;

/**
 * @brief Turn robot to face the specified direction
 */
void turn_to_direction(int target_direction) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    int current_dir = robot.direction;
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f48 <turn_to_direction+0xb4>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	60fb      	str	r3, [r7, #12]
    int turn_diff = (target_direction - current_dir + 4) % 4;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	425a      	negs	r2, r3
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	f002 0203 	and.w	r2, r2, #3
 8002eb4:	bf58      	it	pl
 8002eb6:	4253      	negpl	r3, r2
 8002eb8:	60bb      	str	r3, [r7, #8]

    switch (turn_diff) {
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d83b      	bhi.n	8002f38 <turn_to_direction+0xa4>
 8002ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec8 <turn_to_direction+0x34>)
 8002ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec6:	bf00      	nop
 8002ec8:	08002f39 	.word	0x08002f39
 8002ecc:	08002ed9 	.word	0x08002ed9
 8002ed0:	08002ef9 	.word	0x08002ef9
 8002ed4:	08002f19 	.word	0x08002f19
        case 0:
            // Already facing correct direction
            break;
        case 1:
            // Turn right (90 degrees clockwise)
            send_bluetooth_message("Turning RIGHT...\r\n");
 8002ed8:	481c      	ldr	r0, [pc, #112]	@ (8002f4c <turn_to_direction+0xb8>)
 8002eda:	f7fe f8f1 	bl	80010c0 <send_bluetooth_message>
            turn_right();
 8002ede:	f000 fe03 	bl	8003ae8 <turn_right>
            l=1549;
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <turn_to_direction+0xbc>)
 8002ee4:	f240 620d 	movw	r2, #1549	@ 0x60d
 8002ee8:	601a      	str	r2, [r3, #0]
            r=1537;
 8002eea:	4b1a      	ldr	r3, [pc, #104]	@ (8002f54 <turn_to_direction+0xc0>)
 8002eec:	f240 6201 	movw	r2, #1537	@ 0x601
 8002ef0:	601a      	str	r2, [r3, #0]
            play_turn_beep();
 8002ef2:	f7fe f8c1 	bl	8001078 <play_turn_beep>
            break;
 8002ef6:	e01f      	b.n	8002f38 <turn_to_direction+0xa4>
        case 2:
            // Turn around (180 degrees)
            send_bluetooth_message("Turning AROUND...\r\n");
 8002ef8:	4817      	ldr	r0, [pc, #92]	@ (8002f58 <turn_to_direction+0xc4>)
 8002efa:	f7fe f8e1 	bl	80010c0 <send_bluetooth_message>
            turn_around();
 8002efe:	f000 fe25 	bl	8003b4c <turn_around>
            l=1530;
 8002f02:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <turn_to_direction+0xbc>)
 8002f04:	f240 52fa 	movw	r2, #1530	@ 0x5fa
 8002f08:	601a      	str	r2, [r3, #0]
            r=1562;
 8002f0a:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <turn_to_direction+0xc0>)
 8002f0c:	f240 621a 	movw	r2, #1562	@ 0x61a
 8002f10:	601a      	str	r2, [r3, #0]
            play_turn_beep();
 8002f12:	f7fe f8b1 	bl	8001078 <play_turn_beep>
            break;
 8002f16:	e00f      	b.n	8002f38 <turn_to_direction+0xa4>
        case 3:
            // Turn left (90 degrees counter-clockwise)
            send_bluetooth_message("Turning LEFT...\r\n");
 8002f18:	4810      	ldr	r0, [pc, #64]	@ (8002f5c <turn_to_direction+0xc8>)
 8002f1a:	f7fe f8d1 	bl	80010c0 <send_bluetooth_message>
            turn_left();
 8002f1e:	f000 fdb1 	bl	8003a84 <turn_left>
            l=1330;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <turn_to_direction+0xbc>)
 8002f24:	f240 5232 	movw	r2, #1330	@ 0x532
 8002f28:	601a      	str	r2, [r3, #0]
            r=1352;
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <turn_to_direction+0xc0>)
 8002f2c:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 8002f30:	601a      	str	r2, [r3, #0]
            play_turn_beep();
 8002f32:	f7fe f8a1 	bl	8001078 <play_turn_beep>
            break;
 8002f36:	bf00      	nop
    }

    robot.direction = target_direction;
 8002f38:	4a03      	ldr	r2, [pc, #12]	@ (8002f48 <turn_to_direction+0xb4>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6093      	str	r3, [r2, #8]
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000d68 	.word	0x20000d68
 8002f4c:	0800e59c 	.word	0x0800e59c
 8002f50:	200012e4 	.word	0x200012e4
 8002f54:	200012e8 	.word	0x200012e8
 8002f58:	0800e5b0 	.word	0x0800e5b0
 8002f5c:	0800e5c4 	.word	0x0800e5c4

08002f60 <move_forward_one_cell>:

/**
 * @brief Move forward one cell with precise control
 */
bool move_forward_one_cell(void) {
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
    send_bluetooth_printf("Moving forward from (%d,%d) to ", robot.x, robot.y);
 8002f66:	4b37      	ldr	r3, [pc, #220]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a36      	ldr	r2, [pc, #216]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002f6c:	6852      	ldr	r2, [r2, #4]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4835      	ldr	r0, [pc, #212]	@ (8003048 <move_forward_one_cell+0xe8>)
 8002f72:	f7fe f8bb 	bl	80010ec <send_bluetooth_printf>

    // Calculate new position
    int new_x = robot.x + dx[robot.direction];
 8002f76:	4b33      	ldr	r3, [pc, #204]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b32      	ldr	r3, [pc, #200]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	4933      	ldr	r1, [pc, #204]	@ (800304c <move_forward_one_cell+0xec>)
 8002f80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f84:	4413      	add	r3, r2
 8002f86:	607b      	str	r3, [r7, #4]
    int new_y = robot.y + dy[robot.direction];
 8002f88:	4b2e      	ldr	r3, [pc, #184]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	492f      	ldr	r1, [pc, #188]	@ (8003050 <move_forward_one_cell+0xf0>)
 8002f92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f96:	4413      	add	r3, r2
 8002f98:	603b      	str	r3, [r7, #0]

    // Check bounds
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db08      	blt.n	8002fb2 <move_forward_one_cell+0x52>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b0b      	cmp	r3, #11
 8002fa4:	dc05      	bgt.n	8002fb2 <move_forward_one_cell+0x52>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db02      	blt.n	8002fb2 <move_forward_one_cell+0x52>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b0b      	cmp	r3, #11
 8002fb0:	dd04      	ble.n	8002fbc <move_forward_one_cell+0x5c>
        send_bluetooth_message("BLOCKED - Out of bounds!\r\n");
 8002fb2:	4828      	ldr	r0, [pc, #160]	@ (8003054 <move_forward_one_cell+0xf4>)
 8002fb4:	f7fe f884 	bl	80010c0 <send_bluetooth_message>
        return false;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e03e      	b.n	800303a <move_forward_one_cell+0xda>
    }

    send_bluetooth_printf("(%d,%d)\r\n", new_x, new_y);
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4825      	ldr	r0, [pc, #148]	@ (8003058 <move_forward_one_cell+0xf8>)
 8002fc2:	f7fe f893 	bl	80010ec <send_bluetooth_printf>


    // Use precise encoder-based movement
    move_forward_distance(LEFT_ENCODER_COUNTS_PER_CELL ,RIGHT_ENCODER_COUNTS_PER_CELL);
 8002fc6:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8002fca:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002fce:	f000 fe3b 	bl	8003c48 <move_forward_distance>

    // Update robot position
    robot.x = new_x;
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 8002fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6053      	str	r3, [r2, #4]
    robot.exploration_steps++;
 8002fde:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	4a17      	ldr	r2, [pc, #92]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002fe6:	6113      	str	r3, [r2, #16]

    // Mark cell as visited
    maze[robot.x][robot.y].visited = true;
 8002fe8:	4b16      	ldr	r3, [pc, #88]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <move_forward_one_cell+0xe4>)
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	481a      	ldr	r0, [pc, #104]	@ (800305c <move_forward_one_cell+0xfc>)
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4403      	add	r3, r0
 8003000:	3304      	adds	r3, #4
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 8003006:	4b0f      	ldr	r3, [pc, #60]	@ (8003044 <move_forward_one_cell+0xe4>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4b0e      	ldr	r3, [pc, #56]	@ (8003044 <move_forward_one_cell+0xe4>)
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	4813      	ldr	r0, [pc, #76]	@ (800305c <move_forward_one_cell+0xfc>)
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	4403      	add	r3, r0
 800301e:	330c      	adds	r3, #12
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	1c58      	adds	r0, r3, #1
 8003024:	4c0d      	ldr	r4, [pc, #52]	@ (800305c <move_forward_one_cell+0xfc>)
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	4423      	add	r3, r4
 8003034:	330c      	adds	r3, #12
 8003036:	6018      	str	r0, [r3, #0]

    return true;
 8003038:	2301      	movs	r3, #1
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}
 8003042:	bf00      	nop
 8003044:	20000d68 	.word	0x20000d68
 8003048:	0800e5d8 	.word	0x0800e5d8
 800304c:	0800f564 	.word	0x0800f564
 8003050:	0800f574 	.word	0x0800f574
 8003054:	0800e5f8 	.word	0x0800e5f8
 8003058:	0800e614 	.word	0x0800e614
 800305c:	20000468 	.word	0x20000468

08003060 <move_forward_one_cell_truns>:
int flag=1;

bool move_forward_one_cell_truns(void){
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
    send_bluetooth_printf("Moving forward from (%d,%d) to ", robot.x, robot.y);
 8003066:	4b58      	ldr	r3, [pc, #352]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a57      	ldr	r2, [pc, #348]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 800306c:	6852      	ldr	r2, [r2, #4]
 800306e:	4619      	mov	r1, r3
 8003070:	4856      	ldr	r0, [pc, #344]	@ (80031cc <move_forward_one_cell_truns+0x16c>)
 8003072:	f7fe f83b 	bl	80010ec <send_bluetooth_printf>

    // Calculate new position
    int new_x = robot.x + dx[robot.direction];
 8003076:	4b54      	ldr	r3, [pc, #336]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b53      	ldr	r3, [pc, #332]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4954      	ldr	r1, [pc, #336]	@ (80031d0 <move_forward_one_cell_truns+0x170>)
 8003080:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003084:	4413      	add	r3, r2
 8003086:	607b      	str	r3, [r7, #4]
    int new_y = robot.y + dy[robot.direction];
 8003088:	4b4f      	ldr	r3, [pc, #316]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4b4e      	ldr	r3, [pc, #312]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4950      	ldr	r1, [pc, #320]	@ (80031d4 <move_forward_one_cell_truns+0x174>)
 8003092:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003096:	4413      	add	r3, r2
 8003098:	603b      	str	r3, [r7, #0]

    // Check bounds
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db08      	blt.n	80030b2 <move_forward_one_cell_truns+0x52>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b0b      	cmp	r3, #11
 80030a4:	dc05      	bgt.n	80030b2 <move_forward_one_cell_truns+0x52>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	db02      	blt.n	80030b2 <move_forward_one_cell_truns+0x52>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b0b      	cmp	r3, #11
 80030b0:	dd04      	ble.n	80030bc <move_forward_one_cell_truns+0x5c>
        send_bluetooth_message("BLOCKED - Out of bounds!\r\n");
 80030b2:	4849      	ldr	r0, [pc, #292]	@ (80031d8 <move_forward_one_cell_truns+0x178>)
 80030b4:	f7fe f804 	bl	80010c0 <send_bluetooth_message>
        return false;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e080      	b.n	80031be <move_forward_one_cell_truns+0x15e>
    }

    send_bluetooth_printf("(%d,%d)\r\n", new_x, new_y);
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4846      	ldr	r0, [pc, #280]	@ (80031dc <move_forward_one_cell_truns+0x17c>)
 80030c2:	f7fe f813 	bl	80010ec <send_bluetooth_printf>
    if (l!=0 && r!=0){
 80030c6:	4b46      	ldr	r3, [pc, #280]	@ (80031e0 <move_forward_one_cell_truns+0x180>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <move_forward_one_cell_truns+0x94>
 80030ce:	4b45      	ldr	r3, [pc, #276]	@ (80031e4 <move_forward_one_cell_truns+0x184>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00e      	beq.n	80030f4 <move_forward_one_cell_truns+0x94>
    	move_forward_distance(l,r);
 80030d6:	4b42      	ldr	r3, [pc, #264]	@ (80031e0 <move_forward_one_cell_truns+0x180>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a42      	ldr	r2, [pc, #264]	@ (80031e4 <move_forward_one_cell_truns+0x184>)
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fdb1 	bl	8003c48 <move_forward_distance>
    	l=0;
 80030e6:	4b3e      	ldr	r3, [pc, #248]	@ (80031e0 <move_forward_one_cell_truns+0x180>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
    	r=0;
 80030ec:	4b3d      	ldr	r3, [pc, #244]	@ (80031e4 <move_forward_one_cell_truns+0x184>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e030      	b.n	8003156 <move_forward_one_cell_truns+0xf6>
    }
    else if (sensors.wall_left || sensors.wall_right){
 80030f4:	4b3c      	ldr	r3, [pc, #240]	@ (80031e8 <move_forward_one_cell_truns+0x188>)
 80030f6:	7adb      	ldrb	r3, [r3, #11]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <move_forward_one_cell_truns+0xa4>
 80030fc:	4b3a      	ldr	r3, [pc, #232]	@ (80031e8 <move_forward_one_cell_truns+0x188>)
 80030fe:	7b1b      	ldrb	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d014      	beq.n	800312e <move_forward_one_cell_truns+0xce>
    	if (flag==1){
 8003104:	4b39      	ldr	r3, [pc, #228]	@ (80031ec <move_forward_one_cell_truns+0x18c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d109      	bne.n	8003120 <move_forward_one_cell_truns+0xc0>
    		move_forward_WF_distance(1250,1250);
 800310c:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 8003110:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8003114:	f000 fdcb 	bl	8003cae <move_forward_WF_distance>
    		flag=0;
 8003118:	4b34      	ldr	r3, [pc, #208]	@ (80031ec <move_forward_one_cell_truns+0x18c>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
    	if (flag==1){
 800311e:	e01a      	b.n	8003156 <move_forward_one_cell_truns+0xf6>
    	}else{
    		move_forward_WF_distance(LEFT_ENCODER_COUNTS_PER_CELL ,RIGHT_ENCODER_COUNTS_PER_CELL);
 8003120:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8003124:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003128:	f000 fdc1 	bl	8003cae <move_forward_WF_distance>
    	if (flag==1){
 800312c:	e013      	b.n	8003156 <move_forward_one_cell_truns+0xf6>
    	}



    }else{
    	if (flag==1){
 800312e:	4b2f      	ldr	r3, [pc, #188]	@ (80031ec <move_forward_one_cell_truns+0x18c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d109      	bne.n	800314a <move_forward_one_cell_truns+0xea>
			move_forward_distance(1250 ,1250);
 8003136:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 800313a:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800313e:	f000 fd83 	bl	8003c48 <move_forward_distance>
			flag=0;
 8003142:	4b2a      	ldr	r3, [pc, #168]	@ (80031ec <move_forward_one_cell_truns+0x18c>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e005      	b.n	8003156 <move_forward_one_cell_truns+0xf6>
    	}else{
    		move_forward_distance(LEFT_ENCODER_COUNTS_PER_CELL ,RIGHT_ENCODER_COUNTS_PER_CELL);
 800314a:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 800314e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003152:	f000 fd79 	bl	8003c48 <move_forward_distance>

    // Use precise encoder-based movement


    // Update robot position
    robot.x = new_x;
 8003156:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 800315c:	4a1a      	ldr	r2, [pc, #104]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6053      	str	r3, [r2, #4]
    robot.exploration_steps++;
 8003162:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	3301      	adds	r3, #1
 8003168:	4a17      	ldr	r2, [pc, #92]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 800316a:	6113      	str	r3, [r2, #16]

    // Mark cell as visited
    maze[robot.x][robot.y].visited = true;
 800316c:	4b16      	ldr	r3, [pc, #88]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	481e      	ldr	r0, [pc, #120]	@ (80031f0 <move_forward_one_cell_truns+0x190>)
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	4403      	add	r3, r0
 8003184:	3304      	adds	r3, #4
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 800318a:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b0e      	ldr	r3, [pc, #56]	@ (80031c8 <move_forward_one_cell_truns+0x168>)
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	4817      	ldr	r0, [pc, #92]	@ (80031f0 <move_forward_one_cell_truns+0x190>)
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	4403      	add	r3, r0
 80031a2:	330c      	adds	r3, #12
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	1c58      	adds	r0, r3, #1
 80031a8:	4c11      	ldr	r4, [pc, #68]	@ (80031f0 <move_forward_one_cell_truns+0x190>)
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	4423      	add	r3, r4
 80031b8:	330c      	adds	r3, #12
 80031ba:	6018      	str	r0, [r3, #0]

    return true;
 80031bc:	2301      	movs	r3, #1
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd90      	pop	{r4, r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000d68 	.word	0x20000d68
 80031cc:	0800e5d8 	.word	0x0800e5d8
 80031d0:	0800f564 	.word	0x0800f564
 80031d4:	0800f574 	.word	0x0800f574
 80031d8:	0800e5f8 	.word	0x0800e5f8
 80031dc:	0800e614 	.word	0x0800e614
 80031e0:	200012e4 	.word	0x200012e4
 80031e4:	200012e8 	.word	0x200012e8
 80031e8:	20000d7c 	.word	0x20000d7c
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000468 	.word	0x20000468

080031f4 <is_at_goal>:

/**
 * @brief Check if robot is at goal position
 */
bool is_at_goal(void) {
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
    if (!robot.center_reached) {
 80031f8:	4b1c      	ldr	r3, [pc, #112]	@ (800326c <is_at_goal+0x78>)
 80031fa:	7b1b      	ldrb	r3, [r3, #12]
 80031fc:	f083 0301 	eor.w	r3, r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01e      	beq.n	8003244 <is_at_goal+0x50>
        // Check if at center
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 8003206:	4b19      	ldr	r3, [pc, #100]	@ (800326c <is_at_goal+0x78>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <is_at_goal+0x7c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d005      	beq.n	800321e <is_at_goal+0x2a>
 8003212:	4b16      	ldr	r3, [pc, #88]	@ (800326c <is_at_goal+0x78>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b17      	ldr	r3, [pc, #92]	@ (8003274 <is_at_goal+0x80>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d10d      	bne.n	800323a <is_at_goal+0x46>
                (robot.y == maze_center_y1 || robot.y == maze_center_y2));
 800321e:	4b13      	ldr	r3, [pc, #76]	@ (800326c <is_at_goal+0x78>)
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4b15      	ldr	r3, [pc, #84]	@ (8003278 <is_at_goal+0x84>)
 8003224:	681b      	ldr	r3, [r3, #0]
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 8003226:	429a      	cmp	r2, r3
 8003228:	d005      	beq.n	8003236 <is_at_goal+0x42>
                (robot.y == maze_center_y1 || robot.y == maze_center_y2));
 800322a:	4b10      	ldr	r3, [pc, #64]	@ (800326c <is_at_goal+0x78>)
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	4b13      	ldr	r3, [pc, #76]	@ (800327c <is_at_goal+0x88>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d101      	bne.n	800323a <is_at_goal+0x46>
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <is_at_goal+0x48>
 800323a:	2300      	movs	r3, #0
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	e00d      	b.n	8003260 <is_at_goal+0x6c>
    } else {
        // Check if returned to start
        return (robot.x == 0 && robot.y == 0);
 8003244:	4b09      	ldr	r3, [pc, #36]	@ (800326c <is_at_goal+0x78>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <is_at_goal+0x64>
 800324c:	4b07      	ldr	r3, [pc, #28]	@ (800326c <is_at_goal+0x78>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <is_at_goal+0x64>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <is_at_goal+0x66>
 8003258:	2300      	movs	r3, #0
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
    }
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000d68 	.word	0x20000d68
 8003270:	20000dc0 	.word	0x20000dc0
 8003274:	20000dc8 	.word	0x20000dc8
 8003278:	20000dc4 	.word	0x20000dc4
 800327c:	20000dcc 	.word	0x20000dcc

08003280 <update_maze_walls>:

/**
 * @brief Update walls based on sensor readings
 */
void update_maze_walls(void) {
 8003280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003282:	b08d      	sub	sp, #52	@ 0x34
 8003284:	af04      	add	r7, sp, #16
    // Update sensors first
    update_sensors();
 8003286:	f001 f9eb 	bl	8004660 <update_sensors>

    // Update wall information based on current direction and sensor readings
    if (sensors.wall_front) {
 800328a:	4b89      	ldr	r3, [pc, #548]	@ (80034b0 <update_maze_walls+0x230>)
 800328c:	7a9b      	ldrb	r3, [r3, #10]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d047      	beq.n	8003322 <update_maze_walls+0xa2>
        maze[robot.x][robot.y].walls[robot.direction] = true;
 8003292:	4b88      	ldr	r3, [pc, #544]	@ (80034b4 <update_maze_walls+0x234>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b87      	ldr	r3, [pc, #540]	@ (80034b4 <update_maze_walls+0x234>)
 8003298:	6858      	ldr	r0, [r3, #4]
 800329a:	4b86      	ldr	r3, [pc, #536]	@ (80034b4 <update_maze_walls+0x234>)
 800329c:	6899      	ldr	r1, [r3, #8]
 800329e:	4c86      	ldr	r4, [pc, #536]	@ (80034b8 <update_maze_walls+0x238>)
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4403      	add	r3, r0
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	4423      	add	r3, r4
 80032ae:	440b      	add	r3, r1
 80032b0:	3305      	adds	r3, #5
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]

        // Update opposite wall in neighbor cell
        int nx = robot.x + dx[robot.direction];
 80032b6:	4b7f      	ldr	r3, [pc, #508]	@ (80034b4 <update_maze_walls+0x234>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b7e      	ldr	r3, [pc, #504]	@ (80034b4 <update_maze_walls+0x234>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	497f      	ldr	r1, [pc, #508]	@ (80034bc <update_maze_walls+0x23c>)
 80032c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032c4:	4413      	add	r3, r2
 80032c6:	61fb      	str	r3, [r7, #28]
        int ny = robot.y + dy[robot.direction];
 80032c8:	4b7a      	ldr	r3, [pc, #488]	@ (80034b4 <update_maze_walls+0x234>)
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4b79      	ldr	r3, [pc, #484]	@ (80034b4 <update_maze_walls+0x234>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	497b      	ldr	r1, [pc, #492]	@ (80034c0 <update_maze_walls+0x240>)
 80032d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032d6:	4413      	add	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db20      	blt.n	8003322 <update_maze_walls+0xa2>
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b0b      	cmp	r3, #11
 80032e4:	dc1d      	bgt.n	8003322 <update_maze_walls+0xa2>
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	db1a      	blt.n	8003322 <update_maze_walls+0xa2>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b0b      	cmp	r3, #11
 80032f0:	dc17      	bgt.n	8003322 <update_maze_walls+0xa2>
            maze[nx][ny].walls[(robot.direction + 2) % 4] = true;
 80032f2:	4b70      	ldr	r3, [pc, #448]	@ (80034b4 <update_maze_walls+0x234>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	3302      	adds	r3, #2
 80032f8:	4259      	negs	r1, r3
 80032fa:	f003 0203 	and.w	r2, r3, #3
 80032fe:	f001 0303 	and.w	r3, r1, #3
 8003302:	bf58      	it	pl
 8003304:	425a      	negpl	r2, r3
 8003306:	486c      	ldr	r0, [pc, #432]	@ (80034b8 <update_maze_walls+0x238>)
 8003308:	69f9      	ldr	r1, [r7, #28]
 800330a:	460b      	mov	r3, r1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	440b      	add	r3, r1
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	440b      	add	r3, r1
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	4403      	add	r3, r0
 800331a:	4413      	add	r3, r2
 800331c:	3305      	adds	r3, #5
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_left) {
 8003322:	4b63      	ldr	r3, [pc, #396]	@ (80034b0 <update_maze_walls+0x230>)
 8003324:	7adb      	ldrb	r3, [r3, #11]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d04e      	beq.n	80033c8 <update_maze_walls+0x148>
        int left_dir = (robot.direction + 3) % 4;
 800332a:	4b62      	ldr	r3, [pc, #392]	@ (80034b4 <update_maze_walls+0x234>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	3303      	adds	r3, #3
 8003330:	425a      	negs	r2, r3
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	f002 0203 	and.w	r2, r2, #3
 800333a:	bf58      	it	pl
 800333c:	4253      	negpl	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
        maze[robot.x][robot.y].walls[left_dir] = true;
 8003340:	4b5c      	ldr	r3, [pc, #368]	@ (80034b4 <update_maze_walls+0x234>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b5b      	ldr	r3, [pc, #364]	@ (80034b4 <update_maze_walls+0x234>)
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	485b      	ldr	r0, [pc, #364]	@ (80034b8 <update_maze_walls+0x238>)
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	18c2      	adds	r2, r0, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	4413      	add	r3, r2
 800335c:	3305      	adds	r3, #5
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]

        int nx = robot.x + dx[left_dir];
 8003362:	4b54      	ldr	r3, [pc, #336]	@ (80034b4 <update_maze_walls+0x234>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4955      	ldr	r1, [pc, #340]	@ (80034bc <update_maze_walls+0x23c>)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800336e:	4413      	add	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        int ny = robot.y + dy[left_dir];
 8003372:	4b50      	ldr	r3, [pc, #320]	@ (80034b4 <update_maze_walls+0x234>)
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4952      	ldr	r1, [pc, #328]	@ (80034c0 <update_maze_walls+0x240>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800337e:	4413      	add	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	db1f      	blt.n	80033c8 <update_maze_walls+0x148>
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b0b      	cmp	r3, #11
 800338c:	dc1c      	bgt.n	80033c8 <update_maze_walls+0x148>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	db19      	blt.n	80033c8 <update_maze_walls+0x148>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b0b      	cmp	r3, #11
 8003398:	dc16      	bgt.n	80033c8 <update_maze_walls+0x148>
            maze[nx][ny].walls[(left_dir + 2) % 4] = true;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3302      	adds	r3, #2
 800339e:	4259      	negs	r1, r3
 80033a0:	f003 0203 	and.w	r2, r3, #3
 80033a4:	f001 0303 	and.w	r3, r1, #3
 80033a8:	bf58      	it	pl
 80033aa:	425a      	negpl	r2, r3
 80033ac:	4842      	ldr	r0, [pc, #264]	@ (80034b8 <update_maze_walls+0x238>)
 80033ae:	6939      	ldr	r1, [r7, #16]
 80033b0:	460b      	mov	r3, r1
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	440b      	add	r3, r1
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	68f9      	ldr	r1, [r7, #12]
 80033ba:	440b      	add	r3, r1
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	4403      	add	r3, r0
 80033c0:	4413      	add	r3, r2
 80033c2:	3305      	adds	r3, #5
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_right) {
 80033c8:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <update_maze_walls+0x230>)
 80033ca:	7b1b      	ldrb	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d04e      	beq.n	800346e <update_maze_walls+0x1ee>
        int right_dir = (robot.direction + 1) % 4;
 80033d0:	4b38      	ldr	r3, [pc, #224]	@ (80034b4 <update_maze_walls+0x234>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	3301      	adds	r3, #1
 80033d6:	425a      	negs	r2, r3
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	f002 0203 	and.w	r2, r2, #3
 80033e0:	bf58      	it	pl
 80033e2:	4253      	negpl	r3, r2
 80033e4:	60bb      	str	r3, [r7, #8]
        maze[robot.x][robot.y].walls[right_dir] = true;
 80033e6:	4b33      	ldr	r3, [pc, #204]	@ (80034b4 <update_maze_walls+0x234>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b32      	ldr	r3, [pc, #200]	@ (80034b4 <update_maze_walls+0x234>)
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	4832      	ldr	r0, [pc, #200]	@ (80034b8 <update_maze_walls+0x238>)
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	18c2      	adds	r2, r0, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4413      	add	r3, r2
 8003402:	3305      	adds	r3, #5
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]

        int nx = robot.x + dx[right_dir];
 8003408:	4b2a      	ldr	r3, [pc, #168]	@ (80034b4 <update_maze_walls+0x234>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	492b      	ldr	r1, [pc, #172]	@ (80034bc <update_maze_walls+0x23c>)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003414:	4413      	add	r3, r2
 8003416:	607b      	str	r3, [r7, #4]
        int ny = robot.y + dy[right_dir];
 8003418:	4b26      	ldr	r3, [pc, #152]	@ (80034b4 <update_maze_walls+0x234>)
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	4928      	ldr	r1, [pc, #160]	@ (80034c0 <update_maze_walls+0x240>)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003424:	4413      	add	r3, r2
 8003426:	603b      	str	r3, [r7, #0]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	db1f      	blt.n	800346e <update_maze_walls+0x1ee>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b0b      	cmp	r3, #11
 8003432:	dc1c      	bgt.n	800346e <update_maze_walls+0x1ee>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	db19      	blt.n	800346e <update_maze_walls+0x1ee>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b0b      	cmp	r3, #11
 800343e:	dc16      	bgt.n	800346e <update_maze_walls+0x1ee>
            maze[nx][ny].walls[(right_dir + 2) % 4] = true;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3302      	adds	r3, #2
 8003444:	4259      	negs	r1, r3
 8003446:	f003 0203 	and.w	r2, r3, #3
 800344a:	f001 0303 	and.w	r3, r1, #3
 800344e:	bf58      	it	pl
 8003450:	425a      	negpl	r2, r3
 8003452:	4819      	ldr	r0, [pc, #100]	@ (80034b8 <update_maze_walls+0x238>)
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	440b      	add	r3, r1
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	6839      	ldr	r1, [r7, #0]
 8003460:	440b      	add	r3, r1
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	4403      	add	r3, r0
 8003466:	4413      	add	r3, r2
 8003468:	3305      	adds	r3, #5
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Send wall detection feedback
    // Send wall detection feedback
    if (sensors.wall_front || sensors.wall_left || sensors.wall_right) {
 800346e:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <update_maze_walls+0x230>)
 8003470:	7a9b      	ldrb	r3, [r3, #10]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d107      	bne.n	8003486 <update_maze_walls+0x206>
 8003476:	4b0e      	ldr	r3, [pc, #56]	@ (80034b0 <update_maze_walls+0x230>)
 8003478:	7adb      	ldrb	r3, [r3, #11]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <update_maze_walls+0x206>
 800347e:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <update_maze_walls+0x230>)
 8003480:	7b1b      	ldrb	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d037      	beq.n	80034f6 <update_maze_walls+0x276>
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
                             sensors.wall_front ? "Y" : "N",
 8003486:	4b0a      	ldr	r3, [pc, #40]	@ (80034b0 <update_maze_walls+0x230>)
 8003488:	7a9b      	ldrb	r3, [r3, #10]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <update_maze_walls+0x212>
 800348e:	490d      	ldr	r1, [pc, #52]	@ (80034c4 <update_maze_walls+0x244>)
 8003490:	e000      	b.n	8003494 <update_maze_walls+0x214>
 8003492:	490d      	ldr	r1, [pc, #52]	@ (80034c8 <update_maze_walls+0x248>)
                             sensors.wall_left ? "Y" : "N",
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <update_maze_walls+0x230>)
 8003496:	7adb      	ldrb	r3, [r3, #11]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <update_maze_walls+0x220>
 800349c:	4a09      	ldr	r2, [pc, #36]	@ (80034c4 <update_maze_walls+0x244>)
 800349e:	e000      	b.n	80034a2 <update_maze_walls+0x222>
 80034a0:	4a09      	ldr	r2, [pc, #36]	@ (80034c8 <update_maze_walls+0x248>)
                             sensors.wall_right ? "Y" : "N",
 80034a2:	4b03      	ldr	r3, [pc, #12]	@ (80034b0 <update_maze_walls+0x230>)
 80034a4:	7b1b      	ldrb	r3, [r3, #12]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d010      	beq.n	80034cc <update_maze_walls+0x24c>
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <update_maze_walls+0x244>)
 80034ac:	e00f      	b.n	80034ce <update_maze_walls+0x24e>
 80034ae:	bf00      	nop
 80034b0:	20000d7c 	.word	0x20000d7c
 80034b4:	20000d68 	.word	0x20000d68
 80034b8:	20000468 	.word	0x20000468
 80034bc:	0800f564 	.word	0x0800f564
 80034c0:	0800f574 	.word	0x0800f574
 80034c4:	0800e620 	.word	0x0800e620
 80034c8:	0800e624 	.word	0x0800e624
 80034cc:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <update_maze_walls+0x2d0>)
                             sensors.front_left, sensors.front_right,
 80034ce:	4821      	ldr	r0, [pc, #132]	@ (8003554 <update_maze_walls+0x2d4>)
 80034d0:	8900      	ldrh	r0, [r0, #8]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80034d2:	4604      	mov	r4, r0
                             sensors.front_left, sensors.front_right,
 80034d4:	481f      	ldr	r0, [pc, #124]	@ (8003554 <update_maze_walls+0x2d4>)
 80034d6:	8840      	ldrh	r0, [r0, #2]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80034d8:	4605      	mov	r5, r0
                             sensors.side_left, sensors.side_right);
 80034da:	481e      	ldr	r0, [pc, #120]	@ (8003554 <update_maze_walls+0x2d4>)
 80034dc:	88c0      	ldrh	r0, [r0, #6]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80034de:	4606      	mov	r6, r0
                             sensors.side_left, sensors.side_right);
 80034e0:	481c      	ldr	r0, [pc, #112]	@ (8003554 <update_maze_walls+0x2d4>)
 80034e2:	8880      	ldrh	r0, [r0, #4]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80034e4:	9003      	str	r0, [sp, #12]
 80034e6:	9602      	str	r6, [sp, #8]
 80034e8:	9501      	str	r5, [sp, #4]
 80034ea:	9400      	str	r4, [sp, #0]
 80034ec:	481a      	ldr	r0, [pc, #104]	@ (8003558 <update_maze_walls+0x2d8>)
 80034ee:	f7fd fdfd 	bl	80010ec <send_bluetooth_printf>

        play_wall_beep();
 80034f2:	f7fd fdb8 	bl	8001066 <play_wall_beep>
    }

    // Mark current cell as visited
    maze[robot.x][robot.y].visited = true;
 80034f6:	4b19      	ldr	r3, [pc, #100]	@ (800355c <update_maze_walls+0x2dc>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b18      	ldr	r3, [pc, #96]	@ (800355c <update_maze_walls+0x2dc>)
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	4818      	ldr	r0, [pc, #96]	@ (8003560 <update_maze_walls+0x2e0>)
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4403      	add	r3, r0
 800350e:	3304      	adds	r3, #4
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <update_maze_walls+0x2dc>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b10      	ldr	r3, [pc, #64]	@ (800355c <update_maze_walls+0x2dc>)
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	4810      	ldr	r0, [pc, #64]	@ (8003560 <update_maze_walls+0x2e0>)
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	4403      	add	r3, r0
 800352c:	330c      	adds	r3, #12
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	1c58      	adds	r0, r3, #1
 8003532:	4c0b      	ldr	r4, [pc, #44]	@ (8003560 <update_maze_walls+0x2e0>)
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	4423      	add	r3, r4
 8003542:	330c      	adds	r3, #12
 8003544:	6018      	str	r0, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	3724      	adds	r7, #36	@ 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800354e:	bf00      	nop
 8003550:	0800e624 	.word	0x0800e624
 8003554:	20000d7c 	.word	0x20000d7c
 8003558:	0800e628 	.word	0x0800e628
 800355c:	20000d68 	.word	0x20000d68
 8003560:	20000468 	.word	0x20000468

08003564 <explore_maze>:

/**
 * @brief Main maze exploration function
 */
void explore_maze(void) {
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n🚀 STARTING MAZE EXPLORATION 🚀\r\n");
 800356a:	485d      	ldr	r0, [pc, #372]	@ (80036e0 <explore_maze+0x17c>)
 800356c:	f7fd fda8 	bl	80010c0 <send_bluetooth_message>

    int max_steps = MAZE_SIZE * MAZE_SIZE * 3; // Safety limit
 8003570:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8003574:	607b      	str	r3, [r7, #4]
    int steps = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]

    while (!is_at_goal() && steps < max_steps) {
 800357a:	e066      	b.n	800364a <explore_maze+0xe6>
        // Update wall information
        update_maze_walls();
 800357c:	f7ff fe80 	bl	8003280 <update_maze_walls>
        HAL_Delay(10);
 8003580:	200a      	movs	r0, #10
 8003582:	f002 ff91 	bl	80064a8 <HAL_Delay>

        // Run flood fill algorithm
        flood_fill_algorithm();
 8003586:	f7ff fa11 	bl	80029ac <flood_fill_algorithm>

        // Get best direction to move
        int best_direction = get_best_direction();
 800358a:	f7ff fb51 	bl	8002c30 <get_best_direction>
 800358e:	6038      	str	r0, [r7, #0]

        // Turn to face best direction
        turn_to_direction(best_direction);
 8003590:	6838      	ldr	r0, [r7, #0]
 8003592:	f7ff fc7f 	bl	8002e94 <turn_to_direction>

        // Move forward if possible
        if (!move_forward_one_cell_truns()){
 8003596:	f7ff fd63 	bl	8003060 <move_forward_one_cell_truns>
 800359a:	4603      	mov	r3, r0
 800359c:	f083 0301 	eor.w	r3, r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02e      	beq.n	8003604 <explore_maze+0xa0>
            send_bluetooth_message("❌ Movement failed! Trying alternative...\r\n");
 80035a6:	484f      	ldr	r0, [pc, #316]	@ (80036e4 <explore_maze+0x180>)
 80035a8:	f7fd fd8a 	bl	80010c0 <send_bluetooth_message>

            // Try alternative directions
            for (int alt_dir = 0; alt_dir < 4; alt_dir++) {
 80035ac:	2300      	movs	r3, #0
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	e023      	b.n	80035fa <explore_maze+0x96>
                if (alt_dir != best_direction &&
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d01c      	beq.n	80035f4 <explore_maze+0x90>
                    !maze[robot.x][robot.y].walls[alt_dir]) {
 80035ba:	4b4b      	ldr	r3, [pc, #300]	@ (80036e8 <explore_maze+0x184>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b4a      	ldr	r3, [pc, #296]	@ (80036e8 <explore_maze+0x184>)
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	484a      	ldr	r0, [pc, #296]	@ (80036ec <explore_maze+0x188>)
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	18c2      	adds	r2, r0, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4413      	add	r3, r2
 80035d6:	3305      	adds	r3, #5
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
                if (alt_dir != best_direction &&
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <explore_maze+0x90>

                    turn_to_direction(alt_dir);
 80035e4:	68b8      	ldr	r0, [r7, #8]
 80035e6:	f7ff fc55 	bl	8002e94 <turn_to_direction>
                    if (move_forward_one_cell()) {
 80035ea:	f7ff fcb9 	bl	8002f60 <move_forward_one_cell>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <explore_maze+0x9e>
            for (int alt_dir = 0; alt_dir < 4; alt_dir++) {
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	3301      	adds	r3, #1
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	ddd8      	ble.n	80035b2 <explore_maze+0x4e>
 8003600:	e000      	b.n	8003604 <explore_maze+0xa0>
                        break;
 8003602:	bf00      	nop
                }
            }
        }

        // Send periodic status updates
        if (steps % 5 == 0) {
 8003604:	68f9      	ldr	r1, [r7, #12]
 8003606:	4b3a      	ldr	r3, [pc, #232]	@ (80036f0 <explore_maze+0x18c>)
 8003608:	fb83 2301 	smull	r2, r3, r3, r1
 800360c:	105a      	asrs	r2, r3, #1
 800360e:	17cb      	asrs	r3, r1, #31
 8003610:	1ad2      	subs	r2, r2, r3
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	1aca      	subs	r2, r1, r3
 800361a:	2a00      	cmp	r2, #0
 800361c:	d112      	bne.n	8003644 <explore_maze+0xe0>
            send_bluetooth_printf("Step %d: Position (%d,%d), Direction: %s\r\n",
 800361e:	4b32      	ldr	r3, [pc, #200]	@ (80036e8 <explore_maze+0x184>)
 8003620:	681c      	ldr	r4, [r3, #0]
 8003622:	4b31      	ldr	r3, [pc, #196]	@ (80036e8 <explore_maze+0x184>)
 8003624:	685d      	ldr	r5, [r3, #4]
 8003626:	4b30      	ldr	r3, [pc, #192]	@ (80036e8 <explore_maze+0x184>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f001 fdd0 	bl	80051d0 <get_direction_name>
 8003630:	4603      	mov	r3, r0
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	462b      	mov	r3, r5
 8003636:	4622      	mov	r2, r4
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	482e      	ldr	r0, [pc, #184]	@ (80036f4 <explore_maze+0x190>)
 800363c:	f7fd fd56 	bl	80010ec <send_bluetooth_printf>
                                 steps, robot.x, robot.y, get_direction_name(robot.direction));
            send_maze_state();
 8003640:	f7fd fd7a 	bl	8001138 <send_maze_state>
        }

        steps++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3301      	adds	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
    while (!is_at_goal() && steps < max_steps) {
 800364a:	f7ff fdd3 	bl	80031f4 <is_at_goal>
 800364e:	4603      	mov	r3, r0
 8003650:	f083 0301 	eor.w	r3, r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <explore_maze+0xfe>
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	db8c      	blt.n	800357c <explore_maze+0x18>

        // Brief delay for stability
        //HAL_Delay(100);
    }

    if (is_at_goal()) {
 8003662:	f7ff fdc7 	bl	80031f4 <is_at_goal>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d026      	beq.n	80036ba <explore_maze+0x156>
        if (!robot.center_reached) {
 800366c:	4b1e      	ldr	r3, [pc, #120]	@ (80036e8 <explore_maze+0x184>)
 800366e:	7b1b      	ldrb	r3, [r3, #12]
 8003670:	f083 0301 	eor.w	r3, r3, #1
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d011      	beq.n	800369e <explore_maze+0x13a>
            robot.center_reached = true;
 800367a:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <explore_maze+0x184>)
 800367c:	2201      	movs	r2, #1
 800367e:	731a      	strb	r2, [r3, #12]
            send_bluetooth_message("🎯 CENTER REACHED! 🎯\r\n");
 8003680:	481d      	ldr	r0, [pc, #116]	@ (80036f8 <explore_maze+0x194>)
 8003682:	f7fd fd1d 	bl	80010c0 <send_bluetooth_message>
            play_success_tone();
 8003686:	f7fd fca9 	bl	8000fdc <play_success_tone>

            // Brief celebration
            led_sequence_complete();
 800368a:	f001 fd63 	bl	8005154 <led_sequence_complete>
            HAL_Delay(2000);
 800368e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003692:	f002 ff09 	bl	80064a8 <HAL_Delay>

            send_bluetooth_message("Now returning to start...\r\n");
 8003696:	4819      	ldr	r0, [pc, #100]	@ (80036fc <explore_maze+0x198>)
 8003698:	f7fd fd12 	bl	80010c0 <send_bluetooth_message>
 800369c:	e015      	b.n	80036ca <explore_maze+0x166>
        } else {
            robot.returned_to_start = true;
 800369e:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <explore_maze+0x184>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	735a      	strb	r2, [r3, #13]
            send_bluetooth_message("🏁 RETURNED TO START! 🏁\r\n");
 80036a4:	4816      	ldr	r0, [pc, #88]	@ (8003700 <explore_maze+0x19c>)
 80036a6:	f7fd fd0b 	bl	80010c0 <send_bluetooth_message>
            play_success_tone();
 80036aa:	f7fd fc97 	bl	8000fdc <play_success_tone>
            led_sequence_complete();
 80036ae:	f001 fd51 	bl	8005154 <led_sequence_complete>
            exploration_completed = 1;
 80036b2:	4b14      	ldr	r3, [pc, #80]	@ (8003704 <explore_maze+0x1a0>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e007      	b.n	80036ca <explore_maze+0x166>
        }
    } else {
        send_bluetooth_printf("❌ Exploration incomplete after %d steps\r\n", max_steps);
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4812      	ldr	r0, [pc, #72]	@ (8003708 <explore_maze+0x1a4>)
 80036be:	f7fd fd15 	bl	80010ec <send_bluetooth_printf>
        play_error_tone();
 80036c2:	f7fd fcb7 	bl	8001034 <play_error_tone>
        led_sequence_error();
 80036c6:	f001 fd64 	bl	8005192 <led_sequence_error>
    }

    send_bluetooth_printf("Total exploration steps: %d\r\n", robot.exploration_steps);
 80036ca:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <explore_maze+0x184>)
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	4619      	mov	r1, r3
 80036d0:	480e      	ldr	r0, [pc, #56]	@ (800370c <explore_maze+0x1a8>)
 80036d2:	f7fd fd0b 	bl	80010ec <send_bluetooth_printf>
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bdb0      	pop	{r4, r5, r7, pc}
 80036de:	bf00      	nop
 80036e0:	0800e664 	.word	0x0800e664
 80036e4:	0800e68c 	.word	0x0800e68c
 80036e8:	20000d68 	.word	0x20000d68
 80036ec:	20000468 	.word	0x20000468
 80036f0:	66666667 	.word	0x66666667
 80036f4:	0800e6bc 	.word	0x0800e6bc
 80036f8:	0800e6e8 	.word	0x0800e6e8
 80036fc:	0800e704 	.word	0x0800e704
 8003700:	0800e720 	.word	0x0800e720
 8003704:	20000dd0 	.word	0x20000dd0
 8003708:	0800e740 	.word	0x0800e740
 800370c:	0800e76c 	.word	0x0800e76c

08003710 <run_maze_exploration_sequence>:

/**
 * @brief Run complete maze exploration sequence
 */
void run_maze_exploration_sequence(void) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
    //send_bluetooth_message("\r\n" "=" * 50 "\r\n");
    send_bluetooth_message("🐭 MICROMOUSE MAZE EXPLORATION 🐭\r\n");
 8003716:	483f      	ldr	r0, [pc, #252]	@ (8003814 <run_maze_exploration_sequence+0x104>)
 8003718:	f7fd fcd2 	bl	80010c0 <send_bluetooth_message>
    //send_bluetooth_message("=" * 50 "\r\n");

    // Phase 1: Exploration to center
    if (!robot.center_reached) {
 800371c:	4b3e      	ldr	r3, [pc, #248]	@ (8003818 <run_maze_exploration_sequence+0x108>)
 800371e:	7b1b      	ldrb	r3, [r3, #12]
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d006      	beq.n	8003738 <run_maze_exploration_sequence+0x28>
        send_bluetooth_message("Phase 1: Exploring to center...\r\n");
 800372a:	483c      	ldr	r0, [pc, #240]	@ (800381c <run_maze_exploration_sequence+0x10c>)
 800372c:	f7fd fcc8 	bl	80010c0 <send_bluetooth_message>
        led_sequence_exploring();
 8003730:	f001 fd00 	bl	8005134 <led_sequence_exploring>
        explore_maze();
 8003734:	f7ff ff16 	bl	8003564 <explore_maze>
    }

    // Phase 2: Return to start
    if (robot.center_reached && !robot.returned_to_start) {
 8003738:	4b37      	ldr	r3, [pc, #220]	@ (8003818 <run_maze_exploration_sequence+0x108>)
 800373a:	7b1b      	ldrb	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d011      	beq.n	8003764 <run_maze_exploration_sequence+0x54>
 8003740:	4b35      	ldr	r3, [pc, #212]	@ (8003818 <run_maze_exploration_sequence+0x108>)
 8003742:	7b5b      	ldrb	r3, [r3, #13]
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <run_maze_exploration_sequence+0x54>
        send_bluetooth_message("Phase 2: Returning to start...\r\n");
 800374e:	4834      	ldr	r0, [pc, #208]	@ (8003820 <run_maze_exploration_sequence+0x110>)
 8003750:	f7fd fcb6 	bl	80010c0 <send_bluetooth_message>
        led_sequence_returning();
 8003754:	f001 fcf6 	bl	8005144 <led_sequence_returning>
        HAL_Delay(1000);
 8003758:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800375c:	f002 fea4 	bl	80064a8 <HAL_Delay>
        explore_maze();
 8003760:	f7ff ff00 	bl	8003564 <explore_maze>
    }

    // Phase 3: Report results
    if (robot.returned_to_start) {
 8003764:	4b2c      	ldr	r3, [pc, #176]	@ (8003818 <run_maze_exploration_sequence+0x108>)
 8003766:	7b5b      	ldrb	r3, [r3, #13]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d04f      	beq.n	800380c <run_maze_exploration_sequence+0xfc>
        send_bluetooth_message("\r\n" "🏆 EXPLORATION COMPLETE! 🏆" "\r\n");
 800376c:	482d      	ldr	r0, [pc, #180]	@ (8003824 <run_maze_exploration_sequence+0x114>)
 800376e:	f7fd fca7 	bl	80010c0 <send_bluetooth_message>
        send_performance_metrics();
 8003772:	f7fd fde5 	bl	8001340 <send_performance_metrics>

        // Calculate exploration efficiency
        int total_cells = MAZE_SIZE * MAZE_SIZE;
 8003776:	2390      	movs	r3, #144	@ 0x90
 8003778:	60bb      	str	r3, [r7, #8]
        int visited_cells = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
        for (int x = 0; x < MAZE_SIZE; x++) {
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e01c      	b.n	80037be <run_maze_exploration_sequence+0xae>
            for (int y = 0; y < MAZE_SIZE; y++) {
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e013      	b.n	80037b2 <run_maze_exploration_sequence+0xa2>
                if (maze[x][y].visited) visited_cells++;
 800378a:	4927      	ldr	r1, [pc, #156]	@ (8003828 <run_maze_exploration_sequence+0x118>)
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	440b      	add	r3, r1
 800379e:	3304      	adds	r3, #4
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <run_maze_exploration_sequence+0x9c>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
            for (int y = 0; y < MAZE_SIZE; y++) {
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b0b      	cmp	r3, #11
 80037b6:	dde8      	ble.n	800378a <run_maze_exploration_sequence+0x7a>
        for (int x = 0; x < MAZE_SIZE; x++) {
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	3301      	adds	r3, #1
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b0b      	cmp	r3, #11
 80037c2:	dddf      	ble.n	8003784 <run_maze_exploration_sequence+0x74>
            }
        }

        float exploration_percentage = (float)visited_cells / total_cells * 100.0f;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037dc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800382c <run_maze_exploration_sequence+0x11c>
 80037e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e4:	edc7 7a01 	vstr	s15, [r7, #4]
        send_bluetooth_printf("Exploration Coverage: %d/%d cells (%.1f%%)\r\n",
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fc feb5 	bl	8000558 <__aeabi_f2d>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	e9cd 2300 	strd	r2, r3, [sp]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	6979      	ldr	r1, [r7, #20]
 80037fa:	480d      	ldr	r0, [pc, #52]	@ (8003830 <run_maze_exploration_sequence+0x120>)
 80037fc:	f7fd fc76 	bl	80010ec <send_bluetooth_printf>
                             visited_cells, total_cells, exploration_percentage);

        // Ready for speed run (future implementation)
        send_bluetooth_message("🚀 Ready for speed run optimization! 🚀\r\n");
 8003800:	480c      	ldr	r0, [pc, #48]	@ (8003834 <run_maze_exploration_sequence+0x124>)
 8003802:	f7fd fc5d 	bl	80010c0 <send_bluetooth_message>

        exploration_completed = 1;
 8003806:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <run_maze_exploration_sequence+0x128>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
    }
}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	0800e78c 	.word	0x0800e78c
 8003818:	20000d68 	.word	0x20000d68
 800381c:	0800e7b4 	.word	0x0800e7b4
 8003820:	0800e7d8 	.word	0x0800e7d8
 8003824:	0800e7fc 	.word	0x0800e7fc
 8003828:	20000468 	.word	0x20000468
 800382c:	42c80000 	.word	0x42c80000
 8003830:	0800e820 	.word	0x0800e820
 8003834:	0800e850 	.word	0x0800e850
 8003838:	20000dd0 	.word	0x20000dd0

0800383c <is_exploration_complete>:

/**
 * @brief Check if exploration is complete
 */
bool is_exploration_complete(void) {
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
    return exploration_completed;
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <is_exploration_complete+0x1c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
}
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	20000dd0 	.word	0x20000dd0

0800385c <get_exploration_efficiency>:

/**
 * @brief Get exploration efficiency
 */
float get_exploration_efficiency(void) {
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
    if (robot.exploration_steps == 0) return 0.0f;
 8003862:	4b21      	ldr	r3, [pc, #132]	@ (80038e8 <get_exploration_efficiency+0x8c>)
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <get_exploration_efficiency+0x14>
 800386a:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80038ec <get_exploration_efficiency+0x90>
 800386e:	e034      	b.n	80038da <get_exploration_efficiency+0x7e>

    // Calculate theoretical minimum (Manhattan distance)
    int min_to_center = abs(maze_center_x1) + abs(maze_center_y1);
 8003870:	4b1f      	ldr	r3, [pc, #124]	@ (80038f0 <get_exploration_efficiency+0x94>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003878:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800387c:	4b1d      	ldr	r3, [pc, #116]	@ (80038f4 <get_exploration_efficiency+0x98>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	bfb8      	it	lt
 8003884:	425b      	neglt	r3, r3
 8003886:	4413      	add	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
    int min_to_start = abs(maze_center_x1 - 0) + abs(maze_center_y1 - 0);
 800388a:	4b19      	ldr	r3, [pc, #100]	@ (80038f0 <get_exploration_efficiency+0x94>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003892:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003896:	4b17      	ldr	r3, [pc, #92]	@ (80038f4 <get_exploration_efficiency+0x98>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	bfb8      	it	lt
 800389e:	425b      	neglt	r3, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
    int theoretical_min = min_to_center + min_to_start;
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4413      	add	r3, r2
 80038aa:	607b      	str	r3, [r7, #4]

    if (theoretical_min == 0) return 100.0f;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <get_exploration_efficiency+0x5c>
 80038b2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80038f8 <get_exploration_efficiency+0x9c>
 80038b6:	e010      	b.n	80038da <get_exploration_efficiency+0x7e>

    return ((float)theoretical_min / robot.exploration_steps) * 100.0f;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038c2:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <get_exploration_efficiency+0x8c>)
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80038f8 <get_exploration_efficiency+0x9c>
 80038d6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80038da:	eeb0 0a67 	vmov.f32	s0, s15
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	20000d68 	.word	0x20000d68
 80038ec:	00000000 	.word	0x00000000
 80038f0:	20000dc0 	.word	0x20000dc0
 80038f4:	20000dc4 	.word	0x20000dc4
 80038f8:	42c80000 	.word	0x42c80000

080038fc <get_optimal_distance>:

/**
 * @brief Get optimal distance for current maze knowledge
 */
int get_optimal_distance(void) {
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
    // This would implement A* or similar for optimal path calculation
    // For now, return the flood fill distance to center
    return maze[0][0].distance;
 8003900:	4b03      	ldr	r3, [pc, #12]	@ (8003910 <get_optimal_distance+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000468 	.word	0x20000468

08003914 <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 800391a:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <update_encoder_totals+0x6c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8003922:	4b18      	ldr	r3, [pc, #96]	@ (8003984 <update_encoder_totals+0x70>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 800392a:	4b17      	ldr	r3, [pc, #92]	@ (8003988 <update_encoder_totals+0x74>)
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	b29b      	uxth	r3, r3
 8003934:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 8003936:	4b15      	ldr	r3, [pc, #84]	@ (800398c <update_encoder_totals+0x78>)
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	88ba      	ldrh	r2, [r7, #4]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	b29b      	uxth	r3, r3
 8003940:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    right_diff = -right_diff;  // Make left encoder positive for forward movement
 8003942:	883b      	ldrh	r3, [r7, #0]
 8003944:	425b      	negs	r3, r3
 8003946:	b29b      	uxth	r3, r3
 8003948:	803b      	strh	r3, [r7, #0]

    // Update totals
    left_total += left_diff;
 800394a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800394e:	4b10      	ldr	r3, [pc, #64]	@ (8003990 <update_encoder_totals+0x7c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4413      	add	r3, r2
 8003954:	4a0e      	ldr	r2, [pc, #56]	@ (8003990 <update_encoder_totals+0x7c>)
 8003956:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 8003958:	f9b7 2000 	ldrsh.w	r2, [r7]
 800395c:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <update_encoder_totals+0x80>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4413      	add	r3, r2
 8003962:	4a0c      	ldr	r2, [pc, #48]	@ (8003994 <update_encoder_totals+0x80>)
 8003964:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 8003966:	4a08      	ldr	r2, [pc, #32]	@ (8003988 <update_encoder_totals+0x74>)
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 800396c:	4a07      	ldr	r2, [pc, #28]	@ (800398c <update_encoder_totals+0x78>)
 800396e:	88bb      	ldrh	r3, [r7, #4]
 8003970:	8013      	strh	r3, [r2, #0]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000348 	.word	0x20000348
 8003984:	200003d8 	.word	0x200003d8
 8003988:	20000004 	.word	0x20000004
 800398c:	20000006 	.word	0x20000006
 8003990:	200012ec 	.word	0x200012ec
 8003994:	200012f0 	.word	0x200012f0

08003998 <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
    update_encoder_totals();
 800399c:	f7ff ffba 	bl	8003914 <update_encoder_totals>
    return left_total;
 80039a0:	4b01      	ldr	r3, [pc, #4]	@ (80039a8 <get_left_encoder_total+0x10>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200012ec 	.word	0x200012ec

080039ac <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
    update_encoder_totals();
 80039b0:	f7ff ffb0 	bl	8003914 <update_encoder_totals>
    return right_total;
 80039b4:	4b01      	ldr	r3, [pc, #4]	@ (80039bc <get_right_encoder_total+0x10>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200012f0 	.word	0x200012f0

080039c0 <reset_encoder_totals>:

/**
 * @brief Reset encoder totals - NEW FUNCTION
 */
void reset_encoder_totals(void) {
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
    left_total = 0;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <reset_encoder_totals+0x34>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
    right_total = 0;
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <reset_encoder_totals+0x38>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
    last_left_count = __HAL_TIM_GET_COUNTER(&htim2);
 80039d0:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <reset_encoder_totals+0x3c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <reset_encoder_totals+0x40>)
 80039da:	801a      	strh	r2, [r3, #0]
    last_right_count = __HAL_TIM_GET_COUNTER(&htim4);
 80039dc:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <reset_encoder_totals+0x44>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	4b08      	ldr	r3, [pc, #32]	@ (8003a08 <reset_encoder_totals+0x48>)
 80039e6:	801a      	strh	r2, [r3, #0]
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200012ec 	.word	0x200012ec
 80039f8:	200012f0 	.word	0x200012f0
 80039fc:	20000348 	.word	0x20000348
 8003a00:	20000004 	.word	0x20000004
 8003a04:	200003d8 	.word	0x200003d8
 8003a08:	20000006 	.word	0x20000006

08003a0c <start_encoders>:

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 8003a10:	213c      	movs	r1, #60	@ 0x3c
 8003a12:	4815      	ldr	r0, [pc, #84]	@ (8003a68 <start_encoders+0x5c>)
 8003a14:	f005 f95e 	bl	8008cd4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 8003a18:	213c      	movs	r1, #60	@ 0x3c
 8003a1a:	4814      	ldr	r0, [pc, #80]	@ (8003a6c <start_encoders+0x60>)
 8003a1c:	f005 f95a 	bl	8008cd4 <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 8003a20:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <start_encoders+0x5c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a28:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 8003a2a:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <start_encoders+0x60>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a32:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 8003a34:	2001      	movs	r0, #1
 8003a36:	f002 fd37 	bl	80064a8 <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <start_encoders+0x64>)
 8003a3c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a40:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 8003a42:	4b0c      	ldr	r3, [pc, #48]	@ (8003a74 <start_encoders+0x68>)
 8003a44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a48:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <start_encoders+0x6c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8003a50:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <start_encoders+0x70>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 8003a56:	4b0a      	ldr	r3, [pc, #40]	@ (8003a80 <start_encoders+0x74>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 8003a5c:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <start_encoders+0x74>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	60da      	str	r2, [r3, #12]
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	200003d8 	.word	0x200003d8
 8003a6c:	20000348 	.word	0x20000348
 8003a70:	20000004 	.word	0x20000004
 8003a74:	20000006 	.word	0x20000006
 8003a78:	200012ec 	.word	0x200012ec
 8003a7c:	200012f0 	.word	0x200012f0
 8003a80:	20000da0 	.word	0x20000da0

08003a84 <turn_left>:

static const int16_t S_CURVE_LUT[S_CURVE_LUT_LEN] = {
    700, 700, 700, 699, 698, 697, 695, 692, 689, 685, 680, 674, 667, 660, 652, 643, 633, 623, 612, 601, 589, 577, 564, 551, 538, 525, 512, 499, 486, 473, 461, 449, 438, 427, 417, 407, 398, 390, 383, 376, 370, 365, 361, 358, 355, 353, 352, 351, 350, 350, 350
};

void turn_left(void) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0

    // turn 90 degrees left using gyro PID, 1200 ms timeout for safety
	if (sensors.wall_front){
 8003a88:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <turn_left+0x58>)
 8003a8a:	7a9b      	ldrb	r3, [r3, #10]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <turn_left+0x1a>
		align_front_to_wall(600,4000);
 8003a90:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8003a94:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003a98:	f001 fc20 	bl	80052dc <align_front_to_wall>
 8003a9c:	e005      	b.n	8003aaa <turn_left+0x26>
	}else{

		move_forward_distance(957,957);
 8003a9e:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8003aa2:	f240 30bd 	movw	r0, #957	@ 0x3bd
 8003aa6:	f000 f8cf 	bl	8003c48 <move_forward_distance>

		//dwt_delay_us(100);
	}


    gyro_turn_reset();
 8003aaa:	f000 fb09 	bl	80040c0 <gyro_turn_reset>
    turn_in_place_gyro(+90.0f, 520, 1200);
 8003aae:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003ab2:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003ab6:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003ae0 <turn_left+0x5c>
 8003aba:	f000 fbdd 	bl	8004278 <turn_in_place_gyro>

    //move_forward_distance(1549,1537);//////////////
    robot.direction = (robot.direction + 3) % 4;
 8003abe:	4b09      	ldr	r3, [pc, #36]	@ (8003ae4 <turn_left+0x60>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	3303      	adds	r3, #3
 8003ac4:	425a      	negs	r2, r3
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	f002 0203 	and.w	r2, r2, #3
 8003ace:	bf58      	it	pl
 8003ad0:	4253      	negpl	r3, r2
 8003ad2:	4a04      	ldr	r2, [pc, #16]	@ (8003ae4 <turn_left+0x60>)
 8003ad4:	6093      	str	r3, [r2, #8]

}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000d7c 	.word	0x20000d7c
 8003ae0:	42b40000 	.word	0x42b40000
 8003ae4:	20000d68 	.word	0x20000d68

08003ae8 <turn_right>:

void turn_right(void) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	if (sensors.wall_front){
 8003aec:	4b14      	ldr	r3, [pc, #80]	@ (8003b40 <turn_right+0x58>)
 8003aee:	7a9b      	ldrb	r3, [r3, #10]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <turn_right+0x1a>
		align_front_to_wall(600,3000);
 8003af4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8003af8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003afc:	f001 fbee 	bl	80052dc <align_front_to_wall>
 8003b00:	e005      	b.n	8003b0e <turn_right+0x26>
	}else{
		move_forward_distance(957,957);
 8003b02:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8003b06:	f240 30bd 	movw	r0, #957	@ 0x3bd
 8003b0a:	f000 f89d 	bl	8003c48 <move_forward_distance>
	}
	gyro_turn_reset();
 8003b0e:	f000 fad7 	bl	80040c0 <gyro_turn_reset>
    turn_in_place_gyro(-90.0f, 520, 1200);
 8003b12:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003b16:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003b1a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003b44 <turn_right+0x5c>
 8003b1e:	f000 fbab 	bl	8004278 <turn_in_place_gyro>
    //move_forward_distance(1530,1562);
    robot.direction = (robot.direction + 1) % 4;
 8003b22:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <turn_right+0x60>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	3301      	adds	r3, #1
 8003b28:	425a      	negs	r2, r3
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	f002 0203 	and.w	r2, r2, #3
 8003b32:	bf58      	it	pl
 8003b34:	4253      	negpl	r3, r2
 8003b36:	4a04      	ldr	r2, [pc, #16]	@ (8003b48 <turn_right+0x60>)
 8003b38:	6093      	str	r3, [r2, #8]
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000d7c 	.word	0x20000d7c
 8003b44:	c2b40000 	.word	0xc2b40000
 8003b48:	20000d68 	.word	0x20000d68

08003b4c <turn_around>:

/**
 * @brief Turn around 180 degrees
 */
void turn_around(void) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
	if (sensors.wall_front){
 8003b50:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc8 <turn_around+0x7c>)
 8003b52:	7a9b      	ldrb	r3, [r3, #10]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d006      	beq.n	8003b66 <turn_around+0x1a>
		align_front_to_wall(600,3000);
 8003b58:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8003b5c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003b60:	f001 fbbc 	bl	80052dc <align_front_to_wall>
 8003b64:	e005      	b.n	8003b72 <turn_around+0x26>
	}else{
		move_forward_distance(957,957);
 8003b66:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8003b6a:	f240 30bd 	movw	r0, #957	@ 0x3bd
 8003b6e:	f000 f86b 	bl	8003c48 <move_forward_distance>
	}
	turn_in_place_gyro(-90.0f, 520, 1200);
 8003b72:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003b76:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003b7a:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8003bcc <turn_around+0x80>
 8003b7e:	f000 fb7b 	bl	8004278 <turn_in_place_gyro>
	turn_in_place_gyro(-90.0f, 520, 1200);
 8003b82:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003b86:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003b8a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003bcc <turn_around+0x80>
 8003b8e:	f000 fb73 	bl	8004278 <turn_in_place_gyro>

	//move_forward_distance(1330,1352);/////////////////

	robot.direction = (robot.direction + 1) % 4;
 8003b92:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd0 <turn_around+0x84>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	3301      	adds	r3, #1
 8003b98:	425a      	negs	r2, r3
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	f002 0203 	and.w	r2, r2, #3
 8003ba2:	bf58      	it	pl
 8003ba4:	4253      	negpl	r3, r2
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd0 <turn_around+0x84>)
 8003ba8:	6093      	str	r3, [r2, #8]
	robot.direction = (robot.direction + 1) % 4;
 8003baa:	4b09      	ldr	r3, [pc, #36]	@ (8003bd0 <turn_around+0x84>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	425a      	negs	r2, r3
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	f002 0203 	and.w	r2, r2, #3
 8003bba:	bf58      	it	pl
 8003bbc:	4253      	negpl	r3, r2
 8003bbe:	4a04      	ldr	r2, [pc, #16]	@ (8003bd0 <turn_around+0x84>)
 8003bc0:	6093      	str	r3, [r2, #8]


}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000d7c 	.word	0x20000d7c
 8003bcc:	c2b40000 	.word	0xc2b40000
 8003bd0:	20000d68 	.word	0x20000d68

08003bd4 <stop_motors>:

/**
 * @brief Stop both motors
 */
void stop_motors(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // Left motor PWM = 0
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c04 <stop_motors+0x30>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // Left motor direction = 0
 8003be0:	4b08      	ldr	r3, [pc, #32]	@ (8003c04 <stop_motors+0x30>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2200      	movs	r2, #0
 8003be6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);  // Right motor PWM = 0
 8003be8:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <stop_motors+0x30>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);  // Right motor direction = 0
 8003bf0:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <stop_motors+0x30>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000390 	.word	0x20000390

08003c08 <break_motors>:
void break_motors(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
    // Apply active braking by setting both inputs HIGH for each motor
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);  // Left IN1 = HIGH
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <break_motors+0x3c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c14:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);  // Left IN2 = HIGH
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <break_motors+0x3c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c1e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);  // Right IN3 = HIGH
 8003c20:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <break_motors+0x3c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c28:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);  // Right IN4 = HIGH
 8003c2a:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <break_motors+0x3c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40

    HAL_Delay(200);  // Hold brake briefly
 8003c34:	20c8      	movs	r0, #200	@ 0xc8
 8003c36:	f002 fc37 	bl	80064a8 <HAL_Delay>
    stop_motors();   // Then coast
 8003c3a:	f7ff ffcb 	bl	8003bd4 <stop_motors>
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000390 	.word	0x20000390

08003c48 <move_forward_distance>:


/**
 * @brief Move forward a specific distance - FIXED VERSION
 */
void move_forward_distance(int Left_target_counts,int Right_target_counts) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]

    //  Use safe encoder reading
	reset_encoder_totals();
 8003c52:	f7ff feb5 	bl	80039c0 <reset_encoder_totals>
    int32_t start_left = get_left_encoder_total();
 8003c56:	f7ff fe9f 	bl	8003998 <get_left_encoder_total>
 8003c5a:	61f8      	str	r0, [r7, #28]
    int32_t start_right = get_right_encoder_total();
 8003c5c:	f7ff fea6 	bl	80039ac <get_right_encoder_total>
 8003c60:	61b8      	str	r0, [r7, #24]
    moveStraightGyroPID_Reset();
 8003c62:	f000 f8f9 	bl	8003e58 <moveStraightGyroPID_Reset>


    while (1) {
    	mpu9250_read_gyro();
 8003c66:	f7fd fdb3 	bl	80017d0 <mpu9250_read_gyro>
    	moveStraightGyroPID();
 8003c6a:	f000 f919 	bl	8003ea0 <moveStraightGyroPID>


        int32_t current_left = get_left_encoder_total();
 8003c6e:	f7ff fe93 	bl	8003998 <get_left_encoder_total>
 8003c72:	6178      	str	r0, [r7, #20]
        int32_t current_right = get_right_encoder_total();
 8003c74:	f7ff fe9a 	bl	80039ac <get_right_encoder_total>
 8003c78:	6138      	str	r0, [r7, #16]
        int32_t left_traveled =  start_left-current_left;
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	60fb      	str	r3, [r7, #12]
        int32_t right_traveled = start_right-current_right;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	60bb      	str	r3, [r7, #8]
        //int32_t avg_traveled = (left_traveled + right_traveled) / 2;

        //send_bluetooth_printf("L:%ld R:%ld\r\n",current_left,current_right);

        if (left_traveled>=Left_target_counts || right_traveled>=Right_target_counts) {
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	da07      	bge.n	8003ca2 <move_forward_distance+0x5a>
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	da03      	bge.n	8003ca2 <move_forward_distance+0x5a>
            break;
        }
        HAL_Delay(1);
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f002 fc04 	bl	80064a8 <HAL_Delay>
    while (1) {
 8003ca0:	e7e1      	b.n	8003c66 <move_forward_distance+0x1e>
    }

    break_motors();		// use a S-curve to apply break/////////////////////
 8003ca2:	f7ff ffb1 	bl	8003c08 <break_motors>
}
 8003ca6:	bf00      	nop
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <move_forward_WF_distance>:

/**
 * @brief Move forward a specific distance - FIXED VERSION
 */
void move_forward_WF_distance(int Left_target_counts,int Right_target_counts) {
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b08a      	sub	sp, #40	@ 0x28
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]

    // FIXED: Use safe encoder reading
	reset_encoder_totals();
 8003cb8:	f7ff fe82 	bl	80039c0 <reset_encoder_totals>
    int32_t start_left = get_left_encoder_total();
 8003cbc:	f7ff fe6c 	bl	8003998 <get_left_encoder_total>
 8003cc0:	6278      	str	r0, [r7, #36]	@ 0x24
    int32_t start_right = get_right_encoder_total();
 8003cc2:	f7ff fe73 	bl	80039ac <get_right_encoder_total>
 8003cc6:	6238      	str	r0, [r7, #32]
    // 0 = auto (both → center; else follow visible side), 1 = left, 2 = right
    int mode = 0;               // WF_AUTO
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
    int base_pwm = 650;         // UPDATEDDDDDDDDDDDDDDDDDD
 8003ccc:	f240 238a 	movw	r3, #650	@ 0x28a
 8003cd0:	61bb      	str	r3, [r7, #24]

    // bootstrap targets & reset integrators
    wall_follow_reset_int(mode, base_pwm);
 8003cd2:	69b9      	ldr	r1, [r7, #24]
 8003cd4:	69f8      	ldr	r0, [r7, #28]
 8003cd6:	f001 fcbd 	bl	8005654 <wall_follow_reset_int>

    fusion_align_entry(600, 3000);
 8003cda:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8003cde:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003ce2:	f002 f991 	bl	8006008 <fusion_align_entry>


    fusion_reset();
 8003ce6:	f001 fed7 	bl	8005a98 <fusion_reset>
    fusion_set_heading_ref_to_current();  // lock the present heading
 8003cea:	f001 ff3b 	bl	8005b64 <fusion_set_heading_ref_to_current>

    while (1) {
    	fusion_step(/*base_pwm=*/650);  // 0 → uses WF_BASE_PWM; or pass an explicit base
 8003cee:	f240 208a 	movw	r0, #650	@ 0x28a
 8003cf2:	f001 ff47 	bl	8005b84 <fusion_step>

    	//wall_follow_step();     // computes e, PID, sets motor PWMs
		//HAL_Delay(200);           // keep a steady loop
		dwt_delay_us(50);
 8003cf6:	2032      	movs	r0, #50	@ 0x32
 8003cf8:	f7fe fd2c 	bl	8002754 <dwt_delay_us>


        int32_t current_left = get_left_encoder_total();
 8003cfc:	f7ff fe4c 	bl	8003998 <get_left_encoder_total>
 8003d00:	6178      	str	r0, [r7, #20]
        int32_t current_right = get_right_encoder_total();
 8003d02:	f7ff fe53 	bl	80039ac <get_right_encoder_total>
 8003d06:	6138      	str	r0, [r7, #16]
        int32_t left_traveled =  start_left-current_left;
 8003d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
        int32_t right_traveled = start_right-current_right;
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	60bb      	str	r3, [r7, #8]
        //int32_t avg_traveled = (left_traveled + right_traveled) / 2;

        //send_bluetooth_printf("L:%ld R:%ld\r\n",current_left,current_right);

        if (left_traveled>=Left_target_counts || right_traveled>=Right_target_counts) {
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	da04      	bge.n	8003d2a <move_forward_WF_distance+0x7c>
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	da00      	bge.n	8003d2a <move_forward_WF_distance+0x7c>
    while (1) {
 8003d28:	e7e1      	b.n	8003cee <move_forward_WF_distance+0x40>
            break;
        }
        //HAL_Delay(1);
    }
    break_motors();		// use a S-curve to apply break/////////////////////
 8003d2a:	f7ff ff6d 	bl	8003c08 <break_motors>
    //move_forward_distance(Left_target_counts/2,Right_target_counts/2);


}
 8003d2e:	bf00      	nop
 8003d30:	3728      	adds	r7, #40	@ 0x28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <motor_set>:



// helper to set speed (0–1000 = 0–100%)
// Fixed motor_set function for DRV8833
void motor_set(uint8_t motor, bool forward, uint16_t duty) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
 8003d42:	460b      	mov	r3, r1
 8003d44:	71bb      	strb	r3, [r7, #6]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80bb      	strh	r3, [r7, #4]
    if (motor == 0) { // Left motor
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d115      	bne.n	8003d7c <motor_set+0x44>
        if (forward) {
 8003d50:	79bb      	ldrb	r3, [r7, #6]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <motor_set+0x30>
			// Left reverse: IN1=LOW, IN2=PWM
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty); // PA6 = PWM
 8003d56:	4b17      	ldr	r3, [pc, #92]	@ (8003db4 <motor_set+0x7c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	88ba      	ldrh	r2, [r7, #4]
 8003d5c:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // PA7 = LOW
 8003d5e:	4b15      	ldr	r3, [pc, #84]	@ (8003db4 <motor_set+0x7c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	639a      	str	r2, [r3, #56]	@ 0x38
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM

        }
    }
}
 8003d66:	e020      	b.n	8003daa <motor_set+0x72>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty); // PA7 = PWM
 8003d68:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <motor_set+0x7c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	88ba      	ldrh	r2, [r7, #4]
 8003d6e:	639a      	str	r2, [r3, #56]	@ 0x38
        	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET); // PA6 = LOW
 8003d70:	2200      	movs	r2, #0
 8003d72:	2140      	movs	r1, #64	@ 0x40
 8003d74:	4810      	ldr	r0, [pc, #64]	@ (8003db8 <motor_set+0x80>)
 8003d76:	f003 fad5 	bl	8007324 <HAL_GPIO_WritePin>
}
 8003d7a:	e016      	b.n	8003daa <motor_set+0x72>
    	bool actual_forward = forward;  // invert direction
 8003d7c:	79bb      	ldrb	r3, [r7, #6]
 8003d7e:	73fb      	strb	r3, [r7, #15]
        if (actual_forward) {
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <motor_set+0x62>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty); // PB1 = PWM
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <motor_set+0x7c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	88ba      	ldrh	r2, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	@ 0x40
        	HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_RESET); // PB0 = LOW
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2101      	movs	r1, #1
 8003d92:	480a      	ldr	r0, [pc, #40]	@ (8003dbc <motor_set+0x84>)
 8003d94:	f003 fac6 	bl	8007324 <HAL_GPIO_WritePin>
}
 8003d98:	e007      	b.n	8003daa <motor_set+0x72>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
 8003d9a:	4b06      	ldr	r3, [pc, #24]	@ (8003db4 <motor_set+0x7c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM
 8003da2:	4b04      	ldr	r3, [pc, #16]	@ (8003db4 <motor_set+0x7c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	88ba      	ldrh	r2, [r7, #4]
 8003da8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000390 	.word	0x20000390
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	40020400 	.word	0x40020400

08003dc0 <send_encoder_status>:


/**
 * @brief Get encoder status for debugging - NEW FUNCTION
 */
void send_encoder_status(void) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af02      	add	r7, sp, #8
    update_encoder_totals();
 8003dc6:	f7ff fda5 	bl	8003914 <update_encoder_totals>
    send_bluetooth_printf("Encoders - Left:%ld Right:%ld Raw_L:%d Raw_R:%d\r\n",
 8003dca:	4b09      	ldr	r3, [pc, #36]	@ (8003df0 <send_encoder_status+0x30>)
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <send_encoder_status+0x34>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
                         left_total, right_total,
                         __HAL_TIM_GET_COUNTER(&htim2), __HAL_TIM_GET_COUNTER(&htim4));
 8003dd2:	4b09      	ldr	r3, [pc, #36]	@ (8003df8 <send_encoder_status+0x38>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003dd8:	4b08      	ldr	r3, [pc, #32]	@ (8003dfc <send_encoder_status+0x3c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    send_bluetooth_printf("Encoders - Left:%ld Right:%ld Raw_L:%d Raw_R:%d\r\n",
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	4603      	mov	r3, r0
 8003de2:	4807      	ldr	r0, [pc, #28]	@ (8003e00 <send_encoder_status+0x40>)
 8003de4:	f7fd f982 	bl	80010ec <send_bluetooth_printf>
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	200012ec 	.word	0x200012ec
 8003df4:	200012f0 	.word	0x200012f0
 8003df8:	20000348 	.word	0x20000348
 8003dfc:	200003d8 	.word	0x200003d8
 8003e00:	0800e924 	.word	0x0800e924

08003e04 <clampf_local>:
static const int PWM_MIN = 0;
static const int PWM_MAX = 1000;
static const int PWM_MIN_MOVE = 40;                // optional min to overcome stiction

/* Helper clamp */
static inline float clampf_local(float v, float lo, float hi) {
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e0e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e12:	ed87 1a01 	vstr	s2, [r7, #4]
    return (v < lo) ? lo : (v > hi) ? hi : v;
 8003e16:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e26:	d501      	bpl.n	8003e2c <clampf_local+0x28>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	e00b      	b.n	8003e44 <clampf_local+0x40>
 8003e2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3c:	dd01      	ble.n	8003e42 <clampf_local+0x3e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	e000      	b.n	8003e44 <clampf_local+0x40>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	ee07 3a90 	vmov	s15, r3
}
 8003e48:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <moveStraightGyroPID_Reset>:
    if (v < lo) return lo;
    if (v > hi) return hi;
    return v;
}

void moveStraightGyroPID_Reset(void) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
    pid_error_prev = 0.0f;
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <moveStraightGyroPID_Reset+0x34>)
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
    pid_integral = 0.0f;
 8003e64:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <moveStraightGyroPID_Reset+0x38>)
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
    pid_deriv_filt = 0.0f;
 8003e6c:	4b09      	ldr	r3, [pc, #36]	@ (8003e94 <moveStraightGyroPID_Reset+0x3c>)
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
    learn_cooldown = 0.0f;
 8003e74:	4b08      	ldr	r3, [pc, #32]	@ (8003e98 <moveStraightGyroPID_Reset+0x40>)
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
    pid_last_ms = HAL_GetTick();
 8003e7c:	f002 fb08 	bl	8006490 <HAL_GetTick>
 8003e80:	4603      	mov	r3, r0
 8003e82:	4a06      	ldr	r2, [pc, #24]	@ (8003e9c <moveStraightGyroPID_Reset+0x44>)
 8003e84:	6013      	str	r3, [r2, #0]
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200012f8 	.word	0x200012f8
 8003e90:	200012fc 	.word	0x200012fc
 8003e94:	20001300 	.word	0x20001300
 8003e98:	20001304 	.word	0x20001304
 8003e9c:	200012f4 	.word	0x200012f4

08003ea0 <moveStraightGyroPID>:




void moveStraightGyroPID(void) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8003ea6:	f002 faf3 	bl	8006490 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]
    float dt = (now - pid_last_ms) / 1000.0f;
 8003eac:	4b6c      	ldr	r3, [pc, #432]	@ (8004060 <moveStraightGyroPID+0x1c0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ebc:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8004064 <moveStraightGyroPID+0x1c4>
 8003ec0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ec4:	edc7 7a07 	vstr	s15, [r7, #28]
    if (dt <= 0.0f) dt = 0.001f; // safety small dt if HAL tick didn't advance
 8003ec8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ecc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed4:	d801      	bhi.n	8003eda <moveStraightGyroPID+0x3a>
 8003ed6:	4b64      	ldr	r3, [pc, #400]	@ (8004068 <moveStraightGyroPID+0x1c8>)
 8003ed8:	61fb      	str	r3, [r7, #28]
    pid_last_ms = now;
 8003eda:	4a61      	ldr	r2, [pc, #388]	@ (8004060 <moveStraightGyroPID+0x1c0>)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6013      	str	r3, [r2, #0]

    /* READ: your gyro rate (deg/s). Keep original sign convention:
       original code used error_g = mpu9250_get_gyro_z_compensated();
       and motor1 = base - correction; motor2 = base + correction;
       so we preserve that mapping for compatibility. */
    float error = mpu9250_get_gyro_z_compensated();
 8003ee0:	f7fd fc3c 	bl	800175c <mpu9250_get_gyro_z_compensated>
 8003ee4:	ed87 0a03 	vstr	s0, [r7, #12]

    /* Integral (with dt) + anti-windup clamp */
    pid_integral += error * dt;
 8003ee8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003eec:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef4:	4b5d      	ldr	r3, [pc, #372]	@ (800406c <moveStraightGyroPID+0x1cc>)
 8003ef6:	edd3 7a00 	vldr	s15, [r3]
 8003efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efe:	4b5b      	ldr	r3, [pc, #364]	@ (800406c <moveStraightGyroPID+0x1cc>)
 8003f00:	edc3 7a00 	vstr	s15, [r3]
    pid_integral = clampf_local(pid_integral, -INTEGRAL_LIMIT, INTEGRAL_LIMIT);
 8003f04:	4b59      	ldr	r3, [pc, #356]	@ (800406c <moveStraightGyroPID+0x1cc>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003f0e:	eeb1 7a47 	vneg.f32	s14, s14
 8003f12:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003f16:	eeb0 1a66 	vmov.f32	s2, s13
 8003f1a:	eef0 0a47 	vmov.f32	s1, s14
 8003f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f22:	f7ff ff6f 	bl	8003e04 <clampf_local>
 8003f26:	eef0 7a40 	vmov.f32	s15, s0
 8003f2a:	4b50      	ldr	r3, [pc, #320]	@ (800406c <moveStraightGyroPID+0x1cc>)
 8003f2c:	edc3 7a00 	vstr	s15, [r3]

    /* Derivative (on error) and low-pass filter */
    float deriv_raw = (error - pid_error_prev) / dt;    // d(error)/dt
 8003f30:	4b4f      	ldr	r3, [pc, #316]	@ (8004070 <moveStraightGyroPID+0x1d0>)
 8003f32:	edd3 7a00 	vldr	s15, [r3]
 8003f36:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f3a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f46:	edc7 7a02 	vstr	s15, [r7, #8]
    pid_deriv_filt = DERIV_FILTER_ALPHA * pid_deriv_filt + (1.0f - DERIV_FILTER_ALPHA) * deriv_raw;
 8003f4a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8004074 <moveStraightGyroPID+0x1d4>
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004078 <moveStraightGyroPID+0x1d8>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f58:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8004074 <moveStraightGyroPID+0x1d4>
 8003f5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f64:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f70:	4b41      	ldr	r3, [pc, #260]	@ (8004078 <moveStraightGyroPID+0x1d8>)
 8003f72:	edc3 7a00 	vstr	s15, [r3]

    /* PID output (correction) */
    float correction = (Kp_g * error) + (Ki_g * pid_integral) + (Kd_g * pid_deriv_filt);
 8003f76:	4b41      	ldr	r3, [pc, #260]	@ (800407c <moveStraightGyroPID+0x1dc>)
 8003f78:	ed93 7a00 	vldr	s14, [r3]
 8003f7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f84:	4b3e      	ldr	r3, [pc, #248]	@ (8004080 <moveStraightGyroPID+0x1e0>)
 8003f86:	edd3 6a00 	vldr	s13, [r3]
 8003f8a:	4b38      	ldr	r3, [pc, #224]	@ (800406c <moveStraightGyroPID+0x1cc>)
 8003f8c:	edd3 7a00 	vldr	s15, [r3]
 8003f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f98:	4b3a      	ldr	r3, [pc, #232]	@ (8004084 <moveStraightGyroPID+0x1e4>)
 8003f9a:	edd3 6a00 	vldr	s13, [r3]
 8003f9e:	4b36      	ldr	r3, [pc, #216]	@ (8004078 <moveStraightGyroPID+0x1d8>)
 8003fa0:	edd3 7a00 	vldr	s15, [r3]
 8003fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fac:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Base PWM for forward motion (adjust to your nominal cruising PWM) */
    const int base_pwm = 570;
 8003fb0:	f240 233a 	movw	r3, #570	@ 0x23a
 8003fb4:	603b      	str	r3, [r7, #0]

    int motor1Speed = (int)roundf((float)base_pwm - correction); // right wheel in your mapping
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fcc:	f009 fc98 	bl	800d900 <roundf>
 8003fd0:	eef0 7a40 	vmov.f32	s15, s0
 8003fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fd8:	ee17 3a90 	vmov	r3, s15
 8003fdc:	61bb      	str	r3, [r7, #24]
    int motor2Speed = (int)roundf((float)base_pwm + correction); // left wheel
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	ee07 3a90 	vmov	s15, r3
 8003fe4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff4:	f009 fc84 	bl	800d900 <roundf>
 8003ff8:	eef0 7a40 	vmov.f32	s15, s0
 8003ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004000:	ee17 3a90 	vmov	r3, s15
 8004004:	617b      	str	r3, [r7, #20]

    /* Clamp PWM outputs (and provide a safe top, not full 1000 if you prefer) */
    if (motor1Speed > 1200) motor1Speed = 1200;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800400c:	dd02      	ble.n	8004014 <moveStraightGyroPID+0x174>
 800400e:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8004012:	61bb      	str	r3, [r7, #24]
    if (motor2Speed > 1200) motor2Speed = 1200;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800401a:	dd02      	ble.n	8004022 <moveStraightGyroPID+0x182>
 800401c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8004020:	617b      	str	r3, [r7, #20]
    if (motor1Speed < 0) motor1Speed = 0;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	da01      	bge.n	800402c <moveStraightGyroPID+0x18c>
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
    if (motor2Speed < 0) motor2Speed = 0;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	da01      	bge.n	8004036 <moveStraightGyroPID+0x196>
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]



    /* Set motors: adjust direction flags if your wiring uses opposite logic */
    motor_set(0, true, motor2Speed); // Left
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	b29b      	uxth	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	2101      	movs	r1, #1
 800403e:	2000      	movs	r0, #0
 8004040:	f7ff fe7a 	bl	8003d38 <motor_set>
    motor_set(1, true, motor1Speed); // Right
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	b29b      	uxth	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	2101      	movs	r1, #1
 800404c:	2001      	movs	r0, #1
 800404e:	f7ff fe73 	bl	8003d38 <motor_set>

    /* store previous error for next derivative computation */
    pid_error_prev = error;
 8004052:	4a07      	ldr	r2, [pc, #28]	@ (8004070 <moveStraightGyroPID+0x1d0>)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6013      	str	r3, [r2, #0]
}
 8004058:	bf00      	nop
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	200012f4 	.word	0x200012f4
 8004064:	447a0000 	.word	0x447a0000
 8004068:	3a83126f 	.word	0x3a83126f
 800406c:	200012fc 	.word	0x200012fc
 8004070:	200012f8 	.word	0x200012f8
 8004074:	3f6fd007 	.word	0x3f6fd007
 8004078:	20001300 	.word	0x20001300
 800407c:	20000008 	.word	0x20000008
 8004080:	2000000c 	.word	0x2000000c
 8004084:	20000010 	.word	0x20000010

08004088 <signf>:
static const float INTEGRAL_CLAMP = 10.0f;

// --- PID state ---
static float pid_int = 0.0f, pid_prev_err = 0.0f, pid_deriv_f = 0.0f;

static inline float signf(float x) { return (x >= 0.0f) ? 1.0f : -1.0f; }
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004092:	edd7 7a01 	vldr	s15, [r7, #4]
 8004096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409e:	db02      	blt.n	80040a6 <signf+0x1e>
 80040a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80040a4:	e000      	b.n	80040a8 <signf+0x20>
 80040a6:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <signf+0x34>)
 80040a8:	ee07 3a90 	vmov	s15, r3
 80040ac:	eeb0 0a67 	vmov.f32	s0, s15
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	bf800000 	.word	0xbf800000

080040c0 <gyro_turn_reset>:

void gyro_turn_reset(void) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
    pid_int = 0.0f;
 80040c4:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <gyro_turn_reset+0x2c>)
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
    pid_prev_err = 0.0f;
 80040cc:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <gyro_turn_reset+0x30>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
    pid_deriv_f = 0.0f;
 80040d4:	4b07      	ldr	r3, [pc, #28]	@ (80040f4 <gyro_turn_reset+0x34>)
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
    pid_last_ms = HAL_GetTick();
 80040dc:	f002 f9d8 	bl	8006490 <HAL_GetTick>
 80040e0:	4603      	mov	r3, r0
 80040e2:	4a05      	ldr	r2, [pc, #20]	@ (80040f8 <gyro_turn_reset+0x38>)
 80040e4:	6013      	str	r3, [r2, #0]
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20001308 	.word	0x20001308
 80040f0:	2000130c 	.word	0x2000130c
 80040f4:	20001310 	.word	0x20001310
 80040f8:	200012f4 	.word	0x200012f4

080040fc <gyro_rate_pid_step>:

float gyro_rate_pid_step(float sp_dps, float meas_dps, float *p_dt) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	ed87 0a03 	vstr	s0, [r7, #12]
 8004106:	edc7 0a02 	vstr	s1, [r7, #8]
 800410a:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 800410c:	f002 f9c0 	bl	8006490 <HAL_GetTick>
 8004110:	61b8      	str	r0, [r7, #24]
    float dt = (now - pid_last_ms) / 1000.0f;
 8004112:	4b4e      	ldr	r3, [pc, #312]	@ (800424c <gyro_rate_pid_step+0x150>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004122:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8004250 <gyro_rate_pid_step+0x154>
 8004126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800412a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (dt <= 0.0f) dt = 0.002f;
 800412e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413a:	d801      	bhi.n	8004140 <gyro_rate_pid_step+0x44>
 800413c:	4b45      	ldr	r3, [pc, #276]	@ (8004254 <gyro_rate_pid_step+0x158>)
 800413e:	61fb      	str	r3, [r7, #28]
    pid_last_ms = now;
 8004140:	4a42      	ldr	r2, [pc, #264]	@ (800424c <gyro_rate_pid_step+0x150>)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	6013      	str	r3, [r2, #0]
    if (p_dt) *p_dt = dt;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <gyro_rate_pid_step+0x56>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	601a      	str	r2, [r3, #0]

    float err = sp_dps - meas_dps;
 8004152:	ed97 7a03 	vldr	s14, [r7, #12]
 8004156:	edd7 7a02 	vldr	s15, [r7, #8]
 800415a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415e:	edc7 7a05 	vstr	s15, [r7, #20]

    // integral (anti-windup)
    pid_int += err * dt;
 8004162:	ed97 7a05 	vldr	s14, [r7, #20]
 8004166:	edd7 7a07 	vldr	s15, [r7, #28]
 800416a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800416e:	4b3a      	ldr	r3, [pc, #232]	@ (8004258 <gyro_rate_pid_step+0x15c>)
 8004170:	edd3 7a00 	vldr	s15, [r3]
 8004174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004178:	4b37      	ldr	r3, [pc, #220]	@ (8004258 <gyro_rate_pid_step+0x15c>)
 800417a:	edc3 7a00 	vstr	s15, [r3]
    if (pid_int >  INTEGRAL_CLAMP) pid_int =  INTEGRAL_CLAMP;
 800417e:	4b36      	ldr	r3, [pc, #216]	@ (8004258 <gyro_rate_pid_step+0x15c>)
 8004180:	edd3 7a00 	vldr	s15, [r3]
 8004184:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	dd02      	ble.n	8004198 <gyro_rate_pid_step+0x9c>
 8004192:	4a32      	ldr	r2, [pc, #200]	@ (800425c <gyro_rate_pid_step+0x160>)
 8004194:	4b30      	ldr	r3, [pc, #192]	@ (8004258 <gyro_rate_pid_step+0x15c>)
 8004196:	601a      	str	r2, [r3, #0]
    if (pid_int < -INTEGRAL_CLAMP) pid_int = -INTEGRAL_CLAMP;
 8004198:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800419c:	eeb1 7a67 	vneg.f32	s14, s15
 80041a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004258 <gyro_rate_pid_step+0x15c>)
 80041a2:	edd3 7a00 	vldr	s15, [r3]
 80041a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ae:	dd06      	ble.n	80041be <gyro_rate_pid_step+0xc2>
 80041b0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80041b4:	eef1 7a67 	vneg.f32	s15, s15
 80041b8:	4b27      	ldr	r3, [pc, #156]	@ (8004258 <gyro_rate_pid_step+0x15c>)
 80041ba:	edc3 7a00 	vstr	s15, [r3]

    // derivative (filtered)
    float d_raw = (err - pid_prev_err) / dt;
 80041be:	4b28      	ldr	r3, [pc, #160]	@ (8004260 <gyro_rate_pid_step+0x164>)
 80041c0:	edd3 7a00 	vldr	s15, [r3]
 80041c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80041c8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80041cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80041d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d4:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_deriv_f = DERIV_ALPHA * pid_deriv_f + (1.0f - DERIV_ALPHA) * d_raw;
 80041d8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004264 <gyro_rate_pid_step+0x168>
 80041dc:	4b22      	ldr	r3, [pc, #136]	@ (8004268 <gyro_rate_pid_step+0x16c>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041e6:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8004264 <gyro_rate_pid_step+0x168>
 80041ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80041f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80041f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <gyro_rate_pid_step+0x16c>)
 8004200:	edc3 7a00 	vstr	s15, [r3]
    pid_prev_err = err;
 8004204:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <gyro_rate_pid_step+0x164>)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	6013      	str	r3, [r2, #0]

    // PID → ΔPWM (right - left)
    return Kp_g*err + Ki_g*pid_int + Kd_g*pid_deriv_f;
 800420a:	4b18      	ldr	r3, [pc, #96]	@ (800426c <gyro_rate_pid_step+0x170>)
 800420c:	ed93 7a00 	vldr	s14, [r3]
 8004210:	edd7 7a05 	vldr	s15, [r7, #20]
 8004214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004218:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <gyro_rate_pid_step+0x174>)
 800421a:	edd3 6a00 	vldr	s13, [r3]
 800421e:	4b0e      	ldr	r3, [pc, #56]	@ (8004258 <gyro_rate_pid_step+0x15c>)
 8004220:	edd3 7a00 	vldr	s15, [r3]
 8004224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004228:	ee37 7a27 	vadd.f32	s14, s14, s15
 800422c:	4b11      	ldr	r3, [pc, #68]	@ (8004274 <gyro_rate_pid_step+0x178>)
 800422e:	edd3 6a00 	vldr	s13, [r3]
 8004232:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <gyro_rate_pid_step+0x16c>)
 8004234:	edd3 7a00 	vldr	s15, [r3]
 8004238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800423c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004240:	eeb0 0a67 	vmov.f32	s0, s15
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	200012f4 	.word	0x200012f4
 8004250:	447a0000 	.word	0x447a0000
 8004254:	3b03126f 	.word	0x3b03126f
 8004258:	20001308 	.word	0x20001308
 800425c:	41200000 	.word	0x41200000
 8004260:	2000130c 	.word	0x2000130c
 8004264:	3f666666 	.word	0x3f666666
 8004268:	20001310 	.word	0x20001310
 800426c:	20000008 	.word	0x20000008
 8004270:	2000000c 	.word	0x2000000c
 8004274:	20000010 	.word	0x20000010

08004278 <turn_in_place_gyro>:
/**
 * In-place turn by angle (deg). +angle = CCW/left, -angle = CW/right.
 * base_pwm = 80..250 is typical. timeout_ms is safety.
 */
void turn_in_place_gyro(float angle_deg, int base_pwm, uint32_t timeout_ms)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	ed2d 8b02 	vpush	{d8}
 800427e:	b098      	sub	sp, #96	@ 0x60
 8004280:	af00      	add	r7, sp, #0
 8004282:	ed87 0a03 	vstr	s0, [r7, #12]
 8004286:	60b8      	str	r0, [r7, #8]
 8004288:	6079      	str	r1, [r7, #4]
    if (base_pwm < 60)  base_pwm = 60;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b3b      	cmp	r3, #59	@ 0x3b
 800428e:	dc01      	bgt.n	8004294 <turn_in_place_gyro+0x1c>
 8004290:	233c      	movs	r3, #60	@ 0x3c
 8004292:	60bb      	str	r3, [r7, #8]
    if (base_pwm > 400) base_pwm = 400;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800429a:	dd02      	ble.n	80042a2 <turn_in_place_gyro+0x2a>
 800429c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80042a0:	60bb      	str	r3, [r7, #8]

    gyro_turn_reset();
 80042a2:	f7ff ff0d 	bl	80040c0 <gyro_turn_reset>

    float yaw = 0.0f;                  // integrated heading (deg)
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float target = angle_deg;    // signed target
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t t0 = HAL_GetTick();
 80042b0:	f002 f8ee 	bl	8006490 <HAL_GetTick>
 80042b4:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t settle_start = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	65bb      	str	r3, [r7, #88]	@ 0x58

    // last timestamp for yaw integration
    uint32_t last_ms = HAL_GetTick();
 80042ba:	f002 f8e9 	bl	8006490 <HAL_GetTick>
 80042be:	6578      	str	r0, [r7, #84]	@ 0x54

    while (1) {
        // --- timing ---
        uint32_t now = HAL_GetTick();
 80042c0:	f002 f8e6 	bl	8006490 <HAL_GetTick>
 80042c4:	6378      	str	r0, [r7, #52]	@ 0x34
        float dt = (now - last_ms) / 1000.0f;
 80042c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	ee07 3a90 	vmov	s15, r3
 80042d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042d4:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8004574 <turn_in_place_gyro+0x2fc>
 80042d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042dc:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        if (dt <= 0.0f) dt = 0.001f;
 80042e0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80042e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ec:	d801      	bhi.n	80042f2 <turn_in_place_gyro+0x7a>
 80042ee:	4ba2      	ldr	r3, [pc, #648]	@ (8004578 <turn_in_place_gyro+0x300>)
 80042f0:	653b      	str	r3, [r7, #80]	@ 0x50
        last_ms = now;
 80042f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f4:	657b      	str	r3, [r7, #84]	@ 0x54
        mpu9250_read_gyro();
 80042f6:	f7fd fa6b 	bl	80017d0 <mpu9250_read_gyro>
        // --- sensors ---
        float gz = mpu9250_get_gyro_z_compensated();  // deg/s
 80042fa:	f7fd fa2f 	bl	800175c <mpu9250_get_gyro_z_compensated>
 80042fe:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

        // --- integrate heading (keep sign!) ---
        yaw += gz * dt;
 8004302:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004306:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800430a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8004312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004316:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

        // signed angle error (THIS FIXES THE MAIN BUG)
        float ang_err = target - yaw;
 800431a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800431e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8004322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004326:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        // desired rate with braking law (changes sign if you overshoot)
        float omega_brake = sqrtf(fmaxf(0.0f, 2.0f * ALPHA_MAX_DPS2 * fabsf(ang_err)));
 800432a:	4b94      	ldr	r3, [pc, #592]	@ (800457c <turn_in_place_gyro+0x304>)
 800432c:	edd3 7a00 	vldr	s15, [r3]
 8004330:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004334:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004338:	eef0 7ae7 	vabs.f32	s15, s15
 800433c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004340:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8004580 <turn_in_place_gyro+0x308>
 8004344:	eeb0 0a67 	vmov.f32	s0, s15
 8004348:	f009 fa70 	bl	800d82c <fmaxf>
 800434c:	eef0 7a40 	vmov.f32	s15, s0
 8004350:	eeb0 0a67 	vmov.f32	s0, s15
 8004354:	f009 fa4c 	bl	800d7f0 <sqrtf>
 8004358:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        float omega_des = clampf_local(omega_brake, 0.0f, OMEGA_MAX_DPS) * signf(ang_err);
 800435c:	4b89      	ldr	r3, [pc, #548]	@ (8004584 <turn_in_place_gyro+0x30c>)
 800435e:	edd3 7a00 	vldr	s15, [r3]
 8004362:	eeb0 1a67 	vmov.f32	s2, s15
 8004366:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8004580 <turn_in_place_gyro+0x308>
 800436a:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800436e:	f7ff fd49 	bl	8003e04 <clampf_local>
 8004372:	eeb0 8a40 	vmov.f32	s16, s0
 8004376:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800437a:	f7ff fe85 	bl	8004088 <signf>
 800437e:	eef0 7a40 	vmov.f32	s15, s0
 8004382:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004386:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

        // small deadband on command (avoid micro twitch)
        if (fabsf(omega_des) < OMEGA_CMD_DEADBAND) omega_des = 0.0f;
 800438a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800438e:	eeb0 7ae7 	vabs.f32	s14, s15
 8004392:	4b7d      	ldr	r3, [pc, #500]	@ (8004588 <turn_in_place_gyro+0x310>)
 8004394:	edd3 7a00 	vldr	s15, [r3]
 8004398:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a0:	d502      	bpl.n	80043a8 <turn_in_place_gyro+0x130>
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	64fb      	str	r3, [r7, #76]	@ 0x4c

        // --- inner rate loop ---
        float pid_dt = 0.0f;
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
        float dPWM_pid = gyro_rate_pid_step(omega_des, gz, &pid_dt);  // ΔPWM from PID
 80043ae:	f107 0310 	add.w	r3, r7, #16
 80043b2:	4618      	mov	r0, r3
 80043b4:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 80043b8:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80043bc:	f7ff fe9e 	bl	80040fc <gyro_rate_pid_step>
 80043c0:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        float dPWM_ff  = (fabsf(omega_des) > 0.0f) ? (omega_des / GYRO_K_DPS_PER_DPWM) : 0.0f;
 80043c4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80043c8:	eef0 7ae7 	vabs.f32	s15, s15
 80043cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d4:	dd06      	ble.n	80043e4 <turn_in_place_gyro+0x16c>
 80043d6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80043da:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 800458c <turn_in_place_gyro+0x314>
 80043de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043e2:	e001      	b.n	80043e8 <turn_in_place_gyro+0x170>
 80043e4:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8004580 <turn_in_place_gyro+0x308>
 80043e8:	edc7 7a08 	vstr	s15, [r7, #32]
        float dPWM     = dPWM_ff + dPWM_pid;   // total ΔPWM (right - left), signed
 80043ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80043f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80043f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f8:	edc7 7a07 	vstr	s15, [r7, #28]

        // split ΔPWM around base so both sides get torque
        float right_mag = (float)base_pwm + 0.5f * fabsf(dPWM);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004406:	edd7 7a07 	vldr	s15, [r7, #28]
 800440a:	eef0 7ae7 	vabs.f32	s15, s15
 800440e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004412:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800441a:	edc7 7a06 	vstr	s15, [r7, #24]
        float left_mag  = (float)base_pwm + 0.5f * fabsf(dPWM);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004428:	edd7 7a07 	vldr	s15, [r7, #28]
 800442c:	eef0 7ae7 	vabs.f32	s15, s15
 8004430:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004434:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800443c:	edc7 7a05 	vstr	s15, [r7, #20]

        // decide directions from CURRENT command sign (not the initial turn dir)
        bool left_forward, right_forward;
        if (dPWM >= 0.0f) {
 8004440:	edd7 7a07 	vldr	s15, [r7, #28]
 8004444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	db06      	blt.n	800445c <turn_in_place_gyro+0x1e4>
            // turn left: left backward, right forward
            left_forward  = false;
 800444e:	2300      	movs	r3, #0
 8004450:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            right_forward = true;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800445a:	e005      	b.n	8004468 <turn_in_place_gyro+0x1f0>
        } else {
            // turn right: left forward, right backward
            left_forward  = true;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            right_forward = false;
 8004462:	2300      	movs	r3, #0
 8004464:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        }

        // if command very small AND rate small, cut power to stop cleanly
        if (fabsf(ang_err) <= ANGLE_TOL_DEG && fabsf(gz) <= RATE_TOL_DPS) {
 8004468:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800446c:	eeb0 7ae7 	vabs.f32	s14, s15
 8004470:	4b47      	ldr	r3, [pc, #284]	@ (8004590 <turn_in_place_gyro+0x318>)
 8004472:	edd3 7a00 	vldr	s15, [r3]
 8004476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447e:	d822      	bhi.n	80044c6 <turn_in_place_gyro+0x24e>
 8004480:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004484:	eeb0 7ae7 	vabs.f32	s14, s15
 8004488:	4b42      	ldr	r3, [pc, #264]	@ (8004594 <turn_in_place_gyro+0x31c>)
 800448a:	edd3 7a00 	vldr	s15, [r3]
 800448e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	d816      	bhi.n	80044c6 <turn_in_place_gyro+0x24e>
            motor_set(0, true, 0);
 8004498:	2200      	movs	r2, #0
 800449a:	2101      	movs	r1, #1
 800449c:	2000      	movs	r0, #0
 800449e:	f7ff fc4b 	bl	8003d38 <motor_set>
            motor_set(1, true, 0);
 80044a2:	2200      	movs	r2, #0
 80044a4:	2101      	movs	r1, #1
 80044a6:	2001      	movs	r0, #1
 80044a8:	f7ff fc46 	bl	8003d38 <motor_set>
            if (settle_start == 0) settle_start = now;
 80044ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <turn_in_place_gyro+0x23e>
 80044b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b4:	65bb      	str	r3, [r7, #88]	@ 0x58
            if ((now - settle_start) >= SETTLE_MS) break;
 80044b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044ba:	1ad2      	subs	r2, r2, r3
 80044bc:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <turn_in_place_gyro+0x320>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d340      	bcc.n	8004546 <turn_in_place_gyro+0x2ce>
 80044c4:	e04a      	b.n	800455c <turn_in_place_gyro+0x2e4>
        } else {
            settle_start = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	65bb      	str	r3, [r7, #88]	@ 0x58

            // Apply PWM (no fake “min move” offsets here—let control truly go to 0 near stop)
            int pwmL = (int)roundf(left_mag);
 80044ca:	ed97 0a05 	vldr	s0, [r7, #20]
 80044ce:	f009 fa17 	bl	800d900 <roundf>
 80044d2:	eef0 7a40 	vmov.f32	s15, s0
 80044d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044da:	ee17 3a90 	vmov	r3, s15
 80044de:	647b      	str	r3, [r7, #68]	@ 0x44
            int pwmR = (int)roundf(right_mag);
 80044e0:	ed97 0a06 	vldr	s0, [r7, #24]
 80044e4:	f009 fa0c 	bl	800d900 <roundf>
 80044e8:	eef0 7a40 	vmov.f32	s15, s0
 80044ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f0:	ee17 3a90 	vmov	r3, s15
 80044f4:	643b      	str	r3, [r7, #64]	@ 0x40
            if (pwmL < 0) pwmL = 0;
 80044f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	da01      	bge.n	8004500 <turn_in_place_gyro+0x288>
 80044fc:	2300      	movs	r3, #0
 80044fe:	647b      	str	r3, [r7, #68]	@ 0x44
            if (pwmL > 1000) pwmL = 1000;
 8004500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004506:	dd02      	ble.n	800450e <turn_in_place_gyro+0x296>
 8004508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800450c:	647b      	str	r3, [r7, #68]	@ 0x44
            if (pwmR < 0) pwmR = 0;
 800450e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	da01      	bge.n	8004518 <turn_in_place_gyro+0x2a0>
 8004514:	2300      	movs	r3, #0
 8004516:	643b      	str	r3, [r7, #64]	@ 0x40
            if (pwmR > 1000) pwmR = 1000;
 8004518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800451a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800451e:	dd02      	ble.n	8004526 <turn_in_place_gyro+0x2ae>
 8004520:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004524:	643b      	str	r3, [r7, #64]	@ 0x40

            motor_set(0, left_forward,  (uint16_t)pwmL);
 8004526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004528:	b29a      	uxth	r2, r3
 800452a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800452e:	4619      	mov	r1, r3
 8004530:	2000      	movs	r0, #0
 8004532:	f7ff fc01 	bl	8003d38 <motor_set>
            motor_set(1, right_forward, (uint16_t)pwmR);
 8004536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004538:	b29a      	uxth	r2, r3
 800453a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800453e:	4619      	mov	r1, r3
 8004540:	2001      	movs	r0, #1
 8004542:	f7ff fbf9 	bl	8003d38 <motor_set>
        }

        if ((now - t0) > timeout_ms) break;
 8004546:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	429a      	cmp	r2, r3
 8004550:	d303      	bcc.n	800455a <turn_in_place_gyro+0x2e2>

        HAL_Delay(2); // ~500 Hz outer loop
 8004552:	2002      	movs	r0, #2
 8004554:	f001 ffa8 	bl	80064a8 <HAL_Delay>
    while (1) {
 8004558:	e6b2      	b.n	80042c0 <turn_in_place_gyro+0x48>
        if ((now - t0) > timeout_ms) break;
 800455a:	bf00      	nop
    }

    break_motors();
 800455c:	f7ff fb54 	bl	8003c08 <break_motors>
    HAL_Delay(60);
 8004560:	203c      	movs	r0, #60	@ 0x3c
 8004562:	f001 ffa1 	bl	80064a8 <HAL_Delay>
}
 8004566:	bf00      	nop
 8004568:	3760      	adds	r7, #96	@ 0x60
 800456a:	46bd      	mov	sp, r7
 800456c:	ecbd 8b02 	vpop	{d8}
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	447a0000 	.word	0x447a0000
 8004578:	3a83126f 	.word	0x3a83126f
 800457c:	20000018 	.word	0x20000018
 8004580:	00000000 	.word	0x00000000
 8004584:	20000014 	.word	0x20000014
 8004588:	20000028 	.word	0x20000028
 800458c:	3fb0ff97 	.word	0x3fb0ff97
 8004590:	2000001c 	.word	0x2000001c
 8004594:	20000020 	.word	0x20000020
 8004598:	20000024 	.word	0x20000024

0800459c <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 80045a0:	2200      	movs	r2, #0
 80045a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045a6:	480b      	ldr	r0, [pc, #44]	@ (80045d4 <turn_off_emitters+0x38>)
 80045a8:	f002 febc 	bl	8007324 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 80045ac:	2200      	movs	r2, #0
 80045ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045b2:	4809      	ldr	r0, [pc, #36]	@ (80045d8 <turn_off_emitters+0x3c>)
 80045b4:	f002 feb6 	bl	8007324 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 80045b8:	2200      	movs	r2, #0
 80045ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045be:	4805      	ldr	r0, [pc, #20]	@ (80045d4 <turn_off_emitters+0x38>)
 80045c0:	f002 feb0 	bl	8007324 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 80045c4:	2200      	movs	r2, #0
 80045c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045ca:	4803      	ldr	r0, [pc, #12]	@ (80045d8 <turn_off_emitters+0x3c>)
 80045cc:	f002 feaa 	bl	8007324 <HAL_GPIO_WritePin>
}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40020400 	.word	0x40020400
 80045d8:	40020000 	.word	0x40020000

080045dc <read_adc_channel>:

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef cfg = {0};
 80045e4:	f107 030c 	add.w	r3, r7, #12
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	60da      	str	r2, [r3, #12]
    cfg.Channel = channel;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
    cfg.Rank = 1;
 80045f6:	2301      	movs	r3, #1
 80045f8:	613b      	str	r3, [r7, #16]
    cfg.SamplingTime = ADC_SAMPLETIME_480CYCLES; // more stable than 84
 80045fa:	2307      	movs	r3, #7
 80045fc:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &cfg) != HAL_OK) return 0;
 80045fe:	f107 030c 	add.w	r3, r7, #12
 8004602:	4619      	mov	r1, r3
 8004604:	4815      	ldr	r0, [pc, #84]	@ (800465c <read_adc_channel+0x80>)
 8004606:	f002 f937 	bl	8006878 <HAL_ADC_ConfigChannel>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <read_adc_channel+0x38>
 8004610:	2300      	movs	r3, #0
 8004612:	e01f      	b.n	8004654 <read_adc_channel+0x78>

    dwt_delay_us(5);                     // tiny mux settle
 8004614:	2005      	movs	r0, #5
 8004616:	f7fe f89d 	bl	8002754 <dwt_delay_us>

    // dummy conversion (discard)
    HAL_ADC_Start(&hadc1);
 800461a:	4810      	ldr	r0, [pc, #64]	@ (800465c <read_adc_channel+0x80>)
 800461c:	f001 ffac 	bl	8006578 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8004620:	210a      	movs	r1, #10
 8004622:	480e      	ldr	r0, [pc, #56]	@ (800465c <read_adc_channel+0x80>)
 8004624:	f002 f88f 	bl	8006746 <HAL_ADC_PollForConversion>
    (void)HAL_ADC_GetValue(&hadc1);
 8004628:	480c      	ldr	r0, [pc, #48]	@ (800465c <read_adc_channel+0x80>)
 800462a:	f002 f917 	bl	800685c <HAL_ADC_GetValue>
    HAL_ADC_Stop(&hadc1);
 800462e:	480b      	ldr	r0, [pc, #44]	@ (800465c <read_adc_channel+0x80>)
 8004630:	f002 f856 	bl	80066e0 <HAL_ADC_Stop>

    // real conversion
    HAL_ADC_Start(&hadc1);
 8004634:	4809      	ldr	r0, [pc, #36]	@ (800465c <read_adc_channel+0x80>)
 8004636:	f001 ff9f 	bl	8006578 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 800463a:	210a      	movs	r1, #10
 800463c:	4807      	ldr	r0, [pc, #28]	@ (800465c <read_adc_channel+0x80>)
 800463e:	f002 f882 	bl	8006746 <HAL_ADC_PollForConversion>
    uint16_t v = HAL_ADC_GetValue(&hadc1);
 8004642:	4806      	ldr	r0, [pc, #24]	@ (800465c <read_adc_channel+0x80>)
 8004644:	f002 f90a 	bl	800685c <HAL_ADC_GetValue>
 8004648:	4603      	mov	r3, r0
 800464a:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 800464c:	4803      	ldr	r0, [pc, #12]	@ (800465c <read_adc_channel+0x80>)
 800464e:	f002 f847 	bl	80066e0 <HAL_ADC_Stop>
    return v;
 8004652:	8bfb      	ldrh	r3, [r7, #30]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000260 	.word	0x20000260

08004660 <update_sensors>:
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
}



void update_sensors(void){
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
	turn_off_emitters();
 8004666:	f7ff ff99 	bl	800459c <turn_off_emitters>
	//dwt_delay_us(500);
	uint16_t off_FL = read_adc_channel(ADC_CHANNEL_5);
 800466a:	2005      	movs	r0, #5
 800466c:	f7ff ffb6 	bl	80045dc <read_adc_channel>
 8004670:	4603      	mov	r3, r0
 8004672:	83bb      	strh	r3, [r7, #28]
	uint16_t off_FR = read_adc_channel(ADC_CHANNEL_2);
 8004674:	2002      	movs	r0, #2
 8004676:	f7ff ffb1 	bl	80045dc <read_adc_channel>
 800467a:	4603      	mov	r3, r0
 800467c:	83fb      	strh	r3, [r7, #30]
	uint16_t off_L = read_adc_channel(ADC_CHANNEL_4);
 800467e:	2004      	movs	r0, #4
 8004680:	f7ff ffac 	bl	80045dc <read_adc_channel>
 8004684:	4603      	mov	r3, r0
 8004686:	817b      	strh	r3, [r7, #10]
	uint16_t off_R = read_adc_channel(ADC_CHANNEL_3);
 8004688:	2003      	movs	r0, #3
 800468a:	f7ff ffa7 	bl	80045dc <read_adc_channel>
 800468e:	4603      	mov	r3, r0
 8004690:	813b      	strh	r3, [r7, #8]

	EMIT_ON(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin);
 8004692:	2201      	movs	r2, #1
 8004694:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004698:	4861      	ldr	r0, [pc, #388]	@ (8004820 <update_sensors+0x1c0>)
 800469a:	f002 fe43 	bl	8007324 <HAL_GPIO_WritePin>
	EMIT_ON(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin);
 800469e:	2201      	movs	r2, #1
 80046a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80046a4:	485f      	ldr	r0, [pc, #380]	@ (8004824 <update_sensors+0x1c4>)
 80046a6:	f002 fe3d 	bl	8007324 <HAL_GPIO_WritePin>
	dwt_delay_us(50);
 80046aa:	2032      	movs	r0, #50	@ 0x32
 80046ac:	f7fe f852 	bl	8002754 <dwt_delay_us>
	//HAL_Delay(1);

	uint16_t on_FL = read_adc_channel(ADC_CHANNEL_5);
 80046b0:	2005      	movs	r0, #5
 80046b2:	f7ff ff93 	bl	80045dc <read_adc_channel>
 80046b6:	4603      	mov	r3, r0
 80046b8:	80fb      	strh	r3, [r7, #6]
	uint16_t on_FR = read_adc_channel(ADC_CHANNEL_2);
 80046ba:	2002      	movs	r0, #2
 80046bc:	f7ff ff8e 	bl	80045dc <read_adc_channel>
 80046c0:	4603      	mov	r3, r0
 80046c2:	80bb      	strh	r3, [r7, #4]

	turn_off_emitters();
 80046c4:	f7ff ff6a 	bl	800459c <turn_off_emitters>
	EMIT_ON(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin);
 80046c8:	2201      	movs	r2, #1
 80046ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046ce:	4855      	ldr	r0, [pc, #340]	@ (8004824 <update_sensors+0x1c4>)
 80046d0:	f002 fe28 	bl	8007324 <HAL_GPIO_WritePin>
	EMIT_ON(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin);
 80046d4:	2201      	movs	r2, #1
 80046d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80046da:	4851      	ldr	r0, [pc, #324]	@ (8004820 <update_sensors+0x1c0>)
 80046dc:	f002 fe22 	bl	8007324 <HAL_GPIO_WritePin>
	dwt_delay_us(80);
 80046e0:	2050      	movs	r0, #80	@ 0x50
 80046e2:	f7fe f837 	bl	8002754 <dwt_delay_us>
	//HAL_Delay(1);

	uint16_t on_L = read_adc_channel(ADC_CHANNEL_4);
 80046e6:	2004      	movs	r0, #4
 80046e8:	f7ff ff78 	bl	80045dc <read_adc_channel>
 80046ec:	4603      	mov	r3, r0
 80046ee:	807b      	strh	r3, [r7, #2]
	uint16_t on_R = read_adc_channel(ADC_CHANNEL_3);
 80046f0:	2003      	movs	r0, #3
 80046f2:	f7ff ff73 	bl	80045dc <read_adc_channel>
 80046f6:	4603      	mov	r3, r0
 80046f8:	803b      	strh	r3, [r7, #0]

	turn_off_emitters();
 80046fa:	f7ff ff4f 	bl	800459c <turn_off_emitters>
	uint32_t diff_FL;
	uint32_t diff_FR;
	uint32_t diff_L;
	uint32_t diff_R;

	if (on_FL>off_FL){
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	8bbb      	ldrh	r3, [r7, #28]
 8004702:	429a      	cmp	r2, r3
 8004704:	d904      	bls.n	8004710 <update_sensors+0xb0>
		diff_FL = (uint32_t)on_FL-(uint32_t)off_FL;
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	8bbb      	ldrh	r3, [r7, #28]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e001      	b.n	8004714 <update_sensors+0xb4>
	}else{
		diff_FL =0;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
	}
	if (on_FR>off_FR){
 8004714:	88ba      	ldrh	r2, [r7, #4]
 8004716:	8bfb      	ldrh	r3, [r7, #30]
 8004718:	429a      	cmp	r2, r3
 800471a:	d904      	bls.n	8004726 <update_sensors+0xc6>
		diff_FR = (uint32_t)on_FR-(uint32_t)off_FR;
 800471c:	88ba      	ldrh	r2, [r7, #4]
 800471e:	8bfb      	ldrh	r3, [r7, #30]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e001      	b.n	800472a <update_sensors+0xca>
	}else{
		diff_FR =0;
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]
	}
	if (on_L>off_L){
 800472a:	887a      	ldrh	r2, [r7, #2]
 800472c:	897b      	ldrh	r3, [r7, #10]
 800472e:	429a      	cmp	r2, r3
 8004730:	d904      	bls.n	800473c <update_sensors+0xdc>
		diff_L = (uint32_t)on_L-(uint32_t)off_L;
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	897b      	ldrh	r3, [r7, #10]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	e001      	b.n	8004740 <update_sensors+0xe0>
	}else{
		diff_L=0;
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
	}
	if (on_R>off_R){
 8004740:	883a      	ldrh	r2, [r7, #0]
 8004742:	893b      	ldrh	r3, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	d904      	bls.n	8004752 <update_sensors+0xf2>
		diff_R = (uint32_t)on_R-(uint32_t)off_R;
 8004748:	883a      	ldrh	r2, [r7, #0]
 800474a:	893b      	ldrh	r3, [r7, #8]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e001      	b.n	8004756 <update_sensors+0xf6>
	}else{
		diff_R = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
	}

	diff_FL=(diff_FL*NOMINAL)/1000;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800475c:	fb02 f303 	mul.w	r3, r2, r3
 8004760:	4a31      	ldr	r2, [pc, #196]	@ (8004828 <update_sensors+0x1c8>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	099b      	lsrs	r3, r3, #6
 8004768:	61bb      	str	r3, [r7, #24]
	diff_FR=(diff_FR*NOMINAL)/1000;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004770:	fb02 f303 	mul.w	r3, r2, r3
 8004774:	4a2c      	ldr	r2, [pc, #176]	@ (8004828 <update_sensors+0x1c8>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	617b      	str	r3, [r7, #20]
	diff_L=(diff_L*NOMINAL)/1000;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004784:	fb02 f303 	mul.w	r3, r2, r3
 8004788:	4a27      	ldr	r2, [pc, #156]	@ (8004828 <update_sensors+0x1c8>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	099b      	lsrs	r3, r3, #6
 8004790:	613b      	str	r3, [r7, #16]
	diff_R=(diff_R*NOMINAL)/1000;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	4a22      	ldr	r2, [pc, #136]	@ (8004828 <update_sensors+0x1c8>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	60fb      	str	r3, [r7, #12]


    sensors.front_left  = diff_FL;
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	4b20      	ldr	r3, [pc, #128]	@ (800482c <update_sensors+0x1cc>)
 80047ac:	811a      	strh	r2, [r3, #8]
    sensors.front_right = diff_FR;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	4b1e      	ldr	r3, [pc, #120]	@ (800482c <update_sensors+0x1cc>)
 80047b4:	805a      	strh	r2, [r3, #2]
    sensors.side_left   = diff_L;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	4b1c      	ldr	r3, [pc, #112]	@ (800482c <update_sensors+0x1cc>)
 80047bc:	80da      	strh	r2, [r3, #6]
    sensors.side_right  = diff_R; //tot_diff_R/5;  //
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	4b1a      	ldr	r3, [pc, #104]	@ (800482c <update_sensors+0x1cc>)
 80047c4:	809a      	strh	r2, [r3, #4]
    sensors.battery = read_adc_channel(ADC_CHANNEL_0);
 80047c6:	2000      	movs	r0, #0
 80047c8:	f7ff ff08 	bl	80045dc <read_adc_channel>
 80047cc:	4603      	mov	r3, r0
 80047ce:	461a      	mov	r2, r3
 80047d0:	4b16      	ldr	r3, [pc, #88]	@ (800482c <update_sensors+0x1cc>)
 80047d2:	801a      	strh	r2, [r3, #0]
                            (sensors.front_right > get_calibrated_threshold(1));
        sensors.wall_left = (sensors.side_left > get_calibrated_threshold(2));
        sensors.wall_right = (sensors.side_right > get_calibrated_threshold(3));
    } else {
        // Fallback to static thresholds
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT_L) ||
 80047d4:	4b15      	ldr	r3, [pc, #84]	@ (800482c <update_sensors+0x1cc>)
 80047d6:	891b      	ldrh	r3, [r3, #8]
 80047d8:	2b06      	cmp	r3, #6
 80047da:	d803      	bhi.n	80047e4 <update_sensors+0x184>
                            (sensors.front_right > WALL_THRESHOLD_FRONT_R);
 80047dc:	4b13      	ldr	r3, [pc, #76]	@ (800482c <update_sensors+0x1cc>)
 80047de:	885b      	ldrh	r3, [r3, #2]
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT_L) ||
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d901      	bls.n	80047e8 <update_sensors+0x188>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <update_sensors+0x18a>
 80047e8:	2300      	movs	r3, #0
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	4b0e      	ldr	r3, [pc, #56]	@ (800482c <update_sensors+0x1cc>)
 80047f2:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > WALL_THRESHOLD_SIDE_L);
 80047f4:	4b0d      	ldr	r3, [pc, #52]	@ (800482c <update_sensors+0x1cc>)
 80047f6:	88db      	ldrh	r3, [r3, #6]
 80047f8:	2b0b      	cmp	r3, #11
 80047fa:	bf8c      	ite	hi
 80047fc:	2301      	movhi	r3, #1
 80047fe:	2300      	movls	r3, #0
 8004800:	b2da      	uxtb	r2, r3
 8004802:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <update_sensors+0x1cc>)
 8004804:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > WALL_THRESHOLD_SIDE_R);
 8004806:	4b09      	ldr	r3, [pc, #36]	@ (800482c <update_sensors+0x1cc>)
 8004808:	889b      	ldrh	r3, [r3, #4]
 800480a:	2b0e      	cmp	r3, #14
 800480c:	bf8c      	ite	hi
 800480e:	2301      	movhi	r3, #1
 8004810:	2300      	movls	r3, #0
 8004812:	b2da      	uxtb	r2, r3
 8004814:	4b05      	ldr	r3, [pc, #20]	@ (800482c <update_sensors+0x1cc>)
 8004816:	731a      	strb	r2, [r3, #12]

//	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
//		                          sensors.front_left, sensors.front_right,sensors.wall_front,
//		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);

}
 8004818:	bf00      	nop
 800481a:	3720      	adds	r7, #32
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40020400 	.word	0x40020400
 8004824:	40020000 	.word	0x40020000
 8004828:	10624dd3 	.word	0x10624dd3
 800482c:	20000d7c 	.word	0x20000d7c

08004830 <adc_system_diagnostics>:

    send_bluetooth_message("===============================\r\n");
}


void adc_system_diagnostics(void) {
 8004830:	b5b0      	push	{r4, r5, r7, lr}
 8004832:	b08e      	sub	sp, #56	@ 0x38
 8004834:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 8004836:	484b      	ldr	r0, [pc, #300]	@ (8004964 <adc_system_diagnostics+0x134>)
 8004838:	f7fc fc42 	bl	80010c0 <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 800483c:	4b4a      	ldr	r3, [pc, #296]	@ (8004968 <adc_system_diagnostics+0x138>)
 800483e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 8004848:	4848      	ldr	r0, [pc, #288]	@ (800496c <adc_system_diagnostics+0x13c>)
 800484a:	f7fc fc39 	bl	80010c0 <send_bluetooth_message>
 800484e:	e002      	b.n	8004856 <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 8004850:	4847      	ldr	r0, [pc, #284]	@ (8004970 <adc_system_diagnostics+0x140>)
 8004852:	f7fc fc35 	bl	80010c0 <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 8004856:	4b44      	ldr	r3, [pc, #272]	@ (8004968 <adc_system_diagnostics+0x138>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 8004862:	4844      	ldr	r0, [pc, #272]	@ (8004974 <adc_system_diagnostics+0x144>)
 8004864:	f7fc fc2c 	bl	80010c0 <send_bluetooth_message>
 8004868:	e002      	b.n	8004870 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 800486a:	4843      	ldr	r0, [pc, #268]	@ (8004978 <adc_system_diagnostics+0x148>)
 800486c:	f7fc fc28 	bl	80010c0 <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 8004870:	4b42      	ldr	r3, [pc, #264]	@ (800497c <adc_system_diagnostics+0x14c>)
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	2b01      	cmp	r3, #1
 8004876:	d103      	bne.n	8004880 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 8004878:	4841      	ldr	r0, [pc, #260]	@ (8004980 <adc_system_diagnostics+0x150>)
 800487a:	f7fc fc21 	bl	80010c0 <send_bluetooth_message>
 800487e:	e005      	b.n	800488c <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 8004880:	4b3e      	ldr	r3, [pc, #248]	@ (800497c <adc_system_diagnostics+0x14c>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	4619      	mov	r1, r3
 8004886:	483f      	ldr	r0, [pc, #252]	@ (8004984 <adc_system_diagnostics+0x154>)
 8004888:	f7fc fc30 	bl	80010ec <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 800488c:	483e      	ldr	r0, [pc, #248]	@ (8004988 <adc_system_diagnostics+0x158>)
 800488e:	f7fc fc17 	bl	80010c0 <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 8004892:	4b3e      	ldr	r3, [pc, #248]	@ (800498c <adc_system_diagnostics+0x15c>)
 8004894:	f107 0420 	add.w	r4, r7, #32
 8004898:	461d      	mov	r5, r3
 800489a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800489c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800489e:	682b      	ldr	r3, [r5, #0]
 80048a0:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 80048a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004990 <adc_system_diagnostics+0x160>)
 80048a4:	f107 040c 	add.w	r4, r7, #12
 80048a8:	461d      	mov	r5, r3
 80048aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048ae:	682b      	ldr	r3, [r5, #0]
 80048b0:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 80048b2:	2300      	movs	r3, #0
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b6:	e04b      	b.n	8004950 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 80048b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	3338      	adds	r3, #56	@ 0x38
 80048be:	443b      	add	r3, r7
 80048c0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fe89 	bl	80045dc <read_adc_channel>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	3338      	adds	r3, #56	@ 0x38
 80048d4:	443b      	add	r3, r7
 80048d6:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80048da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	3338      	adds	r3, #56	@ 0x38
 80048e0:	443b      	add	r3, r7
 80048e2:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 80048e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	3338      	adds	r3, #56	@ 0x38
 80048ec:	443b      	add	r3, r7
 80048ee:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01f      	beq.n	8004936 <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80048f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	3338      	adds	r3, #56	@ 0x38
 80048fc:	443b      	add	r3, r7
 80048fe:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d015      	beq.n	8004932 <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 8004906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	3338      	adds	r3, #56	@ 0x38
 800490c:	443b      	add	r3, r7
 800490e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004912:	2b03      	cmp	r3, #3
 8004914:	d00b      	beq.n	800492e <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 8004916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	3338      	adds	r3, #56	@ 0x38
 800491c:	443b      	add	r3, r7
 800491e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004922:	2b04      	cmp	r3, #4
 8004924:	d101      	bne.n	800492a <adc_system_diagnostics+0xfa>
 8004926:	2204      	movs	r2, #4
 8004928:	e006      	b.n	8004938 <adc_system_diagnostics+0x108>
 800492a:	2205      	movs	r2, #5
 800492c:	e004      	b.n	8004938 <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 800492e:	2203      	movs	r2, #3
 8004930:	e002      	b.n	8004938 <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 8004932:	2202      	movs	r2, #2
 8004934:	e000      	b.n	8004938 <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004936:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 8004938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	3338      	adds	r3, #56	@ 0x38
 800493e:	443b      	add	r3, r7
 8004940:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004944:	4813      	ldr	r0, [pc, #76]	@ (8004994 <adc_system_diagnostics+0x164>)
 8004946:	f7fc fbd1 	bl	80010ec <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 800494a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494c:	3301      	adds	r3, #1
 800494e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004952:	2b04      	cmp	r3, #4
 8004954:	ddb0      	ble.n	80048b8 <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 8004956:	4810      	ldr	r0, [pc, #64]	@ (8004998 <adc_system_diagnostics+0x168>)
 8004958:	f7fc fbb2 	bl	80010c0 <send_bluetooth_message>
}
 800495c:	bf00      	nop
 800495e:	3738      	adds	r7, #56	@ 0x38
 8004960:	46bd      	mov	sp, r7
 8004962:	bdb0      	pop	{r4, r5, r7, pc}
 8004964:	0800f29c 	.word	0x0800f29c
 8004968:	40023800 	.word	0x40023800
 800496c:	0800f2c0 	.word	0x0800f2c0
 8004970:	0800f2dc 	.word	0x0800f2dc
 8004974:	0800f2f8 	.word	0x0800f2f8
 8004978:	0800f314 	.word	0x0800f314
 800497c:	20000260 	.word	0x20000260
 8004980:	0800f330 	.word	0x0800f330
 8004984:	0800f348 	.word	0x0800f348
 8004988:	0800f360 	.word	0x0800f360
 800498c:	0800f390 	.word	0x0800f390
 8004990:	0800f3dc 	.word	0x0800f3dc
 8004994:	0800f380 	.word	0x0800f380
 8004998:	0800f278 	.word	0x0800f278

0800499c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <HAL_MspInit+0x4c>)
 80049a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049aa:	4a0f      	ldr	r2, [pc, #60]	@ (80049e8 <HAL_MspInit+0x4c>)
 80049ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80049b2:	4b0d      	ldr	r3, [pc, #52]	@ (80049e8 <HAL_MspInit+0x4c>)
 80049b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4b09      	ldr	r3, [pc, #36]	@ (80049e8 <HAL_MspInit+0x4c>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	4a08      	ldr	r2, [pc, #32]	@ (80049e8 <HAL_MspInit+0x4c>)
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_MspInit+0x4c>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800

080049ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	@ 0x28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f4:	f107 0314 	add.w	r3, r7, #20
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a17      	ldr	r2, [pc, #92]	@ (8004a68 <HAL_ADC_MspInit+0x7c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d127      	bne.n	8004a5e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	4b16      	ldr	r3, [pc, #88]	@ (8004a6c <HAL_ADC_MspInit+0x80>)
 8004a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a16:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <HAL_ADC_MspInit+0x80>)
 8004a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a1e:	4b13      	ldr	r3, [pc, #76]	@ (8004a6c <HAL_ADC_MspInit+0x80>)
 8004a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a6c <HAL_ADC_MspInit+0x80>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a32:	4a0e      	ldr	r2, [pc, #56]	@ (8004a6c <HAL_ADC_MspInit+0x80>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <HAL_ADC_MspInit+0x80>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 8004a46:	233d      	movs	r3, #61	@ 0x3d
 8004a48:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a52:	f107 0314 	add.w	r3, r7, #20
 8004a56:	4619      	mov	r1, r3
 8004a58:	4805      	ldr	r0, [pc, #20]	@ (8004a70 <HAL_ADC_MspInit+0x84>)
 8004a5a:	f002 fadf 	bl	800701c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004a5e:	bf00      	nop
 8004a60:	3728      	adds	r7, #40	@ 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40012000 	.word	0x40012000
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40020000 	.word	0x40020000

08004a74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08a      	sub	sp, #40	@ 0x28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a7c:	f107 0314 	add.w	r3, r7, #20
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	60da      	str	r2, [r3, #12]
 8004a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a19      	ldr	r2, [pc, #100]	@ (8004af8 <HAL_SPI_MspInit+0x84>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d12c      	bne.n	8004af0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	4b18      	ldr	r3, [pc, #96]	@ (8004afc <HAL_SPI_MspInit+0x88>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	4a17      	ldr	r2, [pc, #92]	@ (8004afc <HAL_SPI_MspInit+0x88>)
 8004aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aa6:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <HAL_SPI_MspInit+0x88>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	4b11      	ldr	r3, [pc, #68]	@ (8004afc <HAL_SPI_MspInit+0x88>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	4a10      	ldr	r2, [pc, #64]	@ (8004afc <HAL_SPI_MspInit+0x88>)
 8004abc:	f043 0302 	orr.w	r3, r3, #2
 8004ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8004afc <HAL_SPI_MspInit+0x88>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 8004ace:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004adc:	2303      	movs	r3, #3
 8004ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ae0:	2305      	movs	r3, #5
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4805      	ldr	r0, [pc, #20]	@ (8004b00 <HAL_SPI_MspInit+0x8c>)
 8004aec:	f002 fa96 	bl	800701c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004af0:	bf00      	nop
 8004af2:	3728      	adds	r7, #40	@ 0x28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40003800 	.word	0x40003800
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40020400 	.word	0x40020400

08004b04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a18      	ldr	r2, [pc, #96]	@ (8004b74 <HAL_TIM_Base_MspInit+0x70>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d116      	bne.n	8004b44 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	4b17      	ldr	r3, [pc, #92]	@ (8004b78 <HAL_TIM_Base_MspInit+0x74>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	4a16      	ldr	r2, [pc, #88]	@ (8004b78 <HAL_TIM_Base_MspInit+0x74>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b26:	4b14      	ldr	r3, [pc, #80]	@ (8004b78 <HAL_TIM_Base_MspInit+0x74>)
 8004b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8004b32:	2200      	movs	r2, #0
 8004b34:	2107      	movs	r1, #7
 8004b36:	2019      	movs	r0, #25
 8004b38:	f002 f9a7 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004b3c:	2019      	movs	r0, #25
 8004b3e:	f002 f9c0 	bl	8006ec2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004b42:	e012      	b.n	8004b6a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a0c      	ldr	r2, [pc, #48]	@ (8004b7c <HAL_TIM_Base_MspInit+0x78>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d10d      	bne.n	8004b6a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <HAL_TIM_Base_MspInit+0x74>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	4a08      	ldr	r2, [pc, #32]	@ (8004b78 <HAL_TIM_Base_MspInit+0x74>)
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <HAL_TIM_Base_MspInit+0x74>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40000400 	.word	0x40000400

08004b80 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	@ 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b88:	f107 031c 	add.w	r3, r7, #28
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	605a      	str	r2, [r3, #4]
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	60da      	str	r2, [r3, #12]
 8004b96:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba0:	d14b      	bne.n	8004c3a <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	4a3e      	ldr	r2, [pc, #248]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	4b38      	ldr	r3, [pc, #224]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc6:	4a37      	ldr	r2, [pc, #220]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bce:	4b35      	ldr	r3, [pc, #212]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	4b31      	ldr	r3, [pc, #196]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	4a30      	ldr	r2, [pc, #192]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004be4:	f043 0302 	orr.w	r3, r3, #2
 8004be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bea:	4b2e      	ldr	r3, [pc, #184]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c04:	2300      	movs	r3, #0
 8004c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 8004c0c:	f107 031c 	add.w	r3, r7, #28
 8004c10:	4619      	mov	r1, r3
 8004c12:	4825      	ldr	r0, [pc, #148]	@ (8004ca8 <HAL_TIM_Encoder_MspInit+0x128>)
 8004c14:	f002 fa02 	bl	800701c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 8004c18:	2308      	movs	r3, #8
 8004c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 8004c2c:	f107 031c 	add.w	r3, r7, #28
 8004c30:	4619      	mov	r1, r3
 8004c32:	481e      	ldr	r0, [pc, #120]	@ (8004cac <HAL_TIM_Encoder_MspInit+0x12c>)
 8004c34:	f002 f9f2 	bl	800701c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004c38:	e030      	b.n	8004c9c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb0 <HAL_TIM_Encoder_MspInit+0x130>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d12b      	bne.n	8004c9c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	4b16      	ldr	r3, [pc, #88]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	4a15      	ldr	r2, [pc, #84]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c54:	4b13      	ldr	r3, [pc, #76]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c60:	2300      	movs	r3, #0
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c68:	4a0e      	ldr	r2, [pc, #56]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c6a:	f043 0302 	orr.w	r3, r3, #2
 8004c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 8004c7c:	23c0      	movs	r3, #192	@ 0xc0
 8004c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c80:	2302      	movs	r3, #2
 8004c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c90:	f107 031c 	add.w	r3, r7, #28
 8004c94:	4619      	mov	r1, r3
 8004c96:	4805      	ldr	r0, [pc, #20]	@ (8004cac <HAL_TIM_Encoder_MspInit+0x12c>)
 8004c98:	f002 f9c0 	bl	800701c <HAL_GPIO_Init>
}
 8004c9c:	bf00      	nop
 8004c9e:	3730      	adds	r7, #48	@ 0x30
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40020000 	.word	0x40020000
 8004cac:	40020400 	.word	0x40020400
 8004cb0:	40000800 	.word	0x40000800

08004cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	@ 0x28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cbc:	f107 0314 	add.w	r3, r7, #20
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a33      	ldr	r2, [pc, #204]	@ (8004da0 <HAL_TIM_MspPostInit+0xec>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d11f      	bne.n	8004d16 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	4b32      	ldr	r3, [pc, #200]	@ (8004da4 <HAL_TIM_MspPostInit+0xf0>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cde:	4a31      	ldr	r2, [pc, #196]	@ (8004da4 <HAL_TIM_MspPostInit+0xf0>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8004da4 <HAL_TIM_MspPostInit+0xf0>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 8004cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d00:	2300      	movs	r3, #0
 8004d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004d04:	2301      	movs	r3, #1
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4826      	ldr	r0, [pc, #152]	@ (8004da8 <HAL_TIM_MspPostInit+0xf4>)
 8004d10:	f002 f984 	bl	800701c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004d14:	e040      	b.n	8004d98 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a24      	ldr	r2, [pc, #144]	@ (8004dac <HAL_TIM_MspPostInit+0xf8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d13b      	bne.n	8004d98 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	4b1f      	ldr	r3, [pc, #124]	@ (8004da4 <HAL_TIM_MspPostInit+0xf0>)
 8004d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d28:	4a1e      	ldr	r2, [pc, #120]	@ (8004da4 <HAL_TIM_MspPostInit+0xf0>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d30:	4b1c      	ldr	r3, [pc, #112]	@ (8004da4 <HAL_TIM_MspPostInit+0xf0>)
 8004d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <HAL_TIM_MspPostInit+0xf0>)
 8004d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d44:	4a17      	ldr	r2, [pc, #92]	@ (8004da4 <HAL_TIM_MspPostInit+0xf0>)
 8004d46:	f043 0302 	orr.w	r3, r3, #2
 8004d4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d4c:	4b15      	ldr	r3, [pc, #84]	@ (8004da4 <HAL_TIM_MspPostInit+0xf0>)
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8004d58:	23c0      	movs	r3, #192	@ 0xc0
 8004d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d64:	2300      	movs	r3, #0
 8004d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	4619      	mov	r1, r3
 8004d72:	480d      	ldr	r0, [pc, #52]	@ (8004da8 <HAL_TIM_MspPostInit+0xf4>)
 8004d74:	f002 f952 	bl	800701c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d84:	2300      	movs	r3, #0
 8004d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d8c:	f107 0314 	add.w	r3, r7, #20
 8004d90:	4619      	mov	r1, r3
 8004d92:	4807      	ldr	r0, [pc, #28]	@ (8004db0 <HAL_TIM_MspPostInit+0xfc>)
 8004d94:	f002 f942 	bl	800701c <HAL_GPIO_Init>
}
 8004d98:	bf00      	nop
 8004d9a:	3728      	adds	r7, #40	@ 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40020400 	.word	0x40020400

08004db4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	@ 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dbc:	f107 0314 	add.w	r3, r7, #20
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	605a      	str	r2, [r3, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e48 <HAL_UART_MspInit+0x94>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d134      	bne.n	8004e40 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	4b1c      	ldr	r3, [pc, #112]	@ (8004e4c <HAL_UART_MspInit+0x98>)
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dde:	4a1b      	ldr	r2, [pc, #108]	@ (8004e4c <HAL_UART_MspInit+0x98>)
 8004de0:	f043 0320 	orr.w	r3, r3, #32
 8004de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004de6:	4b19      	ldr	r3, [pc, #100]	@ (8004e4c <HAL_UART_MspInit+0x98>)
 8004de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <HAL_UART_MspInit+0x98>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfa:	4a14      	ldr	r2, [pc, #80]	@ (8004e4c <HAL_UART_MspInit+0x98>)
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e02:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <HAL_UART_MspInit+0x98>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8004e0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e14:	2302      	movs	r3, #2
 8004e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004e20:	2308      	movs	r3, #8
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4809      	ldr	r0, [pc, #36]	@ (8004e50 <HAL_UART_MspInit+0x9c>)
 8004e2c:	f002 f8f6 	bl	800701c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8004e30:	2200      	movs	r2, #0
 8004e32:	2106      	movs	r1, #6
 8004e34:	2047      	movs	r0, #71	@ 0x47
 8004e36:	f002 f828 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004e3a:	2047      	movs	r0, #71	@ 0x47
 8004e3c:	f002 f841 	bl	8006ec2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8004e40:	bf00      	nop
 8004e42:	3728      	adds	r7, #40	@ 0x28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40011400 	.word	0x40011400
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40020000 	.word	0x40020000

08004e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e58:	bf00      	nop
 8004e5a:	e7fd      	b.n	8004e58 <NMI_Handler+0x4>

08004e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e60:	bf00      	nop
 8004e62:	e7fd      	b.n	8004e60 <HardFault_Handler+0x4>

08004e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <MemManage_Handler+0x4>

08004e6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <BusFault_Handler+0x4>

08004e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e78:	bf00      	nop
 8004e7a:	e7fd      	b.n	8004e78 <UsageFault_Handler+0x4>

08004e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e80:	bf00      	nop
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e8e:	bf00      	nop
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004eaa:	f001 fadd 	bl	8006468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8004eb6:	2002      	movs	r0, #2
 8004eb8:	f002 fa68 	bl	800738c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004ebc:	bf00      	nop
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ec4:	4802      	ldr	r0, [pc, #8]	@ (8004ed0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004ec6:	f003 ff93 	bl	8008df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004eca:	bf00      	nop
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000300 	.word	0x20000300

08004ed4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8004ed8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004edc:	f002 fa56 	bl	800738c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004ee8:	4802      	ldr	r0, [pc, #8]	@ (8004ef4 <USART6_IRQHandler+0x10>)
 8004eea:	f004 feaf 	bl	8009c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000420 	.word	0x20000420

08004ef8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return 1;
 8004efc:	2301      	movs	r3, #1
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <_kill>:

int _kill(int pid, int sig)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f12:	f006 fbf3 	bl	800b6fc <__errno>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2216      	movs	r2, #22
 8004f1a:	601a      	str	r2, [r3, #0]
  return -1;
 8004f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_exit>:

void _exit (int status)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f30:	f04f 31ff 	mov.w	r1, #4294967295
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ffe7 	bl	8004f08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <_exit+0x12>

08004f3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e00a      	b.n	8004f66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f50:	f3af 8000 	nop.w
 8004f54:	4601      	mov	r1, r0
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	60ba      	str	r2, [r7, #8]
 8004f5c:	b2ca      	uxtb	r2, r1
 8004f5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3301      	adds	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	dbf0      	blt.n	8004f50 <_read+0x12>
  }

  return len;
 8004f6e:	687b      	ldr	r3, [r7, #4]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e009      	b.n	8004f9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	60ba      	str	r2, [r7, #8]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	dbf1      	blt.n	8004f8a <_write+0x12>
  }
  return len;
 8004fa6:	687b      	ldr	r3, [r7, #4]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <_close>:

int _close(int file)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004fd8:	605a      	str	r2, [r3, #4]
  return 0;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <_isatty>:

int _isatty(int file)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ff0:	2301      	movs	r3, #1
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005020:	4a14      	ldr	r2, [pc, #80]	@ (8005074 <_sbrk+0x5c>)
 8005022:	4b15      	ldr	r3, [pc, #84]	@ (8005078 <_sbrk+0x60>)
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800502c:	4b13      	ldr	r3, [pc, #76]	@ (800507c <_sbrk+0x64>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005034:	4b11      	ldr	r3, [pc, #68]	@ (800507c <_sbrk+0x64>)
 8005036:	4a12      	ldr	r2, [pc, #72]	@ (8005080 <_sbrk+0x68>)
 8005038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800503a:	4b10      	ldr	r3, [pc, #64]	@ (800507c <_sbrk+0x64>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	429a      	cmp	r2, r3
 8005046:	d207      	bcs.n	8005058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005048:	f006 fb58 	bl	800b6fc <__errno>
 800504c:	4603      	mov	r3, r0
 800504e:	220c      	movs	r2, #12
 8005050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005052:	f04f 33ff 	mov.w	r3, #4294967295
 8005056:	e009      	b.n	800506c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005058:	4b08      	ldr	r3, [pc, #32]	@ (800507c <_sbrk+0x64>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800505e:	4b07      	ldr	r3, [pc, #28]	@ (800507c <_sbrk+0x64>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	4a05      	ldr	r2, [pc, #20]	@ (800507c <_sbrk+0x64>)
 8005068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800506a:	68fb      	ldr	r3, [r7, #12]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20020000 	.word	0x20020000
 8005078:	00000400 	.word	0x00000400
 800507c:	20001314 	.word	0x20001314
 8005080:	200014b0 	.word	0x200014b0

08005084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005088:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <SystemInit+0x20>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508e:	4a05      	ldr	r2, [pc, #20]	@ (80050a4 <SystemInit+0x20>)
 8005090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005098:	bf00      	nop
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	e000ed00 	.word	0xe000ed00

080050a8 <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	460a      	mov	r2, r1
 80050b2:	71fb      	strb	r3, [r7, #7]
 80050b4:	4613      	mov	r3, r2
 80050b6:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	2110      	movs	r1, #16
 80050c8:	4808      	ldr	r0, [pc, #32]	@ (80050ec <led_status+0x44>)
 80050ca:	f002 f92b 	bl	8007324 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80050ce:	79bb      	ldrb	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	2120      	movs	r1, #32
 80050de:	4803      	ldr	r0, [pc, #12]	@ (80050ec <led_status+0x44>)
 80050e0:	f002 f920 	bl	8007324 <HAL_GPIO_WritePin>
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40020400 	.word	0x40020400

080050f0 <led_sequence_startup>:

/**
 * @brief LED sequence for different states
 */
void led_sequence_startup(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 80050f6:	2300      	movs	r3, #0
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	e010      	b.n	800511e <led_sequence_startup+0x2e>
        led_status(1, 0);
 80050fc:	2100      	movs	r1, #0
 80050fe:	2001      	movs	r0, #1
 8005100:	f7ff ffd2 	bl	80050a8 <led_status>
        HAL_Delay(150);
 8005104:	2096      	movs	r0, #150	@ 0x96
 8005106:	f001 f9cf 	bl	80064a8 <HAL_Delay>
        led_status(0, 1);
 800510a:	2101      	movs	r1, #1
 800510c:	2000      	movs	r0, #0
 800510e:	f7ff ffcb 	bl	80050a8 <led_status>
        HAL_Delay(150);
 8005112:	2096      	movs	r0, #150	@ 0x96
 8005114:	f001 f9c8 	bl	80064a8 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3301      	adds	r3, #1
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b02      	cmp	r3, #2
 8005122:	ddeb      	ble.n	80050fc <led_sequence_startup+0xc>
    }
    led_status(0, 0);
 8005124:	2100      	movs	r1, #0
 8005126:	2000      	movs	r0, #0
 8005128:	f7ff ffbe 	bl	80050a8 <led_status>
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <led_sequence_exploring>:

/**
 * @brief LED sequence for exploration
 */
void led_sequence_exploring(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
    led_status(1, 0); // Left LED on during exploration
 8005138:	2100      	movs	r1, #0
 800513a:	2001      	movs	r0, #1
 800513c:	f7ff ffb4 	bl	80050a8 <led_status>
}
 8005140:	bf00      	nop
 8005142:	bd80      	pop	{r7, pc}

08005144 <led_sequence_returning>:

/**
 * @brief LED sequence for returning
 */
void led_sequence_returning(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
    led_status(0, 1); // Right LED on during return
 8005148:	2101      	movs	r1, #1
 800514a:	2000      	movs	r0, #0
 800514c:	f7ff ffac 	bl	80050a8 <led_status>
}
 8005150:	bf00      	nop
 8005152:	bd80      	pop	{r7, pc}

08005154 <led_sequence_complete>:

/**
 * @brief LED sequence for completion
 */
void led_sequence_complete(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 800515a:	2300      	movs	r3, #0
 800515c:	607b      	str	r3, [r7, #4]
 800515e:	e010      	b.n	8005182 <led_sequence_complete+0x2e>
        led_status(1, 1);
 8005160:	2101      	movs	r1, #1
 8005162:	2001      	movs	r0, #1
 8005164:	f7ff ffa0 	bl	80050a8 <led_status>
        HAL_Delay(200);
 8005168:	20c8      	movs	r0, #200	@ 0xc8
 800516a:	f001 f99d 	bl	80064a8 <HAL_Delay>
        led_status(0, 0);
 800516e:	2100      	movs	r1, #0
 8005170:	2000      	movs	r0, #0
 8005172:	f7ff ff99 	bl	80050a8 <led_status>
        HAL_Delay(200);
 8005176:	20c8      	movs	r0, #200	@ 0xc8
 8005178:	f001 f996 	bl	80064a8 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3301      	adds	r3, #1
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b04      	cmp	r3, #4
 8005186:	ddeb      	ble.n	8005160 <led_sequence_complete+0xc>
    }
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <led_sequence_error>:

/**
 * @brief LED sequence for error
 */
void led_sequence_error(void)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {
 8005198:	2300      	movs	r3, #0
 800519a:	607b      	str	r3, [r7, #4]
 800519c:	e010      	b.n	80051c0 <led_sequence_error+0x2e>
        led_status(1, 1);
 800519e:	2101      	movs	r1, #1
 80051a0:	2001      	movs	r0, #1
 80051a2:	f7ff ff81 	bl	80050a8 <led_status>
        HAL_Delay(50);
 80051a6:	2032      	movs	r0, #50	@ 0x32
 80051a8:	f001 f97e 	bl	80064a8 <HAL_Delay>
        led_status(0, 0);
 80051ac:	2100      	movs	r1, #0
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7ff ff7a 	bl	80050a8 <led_status>
        HAL_Delay(50);
 80051b4:	2032      	movs	r0, #50	@ 0x32
 80051b6:	f001 f977 	bl	80064a8 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3301      	adds	r3, #1
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b09      	cmp	r3, #9
 80051c4:	ddeb      	ble.n	800519e <led_sequence_error+0xc>
    }
}
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <get_direction_name>:

/**
 * @brief Get direction name as string
 */
const char* get_direction_name(int direction)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
    switch (direction) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d812      	bhi.n	8005204 <get_direction_name+0x34>
 80051de:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <get_direction_name+0x14>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	08005201 	.word	0x08005201
        case NORTH: return "NORTH";
 80051f4:	4b07      	ldr	r3, [pc, #28]	@ (8005214 <get_direction_name+0x44>)
 80051f6:	e006      	b.n	8005206 <get_direction_name+0x36>
        case EAST:  return "EAST";
 80051f8:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <get_direction_name+0x48>)
 80051fa:	e004      	b.n	8005206 <get_direction_name+0x36>
        case SOUTH: return "SOUTH";
 80051fc:	4b07      	ldr	r3, [pc, #28]	@ (800521c <get_direction_name+0x4c>)
 80051fe:	e002      	b.n	8005206 <get_direction_name+0x36>
        case WEST:  return "WEST";
 8005200:	4b07      	ldr	r3, [pc, #28]	@ (8005220 <get_direction_name+0x50>)
 8005202:	e000      	b.n	8005206 <get_direction_name+0x36>
        default:    return "UNKNOWN";
 8005204:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <get_direction_name+0x54>)
    }
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	0800f4ac 	.word	0x0800f4ac
 8005218:	0800f4b4 	.word	0x0800f4b4
 800521c:	0800f4bc 	.word	0x0800f4bc
 8005220:	0800f4c4 	.word	0x0800f4c4
 8005224:	0800f4cc 	.word	0x0800f4cc

08005228 <system_health_check>:

/**
 * @brief System health check
 */
bool system_health_check(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
    bool health_ok = true;
 800522e:	2301      	movs	r3, #1
 8005230:	71fb      	strb	r3, [r7, #7]

    // Check battery voltage
    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 8005232:	4b1a      	ldr	r3, [pc, #104]	@ (800529c <system_health_check+0x74>)
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800523a:	4293      	cmp	r3, r2
 800523c:	d806      	bhi.n	800524c <system_health_check+0x24>
        send_bluetooth_message("WARNING: Low battery detected!\r\n");
 800523e:	4818      	ldr	r0, [pc, #96]	@ (80052a0 <system_health_check+0x78>)
 8005240:	f7fb ff3e 	bl	80010c0 <send_bluetooth_message>
        play_battery_warning();
 8005244:	f7fb ff21 	bl	800108a <play_battery_warning>
        health_ok = false;
 8005248:	2300      	movs	r3, #0
 800524a:	71fb      	strb	r3, [r7, #7]
    }

    // Check sensor readings
    if (sensors.front_left == 0 && sensors.front_right == 0 &&
 800524c:	4b13      	ldr	r3, [pc, #76]	@ (800529c <system_health_check+0x74>)
 800524e:	891b      	ldrh	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d110      	bne.n	8005276 <system_health_check+0x4e>
 8005254:	4b11      	ldr	r3, [pc, #68]	@ (800529c <system_health_check+0x74>)
 8005256:	885b      	ldrh	r3, [r3, #2]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10c      	bne.n	8005276 <system_health_check+0x4e>
        sensors.side_left == 0 && sensors.side_right == 0) {
 800525c:	4b0f      	ldr	r3, [pc, #60]	@ (800529c <system_health_check+0x74>)
 800525e:	88db      	ldrh	r3, [r3, #6]
    if (sensors.front_left == 0 && sensors.front_right == 0 &&
 8005260:	2b00      	cmp	r3, #0
 8005262:	d108      	bne.n	8005276 <system_health_check+0x4e>
        sensors.side_left == 0 && sensors.side_right == 0) {
 8005264:	4b0d      	ldr	r3, [pc, #52]	@ (800529c <system_health_check+0x74>)
 8005266:	889b      	ldrh	r3, [r3, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <system_health_check+0x4e>
        send_bluetooth_message("WARNING: All sensors reading zero!\r\n");
 800526c:	480d      	ldr	r0, [pc, #52]	@ (80052a4 <system_health_check+0x7c>)
 800526e:	f7fb ff27 	bl	80010c0 <send_bluetooth_message>
        health_ok = false;
 8005272:	2300      	movs	r3, #0
 8005274:	71fb      	strb	r3, [r7, #7]
    }

    // Check gyroscope communication
    uint8_t gyro_id = mpu9250_read_register(0x75);
 8005276:	2075      	movs	r0, #117	@ 0x75
 8005278:	f7fc f90c 	bl	8001494 <mpu9250_read_register>
 800527c:	4603      	mov	r3, r0
 800527e:	71bb      	strb	r3, [r7, #6]
    if (gyro_id != 0x71) {
 8005280:	79bb      	ldrb	r3, [r7, #6]
 8005282:	2b71      	cmp	r3, #113	@ 0x71
 8005284:	d004      	beq.n	8005290 <system_health_check+0x68>
        send_bluetooth_message("WARNING: Gyroscope communication issue!\r\n");
 8005286:	4808      	ldr	r0, [pc, #32]	@ (80052a8 <system_health_check+0x80>)
 8005288:	f7fb ff1a 	bl	80010c0 <send_bluetooth_message>
        health_ok = false;
 800528c:	2300      	movs	r3, #0
 800528e:	71fb      	strb	r3, [r7, #7]
    }

    return health_ok;
 8005290:	79fb      	ldrb	r3, [r7, #7]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000d7c 	.word	0x20000d7c
 80052a0:	0800f4d4 	.word	0x0800f4d4
 80052a4:	0800f4f8 	.word	0x0800f4f8
 80052a8:	0800f520 	.word	0x0800f520

080052ac <clampi_local>:
//            return false;
//        }
//    }
//}

static inline int clampi_local(int v, int lo, int hi) {
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
    return (v < lo) ? lo : (v > hi) ? hi : v;
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	db05      	blt.n	80052cc <clampi_local+0x20>
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4293      	cmp	r3, r2
 80052c6:	bfa8      	it	ge
 80052c8:	4613      	movge	r3, r2
 80052ca:	e000      	b.n	80052ce <clampi_local+0x22>
 80052cc:	68bb      	ldr	r3, [r7, #8]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <align_front_to_wall>:

#define target_align 80

bool align_front_to_wall(int base_pwm, uint32_t timeout_ms)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b0a0      	sub	sp, #128	@ 0x80
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
    // ---- Your gains (unchanged) ----
    const float Kp_d = 30.0f, Ki_d = 0.3f;   // distance PI
 80052e6:	4bb0      	ldr	r3, [pc, #704]	@ (80055a8 <align_front_to_wall+0x2cc>)
 80052e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ea:	4bb0      	ldr	r3, [pc, #704]	@ (80055ac <align_front_to_wall+0x2d0>)
 80052ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float Kp_a = 10.5f, Ki_a = 0.1f;   // angle PI
 80052ee:	4bb0      	ldr	r3, [pc, #704]	@ (80055b0 <align_front_to_wall+0x2d4>)
 80052f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052f2:	4bb0      	ldr	r3, [pc, #704]	@ (80055b4 <align_front_to_wall+0x2d8>)
 80052f4:	657b      	str	r3, [r7, #84]	@ 0x54

    // ---- Small bias to kill steady left drift (counts). Try 0, then -1 or -2 if it still nudges left. ----
    const int   ANG_BIAS = 0;    // negative -> adds a tiny right-turn tendency
 80052f6:	2300      	movs	r3, #0
 80052f8:	653b      	str	r3, [r7, #80]	@ 0x50

    // ---- Finish criteria (unchanged) ----
    const int   DIST_TOL = 10;         // counts
 80052fa:	230a      	movs	r3, #10
 80052fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const int   ANG_TOL  = 12;         // counts
 80052fe:	230c      	movs	r3, #12
 8005300:	64bb      	str	r3, [r7, #72]	@ 0x48
    const uint32_t STABLE_DWELL_MS = 150;
 8005302:	2396      	movs	r3, #150	@ 0x96
 8005304:	647b      	str	r3, [r7, #68]	@ 0x44

    // ---- Output constraints (unchanged idea) ----
    const int PWM_MAX = base_pwm;      // clamp final wheel cmds
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	643b      	str	r3, [r7, #64]	@ 0x40
    const int PWM_MIN_MOVE = 500;      // measured deadzone threshold
 800530a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800530e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Integrators
    float I_d = 0.0f, I_a = 0.0f;
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	67bb      	str	r3, [r7, #120]	@ 0x78

    uint32_t t0 = HAL_GetTick();
 800531c:	f001 f8b8 	bl	8006490 <HAL_GetTick>
 8005320:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t last_ok = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t last_tick = HAL_GetTick();
 8005326:	f001 f8b3 	bl	8006490 <HAL_GetTick>
 800532a:	6738      	str	r0, [r7, #112]	@ 0x70

    // reset motors
    motor_set(0, true, 0);
 800532c:	2200      	movs	r2, #0
 800532e:	2101      	movs	r1, #1
 8005330:	2000      	movs	r0, #0
 8005332:	f7fe fd01 	bl	8003d38 <motor_set>
    motor_set(1, true, 0);
 8005336:	2200      	movs	r2, #0
 8005338:	2101      	movs	r1, #1
 800533a:	2001      	movs	r0, #1
 800533c:	f7fe fcfc 	bl	8003d38 <motor_set>

    while (1) {
        // --- timing / dt ---
        uint32_t now = HAL_GetTick();
 8005340:	f001 f8a6 	bl	8006490 <HAL_GetTick>
 8005344:	6378      	str	r0, [r7, #52]	@ 0x34
        float dt = (now - last_tick) / 1000.0f;
 8005346:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005348:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005354:	eddf 6a98 	vldr	s13, [pc, #608]	@ 80055b8 <align_front_to_wall+0x2dc>
 8005358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800535c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
        if (dt <= 0) dt = 0.001f;
 8005360:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8005364:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536c:	d801      	bhi.n	8005372 <align_front_to_wall+0x96>
 800536e:	4b93      	ldr	r3, [pc, #588]	@ (80055bc <align_front_to_wall+0x2e0>)
 8005370:	66fb      	str	r3, [r7, #108]	@ 0x6c
        last_tick = now;
 8005372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005374:	673b      	str	r3, [r7, #112]	@ 0x70

        // --- sensors ---
        update_sensors();
 8005376:	f7ff f973 	bl	8004660 <update_sensors>
        int FL = (int)sensors.front_left;
 800537a:	4b91      	ldr	r3, [pc, #580]	@ (80055c0 <align_front_to_wall+0x2e4>)
 800537c:	891b      	ldrh	r3, [r3, #8]
 800537e:	633b      	str	r3, [r7, #48]	@ 0x30
        int FR = (int)sensors.front_right;
 8005380:	4b8f      	ldr	r3, [pc, #572]	@ (80055c0 <align_front_to_wall+0x2e4>)
 8005382:	885b      	ldrh	r3, [r3, #2]
 8005384:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // --- errors (raw counts) ---
        int eL = FL - (int)target_align;
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	3b50      	subs	r3, #80	@ 0x50
 800538a:	62bb      	str	r3, [r7, #40]	@ 0x28
        int eR = FR - (int)target_align;
 800538c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538e:	3b50      	subs	r3, #80	@ 0x50
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24

        // distance = average; angle = left-right diff (+ means left closer). Add tiny bias to cancel drift.
        float e_dist = 0.5f * (eL + eR);
 8005392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	4413      	add	r3, r2
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80053a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053a8:	edc7 7a08 	vstr	s15, [r7, #32]
        float e_ang  = (float)(eL - eR + ANG_BIAS);
 80053ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	1ad2      	subs	r2, r2, r3
 80053b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b4:	4413      	add	r3, r2
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]

        // --- PI controllers ---
        I_d += e_dist * dt;
 80053c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80053c6:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80053ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ce:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80053d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d6:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        I_a += e_ang  * dt;
 80053da:	ed97 7a07 	vldr	s14, [r7, #28]
 80053de:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80053ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ee:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

        // simple clamps to keep integrators sane
        if (I_d > 100.0f) I_d = 100.0f;
 80053f2:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80053f6:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80055c4 <align_front_to_wall+0x2e8>
 80053fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005402:	dd01      	ble.n	8005408 <align_front_to_wall+0x12c>
 8005404:	4b70      	ldr	r3, [pc, #448]	@ (80055c8 <align_front_to_wall+0x2ec>)
 8005406:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (I_d < -100.0f) I_d = -100.0f;
 8005408:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800540c:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80055cc <align_front_to_wall+0x2f0>
 8005410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005418:	d501      	bpl.n	800541e <align_front_to_wall+0x142>
 800541a:	4b6d      	ldr	r3, [pc, #436]	@ (80055d0 <align_front_to_wall+0x2f4>)
 800541c:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (I_a > 100.0f) I_a = 100.0f;
 800541e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8005422:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80055c4 <align_front_to_wall+0x2e8>
 8005426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542e:	dd01      	ble.n	8005434 <align_front_to_wall+0x158>
 8005430:	4b65      	ldr	r3, [pc, #404]	@ (80055c8 <align_front_to_wall+0x2ec>)
 8005432:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (I_a < -100.0f) I_a = -100.0f;
 8005434:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8005438:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80055cc <align_front_to_wall+0x2f0>
 800543c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005444:	d501      	bpl.n	800544a <align_front_to_wall+0x16e>
 8005446:	4b62      	ldr	r3, [pc, #392]	@ (80055d0 <align_front_to_wall+0x2f4>)
 8005448:	67bb      	str	r3, [r7, #120]	@ 0x78

        float v = Kp_d * e_dist + Ki_d * I_d;  // forward/back command  (- = back, + = forward)
 800544a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800544e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005456:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800545a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800545e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005466:	edc7 7a06 	vstr	s15, [r7, #24]
        float w = Kp_a * e_ang  + Ki_a * I_a;  // turn command          (- = turn right, + = left)
 800546a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800546e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005476:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800547a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800547e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005486:	edc7 7a05 	vstr	s15, [r7, #20]

        // per-wheel raw commands (signed) — keep your mixing/signs
        int cmd_left  = (int)lroundf(-v - w);
 800548a:	edd7 7a06 	vldr	s15, [r7, #24]
 800548e:	eeb1 7a67 	vneg.f32	s14, s15
 8005492:	edd7 7a05 	vldr	s15, [r7, #20]
 8005496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800549a:	eeb0 0a67 	vmov.f32	s0, s15
 800549e:	f008 f9ff 	bl	800d8a0 <lroundf>
 80054a2:	66b8      	str	r0, [r7, #104]	@ 0x68
        int cmd_right = (int)lroundf(-v + w);
 80054a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80054a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80054ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054b0:	eeb0 0a67 	vmov.f32	s0, s15
 80054b4:	f008 f9f4 	bl	800d8a0 <lroundf>
 80054b8:	6678      	str	r0, [r7, #100]	@ 0x64

        // saturate
        cmd_left  = clampi_local(cmd_left,  -PWM_MAX, PWM_MAX);
 80054ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054bc:	425b      	negs	r3, r3
 80054be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054c0:	4619      	mov	r1, r3
 80054c2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80054c4:	f7ff fef2 	bl	80052ac <clampi_local>
 80054c8:	66b8      	str	r0, [r7, #104]	@ 0x68
        cmd_right = clampi_local(cmd_right, -PWM_MAX, PWM_MAX);
 80054ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054cc:	425b      	negs	r3, r3
 80054ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054d0:	4619      	mov	r1, r3
 80054d2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80054d4:	f7ff feea 	bl	80052ac <clampi_local>
 80054d8:	6678      	str	r0, [r7, #100]	@ 0x64

        // --- convergence check *before* applying min-move ---
        bool dist_ok = (abs((int)lroundf(e_dist)) <= DIST_TOL);
 80054da:	ed97 0a08 	vldr	s0, [r7, #32]
 80054de:	f008 f9df 	bl	800d8a0 <lroundf>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bfb8      	it	lt
 80054e8:	425b      	neglt	r3, r3
 80054ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054ec:	429a      	cmp	r2, r3
 80054ee:	bfac      	ite	ge
 80054f0:	2301      	movge	r3, #1
 80054f2:	2300      	movlt	r3, #0
 80054f4:	74fb      	strb	r3, [r7, #19]
        bool ang_ok  = (abs((int)lroundf(e_ang))  <= ANG_TOL);
 80054f6:	ed97 0a07 	vldr	s0, [r7, #28]
 80054fa:	f008 f9d1 	bl	800d8a0 <lroundf>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	bfb8      	it	lt
 8005504:	425b      	neglt	r3, r3
 8005506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005508:	429a      	cmp	r2, r3
 800550a:	bfac      	ite	ge
 800550c:	2301      	movge	r3, #1
 800550e:	2300      	movlt	r3, #0
 8005510:	74bb      	strb	r3, [r7, #18]
        bool nearly_done = (dist_ok && ang_ok);
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <align_front_to_wall+0x246>
 8005518:	7cbb      	ldrb	r3, [r7, #18]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <align_front_to_wall+0x246>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <align_front_to_wall+0x248>
 8005522:	2300      	movs	r3, #0
 8005524:	747b      	strb	r3, [r7, #17]
 8005526:	7c7b      	ldrb	r3, [r7, #17]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	747b      	strb	r3, [r7, #17]

        // --- stiction handling ---
        // If we're NOT nearly done, enforce a minimum to break deadzone.
        // If we ARE nearly done, DON'T enforce min move — brake instead to avoid creeping.
        if (!nearly_done) {
 800552e:	7c7b      	ldrb	r3, [r7, #17]
 8005530:	f083 0301 	eor.w	r3, r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d028      	beq.n	800558c <align_front_to_wall+0x2b0>
            if (cmd_left > 0  && cmd_left  < PWM_MIN_MOVE) cmd_left  = PWM_MIN_MOVE;
 800553a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800553c:	2b00      	cmp	r3, #0
 800553e:	dd05      	ble.n	800554c <align_front_to_wall+0x270>
 8005540:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005544:	429a      	cmp	r2, r3
 8005546:	da01      	bge.n	800554c <align_front_to_wall+0x270>
 8005548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800554a:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (cmd_left < 0  && -cmd_left < PWM_MIN_MOVE) cmd_left  = -PWM_MIN_MOVE;
 800554c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800554e:	2b00      	cmp	r3, #0
 8005550:	da07      	bge.n	8005562 <align_front_to_wall+0x286>
 8005552:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005554:	425b      	negs	r3, r3
 8005556:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005558:	429a      	cmp	r2, r3
 800555a:	dd02      	ble.n	8005562 <align_front_to_wall+0x286>
 800555c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555e:	425b      	negs	r3, r3
 8005560:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (cmd_right > 0 && cmd_right < PWM_MIN_MOVE) cmd_right = PWM_MIN_MOVE;
 8005562:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005564:	2b00      	cmp	r3, #0
 8005566:	dd05      	ble.n	8005574 <align_front_to_wall+0x298>
 8005568:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800556a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556c:	429a      	cmp	r2, r3
 800556e:	da01      	bge.n	8005574 <align_front_to_wall+0x298>
 8005570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005572:	667b      	str	r3, [r7, #100]	@ 0x64
            if (cmd_right < 0 && -cmd_right < PWM_MIN_MOVE) cmd_right = -PWM_MIN_MOVE;
 8005574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005576:	2b00      	cmp	r3, #0
 8005578:	da0c      	bge.n	8005594 <align_front_to_wall+0x2b8>
 800557a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800557c:	425b      	negs	r3, r3
 800557e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005580:	429a      	cmp	r2, r3
 8005582:	dd07      	ble.n	8005594 <align_front_to_wall+0x2b8>
 8005584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005586:	425b      	negs	r3, r3
 8005588:	667b      	str	r3, [r7, #100]	@ 0x64
 800558a:	e003      	b.n	8005594 <align_front_to_wall+0x2b8>
        } else {
            // close enough: stop and actively brake so it doesn't coast/creep left
            cmd_left = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	66bb      	str	r3, [r7, #104]	@ 0x68
            cmd_right = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	667b      	str	r3, [r7, #100]	@ 0x64
        }

        // --- drive / brake ---
        if (cmd_left == 0 && cmd_right == 0) {
 8005594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005596:	2b00      	cmp	r3, #0
 8005598:	d11c      	bne.n	80055d4 <align_front_to_wall+0x2f8>
 800559a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800559c:	2b00      	cmp	r3, #0
 800559e:	d119      	bne.n	80055d4 <align_front_to_wall+0x2f8>
            break_motors();  // actively short the motors to kill drift
 80055a0:	f7fe fb32 	bl	8003c08 <break_motors>
 80055a4:	e034      	b.n	8005610 <align_front_to_wall+0x334>
 80055a6:	bf00      	nop
 80055a8:	41f00000 	.word	0x41f00000
 80055ac:	3e99999a 	.word	0x3e99999a
 80055b0:	41280000 	.word	0x41280000
 80055b4:	3dcccccd 	.word	0x3dcccccd
 80055b8:	447a0000 	.word	0x447a0000
 80055bc:	3a83126f 	.word	0x3a83126f
 80055c0:	20000d7c 	.word	0x20000d7c
 80055c4:	42c80000 	.word	0x42c80000
 80055c8:	42c80000 	.word	0x42c80000
 80055cc:	c2c80000 	.word	0xc2c80000
 80055d0:	c2c80000 	.word	0xc2c80000
        } else {
            bool lfwd = (cmd_left  >= 0);
 80055d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055d6:	43db      	mvns	r3, r3
 80055d8:	0fdb      	lsrs	r3, r3, #31
 80055da:	743b      	strb	r3, [r7, #16]
            bool rfwd = (cmd_right >= 0);
 80055dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055de:	43db      	mvns	r3, r3
 80055e0:	0fdb      	lsrs	r3, r3, #31
 80055e2:	73fb      	strb	r3, [r7, #15]
            uint16_t lduty = (uint16_t)abs(cmd_left);
 80055e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bfb8      	it	lt
 80055ea:	425b      	neglt	r3, r3
 80055ec:	81bb      	strh	r3, [r7, #12]
            uint16_t rduty = (uint16_t)abs(cmd_right);
 80055ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bfb8      	it	lt
 80055f4:	425b      	neglt	r3, r3
 80055f6:	817b      	strh	r3, [r7, #10]
            motor_set(0, lfwd, lduty);
 80055f8:	89ba      	ldrh	r2, [r7, #12]
 80055fa:	7c3b      	ldrb	r3, [r7, #16]
 80055fc:	4619      	mov	r1, r3
 80055fe:	2000      	movs	r0, #0
 8005600:	f7fe fb9a 	bl	8003d38 <motor_set>
            motor_set(1, rfwd, rduty);
 8005604:	897a      	ldrh	r2, [r7, #10]
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	4619      	mov	r1, r3
 800560a:	2001      	movs	r0, #1
 800560c:	f7fe fb94 	bl	8003d38 <motor_set>
        }

        // --- dwell-based success ---
        if (nearly_done) {
 8005610:	7c7b      	ldrb	r3, [r7, #17]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00e      	beq.n	8005634 <align_front_to_wall+0x358>
            if (last_ok == 0) last_ok = now;
 8005616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <align_front_to_wall+0x344>
 800561c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561e:	677b      	str	r3, [r7, #116]	@ 0x74
            if ((now - last_ok) >= STABLE_DWELL_MS) {
 8005620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005628:	429a      	cmp	r2, r3
 800562a:	d805      	bhi.n	8005638 <align_front_to_wall+0x35c>
                break_motors();
 800562c:	f7fe faec 	bl	8003c08 <break_motors>
                return true;
 8005630:	2301      	movs	r3, #1
 8005632:	e00b      	b.n	800564c <align_front_to_wall+0x370>
            }
        } else {
            last_ok = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        // --- timeout ---
        if ((now - t0) > timeout_ms) {
 8005638:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	f4bf ae7d 	bcs.w	8005340 <align_front_to_wall+0x64>
            break_motors();
 8005646:	f7fe fadf 	bl	8003c08 <break_motors>
            return false;
 800564a:	2300      	movs	r3, #0
        }
    }
}
 800564c:	4618      	mov	r0, r3
 800564e:	3780      	adds	r7, #128	@ 0x80
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <wall_follow_reset_int>:
//void wall_follow_reset_int(int mode, int base_pwm);   // forward decl
//void wall_follow_step(void);                          // forward decl

// Call once before starting wall-follow
void wall_follow_reset_int(int mode, int base_pwm)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
    wf_mode = (mode == 1) ? WF_LEFT : (mode == 2) ? WF_RIGHT : WF_AUTO;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d006      	beq.n	8005672 <wall_follow_reset_int+0x1e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d101      	bne.n	800566e <wall_follow_reset_int+0x1a>
 800566a:	2302      	movs	r3, #2
 800566c:	e002      	b.n	8005674 <wall_follow_reset_int+0x20>
 800566e:	2300      	movs	r3, #0
 8005670:	e000      	b.n	8005674 <wall_follow_reset_int+0x20>
 8005672:	2301      	movs	r3, #1
 8005674:	4a0f      	ldr	r2, [pc, #60]	@ (80056b4 <wall_follow_reset_int+0x60>)
 8005676:	7013      	strb	r3, [r2, #0]
    WF_BASE_PWM = base_pwm;
 8005678:	4a0f      	ldr	r2, [pc, #60]	@ (80056b8 <wall_follow_reset_int+0x64>)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6013      	str	r3, [r2, #0]

    e_int = 0.0f; e_prev = 0.0f; d_filt = 0.0f;
 800567e:	4b0f      	ldr	r3, [pc, #60]	@ (80056bc <wall_follow_reset_int+0x68>)
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	4b0e      	ldr	r3, [pc, #56]	@ (80056c0 <wall_follow_reset_int+0x6c>)
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <wall_follow_reset_int+0x70>)
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
    wf_last_ms = HAL_GetTick();
 8005696:	f000 fefb 	bl	8006490 <HAL_GetTick>
 800569a:	4603      	mov	r3, r0
 800569c:	4a0a      	ldr	r2, [pc, #40]	@ (80056c8 <wall_follow_reset_int+0x74>)
 800569e:	6013      	str	r3, [r2, #0]
    update_sensors();
 80056a0:	f7fe ffde 	bl	8004660 <update_sensors>
    error_count=0;
 80056a4:	4b09      	ldr	r3, [pc, #36]	@ (80056cc <wall_follow_reset_int+0x78>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]


    // bootstrap targets from current readings (prevents initial jump)
    //target_left  = (float)sensors.side_left;
    //target_right = (float)sensors.side_right;
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20001320 	.word	0x20001320
 80056b8:	20000030 	.word	0x20000030
 80056bc:	20001324 	.word	0x20001324
 80056c0:	20001328 	.word	0x20001328
 80056c4:	2000132c 	.word	0x2000132c
 80056c8:	20001330 	.word	0x20001330
 80056cc:	20001334 	.word	0x20001334

080056d0 <lut_lookup_lin>:
// --- Gyro rate PID step you already calibrated (we just call it) ---


// ---------- Lookup helpers (reuse your LUTs if you have them) ----------
static float lut_lookup_lin(int raw, const int *adc_table, const float *dist_table, int size)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
    if (raw >= adc_table[0]) return dist_table[0];
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	db03      	blt.n	80056f0 <lut_lookup_lin+0x20>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	edd3 7a00 	vldr	s15, [r3]
 80056ee:	e072      	b.n	80057d6 <lut_lookup_lin+0x106>
    if (raw <= adc_table[size-1]) return dist_table[size-1];
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056f6:	3b01      	subs	r3, #1
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4413      	add	r3, r2
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	429a      	cmp	r2, r3
 8005704:	dc09      	bgt.n	800571a <lut_lookup_lin+0x4a>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800570c:	3b01      	subs	r3, #1
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	4413      	add	r3, r2
 8005714:	edd3 7a00 	vldr	s15, [r3]
 8005718:	e05d      	b.n	80057d6 <lut_lookup_lin+0x106>
    for (int i = 0; i < size-1; i++) {
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	e050      	b.n	80057c2 <lut_lookup_lin+0xf2>
        if (raw <= adc_table[i] && raw >= adc_table[i+1]) {
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	4413      	add	r3, r2
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	dc45      	bgt.n	80057bc <lut_lookup_lin+0xec>
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	3301      	adds	r3, #1
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	4413      	add	r3, r2
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	429a      	cmp	r2, r3
 8005740:	db3c      	blt.n	80057bc <lut_lookup_lin+0xec>
            float t = (float)(raw - adc_table[i+1]) / (float)(adc_table[i] - adc_table[i+1]);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	3301      	adds	r3, #1
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	4413      	add	r3, r2
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	4413      	add	r3, r2
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	3301      	adds	r3, #1
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	440b      	add	r3, r1
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800577a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800577e:	edc7 7a04 	vstr	s15, [r7, #16]
            return dist_table[i+1] + t * (dist_table[i] - dist_table[i+1]);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	3301      	adds	r3, #1
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	4413      	add	r3, r2
 800578c:	ed93 7a00 	vldr	s14, [r3]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	edd3 6a00 	vldr	s13, [r3]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	3301      	adds	r3, #1
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	edd3 7a00 	vldr	s15, [r3]
 80057aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80057b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ba:	e00c      	b.n	80057d6 <lut_lookup_lin+0x106>
    for (int i = 0; i < size-1; i++) {
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	3301      	adds	r3, #1
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	dba9      	blt.n	8005720 <lut_lookup_lin+0x50>
        }
    }
    return (float)raw;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80057d6:	eeb0 0a67 	vmov.f32	s0, s15
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <wall_compute_u>:

// ------- NON-ACTUATING wall correction: compute u_wall only -------
static float wall_compute_u(float dt, int *p_has_left, int *p_has_right, int *p_has_front)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b090      	sub	sp, #64	@ 0x40
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80057ee:	60b8      	str	r0, [r7, #8]
 80057f0:	6079      	str	r1, [r7, #4]
 80057f2:	603a      	str	r2, [r7, #0]
    update_sensors();
 80057f4:	f7fe ff34 	bl	8004660 <update_sensors>
    const int Lw = sensors.wall_left  ? 1 : 0;
 80057f8:	4b93      	ldr	r3, [pc, #588]	@ (8005a48 <wall_compute_u+0x264>)
 80057fa:	7adb      	ldrb	r3, [r3, #11]
 80057fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    const int Rw = sensors.wall_right ? 1 : 0;
 80057fe:	4b92      	ldr	r3, [pc, #584]	@ (8005a48 <wall_compute_u+0x264>)
 8005800:	7b1b      	ldrb	r3, [r3, #12]
 8005802:	637b      	str	r3, [r7, #52]	@ 0x34
    const int Fw = sensors.wall_front ? 1 : 0;
 8005804:	4b90      	ldr	r3, [pc, #576]	@ (8005a48 <wall_compute_u+0x264>)
 8005806:	7a9b      	ldrb	r3, [r3, #10]
 8005808:	633b      	str	r3, [r7, #48]	@ 0x30
    if (p_has_left)  *p_has_left  = Lw;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <wall_compute_u+0x32>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005814:	601a      	str	r2, [r3, #0]
    if (p_has_right) *p_has_right = Rw;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <wall_compute_u+0x3e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005820:	601a      	str	r2, [r3, #0]
    if (p_has_front) *p_has_front = Fw;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <wall_compute_u+0x4a>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800582c:	601a      	str	r2, [r3, #0]

    // read raw side ADCs
    const int Lraw = sensors.side_left;
 800582e:	4b86      	ldr	r3, [pc, #536]	@ (8005a48 <wall_compute_u+0x264>)
 8005830:	88db      	ldrh	r3, [r3, #6]
 8005832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int Rraw = sensors.side_right;
 8005834:	4b84      	ldr	r3, [pc, #528]	@ (8005a48 <wall_compute_u+0x264>)
 8005836:	889b      	ldrh	r3, [r3, #4]
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28

    // pick your distance model: LUT (preferred) or raw log
    float e = 0.0f;
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (Lw && Rw) {
 8005840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d050      	beq.n	80058e8 <wall_compute_u+0x104>
 8005846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005848:	2b00      	cmp	r3, #0
 800584a:	d04d      	beq.n	80058e8 <wall_compute_u+0x104>
        // both walls → center
        const float L = lut_lookup_lin(Lraw, left_adc,  left_dist,  L_LUT_SIZE);
 800584c:	2320      	movs	r3, #32
 800584e:	4a7f      	ldr	r2, [pc, #508]	@ (8005a4c <wall_compute_u+0x268>)
 8005850:	497f      	ldr	r1, [pc, #508]	@ (8005a50 <wall_compute_u+0x26c>)
 8005852:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005854:	f7ff ff3c 	bl	80056d0 <lut_lookup_lin>
 8005858:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        const float R = lut_lookup_lin(Rraw, right_adc, right_dist, R_LUT_SIZE);
 800585c:	2321      	movs	r3, #33	@ 0x21
 800585e:	4a7d      	ldr	r2, [pc, #500]	@ (8005a54 <wall_compute_u+0x270>)
 8005860:	497d      	ldr	r1, [pc, #500]	@ (8005a58 <wall_compute_u+0x274>)
 8005862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005864:	f7ff ff34 	bl	80056d0 <lut_lookup_lin>
 8005868:	ed87 0a08 	vstr	s0, [r7, #32]
        e = WF_BOTH_SCALE * (L - R);  // +e means left closer → slow left / speed right
 800586c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005870:	edd7 7a08 	vldr	s15, [r7, #32]
 8005874:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005878:	4b78      	ldr	r3, [pc, #480]	@ (8005a5c <wall_compute_u+0x278>)
 800587a:	edd3 7a00 	vldr	s15, [r3]
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        // gently align targets for when a wall disappears
        fus_target_left  = (1.0f - WF_SINGLE_ALPHA)*fus_target_left  + WF_SINGLE_ALPHA*L;
 8005886:	4b76      	ldr	r3, [pc, #472]	@ (8005a60 <wall_compute_u+0x27c>)
 8005888:	edd3 7a00 	vldr	s15, [r3]
 800588c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005894:	4b73      	ldr	r3, [pc, #460]	@ (8005a64 <wall_compute_u+0x280>)
 8005896:	edd3 7a00 	vldr	s15, [r3]
 800589a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800589e:	4b70      	ldr	r3, [pc, #448]	@ (8005a60 <wall_compute_u+0x27c>)
 80058a0:	edd3 6a00 	vldr	s13, [r3]
 80058a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80058a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005a64 <wall_compute_u+0x280>)
 80058b2:	edc3 7a00 	vstr	s15, [r3]
        fus_target_right = (1.0f - WF_SINGLE_ALPHA)*fus_target_right + WF_SINGLE_ALPHA*R;
 80058b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005a60 <wall_compute_u+0x27c>)
 80058b8:	edd3 7a00 	vldr	s15, [r3]
 80058bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058c4:	4b68      	ldr	r3, [pc, #416]	@ (8005a68 <wall_compute_u+0x284>)
 80058c6:	edd3 7a00 	vldr	s15, [r3]
 80058ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058ce:	4b64      	ldr	r3, [pc, #400]	@ (8005a60 <wall_compute_u+0x27c>)
 80058d0:	edd3 6a00 	vldr	s13, [r3]
 80058d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80058d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058e0:	4b61      	ldr	r3, [pc, #388]	@ (8005a68 <wall_compute_u+0x284>)
 80058e2:	edc3 7a00 	vstr	s15, [r3]
    if (Lw && Rw) {
 80058e6:	e02c      	b.n	8005942 <wall_compute_u+0x15e>
    } else if (Lw) {
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d011      	beq.n	8005912 <wall_compute_u+0x12e>
        const float L = lut_lookup_lin(Lraw, left_adc, left_dist, L_LUT_SIZE);
 80058ee:	2320      	movs	r3, #32
 80058f0:	4a56      	ldr	r2, [pc, #344]	@ (8005a4c <wall_compute_u+0x268>)
 80058f2:	4957      	ldr	r1, [pc, #348]	@ (8005a50 <wall_compute_u+0x26c>)
 80058f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058f6:	f7ff feeb 	bl	80056d0 <lut_lookup_lin>
 80058fa:	ed87 0a06 	vstr	s0, [r7, #24]
        e = L- target_left;      // hold distance to left
 80058fe:	4b5b      	ldr	r3, [pc, #364]	@ (8005a6c <wall_compute_u+0x288>)
 8005900:	edd3 7a00 	vldr	s15, [r3]
 8005904:	ed97 7a06 	vldr	s14, [r7, #24]
 8005908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800590c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8005910:	e017      	b.n	8005942 <wall_compute_u+0x15e>
    } else if (Rw) {
 8005912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005914:	2b00      	cmp	r3, #0
 8005916:	d011      	beq.n	800593c <wall_compute_u+0x158>
        const float R = lut_lookup_lin(Rraw, right_adc, right_dist, R_LUT_SIZE);
 8005918:	2321      	movs	r3, #33	@ 0x21
 800591a:	4a4e      	ldr	r2, [pc, #312]	@ (8005a54 <wall_compute_u+0x270>)
 800591c:	494e      	ldr	r1, [pc, #312]	@ (8005a58 <wall_compute_u+0x274>)
 800591e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005920:	f7ff fed6 	bl	80056d0 <lut_lookup_lin>
 8005924:	ed87 0a07 	vstr	s0, [r7, #28]
        e = target_right-R;     // hold distance to right
 8005928:	4b51      	ldr	r3, [pc, #324]	@ (8005a70 <wall_compute_u+0x28c>)
 800592a:	ed93 7a00 	vldr	s14, [r3]
 800592e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005936:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800593a:	e002      	b.n	8005942 <wall_compute_u+0x15e>
    } else {
        e = 0.0f; // no walls → let heading handle it
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // PID on e (reuse your wall PID state/gains)
    wf_e_int += e * dt;
 8005942:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005946:	edd7 7a03 	vldr	s15, [r7, #12]
 800594a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800594e:	4b49      	ldr	r3, [pc, #292]	@ (8005a74 <wall_compute_u+0x290>)
 8005950:	edd3 7a00 	vldr	s15, [r3]
 8005954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005958:	4b46      	ldr	r3, [pc, #280]	@ (8005a74 <wall_compute_u+0x290>)
 800595a:	edc3 7a00 	vstr	s15, [r3]
    if (wf_e_int >  WF_INT_LIMIT) wf_e_int =  WF_INT_LIMIT;
 800595e:	4b45      	ldr	r3, [pc, #276]	@ (8005a74 <wall_compute_u+0x290>)
 8005960:	ed93 7a00 	vldr	s14, [r3]
 8005964:	4b44      	ldr	r3, [pc, #272]	@ (8005a78 <wall_compute_u+0x294>)
 8005966:	edd3 7a00 	vldr	s15, [r3]
 800596a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800596e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005972:	dd03      	ble.n	800597c <wall_compute_u+0x198>
 8005974:	4b40      	ldr	r3, [pc, #256]	@ (8005a78 <wall_compute_u+0x294>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a3e      	ldr	r2, [pc, #248]	@ (8005a74 <wall_compute_u+0x290>)
 800597a:	6013      	str	r3, [r2, #0]
    if (wf_e_int < -WF_INT_LIMIT) wf_e_int = -WF_INT_LIMIT;
 800597c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a78 <wall_compute_u+0x294>)
 800597e:	edd3 7a00 	vldr	s15, [r3]
 8005982:	eeb1 7a67 	vneg.f32	s14, s15
 8005986:	4b3b      	ldr	r3, [pc, #236]	@ (8005a74 <wall_compute_u+0x290>)
 8005988:	edd3 7a00 	vldr	s15, [r3]
 800598c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005994:	dd07      	ble.n	80059a6 <wall_compute_u+0x1c2>
 8005996:	4b38      	ldr	r3, [pc, #224]	@ (8005a78 <wall_compute_u+0x294>)
 8005998:	edd3 7a00 	vldr	s15, [r3]
 800599c:	eef1 7a67 	vneg.f32	s15, s15
 80059a0:	4b34      	ldr	r3, [pc, #208]	@ (8005a74 <wall_compute_u+0x290>)
 80059a2:	edc3 7a00 	vstr	s15, [r3]

    const float d_raw = (e - wf_e_prev) / dt;
 80059a6:	4b35      	ldr	r3, [pc, #212]	@ (8005a7c <wall_compute_u+0x298>)
 80059a8:	edd3 7a00 	vldr	s15, [r3]
 80059ac:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80059b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80059b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80059b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059bc:	edc7 7a05 	vstr	s15, [r7, #20]
    wf_d_filt = WF_DERIV_ALPHA*wf_d_filt + (1.0f - WF_DERIV_ALPHA)*d_raw;
 80059c0:	4b2f      	ldr	r3, [pc, #188]	@ (8005a80 <wall_compute_u+0x29c>)
 80059c2:	ed93 7a00 	vldr	s14, [r3]
 80059c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a84 <wall_compute_u+0x2a0>)
 80059c8:	edd3 7a00 	vldr	s15, [r3]
 80059cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005a80 <wall_compute_u+0x29c>)
 80059d2:	edd3 7a00 	vldr	s15, [r3]
 80059d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80059de:	edd7 7a05 	vldr	s15, [r7, #20]
 80059e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ea:	4b26      	ldr	r3, [pc, #152]	@ (8005a84 <wall_compute_u+0x2a0>)
 80059ec:	edc3 7a00 	vstr	s15, [r3]
    wf_e_prev = e;
 80059f0:	4a22      	ldr	r2, [pc, #136]	@ (8005a7c <wall_compute_u+0x298>)
 80059f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f4:	6013      	str	r3, [r2, #0]

    const float u_norm = WF_KP*e + WF_KI*wf_e_int + WF_KD*wf_d_filt;
 80059f6:	4b24      	ldr	r3, [pc, #144]	@ (8005a88 <wall_compute_u+0x2a4>)
 80059f8:	ed93 7a00 	vldr	s14, [r3]
 80059fc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a04:	4b21      	ldr	r3, [pc, #132]	@ (8005a8c <wall_compute_u+0x2a8>)
 8005a06:	edd3 6a00 	vldr	s13, [r3]
 8005a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005a74 <wall_compute_u+0x290>)
 8005a0c:	edd3 7a00 	vldr	s15, [r3]
 8005a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a18:	4b1d      	ldr	r3, [pc, #116]	@ (8005a90 <wall_compute_u+0x2ac>)
 8005a1a:	edd3 6a00 	vldr	s13, [r3]
 8005a1e:	4b19      	ldr	r3, [pc, #100]	@ (8005a84 <wall_compute_u+0x2a0>)
 8005a20:	edd3 7a00 	vldr	s15, [r3]
 8005a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a2c:	edc7 7a04 	vstr	s15, [r7, #16]
    return (WF_U_SCALE * u_norm);   // map to PWM units like your wall_follow_step()
 8005a30:	4b18      	ldr	r3, [pc, #96]	@ (8005a94 <wall_compute_u+0x2b0>)
 8005a32:	ed93 7a00 	vldr	s14, [r3]
 8005a36:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8005a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a42:	3740      	adds	r7, #64	@ 0x40
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000d7c 	.word	0x20000d7c
 8005a4c:	0800f724 	.word	0x0800f724
 8005a50:	0800f6a4 	.word	0x0800f6a4
 8005a54:	0800f620 	.word	0x0800f620
 8005a58:	0800f59c 	.word	0x0800f59c
 8005a5c:	2000004c 	.word	0x2000004c
 8005a60:	20000048 	.word	0x20000048
 8005a64:	2000005c 	.word	0x2000005c
 8005a68:	20000060 	.word	0x20000060
 8005a6c:	20000054 	.word	0x20000054
 8005a70:	20000058 	.word	0x20000058
 8005a74:	20001338 	.word	0x20001338
 8005a78:	20000044 	.word	0x20000044
 8005a7c:	2000133c 	.word	0x2000133c
 8005a80:	20000040 	.word	0x20000040
 8005a84:	20001340 	.word	0x20001340
 8005a88:	2000003c 	.word	0x2000003c
 8005a8c:	20001318 	.word	0x20001318
 8005a90:	2000131c 	.word	0x2000131c
 8005a94:	20000050 	.word	0x20000050

08005a98 <fusion_reset>:

// ---------- Public API ----------
void fusion_reset(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
    // reset wall PID memory
    wf_e_int = 0.0f; wf_e_prev = 0.0f; wf_d_filt = 0.0f;
 8005a9c:	4b21      	ldr	r3, [pc, #132]	@ (8005b24 <fusion_reset+0x8c>)
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	4b20      	ldr	r3, [pc, #128]	@ (8005b28 <fusion_reset+0x90>)
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	4b1f      	ldr	r3, [pc, #124]	@ (8005b2c <fusion_reset+0x94>)
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
    wf_last_ms_fus = HAL_GetTick();
 8005ab4:	f000 fcec 	bl	8006490 <HAL_GetTick>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	4a1d      	ldr	r2, [pc, #116]	@ (8005b30 <fusion_reset+0x98>)
 8005abc:	6013      	str	r3, [r2, #0]

    // heading & blending
    fus_theta = 0.0f;
 8005abe:	4b1d      	ldr	r3, [pc, #116]	@ (8005b34 <fusion_reset+0x9c>)
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
    fus_theta_ref = 0.0f;
 8005ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b38 <fusion_reset+0xa0>)
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
    fus_conf_s = 0.0f;
 8005ace:	4b1b      	ldr	r3, [pc, #108]	@ (8005b3c <fusion_reset+0xa4>)
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
    fus_u_prev = 0.0f;
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <fusion_reset+0xa8>)
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
    fus_last_ms = HAL_GetTick();
 8005ade:	f000 fcd7 	bl	8006490 <HAL_GetTick>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4a17      	ldr	r2, [pc, #92]	@ (8005b44 <fusion_reset+0xac>)
 8005ae6:	6013      	str	r3, [r2, #0]

    // init targets from current reading to avoid jumps
    update_sensors();
 8005ae8:	f7fe fdba 	bl	8004660 <update_sensors>
    fus_target_left  = lut_lookup_lin(sensors.side_left,  left_adc,  left_dist,  L_LUT_SIZE);
 8005aec:	4b16      	ldr	r3, [pc, #88]	@ (8005b48 <fusion_reset+0xb0>)
 8005aee:	88db      	ldrh	r3, [r3, #6]
 8005af0:	4618      	mov	r0, r3
 8005af2:	2320      	movs	r3, #32
 8005af4:	4a15      	ldr	r2, [pc, #84]	@ (8005b4c <fusion_reset+0xb4>)
 8005af6:	4916      	ldr	r1, [pc, #88]	@ (8005b50 <fusion_reset+0xb8>)
 8005af8:	f7ff fdea 	bl	80056d0 <lut_lookup_lin>
 8005afc:	eef0 7a40 	vmov.f32	s15, s0
 8005b00:	4b14      	ldr	r3, [pc, #80]	@ (8005b54 <fusion_reset+0xbc>)
 8005b02:	edc3 7a00 	vstr	s15, [r3]
    fus_target_right = lut_lookup_lin(sensors.side_right, right_adc, right_dist, R_LUT_SIZE);
 8005b06:	4b10      	ldr	r3, [pc, #64]	@ (8005b48 <fusion_reset+0xb0>)
 8005b08:	889b      	ldrh	r3, [r3, #4]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	2321      	movs	r3, #33	@ 0x21
 8005b0e:	4a12      	ldr	r2, [pc, #72]	@ (8005b58 <fusion_reset+0xc0>)
 8005b10:	4912      	ldr	r1, [pc, #72]	@ (8005b5c <fusion_reset+0xc4>)
 8005b12:	f7ff fddd 	bl	80056d0 <lut_lookup_lin>
 8005b16:	eef0 7a40 	vmov.f32	s15, s0
 8005b1a:	4b11      	ldr	r3, [pc, #68]	@ (8005b60 <fusion_reset+0xc8>)
 8005b1c:	edc3 7a00 	vstr	s15, [r3]
}
 8005b20:	bf00      	nop
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20001338 	.word	0x20001338
 8005b28:	2000133c 	.word	0x2000133c
 8005b2c:	20001340 	.word	0x20001340
 8005b30:	20001344 	.word	0x20001344
 8005b34:	20001348 	.word	0x20001348
 8005b38:	2000134c 	.word	0x2000134c
 8005b3c:	20001350 	.word	0x20001350
 8005b40:	20001354 	.word	0x20001354
 8005b44:	20001358 	.word	0x20001358
 8005b48:	20000d7c 	.word	0x20000d7c
 8005b4c:	0800f724 	.word	0x0800f724
 8005b50:	0800f6a4 	.word	0x0800f6a4
 8005b54:	2000005c 	.word	0x2000005c
 8005b58:	0800f620 	.word	0x0800f620
 8005b5c:	0800f59c 	.word	0x0800f59c
 8005b60:	20000060 	.word	0x20000060

08005b64 <fusion_set_heading_ref_to_current>:

void fusion_set_heading_ref_to_current(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
    // capture current integrated heading as the straight-line lock
    fus_theta_ref = fus_theta;
 8005b68:	4b04      	ldr	r3, [pc, #16]	@ (8005b7c <fusion_set_heading_ref_to_current+0x18>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a04      	ldr	r2, [pc, #16]	@ (8005b80 <fusion_set_heading_ref_to_current+0x1c>)
 8005b6e:	6013      	str	r3, [r2, #0]
}
 8005b70:	bf00      	nop
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20001348 	.word	0x20001348
 8005b80:	2000134c 	.word	0x2000134c

08005b84 <fusion_step>:

// Call at ~200–500 Hz. Pass 0 to use WF_BASE_PWM.
void fusion_step(int base_pwm)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b096      	sub	sp, #88	@ 0x58
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
    // timing
    uint32_t now = HAL_GetTick();
 8005b8c:	f000 fc80 	bl	8006490 <HAL_GetTick>
 8005b90:	63b8      	str	r0, [r7, #56]	@ 0x38
    float dt = (now - fus_last_ms) * 0.001f;
 8005b92:	4bbb      	ldr	r3, [pc, #748]	@ (8005e80 <fusion_step+0x2fc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8005e84 <fusion_step+0x300>
 8005ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005baa:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    if (dt <= 0.0f) dt = 0.001f;
 8005bae:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bba:	d801      	bhi.n	8005bc0 <fusion_step+0x3c>
 8005bbc:	4bb2      	ldr	r3, [pc, #712]	@ (8005e88 <fusion_step+0x304>)
 8005bbe:	657b      	str	r3, [r7, #84]	@ 0x54
    fus_last_ms = now;
 8005bc0:	4aaf      	ldr	r2, [pc, #700]	@ (8005e80 <fusion_step+0x2fc>)
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	6013      	str	r3, [r2, #0]

    // gyro
    mpu9250_read_gyro();
 8005bc6:	f7fb fe03 	bl	80017d0 <mpu9250_read_gyro>
    const float gz = mpu9250_get_gyro_z_compensated(); // deg/s
 8005bca:	f7fb fdc7 	bl	800175c <mpu9250_get_gyro_z_compensated>
 8005bce:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    fus_theta += gz * dt;
 8005bd2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8005bd6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bde:	4bab      	ldr	r3, [pc, #684]	@ (8005e8c <fusion_step+0x308>)
 8005be0:	edd3 7a00 	vldr	s15, [r3]
 8005be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be8:	4ba8      	ldr	r3, [pc, #672]	@ (8005e8c <fusion_step+0x308>)
 8005bea:	edc3 7a00 	vstr	s15, [r3]

    // wall correction
    int hasL=0, hasR=0, hasF=0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
    float u_wall = wall_compute_u(dt, &hasL, &hasR, &hasF);
 8005bfa:	f107 020c 	add.w	r2, r7, #12
 8005bfe:	f107 0110 	add.w	r1, r7, #16
 8005c02:	f107 0314 	add.w	r3, r7, #20
 8005c06:	4618      	mov	r0, r3
 8005c08:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8005c0c:	f7ff fdea 	bl	80057e4 <wall_compute_u>
 8005c10:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

    // heading assist using your rate PID: command 0 deg/s + proportional bias from heading error
    // Map heading error → desired rate (light touch so it won’t fight walls)
    const float e_head = fus_theta_ref - fus_theta;              // deg
 8005c14:	4b9e      	ldr	r3, [pc, #632]	@ (8005e90 <fusion_step+0x30c>)
 8005c16:	ed93 7a00 	vldr	s14, [r3]
 8005c1a:	4b9c      	ldr	r3, [pc, #624]	@ (8005e8c <fusion_step+0x308>)
 8005c1c:	edd3 7a00 	vldr	s15, [r3]
 8005c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c24:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    const float k_head2rate = 60.0f;                             // deg/s per deg (small)
 8005c28:	4b9a      	ldr	r3, [pc, #616]	@ (8005e94 <fusion_step+0x310>)
 8005c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float sp_rate = k_head2rate * e_head;                        // desired deg/s
 8005c2c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005c30:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c38:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    // soft cap desired rate
    if (sp_rate >  300.0f) sp_rate =  300.0f;
 8005c3c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8005c40:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8005e98 <fusion_step+0x314>
 8005c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4c:	dd01      	ble.n	8005c52 <fusion_step+0xce>
 8005c4e:	4b93      	ldr	r3, [pc, #588]	@ (8005e9c <fusion_step+0x318>)
 8005c50:	653b      	str	r3, [r7, #80]	@ 0x50
    if (sp_rate < -300.0f) sp_rate = -300.0f;
 8005c52:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8005c56:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8005ea0 <fusion_step+0x31c>
 8005c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c62:	d501      	bpl.n	8005c68 <fusion_step+0xe4>
 8005c64:	4b8f      	ldr	r3, [pc, #572]	@ (8005ea4 <fusion_step+0x320>)
 8005c66:	653b      	str	r3, [r7, #80]	@ 0x50

    float dummy_dt = dt;
 8005c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c6a:	60bb      	str	r3, [r7, #8]
    float u_head = gyro_rate_pid_step(sp_rate, gz, &dummy_dt);  // returns ΔPWM using your tuned K’s
 8005c6c:	f107 0308 	add.w	r3, r7, #8
 8005c70:	4618      	mov	r0, r3
 8005c72:	edd7 0a0d 	vldr	s1, [r7, #52]	@ 0x34
 8005c76:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8005c7a:	f7fe fa3f 	bl	80040fc <gyro_rate_pid_step>
 8005c7e:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c

    // blend by wall confidence (0.5 for each side seen)
    float conf = 0.0f; if (hasL) conf += 0.20f; if (hasR) conf += 0.20f; ////////////////////////
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <fusion_step+0x11a>
 8005c8e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005c92:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8005ea8 <fusion_step+0x324>
 8005c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c9a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <fusion_step+0x130>
 8005ca4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005ca8:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8005ea8 <fusion_step+0x324>
 8005cac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cb0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    fus_conf_s = FUS_CONF_EMA*fus_conf_s + (1.0f - FUS_CONF_EMA)*conf;
 8005cb4:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8005eac <fusion_step+0x328>
 8005cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8005eb0 <fusion_step+0x32c>)
 8005cba:	edd3 7a00 	vldr	s15, [r3]
 8005cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cc2:	eddf 7a7a 	vldr	s15, [pc, #488]	@ 8005eac <fusion_step+0x328>
 8005cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005cce:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cda:	4b75      	ldr	r3, [pc, #468]	@ (8005eb0 <fusion_step+0x32c>)
 8005cdc:	edc3 7a00 	vstr	s15, [r3]

    // cap heading authority to a fraction of base
    const int base_unclamped = (base_pwm > 0) ? base_pwm : WF_BASE_PWM;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dd01      	ble.n	8005cea <fusion_step+0x166>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	e001      	b.n	8005cee <fusion_step+0x16a>
 8005cea:	4b72      	ldr	r3, [pc, #456]	@ (8005eb4 <fusion_step+0x330>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
    //float u_head_capped = u_head;
    float head_cap = FUS_HEAD_CAP_FRAC * (float)base_unclamped;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cfa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d02:	edc7 7a08 	vstr	s15, [r7, #32]
    if (u_head >  head_cap) u_head =  head_cap;
 8005d06:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005d0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d16:	dd01      	ble.n	8005d1c <fusion_step+0x198>
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (u_head < -head_cap) u_head = -head_cap;
 8005d1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d20:	eef1 7a67 	vneg.f32	s15, s15
 8005d24:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005d28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d30:	d505      	bpl.n	8005d3e <fusion_step+0x1ba>
 8005d32:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d36:	eef1 7a67 	vneg.f32	s15, s15
 8005d3a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
//    float wall_cap = FUS_WALL_CAP_FRAC * base_unclamped;
//    if (u_wall >  wall_cap) u_wall =  wall_cap;
//    if (u_wall < -wall_cap) u_wall = -wall_cap;

    // final correction
    float u = fus_conf_s * u_wall + (1.0f - fus_conf_s) * u_head;
 8005d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8005eb0 <fusion_step+0x32c>)
 8005d40:	ed93 7a00 	vldr	s14, [r3]
 8005d44:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d4c:	4b58      	ldr	r3, [pc, #352]	@ (8005eb0 <fusion_step+0x32c>)
 8005d4e:	edd3 7a00 	vldr	s15, [r3]
 8005d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d56:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d5a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8005d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d66:	edc7 7a07 	vstr	s15, [r7, #28]

    // optional rate limiting on correction to avoid jerk
    float du = u - fus_u_prev;
 8005d6a:	4b53      	ldr	r3, [pc, #332]	@ (8005eb8 <fusion_step+0x334>)
 8005d6c:	edd3 7a00 	vldr	s15, [r3]
 8005d70:	ed97 7a07 	vldr	s14, [r7, #28]
 8005d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d78:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    if (du >  FUS_DU_RATE_LIMIT) du =  FUS_DU_RATE_LIMIT;
 8005d7c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005ebc <fusion_step+0x338>
 8005d80:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8c:	dd01      	ble.n	8005d92 <fusion_step+0x20e>
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8005ec0 <fusion_step+0x33c>)
 8005d90:	647b      	str	r3, [r7, #68]	@ 0x44
    if (du < -FUS_DU_RATE_LIMIT) du = -FUS_DU_RATE_LIMIT;
 8005d92:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8005ebc <fusion_step+0x338>
 8005d96:	eef1 7a67 	vneg.f32	s15, s15
 8005d9a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8005d9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da6:	d505      	bpl.n	8005db4 <fusion_step+0x230>
 8005da8:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8005ebc <fusion_step+0x338>
 8005dac:	eef1 7a67 	vneg.f32	s15, s15
 8005db0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    u = fus_u_prev + du;
 8005db4:	4b40      	ldr	r3, [pc, #256]	@ (8005eb8 <fusion_step+0x334>)
 8005db6:	edd3 7a00 	vldr	s15, [r3]
 8005dba:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8005dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dc2:	edc7 7a07 	vstr	s15, [r7, #28]
    fus_u_prev = u;
 8005dc6:	4a3c      	ldr	r2, [pc, #240]	@ (8005eb8 <fusion_step+0x334>)
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	6013      	str	r3, [r2, #0]

    // front-wall policy same as your wall code
    int base = (base_pwm > 0) ? base_pwm : WF_BASE_PWM;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	dd01      	ble.n	8005dd6 <fusion_step+0x252>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	e001      	b.n	8005dda <fusion_step+0x256>
 8005dd6:	4b37      	ldr	r3, [pc, #220]	@ (8005eb4 <fusion_step+0x330>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	61bb      	str	r3, [r7, #24]
//    if (hasF && WF_BRAKE_ON_FRONT) base = WF_SLOW_PWM;

    // right = base + u ; left = base - u   (same sign convention as your code)
    int pwm_right = base + (int)lroundf(u);
 8005ddc:	ed97 0a07 	vldr	s0, [r7, #28]
 8005de0:	f007 fd5e 	bl	800d8a0 <lroundf>
 8005de4:	4602      	mov	r2, r0
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	4413      	add	r3, r2
 8005dea:	643b      	str	r3, [r7, #64]	@ 0x40
    int pwm_left  = base - (int)lroundf(u);
 8005dec:	ed97 0a07 	vldr	s0, [r7, #28]
 8005df0:	f007 fd56 	bl	800d8a0 <lroundf>
 8005df4:	4602      	mov	r2, r0
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (pwm_right < 0) pwm_right = 0; if (pwm_right > WF_PWM_MAX) pwm_right = WF_PWM_MAX;
 8005dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	da01      	bge.n	8005e06 <fusion_step+0x282>
 8005e02:	2300      	movs	r3, #0
 8005e04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e06:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec4 <fusion_step+0x340>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	dd02      	ble.n	8005e16 <fusion_step+0x292>
 8005e10:	4b2c      	ldr	r3, [pc, #176]	@ (8005ec4 <fusion_step+0x340>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	643b      	str	r3, [r7, #64]	@ 0x40
    if (pwm_left  < 0) pwm_left  = 0; if (pwm_left  > WF_PWM_MAX) pwm_left  = WF_PWM_MAX;
 8005e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da01      	bge.n	8005e20 <fusion_step+0x29c>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e20:	4b28      	ldr	r3, [pc, #160]	@ (8005ec4 <fusion_step+0x340>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e26:	429a      	cmp	r2, r3
 8005e28:	dd02      	ble.n	8005e30 <fusion_step+0x2ac>
 8005e2a:	4b26      	ldr	r3, [pc, #152]	@ (8005ec4 <fusion_step+0x340>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (pwm_right > 0 && pwm_right < WF_PWM_MIN_MOVE) pwm_right = WF_PWM_MIN_MOVE;
 8005e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dd07      	ble.n	8005e46 <fusion_step+0x2c2>
 8005e36:	4b24      	ldr	r3, [pc, #144]	@ (8005ec8 <fusion_step+0x344>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	da02      	bge.n	8005e46 <fusion_step+0x2c2>
 8005e40:	4b21      	ldr	r3, [pc, #132]	@ (8005ec8 <fusion_step+0x344>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	643b      	str	r3, [r7, #64]	@ 0x40
    if (pwm_left  > 0 && pwm_left  < WF_PWM_MIN_MOVE) pwm_left  = WF_PWM_MIN_MOVE;
 8005e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	dd07      	ble.n	8005e5c <fusion_step+0x2d8>
 8005e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec8 <fusion_step+0x344>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e52:	429a      	cmp	r2, r3
 8005e54:	da02      	bge.n	8005e5c <fusion_step+0x2d8>
 8005e56:	4b1c      	ldr	r3, [pc, #112]	@ (8005ec8 <fusion_step+0x344>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    motor_set(0, true, (uint16_t)pwm_left);
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	2101      	movs	r1, #1
 8005e64:	2000      	movs	r0, #0
 8005e66:	f7fd ff67 	bl	8003d38 <motor_set>
    motor_set(1, true, (uint16_t)pwm_right);
 8005e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2101      	movs	r1, #1
 8005e72:	2001      	movs	r0, #1
 8005e74:	f7fd ff60 	bl	8003d38 <motor_set>
}
 8005e78:	bf00      	nop
 8005e7a:	3758      	adds	r7, #88	@ 0x58
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20001358 	.word	0x20001358
 8005e84:	3a83126f 	.word	0x3a83126f
 8005e88:	3a83126f 	.word	0x3a83126f
 8005e8c:	20001348 	.word	0x20001348
 8005e90:	2000134c 	.word	0x2000134c
 8005e94:	42700000 	.word	0x42700000
 8005e98:	43960000 	.word	0x43960000
 8005e9c:	43960000 	.word	0x43960000
 8005ea0:	c3960000 	.word	0xc3960000
 8005ea4:	c3960000 	.word	0xc3960000
 8005ea8:	3e4ccccd 	.word	0x3e4ccccd
 8005eac:	3f7851ec 	.word	0x3f7851ec
 8005eb0:	20001350 	.word	0x20001350
 8005eb4:	20000030 	.word	0x20000030
 8005eb8:	20001354 	.word	0x20001354
 8005ebc:	42f00000 	.word	0x42f00000
 8005ec0:	42f00000 	.word	0x42f00000
 8005ec4:	20000038 	.word	0x20000038
 8005ec8:	20000034 	.word	0x20000034

08005ecc <lut_lookup_lin_local>:

static float fus_theta_local = 0.0f;

static float lut_lookup_lin_local(int raw, const int *adc_table, const float *dist_table, int size)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
    if (!adc_table || !dist_table || size <= 1) return (float)raw;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <lut_lookup_lin_local+0x20>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <lut_lookup_lin_local+0x20>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	dc05      	bgt.n	8005ef8 <lut_lookup_lin_local+0x2c>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ef6:	e07f      	b.n	8005ff8 <lut_lookup_lin_local+0x12c>
    if (raw >= adc_table[0])      return dist_table[0];
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	db03      	blt.n	8005f0a <lut_lookup_lin_local+0x3e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	edd3 7a00 	vldr	s15, [r3]
 8005f08:	e076      	b.n	8005ff8 <lut_lookup_lin_local+0x12c>
    if (raw <= adc_table[size-1]) return dist_table[size-1];
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f10:	3b01      	subs	r3, #1
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	4413      	add	r3, r2
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	dc09      	bgt.n	8005f34 <lut_lookup_lin_local+0x68>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f26:	3b01      	subs	r3, #1
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	edd3 7a00 	vldr	s15, [r3]
 8005f32:	e061      	b.n	8005ff8 <lut_lookup_lin_local+0x12c>
    for (int i = 0; i < size-1; i++) {
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e050      	b.n	8005fdc <lut_lookup_lin_local+0x110>
        if (raw <= adc_table[i] && raw >= adc_table[i+1]) {
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	4413      	add	r3, r2
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	dc45      	bgt.n	8005fd6 <lut_lookup_lin_local+0x10a>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	4413      	add	r3, r2
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	db3c      	blt.n	8005fd6 <lut_lookup_lin_local+0x10a>
            float t = (float)(raw - adc_table[i+1]) / (float)(adc_table[i] - adc_table[i+1]);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	4413      	add	r3, r2
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	3301      	adds	r3, #1
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	440b      	add	r3, r1
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f98:	edc7 7a04 	vstr	s15, [r7, #16]
            return dist_table[i+1] + t * (dist_table[i] - dist_table[i+1]);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	ed93 7a00 	vldr	s14, [r3]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	edd3 6a00 	vldr	s13, [r3]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	edd3 7a00 	vldr	s15, [r3]
 8005fc4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005fc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fd4:	e010      	b.n	8005ff8 <lut_lookup_lin_local+0x12c>
    for (int i = 0; i < size-1; i++) {
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	dba9      	blt.n	8005f3a <lut_lookup_lin_local+0x6e>
        }
    }
    return dist_table[size-1];
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fec:	3b01      	subs	r3, #1
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	edd3 7a00 	vldr	s15, [r3]
}
 8005ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <fusion_align_entry>:

bool fusion_align_entry(int base_pwm, uint32_t timeout_ms)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b09c      	sub	sp, #112	@ 0x70
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
    update_sensors();
 8006012:	f7fe fb25 	bl	8004660 <update_sensors>
//        return ok;
//    }

    // --- Case B: side-based yaw snap ---
    // Tunables (start here; adjust in-field if needed)
    const float DIFF_TOL_CM  = 0.15f;   // both walls: stop when |L-R| < 0.15 cm
 8006016:	4bb9      	ldr	r3, [pc, #740]	@ (80062fc <fusion_align_entry+0x2f4>)
 8006018:	653b      	str	r3, [r7, #80]	@ 0x50
    const float DIST_TOL_CM  = 0.20f;   // single wall: stop when |target - side| < 0.20 cm
 800601a:	4bb9      	ldr	r3, [pc, #740]	@ (8006300 <fusion_align_entry+0x2f8>)
 800601c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const float K_DIFF2RATE  = 220.0f;  // deg/s per cm for (R-L)
 800601e:	4bb9      	ldr	r3, [pc, #740]	@ (8006304 <fusion_align_entry+0x2fc>)
 8006020:	64bb      	str	r3, [r7, #72]	@ 0x48
    const float K_DIST2RATE  = 180.0f;  // deg/s per cm for single-wall distance error
 8006022:	4bb9      	ldr	r3, [pc, #740]	@ (8006308 <fusion_align_entry+0x300>)
 8006024:	647b      	str	r3, [r7, #68]	@ 0x44
    const float OMEGA_MAX    = 360.0f;  // cap |desired yaw rate| in deg/s
 8006026:	4bb9      	ldr	r3, [pc, #740]	@ (800630c <fusion_align_entry+0x304>)
 8006028:	643b      	str	r3, [r7, #64]	@ 0x40
    const int   BASE_ALIGN   = (base_pwm > 0) ? base_pwm : WF_BASE_PWM;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	dd01      	ble.n	8006034 <fusion_align_entry+0x2c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	e001      	b.n	8006038 <fusion_align_entry+0x30>
 8006034:	4bb6      	ldr	r3, [pc, #728]	@ (8006310 <fusion_align_entry+0x308>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const int   base_align_fwd = (BASE_ALIGN * 55) / 100; // less forward travel
 800603a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800603c:	4613      	mov	r3, r2
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	4ab3      	ldr	r2, [pc, #716]	@ (8006314 <fusion_align_entry+0x30c>)
 8006048:	fb82 1203 	smull	r1, r2, r2, r3
 800604c:	1152      	asrs	r2, r2, #5
 800604e:	17db      	asrs	r3, r3, #31
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	63bb      	str	r3, [r7, #56]	@ 0x38
    const uint32_t DWELL_OK_MS = 80;
 8006054:	2350      	movs	r3, #80	@ 0x50
 8006056:	637b      	str	r3, [r7, #52]	@ 0x34

    fus_theta_local = 0.0f;
 8006058:	4baf      	ldr	r3, [pc, #700]	@ (8006318 <fusion_align_entry+0x310>)
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	601a      	str	r2, [r3, #0]
    uint32_t t0 = HAL_GetTick();
 8006060:	f000 fa16 	bl	8006490 <HAL_GetTick>
 8006064:	6338      	str	r0, [r7, #48]	@ 0x30
    uint32_t last_ok = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t last = t0;
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	66bb      	str	r3, [r7, #104]	@ 0x68

    while ((HAL_GetTick() - t0) < timeout_ms) {
 800606e:	e16d      	b.n	800634c <fusion_align_entry+0x344>
        uint32_t now = HAL_GetTick();
 8006070:	f000 fa0e 	bl	8006490 <HAL_GetTick>
 8006074:	62f8      	str	r0, [r7, #44]	@ 0x2c
        float dt = (now - last) * 0.001f; if (dt <= 0.0f) dt = 0.001f;
 8006076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	ee07 3a90 	vmov	s15, r3
 8006080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006084:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800631c <fusion_align_entry+0x314>
 8006088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800608c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8006090:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609c:	d801      	bhi.n	80060a2 <fusion_align_entry+0x9a>
 800609e:	4ba0      	ldr	r3, [pc, #640]	@ (8006320 <fusion_align_entry+0x318>)
 80060a0:	667b      	str	r3, [r7, #100]	@ 0x64
        last = now;
 80060a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a4:	66bb      	str	r3, [r7, #104]	@ 0x68

        update_sensors();
 80060a6:	f7fe fadb 	bl	8004660 <update_sensors>
        const bool Lw = sensors.wall_left;
 80060aa:	4b9e      	ldr	r3, [pc, #632]	@ (8006324 <fusion_align_entry+0x31c>)
 80060ac:	7adb      	ldrb	r3, [r3, #11]
 80060ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        const bool Rw = sensors.wall_right;
 80060b2:	4b9c      	ldr	r3, [pc, #624]	@ (8006324 <fusion_align_entry+0x31c>)
 80060b4:	7b1b      	ldrb	r3, [r3, #12]
 80060b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        float Lcm = lut_lookup_lin_local(sensors.side_left,  left_adc,  left_dist,  L_LUT_SIZE);
 80060ba:	4b9a      	ldr	r3, [pc, #616]	@ (8006324 <fusion_align_entry+0x31c>)
 80060bc:	88db      	ldrh	r3, [r3, #6]
 80060be:	4618      	mov	r0, r3
 80060c0:	2320      	movs	r3, #32
 80060c2:	4a99      	ldr	r2, [pc, #612]	@ (8006328 <fusion_align_entry+0x320>)
 80060c4:	4999      	ldr	r1, [pc, #612]	@ (800632c <fusion_align_entry+0x324>)
 80060c6:	f7ff ff01 	bl	8005ecc <lut_lookup_lin_local>
 80060ca:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        float Rcm = lut_lookup_lin_local(sensors.side_right, right_adc, right_dist, R_LUT_SIZE);
 80060ce:	4b95      	ldr	r3, [pc, #596]	@ (8006324 <fusion_align_entry+0x31c>)
 80060d0:	889b      	ldrh	r3, [r3, #4]
 80060d2:	4618      	mov	r0, r3
 80060d4:	2321      	movs	r3, #33	@ 0x21
 80060d6:	4a96      	ldr	r2, [pc, #600]	@ (8006330 <fusion_align_entry+0x328>)
 80060d8:	4996      	ldr	r1, [pc, #600]	@ (8006334 <fusion_align_entry+0x32c>)
 80060da:	f7ff fef7 	bl	8005ecc <lut_lookup_lin_local>
 80060de:	ed87 0a08 	vstr	s0, [r7, #32]

        // gyro integration
        mpu9250_read_gyro();
 80060e2:	f7fb fb75 	bl	80017d0 <mpu9250_read_gyro>
        float gz = mpu9250_get_gyro_z_compensated(); // deg/s
 80060e6:	f7fb fb39 	bl	800175c <mpu9250_get_gyro_z_compensated>
 80060ea:	ed87 0a07 	vstr	s0, [r7, #28]
        fus_theta_local += gz * dt;
 80060ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80060f2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80060f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060fa:	4b87      	ldr	r3, [pc, #540]	@ (8006318 <fusion_align_entry+0x310>)
 80060fc:	edd3 7a00 	vldr	s15, [r3]
 8006100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006104:	4b84      	ldr	r3, [pc, #528]	@ (8006318 <fusion_align_entry+0x310>)
 8006106:	edc3 7a00 	vstr	s15, [r3]

        // decide desired yaw rate
        float sp_rate = 0.0f;
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	663b      	str	r3, [r7, #96]	@ 0x60
        bool done = false;
 8006110:	2300      	movs	r3, #0
 8006112:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

        if (Lw && Rw) {
 8006116:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800611a:	2b00      	cmp	r3, #0
 800611c:	d023      	beq.n	8006166 <fusion_align_entry+0x15e>
 800611e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01f      	beq.n	8006166 <fusion_align_entry+0x15e>
            float e_diff = (Rcm - Lcm); // + if right is farther → turn right
 8006126:	ed97 7a08 	vldr	s14, [r7, #32]
 800612a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800612e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006132:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabsf(e_diff) < DIFF_TOL_CM) {
 8006136:	edd7 7a06 	vldr	s15, [r7, #24]
 800613a:	eef0 7ae7 	vabs.f32	s15, s15
 800613e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8006142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614a:	dd03      	ble.n	8006154 <fusion_align_entry+0x14c>
                done = true;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        if (Lw && Rw) {
 8006152:	e052      	b.n	80061fa <fusion_align_entry+0x1f2>
            } else {
                sp_rate = K_DIFF2RATE * e_diff;
 8006154:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8006158:	edd7 7a06 	vldr	s15, [r7, #24]
 800615c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006160:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        if (Lw && Rw) {
 8006164:	e049      	b.n	80061fa <fusion_align_entry+0x1f2>
            }
        } else if (Lw) {
 8006166:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <fusion_align_entry+0x1a8>
            float eL = (target_left-Lcm);  // + if too near left wall
 800616e:	4b72      	ldr	r3, [pc, #456]	@ (8006338 <fusion_align_entry+0x330>)
 8006170:	ed93 7a00 	vldr	s14, [r3]
 8006174:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800617c:	edc7 7a04 	vstr	s15, [r7, #16]
            if (fabsf(eL) < DIST_TOL_CM) {
 8006180:	edd7 7a04 	vldr	s15, [r7, #16]
 8006184:	eef0 7ae7 	vabs.f32	s15, s15
 8006188:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800618c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006194:	dd03      	ble.n	800619e <fusion_align_entry+0x196>
                done = true;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800619c:	e02d      	b.n	80061fa <fusion_align_entry+0x1f2>
            } else {
                sp_rate = K_DIST2RATE * eL;
 800619e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80061a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80061a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061aa:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 80061ae:	e024      	b.n	80061fa <fusion_align_entry+0x1f2>
            }
        } else if (Rw) {
 80061b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80d3 	beq.w	8006360 <fusion_align_entry+0x358>
            float eR = (target_right-Rcm); // + if too far from right wall
 80061ba:	4b60      	ldr	r3, [pc, #384]	@ (800633c <fusion_align_entry+0x334>)
 80061bc:	ed93 7a00 	vldr	s14, [r3]
 80061c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80061c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061c8:	edc7 7a05 	vstr	s15, [r7, #20]
            if (fabsf(eR) < DIST_TOL_CM) {
 80061cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80061d0:	eef0 7ae7 	vabs.f32	s15, s15
 80061d4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80061d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e0:	dd03      	ble.n	80061ea <fusion_align_entry+0x1e2>
                done = true;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80061e8:	e007      	b.n	80061fa <fusion_align_entry+0x1f2>
            } else {
                sp_rate = K_DIST2RATE * eR;
 80061ea:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80061ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80061f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f6:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
            // no side info → nothing to align with
            break;
        }

        // cap rate
        if (sp_rate >  OMEGA_MAX) sp_rate =  OMEGA_MAX;
 80061fa:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80061fe:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620a:	dd01      	ble.n	8006210 <fusion_align_entry+0x208>
 800620c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800620e:	663b      	str	r3, [r7, #96]	@ 0x60
        if (sp_rate < -OMEGA_MAX) sp_rate = -OMEGA_MAX;
 8006210:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006214:	eef1 7a67 	vneg.f32	s15, s15
 8006218:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800621c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006224:	d505      	bpl.n	8006232 <fusion_align_entry+0x22a>
 8006226:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800622a:	eef1 7a67 	vneg.f32	s15, s15
 800622e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

        // run your calibrated rate PID (returns PWM-like correction)
        float dummy_dt = dt;
 8006232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006234:	60bb      	str	r3, [r7, #8]
        float u = gyro_rate_pid_step(sp_rate, gz, &dummy_dt);
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	4618      	mov	r0, r3
 800623c:	edd7 0a07 	vldr	s1, [r7, #28]
 8006240:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8006244:	f7fd ff5a 	bl	80040fc <gyro_rate_pid_step>
 8006248:	ed87 0a03 	vstr	s0, [r7, #12]

        // motor mix with low forward to keep distance short
        int pwm_r = base_align_fwd + (int)lroundf(u);
 800624c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006250:	f007 fb26 	bl	800d8a0 <lroundf>
 8006254:	4602      	mov	r2, r0
 8006256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006258:	4413      	add	r3, r2
 800625a:	65bb      	str	r3, [r7, #88]	@ 0x58
        int pwm_l = base_align_fwd - (int)lroundf(u);
 800625c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006260:	f007 fb1e 	bl	800d8a0 <lroundf>
 8006264:	4602      	mov	r2, r0
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006268:	1a9b      	subs	r3, r3, r2
 800626a:	657b      	str	r3, [r7, #84]	@ 0x54

        pwm_r = clampi_local(pwm_r, 0, WF_PWM_MAX);
 800626c:	4b34      	ldr	r3, [pc, #208]	@ (8006340 <fusion_align_entry+0x338>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	2100      	movs	r1, #0
 8006274:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006276:	f7ff f819 	bl	80052ac <clampi_local>
 800627a:	65b8      	str	r0, [r7, #88]	@ 0x58
        pwm_l = clampi_local(pwm_l, 0, WF_PWM_MAX);
 800627c:	4b30      	ldr	r3, [pc, #192]	@ (8006340 <fusion_align_entry+0x338>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	2100      	movs	r1, #0
 8006284:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006286:	f7ff f811 	bl	80052ac <clampi_local>
 800628a:	6578      	str	r0, [r7, #84]	@ 0x54
        if (pwm_r > 0 && pwm_r < WF_PWM_MIN_MOVE) pwm_r = WF_PWM_MIN_MOVE;
 800628c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800628e:	2b00      	cmp	r3, #0
 8006290:	dd07      	ble.n	80062a2 <fusion_align_entry+0x29a>
 8006292:	4b2c      	ldr	r3, [pc, #176]	@ (8006344 <fusion_align_entry+0x33c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006298:	429a      	cmp	r2, r3
 800629a:	da02      	bge.n	80062a2 <fusion_align_entry+0x29a>
 800629c:	4b29      	ldr	r3, [pc, #164]	@ (8006344 <fusion_align_entry+0x33c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (pwm_l > 0 && pwm_l < WF_PWM_MIN_MOVE) pwm_l = WF_PWM_MIN_MOVE;
 80062a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dd07      	ble.n	80062b8 <fusion_align_entry+0x2b0>
 80062a8:	4b26      	ldr	r3, [pc, #152]	@ (8006344 <fusion_align_entry+0x33c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062ae:	429a      	cmp	r2, r3
 80062b0:	da02      	bge.n	80062b8 <fusion_align_entry+0x2b0>
 80062b2:	4b24      	ldr	r3, [pc, #144]	@ (8006344 <fusion_align_entry+0x33c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	657b      	str	r3, [r7, #84]	@ 0x54

        motor_set(0, true, (uint16_t)pwm_l);
 80062b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	2101      	movs	r1, #1
 80062c0:	2000      	movs	r0, #0
 80062c2:	f7fd fd39 	bl	8003d38 <motor_set>
        motor_set(1, true, (uint16_t)pwm_r);
 80062c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	2101      	movs	r1, #1
 80062ce:	2001      	movs	r0, #1
 80062d0:	f7fd fd32 	bl	8003d38 <motor_set>

        // require small error to persist briefly
        if (done) {
 80062d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d035      	beq.n	8006348 <fusion_align_entry+0x340>
            if (last_ok == 0) last_ok = now;
 80062dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <fusion_align_entry+0x2de>
 80062e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (now - last_ok >= DWELL_OK_MS) {
 80062e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d82c      	bhi.n	800634c <fusion_align_entry+0x344>
                break_motors();
 80062f2:	f7fd fc89 	bl	8003c08 <break_motors>
                return true;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e036      	b.n	8006368 <fusion_align_entry+0x360>
 80062fa:	bf00      	nop
 80062fc:	3e19999a 	.word	0x3e19999a
 8006300:	3e4ccccd 	.word	0x3e4ccccd
 8006304:	435c0000 	.word	0x435c0000
 8006308:	43340000 	.word	0x43340000
 800630c:	43b40000 	.word	0x43b40000
 8006310:	20000030 	.word	0x20000030
 8006314:	51eb851f 	.word	0x51eb851f
 8006318:	2000135c 	.word	0x2000135c
 800631c:	3a83126f 	.word	0x3a83126f
 8006320:	3a83126f 	.word	0x3a83126f
 8006324:	20000d7c 	.word	0x20000d7c
 8006328:	0800f724 	.word	0x0800f724
 800632c:	0800f6a4 	.word	0x0800f6a4
 8006330:	0800f620 	.word	0x0800f620
 8006334:	0800f59c 	.word	0x0800f59c
 8006338:	20000054 	.word	0x20000054
 800633c:	20000058 	.word	0x20000058
 8006340:	20000038 	.word	0x20000038
 8006344:	20000034 	.word	0x20000034
            }
        } else {
            last_ok = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while ((HAL_GetTick() - t0) < timeout_ms) {
 800634c:	f000 f8a0 	bl	8006490 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	f63f ae89 	bhi.w	8006070 <fusion_align_entry+0x68>
 800635e:	e000      	b.n	8006362 <fusion_align_entry+0x35a>
            break;
 8006360:	bf00      	nop
        }
    }

    break_motors();
 8006362:	f7fd fc51 	bl	8003c08 <break_motors>
    return true; // timeout → still proceed to fusion
 8006366:	2301      	movs	r3, #1
}
 8006368:	4618      	mov	r0, r3
 800636a:	3770      	adds	r7, #112	@ 0x70
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80063a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006374:	f7fe fe86 	bl	8005084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006378:	480c      	ldr	r0, [pc, #48]	@ (80063ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800637a:	490d      	ldr	r1, [pc, #52]	@ (80063b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800637c:	4a0d      	ldr	r2, [pc, #52]	@ (80063b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800637e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006380:	e002      	b.n	8006388 <LoopCopyDataInit>

08006382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006386:	3304      	adds	r3, #4

08006388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800638a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800638c:	d3f9      	bcc.n	8006382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800638e:	4a0a      	ldr	r2, [pc, #40]	@ (80063b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006390:	4c0a      	ldr	r4, [pc, #40]	@ (80063bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8006392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006394:	e001      	b.n	800639a <LoopFillZerobss>

08006396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006398:	3204      	adds	r2, #4

0800639a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800639a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800639c:	d3fb      	bcc.n	8006396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800639e:	f005 f9b3 	bl	800b708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063a2:	f7fb fc77 	bl	8001c94 <main>
  bx  lr    
 80063a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80063a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80063ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063b0:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80063b4:	0800fb2c 	.word	0x0800fb2c
  ldr r2, =_sbss
 80063b8:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80063bc:	200014b0 	.word	0x200014b0

080063c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063c0:	e7fe      	b.n	80063c0 <ADC_IRQHandler>
	...

080063c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80063c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006404 <HAL_Init+0x40>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006404 <HAL_Init+0x40>)
 80063ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80063d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <HAL_Init+0x40>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a0a      	ldr	r2, [pc, #40]	@ (8006404 <HAL_Init+0x40>)
 80063da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063e0:	4b08      	ldr	r3, [pc, #32]	@ (8006404 <HAL_Init+0x40>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a07      	ldr	r2, [pc, #28]	@ (8006404 <HAL_Init+0x40>)
 80063e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063ec:	2003      	movs	r0, #3
 80063ee:	f000 fd41 	bl	8006e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063f2:	200f      	movs	r0, #15
 80063f4:	f000 f808 	bl	8006408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063f8:	f7fe fad0 	bl	800499c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	40023c00 	.word	0x40023c00

08006408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006410:	4b12      	ldr	r3, [pc, #72]	@ (800645c <HAL_InitTick+0x54>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	4b12      	ldr	r3, [pc, #72]	@ (8006460 <HAL_InitTick+0x58>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	4619      	mov	r1, r3
 800641a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800641e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006422:	fbb2 f3f3 	udiv	r3, r2, r3
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fd59 	bl	8006ede <HAL_SYSTICK_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e00e      	b.n	8006454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b0f      	cmp	r3, #15
 800643a:	d80a      	bhi.n	8006452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800643c:	2200      	movs	r2, #0
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	f000 fd21 	bl	8006e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006448:	4a06      	ldr	r2, [pc, #24]	@ (8006464 <HAL_InitTick+0x5c>)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e000      	b.n	8006454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	2000002c 	.word	0x2000002c
 8006460:	20000068 	.word	0x20000068
 8006464:	20000064 	.word	0x20000064

08006468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800646c:	4b06      	ldr	r3, [pc, #24]	@ (8006488 <HAL_IncTick+0x20>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	4b06      	ldr	r3, [pc, #24]	@ (800648c <HAL_IncTick+0x24>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4413      	add	r3, r2
 8006478:	4a04      	ldr	r2, [pc, #16]	@ (800648c <HAL_IncTick+0x24>)
 800647a:	6013      	str	r3, [r2, #0]
}
 800647c:	bf00      	nop
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000068 	.word	0x20000068
 800648c:	20001360 	.word	0x20001360

08006490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  return uwTick;
 8006494:	4b03      	ldr	r3, [pc, #12]	@ (80064a4 <HAL_GetTick+0x14>)
 8006496:	681b      	ldr	r3, [r3, #0]
}
 8006498:	4618      	mov	r0, r3
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20001360 	.word	0x20001360

080064a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064b0:	f7ff ffee 	bl	8006490 <HAL_GetTick>
 80064b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c0:	d005      	beq.n	80064ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80064c2:	4b0a      	ldr	r3, [pc, #40]	@ (80064ec <HAL_Delay+0x44>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80064ce:	bf00      	nop
 80064d0:	f7ff ffde 	bl	8006490 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d8f7      	bhi.n	80064d0 <HAL_Delay+0x28>
  {
  }
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000068 	.word	0x20000068

080064f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e033      	b.n	800656e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d109      	bne.n	8006522 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fe fa6c 	bl	80049ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b00      	cmp	r3, #0
 800652c:	d118      	bne.n	8006560 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006536:	f023 0302 	bic.w	r3, r3, #2
 800653a:	f043 0202 	orr.w	r2, r3, #2
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 faca 	bl	8006adc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	f043 0201 	orr.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	641a      	str	r2, [r3, #64]	@ 0x40
 800655e:	e001      	b.n	8006564 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_ADC_Start+0x1a>
 800658e:	2302      	movs	r3, #2
 8006590:	e097      	b.n	80066c2 <HAL_ADC_Start+0x14a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d018      	beq.n	80065da <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80065b8:	4b45      	ldr	r3, [pc, #276]	@ (80066d0 <HAL_ADC_Start+0x158>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a45      	ldr	r2, [pc, #276]	@ (80066d4 <HAL_ADC_Start+0x15c>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	0c9a      	lsrs	r2, r3, #18
 80065c4:	4613      	mov	r3, r2
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	4413      	add	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80065cc:	e002      	b.n	80065d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1f9      	bne.n	80065ce <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d15f      	bne.n	80066a8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006612:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006626:	d106      	bne.n	8006636 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662c:	f023 0206 	bic.w	r2, r3, #6
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	645a      	str	r2, [r3, #68]	@ 0x44
 8006634:	e002      	b.n	800663c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006644:	4b24      	ldr	r3, [pc, #144]	@ (80066d8 <HAL_ADC_Start+0x160>)
 8006646:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006650:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10f      	bne.n	800667e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d129      	bne.n	80066c0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800667a:	609a      	str	r2, [r3, #8]
 800667c:	e020      	b.n	80066c0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a16      	ldr	r2, [pc, #88]	@ (80066dc <HAL_ADC_Start+0x164>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d11b      	bne.n	80066c0 <HAL_ADC_Start+0x148>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d114      	bne.n	80066c0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80066a4:	609a      	str	r2, [r3, #8]
 80066a6:	e00b      	b.n	80066c0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ac:	f043 0210 	orr.w	r2, r3, #16
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b8:	f043 0201 	orr.w	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	2000002c 	.word	0x2000002c
 80066d4:	431bde83 	.word	0x431bde83
 80066d8:	40012300 	.word	0x40012300
 80066dc:	40012000 	.word	0x40012000

080066e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_ADC_Stop+0x16>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e021      	b.n	800673a <HAL_ADC_Stop+0x5a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0201 	bic.w	r2, r2, #1
 800670c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006720:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	f043 0201 	orr.w	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800675e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006762:	d113      	bne.n	800678c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800676e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006772:	d10b      	bne.n	800678c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e063      	b.n	8006854 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800678c:	f7ff fe80 	bl	8006490 <HAL_GetTick>
 8006790:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006792:	e021      	b.n	80067d8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d01d      	beq.n	80067d8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <HAL_ADC_PollForConversion+0x6c>
 80067a2:	f7ff fe75 	bl	8006490 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d212      	bcs.n	80067d8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d00b      	beq.n	80067d8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c4:	f043 0204 	orr.w	r2, r3, #4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e03d      	b.n	8006854 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d1d6      	bne.n	8006794 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f06f 0212 	mvn.w	r2, #18
 80067ee:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d123      	bne.n	8006852 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800680e:	2b00      	cmp	r3, #0
 8006810:	d11f      	bne.n	8006852 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006818:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800681c:	2b00      	cmp	r3, #0
 800681e:	d006      	beq.n	800682e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800682a:	2b00      	cmp	r3, #0
 800682c:	d111      	bne.n	8006852 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d105      	bne.n	8006852 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684a:	f043 0201 	orr.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
	...

08006878 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_ADC_ConfigChannel+0x1c>
 8006890:	2302      	movs	r3, #2
 8006892:	e113      	b.n	8006abc <HAL_ADC_ConfigChannel+0x244>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b09      	cmp	r3, #9
 80068a2:	d925      	bls.n	80068f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68d9      	ldr	r1, [r3, #12]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	4613      	mov	r3, r2
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4413      	add	r3, r2
 80068b8:	3b1e      	subs	r3, #30
 80068ba:	2207      	movs	r2, #7
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	43da      	mvns	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	400a      	ands	r2, r1
 80068c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68d9      	ldr	r1, [r3, #12]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	4618      	mov	r0, r3
 80068dc:	4603      	mov	r3, r0
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	4403      	add	r3, r0
 80068e2:	3b1e      	subs	r3, #30
 80068e4:	409a      	lsls	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	e022      	b.n	8006936 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6919      	ldr	r1, [r3, #16]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	4613      	mov	r3, r2
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	4413      	add	r3, r2
 8006904:	2207      	movs	r2, #7
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	43da      	mvns	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	400a      	ands	r2, r1
 8006912:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6919      	ldr	r1, [r3, #16]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	4618      	mov	r0, r3
 8006926:	4603      	mov	r3, r0
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	4403      	add	r3, r0
 800692c:	409a      	lsls	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b06      	cmp	r3, #6
 800693c:	d824      	bhi.n	8006988 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	3b05      	subs	r3, #5
 8006950:	221f      	movs	r2, #31
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43da      	mvns	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	400a      	ands	r2, r1
 800695e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	4618      	mov	r0, r3
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	3b05      	subs	r3, #5
 800697a:	fa00 f203 	lsl.w	r2, r0, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	635a      	str	r2, [r3, #52]	@ 0x34
 8006986:	e04c      	b.n	8006a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b0c      	cmp	r3, #12
 800698e:	d824      	bhi.n	80069da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	3b23      	subs	r3, #35	@ 0x23
 80069a2:	221f      	movs	r2, #31
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	43da      	mvns	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	400a      	ands	r2, r1
 80069b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4618      	mov	r0, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	3b23      	subs	r3, #35	@ 0x23
 80069cc:	fa00 f203 	lsl.w	r2, r0, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80069d8:	e023      	b.n	8006a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	3b41      	subs	r3, #65	@ 0x41
 80069ec:	221f      	movs	r2, #31
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	43da      	mvns	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	400a      	ands	r2, r1
 80069fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	4618      	mov	r0, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	3b41      	subs	r3, #65	@ 0x41
 8006a16:	fa00 f203 	lsl.w	r2, r0, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a22:	4b29      	ldr	r3, [pc, #164]	@ (8006ac8 <HAL_ADC_ConfigChannel+0x250>)
 8006a24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a28      	ldr	r2, [pc, #160]	@ (8006acc <HAL_ADC_ConfigChannel+0x254>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10f      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x1d8>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b12      	cmp	r3, #18
 8006a36:	d10b      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1d      	ldr	r2, [pc, #116]	@ (8006acc <HAL_ADC_ConfigChannel+0x254>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d12b      	bne.n	8006ab2 <HAL_ADC_ConfigChannel+0x23a>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad0 <HAL_ADC_ConfigChannel+0x258>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <HAL_ADC_ConfigChannel+0x1f4>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b11      	cmp	r3, #17
 8006a6a:	d122      	bne.n	8006ab2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a11      	ldr	r2, [pc, #68]	@ (8006ad0 <HAL_ADC_ConfigChannel+0x258>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d111      	bne.n	8006ab2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a8e:	4b11      	ldr	r3, [pc, #68]	@ (8006ad4 <HAL_ADC_ConfigChannel+0x25c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a11      	ldr	r2, [pc, #68]	@ (8006ad8 <HAL_ADC_ConfigChannel+0x260>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	0c9a      	lsrs	r2, r3, #18
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006aa4:	e002      	b.n	8006aac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f9      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	40012300 	.word	0x40012300
 8006acc:	40012000 	.word	0x40012000
 8006ad0:	10000012 	.word	0x10000012
 8006ad4:	2000002c 	.word	0x2000002c
 8006ad8:	431bde83 	.word	0x431bde83

08006adc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ae4:	4b79      	ldr	r3, [pc, #484]	@ (8006ccc <ADC_Init+0x1f0>)
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	431a      	orrs	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6859      	ldr	r1, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	021a      	lsls	r2, r3, #8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6859      	ldr	r1, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6899      	ldr	r1, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6e:	4a58      	ldr	r2, [pc, #352]	@ (8006cd0 <ADC_Init+0x1f4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d022      	beq.n	8006bba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6899      	ldr	r1, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6899      	ldr	r1, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	609a      	str	r2, [r3, #8]
 8006bb8:	e00f      	b.n	8006bda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006bd8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0202 	bic.w	r2, r2, #2
 8006be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6899      	ldr	r1, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	7e1b      	ldrb	r3, [r3, #24]
 8006bf4:	005a      	lsls	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01b      	beq.n	8006c40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006c26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6859      	ldr	r1, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	3b01      	subs	r3, #1
 8006c34:	035a      	lsls	r2, r3, #13
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	e007      	b.n	8006c50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	051a      	lsls	r2, r3, #20
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6899      	ldr	r1, [r3, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c92:	025a      	lsls	r2, r3, #9
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6899      	ldr	r1, [r3, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	029a      	lsls	r2, r3, #10
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
}
 8006cc0:	bf00      	nop
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	40012300 	.word	0x40012300
 8006cd0:	0f000001 	.word	0x0f000001

08006cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8006d18 <__NVIC_SetPriorityGrouping+0x44>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d06:	4a04      	ldr	r2, [pc, #16]	@ (8006d18 <__NVIC_SetPriorityGrouping+0x44>)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	60d3      	str	r3, [r2, #12]
}
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	e000ed00 	.word	0xe000ed00

08006d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d20:	4b04      	ldr	r3, [pc, #16]	@ (8006d34 <__NVIC_GetPriorityGrouping+0x18>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	f003 0307 	and.w	r3, r3, #7
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	e000ed00 	.word	0xe000ed00

08006d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	db0b      	blt.n	8006d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	f003 021f 	and.w	r2, r3, #31
 8006d50:	4907      	ldr	r1, [pc, #28]	@ (8006d70 <__NVIC_EnableIRQ+0x38>)
 8006d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	2001      	movs	r0, #1
 8006d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	e000e100 	.word	0xe000e100

08006d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	db0a      	blt.n	8006d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	490c      	ldr	r1, [pc, #48]	@ (8006dc0 <__NVIC_SetPriority+0x4c>)
 8006d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d92:	0112      	lsls	r2, r2, #4
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	440b      	add	r3, r1
 8006d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d9c:	e00a      	b.n	8006db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	4908      	ldr	r1, [pc, #32]	@ (8006dc4 <__NVIC_SetPriority+0x50>)
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	3b04      	subs	r3, #4
 8006dac:	0112      	lsls	r2, r2, #4
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	440b      	add	r3, r1
 8006db2:	761a      	strb	r2, [r3, #24]
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	e000e100 	.word	0xe000e100
 8006dc4:	e000ed00 	.word	0xe000ed00

08006dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b089      	sub	sp, #36	@ 0x24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f1c3 0307 	rsb	r3, r3, #7
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	bf28      	it	cs
 8006de6:	2304      	movcs	r3, #4
 8006de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	3304      	adds	r3, #4
 8006dee:	2b06      	cmp	r3, #6
 8006df0:	d902      	bls.n	8006df8 <NVIC_EncodePriority+0x30>
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	3b03      	subs	r3, #3
 8006df6:	e000      	b.n	8006dfa <NVIC_EncodePriority+0x32>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	fa02 f303 	lsl.w	r3, r2, r3
 8006e06:	43da      	mvns	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	401a      	ands	r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e10:	f04f 31ff 	mov.w	r1, #4294967295
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1a:	43d9      	mvns	r1, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e20:	4313      	orrs	r3, r2
         );
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3724      	adds	r7, #36	@ 0x24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
	...

08006e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e40:	d301      	bcc.n	8006e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e42:	2301      	movs	r3, #1
 8006e44:	e00f      	b.n	8006e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e46:	4a0a      	ldr	r2, [pc, #40]	@ (8006e70 <SysTick_Config+0x40>)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e4e:	210f      	movs	r1, #15
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	f7ff ff8e 	bl	8006d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e58:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <SysTick_Config+0x40>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e5e:	4b04      	ldr	r3, [pc, #16]	@ (8006e70 <SysTick_Config+0x40>)
 8006e60:	2207      	movs	r2, #7
 8006e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	e000e010 	.word	0xe000e010

08006e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ff29 	bl	8006cd4 <__NVIC_SetPriorityGrouping>
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b086      	sub	sp, #24
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	4603      	mov	r3, r0
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	607a      	str	r2, [r7, #4]
 8006e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e9c:	f7ff ff3e 	bl	8006d1c <__NVIC_GetPriorityGrouping>
 8006ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	6978      	ldr	r0, [r7, #20]
 8006ea8:	f7ff ff8e 	bl	8006dc8 <NVIC_EncodePriority>
 8006eac:	4602      	mov	r2, r0
 8006eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff ff5d 	bl	8006d74 <__NVIC_SetPriority>
}
 8006eba:	bf00      	nop
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	4603      	mov	r3, r0
 8006eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff ff31 	bl	8006d38 <__NVIC_EnableIRQ>
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff ffa2 	bl	8006e30 <SysTick_Config>
 8006eec:	4603      	mov	r3, r0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006f04:	f7ff fac4 	bl	8006490 <HAL_GetTick>
 8006f08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d008      	beq.n	8006f28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2280      	movs	r2, #128	@ 0x80
 8006f1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e052      	b.n	8006fce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0216 	bic.w	r2, r2, #22
 8006f36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695a      	ldr	r2, [r3, #20]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d103      	bne.n	8006f58 <HAL_DMA_Abort+0x62>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0208 	bic.w	r2, r2, #8
 8006f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0201 	bic.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f78:	e013      	b.n	8006fa2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f7a:	f7ff fa89 	bl	8006490 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	d90c      	bls.n	8006fa2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2203      	movs	r2, #3
 8006f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e015      	b.n	8006fce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e4      	bne.n	8006f7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fb4:	223f      	movs	r2, #63	@ 0x3f
 8006fb6:	409a      	lsls	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2280      	movs	r2, #128	@ 0x80
 8006fee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e00c      	b.n	800700e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2205      	movs	r2, #5
 8006ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0201 	bic.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
	...

0800701c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800701c:	b480      	push	{r7}
 800701e:	b089      	sub	sp, #36	@ 0x24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
 8007036:	e159      	b.n	80072ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007038:	2201      	movs	r2, #1
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	fa02 f303 	lsl.w	r3, r2, r3
 8007040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4013      	ands	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	429a      	cmp	r2, r3
 8007052:	f040 8148 	bne.w	80072e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	2b01      	cmp	r3, #1
 8007060:	d005      	beq.n	800706e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800706a:	2b02      	cmp	r3, #2
 800706c:	d130      	bne.n	80070d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	2203      	movs	r2, #3
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	43db      	mvns	r3, r3
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	4013      	ands	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	fa02 f303 	lsl.w	r3, r2, r3
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	4313      	orrs	r3, r2
 8007096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070a4:	2201      	movs	r2, #1
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	43db      	mvns	r3, r3
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	4013      	ands	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	091b      	lsrs	r3, r3, #4
 80070ba:	f003 0201 	and.w	r2, r3, #1
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d017      	beq.n	800710c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	2203      	movs	r2, #3
 80070e8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ec:	43db      	mvns	r3, r3
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	4013      	ands	r3, r2
 80070f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	4313      	orrs	r3, r2
 8007104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d123      	bne.n	8007160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	08da      	lsrs	r2, r3, #3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3208      	adds	r2, #8
 8007120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	220f      	movs	r2, #15
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	43db      	mvns	r3, r3
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	4013      	ands	r3, r2
 800713a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	4313      	orrs	r3, r2
 8007150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	08da      	lsrs	r2, r3, #3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3208      	adds	r2, #8
 800715a:	69b9      	ldr	r1, [r7, #24]
 800715c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	2203      	movs	r2, #3
 800716c:	fa02 f303 	lsl.w	r3, r2, r3
 8007170:	43db      	mvns	r3, r3
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	4013      	ands	r3, r2
 8007176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 0203 	and.w	r2, r3, #3
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	4313      	orrs	r3, r2
 800718c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80a2 	beq.w	80072e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071a2:	2300      	movs	r3, #0
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	4b57      	ldr	r3, [pc, #348]	@ (8007304 <HAL_GPIO_Init+0x2e8>)
 80071a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071aa:	4a56      	ldr	r2, [pc, #344]	@ (8007304 <HAL_GPIO_Init+0x2e8>)
 80071ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80071b2:	4b54      	ldr	r3, [pc, #336]	@ (8007304 <HAL_GPIO_Init+0x2e8>)
 80071b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071be:	4a52      	ldr	r2, [pc, #328]	@ (8007308 <HAL_GPIO_Init+0x2ec>)
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	089b      	lsrs	r3, r3, #2
 80071c4:	3302      	adds	r3, #2
 80071c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	220f      	movs	r2, #15
 80071d6:	fa02 f303 	lsl.w	r3, r2, r3
 80071da:	43db      	mvns	r3, r3
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	4013      	ands	r3, r2
 80071e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a49      	ldr	r2, [pc, #292]	@ (800730c <HAL_GPIO_Init+0x2f0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d019      	beq.n	800721e <HAL_GPIO_Init+0x202>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a48      	ldr	r2, [pc, #288]	@ (8007310 <HAL_GPIO_Init+0x2f4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d013      	beq.n	800721a <HAL_GPIO_Init+0x1fe>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a47      	ldr	r2, [pc, #284]	@ (8007314 <HAL_GPIO_Init+0x2f8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00d      	beq.n	8007216 <HAL_GPIO_Init+0x1fa>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a46      	ldr	r2, [pc, #280]	@ (8007318 <HAL_GPIO_Init+0x2fc>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d007      	beq.n	8007212 <HAL_GPIO_Init+0x1f6>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a45      	ldr	r2, [pc, #276]	@ (800731c <HAL_GPIO_Init+0x300>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d101      	bne.n	800720e <HAL_GPIO_Init+0x1f2>
 800720a:	2304      	movs	r3, #4
 800720c:	e008      	b.n	8007220 <HAL_GPIO_Init+0x204>
 800720e:	2307      	movs	r3, #7
 8007210:	e006      	b.n	8007220 <HAL_GPIO_Init+0x204>
 8007212:	2303      	movs	r3, #3
 8007214:	e004      	b.n	8007220 <HAL_GPIO_Init+0x204>
 8007216:	2302      	movs	r3, #2
 8007218:	e002      	b.n	8007220 <HAL_GPIO_Init+0x204>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <HAL_GPIO_Init+0x204>
 800721e:	2300      	movs	r3, #0
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	f002 0203 	and.w	r2, r2, #3
 8007226:	0092      	lsls	r2, r2, #2
 8007228:	4093      	lsls	r3, r2
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	4313      	orrs	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007230:	4935      	ldr	r1, [pc, #212]	@ (8007308 <HAL_GPIO_Init+0x2ec>)
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	089b      	lsrs	r3, r3, #2
 8007236:	3302      	adds	r3, #2
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800723e:	4b38      	ldr	r3, [pc, #224]	@ (8007320 <HAL_GPIO_Init+0x304>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	43db      	mvns	r3, r3
 8007248:	69ba      	ldr	r2, [r7, #24]
 800724a:	4013      	ands	r3, r2
 800724c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007262:	4a2f      	ldr	r2, [pc, #188]	@ (8007320 <HAL_GPIO_Init+0x304>)
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007268:	4b2d      	ldr	r3, [pc, #180]	@ (8007320 <HAL_GPIO_Init+0x304>)
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	43db      	mvns	r3, r3
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	4013      	ands	r3, r2
 8007276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800728c:	4a24      	ldr	r2, [pc, #144]	@ (8007320 <HAL_GPIO_Init+0x304>)
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007292:	4b23      	ldr	r3, [pc, #140]	@ (8007320 <HAL_GPIO_Init+0x304>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	43db      	mvns	r3, r3
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	4013      	ands	r3, r2
 80072a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072b6:	4a1a      	ldr	r2, [pc, #104]	@ (8007320 <HAL_GPIO_Init+0x304>)
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072bc:	4b18      	ldr	r3, [pc, #96]	@ (8007320 <HAL_GPIO_Init+0x304>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	43db      	mvns	r3, r3
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	4013      	ands	r3, r2
 80072ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072e0:	4a0f      	ldr	r2, [pc, #60]	@ (8007320 <HAL_GPIO_Init+0x304>)
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	3301      	adds	r3, #1
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b0f      	cmp	r3, #15
 80072f0:	f67f aea2 	bls.w	8007038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	3724      	adds	r7, #36	@ 0x24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40023800 	.word	0x40023800
 8007308:	40013800 	.word	0x40013800
 800730c:	40020000 	.word	0x40020000
 8007310:	40020400 	.word	0x40020400
 8007314:	40020800 	.word	0x40020800
 8007318:	40020c00 	.word	0x40020c00
 800731c:	40021000 	.word	0x40021000
 8007320:	40013c00 	.word	0x40013c00

08007324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	807b      	strh	r3, [r7, #2]
 8007330:	4613      	mov	r3, r2
 8007332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007334:	787b      	ldrb	r3, [r7, #1]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800733a:	887a      	ldrh	r2, [r7, #2]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007340:	e003      	b.n	800734a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007342:	887b      	ldrh	r3, [r7, #2]
 8007344:	041a      	lsls	r2, r3, #16
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	619a      	str	r2, [r3, #24]
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	460b      	mov	r3, r1
 8007360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007368:	887a      	ldrh	r2, [r7, #2]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4013      	ands	r3, r2
 800736e:	041a      	lsls	r2, r3, #16
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	43d9      	mvns	r1, r3
 8007374:	887b      	ldrh	r3, [r7, #2]
 8007376:	400b      	ands	r3, r1
 8007378:	431a      	orrs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	619a      	str	r2, [r3, #24]
}
 800737e:	bf00      	nop
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007396:	4b08      	ldr	r3, [pc, #32]	@ (80073b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007398:	695a      	ldr	r2, [r3, #20]
 800739a:	88fb      	ldrh	r3, [r7, #6]
 800739c:	4013      	ands	r3, r2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d006      	beq.n	80073b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073a2:	4a05      	ldr	r2, [pc, #20]	@ (80073b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073a8:	88fb      	ldrh	r3, [r7, #6]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fb f8e8 	bl	8002580 <HAL_GPIO_EXTI_Callback>
  }
}
 80073b0:	bf00      	nop
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40013c00 	.word	0x40013c00

080073bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e267      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d075      	beq.n	80074c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073da:	4b88      	ldr	r3, [pc, #544]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 030c 	and.w	r3, r3, #12
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d00c      	beq.n	8007400 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073e6:	4b85      	ldr	r3, [pc, #532]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073ee:	2b08      	cmp	r3, #8
 80073f0:	d112      	bne.n	8007418 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073f2:	4b82      	ldr	r3, [pc, #520]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073fe:	d10b      	bne.n	8007418 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007400:	4b7e      	ldr	r3, [pc, #504]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d05b      	beq.n	80074c4 <HAL_RCC_OscConfig+0x108>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d157      	bne.n	80074c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e242      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007420:	d106      	bne.n	8007430 <HAL_RCC_OscConfig+0x74>
 8007422:	4b76      	ldr	r3, [pc, #472]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a75      	ldr	r2, [pc, #468]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	e01d      	b.n	800746c <HAL_RCC_OscConfig+0xb0>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007438:	d10c      	bne.n	8007454 <HAL_RCC_OscConfig+0x98>
 800743a:	4b70      	ldr	r3, [pc, #448]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a6f      	ldr	r2, [pc, #444]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007440:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	4b6d      	ldr	r3, [pc, #436]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a6c      	ldr	r2, [pc, #432]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 800744c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	e00b      	b.n	800746c <HAL_RCC_OscConfig+0xb0>
 8007454:	4b69      	ldr	r3, [pc, #420]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a68      	ldr	r2, [pc, #416]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 800745a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	4b66      	ldr	r3, [pc, #408]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a65      	ldr	r2, [pc, #404]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800746a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d013      	beq.n	800749c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007474:	f7ff f80c 	bl	8006490 <HAL_GetTick>
 8007478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800747c:	f7ff f808 	bl	8006490 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b64      	cmp	r3, #100	@ 0x64
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e207      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800748e:	4b5b      	ldr	r3, [pc, #364]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0f0      	beq.n	800747c <HAL_RCC_OscConfig+0xc0>
 800749a:	e014      	b.n	80074c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800749c:	f7fe fff8 	bl	8006490 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074a2:	e008      	b.n	80074b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074a4:	f7fe fff4 	bl	8006490 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b64      	cmp	r3, #100	@ 0x64
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e1f3      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074b6:	4b51      	ldr	r3, [pc, #324]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f0      	bne.n	80074a4 <HAL_RCC_OscConfig+0xe8>
 80074c2:	e000      	b.n	80074c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d063      	beq.n	800759a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074d2:	4b4a      	ldr	r3, [pc, #296]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 030c 	and.w	r3, r3, #12
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074de:	4b47      	ldr	r3, [pc, #284]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074e6:	2b08      	cmp	r3, #8
 80074e8:	d11c      	bne.n	8007524 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074ea:	4b44      	ldr	r3, [pc, #272]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d116      	bne.n	8007524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074f6:	4b41      	ldr	r3, [pc, #260]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <HAL_RCC_OscConfig+0x152>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d001      	beq.n	800750e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e1c7      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800750e:	4b3b      	ldr	r3, [pc, #236]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	4937      	ldr	r1, [pc, #220]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 800751e:	4313      	orrs	r3, r2
 8007520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007522:	e03a      	b.n	800759a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d020      	beq.n	800756e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800752c:	4b34      	ldr	r3, [pc, #208]	@ (8007600 <HAL_RCC_OscConfig+0x244>)
 800752e:	2201      	movs	r2, #1
 8007530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007532:	f7fe ffad 	bl	8006490 <HAL_GetTick>
 8007536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800753a:	f7fe ffa9 	bl	8006490 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e1a8      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800754c:	4b2b      	ldr	r3, [pc, #172]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0f0      	beq.n	800753a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007558:	4b28      	ldr	r3, [pc, #160]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	4925      	ldr	r1, [pc, #148]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007568:	4313      	orrs	r3, r2
 800756a:	600b      	str	r3, [r1, #0]
 800756c:	e015      	b.n	800759a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800756e:	4b24      	ldr	r3, [pc, #144]	@ (8007600 <HAL_RCC_OscConfig+0x244>)
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007574:	f7fe ff8c 	bl	8006490 <HAL_GetTick>
 8007578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800757a:	e008      	b.n	800758e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800757c:	f7fe ff88 	bl	8006490 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e187      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800758e:	4b1b      	ldr	r3, [pc, #108]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f0      	bne.n	800757c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0308 	and.w	r3, r3, #8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d036      	beq.n	8007614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d016      	beq.n	80075dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075ae:	4b15      	ldr	r3, [pc, #84]	@ (8007604 <HAL_RCC_OscConfig+0x248>)
 80075b0:	2201      	movs	r2, #1
 80075b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b4:	f7fe ff6c 	bl	8006490 <HAL_GetTick>
 80075b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075ba:	e008      	b.n	80075ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075bc:	f7fe ff68 	bl	8006490 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e167      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075ce:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <HAL_RCC_OscConfig+0x240>)
 80075d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0f0      	beq.n	80075bc <HAL_RCC_OscConfig+0x200>
 80075da:	e01b      	b.n	8007614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075dc:	4b09      	ldr	r3, [pc, #36]	@ (8007604 <HAL_RCC_OscConfig+0x248>)
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075e2:	f7fe ff55 	bl	8006490 <HAL_GetTick>
 80075e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075e8:	e00e      	b.n	8007608 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075ea:	f7fe ff51 	bl	8006490 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d907      	bls.n	8007608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e150      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
 80075fc:	40023800 	.word	0x40023800
 8007600:	42470000 	.word	0x42470000
 8007604:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007608:	4b88      	ldr	r3, [pc, #544]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 800760a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1ea      	bne.n	80075ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8097 	beq.w	8007750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007622:	2300      	movs	r3, #0
 8007624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007626:	4b81      	ldr	r3, [pc, #516]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 8007628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10f      	bne.n	8007652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	4b7d      	ldr	r3, [pc, #500]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763a:	4a7c      	ldr	r2, [pc, #496]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 800763c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007640:	6413      	str	r3, [r2, #64]	@ 0x40
 8007642:	4b7a      	ldr	r3, [pc, #488]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 8007644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800764a:	60bb      	str	r3, [r7, #8]
 800764c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800764e:	2301      	movs	r3, #1
 8007650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007652:	4b77      	ldr	r3, [pc, #476]	@ (8007830 <HAL_RCC_OscConfig+0x474>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765a:	2b00      	cmp	r3, #0
 800765c:	d118      	bne.n	8007690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800765e:	4b74      	ldr	r3, [pc, #464]	@ (8007830 <HAL_RCC_OscConfig+0x474>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a73      	ldr	r2, [pc, #460]	@ (8007830 <HAL_RCC_OscConfig+0x474>)
 8007664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800766a:	f7fe ff11 	bl	8006490 <HAL_GetTick>
 800766e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007670:	e008      	b.n	8007684 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007672:	f7fe ff0d 	bl	8006490 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e10c      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007684:	4b6a      	ldr	r3, [pc, #424]	@ (8007830 <HAL_RCC_OscConfig+0x474>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0f0      	beq.n	8007672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d106      	bne.n	80076a6 <HAL_RCC_OscConfig+0x2ea>
 8007698:	4b64      	ldr	r3, [pc, #400]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 800769a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800769c:	4a63      	ldr	r2, [pc, #396]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 800769e:	f043 0301 	orr.w	r3, r3, #1
 80076a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80076a4:	e01c      	b.n	80076e0 <HAL_RCC_OscConfig+0x324>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	d10c      	bne.n	80076c8 <HAL_RCC_OscConfig+0x30c>
 80076ae:	4b5f      	ldr	r3, [pc, #380]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 80076b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b2:	4a5e      	ldr	r2, [pc, #376]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 80076b4:	f043 0304 	orr.w	r3, r3, #4
 80076b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ba:	4b5c      	ldr	r3, [pc, #368]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 80076bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076be:	4a5b      	ldr	r2, [pc, #364]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 80076c0:	f043 0301 	orr.w	r3, r3, #1
 80076c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80076c6:	e00b      	b.n	80076e0 <HAL_RCC_OscConfig+0x324>
 80076c8:	4b58      	ldr	r3, [pc, #352]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 80076ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076cc:	4a57      	ldr	r2, [pc, #348]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80076d4:	4b55      	ldr	r3, [pc, #340]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 80076d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d8:	4a54      	ldr	r2, [pc, #336]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 80076da:	f023 0304 	bic.w	r3, r3, #4
 80076de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d015      	beq.n	8007714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e8:	f7fe fed2 	bl	8006490 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076ee:	e00a      	b.n	8007706 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f0:	f7fe fece 	bl	8006490 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076fe:	4293      	cmp	r3, r2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e0cb      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007706:	4b49      	ldr	r3, [pc, #292]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 8007708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0ee      	beq.n	80076f0 <HAL_RCC_OscConfig+0x334>
 8007712:	e014      	b.n	800773e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007714:	f7fe febc 	bl	8006490 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800771a:	e00a      	b.n	8007732 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800771c:	f7fe feb8 	bl	8006490 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800772a:	4293      	cmp	r3, r2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e0b5      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007732:	4b3e      	ldr	r3, [pc, #248]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 8007734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1ee      	bne.n	800771c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d105      	bne.n	8007750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007744:	4b39      	ldr	r3, [pc, #228]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	4a38      	ldr	r2, [pc, #224]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 800774a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800774e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80a1 	beq.w	800789c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800775a:	4b34      	ldr	r3, [pc, #208]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 030c 	and.w	r3, r3, #12
 8007762:	2b08      	cmp	r3, #8
 8007764:	d05c      	beq.n	8007820 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d141      	bne.n	80077f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800776e:	4b31      	ldr	r3, [pc, #196]	@ (8007834 <HAL_RCC_OscConfig+0x478>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007774:	f7fe fe8c 	bl	8006490 <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800777c:	f7fe fe88 	bl	8006490 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e087      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800778e:	4b27      	ldr	r3, [pc, #156]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f0      	bne.n	800777c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69da      	ldr	r2, [r3, #28]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a8:	019b      	lsls	r3, r3, #6
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b0:	085b      	lsrs	r3, r3, #1
 80077b2:	3b01      	subs	r3, #1
 80077b4:	041b      	lsls	r3, r3, #16
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077bc:	061b      	lsls	r3, r3, #24
 80077be:	491b      	ldr	r1, [pc, #108]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007834 <HAL_RCC_OscConfig+0x478>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ca:	f7fe fe61 	bl	8006490 <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d2:	f7fe fe5d 	bl	8006490 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e05c      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077e4:	4b11      	ldr	r3, [pc, #68]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <HAL_RCC_OscConfig+0x416>
 80077f0:	e054      	b.n	800789c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f2:	4b10      	ldr	r3, [pc, #64]	@ (8007834 <HAL_RCC_OscConfig+0x478>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f8:	f7fe fe4a 	bl	8006490 <HAL_GetTick>
 80077fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077fe:	e008      	b.n	8007812 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007800:	f7fe fe46 	bl	8006490 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d901      	bls.n	8007812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e045      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007812:	4b06      	ldr	r3, [pc, #24]	@ (800782c <HAL_RCC_OscConfig+0x470>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1f0      	bne.n	8007800 <HAL_RCC_OscConfig+0x444>
 800781e:	e03d      	b.n	800789c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d107      	bne.n	8007838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e038      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
 800782c:	40023800 	.word	0x40023800
 8007830:	40007000 	.word	0x40007000
 8007834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007838:	4b1b      	ldr	r3, [pc, #108]	@ (80078a8 <HAL_RCC_OscConfig+0x4ec>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d028      	beq.n	8007898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007850:	429a      	cmp	r2, r3
 8007852:	d121      	bne.n	8007898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800785e:	429a      	cmp	r2, r3
 8007860:	d11a      	bne.n	8007898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007868:	4013      	ands	r3, r2
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800786e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007870:	4293      	cmp	r3, r2
 8007872:	d111      	bne.n	8007898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	3b01      	subs	r3, #1
 8007882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007884:	429a      	cmp	r2, r3
 8007886:	d107      	bne.n	8007898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007894:	429a      	cmp	r2, r3
 8007896:	d001      	beq.n	800789c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e000      	b.n	800789e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	40023800 	.word	0x40023800

080078ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e0cc      	b.n	8007a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078c0:	4b68      	ldr	r3, [pc, #416]	@ (8007a64 <HAL_RCC_ClockConfig+0x1b8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0307 	and.w	r3, r3, #7
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d90c      	bls.n	80078e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ce:	4b65      	ldr	r3, [pc, #404]	@ (8007a64 <HAL_RCC_ClockConfig+0x1b8>)
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078d6:	4b63      	ldr	r3, [pc, #396]	@ (8007a64 <HAL_RCC_ClockConfig+0x1b8>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d001      	beq.n	80078e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e0b8      	b.n	8007a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d020      	beq.n	8007936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007900:	4b59      	ldr	r3, [pc, #356]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	4a58      	ldr	r2, [pc, #352]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 8007906:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800790a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0308 	and.w	r3, r3, #8
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007918:	4b53      	ldr	r3, [pc, #332]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	4a52      	ldr	r2, [pc, #328]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 800791e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007924:	4b50      	ldr	r3, [pc, #320]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	494d      	ldr	r1, [pc, #308]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	4313      	orrs	r3, r2
 8007934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d044      	beq.n	80079cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d107      	bne.n	800795a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800794a:	4b47      	ldr	r3, [pc, #284]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d119      	bne.n	800798a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e07f      	b.n	8007a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2b02      	cmp	r3, #2
 8007960:	d003      	beq.n	800796a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007966:	2b03      	cmp	r3, #3
 8007968:	d107      	bne.n	800797a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800796a:	4b3f      	ldr	r3, [pc, #252]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d109      	bne.n	800798a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e06f      	b.n	8007a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800797a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e067      	b.n	8007a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800798a:	4b37      	ldr	r3, [pc, #220]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f023 0203 	bic.w	r2, r3, #3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	4934      	ldr	r1, [pc, #208]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 8007998:	4313      	orrs	r3, r2
 800799a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800799c:	f7fe fd78 	bl	8006490 <HAL_GetTick>
 80079a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079a2:	e00a      	b.n	80079ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079a4:	f7fe fd74 	bl	8006490 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e04f      	b.n	8007a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 020c 	and.w	r2, r3, #12
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d1eb      	bne.n	80079a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079cc:	4b25      	ldr	r3, [pc, #148]	@ (8007a64 <HAL_RCC_ClockConfig+0x1b8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d20c      	bcs.n	80079f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079da:	4b22      	ldr	r3, [pc, #136]	@ (8007a64 <HAL_RCC_ClockConfig+0x1b8>)
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	b2d2      	uxtb	r2, r2
 80079e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e2:	4b20      	ldr	r3, [pc, #128]	@ (8007a64 <HAL_RCC_ClockConfig+0x1b8>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d001      	beq.n	80079f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e032      	b.n	8007a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d008      	beq.n	8007a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a00:	4b19      	ldr	r3, [pc, #100]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	4916      	ldr	r1, [pc, #88]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a1e:	4b12      	ldr	r3, [pc, #72]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	490e      	ldr	r1, [pc, #56]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a32:	f000 f821 	bl	8007a78 <HAL_RCC_GetSysClockFreq>
 8007a36:	4602      	mov	r2, r0
 8007a38:	4b0b      	ldr	r3, [pc, #44]	@ (8007a68 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	091b      	lsrs	r3, r3, #4
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	490a      	ldr	r1, [pc, #40]	@ (8007a6c <HAL_RCC_ClockConfig+0x1c0>)
 8007a44:	5ccb      	ldrb	r3, [r1, r3]
 8007a46:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4a:	4a09      	ldr	r2, [pc, #36]	@ (8007a70 <HAL_RCC_ClockConfig+0x1c4>)
 8007a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a4e:	4b09      	ldr	r3, [pc, #36]	@ (8007a74 <HAL_RCC_ClockConfig+0x1c8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fcd8 	bl	8006408 <HAL_InitTick>

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	40023c00 	.word	0x40023c00
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	0800f584 	.word	0x0800f584
 8007a70:	2000002c 	.word	0x2000002c
 8007a74:	20000064 	.word	0x20000064

08007a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a7c:	b090      	sub	sp, #64	@ 0x40
 8007a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a90:	4b59      	ldr	r3, [pc, #356]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 030c 	and.w	r3, r3, #12
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d00d      	beq.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	f200 80a1 	bhi.w	8007be4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <HAL_RCC_GetSysClockFreq+0x34>
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d003      	beq.n	8007ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007aaa:	e09b      	b.n	8007be4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007aac:	4b53      	ldr	r3, [pc, #332]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8007aae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ab0:	e09b      	b.n	8007bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ab2:	4b53      	ldr	r3, [pc, #332]	@ (8007c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ab6:	e098      	b.n	8007bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d028      	beq.n	8007b20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ace:	4b4a      	ldr	r3, [pc, #296]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	099b      	lsrs	r3, r3, #6
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	623b      	str	r3, [r7, #32]
 8007ad8:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4b47      	ldr	r3, [pc, #284]	@ (8007c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ae4:	fb03 f201 	mul.w	r2, r3, r1
 8007ae8:	2300      	movs	r3, #0
 8007aea:	fb00 f303 	mul.w	r3, r0, r3
 8007aee:	4413      	add	r3, r2
 8007af0:	4a43      	ldr	r2, [pc, #268]	@ (8007c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8007af2:	fba0 1202 	umull	r1, r2, r0, r2
 8007af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007af8:	460a      	mov	r2, r1
 8007afa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007afe:	4413      	add	r3, r2
 8007b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b04:	2200      	movs	r2, #0
 8007b06:	61bb      	str	r3, [r7, #24]
 8007b08:	61fa      	str	r2, [r7, #28]
 8007b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007b12:	f7f9 f851 	bl	8000bb8 <__aeabi_uldivmod>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b1e:	e053      	b.n	8007bc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b20:	4b35      	ldr	r3, [pc, #212]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	099b      	lsrs	r3, r3, #6
 8007b26:	2200      	movs	r2, #0
 8007b28:	613b      	str	r3, [r7, #16]
 8007b2a:	617a      	str	r2, [r7, #20]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007b32:	f04f 0b00 	mov.w	fp, #0
 8007b36:	4652      	mov	r2, sl
 8007b38:	465b      	mov	r3, fp
 8007b3a:	f04f 0000 	mov.w	r0, #0
 8007b3e:	f04f 0100 	mov.w	r1, #0
 8007b42:	0159      	lsls	r1, r3, #5
 8007b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b48:	0150      	lsls	r0, r2, #5
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	ebb2 080a 	subs.w	r8, r2, sl
 8007b52:	eb63 090b 	sbc.w	r9, r3, fp
 8007b56:	f04f 0200 	mov.w	r2, #0
 8007b5a:	f04f 0300 	mov.w	r3, #0
 8007b5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007b62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007b66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007b6a:	ebb2 0408 	subs.w	r4, r2, r8
 8007b6e:	eb63 0509 	sbc.w	r5, r3, r9
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	00eb      	lsls	r3, r5, #3
 8007b7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b80:	00e2      	lsls	r2, r4, #3
 8007b82:	4614      	mov	r4, r2
 8007b84:	461d      	mov	r5, r3
 8007b86:	eb14 030a 	adds.w	r3, r4, sl
 8007b8a:	603b      	str	r3, [r7, #0]
 8007b8c:	eb45 030b 	adc.w	r3, r5, fp
 8007b90:	607b      	str	r3, [r7, #4]
 8007b92:	f04f 0200 	mov.w	r2, #0
 8007b96:	f04f 0300 	mov.w	r3, #0
 8007b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	028b      	lsls	r3, r1, #10
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ba8:	4621      	mov	r1, r4
 8007baa:	028a      	lsls	r2, r1, #10
 8007bac:	4610      	mov	r0, r2
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	60bb      	str	r3, [r7, #8]
 8007bb6:	60fa      	str	r2, [r7, #12]
 8007bb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bbc:	f7f8 fffc 	bl	8000bb8 <__aeabi_uldivmod>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	0c1b      	lsrs	r3, r3, #16
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007bd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007be2:	e002      	b.n	8007bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007be4:	4b05      	ldr	r3, [pc, #20]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8007be6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3740      	adds	r7, #64	@ 0x40
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	00f42400 	.word	0x00f42400
 8007c00:	017d7840 	.word	0x017d7840

08007c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c08:	4b03      	ldr	r3, [pc, #12]	@ (8007c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	2000002c 	.word	0x2000002c

08007c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c20:	f7ff fff0 	bl	8007c04 <HAL_RCC_GetHCLKFreq>
 8007c24:	4602      	mov	r2, r0
 8007c26:	4b05      	ldr	r3, [pc, #20]	@ (8007c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	0a9b      	lsrs	r3, r3, #10
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	4903      	ldr	r1, [pc, #12]	@ (8007c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c32:	5ccb      	ldrb	r3, [r1, r3]
 8007c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	0800f594 	.word	0x0800f594

08007c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c48:	f7ff ffdc 	bl	8007c04 <HAL_RCC_GetHCLKFreq>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	4b05      	ldr	r3, [pc, #20]	@ (8007c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	0b5b      	lsrs	r3, r3, #13
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	4903      	ldr	r1, [pc, #12]	@ (8007c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c5a:	5ccb      	ldrb	r3, [r1, r3]
 8007c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	40023800 	.word	0x40023800
 8007c68:	0800f594 	.word	0x0800f594

08007c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e07b      	b.n	8007d76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d108      	bne.n	8007c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c8e:	d009      	beq.n	8007ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	61da      	str	r2, [r3, #28]
 8007c96:	e005      	b.n	8007ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d106      	bne.n	8007cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7fc fed8 	bl	8004a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	431a      	orrs	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d28:	ea42 0103 	orr.w	r1, r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d30:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	0c1b      	lsrs	r3, r3, #16
 8007d42:	f003 0104 	and.w	r1, r3, #4
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4a:	f003 0210 	and.w	r2, r3, #16
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b088      	sub	sp, #32
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	603b      	str	r3, [r7, #0]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d8e:	f7fe fb7f 	bl	8006490 <HAL_GetTick>
 8007d92:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d001      	beq.n	8007da8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007da4:	2302      	movs	r3, #2
 8007da6:	e12a      	b.n	8007ffe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <HAL_SPI_Transmit+0x36>
 8007dae:	88fb      	ldrh	r3, [r7, #6]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e122      	b.n	8007ffe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d101      	bne.n	8007dc6 <HAL_SPI_Transmit+0x48>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e11b      	b.n	8007ffe <HAL_SPI_Transmit+0x280>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	88fa      	ldrh	r2, [r7, #6]
 8007de6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	88fa      	ldrh	r2, [r7, #6]
 8007dec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e14:	d10f      	bne.n	8007e36 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e40:	2b40      	cmp	r3, #64	@ 0x40
 8007e42:	d007      	beq.n	8007e54 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e5c:	d152      	bne.n	8007f04 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <HAL_SPI_Transmit+0xee>
 8007e66:	8b7b      	ldrh	r3, [r7, #26]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d145      	bne.n	8007ef8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e70:	881a      	ldrh	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e7c:	1c9a      	adds	r2, r3, #2
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e90:	e032      	b.n	8007ef8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d112      	bne.n	8007ec6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea4:	881a      	ldrh	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb0:	1c9a      	adds	r2, r3, #2
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ec4:	e018      	b.n	8007ef8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ec6:	f7fe fae3 	bl	8006490 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d803      	bhi.n	8007ede <HAL_SPI_Transmit+0x160>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007edc:	d102      	bne.n	8007ee4 <HAL_SPI_Transmit+0x166>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d109      	bne.n	8007ef8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e082      	b.n	8007ffe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1c7      	bne.n	8007e92 <HAL_SPI_Transmit+0x114>
 8007f02:	e053      	b.n	8007fac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <HAL_SPI_Transmit+0x194>
 8007f0c:	8b7b      	ldrh	r3, [r7, #26]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d147      	bne.n	8007fa2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	330c      	adds	r3, #12
 8007f1c:	7812      	ldrb	r2, [r2, #0]
 8007f1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f38:	e033      	b.n	8007fa2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d113      	bne.n	8007f70 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	330c      	adds	r3, #12
 8007f52:	7812      	ldrb	r2, [r2, #0]
 8007f54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007f6e:	e018      	b.n	8007fa2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f70:	f7fe fa8e 	bl	8006490 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d803      	bhi.n	8007f88 <HAL_SPI_Transmit+0x20a>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f86:	d102      	bne.n	8007f8e <HAL_SPI_Transmit+0x210>
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d109      	bne.n	8007fa2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e02d      	b.n	8007ffe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1c6      	bne.n	8007f3a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 fbd9 	bl	8008768 <SPI_EndRxTxTransaction>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fca:	2300      	movs	r3, #0
 8007fcc:	617b      	str	r3, [r7, #20]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	617b      	str	r3, [r7, #20]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
  }
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b088      	sub	sp, #32
 800800a:	af02      	add	r7, sp, #8
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	603b      	str	r3, [r7, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b01      	cmp	r3, #1
 8008020:	d001      	beq.n	8008026 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008022:	2302      	movs	r3, #2
 8008024:	e104      	b.n	8008230 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <HAL_SPI_Receive+0x2c>
 800802c:	88fb      	ldrh	r3, [r7, #6]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e0fc      	b.n	8008230 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800803e:	d112      	bne.n	8008066 <HAL_SPI_Receive+0x60>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10e      	bne.n	8008066 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2204      	movs	r2, #4
 800804c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008050:	88fa      	ldrh	r2, [r7, #6]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	4613      	mov	r3, r2
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 f8eb 	bl	8008238 <HAL_SPI_TransmitReceive>
 8008062:	4603      	mov	r3, r0
 8008064:	e0e4      	b.n	8008230 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008066:	f7fe fa13 	bl	8006490 <HAL_GetTick>
 800806a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <HAL_SPI_Receive+0x74>
 8008076:	2302      	movs	r3, #2
 8008078:	e0da      	b.n	8008230 <HAL_SPI_Receive+0x22a>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2204      	movs	r2, #4
 8008086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	88fa      	ldrh	r2, [r7, #6]
 800809a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	88fa      	ldrh	r2, [r7, #6]
 80080a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080c8:	d10f      	bne.n	80080ea <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80080e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080f4:	2b40      	cmp	r3, #64	@ 0x40
 80080f6:	d007      	beq.n	8008108 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008106:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d170      	bne.n	80081f2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008110:	e035      	b.n	800817e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b01      	cmp	r3, #1
 800811e:	d115      	bne.n	800814c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f103 020c 	add.w	r2, r3, #12
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812c:	7812      	ldrb	r2, [r2, #0]
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008140:	b29b      	uxth	r3, r3
 8008142:	3b01      	subs	r3, #1
 8008144:	b29a      	uxth	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800814a:	e018      	b.n	800817e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800814c:	f7fe f9a0 	bl	8006490 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d803      	bhi.n	8008164 <HAL_SPI_Receive+0x15e>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008162:	d102      	bne.n	800816a <HAL_SPI_Receive+0x164>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e058      	b.n	8008230 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008182:	b29b      	uxth	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1c4      	bne.n	8008112 <HAL_SPI_Receive+0x10c>
 8008188:	e038      	b.n	80081fc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b01      	cmp	r3, #1
 8008196:	d113      	bne.n	80081c0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a2:	b292      	uxth	r2, r2
 80081a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081aa:	1c9a      	adds	r2, r3, #2
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081be:	e018      	b.n	80081f2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081c0:	f7fe f966 	bl	8006490 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d803      	bhi.n	80081d8 <HAL_SPI_Receive+0x1d2>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d102      	bne.n	80081de <HAL_SPI_Receive+0x1d8>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e01e      	b.n	8008230 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1c6      	bne.n	800818a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fa4b 	bl	800869c <SPI_EndRxTransaction>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2220      	movs	r2, #32
 8008210:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800822e:	2300      	movs	r3, #0
  }
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08a      	sub	sp, #40	@ 0x28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008246:	2301      	movs	r3, #1
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800824a:	f7fe f921 	bl	8006490 <HAL_GetTick>
 800824e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008256:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800825e:	887b      	ldrh	r3, [r7, #2]
 8008260:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008262:	7ffb      	ldrb	r3, [r7, #31]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d00c      	beq.n	8008282 <HAL_SPI_TransmitReceive+0x4a>
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800826e:	d106      	bne.n	800827e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <HAL_SPI_TransmitReceive+0x46>
 8008278:	7ffb      	ldrb	r3, [r7, #31]
 800827a:	2b04      	cmp	r3, #4
 800827c:	d001      	beq.n	8008282 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800827e:	2302      	movs	r3, #2
 8008280:	e17f      	b.n	8008582 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d005      	beq.n	8008294 <HAL_SPI_TransmitReceive+0x5c>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <HAL_SPI_TransmitReceive+0x5c>
 800828e:	887b      	ldrh	r3, [r7, #2]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e174      	b.n	8008582 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d101      	bne.n	80082a6 <HAL_SPI_TransmitReceive+0x6e>
 80082a2:	2302      	movs	r3, #2
 80082a4:	e16d      	b.n	8008582 <HAL_SPI_TransmitReceive+0x34a>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d003      	beq.n	80082c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2205      	movs	r2, #5
 80082be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	887a      	ldrh	r2, [r7, #2]
 80082d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	887a      	ldrh	r2, [r7, #2]
 80082d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	887a      	ldrh	r2, [r7, #2]
 80082e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	887a      	ldrh	r2, [r7, #2]
 80082ea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008302:	2b40      	cmp	r3, #64	@ 0x40
 8008304:	d007      	beq.n	8008316 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008314:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800831e:	d17e      	bne.n	800841e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <HAL_SPI_TransmitReceive+0xf6>
 8008328:	8afb      	ldrh	r3, [r7, #22]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d16c      	bne.n	8008408 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008332:	881a      	ldrh	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833e:	1c9a      	adds	r2, r3, #2
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008348:	b29b      	uxth	r3, r3
 800834a:	3b01      	subs	r3, #1
 800834c:	b29a      	uxth	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008352:	e059      	b.n	8008408 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b02      	cmp	r3, #2
 8008360:	d11b      	bne.n	800839a <HAL_SPI_TransmitReceive+0x162>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008366:	b29b      	uxth	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d016      	beq.n	800839a <HAL_SPI_TransmitReceive+0x162>
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	2b01      	cmp	r3, #1
 8008370:	d113      	bne.n	800839a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008376:	881a      	ldrh	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008382:	1c9a      	adds	r2, r3, #2
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800838c:	b29b      	uxth	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d119      	bne.n	80083dc <HAL_SPI_TransmitReceive+0x1a4>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d014      	beq.n	80083dc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083bc:	b292      	uxth	r2, r2
 80083be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c4:	1c9a      	adds	r2, r3, #2
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083d8:	2301      	movs	r3, #1
 80083da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083dc:	f7fe f858 	bl	8006490 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d80d      	bhi.n	8008408 <HAL_SPI_TransmitReceive+0x1d0>
 80083ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f2:	d009      	beq.n	8008408 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e0bc      	b.n	8008582 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800840c:	b29b      	uxth	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1a0      	bne.n	8008354 <HAL_SPI_TransmitReceive+0x11c>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d19b      	bne.n	8008354 <HAL_SPI_TransmitReceive+0x11c>
 800841c:	e082      	b.n	8008524 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <HAL_SPI_TransmitReceive+0x1f4>
 8008426:	8afb      	ldrh	r3, [r7, #22]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d171      	bne.n	8008510 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008452:	e05d      	b.n	8008510 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b02      	cmp	r3, #2
 8008460:	d11c      	bne.n	800849c <HAL_SPI_TransmitReceive+0x264>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008466:	b29b      	uxth	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	d017      	beq.n	800849c <HAL_SPI_TransmitReceive+0x264>
 800846c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846e:	2b01      	cmp	r3, #1
 8008470:	d114      	bne.n	800849c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	330c      	adds	r3, #12
 800847c:	7812      	ldrb	r2, [r2, #0]
 800847e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800848e:	b29b      	uxth	r3, r3
 8008490:	3b01      	subs	r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d119      	bne.n	80084de <HAL_SPI_TransmitReceive+0x2a6>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d014      	beq.n	80084de <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084da:	2301      	movs	r3, #1
 80084dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084de:	f7fd ffd7 	bl	8006490 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d803      	bhi.n	80084f6 <HAL_SPI_TransmitReceive+0x2be>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f4:	d102      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x2c4>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d109      	bne.n	8008510 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e038      	b.n	8008582 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008514:	b29b      	uxth	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d19c      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x21c>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d197      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008524:	6a3a      	ldr	r2, [r7, #32]
 8008526:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f91d 	bl	8008768 <SPI_EndRxTxTransaction>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d008      	beq.n	8008546 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2220      	movs	r2, #32
 8008538:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e01d      	b.n	8008582 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800854e:	2300      	movs	r3, #0
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e000      	b.n	8008582 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008580:	2300      	movs	r3, #0
  }
}
 8008582:	4618      	mov	r0, r3
 8008584:	3728      	adds	r7, #40	@ 0x28
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	4613      	mov	r3, r2
 800859a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800859c:	f7fd ff78 	bl	8006490 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4413      	add	r3, r2
 80085aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085ac:	f7fd ff70 	bl	8006490 <HAL_GetTick>
 80085b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085b2:	4b39      	ldr	r3, [pc, #228]	@ (8008698 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	015b      	lsls	r3, r3, #5
 80085b8:	0d1b      	lsrs	r3, r3, #20
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	fb02 f303 	mul.w	r3, r2, r3
 80085c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085c2:	e055      	b.n	8008670 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ca:	d051      	beq.n	8008670 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085cc:	f7fd ff60 	bl	8006490 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	69fa      	ldr	r2, [r7, #28]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d902      	bls.n	80085e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d13d      	bne.n	800865e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80085f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085fa:	d111      	bne.n	8008620 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008604:	d004      	beq.n	8008610 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800860e:	d107      	bne.n	8008620 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800861e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008628:	d10f      	bne.n	800864a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e018      	b.n	8008690 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	61fb      	str	r3, [r7, #28]
 8008668:	e002      	b.n	8008670 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	3b01      	subs	r3, #1
 800866e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	4013      	ands	r3, r2
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	429a      	cmp	r2, r3
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	461a      	mov	r2, r3
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	429a      	cmp	r2, r3
 800868c:	d19a      	bne.n	80085c4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3720      	adds	r7, #32
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	2000002c 	.word	0x2000002c

0800869c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086b0:	d111      	bne.n	80086d6 <SPI_EndRxTransaction+0x3a>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086ba:	d004      	beq.n	80086c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086c4:	d107      	bne.n	80086d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086de:	d12a      	bne.n	8008736 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086e8:	d012      	beq.n	8008710 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2200      	movs	r2, #0
 80086f2:	2180      	movs	r1, #128	@ 0x80
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7ff ff49 	bl	800858c <SPI_WaitFlagStateUntilTimeout>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d02d      	beq.n	800875c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008704:	f043 0220 	orr.w	r2, r3, #32
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e026      	b.n	800875e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	2101      	movs	r1, #1
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f7ff ff36 	bl	800858c <SPI_WaitFlagStateUntilTimeout>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d01a      	beq.n	800875c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872a:	f043 0220 	orr.w	r2, r3, #32
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e013      	b.n	800875e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2200      	movs	r2, #0
 800873e:	2101      	movs	r1, #1
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff ff23 	bl	800858c <SPI_WaitFlagStateUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d007      	beq.n	800875c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008750:	f043 0220 	orr.w	r2, r3, #32
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e000      	b.n	800875e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af02      	add	r7, sp, #8
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2201      	movs	r2, #1
 800877c:	2102      	movs	r1, #2
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f7ff ff04 	bl	800858c <SPI_WaitFlagStateUntilTimeout>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800878e:	f043 0220 	orr.w	r2, r3, #32
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e032      	b.n	8008800 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800879a:	4b1b      	ldr	r3, [pc, #108]	@ (8008808 <SPI_EndRxTxTransaction+0xa0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1b      	ldr	r2, [pc, #108]	@ (800880c <SPI_EndRxTxTransaction+0xa4>)
 80087a0:	fba2 2303 	umull	r2, r3, r2, r3
 80087a4:	0d5b      	lsrs	r3, r3, #21
 80087a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80087aa:	fb02 f303 	mul.w	r3, r2, r3
 80087ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087b8:	d112      	bne.n	80087e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2200      	movs	r2, #0
 80087c2:	2180      	movs	r1, #128	@ 0x80
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff fee1 	bl	800858c <SPI_WaitFlagStateUntilTimeout>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d016      	beq.n	80087fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087d4:	f043 0220 	orr.w	r2, r3, #32
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e00f      	b.n	8008800 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087f6:	2b80      	cmp	r3, #128	@ 0x80
 80087f8:	d0f2      	beq.n	80087e0 <SPI_EndRxTxTransaction+0x78>
 80087fa:	e000      	b.n	80087fe <SPI_EndRxTxTransaction+0x96>
        break;
 80087fc:	bf00      	nop
  }

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	2000002c 	.word	0x2000002c
 800880c:	165e9f81 	.word	0x165e9f81

08008810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e041      	b.n	80088a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fc f964 	bl	8004b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3304      	adds	r3, #4
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f000 fd7a 	bl	8009348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e041      	b.n	8008944 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f839 	bl	800894c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2202      	movs	r2, #2
 80088de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f000 fd2b 	bl	8009348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d109      	bne.n	8008984 <HAL_TIM_PWM_Start+0x24>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b01      	cmp	r3, #1
 800897a:	bf14      	ite	ne
 800897c:	2301      	movne	r3, #1
 800897e:	2300      	moveq	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	e022      	b.n	80089ca <HAL_TIM_PWM_Start+0x6a>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b04      	cmp	r3, #4
 8008988:	d109      	bne.n	800899e <HAL_TIM_PWM_Start+0x3e>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b01      	cmp	r3, #1
 8008994:	bf14      	ite	ne
 8008996:	2301      	movne	r3, #1
 8008998:	2300      	moveq	r3, #0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	e015      	b.n	80089ca <HAL_TIM_PWM_Start+0x6a>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b08      	cmp	r3, #8
 80089a2:	d109      	bne.n	80089b8 <HAL_TIM_PWM_Start+0x58>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	bf14      	ite	ne
 80089b0:	2301      	movne	r3, #1
 80089b2:	2300      	moveq	r3, #0
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	e008      	b.n	80089ca <HAL_TIM_PWM_Start+0x6a>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	bf14      	ite	ne
 80089c4:	2301      	movne	r3, #1
 80089c6:	2300      	moveq	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e068      	b.n	8008aa4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <HAL_TIM_PWM_Start+0x82>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2202      	movs	r2, #2
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089e0:	e013      	b.n	8008a0a <HAL_TIM_PWM_Start+0xaa>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	d104      	bne.n	80089f2 <HAL_TIM_PWM_Start+0x92>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089f0:	e00b      	b.n	8008a0a <HAL_TIM_PWM_Start+0xaa>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	d104      	bne.n	8008a02 <HAL_TIM_PWM_Start+0xa2>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a00:	e003      	b.n	8008a0a <HAL_TIM_PWM_Start+0xaa>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2202      	movs	r2, #2
 8008a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 ff44 	bl	80098a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a23      	ldr	r2, [pc, #140]	@ (8008aac <HAL_TIM_PWM_Start+0x14c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d107      	bne.n	8008a32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a1d      	ldr	r2, [pc, #116]	@ (8008aac <HAL_TIM_PWM_Start+0x14c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d018      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x10e>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a44:	d013      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x10e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a19      	ldr	r2, [pc, #100]	@ (8008ab0 <HAL_TIM_PWM_Start+0x150>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00e      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x10e>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a17      	ldr	r2, [pc, #92]	@ (8008ab4 <HAL_TIM_PWM_Start+0x154>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d009      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x10e>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a16      	ldr	r2, [pc, #88]	@ (8008ab8 <HAL_TIM_PWM_Start+0x158>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_TIM_PWM_Start+0x10e>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a14      	ldr	r2, [pc, #80]	@ (8008abc <HAL_TIM_PWM_Start+0x15c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d111      	bne.n	8008a92 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b06      	cmp	r3, #6
 8008a7e:	d010      	beq.n	8008aa2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0201 	orr.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a90:	e007      	b.n	8008aa2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f042 0201 	orr.w	r2, r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	40010000 	.word	0x40010000
 8008ab0:	40000400 	.word	0x40000400
 8008ab4:	40000800 	.word	0x40000800
 8008ab8:	40000c00 	.word	0x40000c00
 8008abc:	40014000 	.word	0x40014000

08008ac0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fee4 	bl	80098a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a29      	ldr	r2, [pc, #164]	@ (8008b84 <HAL_TIM_PWM_Stop+0xc4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d117      	bne.n	8008b12 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6a1a      	ldr	r2, [r3, #32]
 8008ae8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008aec:	4013      	ands	r3, r2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10f      	bne.n	8008b12 <HAL_TIM_PWM_Stop+0x52>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6a1a      	ldr	r2, [r3, #32]
 8008af8:	f240 4344 	movw	r3, #1092	@ 0x444
 8008afc:	4013      	ands	r3, r2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d107      	bne.n	8008b12 <HAL_TIM_PWM_Stop+0x52>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6a1a      	ldr	r2, [r3, #32]
 8008b18:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10f      	bne.n	8008b42 <HAL_TIM_PWM_Stop+0x82>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6a1a      	ldr	r2, [r3, #32]
 8008b28:	f240 4344 	movw	r3, #1092	@ 0x444
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d107      	bne.n	8008b42 <HAL_TIM_PWM_Stop+0x82>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f022 0201 	bic.w	r2, r2, #1
 8008b40:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d104      	bne.n	8008b52 <HAL_TIM_PWM_Stop+0x92>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b50:	e013      	b.n	8008b7a <HAL_TIM_PWM_Stop+0xba>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d104      	bne.n	8008b62 <HAL_TIM_PWM_Stop+0xa2>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b60:	e00b      	b.n	8008b7a <HAL_TIM_PWM_Stop+0xba>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d104      	bne.n	8008b72 <HAL_TIM_PWM_Stop+0xb2>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b70:	e003      	b.n	8008b7a <HAL_TIM_PWM_Stop+0xba>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	40010000 	.word	0x40010000

08008b88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e097      	b.n	8008ccc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7fb ffe5 	bl	8004b80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2202      	movs	r2, #2
 8008bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bcc:	f023 0307 	bic.w	r3, r3, #7
 8008bd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3304      	adds	r3, #4
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f000 fbb3 	bl	8009348 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c0a:	f023 0303 	bic.w	r3, r3, #3
 8008c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	021b      	lsls	r3, r3, #8
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008c28:	f023 030c 	bic.w	r3, r3, #12
 8008c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	021b      	lsls	r3, r3, #8
 8008c44:	4313      	orrs	r3, r2
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	011a      	lsls	r2, r3, #4
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	031b      	lsls	r3, r3, #12
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008c66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008c6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	011b      	lsls	r3, r3, #4
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ce4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008cec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cf4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008cfc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d110      	bne.n	8008d26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d102      	bne.n	8008d10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d0a:	7b7b      	ldrb	r3, [r7, #13]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d001      	beq.n	8008d14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e069      	b.n	8008de8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d24:	e031      	b.n	8008d8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d110      	bne.n	8008d4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d102      	bne.n	8008d38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d32:	7b3b      	ldrb	r3, [r7, #12]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d001      	beq.n	8008d3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e055      	b.n	8008de8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d4c:	e01d      	b.n	8008d8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d108      	bne.n	8008d66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d105      	bne.n	8008d66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d5a:	7b7b      	ldrb	r3, [r7, #13]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d102      	bne.n	8008d66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d60:	7b3b      	ldrb	r3, [r7, #12]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d001      	beq.n	8008d6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e03e      	b.n	8008de8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2202      	movs	r2, #2
 8008d76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2202      	movs	r2, #2
 8008d86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <HAL_TIM_Encoder_Start+0xc4>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d008      	beq.n	8008da8 <HAL_TIM_Encoder_Start+0xd4>
 8008d96:	e00f      	b.n	8008db8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	2100      	movs	r1, #0
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 fd7d 	bl	80098a0 <TIM_CCxChannelCmd>
      break;
 8008da6:	e016      	b.n	8008dd6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2201      	movs	r2, #1
 8008dae:	2104      	movs	r1, #4
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fd75 	bl	80098a0 <TIM_CCxChannelCmd>
      break;
 8008db6:	e00e      	b.n	8008dd6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 fd6d 	bl	80098a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	2104      	movs	r1, #4
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fd66 	bl	80098a0 <TIM_CCxChannelCmd>
      break;
 8008dd4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f042 0201 	orr.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d020      	beq.n	8008e54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01b      	beq.n	8008e54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f06f 0202 	mvn.w	r2, #2
 8008e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa65 	bl	800930a <HAL_TIM_IC_CaptureCallback>
 8008e40:	e005      	b.n	8008e4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa57 	bl	80092f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fa68 	bl	800931e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d020      	beq.n	8008ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01b      	beq.n	8008ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f06f 0204 	mvn.w	r2, #4
 8008e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2202      	movs	r2, #2
 8008e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa3f 	bl	800930a <HAL_TIM_IC_CaptureCallback>
 8008e8c:	e005      	b.n	8008e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa31 	bl	80092f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fa42 	bl	800931e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f003 0308 	and.w	r3, r3, #8
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d020      	beq.n	8008eec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f003 0308 	and.w	r3, r3, #8
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01b      	beq.n	8008eec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f06f 0208 	mvn.w	r2, #8
 8008ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2204      	movs	r2, #4
 8008ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa19 	bl	800930a <HAL_TIM_IC_CaptureCallback>
 8008ed8:	e005      	b.n	8008ee6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa0b 	bl	80092f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fa1c 	bl	800931e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f003 0310 	and.w	r3, r3, #16
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d020      	beq.n	8008f38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f003 0310 	and.w	r3, r3, #16
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d01b      	beq.n	8008f38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f06f 0210 	mvn.w	r2, #16
 8008f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2208      	movs	r2, #8
 8008f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f9f3 	bl	800930a <HAL_TIM_IC_CaptureCallback>
 8008f24:	e005      	b.n	8008f32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f9e5 	bl	80092f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f9f6 	bl	800931e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00c      	beq.n	8008f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d007      	beq.n	8008f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f06f 0201 	mvn.w	r2, #1
 8008f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f9c3 	bl	80092e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00c      	beq.n	8008f80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d007      	beq.n	8008f80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fd80 	bl	8009a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00c      	beq.n	8008fa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d007      	beq.n	8008fa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f9c7 	bl	8009332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f003 0320 	and.w	r3, r3, #32
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00c      	beq.n	8008fc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f003 0320 	and.w	r3, r3, #32
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d007      	beq.n	8008fc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0220 	mvn.w	r2, #32
 8008fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fd52 	bl	8009a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fc8:	bf00      	nop
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d101      	bne.n	8008fee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008fea:	2302      	movs	r3, #2
 8008fec:	e0ae      	b.n	800914c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b0c      	cmp	r3, #12
 8008ffa:	f200 809f 	bhi.w	800913c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8009004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009039 	.word	0x08009039
 8009008:	0800913d 	.word	0x0800913d
 800900c:	0800913d 	.word	0x0800913d
 8009010:	0800913d 	.word	0x0800913d
 8009014:	08009079 	.word	0x08009079
 8009018:	0800913d 	.word	0x0800913d
 800901c:	0800913d 	.word	0x0800913d
 8009020:	0800913d 	.word	0x0800913d
 8009024:	080090bb 	.word	0x080090bb
 8009028:	0800913d 	.word	0x0800913d
 800902c:	0800913d 	.word	0x0800913d
 8009030:	0800913d 	.word	0x0800913d
 8009034:	080090fb 	.word	0x080090fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68b9      	ldr	r1, [r7, #8]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 fa08 	bl	8009454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699a      	ldr	r2, [r3, #24]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0208 	orr.w	r2, r2, #8
 8009052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	699a      	ldr	r2, [r3, #24]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 0204 	bic.w	r2, r2, #4
 8009062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6999      	ldr	r1, [r3, #24]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	691a      	ldr	r2, [r3, #16]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	430a      	orrs	r2, r1
 8009074:	619a      	str	r2, [r3, #24]
      break;
 8009076:	e064      	b.n	8009142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68b9      	ldr	r1, [r7, #8]
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fa4e 	bl	8009520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699a      	ldr	r2, [r3, #24]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	699a      	ldr	r2, [r3, #24]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6999      	ldr	r1, [r3, #24]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	021a      	lsls	r2, r3, #8
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	430a      	orrs	r2, r1
 80090b6:	619a      	str	r2, [r3, #24]
      break;
 80090b8:	e043      	b.n	8009142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 fa99 	bl	80095f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69da      	ldr	r2, [r3, #28]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f042 0208 	orr.w	r2, r2, #8
 80090d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69da      	ldr	r2, [r3, #28]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f022 0204 	bic.w	r2, r2, #4
 80090e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69d9      	ldr	r1, [r3, #28]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	691a      	ldr	r2, [r3, #16]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	430a      	orrs	r2, r1
 80090f6:	61da      	str	r2, [r3, #28]
      break;
 80090f8:	e023      	b.n	8009142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68b9      	ldr	r1, [r7, #8]
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fae3 	bl	80096cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69da      	ldr	r2, [r3, #28]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	69da      	ldr	r2, [r3, #28]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69d9      	ldr	r1, [r3, #28]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	021a      	lsls	r2, r3, #8
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	61da      	str	r2, [r3, #28]
      break;
 800913a:	e002      	b.n	8009142 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	75fb      	strb	r3, [r7, #23]
      break;
 8009140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800914a:	7dfb      	ldrb	r3, [r7, #23]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009168:	2b01      	cmp	r3, #1
 800916a:	d101      	bne.n	8009170 <HAL_TIM_ConfigClockSource+0x1c>
 800916c:	2302      	movs	r3, #2
 800916e:	e0b4      	b.n	80092da <HAL_TIM_ConfigClockSource+0x186>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2202      	movs	r2, #2
 800917c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800918e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009196:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091a8:	d03e      	beq.n	8009228 <HAL_TIM_ConfigClockSource+0xd4>
 80091aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ae:	f200 8087 	bhi.w	80092c0 <HAL_TIM_ConfigClockSource+0x16c>
 80091b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091b6:	f000 8086 	beq.w	80092c6 <HAL_TIM_ConfigClockSource+0x172>
 80091ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091be:	d87f      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x16c>
 80091c0:	2b70      	cmp	r3, #112	@ 0x70
 80091c2:	d01a      	beq.n	80091fa <HAL_TIM_ConfigClockSource+0xa6>
 80091c4:	2b70      	cmp	r3, #112	@ 0x70
 80091c6:	d87b      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x16c>
 80091c8:	2b60      	cmp	r3, #96	@ 0x60
 80091ca:	d050      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x11a>
 80091cc:	2b60      	cmp	r3, #96	@ 0x60
 80091ce:	d877      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x16c>
 80091d0:	2b50      	cmp	r3, #80	@ 0x50
 80091d2:	d03c      	beq.n	800924e <HAL_TIM_ConfigClockSource+0xfa>
 80091d4:	2b50      	cmp	r3, #80	@ 0x50
 80091d6:	d873      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x16c>
 80091d8:	2b40      	cmp	r3, #64	@ 0x40
 80091da:	d058      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x13a>
 80091dc:	2b40      	cmp	r3, #64	@ 0x40
 80091de:	d86f      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x16c>
 80091e0:	2b30      	cmp	r3, #48	@ 0x30
 80091e2:	d064      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x15a>
 80091e4:	2b30      	cmp	r3, #48	@ 0x30
 80091e6:	d86b      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x16c>
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	d060      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x15a>
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	d867      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x16c>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d05c      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x15a>
 80091f4:	2b10      	cmp	r3, #16
 80091f6:	d05a      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x15a>
 80091f8:	e062      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800920a:	f000 fb29 	bl	8009860 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800921c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	609a      	str	r2, [r3, #8]
      break;
 8009226:	e04f      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009238:	f000 fb12 	bl	8009860 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800924a:	609a      	str	r2, [r3, #8]
      break;
 800924c:	e03c      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800925a:	461a      	mov	r2, r3
 800925c:	f000 fa86 	bl	800976c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2150      	movs	r1, #80	@ 0x50
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fadf 	bl	800982a <TIM_ITRx_SetConfig>
      break;
 800926c:	e02c      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800927a:	461a      	mov	r2, r3
 800927c:	f000 faa5 	bl	80097ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2160      	movs	r1, #96	@ 0x60
 8009286:	4618      	mov	r0, r3
 8009288:	f000 facf 	bl	800982a <TIM_ITRx_SetConfig>
      break;
 800928c:	e01c      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800929a:	461a      	mov	r2, r3
 800929c:	f000 fa66 	bl	800976c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2140      	movs	r1, #64	@ 0x40
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 fabf 	bl	800982a <TIM_ITRx_SetConfig>
      break;
 80092ac:	e00c      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4619      	mov	r1, r3
 80092b8:	4610      	mov	r0, r2
 80092ba:	f000 fab6 	bl	800982a <TIM_ITRx_SetConfig>
      break;
 80092be:	e003      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	73fb      	strb	r3, [r7, #15]
      break;
 80092c4:	e000      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80092ea:	bf00      	nop
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b083      	sub	sp, #12
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092fe:	bf00      	nop
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800930a:	b480      	push	{r7}
 800930c:	b083      	sub	sp, #12
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009312:	bf00      	nop
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009326:	bf00      	nop
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800933a:	bf00      	nop
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
	...

08009348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a37      	ldr	r2, [pc, #220]	@ (8009438 <TIM_Base_SetConfig+0xf0>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d00f      	beq.n	8009380 <TIM_Base_SetConfig+0x38>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009366:	d00b      	beq.n	8009380 <TIM_Base_SetConfig+0x38>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a34      	ldr	r2, [pc, #208]	@ (800943c <TIM_Base_SetConfig+0xf4>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d007      	beq.n	8009380 <TIM_Base_SetConfig+0x38>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a33      	ldr	r2, [pc, #204]	@ (8009440 <TIM_Base_SetConfig+0xf8>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d003      	beq.n	8009380 <TIM_Base_SetConfig+0x38>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a32      	ldr	r2, [pc, #200]	@ (8009444 <TIM_Base_SetConfig+0xfc>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d108      	bne.n	8009392 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	4313      	orrs	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a28      	ldr	r2, [pc, #160]	@ (8009438 <TIM_Base_SetConfig+0xf0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d01b      	beq.n	80093d2 <TIM_Base_SetConfig+0x8a>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093a0:	d017      	beq.n	80093d2 <TIM_Base_SetConfig+0x8a>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a25      	ldr	r2, [pc, #148]	@ (800943c <TIM_Base_SetConfig+0xf4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d013      	beq.n	80093d2 <TIM_Base_SetConfig+0x8a>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a24      	ldr	r2, [pc, #144]	@ (8009440 <TIM_Base_SetConfig+0xf8>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00f      	beq.n	80093d2 <TIM_Base_SetConfig+0x8a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a23      	ldr	r2, [pc, #140]	@ (8009444 <TIM_Base_SetConfig+0xfc>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00b      	beq.n	80093d2 <TIM_Base_SetConfig+0x8a>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a22      	ldr	r2, [pc, #136]	@ (8009448 <TIM_Base_SetConfig+0x100>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d007      	beq.n	80093d2 <TIM_Base_SetConfig+0x8a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a21      	ldr	r2, [pc, #132]	@ (800944c <TIM_Base_SetConfig+0x104>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d003      	beq.n	80093d2 <TIM_Base_SetConfig+0x8a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a20      	ldr	r2, [pc, #128]	@ (8009450 <TIM_Base_SetConfig+0x108>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d108      	bne.n	80093e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a0c      	ldr	r2, [pc, #48]	@ (8009438 <TIM_Base_SetConfig+0xf0>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d103      	bne.n	8009412 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	691a      	ldr	r2, [r3, #16]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f043 0204 	orr.w	r2, r3, #4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	601a      	str	r2, [r3, #0]
}
 800942a:	bf00      	nop
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40010000 	.word	0x40010000
 800943c:	40000400 	.word	0x40000400
 8009440:	40000800 	.word	0x40000800
 8009444:	40000c00 	.word	0x40000c00
 8009448:	40014000 	.word	0x40014000
 800944c:	40014400 	.word	0x40014400
 8009450:	40014800 	.word	0x40014800

08009454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a1b      	ldr	r3, [r3, #32]
 8009468:	f023 0201 	bic.w	r2, r3, #1
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f023 0303 	bic.w	r3, r3, #3
 800948a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	4313      	orrs	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f023 0302 	bic.w	r3, r3, #2
 800949c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a1c      	ldr	r2, [pc, #112]	@ (800951c <TIM_OC1_SetConfig+0xc8>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d10c      	bne.n	80094ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f023 0308 	bic.w	r3, r3, #8
 80094b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	4313      	orrs	r3, r2
 80094c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f023 0304 	bic.w	r3, r3, #4
 80094c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a13      	ldr	r2, [pc, #76]	@ (800951c <TIM_OC1_SetConfig+0xc8>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d111      	bne.n	80094f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	621a      	str	r2, [r3, #32]
}
 8009510:	bf00      	nop
 8009512:	371c      	adds	r7, #28
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	40010000 	.word	0x40010000

08009520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009520:	b480      	push	{r7}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	f023 0210 	bic.w	r2, r3, #16
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800954e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	021b      	lsls	r3, r3, #8
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	4313      	orrs	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f023 0320 	bic.w	r3, r3, #32
 800956a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	4313      	orrs	r3, r2
 8009576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a1e      	ldr	r2, [pc, #120]	@ (80095f4 <TIM_OC2_SetConfig+0xd4>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d10d      	bne.n	800959c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	4313      	orrs	r3, r2
 8009592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800959a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a15      	ldr	r2, [pc, #84]	@ (80095f4 <TIM_OC2_SetConfig+0xd4>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d113      	bne.n	80095cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	4313      	orrs	r3, r2
 80095be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	621a      	str	r2, [r3, #32]
}
 80095e6:	bf00      	nop
 80095e8:	371c      	adds	r7, #28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	40010000 	.word	0x40010000

080095f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0303 	bic.w	r3, r3, #3
 800962e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	021b      	lsls	r3, r3, #8
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	4313      	orrs	r3, r2
 800964c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a1d      	ldr	r2, [pc, #116]	@ (80096c8 <TIM_OC3_SetConfig+0xd0>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d10d      	bne.n	8009672 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800965c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	021b      	lsls	r3, r3, #8
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	4313      	orrs	r3, r2
 8009668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a14      	ldr	r2, [pc, #80]	@ (80096c8 <TIM_OC3_SetConfig+0xd0>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d113      	bne.n	80096a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	4313      	orrs	r3, r2
 8009694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	4313      	orrs	r3, r2
 80096a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	621a      	str	r2, [r3, #32]
}
 80096bc:	bf00      	nop
 80096be:	371c      	adds	r7, #28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	40010000 	.word	0x40010000

080096cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b087      	sub	sp, #28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	021b      	lsls	r3, r3, #8
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4313      	orrs	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	031b      	lsls	r3, r3, #12
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	4313      	orrs	r3, r2
 8009722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a10      	ldr	r2, [pc, #64]	@ (8009768 <TIM_OC4_SetConfig+0x9c>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d109      	bne.n	8009740 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	019b      	lsls	r3, r3, #6
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	621a      	str	r2, [r3, #32]
}
 800975a:	bf00      	nop
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	40010000 	.word	0x40010000

0800976c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	f023 0201 	bic.w	r2, r3, #1
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	4313      	orrs	r3, r2
 80097a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f023 030a 	bic.w	r3, r3, #10
 80097a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	621a      	str	r2, [r3, #32]
}
 80097be:	bf00      	nop
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b087      	sub	sp, #28
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	60f8      	str	r0, [r7, #12]
 80097d2:	60b9      	str	r1, [r7, #8]
 80097d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	f023 0210 	bic.w	r2, r3, #16
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	031b      	lsls	r3, r3, #12
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009806:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	011b      	lsls	r3, r3, #4
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	4313      	orrs	r3, r2
 8009810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	621a      	str	r2, [r3, #32]
}
 800981e:	bf00      	nop
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800982a:	b480      	push	{r7}
 800982c:	b085      	sub	sp, #20
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4313      	orrs	r3, r2
 8009848:	f043 0307 	orr.w	r3, r3, #7
 800984c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	609a      	str	r2, [r3, #8]
}
 8009854:	bf00      	nop
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800987a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	021a      	lsls	r2, r3, #8
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	431a      	orrs	r2, r3
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	4313      	orrs	r3, r2
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4313      	orrs	r3, r2
 800988c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	609a      	str	r2, [r3, #8]
}
 8009894:	bf00      	nop
 8009896:	371c      	adds	r7, #28
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f003 031f 	and.w	r3, r3, #31
 80098b2:	2201      	movs	r2, #1
 80098b4:	fa02 f303 	lsl.w	r3, r2, r3
 80098b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6a1a      	ldr	r2, [r3, #32]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	43db      	mvns	r3, r3
 80098c2:	401a      	ands	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6a1a      	ldr	r2, [r3, #32]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f003 031f 	and.w	r3, r3, #31
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	fa01 f303 	lsl.w	r3, r1, r3
 80098d8:	431a      	orrs	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	621a      	str	r2, [r3, #32]
}
 80098de:	bf00      	nop
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
	...

080098ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d101      	bne.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009900:	2302      	movs	r3, #2
 8009902:	e050      	b.n	80099a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800992a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	4313      	orrs	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a1c      	ldr	r2, [pc, #112]	@ (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d018      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009950:	d013      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a18      	ldr	r2, [pc, #96]	@ (80099b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d00e      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a16      	ldr	r2, [pc, #88]	@ (80099bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d009      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a15      	ldr	r2, [pc, #84]	@ (80099c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d004      	beq.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a13      	ldr	r2, [pc, #76]	@ (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d10c      	bne.n	8009994 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	4313      	orrs	r3, r2
 800998a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	40010000 	.word	0x40010000
 80099b8:	40000400 	.word	0x40000400
 80099bc:	40000800 	.word	0x40000800
 80099c0:	40000c00 	.word	0x40000c00
 80099c4:	40014000 	.word	0x40014000

080099c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d101      	bne.n	80099e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80099e0:	2302      	movs	r3, #2
 80099e2:	e03d      	b.n	8009a60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e042      	b.n	8009b2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d106      	bne.n	8009ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7fb f97a 	bl	8004db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2224      	movs	r2, #36	@ 0x24
 8009ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68da      	ldr	r2, [r3, #12]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fd7f 	bl	800a5dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	691a      	ldr	r2, [r3, #16]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	695a      	ldr	r2, [r3, #20]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68da      	ldr	r2, [r3, #12]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b08a      	sub	sp, #40	@ 0x28
 8009b38:	af02      	add	r7, sp, #8
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	603b      	str	r3, [r7, #0]
 8009b40:	4613      	mov	r3, r2
 8009b42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	2b20      	cmp	r3, #32
 8009b52:	d175      	bne.n	8009c40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <HAL_UART_Transmit+0x2c>
 8009b5a:	88fb      	ldrh	r3, [r7, #6]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e06e      	b.n	8009c42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2221      	movs	r2, #33	@ 0x21
 8009b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b72:	f7fc fc8d 	bl	8006490 <HAL_GetTick>
 8009b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	88fa      	ldrh	r2, [r7, #6]
 8009b7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	88fa      	ldrh	r2, [r7, #6]
 8009b82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b8c:	d108      	bne.n	8009ba0 <HAL_UART_Transmit+0x6c>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d104      	bne.n	8009ba0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	e003      	b.n	8009ba8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ba8:	e02e      	b.n	8009c08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2180      	movs	r1, #128	@ 0x80
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fb1d 	bl	800a1f4 <UART_WaitOnFlagUntilTimeout>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d005      	beq.n	8009bcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e03a      	b.n	8009c42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10b      	bne.n	8009bea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009be0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	3302      	adds	r3, #2
 8009be6:	61bb      	str	r3, [r7, #24]
 8009be8:	e007      	b.n	8009bfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	781a      	ldrb	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1cb      	bne.n	8009baa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2140      	movs	r1, #64	@ 0x40
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 fae9 	bl	800a1f4 <UART_WaitOnFlagUntilTimeout>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d005      	beq.n	8009c34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e006      	b.n	8009c42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e000      	b.n	8009c42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009c40:	2302      	movs	r3, #2
  }
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3720      	adds	r7, #32
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b0ba      	sub	sp, #232	@ 0xe8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c82:	f003 030f 	and.w	r3, r3, #15
 8009c86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10f      	bne.n	8009cb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x66>
 8009c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fbd7 	bl	800a45e <UART_Receive_IT>
      return;
 8009cb0:	e273      	b.n	800a19a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 80de 	beq.w	8009e78 <HAL_UART_IRQHandler+0x22c>
 8009cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d106      	bne.n	8009cd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ccc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 80d1 	beq.w	8009e78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00b      	beq.n	8009cfa <HAL_UART_IRQHandler+0xae>
 8009ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cf2:	f043 0201 	orr.w	r2, r3, #1
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cfe:	f003 0304 	and.w	r3, r3, #4
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00b      	beq.n	8009d1e <HAL_UART_IRQHandler+0xd2>
 8009d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d005      	beq.n	8009d1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d16:	f043 0202 	orr.w	r2, r3, #2
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d22:	f003 0302 	and.w	r3, r3, #2
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <HAL_UART_IRQHandler+0xf6>
 8009d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d005      	beq.n	8009d42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d3a:	f043 0204 	orr.w	r2, r3, #4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d46:	f003 0308 	and.w	r3, r3, #8
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d011      	beq.n	8009d72 <HAL_UART_IRQHandler+0x126>
 8009d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d52:	f003 0320 	and.w	r3, r3, #32
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d105      	bne.n	8009d66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d005      	beq.n	8009d72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d6a:	f043 0208 	orr.w	r2, r3, #8
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 820a 	beq.w	800a190 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d80:	f003 0320 	and.w	r3, r3, #32
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d008      	beq.n	8009d9a <HAL_UART_IRQHandler+0x14e>
 8009d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d8c:	f003 0320 	and.w	r3, r3, #32
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fb62 	bl	800a45e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da4:	2b40      	cmp	r3, #64	@ 0x40
 8009da6:	bf0c      	ite	eq
 8009da8:	2301      	moveq	r3, #1
 8009daa:	2300      	movne	r3, #0
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009db6:	f003 0308 	and.w	r3, r3, #8
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d103      	bne.n	8009dc6 <HAL_UART_IRQHandler+0x17a>
 8009dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d04f      	beq.n	8009e66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fa6d 	bl	800a2a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd6:	2b40      	cmp	r3, #64	@ 0x40
 8009dd8:	d141      	bne.n	8009e5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3314      	adds	r3, #20
 8009de0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009de8:	e853 3f00 	ldrex	r3, [r3]
 8009dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009df8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3314      	adds	r3, #20
 8009e02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009e06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1d9      	bne.n	8009dda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d013      	beq.n	8009e56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e32:	4a8a      	ldr	r2, [pc, #552]	@ (800a05c <HAL_UART_IRQHandler+0x410>)
 8009e34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fd f8cb 	bl	8006fd6 <HAL_DMA_Abort_IT>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d016      	beq.n	8009e74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009e50:	4610      	mov	r0, r2
 8009e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e54:	e00e      	b.n	8009e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f9b6 	bl	800a1c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e5c:	e00a      	b.n	8009e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f9b2 	bl	800a1c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e64:	e006      	b.n	8009e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f9ae 	bl	800a1c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009e72:	e18d      	b.n	800a190 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e74:	bf00      	nop
    return;
 8009e76:	e18b      	b.n	800a190 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	f040 8167 	bne.w	800a150 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e86:	f003 0310 	and.w	r3, r3, #16
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 8160 	beq.w	800a150 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e94:	f003 0310 	and.w	r3, r3, #16
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 8159 	beq.w	800a150 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	60bb      	str	r3, [r7, #8]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	60bb      	str	r3, [r7, #8]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	60bb      	str	r3, [r7, #8]
 8009eb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ebe:	2b40      	cmp	r3, #64	@ 0x40
 8009ec0:	f040 80ce 	bne.w	800a060 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ed0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 80a9 	beq.w	800a02c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	f080 80a2 	bcs.w	800a02c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009eee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ef4:	69db      	ldr	r3, [r3, #28]
 8009ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009efa:	f000 8088 	beq.w	800a00e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	330c      	adds	r3, #12
 8009f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f0c:	e853 3f00 	ldrex	r3, [r3]
 8009f10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	330c      	adds	r3, #12
 8009f26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009f2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1d9      	bne.n	8009efe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3314      	adds	r3, #20
 8009f50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f54:	e853 3f00 	ldrex	r3, [r3]
 8009f58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f5c:	f023 0301 	bic.w	r3, r3, #1
 8009f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3314      	adds	r3, #20
 8009f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e1      	bne.n	8009f4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3314      	adds	r3, #20
 8009f8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f90:	e853 3f00 	ldrex	r3, [r3]
 8009f94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3314      	adds	r3, #20
 8009fa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009faa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009fac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009fb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009fb2:	e841 2300 	strex	r3, r2, [r1]
 8009fb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009fb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e3      	bne.n	8009f86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	330c      	adds	r3, #12
 8009fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fde:	f023 0310 	bic.w	r3, r3, #16
 8009fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	330c      	adds	r3, #12
 8009fec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009ff0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009ff2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ff6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ff8:	e841 2300 	strex	r3, r2, [r1]
 8009ffc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1e3      	bne.n	8009fcc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fc ff74 	bl	8006ef6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2202      	movs	r2, #2
 800a012:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	b29b      	uxth	r3, r3
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f8d9 	bl	800a1dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a02a:	e0b3      	b.n	800a194 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a030:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a034:	429a      	cmp	r2, r3
 800a036:	f040 80ad 	bne.w	800a194 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a044:	f040 80a6 	bne.w	800a194 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f8c1 	bl	800a1dc <HAL_UARTEx_RxEventCallback>
      return;
 800a05a:	e09b      	b.n	800a194 <HAL_UART_IRQHandler+0x548>
 800a05c:	0800a36d 	.word	0x0800a36d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a068:	b29b      	uxth	r3, r3
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	f000 808e 	beq.w	800a198 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a07c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 8089 	beq.w	800a198 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	330c      	adds	r3, #12
 800a08c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a09c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	330c      	adds	r3, #12
 800a0a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a0aa:	647a      	str	r2, [r7, #68]	@ 0x44
 800a0ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e3      	bne.n	800a086 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3314      	adds	r3, #20
 800a0c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	f023 0301 	bic.w	r3, r3, #1
 800a0d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3314      	adds	r3, #20
 800a0de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a0e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e3      	bne.n	800a0be <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2220      	movs	r2, #32
 800a0fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	330c      	adds	r3, #12
 800a10a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	e853 3f00 	ldrex	r3, [r3]
 800a112:	60fb      	str	r3, [r7, #12]
   return(result);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f023 0310 	bic.w	r3, r3, #16
 800a11a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	330c      	adds	r3, #12
 800a124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a128:	61fa      	str	r2, [r7, #28]
 800a12a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12c:	69b9      	ldr	r1, [r7, #24]
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	e841 2300 	strex	r3, r2, [r1]
 800a134:	617b      	str	r3, [r7, #20]
   return(result);
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e3      	bne.n	800a104 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2202      	movs	r2, #2
 800a140:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f847 	bl	800a1dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a14e:	e023      	b.n	800a198 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <HAL_UART_IRQHandler+0x524>
 800a15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a164:	2b00      	cmp	r3, #0
 800a166:	d003      	beq.n	800a170 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f910 	bl	800a38e <UART_Transmit_IT>
    return;
 800a16e:	e014      	b.n	800a19a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00e      	beq.n	800a19a <HAL_UART_IRQHandler+0x54e>
 800a17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	d008      	beq.n	800a19a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f950 	bl	800a42e <UART_EndTransmit_IT>
    return;
 800a18e:	e004      	b.n	800a19a <HAL_UART_IRQHandler+0x54e>
    return;
 800a190:	bf00      	nop
 800a192:	e002      	b.n	800a19a <HAL_UART_IRQHandler+0x54e>
      return;
 800a194:	bf00      	nop
 800a196:	e000      	b.n	800a19a <HAL_UART_IRQHandler+0x54e>
      return;
 800a198:	bf00      	nop
  }
}
 800a19a:	37e8      	adds	r7, #232	@ 0xe8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	603b      	str	r3, [r7, #0]
 800a200:	4613      	mov	r3, r2
 800a202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a204:	e03b      	b.n	800a27e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20c:	d037      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a20e:	f7fc f93f 	bl	8006490 <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	6a3a      	ldr	r2, [r7, #32]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d302      	bcc.n	800a224 <UART_WaitOnFlagUntilTimeout+0x30>
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e03a      	b.n	800a29e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	2b00      	cmp	r3, #0
 800a234:	d023      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	2b80      	cmp	r3, #128	@ 0x80
 800a23a:	d020      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b40      	cmp	r3, #64	@ 0x40
 800a240:	d01d      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0308 	and.w	r3, r3, #8
 800a24c:	2b08      	cmp	r3, #8
 800a24e:	d116      	bne.n	800a27e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a250:	2300      	movs	r3, #0
 800a252:	617b      	str	r3, [r7, #20]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	617b      	str	r3, [r7, #20]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	617b      	str	r3, [r7, #20]
 800a264:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 f81d 	bl	800a2a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2208      	movs	r2, #8
 800a270:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e00f      	b.n	800a29e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	4013      	ands	r3, r2
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	bf0c      	ite	eq
 800a28e:	2301      	moveq	r3, #1
 800a290:	2300      	movne	r3, #0
 800a292:	b2db      	uxtb	r3, r3
 800a294:	461a      	mov	r2, r3
 800a296:	79fb      	ldrb	r3, [r7, #7]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d0b4      	beq.n	800a206 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b095      	sub	sp, #84	@ 0x54
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	330c      	adds	r3, #12
 800a2b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b8:	e853 3f00 	ldrex	r3, [r3]
 800a2bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	330c      	adds	r3, #12
 800a2cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2ce:	643a      	str	r2, [r7, #64]	@ 0x40
 800a2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e5      	bne.n	800a2ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3314      	adds	r3, #20
 800a2e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	e853 3f00 	ldrex	r3, [r3]
 800a2f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	f023 0301 	bic.w	r3, r3, #1
 800a2f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3314      	adds	r3, #20
 800a300:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a30a:	e841 2300 	strex	r3, r2, [r1]
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1e5      	bne.n	800a2e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d119      	bne.n	800a352 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	330c      	adds	r3, #12
 800a324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	e853 3f00 	ldrex	r3, [r3]
 800a32c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	f023 0310 	bic.w	r3, r3, #16
 800a334:	647b      	str	r3, [r7, #68]	@ 0x44
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	330c      	adds	r3, #12
 800a33c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a33e:	61ba      	str	r2, [r7, #24]
 800a340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a342:	6979      	ldr	r1, [r7, #20]
 800a344:	69ba      	ldr	r2, [r7, #24]
 800a346:	e841 2300 	strex	r3, r2, [r1]
 800a34a:	613b      	str	r3, [r7, #16]
   return(result);
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1e5      	bne.n	800a31e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2220      	movs	r2, #32
 800a356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a360:	bf00      	nop
 800a362:	3754      	adds	r7, #84	@ 0x54
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a378:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f7ff ff21 	bl	800a1c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a386:	bf00      	nop
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a38e:	b480      	push	{r7}
 800a390:	b085      	sub	sp, #20
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b21      	cmp	r3, #33	@ 0x21
 800a3a0:	d13e      	bne.n	800a420 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3aa:	d114      	bne.n	800a3d6 <UART_Transmit_IT+0x48>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d110      	bne.n	800a3d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	1c9a      	adds	r2, r3, #2
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	621a      	str	r2, [r3, #32]
 800a3d4:	e008      	b.n	800a3e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	1c59      	adds	r1, r3, #1
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	6211      	str	r1, [r2, #32]
 800a3e0:	781a      	ldrb	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10f      	bne.n	800a41c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a40a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a41a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	e000      	b.n	800a422 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a420:	2302      	movs	r3, #2
  }
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b082      	sub	sp, #8
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a444:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2220      	movs	r2, #32
 800a44a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff fea6 	bl	800a1a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b08c      	sub	sp, #48	@ 0x30
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a466:	2300      	movs	r3, #0
 800a468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b22      	cmp	r3, #34	@ 0x22
 800a478:	f040 80aa 	bne.w	800a5d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a484:	d115      	bne.n	800a4b2 <UART_Receive_IT+0x54>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d111      	bne.n	800a4b2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a492:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4aa:	1c9a      	adds	r2, r3, #2
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	629a      	str	r2, [r3, #40]	@ 0x28
 800a4b0:	e024      	b.n	800a4fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4c0:	d007      	beq.n	800a4d2 <UART_Receive_IT+0x74>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10a      	bne.n	800a4e0 <UART_Receive_IT+0x82>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d106      	bne.n	800a4e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	e008      	b.n	800a4f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f6:	1c5a      	adds	r2, r3, #1
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a500:	b29b      	uxth	r3, r3
 800a502:	3b01      	subs	r3, #1
 800a504:	b29b      	uxth	r3, r3
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	4619      	mov	r1, r3
 800a50a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d15d      	bne.n	800a5cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68da      	ldr	r2, [r3, #12]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f022 0220 	bic.w	r2, r2, #32
 800a51e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68da      	ldr	r2, [r3, #12]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a52e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	695a      	ldr	r2, [r3, #20]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f022 0201 	bic.w	r2, r2, #1
 800a53e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2220      	movs	r2, #32
 800a544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a552:	2b01      	cmp	r3, #1
 800a554:	d135      	bne.n	800a5c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	330c      	adds	r3, #12
 800a562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	e853 3f00 	ldrex	r3, [r3]
 800a56a:	613b      	str	r3, [r7, #16]
   return(result);
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	f023 0310 	bic.w	r3, r3, #16
 800a572:	627b      	str	r3, [r7, #36]	@ 0x24
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	330c      	adds	r3, #12
 800a57a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a57c:	623a      	str	r2, [r7, #32]
 800a57e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a580:	69f9      	ldr	r1, [r7, #28]
 800a582:	6a3a      	ldr	r2, [r7, #32]
 800a584:	e841 2300 	strex	r3, r2, [r1]
 800a588:	61bb      	str	r3, [r7, #24]
   return(result);
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e5      	bne.n	800a55c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0310 	and.w	r3, r3, #16
 800a59a:	2b10      	cmp	r3, #16
 800a59c:	d10a      	bne.n	800a5b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a59e:	2300      	movs	r3, #0
 800a5a0:	60fb      	str	r3, [r7, #12]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	60fb      	str	r3, [r7, #12]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	60fb      	str	r3, [r7, #12]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fe0e 	bl	800a1dc <HAL_UARTEx_RxEventCallback>
 800a5c0:	e002      	b.n	800a5c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff fdf6 	bl	800a1b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	e002      	b.n	800a5d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	e000      	b.n	800a5d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a5d0:	2302      	movs	r3, #2
  }
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3730      	adds	r7, #48	@ 0x30
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5e0:	b0c0      	sub	sp, #256	@ 0x100
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a5f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f8:	68d9      	ldr	r1, [r3, #12]
 800a5fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	ea40 0301 	orr.w	r3, r0, r1
 800a604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	431a      	orrs	r2, r3
 800a614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	431a      	orrs	r2, r3
 800a61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	4313      	orrs	r3, r2
 800a624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a634:	f021 010c 	bic.w	r1, r1, #12
 800a638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a642:	430b      	orrs	r3, r1
 800a644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a656:	6999      	ldr	r1, [r3, #24]
 800a658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	ea40 0301 	orr.w	r3, r0, r1
 800a662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	4b8f      	ldr	r3, [pc, #572]	@ (800a8a8 <UART_SetConfig+0x2cc>)
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d005      	beq.n	800a67c <UART_SetConfig+0xa0>
 800a670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	4b8d      	ldr	r3, [pc, #564]	@ (800a8ac <UART_SetConfig+0x2d0>)
 800a678:	429a      	cmp	r2, r3
 800a67a:	d104      	bne.n	800a686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a67c:	f7fd fae2 	bl	8007c44 <HAL_RCC_GetPCLK2Freq>
 800a680:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a684:	e003      	b.n	800a68e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a686:	f7fd fac9 	bl	8007c1c <HAL_RCC_GetPCLK1Freq>
 800a68a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a68e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a698:	f040 810c 	bne.w	800a8b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a69c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a6a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a6aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	462b      	mov	r3, r5
 800a6b2:	1891      	adds	r1, r2, r2
 800a6b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a6b6:	415b      	adcs	r3, r3
 800a6b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a6be:	4621      	mov	r1, r4
 800a6c0:	eb12 0801 	adds.w	r8, r2, r1
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	eb43 0901 	adc.w	r9, r3, r1
 800a6ca:	f04f 0200 	mov.w	r2, #0
 800a6ce:	f04f 0300 	mov.w	r3, #0
 800a6d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a6d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a6da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6de:	4690      	mov	r8, r2
 800a6e0:	4699      	mov	r9, r3
 800a6e2:	4623      	mov	r3, r4
 800a6e4:	eb18 0303 	adds.w	r3, r8, r3
 800a6e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6ec:	462b      	mov	r3, r5
 800a6ee:	eb49 0303 	adc.w	r3, r9, r3
 800a6f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a702:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a70a:	460b      	mov	r3, r1
 800a70c:	18db      	adds	r3, r3, r3
 800a70e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a710:	4613      	mov	r3, r2
 800a712:	eb42 0303 	adc.w	r3, r2, r3
 800a716:	657b      	str	r3, [r7, #84]	@ 0x54
 800a718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a71c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a720:	f7f6 fa4a 	bl	8000bb8 <__aeabi_uldivmod>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4b61      	ldr	r3, [pc, #388]	@ (800a8b0 <UART_SetConfig+0x2d4>)
 800a72a:	fba3 2302 	umull	r2, r3, r3, r2
 800a72e:	095b      	lsrs	r3, r3, #5
 800a730:	011c      	lsls	r4, r3, #4
 800a732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a736:	2200      	movs	r2, #0
 800a738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a73c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a744:	4642      	mov	r2, r8
 800a746:	464b      	mov	r3, r9
 800a748:	1891      	adds	r1, r2, r2
 800a74a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a74c:	415b      	adcs	r3, r3
 800a74e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a754:	4641      	mov	r1, r8
 800a756:	eb12 0a01 	adds.w	sl, r2, r1
 800a75a:	4649      	mov	r1, r9
 800a75c:	eb43 0b01 	adc.w	fp, r3, r1
 800a760:	f04f 0200 	mov.w	r2, #0
 800a764:	f04f 0300 	mov.w	r3, #0
 800a768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a76c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a774:	4692      	mov	sl, r2
 800a776:	469b      	mov	fp, r3
 800a778:	4643      	mov	r3, r8
 800a77a:	eb1a 0303 	adds.w	r3, sl, r3
 800a77e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a782:	464b      	mov	r3, r9
 800a784:	eb4b 0303 	adc.w	r3, fp, r3
 800a788:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a798:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a79c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	18db      	adds	r3, r3, r3
 800a7a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	eb42 0303 	adc.w	r3, r2, r3
 800a7ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a7b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a7b6:	f7f6 f9ff 	bl	8000bb8 <__aeabi_uldivmod>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4611      	mov	r1, r2
 800a7c0:	4b3b      	ldr	r3, [pc, #236]	@ (800a8b0 <UART_SetConfig+0x2d4>)
 800a7c2:	fba3 2301 	umull	r2, r3, r3, r1
 800a7c6:	095b      	lsrs	r3, r3, #5
 800a7c8:	2264      	movs	r2, #100	@ 0x64
 800a7ca:	fb02 f303 	mul.w	r3, r2, r3
 800a7ce:	1acb      	subs	r3, r1, r3
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a7d6:	4b36      	ldr	r3, [pc, #216]	@ (800a8b0 <UART_SetConfig+0x2d4>)
 800a7d8:	fba3 2302 	umull	r2, r3, r3, r2
 800a7dc:	095b      	lsrs	r3, r3, #5
 800a7de:	005b      	lsls	r3, r3, #1
 800a7e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a7e4:	441c      	add	r4, r3
 800a7e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a7f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	464b      	mov	r3, r9
 800a7fc:	1891      	adds	r1, r2, r2
 800a7fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a800:	415b      	adcs	r3, r3
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a808:	4641      	mov	r1, r8
 800a80a:	1851      	adds	r1, r2, r1
 800a80c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a80e:	4649      	mov	r1, r9
 800a810:	414b      	adcs	r3, r1
 800a812:	637b      	str	r3, [r7, #52]	@ 0x34
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	f04f 0300 	mov.w	r3, #0
 800a81c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a820:	4659      	mov	r1, fp
 800a822:	00cb      	lsls	r3, r1, #3
 800a824:	4651      	mov	r1, sl
 800a826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a82a:	4651      	mov	r1, sl
 800a82c:	00ca      	lsls	r2, r1, #3
 800a82e:	4610      	mov	r0, r2
 800a830:	4619      	mov	r1, r3
 800a832:	4603      	mov	r3, r0
 800a834:	4642      	mov	r2, r8
 800a836:	189b      	adds	r3, r3, r2
 800a838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a83c:	464b      	mov	r3, r9
 800a83e:	460a      	mov	r2, r1
 800a840:	eb42 0303 	adc.w	r3, r2, r3
 800a844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a854:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a85c:	460b      	mov	r3, r1
 800a85e:	18db      	adds	r3, r3, r3
 800a860:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a862:	4613      	mov	r3, r2
 800a864:	eb42 0303 	adc.w	r3, r2, r3
 800a868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a86a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a86e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a872:	f7f6 f9a1 	bl	8000bb8 <__aeabi_uldivmod>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b0 <UART_SetConfig+0x2d4>)
 800a87c:	fba3 1302 	umull	r1, r3, r3, r2
 800a880:	095b      	lsrs	r3, r3, #5
 800a882:	2164      	movs	r1, #100	@ 0x64
 800a884:	fb01 f303 	mul.w	r3, r1, r3
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	00db      	lsls	r3, r3, #3
 800a88c:	3332      	adds	r3, #50	@ 0x32
 800a88e:	4a08      	ldr	r2, [pc, #32]	@ (800a8b0 <UART_SetConfig+0x2d4>)
 800a890:	fba2 2303 	umull	r2, r3, r2, r3
 800a894:	095b      	lsrs	r3, r3, #5
 800a896:	f003 0207 	and.w	r2, r3, #7
 800a89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4422      	add	r2, r4
 800a8a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a8a4:	e106      	b.n	800aab4 <UART_SetConfig+0x4d8>
 800a8a6:	bf00      	nop
 800a8a8:	40011000 	.word	0x40011000
 800a8ac:	40011400 	.word	0x40011400
 800a8b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a8be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a8c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a8c6:	4642      	mov	r2, r8
 800a8c8:	464b      	mov	r3, r9
 800a8ca:	1891      	adds	r1, r2, r2
 800a8cc:	6239      	str	r1, [r7, #32]
 800a8ce:	415b      	adcs	r3, r3
 800a8d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8d6:	4641      	mov	r1, r8
 800a8d8:	1854      	adds	r4, r2, r1
 800a8da:	4649      	mov	r1, r9
 800a8dc:	eb43 0501 	adc.w	r5, r3, r1
 800a8e0:	f04f 0200 	mov.w	r2, #0
 800a8e4:	f04f 0300 	mov.w	r3, #0
 800a8e8:	00eb      	lsls	r3, r5, #3
 800a8ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8ee:	00e2      	lsls	r2, r4, #3
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	461d      	mov	r5, r3
 800a8f4:	4643      	mov	r3, r8
 800a8f6:	18e3      	adds	r3, r4, r3
 800a8f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8fc:	464b      	mov	r3, r9
 800a8fe:	eb45 0303 	adc.w	r3, r5, r3
 800a902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a912:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a916:	f04f 0200 	mov.w	r2, #0
 800a91a:	f04f 0300 	mov.w	r3, #0
 800a91e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a922:	4629      	mov	r1, r5
 800a924:	008b      	lsls	r3, r1, #2
 800a926:	4621      	mov	r1, r4
 800a928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a92c:	4621      	mov	r1, r4
 800a92e:	008a      	lsls	r2, r1, #2
 800a930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a934:	f7f6 f940 	bl	8000bb8 <__aeabi_uldivmod>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4b60      	ldr	r3, [pc, #384]	@ (800aac0 <UART_SetConfig+0x4e4>)
 800a93e:	fba3 2302 	umull	r2, r3, r3, r2
 800a942:	095b      	lsrs	r3, r3, #5
 800a944:	011c      	lsls	r4, r3, #4
 800a946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a94a:	2200      	movs	r2, #0
 800a94c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a950:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a958:	4642      	mov	r2, r8
 800a95a:	464b      	mov	r3, r9
 800a95c:	1891      	adds	r1, r2, r2
 800a95e:	61b9      	str	r1, [r7, #24]
 800a960:	415b      	adcs	r3, r3
 800a962:	61fb      	str	r3, [r7, #28]
 800a964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a968:	4641      	mov	r1, r8
 800a96a:	1851      	adds	r1, r2, r1
 800a96c:	6139      	str	r1, [r7, #16]
 800a96e:	4649      	mov	r1, r9
 800a970:	414b      	adcs	r3, r1
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	f04f 0200 	mov.w	r2, #0
 800a978:	f04f 0300 	mov.w	r3, #0
 800a97c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a980:	4659      	mov	r1, fp
 800a982:	00cb      	lsls	r3, r1, #3
 800a984:	4651      	mov	r1, sl
 800a986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a98a:	4651      	mov	r1, sl
 800a98c:	00ca      	lsls	r2, r1, #3
 800a98e:	4610      	mov	r0, r2
 800a990:	4619      	mov	r1, r3
 800a992:	4603      	mov	r3, r0
 800a994:	4642      	mov	r2, r8
 800a996:	189b      	adds	r3, r3, r2
 800a998:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a99c:	464b      	mov	r3, r9
 800a99e:	460a      	mov	r2, r1
 800a9a0:	eb42 0303 	adc.w	r3, r2, r3
 800a9a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a9b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a9b4:	f04f 0200 	mov.w	r2, #0
 800a9b8:	f04f 0300 	mov.w	r3, #0
 800a9bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	008b      	lsls	r3, r1, #2
 800a9c4:	4641      	mov	r1, r8
 800a9c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9ca:	4641      	mov	r1, r8
 800a9cc:	008a      	lsls	r2, r1, #2
 800a9ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a9d2:	f7f6 f8f1 	bl	8000bb8 <__aeabi_uldivmod>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4611      	mov	r1, r2
 800a9dc:	4b38      	ldr	r3, [pc, #224]	@ (800aac0 <UART_SetConfig+0x4e4>)
 800a9de:	fba3 2301 	umull	r2, r3, r3, r1
 800a9e2:	095b      	lsrs	r3, r3, #5
 800a9e4:	2264      	movs	r2, #100	@ 0x64
 800a9e6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ea:	1acb      	subs	r3, r1, r3
 800a9ec:	011b      	lsls	r3, r3, #4
 800a9ee:	3332      	adds	r3, #50	@ 0x32
 800a9f0:	4a33      	ldr	r2, [pc, #204]	@ (800aac0 <UART_SetConfig+0x4e4>)
 800a9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f6:	095b      	lsrs	r3, r3, #5
 800a9f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9fc:	441c      	add	r4, r3
 800a9fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa02:	2200      	movs	r2, #0
 800aa04:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa06:	677a      	str	r2, [r7, #116]	@ 0x74
 800aa08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800aa0c:	4642      	mov	r2, r8
 800aa0e:	464b      	mov	r3, r9
 800aa10:	1891      	adds	r1, r2, r2
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	415b      	adcs	r3, r3
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa1c:	4641      	mov	r1, r8
 800aa1e:	1851      	adds	r1, r2, r1
 800aa20:	6039      	str	r1, [r7, #0]
 800aa22:	4649      	mov	r1, r9
 800aa24:	414b      	adcs	r3, r1
 800aa26:	607b      	str	r3, [r7, #4]
 800aa28:	f04f 0200 	mov.w	r2, #0
 800aa2c:	f04f 0300 	mov.w	r3, #0
 800aa30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa34:	4659      	mov	r1, fp
 800aa36:	00cb      	lsls	r3, r1, #3
 800aa38:	4651      	mov	r1, sl
 800aa3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa3e:	4651      	mov	r1, sl
 800aa40:	00ca      	lsls	r2, r1, #3
 800aa42:	4610      	mov	r0, r2
 800aa44:	4619      	mov	r1, r3
 800aa46:	4603      	mov	r3, r0
 800aa48:	4642      	mov	r2, r8
 800aa4a:	189b      	adds	r3, r3, r2
 800aa4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa4e:	464b      	mov	r3, r9
 800aa50:	460a      	mov	r2, r1
 800aa52:	eb42 0303 	adc.w	r3, r2, r3
 800aa56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aa58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa62:	667a      	str	r2, [r7, #100]	@ 0x64
 800aa64:	f04f 0200 	mov.w	r2, #0
 800aa68:	f04f 0300 	mov.w	r3, #0
 800aa6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aa70:	4649      	mov	r1, r9
 800aa72:	008b      	lsls	r3, r1, #2
 800aa74:	4641      	mov	r1, r8
 800aa76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa7a:	4641      	mov	r1, r8
 800aa7c:	008a      	lsls	r2, r1, #2
 800aa7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aa82:	f7f6 f899 	bl	8000bb8 <__aeabi_uldivmod>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4b0d      	ldr	r3, [pc, #52]	@ (800aac0 <UART_SetConfig+0x4e4>)
 800aa8c:	fba3 1302 	umull	r1, r3, r3, r2
 800aa90:	095b      	lsrs	r3, r3, #5
 800aa92:	2164      	movs	r1, #100	@ 0x64
 800aa94:	fb01 f303 	mul.w	r3, r1, r3
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	011b      	lsls	r3, r3, #4
 800aa9c:	3332      	adds	r3, #50	@ 0x32
 800aa9e:	4a08      	ldr	r2, [pc, #32]	@ (800aac0 <UART_SetConfig+0x4e4>)
 800aaa0:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa4:	095b      	lsrs	r3, r3, #5
 800aaa6:	f003 020f 	and.w	r2, r3, #15
 800aaaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4422      	add	r2, r4
 800aab2:	609a      	str	r2, [r3, #8]
}
 800aab4:	bf00      	nop
 800aab6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aaba:	46bd      	mov	sp, r7
 800aabc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aac0:	51eb851f 	.word	0x51eb851f

0800aac4 <__cvt>:
 800aac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aac8:	ec57 6b10 	vmov	r6, r7, d0
 800aacc:	2f00      	cmp	r7, #0
 800aace:	460c      	mov	r4, r1
 800aad0:	4619      	mov	r1, r3
 800aad2:	463b      	mov	r3, r7
 800aad4:	bfbb      	ittet	lt
 800aad6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aada:	461f      	movlt	r7, r3
 800aadc:	2300      	movge	r3, #0
 800aade:	232d      	movlt	r3, #45	@ 0x2d
 800aae0:	700b      	strb	r3, [r1, #0]
 800aae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aae4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aae8:	4691      	mov	r9, r2
 800aaea:	f023 0820 	bic.w	r8, r3, #32
 800aaee:	bfbc      	itt	lt
 800aaf0:	4632      	movlt	r2, r6
 800aaf2:	4616      	movlt	r6, r2
 800aaf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aaf8:	d005      	beq.n	800ab06 <__cvt+0x42>
 800aafa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aafe:	d100      	bne.n	800ab02 <__cvt+0x3e>
 800ab00:	3401      	adds	r4, #1
 800ab02:	2102      	movs	r1, #2
 800ab04:	e000      	b.n	800ab08 <__cvt+0x44>
 800ab06:	2103      	movs	r1, #3
 800ab08:	ab03      	add	r3, sp, #12
 800ab0a:	9301      	str	r3, [sp, #4]
 800ab0c:	ab02      	add	r3, sp, #8
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	ec47 6b10 	vmov	d0, r6, r7
 800ab14:	4653      	mov	r3, sl
 800ab16:	4622      	mov	r2, r4
 800ab18:	f000 fea6 	bl	800b868 <_dtoa_r>
 800ab1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab20:	4605      	mov	r5, r0
 800ab22:	d119      	bne.n	800ab58 <__cvt+0x94>
 800ab24:	f019 0f01 	tst.w	r9, #1
 800ab28:	d00e      	beq.n	800ab48 <__cvt+0x84>
 800ab2a:	eb00 0904 	add.w	r9, r0, r4
 800ab2e:	2200      	movs	r2, #0
 800ab30:	2300      	movs	r3, #0
 800ab32:	4630      	mov	r0, r6
 800ab34:	4639      	mov	r1, r7
 800ab36:	f7f5 ffcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab3a:	b108      	cbz	r0, 800ab40 <__cvt+0x7c>
 800ab3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab40:	2230      	movs	r2, #48	@ 0x30
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	454b      	cmp	r3, r9
 800ab46:	d31e      	bcc.n	800ab86 <__cvt+0xc2>
 800ab48:	9b03      	ldr	r3, [sp, #12]
 800ab4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab4c:	1b5b      	subs	r3, r3, r5
 800ab4e:	4628      	mov	r0, r5
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	b004      	add	sp, #16
 800ab54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab5c:	eb00 0904 	add.w	r9, r0, r4
 800ab60:	d1e5      	bne.n	800ab2e <__cvt+0x6a>
 800ab62:	7803      	ldrb	r3, [r0, #0]
 800ab64:	2b30      	cmp	r3, #48	@ 0x30
 800ab66:	d10a      	bne.n	800ab7e <__cvt+0xba>
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	4639      	mov	r1, r7
 800ab70:	f7f5 ffb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab74:	b918      	cbnz	r0, 800ab7e <__cvt+0xba>
 800ab76:	f1c4 0401 	rsb	r4, r4, #1
 800ab7a:	f8ca 4000 	str.w	r4, [sl]
 800ab7e:	f8da 3000 	ldr.w	r3, [sl]
 800ab82:	4499      	add	r9, r3
 800ab84:	e7d3      	b.n	800ab2e <__cvt+0x6a>
 800ab86:	1c59      	adds	r1, r3, #1
 800ab88:	9103      	str	r1, [sp, #12]
 800ab8a:	701a      	strb	r2, [r3, #0]
 800ab8c:	e7d9      	b.n	800ab42 <__cvt+0x7e>

0800ab8e <__exponent>:
 800ab8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab90:	2900      	cmp	r1, #0
 800ab92:	bfba      	itte	lt
 800ab94:	4249      	neglt	r1, r1
 800ab96:	232d      	movlt	r3, #45	@ 0x2d
 800ab98:	232b      	movge	r3, #43	@ 0x2b
 800ab9a:	2909      	cmp	r1, #9
 800ab9c:	7002      	strb	r2, [r0, #0]
 800ab9e:	7043      	strb	r3, [r0, #1]
 800aba0:	dd29      	ble.n	800abf6 <__exponent+0x68>
 800aba2:	f10d 0307 	add.w	r3, sp, #7
 800aba6:	461d      	mov	r5, r3
 800aba8:	270a      	movs	r7, #10
 800abaa:	461a      	mov	r2, r3
 800abac:	fbb1 f6f7 	udiv	r6, r1, r7
 800abb0:	fb07 1416 	mls	r4, r7, r6, r1
 800abb4:	3430      	adds	r4, #48	@ 0x30
 800abb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800abba:	460c      	mov	r4, r1
 800abbc:	2c63      	cmp	r4, #99	@ 0x63
 800abbe:	f103 33ff 	add.w	r3, r3, #4294967295
 800abc2:	4631      	mov	r1, r6
 800abc4:	dcf1      	bgt.n	800abaa <__exponent+0x1c>
 800abc6:	3130      	adds	r1, #48	@ 0x30
 800abc8:	1e94      	subs	r4, r2, #2
 800abca:	f803 1c01 	strb.w	r1, [r3, #-1]
 800abce:	1c41      	adds	r1, r0, #1
 800abd0:	4623      	mov	r3, r4
 800abd2:	42ab      	cmp	r3, r5
 800abd4:	d30a      	bcc.n	800abec <__exponent+0x5e>
 800abd6:	f10d 0309 	add.w	r3, sp, #9
 800abda:	1a9b      	subs	r3, r3, r2
 800abdc:	42ac      	cmp	r4, r5
 800abde:	bf88      	it	hi
 800abe0:	2300      	movhi	r3, #0
 800abe2:	3302      	adds	r3, #2
 800abe4:	4403      	add	r3, r0
 800abe6:	1a18      	subs	r0, r3, r0
 800abe8:	b003      	add	sp, #12
 800abea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abec:	f813 6b01 	ldrb.w	r6, [r3], #1
 800abf0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800abf4:	e7ed      	b.n	800abd2 <__exponent+0x44>
 800abf6:	2330      	movs	r3, #48	@ 0x30
 800abf8:	3130      	adds	r1, #48	@ 0x30
 800abfa:	7083      	strb	r3, [r0, #2]
 800abfc:	70c1      	strb	r1, [r0, #3]
 800abfe:	1d03      	adds	r3, r0, #4
 800ac00:	e7f1      	b.n	800abe6 <__exponent+0x58>
	...

0800ac04 <_printf_float>:
 800ac04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	b08d      	sub	sp, #52	@ 0x34
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac10:	4616      	mov	r6, r2
 800ac12:	461f      	mov	r7, r3
 800ac14:	4605      	mov	r5, r0
 800ac16:	f000 fd27 	bl	800b668 <_localeconv_r>
 800ac1a:	6803      	ldr	r3, [r0, #0]
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7f5 fb2e 	bl	8000280 <strlen>
 800ac24:	2300      	movs	r3, #0
 800ac26:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac28:	f8d8 3000 	ldr.w	r3, [r8]
 800ac2c:	9005      	str	r0, [sp, #20]
 800ac2e:	3307      	adds	r3, #7
 800ac30:	f023 0307 	bic.w	r3, r3, #7
 800ac34:	f103 0208 	add.w	r2, r3, #8
 800ac38:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac3c:	f8d4 b000 	ldr.w	fp, [r4]
 800ac40:	f8c8 2000 	str.w	r2, [r8]
 800ac44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ac4c:	9307      	str	r3, [sp, #28]
 800ac4e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ac56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac5a:	4b9c      	ldr	r3, [pc, #624]	@ (800aecc <_printf_float+0x2c8>)
 800ac5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac60:	f7f5 ff6c 	bl	8000b3c <__aeabi_dcmpun>
 800ac64:	bb70      	cbnz	r0, 800acc4 <_printf_float+0xc0>
 800ac66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac6a:	4b98      	ldr	r3, [pc, #608]	@ (800aecc <_printf_float+0x2c8>)
 800ac6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac70:	f7f5 ff46 	bl	8000b00 <__aeabi_dcmple>
 800ac74:	bb30      	cbnz	r0, 800acc4 <_printf_float+0xc0>
 800ac76:	2200      	movs	r2, #0
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	f7f5 ff35 	bl	8000aec <__aeabi_dcmplt>
 800ac82:	b110      	cbz	r0, 800ac8a <_printf_float+0x86>
 800ac84:	232d      	movs	r3, #45	@ 0x2d
 800ac86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac8a:	4a91      	ldr	r2, [pc, #580]	@ (800aed0 <_printf_float+0x2cc>)
 800ac8c:	4b91      	ldr	r3, [pc, #580]	@ (800aed4 <_printf_float+0x2d0>)
 800ac8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac92:	bf8c      	ite	hi
 800ac94:	4690      	movhi	r8, r2
 800ac96:	4698      	movls	r8, r3
 800ac98:	2303      	movs	r3, #3
 800ac9a:	6123      	str	r3, [r4, #16]
 800ac9c:	f02b 0304 	bic.w	r3, fp, #4
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	f04f 0900 	mov.w	r9, #0
 800aca6:	9700      	str	r7, [sp, #0]
 800aca8:	4633      	mov	r3, r6
 800acaa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800acac:	4621      	mov	r1, r4
 800acae:	4628      	mov	r0, r5
 800acb0:	f000 f9d2 	bl	800b058 <_printf_common>
 800acb4:	3001      	adds	r0, #1
 800acb6:	f040 808d 	bne.w	800add4 <_printf_float+0x1d0>
 800acba:	f04f 30ff 	mov.w	r0, #4294967295
 800acbe:	b00d      	add	sp, #52	@ 0x34
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	4642      	mov	r2, r8
 800acc6:	464b      	mov	r3, r9
 800acc8:	4640      	mov	r0, r8
 800acca:	4649      	mov	r1, r9
 800accc:	f7f5 ff36 	bl	8000b3c <__aeabi_dcmpun>
 800acd0:	b140      	cbz	r0, 800ace4 <_printf_float+0xe0>
 800acd2:	464b      	mov	r3, r9
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bfbc      	itt	lt
 800acd8:	232d      	movlt	r3, #45	@ 0x2d
 800acda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800acde:	4a7e      	ldr	r2, [pc, #504]	@ (800aed8 <_printf_float+0x2d4>)
 800ace0:	4b7e      	ldr	r3, [pc, #504]	@ (800aedc <_printf_float+0x2d8>)
 800ace2:	e7d4      	b.n	800ac8e <_printf_float+0x8a>
 800ace4:	6863      	ldr	r3, [r4, #4]
 800ace6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800acea:	9206      	str	r2, [sp, #24]
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	d13b      	bne.n	800ad68 <_printf_float+0x164>
 800acf0:	2306      	movs	r3, #6
 800acf2:	6063      	str	r3, [r4, #4]
 800acf4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800acf8:	2300      	movs	r3, #0
 800acfa:	6022      	str	r2, [r4, #0]
 800acfc:	9303      	str	r3, [sp, #12]
 800acfe:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad00:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad04:	ab09      	add	r3, sp, #36	@ 0x24
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	6861      	ldr	r1, [r4, #4]
 800ad0a:	ec49 8b10 	vmov	d0, r8, r9
 800ad0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad12:	4628      	mov	r0, r5
 800ad14:	f7ff fed6 	bl	800aac4 <__cvt>
 800ad18:	9b06      	ldr	r3, [sp, #24]
 800ad1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad1c:	2b47      	cmp	r3, #71	@ 0x47
 800ad1e:	4680      	mov	r8, r0
 800ad20:	d129      	bne.n	800ad76 <_printf_float+0x172>
 800ad22:	1cc8      	adds	r0, r1, #3
 800ad24:	db02      	blt.n	800ad2c <_printf_float+0x128>
 800ad26:	6863      	ldr	r3, [r4, #4]
 800ad28:	4299      	cmp	r1, r3
 800ad2a:	dd41      	ble.n	800adb0 <_printf_float+0x1ac>
 800ad2c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad30:	fa5f fa8a 	uxtb.w	sl, sl
 800ad34:	3901      	subs	r1, #1
 800ad36:	4652      	mov	r2, sl
 800ad38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad3c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad3e:	f7ff ff26 	bl	800ab8e <__exponent>
 800ad42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad44:	1813      	adds	r3, r2, r0
 800ad46:	2a01      	cmp	r2, #1
 800ad48:	4681      	mov	r9, r0
 800ad4a:	6123      	str	r3, [r4, #16]
 800ad4c:	dc02      	bgt.n	800ad54 <_printf_float+0x150>
 800ad4e:	6822      	ldr	r2, [r4, #0]
 800ad50:	07d2      	lsls	r2, r2, #31
 800ad52:	d501      	bpl.n	800ad58 <_printf_float+0x154>
 800ad54:	3301      	adds	r3, #1
 800ad56:	6123      	str	r3, [r4, #16]
 800ad58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0a2      	beq.n	800aca6 <_printf_float+0xa2>
 800ad60:	232d      	movs	r3, #45	@ 0x2d
 800ad62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad66:	e79e      	b.n	800aca6 <_printf_float+0xa2>
 800ad68:	9a06      	ldr	r2, [sp, #24]
 800ad6a:	2a47      	cmp	r2, #71	@ 0x47
 800ad6c:	d1c2      	bne.n	800acf4 <_printf_float+0xf0>
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1c0      	bne.n	800acf4 <_printf_float+0xf0>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e7bd      	b.n	800acf2 <_printf_float+0xee>
 800ad76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad7a:	d9db      	bls.n	800ad34 <_printf_float+0x130>
 800ad7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ad80:	d118      	bne.n	800adb4 <_printf_float+0x1b0>
 800ad82:	2900      	cmp	r1, #0
 800ad84:	6863      	ldr	r3, [r4, #4]
 800ad86:	dd0b      	ble.n	800ada0 <_printf_float+0x19c>
 800ad88:	6121      	str	r1, [r4, #16]
 800ad8a:	b913      	cbnz	r3, 800ad92 <_printf_float+0x18e>
 800ad8c:	6822      	ldr	r2, [r4, #0]
 800ad8e:	07d0      	lsls	r0, r2, #31
 800ad90:	d502      	bpl.n	800ad98 <_printf_float+0x194>
 800ad92:	3301      	adds	r3, #1
 800ad94:	440b      	add	r3, r1
 800ad96:	6123      	str	r3, [r4, #16]
 800ad98:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ad9a:	f04f 0900 	mov.w	r9, #0
 800ad9e:	e7db      	b.n	800ad58 <_printf_float+0x154>
 800ada0:	b913      	cbnz	r3, 800ada8 <_printf_float+0x1a4>
 800ada2:	6822      	ldr	r2, [r4, #0]
 800ada4:	07d2      	lsls	r2, r2, #31
 800ada6:	d501      	bpl.n	800adac <_printf_float+0x1a8>
 800ada8:	3302      	adds	r3, #2
 800adaa:	e7f4      	b.n	800ad96 <_printf_float+0x192>
 800adac:	2301      	movs	r3, #1
 800adae:	e7f2      	b.n	800ad96 <_printf_float+0x192>
 800adb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800adb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adb6:	4299      	cmp	r1, r3
 800adb8:	db05      	blt.n	800adc6 <_printf_float+0x1c2>
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	6121      	str	r1, [r4, #16]
 800adbe:	07d8      	lsls	r0, r3, #31
 800adc0:	d5ea      	bpl.n	800ad98 <_printf_float+0x194>
 800adc2:	1c4b      	adds	r3, r1, #1
 800adc4:	e7e7      	b.n	800ad96 <_printf_float+0x192>
 800adc6:	2900      	cmp	r1, #0
 800adc8:	bfd4      	ite	le
 800adca:	f1c1 0202 	rsble	r2, r1, #2
 800adce:	2201      	movgt	r2, #1
 800add0:	4413      	add	r3, r2
 800add2:	e7e0      	b.n	800ad96 <_printf_float+0x192>
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	055a      	lsls	r2, r3, #21
 800add8:	d407      	bmi.n	800adea <_printf_float+0x1e6>
 800adda:	6923      	ldr	r3, [r4, #16]
 800addc:	4642      	mov	r2, r8
 800adde:	4631      	mov	r1, r6
 800ade0:	4628      	mov	r0, r5
 800ade2:	47b8      	blx	r7
 800ade4:	3001      	adds	r0, #1
 800ade6:	d12b      	bne.n	800ae40 <_printf_float+0x23c>
 800ade8:	e767      	b.n	800acba <_printf_float+0xb6>
 800adea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800adee:	f240 80dd 	bls.w	800afac <_printf_float+0x3a8>
 800adf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800adf6:	2200      	movs	r2, #0
 800adf8:	2300      	movs	r3, #0
 800adfa:	f7f5 fe6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d033      	beq.n	800ae6a <_printf_float+0x266>
 800ae02:	4a37      	ldr	r2, [pc, #220]	@ (800aee0 <_printf_float+0x2dc>)
 800ae04:	2301      	movs	r3, #1
 800ae06:	4631      	mov	r1, r6
 800ae08:	4628      	mov	r0, r5
 800ae0a:	47b8      	blx	r7
 800ae0c:	3001      	adds	r0, #1
 800ae0e:	f43f af54 	beq.w	800acba <_printf_float+0xb6>
 800ae12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae16:	4543      	cmp	r3, r8
 800ae18:	db02      	blt.n	800ae20 <_printf_float+0x21c>
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	07d8      	lsls	r0, r3, #31
 800ae1e:	d50f      	bpl.n	800ae40 <_printf_float+0x23c>
 800ae20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae24:	4631      	mov	r1, r6
 800ae26:	4628      	mov	r0, r5
 800ae28:	47b8      	blx	r7
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	f43f af45 	beq.w	800acba <_printf_float+0xb6>
 800ae30:	f04f 0900 	mov.w	r9, #0
 800ae34:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae38:	f104 0a1a 	add.w	sl, r4, #26
 800ae3c:	45c8      	cmp	r8, r9
 800ae3e:	dc09      	bgt.n	800ae54 <_printf_float+0x250>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	079b      	lsls	r3, r3, #30
 800ae44:	f100 8103 	bmi.w	800b04e <_printf_float+0x44a>
 800ae48:	68e0      	ldr	r0, [r4, #12]
 800ae4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae4c:	4298      	cmp	r0, r3
 800ae4e:	bfb8      	it	lt
 800ae50:	4618      	movlt	r0, r3
 800ae52:	e734      	b.n	800acbe <_printf_float+0xba>
 800ae54:	2301      	movs	r3, #1
 800ae56:	4652      	mov	r2, sl
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	47b8      	blx	r7
 800ae5e:	3001      	adds	r0, #1
 800ae60:	f43f af2b 	beq.w	800acba <_printf_float+0xb6>
 800ae64:	f109 0901 	add.w	r9, r9, #1
 800ae68:	e7e8      	b.n	800ae3c <_printf_float+0x238>
 800ae6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dc39      	bgt.n	800aee4 <_printf_float+0x2e0>
 800ae70:	4a1b      	ldr	r2, [pc, #108]	@ (800aee0 <_printf_float+0x2dc>)
 800ae72:	2301      	movs	r3, #1
 800ae74:	4631      	mov	r1, r6
 800ae76:	4628      	mov	r0, r5
 800ae78:	47b8      	blx	r7
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	f43f af1d 	beq.w	800acba <_printf_float+0xb6>
 800ae80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae84:	ea59 0303 	orrs.w	r3, r9, r3
 800ae88:	d102      	bne.n	800ae90 <_printf_float+0x28c>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	07d9      	lsls	r1, r3, #31
 800ae8e:	d5d7      	bpl.n	800ae40 <_printf_float+0x23c>
 800ae90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae94:	4631      	mov	r1, r6
 800ae96:	4628      	mov	r0, r5
 800ae98:	47b8      	blx	r7
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	f43f af0d 	beq.w	800acba <_printf_float+0xb6>
 800aea0:	f04f 0a00 	mov.w	sl, #0
 800aea4:	f104 0b1a 	add.w	fp, r4, #26
 800aea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeaa:	425b      	negs	r3, r3
 800aeac:	4553      	cmp	r3, sl
 800aeae:	dc01      	bgt.n	800aeb4 <_printf_float+0x2b0>
 800aeb0:	464b      	mov	r3, r9
 800aeb2:	e793      	b.n	800addc <_printf_float+0x1d8>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	465a      	mov	r2, fp
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	f43f aefb 	beq.w	800acba <_printf_float+0xb6>
 800aec4:	f10a 0a01 	add.w	sl, sl, #1
 800aec8:	e7ee      	b.n	800aea8 <_printf_float+0x2a4>
 800aeca:	bf00      	nop
 800aecc:	7fefffff 	.word	0x7fefffff
 800aed0:	0800f7a8 	.word	0x0800f7a8
 800aed4:	0800f7a4 	.word	0x0800f7a4
 800aed8:	0800f7b0 	.word	0x0800f7b0
 800aedc:	0800f7ac 	.word	0x0800f7ac
 800aee0:	0800f7b4 	.word	0x0800f7b4
 800aee4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aee6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aeea:	4553      	cmp	r3, sl
 800aeec:	bfa8      	it	ge
 800aeee:	4653      	movge	r3, sl
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	4699      	mov	r9, r3
 800aef4:	dc36      	bgt.n	800af64 <_printf_float+0x360>
 800aef6:	f04f 0b00 	mov.w	fp, #0
 800aefa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aefe:	f104 021a 	add.w	r2, r4, #26
 800af02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af04:	9306      	str	r3, [sp, #24]
 800af06:	eba3 0309 	sub.w	r3, r3, r9
 800af0a:	455b      	cmp	r3, fp
 800af0c:	dc31      	bgt.n	800af72 <_printf_float+0x36e>
 800af0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af10:	459a      	cmp	sl, r3
 800af12:	dc3a      	bgt.n	800af8a <_printf_float+0x386>
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	07da      	lsls	r2, r3, #31
 800af18:	d437      	bmi.n	800af8a <_printf_float+0x386>
 800af1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1c:	ebaa 0903 	sub.w	r9, sl, r3
 800af20:	9b06      	ldr	r3, [sp, #24]
 800af22:	ebaa 0303 	sub.w	r3, sl, r3
 800af26:	4599      	cmp	r9, r3
 800af28:	bfa8      	it	ge
 800af2a:	4699      	movge	r9, r3
 800af2c:	f1b9 0f00 	cmp.w	r9, #0
 800af30:	dc33      	bgt.n	800af9a <_printf_float+0x396>
 800af32:	f04f 0800 	mov.w	r8, #0
 800af36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af3a:	f104 0b1a 	add.w	fp, r4, #26
 800af3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af40:	ebaa 0303 	sub.w	r3, sl, r3
 800af44:	eba3 0309 	sub.w	r3, r3, r9
 800af48:	4543      	cmp	r3, r8
 800af4a:	f77f af79 	ble.w	800ae40 <_printf_float+0x23c>
 800af4e:	2301      	movs	r3, #1
 800af50:	465a      	mov	r2, fp
 800af52:	4631      	mov	r1, r6
 800af54:	4628      	mov	r0, r5
 800af56:	47b8      	blx	r7
 800af58:	3001      	adds	r0, #1
 800af5a:	f43f aeae 	beq.w	800acba <_printf_float+0xb6>
 800af5e:	f108 0801 	add.w	r8, r8, #1
 800af62:	e7ec      	b.n	800af3e <_printf_float+0x33a>
 800af64:	4642      	mov	r2, r8
 800af66:	4631      	mov	r1, r6
 800af68:	4628      	mov	r0, r5
 800af6a:	47b8      	blx	r7
 800af6c:	3001      	adds	r0, #1
 800af6e:	d1c2      	bne.n	800aef6 <_printf_float+0x2f2>
 800af70:	e6a3      	b.n	800acba <_printf_float+0xb6>
 800af72:	2301      	movs	r3, #1
 800af74:	4631      	mov	r1, r6
 800af76:	4628      	mov	r0, r5
 800af78:	9206      	str	r2, [sp, #24]
 800af7a:	47b8      	blx	r7
 800af7c:	3001      	adds	r0, #1
 800af7e:	f43f ae9c 	beq.w	800acba <_printf_float+0xb6>
 800af82:	9a06      	ldr	r2, [sp, #24]
 800af84:	f10b 0b01 	add.w	fp, fp, #1
 800af88:	e7bb      	b.n	800af02 <_printf_float+0x2fe>
 800af8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af8e:	4631      	mov	r1, r6
 800af90:	4628      	mov	r0, r5
 800af92:	47b8      	blx	r7
 800af94:	3001      	adds	r0, #1
 800af96:	d1c0      	bne.n	800af1a <_printf_float+0x316>
 800af98:	e68f      	b.n	800acba <_printf_float+0xb6>
 800af9a:	9a06      	ldr	r2, [sp, #24]
 800af9c:	464b      	mov	r3, r9
 800af9e:	4442      	add	r2, r8
 800afa0:	4631      	mov	r1, r6
 800afa2:	4628      	mov	r0, r5
 800afa4:	47b8      	blx	r7
 800afa6:	3001      	adds	r0, #1
 800afa8:	d1c3      	bne.n	800af32 <_printf_float+0x32e>
 800afaa:	e686      	b.n	800acba <_printf_float+0xb6>
 800afac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afb0:	f1ba 0f01 	cmp.w	sl, #1
 800afb4:	dc01      	bgt.n	800afba <_printf_float+0x3b6>
 800afb6:	07db      	lsls	r3, r3, #31
 800afb8:	d536      	bpl.n	800b028 <_printf_float+0x424>
 800afba:	2301      	movs	r3, #1
 800afbc:	4642      	mov	r2, r8
 800afbe:	4631      	mov	r1, r6
 800afc0:	4628      	mov	r0, r5
 800afc2:	47b8      	blx	r7
 800afc4:	3001      	adds	r0, #1
 800afc6:	f43f ae78 	beq.w	800acba <_printf_float+0xb6>
 800afca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b8      	blx	r7
 800afd4:	3001      	adds	r0, #1
 800afd6:	f43f ae70 	beq.w	800acba <_printf_float+0xb6>
 800afda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afde:	2200      	movs	r2, #0
 800afe0:	2300      	movs	r3, #0
 800afe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afe6:	f7f5 fd77 	bl	8000ad8 <__aeabi_dcmpeq>
 800afea:	b9c0      	cbnz	r0, 800b01e <_printf_float+0x41a>
 800afec:	4653      	mov	r3, sl
 800afee:	f108 0201 	add.w	r2, r8, #1
 800aff2:	4631      	mov	r1, r6
 800aff4:	4628      	mov	r0, r5
 800aff6:	47b8      	blx	r7
 800aff8:	3001      	adds	r0, #1
 800affa:	d10c      	bne.n	800b016 <_printf_float+0x412>
 800affc:	e65d      	b.n	800acba <_printf_float+0xb6>
 800affe:	2301      	movs	r3, #1
 800b000:	465a      	mov	r2, fp
 800b002:	4631      	mov	r1, r6
 800b004:	4628      	mov	r0, r5
 800b006:	47b8      	blx	r7
 800b008:	3001      	adds	r0, #1
 800b00a:	f43f ae56 	beq.w	800acba <_printf_float+0xb6>
 800b00e:	f108 0801 	add.w	r8, r8, #1
 800b012:	45d0      	cmp	r8, sl
 800b014:	dbf3      	blt.n	800affe <_printf_float+0x3fa>
 800b016:	464b      	mov	r3, r9
 800b018:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b01c:	e6df      	b.n	800adde <_printf_float+0x1da>
 800b01e:	f04f 0800 	mov.w	r8, #0
 800b022:	f104 0b1a 	add.w	fp, r4, #26
 800b026:	e7f4      	b.n	800b012 <_printf_float+0x40e>
 800b028:	2301      	movs	r3, #1
 800b02a:	4642      	mov	r2, r8
 800b02c:	e7e1      	b.n	800aff2 <_printf_float+0x3ee>
 800b02e:	2301      	movs	r3, #1
 800b030:	464a      	mov	r2, r9
 800b032:	4631      	mov	r1, r6
 800b034:	4628      	mov	r0, r5
 800b036:	47b8      	blx	r7
 800b038:	3001      	adds	r0, #1
 800b03a:	f43f ae3e 	beq.w	800acba <_printf_float+0xb6>
 800b03e:	f108 0801 	add.w	r8, r8, #1
 800b042:	68e3      	ldr	r3, [r4, #12]
 800b044:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b046:	1a5b      	subs	r3, r3, r1
 800b048:	4543      	cmp	r3, r8
 800b04a:	dcf0      	bgt.n	800b02e <_printf_float+0x42a>
 800b04c:	e6fc      	b.n	800ae48 <_printf_float+0x244>
 800b04e:	f04f 0800 	mov.w	r8, #0
 800b052:	f104 0919 	add.w	r9, r4, #25
 800b056:	e7f4      	b.n	800b042 <_printf_float+0x43e>

0800b058 <_printf_common>:
 800b058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b05c:	4616      	mov	r6, r2
 800b05e:	4698      	mov	r8, r3
 800b060:	688a      	ldr	r2, [r1, #8]
 800b062:	690b      	ldr	r3, [r1, #16]
 800b064:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b068:	4293      	cmp	r3, r2
 800b06a:	bfb8      	it	lt
 800b06c:	4613      	movlt	r3, r2
 800b06e:	6033      	str	r3, [r6, #0]
 800b070:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b074:	4607      	mov	r7, r0
 800b076:	460c      	mov	r4, r1
 800b078:	b10a      	cbz	r2, 800b07e <_printf_common+0x26>
 800b07a:	3301      	adds	r3, #1
 800b07c:	6033      	str	r3, [r6, #0]
 800b07e:	6823      	ldr	r3, [r4, #0]
 800b080:	0699      	lsls	r1, r3, #26
 800b082:	bf42      	ittt	mi
 800b084:	6833      	ldrmi	r3, [r6, #0]
 800b086:	3302      	addmi	r3, #2
 800b088:	6033      	strmi	r3, [r6, #0]
 800b08a:	6825      	ldr	r5, [r4, #0]
 800b08c:	f015 0506 	ands.w	r5, r5, #6
 800b090:	d106      	bne.n	800b0a0 <_printf_common+0x48>
 800b092:	f104 0a19 	add.w	sl, r4, #25
 800b096:	68e3      	ldr	r3, [r4, #12]
 800b098:	6832      	ldr	r2, [r6, #0]
 800b09a:	1a9b      	subs	r3, r3, r2
 800b09c:	42ab      	cmp	r3, r5
 800b09e:	dc26      	bgt.n	800b0ee <_printf_common+0x96>
 800b0a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0a4:	6822      	ldr	r2, [r4, #0]
 800b0a6:	3b00      	subs	r3, #0
 800b0a8:	bf18      	it	ne
 800b0aa:	2301      	movne	r3, #1
 800b0ac:	0692      	lsls	r2, r2, #26
 800b0ae:	d42b      	bmi.n	800b108 <_printf_common+0xb0>
 800b0b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0b4:	4641      	mov	r1, r8
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	47c8      	blx	r9
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	d01e      	beq.n	800b0fc <_printf_common+0xa4>
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	6922      	ldr	r2, [r4, #16]
 800b0c2:	f003 0306 	and.w	r3, r3, #6
 800b0c6:	2b04      	cmp	r3, #4
 800b0c8:	bf02      	ittt	eq
 800b0ca:	68e5      	ldreq	r5, [r4, #12]
 800b0cc:	6833      	ldreq	r3, [r6, #0]
 800b0ce:	1aed      	subeq	r5, r5, r3
 800b0d0:	68a3      	ldr	r3, [r4, #8]
 800b0d2:	bf0c      	ite	eq
 800b0d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0d8:	2500      	movne	r5, #0
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	bfc4      	itt	gt
 800b0de:	1a9b      	subgt	r3, r3, r2
 800b0e0:	18ed      	addgt	r5, r5, r3
 800b0e2:	2600      	movs	r6, #0
 800b0e4:	341a      	adds	r4, #26
 800b0e6:	42b5      	cmp	r5, r6
 800b0e8:	d11a      	bne.n	800b120 <_printf_common+0xc8>
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	e008      	b.n	800b100 <_printf_common+0xa8>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	4652      	mov	r2, sl
 800b0f2:	4641      	mov	r1, r8
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	47c8      	blx	r9
 800b0f8:	3001      	adds	r0, #1
 800b0fa:	d103      	bne.n	800b104 <_printf_common+0xac>
 800b0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b104:	3501      	adds	r5, #1
 800b106:	e7c6      	b.n	800b096 <_printf_common+0x3e>
 800b108:	18e1      	adds	r1, r4, r3
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	2030      	movs	r0, #48	@ 0x30
 800b10e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b112:	4422      	add	r2, r4
 800b114:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b118:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b11c:	3302      	adds	r3, #2
 800b11e:	e7c7      	b.n	800b0b0 <_printf_common+0x58>
 800b120:	2301      	movs	r3, #1
 800b122:	4622      	mov	r2, r4
 800b124:	4641      	mov	r1, r8
 800b126:	4638      	mov	r0, r7
 800b128:	47c8      	blx	r9
 800b12a:	3001      	adds	r0, #1
 800b12c:	d0e6      	beq.n	800b0fc <_printf_common+0xa4>
 800b12e:	3601      	adds	r6, #1
 800b130:	e7d9      	b.n	800b0e6 <_printf_common+0x8e>
	...

0800b134 <_printf_i>:
 800b134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b138:	7e0f      	ldrb	r7, [r1, #24]
 800b13a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b13c:	2f78      	cmp	r7, #120	@ 0x78
 800b13e:	4691      	mov	r9, r2
 800b140:	4680      	mov	r8, r0
 800b142:	460c      	mov	r4, r1
 800b144:	469a      	mov	sl, r3
 800b146:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b14a:	d807      	bhi.n	800b15c <_printf_i+0x28>
 800b14c:	2f62      	cmp	r7, #98	@ 0x62
 800b14e:	d80a      	bhi.n	800b166 <_printf_i+0x32>
 800b150:	2f00      	cmp	r7, #0
 800b152:	f000 80d1 	beq.w	800b2f8 <_printf_i+0x1c4>
 800b156:	2f58      	cmp	r7, #88	@ 0x58
 800b158:	f000 80b8 	beq.w	800b2cc <_printf_i+0x198>
 800b15c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b160:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b164:	e03a      	b.n	800b1dc <_printf_i+0xa8>
 800b166:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b16a:	2b15      	cmp	r3, #21
 800b16c:	d8f6      	bhi.n	800b15c <_printf_i+0x28>
 800b16e:	a101      	add	r1, pc, #4	@ (adr r1, 800b174 <_printf_i+0x40>)
 800b170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b174:	0800b1cd 	.word	0x0800b1cd
 800b178:	0800b1e1 	.word	0x0800b1e1
 800b17c:	0800b15d 	.word	0x0800b15d
 800b180:	0800b15d 	.word	0x0800b15d
 800b184:	0800b15d 	.word	0x0800b15d
 800b188:	0800b15d 	.word	0x0800b15d
 800b18c:	0800b1e1 	.word	0x0800b1e1
 800b190:	0800b15d 	.word	0x0800b15d
 800b194:	0800b15d 	.word	0x0800b15d
 800b198:	0800b15d 	.word	0x0800b15d
 800b19c:	0800b15d 	.word	0x0800b15d
 800b1a0:	0800b2df 	.word	0x0800b2df
 800b1a4:	0800b20b 	.word	0x0800b20b
 800b1a8:	0800b299 	.word	0x0800b299
 800b1ac:	0800b15d 	.word	0x0800b15d
 800b1b0:	0800b15d 	.word	0x0800b15d
 800b1b4:	0800b301 	.word	0x0800b301
 800b1b8:	0800b15d 	.word	0x0800b15d
 800b1bc:	0800b20b 	.word	0x0800b20b
 800b1c0:	0800b15d 	.word	0x0800b15d
 800b1c4:	0800b15d 	.word	0x0800b15d
 800b1c8:	0800b2a1 	.word	0x0800b2a1
 800b1cc:	6833      	ldr	r3, [r6, #0]
 800b1ce:	1d1a      	adds	r2, r3, #4
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6032      	str	r2, [r6, #0]
 800b1d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e09c      	b.n	800b31a <_printf_i+0x1e6>
 800b1e0:	6833      	ldr	r3, [r6, #0]
 800b1e2:	6820      	ldr	r0, [r4, #0]
 800b1e4:	1d19      	adds	r1, r3, #4
 800b1e6:	6031      	str	r1, [r6, #0]
 800b1e8:	0606      	lsls	r6, r0, #24
 800b1ea:	d501      	bpl.n	800b1f0 <_printf_i+0xbc>
 800b1ec:	681d      	ldr	r5, [r3, #0]
 800b1ee:	e003      	b.n	800b1f8 <_printf_i+0xc4>
 800b1f0:	0645      	lsls	r5, r0, #25
 800b1f2:	d5fb      	bpl.n	800b1ec <_printf_i+0xb8>
 800b1f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1f8:	2d00      	cmp	r5, #0
 800b1fa:	da03      	bge.n	800b204 <_printf_i+0xd0>
 800b1fc:	232d      	movs	r3, #45	@ 0x2d
 800b1fe:	426d      	negs	r5, r5
 800b200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b204:	4858      	ldr	r0, [pc, #352]	@ (800b368 <_printf_i+0x234>)
 800b206:	230a      	movs	r3, #10
 800b208:	e011      	b.n	800b22e <_printf_i+0xfa>
 800b20a:	6821      	ldr	r1, [r4, #0]
 800b20c:	6833      	ldr	r3, [r6, #0]
 800b20e:	0608      	lsls	r0, r1, #24
 800b210:	f853 5b04 	ldr.w	r5, [r3], #4
 800b214:	d402      	bmi.n	800b21c <_printf_i+0xe8>
 800b216:	0649      	lsls	r1, r1, #25
 800b218:	bf48      	it	mi
 800b21a:	b2ad      	uxthmi	r5, r5
 800b21c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b21e:	4852      	ldr	r0, [pc, #328]	@ (800b368 <_printf_i+0x234>)
 800b220:	6033      	str	r3, [r6, #0]
 800b222:	bf14      	ite	ne
 800b224:	230a      	movne	r3, #10
 800b226:	2308      	moveq	r3, #8
 800b228:	2100      	movs	r1, #0
 800b22a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b22e:	6866      	ldr	r6, [r4, #4]
 800b230:	60a6      	str	r6, [r4, #8]
 800b232:	2e00      	cmp	r6, #0
 800b234:	db05      	blt.n	800b242 <_printf_i+0x10e>
 800b236:	6821      	ldr	r1, [r4, #0]
 800b238:	432e      	orrs	r6, r5
 800b23a:	f021 0104 	bic.w	r1, r1, #4
 800b23e:	6021      	str	r1, [r4, #0]
 800b240:	d04b      	beq.n	800b2da <_printf_i+0x1a6>
 800b242:	4616      	mov	r6, r2
 800b244:	fbb5 f1f3 	udiv	r1, r5, r3
 800b248:	fb03 5711 	mls	r7, r3, r1, r5
 800b24c:	5dc7      	ldrb	r7, [r0, r7]
 800b24e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b252:	462f      	mov	r7, r5
 800b254:	42bb      	cmp	r3, r7
 800b256:	460d      	mov	r5, r1
 800b258:	d9f4      	bls.n	800b244 <_printf_i+0x110>
 800b25a:	2b08      	cmp	r3, #8
 800b25c:	d10b      	bne.n	800b276 <_printf_i+0x142>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	07df      	lsls	r7, r3, #31
 800b262:	d508      	bpl.n	800b276 <_printf_i+0x142>
 800b264:	6923      	ldr	r3, [r4, #16]
 800b266:	6861      	ldr	r1, [r4, #4]
 800b268:	4299      	cmp	r1, r3
 800b26a:	bfde      	ittt	le
 800b26c:	2330      	movle	r3, #48	@ 0x30
 800b26e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b272:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b276:	1b92      	subs	r2, r2, r6
 800b278:	6122      	str	r2, [r4, #16]
 800b27a:	f8cd a000 	str.w	sl, [sp]
 800b27e:	464b      	mov	r3, r9
 800b280:	aa03      	add	r2, sp, #12
 800b282:	4621      	mov	r1, r4
 800b284:	4640      	mov	r0, r8
 800b286:	f7ff fee7 	bl	800b058 <_printf_common>
 800b28a:	3001      	adds	r0, #1
 800b28c:	d14a      	bne.n	800b324 <_printf_i+0x1f0>
 800b28e:	f04f 30ff 	mov.w	r0, #4294967295
 800b292:	b004      	add	sp, #16
 800b294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	f043 0320 	orr.w	r3, r3, #32
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	4832      	ldr	r0, [pc, #200]	@ (800b36c <_printf_i+0x238>)
 800b2a2:	2778      	movs	r7, #120	@ 0x78
 800b2a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	6831      	ldr	r1, [r6, #0]
 800b2ac:	061f      	lsls	r7, r3, #24
 800b2ae:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2b2:	d402      	bmi.n	800b2ba <_printf_i+0x186>
 800b2b4:	065f      	lsls	r7, r3, #25
 800b2b6:	bf48      	it	mi
 800b2b8:	b2ad      	uxthmi	r5, r5
 800b2ba:	6031      	str	r1, [r6, #0]
 800b2bc:	07d9      	lsls	r1, r3, #31
 800b2be:	bf44      	itt	mi
 800b2c0:	f043 0320 	orrmi.w	r3, r3, #32
 800b2c4:	6023      	strmi	r3, [r4, #0]
 800b2c6:	b11d      	cbz	r5, 800b2d0 <_printf_i+0x19c>
 800b2c8:	2310      	movs	r3, #16
 800b2ca:	e7ad      	b.n	800b228 <_printf_i+0xf4>
 800b2cc:	4826      	ldr	r0, [pc, #152]	@ (800b368 <_printf_i+0x234>)
 800b2ce:	e7e9      	b.n	800b2a4 <_printf_i+0x170>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	f023 0320 	bic.w	r3, r3, #32
 800b2d6:	6023      	str	r3, [r4, #0]
 800b2d8:	e7f6      	b.n	800b2c8 <_printf_i+0x194>
 800b2da:	4616      	mov	r6, r2
 800b2dc:	e7bd      	b.n	800b25a <_printf_i+0x126>
 800b2de:	6833      	ldr	r3, [r6, #0]
 800b2e0:	6825      	ldr	r5, [r4, #0]
 800b2e2:	6961      	ldr	r1, [r4, #20]
 800b2e4:	1d18      	adds	r0, r3, #4
 800b2e6:	6030      	str	r0, [r6, #0]
 800b2e8:	062e      	lsls	r6, r5, #24
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	d501      	bpl.n	800b2f2 <_printf_i+0x1be>
 800b2ee:	6019      	str	r1, [r3, #0]
 800b2f0:	e002      	b.n	800b2f8 <_printf_i+0x1c4>
 800b2f2:	0668      	lsls	r0, r5, #25
 800b2f4:	d5fb      	bpl.n	800b2ee <_printf_i+0x1ba>
 800b2f6:	8019      	strh	r1, [r3, #0]
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	6123      	str	r3, [r4, #16]
 800b2fc:	4616      	mov	r6, r2
 800b2fe:	e7bc      	b.n	800b27a <_printf_i+0x146>
 800b300:	6833      	ldr	r3, [r6, #0]
 800b302:	1d1a      	adds	r2, r3, #4
 800b304:	6032      	str	r2, [r6, #0]
 800b306:	681e      	ldr	r6, [r3, #0]
 800b308:	6862      	ldr	r2, [r4, #4]
 800b30a:	2100      	movs	r1, #0
 800b30c:	4630      	mov	r0, r6
 800b30e:	f7f4 ff67 	bl	80001e0 <memchr>
 800b312:	b108      	cbz	r0, 800b318 <_printf_i+0x1e4>
 800b314:	1b80      	subs	r0, r0, r6
 800b316:	6060      	str	r0, [r4, #4]
 800b318:	6863      	ldr	r3, [r4, #4]
 800b31a:	6123      	str	r3, [r4, #16]
 800b31c:	2300      	movs	r3, #0
 800b31e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b322:	e7aa      	b.n	800b27a <_printf_i+0x146>
 800b324:	6923      	ldr	r3, [r4, #16]
 800b326:	4632      	mov	r2, r6
 800b328:	4649      	mov	r1, r9
 800b32a:	4640      	mov	r0, r8
 800b32c:	47d0      	blx	sl
 800b32e:	3001      	adds	r0, #1
 800b330:	d0ad      	beq.n	800b28e <_printf_i+0x15a>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	079b      	lsls	r3, r3, #30
 800b336:	d413      	bmi.n	800b360 <_printf_i+0x22c>
 800b338:	68e0      	ldr	r0, [r4, #12]
 800b33a:	9b03      	ldr	r3, [sp, #12]
 800b33c:	4298      	cmp	r0, r3
 800b33e:	bfb8      	it	lt
 800b340:	4618      	movlt	r0, r3
 800b342:	e7a6      	b.n	800b292 <_printf_i+0x15e>
 800b344:	2301      	movs	r3, #1
 800b346:	4632      	mov	r2, r6
 800b348:	4649      	mov	r1, r9
 800b34a:	4640      	mov	r0, r8
 800b34c:	47d0      	blx	sl
 800b34e:	3001      	adds	r0, #1
 800b350:	d09d      	beq.n	800b28e <_printf_i+0x15a>
 800b352:	3501      	adds	r5, #1
 800b354:	68e3      	ldr	r3, [r4, #12]
 800b356:	9903      	ldr	r1, [sp, #12]
 800b358:	1a5b      	subs	r3, r3, r1
 800b35a:	42ab      	cmp	r3, r5
 800b35c:	dcf2      	bgt.n	800b344 <_printf_i+0x210>
 800b35e:	e7eb      	b.n	800b338 <_printf_i+0x204>
 800b360:	2500      	movs	r5, #0
 800b362:	f104 0619 	add.w	r6, r4, #25
 800b366:	e7f5      	b.n	800b354 <_printf_i+0x220>
 800b368:	0800f7b6 	.word	0x0800f7b6
 800b36c:	0800f7c7 	.word	0x0800f7c7

0800b370 <std>:
 800b370:	2300      	movs	r3, #0
 800b372:	b510      	push	{r4, lr}
 800b374:	4604      	mov	r4, r0
 800b376:	e9c0 3300 	strd	r3, r3, [r0]
 800b37a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b37e:	6083      	str	r3, [r0, #8]
 800b380:	8181      	strh	r1, [r0, #12]
 800b382:	6643      	str	r3, [r0, #100]	@ 0x64
 800b384:	81c2      	strh	r2, [r0, #14]
 800b386:	6183      	str	r3, [r0, #24]
 800b388:	4619      	mov	r1, r3
 800b38a:	2208      	movs	r2, #8
 800b38c:	305c      	adds	r0, #92	@ 0x5c
 800b38e:	f000 f953 	bl	800b638 <memset>
 800b392:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c8 <std+0x58>)
 800b394:	6263      	str	r3, [r4, #36]	@ 0x24
 800b396:	4b0d      	ldr	r3, [pc, #52]	@ (800b3cc <std+0x5c>)
 800b398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b39a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d0 <std+0x60>)
 800b39c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b39e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d4 <std+0x64>)
 800b3a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d8 <std+0x68>)
 800b3a4:	6224      	str	r4, [r4, #32]
 800b3a6:	429c      	cmp	r4, r3
 800b3a8:	d006      	beq.n	800b3b8 <std+0x48>
 800b3aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3ae:	4294      	cmp	r4, r2
 800b3b0:	d002      	beq.n	800b3b8 <std+0x48>
 800b3b2:	33d0      	adds	r3, #208	@ 0xd0
 800b3b4:	429c      	cmp	r4, r3
 800b3b6:	d105      	bne.n	800b3c4 <std+0x54>
 800b3b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c0:	f000 b9c6 	b.w	800b750 <__retarget_lock_init_recursive>
 800b3c4:	bd10      	pop	{r4, pc}
 800b3c6:	bf00      	nop
 800b3c8:	0800b539 	.word	0x0800b539
 800b3cc:	0800b55b 	.word	0x0800b55b
 800b3d0:	0800b593 	.word	0x0800b593
 800b3d4:	0800b5b7 	.word	0x0800b5b7
 800b3d8:	20001364 	.word	0x20001364

0800b3dc <stdio_exit_handler>:
 800b3dc:	4a02      	ldr	r2, [pc, #8]	@ (800b3e8 <stdio_exit_handler+0xc>)
 800b3de:	4903      	ldr	r1, [pc, #12]	@ (800b3ec <stdio_exit_handler+0x10>)
 800b3e0:	4803      	ldr	r0, [pc, #12]	@ (800b3f0 <stdio_exit_handler+0x14>)
 800b3e2:	f000 b869 	b.w	800b4b8 <_fwalk_sglue>
 800b3e6:	bf00      	nop
 800b3e8:	2000006c 	.word	0x2000006c
 800b3ec:	0800d0b5 	.word	0x0800d0b5
 800b3f0:	2000007c 	.word	0x2000007c

0800b3f4 <cleanup_stdio>:
 800b3f4:	6841      	ldr	r1, [r0, #4]
 800b3f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b428 <cleanup_stdio+0x34>)
 800b3f8:	4299      	cmp	r1, r3
 800b3fa:	b510      	push	{r4, lr}
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	d001      	beq.n	800b404 <cleanup_stdio+0x10>
 800b400:	f001 fe58 	bl	800d0b4 <_fflush_r>
 800b404:	68a1      	ldr	r1, [r4, #8]
 800b406:	4b09      	ldr	r3, [pc, #36]	@ (800b42c <cleanup_stdio+0x38>)
 800b408:	4299      	cmp	r1, r3
 800b40a:	d002      	beq.n	800b412 <cleanup_stdio+0x1e>
 800b40c:	4620      	mov	r0, r4
 800b40e:	f001 fe51 	bl	800d0b4 <_fflush_r>
 800b412:	68e1      	ldr	r1, [r4, #12]
 800b414:	4b06      	ldr	r3, [pc, #24]	@ (800b430 <cleanup_stdio+0x3c>)
 800b416:	4299      	cmp	r1, r3
 800b418:	d004      	beq.n	800b424 <cleanup_stdio+0x30>
 800b41a:	4620      	mov	r0, r4
 800b41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b420:	f001 be48 	b.w	800d0b4 <_fflush_r>
 800b424:	bd10      	pop	{r4, pc}
 800b426:	bf00      	nop
 800b428:	20001364 	.word	0x20001364
 800b42c:	200013cc 	.word	0x200013cc
 800b430:	20001434 	.word	0x20001434

0800b434 <global_stdio_init.part.0>:
 800b434:	b510      	push	{r4, lr}
 800b436:	4b0b      	ldr	r3, [pc, #44]	@ (800b464 <global_stdio_init.part.0+0x30>)
 800b438:	4c0b      	ldr	r4, [pc, #44]	@ (800b468 <global_stdio_init.part.0+0x34>)
 800b43a:	4a0c      	ldr	r2, [pc, #48]	@ (800b46c <global_stdio_init.part.0+0x38>)
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	4620      	mov	r0, r4
 800b440:	2200      	movs	r2, #0
 800b442:	2104      	movs	r1, #4
 800b444:	f7ff ff94 	bl	800b370 <std>
 800b448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b44c:	2201      	movs	r2, #1
 800b44e:	2109      	movs	r1, #9
 800b450:	f7ff ff8e 	bl	800b370 <std>
 800b454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b458:	2202      	movs	r2, #2
 800b45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b45e:	2112      	movs	r1, #18
 800b460:	f7ff bf86 	b.w	800b370 <std>
 800b464:	2000149c 	.word	0x2000149c
 800b468:	20001364 	.word	0x20001364
 800b46c:	0800b3dd 	.word	0x0800b3dd

0800b470 <__sfp_lock_acquire>:
 800b470:	4801      	ldr	r0, [pc, #4]	@ (800b478 <__sfp_lock_acquire+0x8>)
 800b472:	f000 b96e 	b.w	800b752 <__retarget_lock_acquire_recursive>
 800b476:	bf00      	nop
 800b478:	200014a5 	.word	0x200014a5

0800b47c <__sfp_lock_release>:
 800b47c:	4801      	ldr	r0, [pc, #4]	@ (800b484 <__sfp_lock_release+0x8>)
 800b47e:	f000 b969 	b.w	800b754 <__retarget_lock_release_recursive>
 800b482:	bf00      	nop
 800b484:	200014a5 	.word	0x200014a5

0800b488 <__sinit>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	4604      	mov	r4, r0
 800b48c:	f7ff fff0 	bl	800b470 <__sfp_lock_acquire>
 800b490:	6a23      	ldr	r3, [r4, #32]
 800b492:	b11b      	cbz	r3, 800b49c <__sinit+0x14>
 800b494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b498:	f7ff bff0 	b.w	800b47c <__sfp_lock_release>
 800b49c:	4b04      	ldr	r3, [pc, #16]	@ (800b4b0 <__sinit+0x28>)
 800b49e:	6223      	str	r3, [r4, #32]
 800b4a0:	4b04      	ldr	r3, [pc, #16]	@ (800b4b4 <__sinit+0x2c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1f5      	bne.n	800b494 <__sinit+0xc>
 800b4a8:	f7ff ffc4 	bl	800b434 <global_stdio_init.part.0>
 800b4ac:	e7f2      	b.n	800b494 <__sinit+0xc>
 800b4ae:	bf00      	nop
 800b4b0:	0800b3f5 	.word	0x0800b3f5
 800b4b4:	2000149c 	.word	0x2000149c

0800b4b8 <_fwalk_sglue>:
 800b4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4bc:	4607      	mov	r7, r0
 800b4be:	4688      	mov	r8, r1
 800b4c0:	4614      	mov	r4, r2
 800b4c2:	2600      	movs	r6, #0
 800b4c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4c8:	f1b9 0901 	subs.w	r9, r9, #1
 800b4cc:	d505      	bpl.n	800b4da <_fwalk_sglue+0x22>
 800b4ce:	6824      	ldr	r4, [r4, #0]
 800b4d0:	2c00      	cmp	r4, #0
 800b4d2:	d1f7      	bne.n	800b4c4 <_fwalk_sglue+0xc>
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4da:	89ab      	ldrh	r3, [r5, #12]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d907      	bls.n	800b4f0 <_fwalk_sglue+0x38>
 800b4e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	d003      	beq.n	800b4f0 <_fwalk_sglue+0x38>
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	47c0      	blx	r8
 800b4ee:	4306      	orrs	r6, r0
 800b4f0:	3568      	adds	r5, #104	@ 0x68
 800b4f2:	e7e9      	b.n	800b4c8 <_fwalk_sglue+0x10>

0800b4f4 <siprintf>:
 800b4f4:	b40e      	push	{r1, r2, r3}
 800b4f6:	b510      	push	{r4, lr}
 800b4f8:	b09d      	sub	sp, #116	@ 0x74
 800b4fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b4fc:	9002      	str	r0, [sp, #8]
 800b4fe:	9006      	str	r0, [sp, #24]
 800b500:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b504:	480a      	ldr	r0, [pc, #40]	@ (800b530 <siprintf+0x3c>)
 800b506:	9107      	str	r1, [sp, #28]
 800b508:	9104      	str	r1, [sp, #16]
 800b50a:	490a      	ldr	r1, [pc, #40]	@ (800b534 <siprintf+0x40>)
 800b50c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b510:	9105      	str	r1, [sp, #20]
 800b512:	2400      	movs	r4, #0
 800b514:	a902      	add	r1, sp, #8
 800b516:	6800      	ldr	r0, [r0, #0]
 800b518:	9301      	str	r3, [sp, #4]
 800b51a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b51c:	f001 fc4a 	bl	800cdb4 <_svfiprintf_r>
 800b520:	9b02      	ldr	r3, [sp, #8]
 800b522:	701c      	strb	r4, [r3, #0]
 800b524:	b01d      	add	sp, #116	@ 0x74
 800b526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b52a:	b003      	add	sp, #12
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	20000078 	.word	0x20000078
 800b534:	ffff0208 	.word	0xffff0208

0800b538 <__sread>:
 800b538:	b510      	push	{r4, lr}
 800b53a:	460c      	mov	r4, r1
 800b53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b540:	f000 f8b8 	bl	800b6b4 <_read_r>
 800b544:	2800      	cmp	r0, #0
 800b546:	bfab      	itete	ge
 800b548:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b54a:	89a3      	ldrhlt	r3, [r4, #12]
 800b54c:	181b      	addge	r3, r3, r0
 800b54e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b552:	bfac      	ite	ge
 800b554:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b556:	81a3      	strhlt	r3, [r4, #12]
 800b558:	bd10      	pop	{r4, pc}

0800b55a <__swrite>:
 800b55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55e:	461f      	mov	r7, r3
 800b560:	898b      	ldrh	r3, [r1, #12]
 800b562:	05db      	lsls	r3, r3, #23
 800b564:	4605      	mov	r5, r0
 800b566:	460c      	mov	r4, r1
 800b568:	4616      	mov	r6, r2
 800b56a:	d505      	bpl.n	800b578 <__swrite+0x1e>
 800b56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b570:	2302      	movs	r3, #2
 800b572:	2200      	movs	r2, #0
 800b574:	f000 f88c 	bl	800b690 <_lseek_r>
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b57e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b582:	81a3      	strh	r3, [r4, #12]
 800b584:	4632      	mov	r2, r6
 800b586:	463b      	mov	r3, r7
 800b588:	4628      	mov	r0, r5
 800b58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b58e:	f000 b8a3 	b.w	800b6d8 <_write_r>

0800b592 <__sseek>:
 800b592:	b510      	push	{r4, lr}
 800b594:	460c      	mov	r4, r1
 800b596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59a:	f000 f879 	bl	800b690 <_lseek_r>
 800b59e:	1c43      	adds	r3, r0, #1
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	bf15      	itete	ne
 800b5a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5ae:	81a3      	strheq	r3, [r4, #12]
 800b5b0:	bf18      	it	ne
 800b5b2:	81a3      	strhne	r3, [r4, #12]
 800b5b4:	bd10      	pop	{r4, pc}

0800b5b6 <__sclose>:
 800b5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ba:	f000 b859 	b.w	800b670 <_close_r>

0800b5be <_vsniprintf_r>:
 800b5be:	b530      	push	{r4, r5, lr}
 800b5c0:	4614      	mov	r4, r2
 800b5c2:	2c00      	cmp	r4, #0
 800b5c4:	b09b      	sub	sp, #108	@ 0x6c
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	da05      	bge.n	800b5d8 <_vsniprintf_r+0x1a>
 800b5cc:	238b      	movs	r3, #139	@ 0x8b
 800b5ce:	6003      	str	r3, [r0, #0]
 800b5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d4:	b01b      	add	sp, #108	@ 0x6c
 800b5d6:	bd30      	pop	{r4, r5, pc}
 800b5d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b5dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b5e0:	f04f 0300 	mov.w	r3, #0
 800b5e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b5e6:	bf14      	ite	ne
 800b5e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b5ec:	4623      	moveq	r3, r4
 800b5ee:	9302      	str	r3, [sp, #8]
 800b5f0:	9305      	str	r3, [sp, #20]
 800b5f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b5f6:	9100      	str	r1, [sp, #0]
 800b5f8:	9104      	str	r1, [sp, #16]
 800b5fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b5fe:	4669      	mov	r1, sp
 800b600:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b602:	f001 fbd7 	bl	800cdb4 <_svfiprintf_r>
 800b606:	1c43      	adds	r3, r0, #1
 800b608:	bfbc      	itt	lt
 800b60a:	238b      	movlt	r3, #139	@ 0x8b
 800b60c:	602b      	strlt	r3, [r5, #0]
 800b60e:	2c00      	cmp	r4, #0
 800b610:	d0e0      	beq.n	800b5d4 <_vsniprintf_r+0x16>
 800b612:	9b00      	ldr	r3, [sp, #0]
 800b614:	2200      	movs	r2, #0
 800b616:	701a      	strb	r2, [r3, #0]
 800b618:	e7dc      	b.n	800b5d4 <_vsniprintf_r+0x16>
	...

0800b61c <vsniprintf>:
 800b61c:	b507      	push	{r0, r1, r2, lr}
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	4613      	mov	r3, r2
 800b622:	460a      	mov	r2, r1
 800b624:	4601      	mov	r1, r0
 800b626:	4803      	ldr	r0, [pc, #12]	@ (800b634 <vsniprintf+0x18>)
 800b628:	6800      	ldr	r0, [r0, #0]
 800b62a:	f7ff ffc8 	bl	800b5be <_vsniprintf_r>
 800b62e:	b003      	add	sp, #12
 800b630:	f85d fb04 	ldr.w	pc, [sp], #4
 800b634:	20000078 	.word	0x20000078

0800b638 <memset>:
 800b638:	4402      	add	r2, r0
 800b63a:	4603      	mov	r3, r0
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d100      	bne.n	800b642 <memset+0xa>
 800b640:	4770      	bx	lr
 800b642:	f803 1b01 	strb.w	r1, [r3], #1
 800b646:	e7f9      	b.n	800b63c <memset+0x4>

0800b648 <strcat>:
 800b648:	b510      	push	{r4, lr}
 800b64a:	4602      	mov	r2, r0
 800b64c:	7814      	ldrb	r4, [r2, #0]
 800b64e:	4613      	mov	r3, r2
 800b650:	3201      	adds	r2, #1
 800b652:	2c00      	cmp	r4, #0
 800b654:	d1fa      	bne.n	800b64c <strcat+0x4>
 800b656:	3b01      	subs	r3, #1
 800b658:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b65c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b660:	2a00      	cmp	r2, #0
 800b662:	d1f9      	bne.n	800b658 <strcat+0x10>
 800b664:	bd10      	pop	{r4, pc}
	...

0800b668 <_localeconv_r>:
 800b668:	4800      	ldr	r0, [pc, #0]	@ (800b66c <_localeconv_r+0x4>)
 800b66a:	4770      	bx	lr
 800b66c:	200001b8 	.word	0x200001b8

0800b670 <_close_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d06      	ldr	r5, [pc, #24]	@ (800b68c <_close_r+0x1c>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	602b      	str	r3, [r5, #0]
 800b67c:	f7f9 fc98 	bl	8004fb0 <_close>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_close_r+0x1a>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	b103      	cbz	r3, 800b68a <_close_r+0x1a>
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	200014a0 	.word	0x200014a0

0800b690 <_lseek_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d07      	ldr	r5, [pc, #28]	@ (800b6b0 <_lseek_r+0x20>)
 800b694:	4604      	mov	r4, r0
 800b696:	4608      	mov	r0, r1
 800b698:	4611      	mov	r1, r2
 800b69a:	2200      	movs	r2, #0
 800b69c:	602a      	str	r2, [r5, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f7f9 fcad 	bl	8004ffe <_lseek>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_lseek_r+0x1e>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_lseek_r+0x1e>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	200014a0 	.word	0x200014a0

0800b6b4 <_read_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d07      	ldr	r5, [pc, #28]	@ (800b6d4 <_read_r+0x20>)
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	4611      	mov	r1, r2
 800b6be:	2200      	movs	r2, #0
 800b6c0:	602a      	str	r2, [r5, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f7f9 fc3b 	bl	8004f3e <_read>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_read_r+0x1e>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_read_r+0x1e>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	200014a0 	.word	0x200014a0

0800b6d8 <_write_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d07      	ldr	r5, [pc, #28]	@ (800b6f8 <_write_r+0x20>)
 800b6dc:	4604      	mov	r4, r0
 800b6de:	4608      	mov	r0, r1
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	602a      	str	r2, [r5, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f7f9 fc46 	bl	8004f78 <_write>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_write_r+0x1e>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_write_r+0x1e>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	200014a0 	.word	0x200014a0

0800b6fc <__errno>:
 800b6fc:	4b01      	ldr	r3, [pc, #4]	@ (800b704 <__errno+0x8>)
 800b6fe:	6818      	ldr	r0, [r3, #0]
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	20000078 	.word	0x20000078

0800b708 <__libc_init_array>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	4d0d      	ldr	r5, [pc, #52]	@ (800b740 <__libc_init_array+0x38>)
 800b70c:	4c0d      	ldr	r4, [pc, #52]	@ (800b744 <__libc_init_array+0x3c>)
 800b70e:	1b64      	subs	r4, r4, r5
 800b710:	10a4      	asrs	r4, r4, #2
 800b712:	2600      	movs	r6, #0
 800b714:	42a6      	cmp	r6, r4
 800b716:	d109      	bne.n	800b72c <__libc_init_array+0x24>
 800b718:	4d0b      	ldr	r5, [pc, #44]	@ (800b748 <__libc_init_array+0x40>)
 800b71a:	4c0c      	ldr	r4, [pc, #48]	@ (800b74c <__libc_init_array+0x44>)
 800b71c:	f002 f914 	bl	800d948 <_init>
 800b720:	1b64      	subs	r4, r4, r5
 800b722:	10a4      	asrs	r4, r4, #2
 800b724:	2600      	movs	r6, #0
 800b726:	42a6      	cmp	r6, r4
 800b728:	d105      	bne.n	800b736 <__libc_init_array+0x2e>
 800b72a:	bd70      	pop	{r4, r5, r6, pc}
 800b72c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b730:	4798      	blx	r3
 800b732:	3601      	adds	r6, #1
 800b734:	e7ee      	b.n	800b714 <__libc_init_array+0xc>
 800b736:	f855 3b04 	ldr.w	r3, [r5], #4
 800b73a:	4798      	blx	r3
 800b73c:	3601      	adds	r6, #1
 800b73e:	e7f2      	b.n	800b726 <__libc_init_array+0x1e>
 800b740:	0800fb24 	.word	0x0800fb24
 800b744:	0800fb24 	.word	0x0800fb24
 800b748:	0800fb24 	.word	0x0800fb24
 800b74c:	0800fb28 	.word	0x0800fb28

0800b750 <__retarget_lock_init_recursive>:
 800b750:	4770      	bx	lr

0800b752 <__retarget_lock_acquire_recursive>:
 800b752:	4770      	bx	lr

0800b754 <__retarget_lock_release_recursive>:
 800b754:	4770      	bx	lr

0800b756 <quorem>:
 800b756:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75a:	6903      	ldr	r3, [r0, #16]
 800b75c:	690c      	ldr	r4, [r1, #16]
 800b75e:	42a3      	cmp	r3, r4
 800b760:	4607      	mov	r7, r0
 800b762:	db7e      	blt.n	800b862 <quorem+0x10c>
 800b764:	3c01      	subs	r4, #1
 800b766:	f101 0814 	add.w	r8, r1, #20
 800b76a:	00a3      	lsls	r3, r4, #2
 800b76c:	f100 0514 	add.w	r5, r0, #20
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b77c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b780:	3301      	adds	r3, #1
 800b782:	429a      	cmp	r2, r3
 800b784:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b788:	fbb2 f6f3 	udiv	r6, r2, r3
 800b78c:	d32e      	bcc.n	800b7ec <quorem+0x96>
 800b78e:	f04f 0a00 	mov.w	sl, #0
 800b792:	46c4      	mov	ip, r8
 800b794:	46ae      	mov	lr, r5
 800b796:	46d3      	mov	fp, sl
 800b798:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b79c:	b298      	uxth	r0, r3
 800b79e:	fb06 a000 	mla	r0, r6, r0, sl
 800b7a2:	0c02      	lsrs	r2, r0, #16
 800b7a4:	0c1b      	lsrs	r3, r3, #16
 800b7a6:	fb06 2303 	mla	r3, r6, r3, r2
 800b7aa:	f8de 2000 	ldr.w	r2, [lr]
 800b7ae:	b280      	uxth	r0, r0
 800b7b0:	b292      	uxth	r2, r2
 800b7b2:	1a12      	subs	r2, r2, r0
 800b7b4:	445a      	add	r2, fp
 800b7b6:	f8de 0000 	ldr.w	r0, [lr]
 800b7ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7c8:	b292      	uxth	r2, r2
 800b7ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7ce:	45e1      	cmp	r9, ip
 800b7d0:	f84e 2b04 	str.w	r2, [lr], #4
 800b7d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b7d8:	d2de      	bcs.n	800b798 <quorem+0x42>
 800b7da:	9b00      	ldr	r3, [sp, #0]
 800b7dc:	58eb      	ldr	r3, [r5, r3]
 800b7de:	b92b      	cbnz	r3, 800b7ec <quorem+0x96>
 800b7e0:	9b01      	ldr	r3, [sp, #4]
 800b7e2:	3b04      	subs	r3, #4
 800b7e4:	429d      	cmp	r5, r3
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	d32f      	bcc.n	800b84a <quorem+0xf4>
 800b7ea:	613c      	str	r4, [r7, #16]
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	f001 f97d 	bl	800caec <__mcmp>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	db25      	blt.n	800b842 <quorem+0xec>
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7fe:	f8d1 c000 	ldr.w	ip, [r1]
 800b802:	fa1f fe82 	uxth.w	lr, r2
 800b806:	fa1f f38c 	uxth.w	r3, ip
 800b80a:	eba3 030e 	sub.w	r3, r3, lr
 800b80e:	4403      	add	r3, r0
 800b810:	0c12      	lsrs	r2, r2, #16
 800b812:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b816:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b820:	45c1      	cmp	r9, r8
 800b822:	f841 3b04 	str.w	r3, [r1], #4
 800b826:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b82a:	d2e6      	bcs.n	800b7fa <quorem+0xa4>
 800b82c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b830:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b834:	b922      	cbnz	r2, 800b840 <quorem+0xea>
 800b836:	3b04      	subs	r3, #4
 800b838:	429d      	cmp	r5, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	d30b      	bcc.n	800b856 <quorem+0x100>
 800b83e:	613c      	str	r4, [r7, #16]
 800b840:	3601      	adds	r6, #1
 800b842:	4630      	mov	r0, r6
 800b844:	b003      	add	sp, #12
 800b846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	3b04      	subs	r3, #4
 800b84e:	2a00      	cmp	r2, #0
 800b850:	d1cb      	bne.n	800b7ea <quorem+0x94>
 800b852:	3c01      	subs	r4, #1
 800b854:	e7c6      	b.n	800b7e4 <quorem+0x8e>
 800b856:	6812      	ldr	r2, [r2, #0]
 800b858:	3b04      	subs	r3, #4
 800b85a:	2a00      	cmp	r2, #0
 800b85c:	d1ef      	bne.n	800b83e <quorem+0xe8>
 800b85e:	3c01      	subs	r4, #1
 800b860:	e7ea      	b.n	800b838 <quorem+0xe2>
 800b862:	2000      	movs	r0, #0
 800b864:	e7ee      	b.n	800b844 <quorem+0xee>
	...

0800b868 <_dtoa_r>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	69c7      	ldr	r7, [r0, #28]
 800b86e:	b097      	sub	sp, #92	@ 0x5c
 800b870:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b874:	ec55 4b10 	vmov	r4, r5, d0
 800b878:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b87a:	9107      	str	r1, [sp, #28]
 800b87c:	4681      	mov	r9, r0
 800b87e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b880:	9311      	str	r3, [sp, #68]	@ 0x44
 800b882:	b97f      	cbnz	r7, 800b8a4 <_dtoa_r+0x3c>
 800b884:	2010      	movs	r0, #16
 800b886:	f000 fe09 	bl	800c49c <malloc>
 800b88a:	4602      	mov	r2, r0
 800b88c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b890:	b920      	cbnz	r0, 800b89c <_dtoa_r+0x34>
 800b892:	4ba9      	ldr	r3, [pc, #676]	@ (800bb38 <_dtoa_r+0x2d0>)
 800b894:	21ef      	movs	r1, #239	@ 0xef
 800b896:	48a9      	ldr	r0, [pc, #676]	@ (800bb3c <_dtoa_r+0x2d4>)
 800b898:	f001 fc6c 	bl	800d174 <__assert_func>
 800b89c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b8a0:	6007      	str	r7, [r0, #0]
 800b8a2:	60c7      	str	r7, [r0, #12]
 800b8a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b8a8:	6819      	ldr	r1, [r3, #0]
 800b8aa:	b159      	cbz	r1, 800b8c4 <_dtoa_r+0x5c>
 800b8ac:	685a      	ldr	r2, [r3, #4]
 800b8ae:	604a      	str	r2, [r1, #4]
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	4093      	lsls	r3, r2
 800b8b4:	608b      	str	r3, [r1, #8]
 800b8b6:	4648      	mov	r0, r9
 800b8b8:	f000 fee6 	bl	800c688 <_Bfree>
 800b8bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	1e2b      	subs	r3, r5, #0
 800b8c6:	bfb9      	ittee	lt
 800b8c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8cc:	9305      	strlt	r3, [sp, #20]
 800b8ce:	2300      	movge	r3, #0
 800b8d0:	6033      	strge	r3, [r6, #0]
 800b8d2:	9f05      	ldr	r7, [sp, #20]
 800b8d4:	4b9a      	ldr	r3, [pc, #616]	@ (800bb40 <_dtoa_r+0x2d8>)
 800b8d6:	bfbc      	itt	lt
 800b8d8:	2201      	movlt	r2, #1
 800b8da:	6032      	strlt	r2, [r6, #0]
 800b8dc:	43bb      	bics	r3, r7
 800b8de:	d112      	bne.n	800b906 <_dtoa_r+0x9e>
 800b8e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b8e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8ec:	4323      	orrs	r3, r4
 800b8ee:	f000 855a 	beq.w	800c3a6 <_dtoa_r+0xb3e>
 800b8f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bb54 <_dtoa_r+0x2ec>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 855c 	beq.w	800c3b6 <_dtoa_r+0xb4e>
 800b8fe:	f10a 0303 	add.w	r3, sl, #3
 800b902:	f000 bd56 	b.w	800c3b2 <_dtoa_r+0xb4a>
 800b906:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b90a:	2200      	movs	r2, #0
 800b90c:	ec51 0b17 	vmov	r0, r1, d7
 800b910:	2300      	movs	r3, #0
 800b912:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b916:	f7f5 f8df 	bl	8000ad8 <__aeabi_dcmpeq>
 800b91a:	4680      	mov	r8, r0
 800b91c:	b158      	cbz	r0, 800b936 <_dtoa_r+0xce>
 800b91e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b920:	2301      	movs	r3, #1
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b926:	b113      	cbz	r3, 800b92e <_dtoa_r+0xc6>
 800b928:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b92a:	4b86      	ldr	r3, [pc, #536]	@ (800bb44 <_dtoa_r+0x2dc>)
 800b92c:	6013      	str	r3, [r2, #0]
 800b92e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bb58 <_dtoa_r+0x2f0>
 800b932:	f000 bd40 	b.w	800c3b6 <_dtoa_r+0xb4e>
 800b936:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b93a:	aa14      	add	r2, sp, #80	@ 0x50
 800b93c:	a915      	add	r1, sp, #84	@ 0x54
 800b93e:	4648      	mov	r0, r9
 800b940:	f001 f984 	bl	800cc4c <__d2b>
 800b944:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b948:	9002      	str	r0, [sp, #8]
 800b94a:	2e00      	cmp	r6, #0
 800b94c:	d078      	beq.n	800ba40 <_dtoa_r+0x1d8>
 800b94e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b950:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b958:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b95c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b960:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b964:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b968:	4619      	mov	r1, r3
 800b96a:	2200      	movs	r2, #0
 800b96c:	4b76      	ldr	r3, [pc, #472]	@ (800bb48 <_dtoa_r+0x2e0>)
 800b96e:	f7f4 fc93 	bl	8000298 <__aeabi_dsub>
 800b972:	a36b      	add	r3, pc, #428	@ (adr r3, 800bb20 <_dtoa_r+0x2b8>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fe46 	bl	8000608 <__aeabi_dmul>
 800b97c:	a36a      	add	r3, pc, #424	@ (adr r3, 800bb28 <_dtoa_r+0x2c0>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fc8b 	bl	800029c <__adddf3>
 800b986:	4604      	mov	r4, r0
 800b988:	4630      	mov	r0, r6
 800b98a:	460d      	mov	r5, r1
 800b98c:	f7f4 fdd2 	bl	8000534 <__aeabi_i2d>
 800b990:	a367      	add	r3, pc, #412	@ (adr r3, 800bb30 <_dtoa_r+0x2c8>)
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	f7f4 fe37 	bl	8000608 <__aeabi_dmul>
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	f7f4 fc7b 	bl	800029c <__adddf3>
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	460d      	mov	r5, r1
 800b9aa:	f7f5 f8dd 	bl	8000b68 <__aeabi_d2iz>
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	4607      	mov	r7, r0
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f5 f898 	bl	8000aec <__aeabi_dcmplt>
 800b9bc:	b140      	cbz	r0, 800b9d0 <_dtoa_r+0x168>
 800b9be:	4638      	mov	r0, r7
 800b9c0:	f7f4 fdb8 	bl	8000534 <__aeabi_i2d>
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	462b      	mov	r3, r5
 800b9c8:	f7f5 f886 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9cc:	b900      	cbnz	r0, 800b9d0 <_dtoa_r+0x168>
 800b9ce:	3f01      	subs	r7, #1
 800b9d0:	2f16      	cmp	r7, #22
 800b9d2:	d852      	bhi.n	800ba7a <_dtoa_r+0x212>
 800b9d4:	4b5d      	ldr	r3, [pc, #372]	@ (800bb4c <_dtoa_r+0x2e4>)
 800b9d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b9e2:	f7f5 f883 	bl	8000aec <__aeabi_dcmplt>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d049      	beq.n	800ba7e <_dtoa_r+0x216>
 800b9ea:	3f01      	subs	r7, #1
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b9f2:	1b9b      	subs	r3, r3, r6
 800b9f4:	1e5a      	subs	r2, r3, #1
 800b9f6:	bf45      	ittet	mi
 800b9f8:	f1c3 0301 	rsbmi	r3, r3, #1
 800b9fc:	9300      	strmi	r3, [sp, #0]
 800b9fe:	2300      	movpl	r3, #0
 800ba00:	2300      	movmi	r3, #0
 800ba02:	9206      	str	r2, [sp, #24]
 800ba04:	bf54      	ite	pl
 800ba06:	9300      	strpl	r3, [sp, #0]
 800ba08:	9306      	strmi	r3, [sp, #24]
 800ba0a:	2f00      	cmp	r7, #0
 800ba0c:	db39      	blt.n	800ba82 <_dtoa_r+0x21a>
 800ba0e:	9b06      	ldr	r3, [sp, #24]
 800ba10:	970d      	str	r7, [sp, #52]	@ 0x34
 800ba12:	443b      	add	r3, r7
 800ba14:	9306      	str	r3, [sp, #24]
 800ba16:	2300      	movs	r3, #0
 800ba18:	9308      	str	r3, [sp, #32]
 800ba1a:	9b07      	ldr	r3, [sp, #28]
 800ba1c:	2b09      	cmp	r3, #9
 800ba1e:	d863      	bhi.n	800bae8 <_dtoa_r+0x280>
 800ba20:	2b05      	cmp	r3, #5
 800ba22:	bfc4      	itt	gt
 800ba24:	3b04      	subgt	r3, #4
 800ba26:	9307      	strgt	r3, [sp, #28]
 800ba28:	9b07      	ldr	r3, [sp, #28]
 800ba2a:	f1a3 0302 	sub.w	r3, r3, #2
 800ba2e:	bfcc      	ite	gt
 800ba30:	2400      	movgt	r4, #0
 800ba32:	2401      	movle	r4, #1
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	d863      	bhi.n	800bb00 <_dtoa_r+0x298>
 800ba38:	e8df f003 	tbb	[pc, r3]
 800ba3c:	2b375452 	.word	0x2b375452
 800ba40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ba44:	441e      	add	r6, r3
 800ba46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba4a:	2b20      	cmp	r3, #32
 800ba4c:	bfc1      	itttt	gt
 800ba4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba52:	409f      	lslgt	r7, r3
 800ba54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba58:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba5c:	bfd6      	itet	le
 800ba5e:	f1c3 0320 	rsble	r3, r3, #32
 800ba62:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba66:	fa04 f003 	lslle.w	r0, r4, r3
 800ba6a:	f7f4 fd53 	bl	8000514 <__aeabi_ui2d>
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba74:	3e01      	subs	r6, #1
 800ba76:	9212      	str	r2, [sp, #72]	@ 0x48
 800ba78:	e776      	b.n	800b968 <_dtoa_r+0x100>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e7b7      	b.n	800b9ee <_dtoa_r+0x186>
 800ba7e:	9010      	str	r0, [sp, #64]	@ 0x40
 800ba80:	e7b6      	b.n	800b9f0 <_dtoa_r+0x188>
 800ba82:	9b00      	ldr	r3, [sp, #0]
 800ba84:	1bdb      	subs	r3, r3, r7
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	427b      	negs	r3, r7
 800ba8a:	9308      	str	r3, [sp, #32]
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ba90:	e7c3      	b.n	800ba1a <_dtoa_r+0x1b2>
 800ba92:	2301      	movs	r3, #1
 800ba94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba98:	eb07 0b03 	add.w	fp, r7, r3
 800ba9c:	f10b 0301 	add.w	r3, fp, #1
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	9303      	str	r3, [sp, #12]
 800baa4:	bfb8      	it	lt
 800baa6:	2301      	movlt	r3, #1
 800baa8:	e006      	b.n	800bab8 <_dtoa_r+0x250>
 800baaa:	2301      	movs	r3, #1
 800baac:	9309      	str	r3, [sp, #36]	@ 0x24
 800baae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	dd28      	ble.n	800bb06 <_dtoa_r+0x29e>
 800bab4:	469b      	mov	fp, r3
 800bab6:	9303      	str	r3, [sp, #12]
 800bab8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800babc:	2100      	movs	r1, #0
 800babe:	2204      	movs	r2, #4
 800bac0:	f102 0514 	add.w	r5, r2, #20
 800bac4:	429d      	cmp	r5, r3
 800bac6:	d926      	bls.n	800bb16 <_dtoa_r+0x2ae>
 800bac8:	6041      	str	r1, [r0, #4]
 800baca:	4648      	mov	r0, r9
 800bacc:	f000 fd9c 	bl	800c608 <_Balloc>
 800bad0:	4682      	mov	sl, r0
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d142      	bne.n	800bb5c <_dtoa_r+0x2f4>
 800bad6:	4b1e      	ldr	r3, [pc, #120]	@ (800bb50 <_dtoa_r+0x2e8>)
 800bad8:	4602      	mov	r2, r0
 800bada:	f240 11af 	movw	r1, #431	@ 0x1af
 800bade:	e6da      	b.n	800b896 <_dtoa_r+0x2e>
 800bae0:	2300      	movs	r3, #0
 800bae2:	e7e3      	b.n	800baac <_dtoa_r+0x244>
 800bae4:	2300      	movs	r3, #0
 800bae6:	e7d5      	b.n	800ba94 <_dtoa_r+0x22c>
 800bae8:	2401      	movs	r4, #1
 800baea:	2300      	movs	r3, #0
 800baec:	9307      	str	r3, [sp, #28]
 800baee:	9409      	str	r4, [sp, #36]	@ 0x24
 800baf0:	f04f 3bff 	mov.w	fp, #4294967295
 800baf4:	2200      	movs	r2, #0
 800baf6:	f8cd b00c 	str.w	fp, [sp, #12]
 800bafa:	2312      	movs	r3, #18
 800bafc:	920c      	str	r2, [sp, #48]	@ 0x30
 800bafe:	e7db      	b.n	800bab8 <_dtoa_r+0x250>
 800bb00:	2301      	movs	r3, #1
 800bb02:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb04:	e7f4      	b.n	800baf0 <_dtoa_r+0x288>
 800bb06:	f04f 0b01 	mov.w	fp, #1
 800bb0a:	f8cd b00c 	str.w	fp, [sp, #12]
 800bb0e:	465b      	mov	r3, fp
 800bb10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bb14:	e7d0      	b.n	800bab8 <_dtoa_r+0x250>
 800bb16:	3101      	adds	r1, #1
 800bb18:	0052      	lsls	r2, r2, #1
 800bb1a:	e7d1      	b.n	800bac0 <_dtoa_r+0x258>
 800bb1c:	f3af 8000 	nop.w
 800bb20:	636f4361 	.word	0x636f4361
 800bb24:	3fd287a7 	.word	0x3fd287a7
 800bb28:	8b60c8b3 	.word	0x8b60c8b3
 800bb2c:	3fc68a28 	.word	0x3fc68a28
 800bb30:	509f79fb 	.word	0x509f79fb
 800bb34:	3fd34413 	.word	0x3fd34413
 800bb38:	0800f7e5 	.word	0x0800f7e5
 800bb3c:	0800f7fc 	.word	0x0800f7fc
 800bb40:	7ff00000 	.word	0x7ff00000
 800bb44:	0800f7b5 	.word	0x0800f7b5
 800bb48:	3ff80000 	.word	0x3ff80000
 800bb4c:	0800f950 	.word	0x0800f950
 800bb50:	0800f854 	.word	0x0800f854
 800bb54:	0800f7e1 	.word	0x0800f7e1
 800bb58:	0800f7b4 	.word	0x0800f7b4
 800bb5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bb60:	6018      	str	r0, [r3, #0]
 800bb62:	9b03      	ldr	r3, [sp, #12]
 800bb64:	2b0e      	cmp	r3, #14
 800bb66:	f200 80a1 	bhi.w	800bcac <_dtoa_r+0x444>
 800bb6a:	2c00      	cmp	r4, #0
 800bb6c:	f000 809e 	beq.w	800bcac <_dtoa_r+0x444>
 800bb70:	2f00      	cmp	r7, #0
 800bb72:	dd33      	ble.n	800bbdc <_dtoa_r+0x374>
 800bb74:	4b9c      	ldr	r3, [pc, #624]	@ (800bde8 <_dtoa_r+0x580>)
 800bb76:	f007 020f 	and.w	r2, r7, #15
 800bb7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb7e:	ed93 7b00 	vldr	d7, [r3]
 800bb82:	05f8      	lsls	r0, r7, #23
 800bb84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bb88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb8c:	d516      	bpl.n	800bbbc <_dtoa_r+0x354>
 800bb8e:	4b97      	ldr	r3, [pc, #604]	@ (800bdec <_dtoa_r+0x584>)
 800bb90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bb94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb98:	f7f4 fe60 	bl	800085c <__aeabi_ddiv>
 800bb9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bba0:	f004 040f 	and.w	r4, r4, #15
 800bba4:	2603      	movs	r6, #3
 800bba6:	4d91      	ldr	r5, [pc, #580]	@ (800bdec <_dtoa_r+0x584>)
 800bba8:	b954      	cbnz	r4, 800bbc0 <_dtoa_r+0x358>
 800bbaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bbae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbb2:	f7f4 fe53 	bl	800085c <__aeabi_ddiv>
 800bbb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbba:	e028      	b.n	800bc0e <_dtoa_r+0x3a6>
 800bbbc:	2602      	movs	r6, #2
 800bbbe:	e7f2      	b.n	800bba6 <_dtoa_r+0x33e>
 800bbc0:	07e1      	lsls	r1, r4, #31
 800bbc2:	d508      	bpl.n	800bbd6 <_dtoa_r+0x36e>
 800bbc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bbc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbcc:	f7f4 fd1c 	bl	8000608 <__aeabi_dmul>
 800bbd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bbd4:	3601      	adds	r6, #1
 800bbd6:	1064      	asrs	r4, r4, #1
 800bbd8:	3508      	adds	r5, #8
 800bbda:	e7e5      	b.n	800bba8 <_dtoa_r+0x340>
 800bbdc:	f000 80af 	beq.w	800bd3e <_dtoa_r+0x4d6>
 800bbe0:	427c      	negs	r4, r7
 800bbe2:	4b81      	ldr	r3, [pc, #516]	@ (800bde8 <_dtoa_r+0x580>)
 800bbe4:	4d81      	ldr	r5, [pc, #516]	@ (800bdec <_dtoa_r+0x584>)
 800bbe6:	f004 020f 	and.w	r2, r4, #15
 800bbea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bbf6:	f7f4 fd07 	bl	8000608 <__aeabi_dmul>
 800bbfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbfe:	1124      	asrs	r4, r4, #4
 800bc00:	2300      	movs	r3, #0
 800bc02:	2602      	movs	r6, #2
 800bc04:	2c00      	cmp	r4, #0
 800bc06:	f040 808f 	bne.w	800bd28 <_dtoa_r+0x4c0>
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1d3      	bne.n	800bbb6 <_dtoa_r+0x34e>
 800bc0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 8094 	beq.w	800bd42 <_dtoa_r+0x4da>
 800bc1a:	4b75      	ldr	r3, [pc, #468]	@ (800bdf0 <_dtoa_r+0x588>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	4620      	mov	r0, r4
 800bc20:	4629      	mov	r1, r5
 800bc22:	f7f4 ff63 	bl	8000aec <__aeabi_dcmplt>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f000 808b 	beq.w	800bd42 <_dtoa_r+0x4da>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f000 8087 	beq.w	800bd42 <_dtoa_r+0x4da>
 800bc34:	f1bb 0f00 	cmp.w	fp, #0
 800bc38:	dd34      	ble.n	800bca4 <_dtoa_r+0x43c>
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	4b6d      	ldr	r3, [pc, #436]	@ (800bdf4 <_dtoa_r+0x58c>)
 800bc3e:	2200      	movs	r2, #0
 800bc40:	4629      	mov	r1, r5
 800bc42:	f7f4 fce1 	bl	8000608 <__aeabi_dmul>
 800bc46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc4a:	f107 38ff 	add.w	r8, r7, #4294967295
 800bc4e:	3601      	adds	r6, #1
 800bc50:	465c      	mov	r4, fp
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7f4 fc6e 	bl	8000534 <__aeabi_i2d>
 800bc58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc5c:	f7f4 fcd4 	bl	8000608 <__aeabi_dmul>
 800bc60:	4b65      	ldr	r3, [pc, #404]	@ (800bdf8 <_dtoa_r+0x590>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	f7f4 fb1a 	bl	800029c <__adddf3>
 800bc68:	4605      	mov	r5, r0
 800bc6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc6e:	2c00      	cmp	r4, #0
 800bc70:	d16a      	bne.n	800bd48 <_dtoa_r+0x4e0>
 800bc72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc76:	4b61      	ldr	r3, [pc, #388]	@ (800bdfc <_dtoa_r+0x594>)
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f7f4 fb0d 	bl	8000298 <__aeabi_dsub>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc86:	462a      	mov	r2, r5
 800bc88:	4633      	mov	r3, r6
 800bc8a:	f7f4 ff4d 	bl	8000b28 <__aeabi_dcmpgt>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	f040 8298 	bne.w	800c1c4 <_dtoa_r+0x95c>
 800bc94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc98:	462a      	mov	r2, r5
 800bc9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc9e:	f7f4 ff25 	bl	8000aec <__aeabi_dcmplt>
 800bca2:	bb38      	cbnz	r0, 800bcf4 <_dtoa_r+0x48c>
 800bca4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bca8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bcac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f2c0 8157 	blt.w	800bf62 <_dtoa_r+0x6fa>
 800bcb4:	2f0e      	cmp	r7, #14
 800bcb6:	f300 8154 	bgt.w	800bf62 <_dtoa_r+0x6fa>
 800bcba:	4b4b      	ldr	r3, [pc, #300]	@ (800bde8 <_dtoa_r+0x580>)
 800bcbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcc0:	ed93 7b00 	vldr	d7, [r3]
 800bcc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	ed8d 7b00 	vstr	d7, [sp]
 800bccc:	f280 80e5 	bge.w	800be9a <_dtoa_r+0x632>
 800bcd0:	9b03      	ldr	r3, [sp, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f300 80e1 	bgt.w	800be9a <_dtoa_r+0x632>
 800bcd8:	d10c      	bne.n	800bcf4 <_dtoa_r+0x48c>
 800bcda:	4b48      	ldr	r3, [pc, #288]	@ (800bdfc <_dtoa_r+0x594>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	ec51 0b17 	vmov	r0, r1, d7
 800bce2:	f7f4 fc91 	bl	8000608 <__aeabi_dmul>
 800bce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcea:	f7f4 ff13 	bl	8000b14 <__aeabi_dcmpge>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	f000 8266 	beq.w	800c1c0 <_dtoa_r+0x958>
 800bcf4:	2400      	movs	r4, #0
 800bcf6:	4625      	mov	r5, r4
 800bcf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcfa:	4656      	mov	r6, sl
 800bcfc:	ea6f 0803 	mvn.w	r8, r3
 800bd00:	2700      	movs	r7, #0
 800bd02:	4621      	mov	r1, r4
 800bd04:	4648      	mov	r0, r9
 800bd06:	f000 fcbf 	bl	800c688 <_Bfree>
 800bd0a:	2d00      	cmp	r5, #0
 800bd0c:	f000 80bd 	beq.w	800be8a <_dtoa_r+0x622>
 800bd10:	b12f      	cbz	r7, 800bd1e <_dtoa_r+0x4b6>
 800bd12:	42af      	cmp	r7, r5
 800bd14:	d003      	beq.n	800bd1e <_dtoa_r+0x4b6>
 800bd16:	4639      	mov	r1, r7
 800bd18:	4648      	mov	r0, r9
 800bd1a:	f000 fcb5 	bl	800c688 <_Bfree>
 800bd1e:	4629      	mov	r1, r5
 800bd20:	4648      	mov	r0, r9
 800bd22:	f000 fcb1 	bl	800c688 <_Bfree>
 800bd26:	e0b0      	b.n	800be8a <_dtoa_r+0x622>
 800bd28:	07e2      	lsls	r2, r4, #31
 800bd2a:	d505      	bpl.n	800bd38 <_dtoa_r+0x4d0>
 800bd2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd30:	f7f4 fc6a 	bl	8000608 <__aeabi_dmul>
 800bd34:	3601      	adds	r6, #1
 800bd36:	2301      	movs	r3, #1
 800bd38:	1064      	asrs	r4, r4, #1
 800bd3a:	3508      	adds	r5, #8
 800bd3c:	e762      	b.n	800bc04 <_dtoa_r+0x39c>
 800bd3e:	2602      	movs	r6, #2
 800bd40:	e765      	b.n	800bc0e <_dtoa_r+0x3a6>
 800bd42:	9c03      	ldr	r4, [sp, #12]
 800bd44:	46b8      	mov	r8, r7
 800bd46:	e784      	b.n	800bc52 <_dtoa_r+0x3ea>
 800bd48:	4b27      	ldr	r3, [pc, #156]	@ (800bde8 <_dtoa_r+0x580>)
 800bd4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd54:	4454      	add	r4, sl
 800bd56:	2900      	cmp	r1, #0
 800bd58:	d054      	beq.n	800be04 <_dtoa_r+0x59c>
 800bd5a:	4929      	ldr	r1, [pc, #164]	@ (800be00 <_dtoa_r+0x598>)
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f7f4 fd7d 	bl	800085c <__aeabi_ddiv>
 800bd62:	4633      	mov	r3, r6
 800bd64:	462a      	mov	r2, r5
 800bd66:	f7f4 fa97 	bl	8000298 <__aeabi_dsub>
 800bd6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bd6e:	4656      	mov	r6, sl
 800bd70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd74:	f7f4 fef8 	bl	8000b68 <__aeabi_d2iz>
 800bd78:	4605      	mov	r5, r0
 800bd7a:	f7f4 fbdb 	bl	8000534 <__aeabi_i2d>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd86:	f7f4 fa87 	bl	8000298 <__aeabi_dsub>
 800bd8a:	3530      	adds	r5, #48	@ 0x30
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd94:	f806 5b01 	strb.w	r5, [r6], #1
 800bd98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd9c:	f7f4 fea6 	bl	8000aec <__aeabi_dcmplt>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d172      	bne.n	800be8a <_dtoa_r+0x622>
 800bda4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda8:	4911      	ldr	r1, [pc, #68]	@ (800bdf0 <_dtoa_r+0x588>)
 800bdaa:	2000      	movs	r0, #0
 800bdac:	f7f4 fa74 	bl	8000298 <__aeabi_dsub>
 800bdb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bdb4:	f7f4 fe9a 	bl	8000aec <__aeabi_dcmplt>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	f040 80b4 	bne.w	800bf26 <_dtoa_r+0x6be>
 800bdbe:	42a6      	cmp	r6, r4
 800bdc0:	f43f af70 	beq.w	800bca4 <_dtoa_r+0x43c>
 800bdc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bdc8:	4b0a      	ldr	r3, [pc, #40]	@ (800bdf4 <_dtoa_r+0x58c>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f7f4 fc1c 	bl	8000608 <__aeabi_dmul>
 800bdd0:	4b08      	ldr	r3, [pc, #32]	@ (800bdf4 <_dtoa_r+0x58c>)
 800bdd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bddc:	f7f4 fc14 	bl	8000608 <__aeabi_dmul>
 800bde0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bde4:	e7c4      	b.n	800bd70 <_dtoa_r+0x508>
 800bde6:	bf00      	nop
 800bde8:	0800f950 	.word	0x0800f950
 800bdec:	0800f928 	.word	0x0800f928
 800bdf0:	3ff00000 	.word	0x3ff00000
 800bdf4:	40240000 	.word	0x40240000
 800bdf8:	401c0000 	.word	0x401c0000
 800bdfc:	40140000 	.word	0x40140000
 800be00:	3fe00000 	.word	0x3fe00000
 800be04:	4631      	mov	r1, r6
 800be06:	4628      	mov	r0, r5
 800be08:	f7f4 fbfe 	bl	8000608 <__aeabi_dmul>
 800be0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be10:	9413      	str	r4, [sp, #76]	@ 0x4c
 800be12:	4656      	mov	r6, sl
 800be14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be18:	f7f4 fea6 	bl	8000b68 <__aeabi_d2iz>
 800be1c:	4605      	mov	r5, r0
 800be1e:	f7f4 fb89 	bl	8000534 <__aeabi_i2d>
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be2a:	f7f4 fa35 	bl	8000298 <__aeabi_dsub>
 800be2e:	3530      	adds	r5, #48	@ 0x30
 800be30:	f806 5b01 	strb.w	r5, [r6], #1
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	42a6      	cmp	r6, r4
 800be3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be3e:	f04f 0200 	mov.w	r2, #0
 800be42:	d124      	bne.n	800be8e <_dtoa_r+0x626>
 800be44:	4baf      	ldr	r3, [pc, #700]	@ (800c104 <_dtoa_r+0x89c>)
 800be46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800be4a:	f7f4 fa27 	bl	800029c <__adddf3>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be56:	f7f4 fe67 	bl	8000b28 <__aeabi_dcmpgt>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d163      	bne.n	800bf26 <_dtoa_r+0x6be>
 800be5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be62:	49a8      	ldr	r1, [pc, #672]	@ (800c104 <_dtoa_r+0x89c>)
 800be64:	2000      	movs	r0, #0
 800be66:	f7f4 fa17 	bl	8000298 <__aeabi_dsub>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be72:	f7f4 fe3b 	bl	8000aec <__aeabi_dcmplt>
 800be76:	2800      	cmp	r0, #0
 800be78:	f43f af14 	beq.w	800bca4 <_dtoa_r+0x43c>
 800be7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800be7e:	1e73      	subs	r3, r6, #1
 800be80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be86:	2b30      	cmp	r3, #48	@ 0x30
 800be88:	d0f8      	beq.n	800be7c <_dtoa_r+0x614>
 800be8a:	4647      	mov	r7, r8
 800be8c:	e03b      	b.n	800bf06 <_dtoa_r+0x69e>
 800be8e:	4b9e      	ldr	r3, [pc, #632]	@ (800c108 <_dtoa_r+0x8a0>)
 800be90:	f7f4 fbba 	bl	8000608 <__aeabi_dmul>
 800be94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be98:	e7bc      	b.n	800be14 <_dtoa_r+0x5ac>
 800be9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800be9e:	4656      	mov	r6, sl
 800bea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bea4:	4620      	mov	r0, r4
 800bea6:	4629      	mov	r1, r5
 800bea8:	f7f4 fcd8 	bl	800085c <__aeabi_ddiv>
 800beac:	f7f4 fe5c 	bl	8000b68 <__aeabi_d2iz>
 800beb0:	4680      	mov	r8, r0
 800beb2:	f7f4 fb3f 	bl	8000534 <__aeabi_i2d>
 800beb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beba:	f7f4 fba5 	bl	8000608 <__aeabi_dmul>
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	4620      	mov	r0, r4
 800bec4:	4629      	mov	r1, r5
 800bec6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800beca:	f7f4 f9e5 	bl	8000298 <__aeabi_dsub>
 800bece:	f806 4b01 	strb.w	r4, [r6], #1
 800bed2:	9d03      	ldr	r5, [sp, #12]
 800bed4:	eba6 040a 	sub.w	r4, r6, sl
 800bed8:	42a5      	cmp	r5, r4
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	d133      	bne.n	800bf48 <_dtoa_r+0x6e0>
 800bee0:	f7f4 f9dc 	bl	800029c <__adddf3>
 800bee4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bee8:	4604      	mov	r4, r0
 800beea:	460d      	mov	r5, r1
 800beec:	f7f4 fe1c 	bl	8000b28 <__aeabi_dcmpgt>
 800bef0:	b9c0      	cbnz	r0, 800bf24 <_dtoa_r+0x6bc>
 800bef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bef6:	4620      	mov	r0, r4
 800bef8:	4629      	mov	r1, r5
 800befa:	f7f4 fded 	bl	8000ad8 <__aeabi_dcmpeq>
 800befe:	b110      	cbz	r0, 800bf06 <_dtoa_r+0x69e>
 800bf00:	f018 0f01 	tst.w	r8, #1
 800bf04:	d10e      	bne.n	800bf24 <_dtoa_r+0x6bc>
 800bf06:	9902      	ldr	r1, [sp, #8]
 800bf08:	4648      	mov	r0, r9
 800bf0a:	f000 fbbd 	bl	800c688 <_Bfree>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	7033      	strb	r3, [r6, #0]
 800bf12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf14:	3701      	adds	r7, #1
 800bf16:	601f      	str	r7, [r3, #0]
 800bf18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 824b 	beq.w	800c3b6 <_dtoa_r+0xb4e>
 800bf20:	601e      	str	r6, [r3, #0]
 800bf22:	e248      	b.n	800c3b6 <_dtoa_r+0xb4e>
 800bf24:	46b8      	mov	r8, r7
 800bf26:	4633      	mov	r3, r6
 800bf28:	461e      	mov	r6, r3
 800bf2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf2e:	2a39      	cmp	r2, #57	@ 0x39
 800bf30:	d106      	bne.n	800bf40 <_dtoa_r+0x6d8>
 800bf32:	459a      	cmp	sl, r3
 800bf34:	d1f8      	bne.n	800bf28 <_dtoa_r+0x6c0>
 800bf36:	2230      	movs	r2, #48	@ 0x30
 800bf38:	f108 0801 	add.w	r8, r8, #1
 800bf3c:	f88a 2000 	strb.w	r2, [sl]
 800bf40:	781a      	ldrb	r2, [r3, #0]
 800bf42:	3201      	adds	r2, #1
 800bf44:	701a      	strb	r2, [r3, #0]
 800bf46:	e7a0      	b.n	800be8a <_dtoa_r+0x622>
 800bf48:	4b6f      	ldr	r3, [pc, #444]	@ (800c108 <_dtoa_r+0x8a0>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f7f4 fb5c 	bl	8000608 <__aeabi_dmul>
 800bf50:	2200      	movs	r2, #0
 800bf52:	2300      	movs	r3, #0
 800bf54:	4604      	mov	r4, r0
 800bf56:	460d      	mov	r5, r1
 800bf58:	f7f4 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d09f      	beq.n	800bea0 <_dtoa_r+0x638>
 800bf60:	e7d1      	b.n	800bf06 <_dtoa_r+0x69e>
 800bf62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf64:	2a00      	cmp	r2, #0
 800bf66:	f000 80ea 	beq.w	800c13e <_dtoa_r+0x8d6>
 800bf6a:	9a07      	ldr	r2, [sp, #28]
 800bf6c:	2a01      	cmp	r2, #1
 800bf6e:	f300 80cd 	bgt.w	800c10c <_dtoa_r+0x8a4>
 800bf72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bf74:	2a00      	cmp	r2, #0
 800bf76:	f000 80c1 	beq.w	800c0fc <_dtoa_r+0x894>
 800bf7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf7e:	9c08      	ldr	r4, [sp, #32]
 800bf80:	9e00      	ldr	r6, [sp, #0]
 800bf82:	9a00      	ldr	r2, [sp, #0]
 800bf84:	441a      	add	r2, r3
 800bf86:	9200      	str	r2, [sp, #0]
 800bf88:	9a06      	ldr	r2, [sp, #24]
 800bf8a:	2101      	movs	r1, #1
 800bf8c:	441a      	add	r2, r3
 800bf8e:	4648      	mov	r0, r9
 800bf90:	9206      	str	r2, [sp, #24]
 800bf92:	f000 fc2d 	bl	800c7f0 <__i2b>
 800bf96:	4605      	mov	r5, r0
 800bf98:	b166      	cbz	r6, 800bfb4 <_dtoa_r+0x74c>
 800bf9a:	9b06      	ldr	r3, [sp, #24]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	dd09      	ble.n	800bfb4 <_dtoa_r+0x74c>
 800bfa0:	42b3      	cmp	r3, r6
 800bfa2:	9a00      	ldr	r2, [sp, #0]
 800bfa4:	bfa8      	it	ge
 800bfa6:	4633      	movge	r3, r6
 800bfa8:	1ad2      	subs	r2, r2, r3
 800bfaa:	9200      	str	r2, [sp, #0]
 800bfac:	9a06      	ldr	r2, [sp, #24]
 800bfae:	1af6      	subs	r6, r6, r3
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	9306      	str	r3, [sp, #24]
 800bfb4:	9b08      	ldr	r3, [sp, #32]
 800bfb6:	b30b      	cbz	r3, 800bffc <_dtoa_r+0x794>
 800bfb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 80c6 	beq.w	800c14c <_dtoa_r+0x8e4>
 800bfc0:	2c00      	cmp	r4, #0
 800bfc2:	f000 80c0 	beq.w	800c146 <_dtoa_r+0x8de>
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	4622      	mov	r2, r4
 800bfca:	4648      	mov	r0, r9
 800bfcc:	f000 fcc8 	bl	800c960 <__pow5mult>
 800bfd0:	9a02      	ldr	r2, [sp, #8]
 800bfd2:	4601      	mov	r1, r0
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	4648      	mov	r0, r9
 800bfd8:	f000 fc20 	bl	800c81c <__multiply>
 800bfdc:	9902      	ldr	r1, [sp, #8]
 800bfde:	4680      	mov	r8, r0
 800bfe0:	4648      	mov	r0, r9
 800bfe2:	f000 fb51 	bl	800c688 <_Bfree>
 800bfe6:	9b08      	ldr	r3, [sp, #32]
 800bfe8:	1b1b      	subs	r3, r3, r4
 800bfea:	9308      	str	r3, [sp, #32]
 800bfec:	f000 80b1 	beq.w	800c152 <_dtoa_r+0x8ea>
 800bff0:	9a08      	ldr	r2, [sp, #32]
 800bff2:	4641      	mov	r1, r8
 800bff4:	4648      	mov	r0, r9
 800bff6:	f000 fcb3 	bl	800c960 <__pow5mult>
 800bffa:	9002      	str	r0, [sp, #8]
 800bffc:	2101      	movs	r1, #1
 800bffe:	4648      	mov	r0, r9
 800c000:	f000 fbf6 	bl	800c7f0 <__i2b>
 800c004:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c006:	4604      	mov	r4, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 81d8 	beq.w	800c3be <_dtoa_r+0xb56>
 800c00e:	461a      	mov	r2, r3
 800c010:	4601      	mov	r1, r0
 800c012:	4648      	mov	r0, r9
 800c014:	f000 fca4 	bl	800c960 <__pow5mult>
 800c018:	9b07      	ldr	r3, [sp, #28]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	4604      	mov	r4, r0
 800c01e:	f300 809f 	bgt.w	800c160 <_dtoa_r+0x8f8>
 800c022:	9b04      	ldr	r3, [sp, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f040 8097 	bne.w	800c158 <_dtoa_r+0x8f0>
 800c02a:	9b05      	ldr	r3, [sp, #20]
 800c02c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c030:	2b00      	cmp	r3, #0
 800c032:	f040 8093 	bne.w	800c15c <_dtoa_r+0x8f4>
 800c036:	9b05      	ldr	r3, [sp, #20]
 800c038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c03c:	0d1b      	lsrs	r3, r3, #20
 800c03e:	051b      	lsls	r3, r3, #20
 800c040:	b133      	cbz	r3, 800c050 <_dtoa_r+0x7e8>
 800c042:	9b00      	ldr	r3, [sp, #0]
 800c044:	3301      	adds	r3, #1
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	9b06      	ldr	r3, [sp, #24]
 800c04a:	3301      	adds	r3, #1
 800c04c:	9306      	str	r3, [sp, #24]
 800c04e:	2301      	movs	r3, #1
 800c050:	9308      	str	r3, [sp, #32]
 800c052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 81b8 	beq.w	800c3ca <_dtoa_r+0xb62>
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c060:	6918      	ldr	r0, [r3, #16]
 800c062:	f000 fb79 	bl	800c758 <__hi0bits>
 800c066:	f1c0 0020 	rsb	r0, r0, #32
 800c06a:	9b06      	ldr	r3, [sp, #24]
 800c06c:	4418      	add	r0, r3
 800c06e:	f010 001f 	ands.w	r0, r0, #31
 800c072:	f000 8082 	beq.w	800c17a <_dtoa_r+0x912>
 800c076:	f1c0 0320 	rsb	r3, r0, #32
 800c07a:	2b04      	cmp	r3, #4
 800c07c:	dd73      	ble.n	800c166 <_dtoa_r+0x8fe>
 800c07e:	9b00      	ldr	r3, [sp, #0]
 800c080:	f1c0 001c 	rsb	r0, r0, #28
 800c084:	4403      	add	r3, r0
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	9b06      	ldr	r3, [sp, #24]
 800c08a:	4403      	add	r3, r0
 800c08c:	4406      	add	r6, r0
 800c08e:	9306      	str	r3, [sp, #24]
 800c090:	9b00      	ldr	r3, [sp, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	dd05      	ble.n	800c0a2 <_dtoa_r+0x83a>
 800c096:	9902      	ldr	r1, [sp, #8]
 800c098:	461a      	mov	r2, r3
 800c09a:	4648      	mov	r0, r9
 800c09c:	f000 fcba 	bl	800ca14 <__lshift>
 800c0a0:	9002      	str	r0, [sp, #8]
 800c0a2:	9b06      	ldr	r3, [sp, #24]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	dd05      	ble.n	800c0b4 <_dtoa_r+0x84c>
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	4648      	mov	r0, r9
 800c0ae:	f000 fcb1 	bl	800ca14 <__lshift>
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d061      	beq.n	800c17e <_dtoa_r+0x916>
 800c0ba:	9802      	ldr	r0, [sp, #8]
 800c0bc:	4621      	mov	r1, r4
 800c0be:	f000 fd15 	bl	800caec <__mcmp>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	da5b      	bge.n	800c17e <_dtoa_r+0x916>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	9902      	ldr	r1, [sp, #8]
 800c0ca:	220a      	movs	r2, #10
 800c0cc:	4648      	mov	r0, r9
 800c0ce:	f000 fafd 	bl	800c6cc <__multadd>
 800c0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d4:	9002      	str	r0, [sp, #8]
 800c0d6:	f107 38ff 	add.w	r8, r7, #4294967295
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f000 8177 	beq.w	800c3ce <_dtoa_r+0xb66>
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	220a      	movs	r2, #10
 800c0e6:	4648      	mov	r0, r9
 800c0e8:	f000 faf0 	bl	800c6cc <__multadd>
 800c0ec:	f1bb 0f00 	cmp.w	fp, #0
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	dc6f      	bgt.n	800c1d4 <_dtoa_r+0x96c>
 800c0f4:	9b07      	ldr	r3, [sp, #28]
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	dc49      	bgt.n	800c18e <_dtoa_r+0x926>
 800c0fa:	e06b      	b.n	800c1d4 <_dtoa_r+0x96c>
 800c0fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c0fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c102:	e73c      	b.n	800bf7e <_dtoa_r+0x716>
 800c104:	3fe00000 	.word	0x3fe00000
 800c108:	40240000 	.word	0x40240000
 800c10c:	9b03      	ldr	r3, [sp, #12]
 800c10e:	1e5c      	subs	r4, r3, #1
 800c110:	9b08      	ldr	r3, [sp, #32]
 800c112:	42a3      	cmp	r3, r4
 800c114:	db09      	blt.n	800c12a <_dtoa_r+0x8c2>
 800c116:	1b1c      	subs	r4, r3, r4
 800c118:	9b03      	ldr	r3, [sp, #12]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f6bf af30 	bge.w	800bf80 <_dtoa_r+0x718>
 800c120:	9b00      	ldr	r3, [sp, #0]
 800c122:	9a03      	ldr	r2, [sp, #12]
 800c124:	1a9e      	subs	r6, r3, r2
 800c126:	2300      	movs	r3, #0
 800c128:	e72b      	b.n	800bf82 <_dtoa_r+0x71a>
 800c12a:	9b08      	ldr	r3, [sp, #32]
 800c12c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c12e:	9408      	str	r4, [sp, #32]
 800c130:	1ae3      	subs	r3, r4, r3
 800c132:	441a      	add	r2, r3
 800c134:	9e00      	ldr	r6, [sp, #0]
 800c136:	9b03      	ldr	r3, [sp, #12]
 800c138:	920d      	str	r2, [sp, #52]	@ 0x34
 800c13a:	2400      	movs	r4, #0
 800c13c:	e721      	b.n	800bf82 <_dtoa_r+0x71a>
 800c13e:	9c08      	ldr	r4, [sp, #32]
 800c140:	9e00      	ldr	r6, [sp, #0]
 800c142:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c144:	e728      	b.n	800bf98 <_dtoa_r+0x730>
 800c146:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c14a:	e751      	b.n	800bff0 <_dtoa_r+0x788>
 800c14c:	9a08      	ldr	r2, [sp, #32]
 800c14e:	9902      	ldr	r1, [sp, #8]
 800c150:	e750      	b.n	800bff4 <_dtoa_r+0x78c>
 800c152:	f8cd 8008 	str.w	r8, [sp, #8]
 800c156:	e751      	b.n	800bffc <_dtoa_r+0x794>
 800c158:	2300      	movs	r3, #0
 800c15a:	e779      	b.n	800c050 <_dtoa_r+0x7e8>
 800c15c:	9b04      	ldr	r3, [sp, #16]
 800c15e:	e777      	b.n	800c050 <_dtoa_r+0x7e8>
 800c160:	2300      	movs	r3, #0
 800c162:	9308      	str	r3, [sp, #32]
 800c164:	e779      	b.n	800c05a <_dtoa_r+0x7f2>
 800c166:	d093      	beq.n	800c090 <_dtoa_r+0x828>
 800c168:	9a00      	ldr	r2, [sp, #0]
 800c16a:	331c      	adds	r3, #28
 800c16c:	441a      	add	r2, r3
 800c16e:	9200      	str	r2, [sp, #0]
 800c170:	9a06      	ldr	r2, [sp, #24]
 800c172:	441a      	add	r2, r3
 800c174:	441e      	add	r6, r3
 800c176:	9206      	str	r2, [sp, #24]
 800c178:	e78a      	b.n	800c090 <_dtoa_r+0x828>
 800c17a:	4603      	mov	r3, r0
 800c17c:	e7f4      	b.n	800c168 <_dtoa_r+0x900>
 800c17e:	9b03      	ldr	r3, [sp, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	46b8      	mov	r8, r7
 800c184:	dc20      	bgt.n	800c1c8 <_dtoa_r+0x960>
 800c186:	469b      	mov	fp, r3
 800c188:	9b07      	ldr	r3, [sp, #28]
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	dd1e      	ble.n	800c1cc <_dtoa_r+0x964>
 800c18e:	f1bb 0f00 	cmp.w	fp, #0
 800c192:	f47f adb1 	bne.w	800bcf8 <_dtoa_r+0x490>
 800c196:	4621      	mov	r1, r4
 800c198:	465b      	mov	r3, fp
 800c19a:	2205      	movs	r2, #5
 800c19c:	4648      	mov	r0, r9
 800c19e:	f000 fa95 	bl	800c6cc <__multadd>
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	9802      	ldr	r0, [sp, #8]
 800c1a8:	f000 fca0 	bl	800caec <__mcmp>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	f77f ada3 	ble.w	800bcf8 <_dtoa_r+0x490>
 800c1b2:	4656      	mov	r6, sl
 800c1b4:	2331      	movs	r3, #49	@ 0x31
 800c1b6:	f806 3b01 	strb.w	r3, [r6], #1
 800c1ba:	f108 0801 	add.w	r8, r8, #1
 800c1be:	e59f      	b.n	800bd00 <_dtoa_r+0x498>
 800c1c0:	9c03      	ldr	r4, [sp, #12]
 800c1c2:	46b8      	mov	r8, r7
 800c1c4:	4625      	mov	r5, r4
 800c1c6:	e7f4      	b.n	800c1b2 <_dtoa_r+0x94a>
 800c1c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 8101 	beq.w	800c3d6 <_dtoa_r+0xb6e>
 800c1d4:	2e00      	cmp	r6, #0
 800c1d6:	dd05      	ble.n	800c1e4 <_dtoa_r+0x97c>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4632      	mov	r2, r6
 800c1dc:	4648      	mov	r0, r9
 800c1de:	f000 fc19 	bl	800ca14 <__lshift>
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	9b08      	ldr	r3, [sp, #32]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d05c      	beq.n	800c2a4 <_dtoa_r+0xa3c>
 800c1ea:	6869      	ldr	r1, [r5, #4]
 800c1ec:	4648      	mov	r0, r9
 800c1ee:	f000 fa0b 	bl	800c608 <_Balloc>
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	b928      	cbnz	r0, 800c202 <_dtoa_r+0x99a>
 800c1f6:	4b82      	ldr	r3, [pc, #520]	@ (800c400 <_dtoa_r+0xb98>)
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c1fe:	f7ff bb4a 	b.w	800b896 <_dtoa_r+0x2e>
 800c202:	692a      	ldr	r2, [r5, #16]
 800c204:	3202      	adds	r2, #2
 800c206:	0092      	lsls	r2, r2, #2
 800c208:	f105 010c 	add.w	r1, r5, #12
 800c20c:	300c      	adds	r0, #12
 800c20e:	f000 ffa3 	bl	800d158 <memcpy>
 800c212:	2201      	movs	r2, #1
 800c214:	4631      	mov	r1, r6
 800c216:	4648      	mov	r0, r9
 800c218:	f000 fbfc 	bl	800ca14 <__lshift>
 800c21c:	f10a 0301 	add.w	r3, sl, #1
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	eb0a 030b 	add.w	r3, sl, fp
 800c226:	9308      	str	r3, [sp, #32]
 800c228:	9b04      	ldr	r3, [sp, #16]
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	462f      	mov	r7, r5
 800c230:	9306      	str	r3, [sp, #24]
 800c232:	4605      	mov	r5, r0
 800c234:	9b00      	ldr	r3, [sp, #0]
 800c236:	9802      	ldr	r0, [sp, #8]
 800c238:	4621      	mov	r1, r4
 800c23a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c23e:	f7ff fa8a 	bl	800b756 <quorem>
 800c242:	4603      	mov	r3, r0
 800c244:	3330      	adds	r3, #48	@ 0x30
 800c246:	9003      	str	r0, [sp, #12]
 800c248:	4639      	mov	r1, r7
 800c24a:	9802      	ldr	r0, [sp, #8]
 800c24c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c24e:	f000 fc4d 	bl	800caec <__mcmp>
 800c252:	462a      	mov	r2, r5
 800c254:	9004      	str	r0, [sp, #16]
 800c256:	4621      	mov	r1, r4
 800c258:	4648      	mov	r0, r9
 800c25a:	f000 fc63 	bl	800cb24 <__mdiff>
 800c25e:	68c2      	ldr	r2, [r0, #12]
 800c260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c262:	4606      	mov	r6, r0
 800c264:	bb02      	cbnz	r2, 800c2a8 <_dtoa_r+0xa40>
 800c266:	4601      	mov	r1, r0
 800c268:	9802      	ldr	r0, [sp, #8]
 800c26a:	f000 fc3f 	bl	800caec <__mcmp>
 800c26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c270:	4602      	mov	r2, r0
 800c272:	4631      	mov	r1, r6
 800c274:	4648      	mov	r0, r9
 800c276:	920c      	str	r2, [sp, #48]	@ 0x30
 800c278:	9309      	str	r3, [sp, #36]	@ 0x24
 800c27a:	f000 fa05 	bl	800c688 <_Bfree>
 800c27e:	9b07      	ldr	r3, [sp, #28]
 800c280:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c282:	9e00      	ldr	r6, [sp, #0]
 800c284:	ea42 0103 	orr.w	r1, r2, r3
 800c288:	9b06      	ldr	r3, [sp, #24]
 800c28a:	4319      	orrs	r1, r3
 800c28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c28e:	d10d      	bne.n	800c2ac <_dtoa_r+0xa44>
 800c290:	2b39      	cmp	r3, #57	@ 0x39
 800c292:	d027      	beq.n	800c2e4 <_dtoa_r+0xa7c>
 800c294:	9a04      	ldr	r2, [sp, #16]
 800c296:	2a00      	cmp	r2, #0
 800c298:	dd01      	ble.n	800c29e <_dtoa_r+0xa36>
 800c29a:	9b03      	ldr	r3, [sp, #12]
 800c29c:	3331      	adds	r3, #49	@ 0x31
 800c29e:	f88b 3000 	strb.w	r3, [fp]
 800c2a2:	e52e      	b.n	800bd02 <_dtoa_r+0x49a>
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	e7b9      	b.n	800c21c <_dtoa_r+0x9b4>
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	e7e2      	b.n	800c272 <_dtoa_r+0xa0a>
 800c2ac:	9904      	ldr	r1, [sp, #16]
 800c2ae:	2900      	cmp	r1, #0
 800c2b0:	db04      	blt.n	800c2bc <_dtoa_r+0xa54>
 800c2b2:	9807      	ldr	r0, [sp, #28]
 800c2b4:	4301      	orrs	r1, r0
 800c2b6:	9806      	ldr	r0, [sp, #24]
 800c2b8:	4301      	orrs	r1, r0
 800c2ba:	d120      	bne.n	800c2fe <_dtoa_r+0xa96>
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	ddee      	ble.n	800c29e <_dtoa_r+0xa36>
 800c2c0:	9902      	ldr	r1, [sp, #8]
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	4648      	mov	r0, r9
 800c2c8:	f000 fba4 	bl	800ca14 <__lshift>
 800c2cc:	4621      	mov	r1, r4
 800c2ce:	9002      	str	r0, [sp, #8]
 800c2d0:	f000 fc0c 	bl	800caec <__mcmp>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	9b00      	ldr	r3, [sp, #0]
 800c2d8:	dc02      	bgt.n	800c2e0 <_dtoa_r+0xa78>
 800c2da:	d1e0      	bne.n	800c29e <_dtoa_r+0xa36>
 800c2dc:	07da      	lsls	r2, r3, #31
 800c2de:	d5de      	bpl.n	800c29e <_dtoa_r+0xa36>
 800c2e0:	2b39      	cmp	r3, #57	@ 0x39
 800c2e2:	d1da      	bne.n	800c29a <_dtoa_r+0xa32>
 800c2e4:	2339      	movs	r3, #57	@ 0x39
 800c2e6:	f88b 3000 	strb.w	r3, [fp]
 800c2ea:	4633      	mov	r3, r6
 800c2ec:	461e      	mov	r6, r3
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c2f4:	2a39      	cmp	r2, #57	@ 0x39
 800c2f6:	d04e      	beq.n	800c396 <_dtoa_r+0xb2e>
 800c2f8:	3201      	adds	r2, #1
 800c2fa:	701a      	strb	r2, [r3, #0]
 800c2fc:	e501      	b.n	800bd02 <_dtoa_r+0x49a>
 800c2fe:	2a00      	cmp	r2, #0
 800c300:	dd03      	ble.n	800c30a <_dtoa_r+0xaa2>
 800c302:	2b39      	cmp	r3, #57	@ 0x39
 800c304:	d0ee      	beq.n	800c2e4 <_dtoa_r+0xa7c>
 800c306:	3301      	adds	r3, #1
 800c308:	e7c9      	b.n	800c29e <_dtoa_r+0xa36>
 800c30a:	9a00      	ldr	r2, [sp, #0]
 800c30c:	9908      	ldr	r1, [sp, #32]
 800c30e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c312:	428a      	cmp	r2, r1
 800c314:	d028      	beq.n	800c368 <_dtoa_r+0xb00>
 800c316:	9902      	ldr	r1, [sp, #8]
 800c318:	2300      	movs	r3, #0
 800c31a:	220a      	movs	r2, #10
 800c31c:	4648      	mov	r0, r9
 800c31e:	f000 f9d5 	bl	800c6cc <__multadd>
 800c322:	42af      	cmp	r7, r5
 800c324:	9002      	str	r0, [sp, #8]
 800c326:	f04f 0300 	mov.w	r3, #0
 800c32a:	f04f 020a 	mov.w	r2, #10
 800c32e:	4639      	mov	r1, r7
 800c330:	4648      	mov	r0, r9
 800c332:	d107      	bne.n	800c344 <_dtoa_r+0xadc>
 800c334:	f000 f9ca 	bl	800c6cc <__multadd>
 800c338:	4607      	mov	r7, r0
 800c33a:	4605      	mov	r5, r0
 800c33c:	9b00      	ldr	r3, [sp, #0]
 800c33e:	3301      	adds	r3, #1
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	e777      	b.n	800c234 <_dtoa_r+0x9cc>
 800c344:	f000 f9c2 	bl	800c6cc <__multadd>
 800c348:	4629      	mov	r1, r5
 800c34a:	4607      	mov	r7, r0
 800c34c:	2300      	movs	r3, #0
 800c34e:	220a      	movs	r2, #10
 800c350:	4648      	mov	r0, r9
 800c352:	f000 f9bb 	bl	800c6cc <__multadd>
 800c356:	4605      	mov	r5, r0
 800c358:	e7f0      	b.n	800c33c <_dtoa_r+0xad4>
 800c35a:	f1bb 0f00 	cmp.w	fp, #0
 800c35e:	bfcc      	ite	gt
 800c360:	465e      	movgt	r6, fp
 800c362:	2601      	movle	r6, #1
 800c364:	4456      	add	r6, sl
 800c366:	2700      	movs	r7, #0
 800c368:	9902      	ldr	r1, [sp, #8]
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	2201      	movs	r2, #1
 800c36e:	4648      	mov	r0, r9
 800c370:	f000 fb50 	bl	800ca14 <__lshift>
 800c374:	4621      	mov	r1, r4
 800c376:	9002      	str	r0, [sp, #8]
 800c378:	f000 fbb8 	bl	800caec <__mcmp>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	dcb4      	bgt.n	800c2ea <_dtoa_r+0xa82>
 800c380:	d102      	bne.n	800c388 <_dtoa_r+0xb20>
 800c382:	9b00      	ldr	r3, [sp, #0]
 800c384:	07db      	lsls	r3, r3, #31
 800c386:	d4b0      	bmi.n	800c2ea <_dtoa_r+0xa82>
 800c388:	4633      	mov	r3, r6
 800c38a:	461e      	mov	r6, r3
 800c38c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c390:	2a30      	cmp	r2, #48	@ 0x30
 800c392:	d0fa      	beq.n	800c38a <_dtoa_r+0xb22>
 800c394:	e4b5      	b.n	800bd02 <_dtoa_r+0x49a>
 800c396:	459a      	cmp	sl, r3
 800c398:	d1a8      	bne.n	800c2ec <_dtoa_r+0xa84>
 800c39a:	2331      	movs	r3, #49	@ 0x31
 800c39c:	f108 0801 	add.w	r8, r8, #1
 800c3a0:	f88a 3000 	strb.w	r3, [sl]
 800c3a4:	e4ad      	b.n	800bd02 <_dtoa_r+0x49a>
 800c3a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c404 <_dtoa_r+0xb9c>
 800c3ac:	b11b      	cbz	r3, 800c3b6 <_dtoa_r+0xb4e>
 800c3ae:	f10a 0308 	add.w	r3, sl, #8
 800c3b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	4650      	mov	r0, sl
 800c3b8:	b017      	add	sp, #92	@ 0x5c
 800c3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3be:	9b07      	ldr	r3, [sp, #28]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	f77f ae2e 	ble.w	800c022 <_dtoa_r+0x7ba>
 800c3c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3c8:	9308      	str	r3, [sp, #32]
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	e64d      	b.n	800c06a <_dtoa_r+0x802>
 800c3ce:	f1bb 0f00 	cmp.w	fp, #0
 800c3d2:	f77f aed9 	ble.w	800c188 <_dtoa_r+0x920>
 800c3d6:	4656      	mov	r6, sl
 800c3d8:	9802      	ldr	r0, [sp, #8]
 800c3da:	4621      	mov	r1, r4
 800c3dc:	f7ff f9bb 	bl	800b756 <quorem>
 800c3e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c3e4:	f806 3b01 	strb.w	r3, [r6], #1
 800c3e8:	eba6 020a 	sub.w	r2, r6, sl
 800c3ec:	4593      	cmp	fp, r2
 800c3ee:	ddb4      	ble.n	800c35a <_dtoa_r+0xaf2>
 800c3f0:	9902      	ldr	r1, [sp, #8]
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	220a      	movs	r2, #10
 800c3f6:	4648      	mov	r0, r9
 800c3f8:	f000 f968 	bl	800c6cc <__multadd>
 800c3fc:	9002      	str	r0, [sp, #8]
 800c3fe:	e7eb      	b.n	800c3d8 <_dtoa_r+0xb70>
 800c400:	0800f854 	.word	0x0800f854
 800c404:	0800f7d8 	.word	0x0800f7d8

0800c408 <_free_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4605      	mov	r5, r0
 800c40c:	2900      	cmp	r1, #0
 800c40e:	d041      	beq.n	800c494 <_free_r+0x8c>
 800c410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c414:	1f0c      	subs	r4, r1, #4
 800c416:	2b00      	cmp	r3, #0
 800c418:	bfb8      	it	lt
 800c41a:	18e4      	addlt	r4, r4, r3
 800c41c:	f000 f8e8 	bl	800c5f0 <__malloc_lock>
 800c420:	4a1d      	ldr	r2, [pc, #116]	@ (800c498 <_free_r+0x90>)
 800c422:	6813      	ldr	r3, [r2, #0]
 800c424:	b933      	cbnz	r3, 800c434 <_free_r+0x2c>
 800c426:	6063      	str	r3, [r4, #4]
 800c428:	6014      	str	r4, [r2, #0]
 800c42a:	4628      	mov	r0, r5
 800c42c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c430:	f000 b8e4 	b.w	800c5fc <__malloc_unlock>
 800c434:	42a3      	cmp	r3, r4
 800c436:	d908      	bls.n	800c44a <_free_r+0x42>
 800c438:	6820      	ldr	r0, [r4, #0]
 800c43a:	1821      	adds	r1, r4, r0
 800c43c:	428b      	cmp	r3, r1
 800c43e:	bf01      	itttt	eq
 800c440:	6819      	ldreq	r1, [r3, #0]
 800c442:	685b      	ldreq	r3, [r3, #4]
 800c444:	1809      	addeq	r1, r1, r0
 800c446:	6021      	streq	r1, [r4, #0]
 800c448:	e7ed      	b.n	800c426 <_free_r+0x1e>
 800c44a:	461a      	mov	r2, r3
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	b10b      	cbz	r3, 800c454 <_free_r+0x4c>
 800c450:	42a3      	cmp	r3, r4
 800c452:	d9fa      	bls.n	800c44a <_free_r+0x42>
 800c454:	6811      	ldr	r1, [r2, #0]
 800c456:	1850      	adds	r0, r2, r1
 800c458:	42a0      	cmp	r0, r4
 800c45a:	d10b      	bne.n	800c474 <_free_r+0x6c>
 800c45c:	6820      	ldr	r0, [r4, #0]
 800c45e:	4401      	add	r1, r0
 800c460:	1850      	adds	r0, r2, r1
 800c462:	4283      	cmp	r3, r0
 800c464:	6011      	str	r1, [r2, #0]
 800c466:	d1e0      	bne.n	800c42a <_free_r+0x22>
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	6053      	str	r3, [r2, #4]
 800c46e:	4408      	add	r0, r1
 800c470:	6010      	str	r0, [r2, #0]
 800c472:	e7da      	b.n	800c42a <_free_r+0x22>
 800c474:	d902      	bls.n	800c47c <_free_r+0x74>
 800c476:	230c      	movs	r3, #12
 800c478:	602b      	str	r3, [r5, #0]
 800c47a:	e7d6      	b.n	800c42a <_free_r+0x22>
 800c47c:	6820      	ldr	r0, [r4, #0]
 800c47e:	1821      	adds	r1, r4, r0
 800c480:	428b      	cmp	r3, r1
 800c482:	bf04      	itt	eq
 800c484:	6819      	ldreq	r1, [r3, #0]
 800c486:	685b      	ldreq	r3, [r3, #4]
 800c488:	6063      	str	r3, [r4, #4]
 800c48a:	bf04      	itt	eq
 800c48c:	1809      	addeq	r1, r1, r0
 800c48e:	6021      	streq	r1, [r4, #0]
 800c490:	6054      	str	r4, [r2, #4]
 800c492:	e7ca      	b.n	800c42a <_free_r+0x22>
 800c494:	bd38      	pop	{r3, r4, r5, pc}
 800c496:	bf00      	nop
 800c498:	200014ac 	.word	0x200014ac

0800c49c <malloc>:
 800c49c:	4b02      	ldr	r3, [pc, #8]	@ (800c4a8 <malloc+0xc>)
 800c49e:	4601      	mov	r1, r0
 800c4a0:	6818      	ldr	r0, [r3, #0]
 800c4a2:	f000 b825 	b.w	800c4f0 <_malloc_r>
 800c4a6:	bf00      	nop
 800c4a8:	20000078 	.word	0x20000078

0800c4ac <sbrk_aligned>:
 800c4ac:	b570      	push	{r4, r5, r6, lr}
 800c4ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c4ec <sbrk_aligned+0x40>)
 800c4b0:	460c      	mov	r4, r1
 800c4b2:	6831      	ldr	r1, [r6, #0]
 800c4b4:	4605      	mov	r5, r0
 800c4b6:	b911      	cbnz	r1, 800c4be <sbrk_aligned+0x12>
 800c4b8:	f000 fe3e 	bl	800d138 <_sbrk_r>
 800c4bc:	6030      	str	r0, [r6, #0]
 800c4be:	4621      	mov	r1, r4
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	f000 fe39 	bl	800d138 <_sbrk_r>
 800c4c6:	1c43      	adds	r3, r0, #1
 800c4c8:	d103      	bne.n	800c4d2 <sbrk_aligned+0x26>
 800c4ca:	f04f 34ff 	mov.w	r4, #4294967295
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	bd70      	pop	{r4, r5, r6, pc}
 800c4d2:	1cc4      	adds	r4, r0, #3
 800c4d4:	f024 0403 	bic.w	r4, r4, #3
 800c4d8:	42a0      	cmp	r0, r4
 800c4da:	d0f8      	beq.n	800c4ce <sbrk_aligned+0x22>
 800c4dc:	1a21      	subs	r1, r4, r0
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f000 fe2a 	bl	800d138 <_sbrk_r>
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	d1f2      	bne.n	800c4ce <sbrk_aligned+0x22>
 800c4e8:	e7ef      	b.n	800c4ca <sbrk_aligned+0x1e>
 800c4ea:	bf00      	nop
 800c4ec:	200014a8 	.word	0x200014a8

0800c4f0 <_malloc_r>:
 800c4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f4:	1ccd      	adds	r5, r1, #3
 800c4f6:	f025 0503 	bic.w	r5, r5, #3
 800c4fa:	3508      	adds	r5, #8
 800c4fc:	2d0c      	cmp	r5, #12
 800c4fe:	bf38      	it	cc
 800c500:	250c      	movcc	r5, #12
 800c502:	2d00      	cmp	r5, #0
 800c504:	4606      	mov	r6, r0
 800c506:	db01      	blt.n	800c50c <_malloc_r+0x1c>
 800c508:	42a9      	cmp	r1, r5
 800c50a:	d904      	bls.n	800c516 <_malloc_r+0x26>
 800c50c:	230c      	movs	r3, #12
 800c50e:	6033      	str	r3, [r6, #0]
 800c510:	2000      	movs	r0, #0
 800c512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5ec <_malloc_r+0xfc>
 800c51a:	f000 f869 	bl	800c5f0 <__malloc_lock>
 800c51e:	f8d8 3000 	ldr.w	r3, [r8]
 800c522:	461c      	mov	r4, r3
 800c524:	bb44      	cbnz	r4, 800c578 <_malloc_r+0x88>
 800c526:	4629      	mov	r1, r5
 800c528:	4630      	mov	r0, r6
 800c52a:	f7ff ffbf 	bl	800c4ac <sbrk_aligned>
 800c52e:	1c43      	adds	r3, r0, #1
 800c530:	4604      	mov	r4, r0
 800c532:	d158      	bne.n	800c5e6 <_malloc_r+0xf6>
 800c534:	f8d8 4000 	ldr.w	r4, [r8]
 800c538:	4627      	mov	r7, r4
 800c53a:	2f00      	cmp	r7, #0
 800c53c:	d143      	bne.n	800c5c6 <_malloc_r+0xd6>
 800c53e:	2c00      	cmp	r4, #0
 800c540:	d04b      	beq.n	800c5da <_malloc_r+0xea>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	4639      	mov	r1, r7
 800c546:	4630      	mov	r0, r6
 800c548:	eb04 0903 	add.w	r9, r4, r3
 800c54c:	f000 fdf4 	bl	800d138 <_sbrk_r>
 800c550:	4581      	cmp	r9, r0
 800c552:	d142      	bne.n	800c5da <_malloc_r+0xea>
 800c554:	6821      	ldr	r1, [r4, #0]
 800c556:	1a6d      	subs	r5, r5, r1
 800c558:	4629      	mov	r1, r5
 800c55a:	4630      	mov	r0, r6
 800c55c:	f7ff ffa6 	bl	800c4ac <sbrk_aligned>
 800c560:	3001      	adds	r0, #1
 800c562:	d03a      	beq.n	800c5da <_malloc_r+0xea>
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	442b      	add	r3, r5
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	f8d8 3000 	ldr.w	r3, [r8]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	bb62      	cbnz	r2, 800c5cc <_malloc_r+0xdc>
 800c572:	f8c8 7000 	str.w	r7, [r8]
 800c576:	e00f      	b.n	800c598 <_malloc_r+0xa8>
 800c578:	6822      	ldr	r2, [r4, #0]
 800c57a:	1b52      	subs	r2, r2, r5
 800c57c:	d420      	bmi.n	800c5c0 <_malloc_r+0xd0>
 800c57e:	2a0b      	cmp	r2, #11
 800c580:	d917      	bls.n	800c5b2 <_malloc_r+0xc2>
 800c582:	1961      	adds	r1, r4, r5
 800c584:	42a3      	cmp	r3, r4
 800c586:	6025      	str	r5, [r4, #0]
 800c588:	bf18      	it	ne
 800c58a:	6059      	strne	r1, [r3, #4]
 800c58c:	6863      	ldr	r3, [r4, #4]
 800c58e:	bf08      	it	eq
 800c590:	f8c8 1000 	streq.w	r1, [r8]
 800c594:	5162      	str	r2, [r4, r5]
 800c596:	604b      	str	r3, [r1, #4]
 800c598:	4630      	mov	r0, r6
 800c59a:	f000 f82f 	bl	800c5fc <__malloc_unlock>
 800c59e:	f104 000b 	add.w	r0, r4, #11
 800c5a2:	1d23      	adds	r3, r4, #4
 800c5a4:	f020 0007 	bic.w	r0, r0, #7
 800c5a8:	1ac2      	subs	r2, r0, r3
 800c5aa:	bf1c      	itt	ne
 800c5ac:	1a1b      	subne	r3, r3, r0
 800c5ae:	50a3      	strne	r3, [r4, r2]
 800c5b0:	e7af      	b.n	800c512 <_malloc_r+0x22>
 800c5b2:	6862      	ldr	r2, [r4, #4]
 800c5b4:	42a3      	cmp	r3, r4
 800c5b6:	bf0c      	ite	eq
 800c5b8:	f8c8 2000 	streq.w	r2, [r8]
 800c5bc:	605a      	strne	r2, [r3, #4]
 800c5be:	e7eb      	b.n	800c598 <_malloc_r+0xa8>
 800c5c0:	4623      	mov	r3, r4
 800c5c2:	6864      	ldr	r4, [r4, #4]
 800c5c4:	e7ae      	b.n	800c524 <_malloc_r+0x34>
 800c5c6:	463c      	mov	r4, r7
 800c5c8:	687f      	ldr	r7, [r7, #4]
 800c5ca:	e7b6      	b.n	800c53a <_malloc_r+0x4a>
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	42a3      	cmp	r3, r4
 800c5d2:	d1fb      	bne.n	800c5cc <_malloc_r+0xdc>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	6053      	str	r3, [r2, #4]
 800c5d8:	e7de      	b.n	800c598 <_malloc_r+0xa8>
 800c5da:	230c      	movs	r3, #12
 800c5dc:	6033      	str	r3, [r6, #0]
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f000 f80c 	bl	800c5fc <__malloc_unlock>
 800c5e4:	e794      	b.n	800c510 <_malloc_r+0x20>
 800c5e6:	6005      	str	r5, [r0, #0]
 800c5e8:	e7d6      	b.n	800c598 <_malloc_r+0xa8>
 800c5ea:	bf00      	nop
 800c5ec:	200014ac 	.word	0x200014ac

0800c5f0 <__malloc_lock>:
 800c5f0:	4801      	ldr	r0, [pc, #4]	@ (800c5f8 <__malloc_lock+0x8>)
 800c5f2:	f7ff b8ae 	b.w	800b752 <__retarget_lock_acquire_recursive>
 800c5f6:	bf00      	nop
 800c5f8:	200014a4 	.word	0x200014a4

0800c5fc <__malloc_unlock>:
 800c5fc:	4801      	ldr	r0, [pc, #4]	@ (800c604 <__malloc_unlock+0x8>)
 800c5fe:	f7ff b8a9 	b.w	800b754 <__retarget_lock_release_recursive>
 800c602:	bf00      	nop
 800c604:	200014a4 	.word	0x200014a4

0800c608 <_Balloc>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	69c6      	ldr	r6, [r0, #28]
 800c60c:	4604      	mov	r4, r0
 800c60e:	460d      	mov	r5, r1
 800c610:	b976      	cbnz	r6, 800c630 <_Balloc+0x28>
 800c612:	2010      	movs	r0, #16
 800c614:	f7ff ff42 	bl	800c49c <malloc>
 800c618:	4602      	mov	r2, r0
 800c61a:	61e0      	str	r0, [r4, #28]
 800c61c:	b920      	cbnz	r0, 800c628 <_Balloc+0x20>
 800c61e:	4b18      	ldr	r3, [pc, #96]	@ (800c680 <_Balloc+0x78>)
 800c620:	4818      	ldr	r0, [pc, #96]	@ (800c684 <_Balloc+0x7c>)
 800c622:	216b      	movs	r1, #107	@ 0x6b
 800c624:	f000 fda6 	bl	800d174 <__assert_func>
 800c628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c62c:	6006      	str	r6, [r0, #0]
 800c62e:	60c6      	str	r6, [r0, #12]
 800c630:	69e6      	ldr	r6, [r4, #28]
 800c632:	68f3      	ldr	r3, [r6, #12]
 800c634:	b183      	cbz	r3, 800c658 <_Balloc+0x50>
 800c636:	69e3      	ldr	r3, [r4, #28]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c63e:	b9b8      	cbnz	r0, 800c670 <_Balloc+0x68>
 800c640:	2101      	movs	r1, #1
 800c642:	fa01 f605 	lsl.w	r6, r1, r5
 800c646:	1d72      	adds	r2, r6, #5
 800c648:	0092      	lsls	r2, r2, #2
 800c64a:	4620      	mov	r0, r4
 800c64c:	f000 fdb0 	bl	800d1b0 <_calloc_r>
 800c650:	b160      	cbz	r0, 800c66c <_Balloc+0x64>
 800c652:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c656:	e00e      	b.n	800c676 <_Balloc+0x6e>
 800c658:	2221      	movs	r2, #33	@ 0x21
 800c65a:	2104      	movs	r1, #4
 800c65c:	4620      	mov	r0, r4
 800c65e:	f000 fda7 	bl	800d1b0 <_calloc_r>
 800c662:	69e3      	ldr	r3, [r4, #28]
 800c664:	60f0      	str	r0, [r6, #12]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1e4      	bne.n	800c636 <_Balloc+0x2e>
 800c66c:	2000      	movs	r0, #0
 800c66e:	bd70      	pop	{r4, r5, r6, pc}
 800c670:	6802      	ldr	r2, [r0, #0]
 800c672:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c676:	2300      	movs	r3, #0
 800c678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c67c:	e7f7      	b.n	800c66e <_Balloc+0x66>
 800c67e:	bf00      	nop
 800c680:	0800f7e5 	.word	0x0800f7e5
 800c684:	0800f865 	.word	0x0800f865

0800c688 <_Bfree>:
 800c688:	b570      	push	{r4, r5, r6, lr}
 800c68a:	69c6      	ldr	r6, [r0, #28]
 800c68c:	4605      	mov	r5, r0
 800c68e:	460c      	mov	r4, r1
 800c690:	b976      	cbnz	r6, 800c6b0 <_Bfree+0x28>
 800c692:	2010      	movs	r0, #16
 800c694:	f7ff ff02 	bl	800c49c <malloc>
 800c698:	4602      	mov	r2, r0
 800c69a:	61e8      	str	r0, [r5, #28]
 800c69c:	b920      	cbnz	r0, 800c6a8 <_Bfree+0x20>
 800c69e:	4b09      	ldr	r3, [pc, #36]	@ (800c6c4 <_Bfree+0x3c>)
 800c6a0:	4809      	ldr	r0, [pc, #36]	@ (800c6c8 <_Bfree+0x40>)
 800c6a2:	218f      	movs	r1, #143	@ 0x8f
 800c6a4:	f000 fd66 	bl	800d174 <__assert_func>
 800c6a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6ac:	6006      	str	r6, [r0, #0]
 800c6ae:	60c6      	str	r6, [r0, #12]
 800c6b0:	b13c      	cbz	r4, 800c6c2 <_Bfree+0x3a>
 800c6b2:	69eb      	ldr	r3, [r5, #28]
 800c6b4:	6862      	ldr	r2, [r4, #4]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6bc:	6021      	str	r1, [r4, #0]
 800c6be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6c2:	bd70      	pop	{r4, r5, r6, pc}
 800c6c4:	0800f7e5 	.word	0x0800f7e5
 800c6c8:	0800f865 	.word	0x0800f865

0800c6cc <__multadd>:
 800c6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d0:	690d      	ldr	r5, [r1, #16]
 800c6d2:	4607      	mov	r7, r0
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	461e      	mov	r6, r3
 800c6d8:	f101 0c14 	add.w	ip, r1, #20
 800c6dc:	2000      	movs	r0, #0
 800c6de:	f8dc 3000 	ldr.w	r3, [ip]
 800c6e2:	b299      	uxth	r1, r3
 800c6e4:	fb02 6101 	mla	r1, r2, r1, r6
 800c6e8:	0c1e      	lsrs	r6, r3, #16
 800c6ea:	0c0b      	lsrs	r3, r1, #16
 800c6ec:	fb02 3306 	mla	r3, r2, r6, r3
 800c6f0:	b289      	uxth	r1, r1
 800c6f2:	3001      	adds	r0, #1
 800c6f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6f8:	4285      	cmp	r5, r0
 800c6fa:	f84c 1b04 	str.w	r1, [ip], #4
 800c6fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c702:	dcec      	bgt.n	800c6de <__multadd+0x12>
 800c704:	b30e      	cbz	r6, 800c74a <__multadd+0x7e>
 800c706:	68a3      	ldr	r3, [r4, #8]
 800c708:	42ab      	cmp	r3, r5
 800c70a:	dc19      	bgt.n	800c740 <__multadd+0x74>
 800c70c:	6861      	ldr	r1, [r4, #4]
 800c70e:	4638      	mov	r0, r7
 800c710:	3101      	adds	r1, #1
 800c712:	f7ff ff79 	bl	800c608 <_Balloc>
 800c716:	4680      	mov	r8, r0
 800c718:	b928      	cbnz	r0, 800c726 <__multadd+0x5a>
 800c71a:	4602      	mov	r2, r0
 800c71c:	4b0c      	ldr	r3, [pc, #48]	@ (800c750 <__multadd+0x84>)
 800c71e:	480d      	ldr	r0, [pc, #52]	@ (800c754 <__multadd+0x88>)
 800c720:	21ba      	movs	r1, #186	@ 0xba
 800c722:	f000 fd27 	bl	800d174 <__assert_func>
 800c726:	6922      	ldr	r2, [r4, #16]
 800c728:	3202      	adds	r2, #2
 800c72a:	f104 010c 	add.w	r1, r4, #12
 800c72e:	0092      	lsls	r2, r2, #2
 800c730:	300c      	adds	r0, #12
 800c732:	f000 fd11 	bl	800d158 <memcpy>
 800c736:	4621      	mov	r1, r4
 800c738:	4638      	mov	r0, r7
 800c73a:	f7ff ffa5 	bl	800c688 <_Bfree>
 800c73e:	4644      	mov	r4, r8
 800c740:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c744:	3501      	adds	r5, #1
 800c746:	615e      	str	r6, [r3, #20]
 800c748:	6125      	str	r5, [r4, #16]
 800c74a:	4620      	mov	r0, r4
 800c74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c750:	0800f854 	.word	0x0800f854
 800c754:	0800f865 	.word	0x0800f865

0800c758 <__hi0bits>:
 800c758:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c75c:	4603      	mov	r3, r0
 800c75e:	bf36      	itet	cc
 800c760:	0403      	lslcc	r3, r0, #16
 800c762:	2000      	movcs	r0, #0
 800c764:	2010      	movcc	r0, #16
 800c766:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c76a:	bf3c      	itt	cc
 800c76c:	021b      	lslcc	r3, r3, #8
 800c76e:	3008      	addcc	r0, #8
 800c770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c774:	bf3c      	itt	cc
 800c776:	011b      	lslcc	r3, r3, #4
 800c778:	3004      	addcc	r0, #4
 800c77a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c77e:	bf3c      	itt	cc
 800c780:	009b      	lslcc	r3, r3, #2
 800c782:	3002      	addcc	r0, #2
 800c784:	2b00      	cmp	r3, #0
 800c786:	db05      	blt.n	800c794 <__hi0bits+0x3c>
 800c788:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c78c:	f100 0001 	add.w	r0, r0, #1
 800c790:	bf08      	it	eq
 800c792:	2020      	moveq	r0, #32
 800c794:	4770      	bx	lr

0800c796 <__lo0bits>:
 800c796:	6803      	ldr	r3, [r0, #0]
 800c798:	4602      	mov	r2, r0
 800c79a:	f013 0007 	ands.w	r0, r3, #7
 800c79e:	d00b      	beq.n	800c7b8 <__lo0bits+0x22>
 800c7a0:	07d9      	lsls	r1, r3, #31
 800c7a2:	d421      	bmi.n	800c7e8 <__lo0bits+0x52>
 800c7a4:	0798      	lsls	r0, r3, #30
 800c7a6:	bf49      	itett	mi
 800c7a8:	085b      	lsrmi	r3, r3, #1
 800c7aa:	089b      	lsrpl	r3, r3, #2
 800c7ac:	2001      	movmi	r0, #1
 800c7ae:	6013      	strmi	r3, [r2, #0]
 800c7b0:	bf5c      	itt	pl
 800c7b2:	6013      	strpl	r3, [r2, #0]
 800c7b4:	2002      	movpl	r0, #2
 800c7b6:	4770      	bx	lr
 800c7b8:	b299      	uxth	r1, r3
 800c7ba:	b909      	cbnz	r1, 800c7c0 <__lo0bits+0x2a>
 800c7bc:	0c1b      	lsrs	r3, r3, #16
 800c7be:	2010      	movs	r0, #16
 800c7c0:	b2d9      	uxtb	r1, r3
 800c7c2:	b909      	cbnz	r1, 800c7c8 <__lo0bits+0x32>
 800c7c4:	3008      	adds	r0, #8
 800c7c6:	0a1b      	lsrs	r3, r3, #8
 800c7c8:	0719      	lsls	r1, r3, #28
 800c7ca:	bf04      	itt	eq
 800c7cc:	091b      	lsreq	r3, r3, #4
 800c7ce:	3004      	addeq	r0, #4
 800c7d0:	0799      	lsls	r1, r3, #30
 800c7d2:	bf04      	itt	eq
 800c7d4:	089b      	lsreq	r3, r3, #2
 800c7d6:	3002      	addeq	r0, #2
 800c7d8:	07d9      	lsls	r1, r3, #31
 800c7da:	d403      	bmi.n	800c7e4 <__lo0bits+0x4e>
 800c7dc:	085b      	lsrs	r3, r3, #1
 800c7de:	f100 0001 	add.w	r0, r0, #1
 800c7e2:	d003      	beq.n	800c7ec <__lo0bits+0x56>
 800c7e4:	6013      	str	r3, [r2, #0]
 800c7e6:	4770      	bx	lr
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	4770      	bx	lr
 800c7ec:	2020      	movs	r0, #32
 800c7ee:	4770      	bx	lr

0800c7f0 <__i2b>:
 800c7f0:	b510      	push	{r4, lr}
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	2101      	movs	r1, #1
 800c7f6:	f7ff ff07 	bl	800c608 <_Balloc>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	b928      	cbnz	r0, 800c80a <__i2b+0x1a>
 800c7fe:	4b05      	ldr	r3, [pc, #20]	@ (800c814 <__i2b+0x24>)
 800c800:	4805      	ldr	r0, [pc, #20]	@ (800c818 <__i2b+0x28>)
 800c802:	f240 1145 	movw	r1, #325	@ 0x145
 800c806:	f000 fcb5 	bl	800d174 <__assert_func>
 800c80a:	2301      	movs	r3, #1
 800c80c:	6144      	str	r4, [r0, #20]
 800c80e:	6103      	str	r3, [r0, #16]
 800c810:	bd10      	pop	{r4, pc}
 800c812:	bf00      	nop
 800c814:	0800f854 	.word	0x0800f854
 800c818:	0800f865 	.word	0x0800f865

0800c81c <__multiply>:
 800c81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c820:	4617      	mov	r7, r2
 800c822:	690a      	ldr	r2, [r1, #16]
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	429a      	cmp	r2, r3
 800c828:	bfa8      	it	ge
 800c82a:	463b      	movge	r3, r7
 800c82c:	4689      	mov	r9, r1
 800c82e:	bfa4      	itt	ge
 800c830:	460f      	movge	r7, r1
 800c832:	4699      	movge	r9, r3
 800c834:	693d      	ldr	r5, [r7, #16]
 800c836:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	6879      	ldr	r1, [r7, #4]
 800c83e:	eb05 060a 	add.w	r6, r5, sl
 800c842:	42b3      	cmp	r3, r6
 800c844:	b085      	sub	sp, #20
 800c846:	bfb8      	it	lt
 800c848:	3101      	addlt	r1, #1
 800c84a:	f7ff fedd 	bl	800c608 <_Balloc>
 800c84e:	b930      	cbnz	r0, 800c85e <__multiply+0x42>
 800c850:	4602      	mov	r2, r0
 800c852:	4b41      	ldr	r3, [pc, #260]	@ (800c958 <__multiply+0x13c>)
 800c854:	4841      	ldr	r0, [pc, #260]	@ (800c95c <__multiply+0x140>)
 800c856:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c85a:	f000 fc8b 	bl	800d174 <__assert_func>
 800c85e:	f100 0414 	add.w	r4, r0, #20
 800c862:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c866:	4623      	mov	r3, r4
 800c868:	2200      	movs	r2, #0
 800c86a:	4573      	cmp	r3, lr
 800c86c:	d320      	bcc.n	800c8b0 <__multiply+0x94>
 800c86e:	f107 0814 	add.w	r8, r7, #20
 800c872:	f109 0114 	add.w	r1, r9, #20
 800c876:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c87a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c87e:	9302      	str	r3, [sp, #8]
 800c880:	1beb      	subs	r3, r5, r7
 800c882:	3b15      	subs	r3, #21
 800c884:	f023 0303 	bic.w	r3, r3, #3
 800c888:	3304      	adds	r3, #4
 800c88a:	3715      	adds	r7, #21
 800c88c:	42bd      	cmp	r5, r7
 800c88e:	bf38      	it	cc
 800c890:	2304      	movcc	r3, #4
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	9b02      	ldr	r3, [sp, #8]
 800c896:	9103      	str	r1, [sp, #12]
 800c898:	428b      	cmp	r3, r1
 800c89a:	d80c      	bhi.n	800c8b6 <__multiply+0x9a>
 800c89c:	2e00      	cmp	r6, #0
 800c89e:	dd03      	ble.n	800c8a8 <__multiply+0x8c>
 800c8a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d055      	beq.n	800c954 <__multiply+0x138>
 800c8a8:	6106      	str	r6, [r0, #16]
 800c8aa:	b005      	add	sp, #20
 800c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b0:	f843 2b04 	str.w	r2, [r3], #4
 800c8b4:	e7d9      	b.n	800c86a <__multiply+0x4e>
 800c8b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c8ba:	f1ba 0f00 	cmp.w	sl, #0
 800c8be:	d01f      	beq.n	800c900 <__multiply+0xe4>
 800c8c0:	46c4      	mov	ip, r8
 800c8c2:	46a1      	mov	r9, r4
 800c8c4:	2700      	movs	r7, #0
 800c8c6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c8ca:	f8d9 3000 	ldr.w	r3, [r9]
 800c8ce:	fa1f fb82 	uxth.w	fp, r2
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c8d8:	443b      	add	r3, r7
 800c8da:	f8d9 7000 	ldr.w	r7, [r9]
 800c8de:	0c12      	lsrs	r2, r2, #16
 800c8e0:	0c3f      	lsrs	r7, r7, #16
 800c8e2:	fb0a 7202 	mla	r2, sl, r2, r7
 800c8e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8f0:	4565      	cmp	r5, ip
 800c8f2:	f849 3b04 	str.w	r3, [r9], #4
 800c8f6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c8fa:	d8e4      	bhi.n	800c8c6 <__multiply+0xaa>
 800c8fc:	9b01      	ldr	r3, [sp, #4]
 800c8fe:	50e7      	str	r7, [r4, r3]
 800c900:	9b03      	ldr	r3, [sp, #12]
 800c902:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c906:	3104      	adds	r1, #4
 800c908:	f1b9 0f00 	cmp.w	r9, #0
 800c90c:	d020      	beq.n	800c950 <__multiply+0x134>
 800c90e:	6823      	ldr	r3, [r4, #0]
 800c910:	4647      	mov	r7, r8
 800c912:	46a4      	mov	ip, r4
 800c914:	f04f 0a00 	mov.w	sl, #0
 800c918:	f8b7 b000 	ldrh.w	fp, [r7]
 800c91c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c920:	fb09 220b 	mla	r2, r9, fp, r2
 800c924:	4452      	add	r2, sl
 800c926:	b29b      	uxth	r3, r3
 800c928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c92c:	f84c 3b04 	str.w	r3, [ip], #4
 800c930:	f857 3b04 	ldr.w	r3, [r7], #4
 800c934:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c938:	f8bc 3000 	ldrh.w	r3, [ip]
 800c93c:	fb09 330a 	mla	r3, r9, sl, r3
 800c940:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c944:	42bd      	cmp	r5, r7
 800c946:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c94a:	d8e5      	bhi.n	800c918 <__multiply+0xfc>
 800c94c:	9a01      	ldr	r2, [sp, #4]
 800c94e:	50a3      	str	r3, [r4, r2]
 800c950:	3404      	adds	r4, #4
 800c952:	e79f      	b.n	800c894 <__multiply+0x78>
 800c954:	3e01      	subs	r6, #1
 800c956:	e7a1      	b.n	800c89c <__multiply+0x80>
 800c958:	0800f854 	.word	0x0800f854
 800c95c:	0800f865 	.word	0x0800f865

0800c960 <__pow5mult>:
 800c960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c964:	4615      	mov	r5, r2
 800c966:	f012 0203 	ands.w	r2, r2, #3
 800c96a:	4607      	mov	r7, r0
 800c96c:	460e      	mov	r6, r1
 800c96e:	d007      	beq.n	800c980 <__pow5mult+0x20>
 800c970:	4c25      	ldr	r4, [pc, #148]	@ (800ca08 <__pow5mult+0xa8>)
 800c972:	3a01      	subs	r2, #1
 800c974:	2300      	movs	r3, #0
 800c976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c97a:	f7ff fea7 	bl	800c6cc <__multadd>
 800c97e:	4606      	mov	r6, r0
 800c980:	10ad      	asrs	r5, r5, #2
 800c982:	d03d      	beq.n	800ca00 <__pow5mult+0xa0>
 800c984:	69fc      	ldr	r4, [r7, #28]
 800c986:	b97c      	cbnz	r4, 800c9a8 <__pow5mult+0x48>
 800c988:	2010      	movs	r0, #16
 800c98a:	f7ff fd87 	bl	800c49c <malloc>
 800c98e:	4602      	mov	r2, r0
 800c990:	61f8      	str	r0, [r7, #28]
 800c992:	b928      	cbnz	r0, 800c9a0 <__pow5mult+0x40>
 800c994:	4b1d      	ldr	r3, [pc, #116]	@ (800ca0c <__pow5mult+0xac>)
 800c996:	481e      	ldr	r0, [pc, #120]	@ (800ca10 <__pow5mult+0xb0>)
 800c998:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c99c:	f000 fbea 	bl	800d174 <__assert_func>
 800c9a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9a4:	6004      	str	r4, [r0, #0]
 800c9a6:	60c4      	str	r4, [r0, #12]
 800c9a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c9ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9b0:	b94c      	cbnz	r4, 800c9c6 <__pow5mult+0x66>
 800c9b2:	f240 2171 	movw	r1, #625	@ 0x271
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	f7ff ff1a 	bl	800c7f0 <__i2b>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	6003      	str	r3, [r0, #0]
 800c9c6:	f04f 0900 	mov.w	r9, #0
 800c9ca:	07eb      	lsls	r3, r5, #31
 800c9cc:	d50a      	bpl.n	800c9e4 <__pow5mult+0x84>
 800c9ce:	4631      	mov	r1, r6
 800c9d0:	4622      	mov	r2, r4
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	f7ff ff22 	bl	800c81c <__multiply>
 800c9d8:	4631      	mov	r1, r6
 800c9da:	4680      	mov	r8, r0
 800c9dc:	4638      	mov	r0, r7
 800c9de:	f7ff fe53 	bl	800c688 <_Bfree>
 800c9e2:	4646      	mov	r6, r8
 800c9e4:	106d      	asrs	r5, r5, #1
 800c9e6:	d00b      	beq.n	800ca00 <__pow5mult+0xa0>
 800c9e8:	6820      	ldr	r0, [r4, #0]
 800c9ea:	b938      	cbnz	r0, 800c9fc <__pow5mult+0x9c>
 800c9ec:	4622      	mov	r2, r4
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	f7ff ff13 	bl	800c81c <__multiply>
 800c9f6:	6020      	str	r0, [r4, #0]
 800c9f8:	f8c0 9000 	str.w	r9, [r0]
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	e7e4      	b.n	800c9ca <__pow5mult+0x6a>
 800ca00:	4630      	mov	r0, r6
 800ca02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca06:	bf00      	nop
 800ca08:	0800f918 	.word	0x0800f918
 800ca0c:	0800f7e5 	.word	0x0800f7e5
 800ca10:	0800f865 	.word	0x0800f865

0800ca14 <__lshift>:
 800ca14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca18:	460c      	mov	r4, r1
 800ca1a:	6849      	ldr	r1, [r1, #4]
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca22:	68a3      	ldr	r3, [r4, #8]
 800ca24:	4607      	mov	r7, r0
 800ca26:	4691      	mov	r9, r2
 800ca28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca2c:	f108 0601 	add.w	r6, r8, #1
 800ca30:	42b3      	cmp	r3, r6
 800ca32:	db0b      	blt.n	800ca4c <__lshift+0x38>
 800ca34:	4638      	mov	r0, r7
 800ca36:	f7ff fde7 	bl	800c608 <_Balloc>
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	b948      	cbnz	r0, 800ca52 <__lshift+0x3e>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	4b28      	ldr	r3, [pc, #160]	@ (800cae4 <__lshift+0xd0>)
 800ca42:	4829      	ldr	r0, [pc, #164]	@ (800cae8 <__lshift+0xd4>)
 800ca44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca48:	f000 fb94 	bl	800d174 <__assert_func>
 800ca4c:	3101      	adds	r1, #1
 800ca4e:	005b      	lsls	r3, r3, #1
 800ca50:	e7ee      	b.n	800ca30 <__lshift+0x1c>
 800ca52:	2300      	movs	r3, #0
 800ca54:	f100 0114 	add.w	r1, r0, #20
 800ca58:	f100 0210 	add.w	r2, r0, #16
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	4553      	cmp	r3, sl
 800ca60:	db33      	blt.n	800caca <__lshift+0xb6>
 800ca62:	6920      	ldr	r0, [r4, #16]
 800ca64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca68:	f104 0314 	add.w	r3, r4, #20
 800ca6c:	f019 091f 	ands.w	r9, r9, #31
 800ca70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca78:	d02b      	beq.n	800cad2 <__lshift+0xbe>
 800ca7a:	f1c9 0e20 	rsb	lr, r9, #32
 800ca7e:	468a      	mov	sl, r1
 800ca80:	2200      	movs	r2, #0
 800ca82:	6818      	ldr	r0, [r3, #0]
 800ca84:	fa00 f009 	lsl.w	r0, r0, r9
 800ca88:	4310      	orrs	r0, r2
 800ca8a:	f84a 0b04 	str.w	r0, [sl], #4
 800ca8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca92:	459c      	cmp	ip, r3
 800ca94:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca98:	d8f3      	bhi.n	800ca82 <__lshift+0x6e>
 800ca9a:	ebac 0304 	sub.w	r3, ip, r4
 800ca9e:	3b15      	subs	r3, #21
 800caa0:	f023 0303 	bic.w	r3, r3, #3
 800caa4:	3304      	adds	r3, #4
 800caa6:	f104 0015 	add.w	r0, r4, #21
 800caaa:	4560      	cmp	r0, ip
 800caac:	bf88      	it	hi
 800caae:	2304      	movhi	r3, #4
 800cab0:	50ca      	str	r2, [r1, r3]
 800cab2:	b10a      	cbz	r2, 800cab8 <__lshift+0xa4>
 800cab4:	f108 0602 	add.w	r6, r8, #2
 800cab8:	3e01      	subs	r6, #1
 800caba:	4638      	mov	r0, r7
 800cabc:	612e      	str	r6, [r5, #16]
 800cabe:	4621      	mov	r1, r4
 800cac0:	f7ff fde2 	bl	800c688 <_Bfree>
 800cac4:	4628      	mov	r0, r5
 800cac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caca:	f842 0f04 	str.w	r0, [r2, #4]!
 800cace:	3301      	adds	r3, #1
 800cad0:	e7c5      	b.n	800ca5e <__lshift+0x4a>
 800cad2:	3904      	subs	r1, #4
 800cad4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cadc:	459c      	cmp	ip, r3
 800cade:	d8f9      	bhi.n	800cad4 <__lshift+0xc0>
 800cae0:	e7ea      	b.n	800cab8 <__lshift+0xa4>
 800cae2:	bf00      	nop
 800cae4:	0800f854 	.word	0x0800f854
 800cae8:	0800f865 	.word	0x0800f865

0800caec <__mcmp>:
 800caec:	690a      	ldr	r2, [r1, #16]
 800caee:	4603      	mov	r3, r0
 800caf0:	6900      	ldr	r0, [r0, #16]
 800caf2:	1a80      	subs	r0, r0, r2
 800caf4:	b530      	push	{r4, r5, lr}
 800caf6:	d10e      	bne.n	800cb16 <__mcmp+0x2a>
 800caf8:	3314      	adds	r3, #20
 800cafa:	3114      	adds	r1, #20
 800cafc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb0c:	4295      	cmp	r5, r2
 800cb0e:	d003      	beq.n	800cb18 <__mcmp+0x2c>
 800cb10:	d205      	bcs.n	800cb1e <__mcmp+0x32>
 800cb12:	f04f 30ff 	mov.w	r0, #4294967295
 800cb16:	bd30      	pop	{r4, r5, pc}
 800cb18:	42a3      	cmp	r3, r4
 800cb1a:	d3f3      	bcc.n	800cb04 <__mcmp+0x18>
 800cb1c:	e7fb      	b.n	800cb16 <__mcmp+0x2a>
 800cb1e:	2001      	movs	r0, #1
 800cb20:	e7f9      	b.n	800cb16 <__mcmp+0x2a>
	...

0800cb24 <__mdiff>:
 800cb24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb28:	4689      	mov	r9, r1
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	4648      	mov	r0, r9
 800cb30:	4614      	mov	r4, r2
 800cb32:	f7ff ffdb 	bl	800caec <__mcmp>
 800cb36:	1e05      	subs	r5, r0, #0
 800cb38:	d112      	bne.n	800cb60 <__mdiff+0x3c>
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f7ff fd63 	bl	800c608 <_Balloc>
 800cb42:	4602      	mov	r2, r0
 800cb44:	b928      	cbnz	r0, 800cb52 <__mdiff+0x2e>
 800cb46:	4b3f      	ldr	r3, [pc, #252]	@ (800cc44 <__mdiff+0x120>)
 800cb48:	f240 2137 	movw	r1, #567	@ 0x237
 800cb4c:	483e      	ldr	r0, [pc, #248]	@ (800cc48 <__mdiff+0x124>)
 800cb4e:	f000 fb11 	bl	800d174 <__assert_func>
 800cb52:	2301      	movs	r3, #1
 800cb54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb58:	4610      	mov	r0, r2
 800cb5a:	b003      	add	sp, #12
 800cb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb60:	bfbc      	itt	lt
 800cb62:	464b      	movlt	r3, r9
 800cb64:	46a1      	movlt	r9, r4
 800cb66:	4630      	mov	r0, r6
 800cb68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb6c:	bfba      	itte	lt
 800cb6e:	461c      	movlt	r4, r3
 800cb70:	2501      	movlt	r5, #1
 800cb72:	2500      	movge	r5, #0
 800cb74:	f7ff fd48 	bl	800c608 <_Balloc>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	b918      	cbnz	r0, 800cb84 <__mdiff+0x60>
 800cb7c:	4b31      	ldr	r3, [pc, #196]	@ (800cc44 <__mdiff+0x120>)
 800cb7e:	f240 2145 	movw	r1, #581	@ 0x245
 800cb82:	e7e3      	b.n	800cb4c <__mdiff+0x28>
 800cb84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb88:	6926      	ldr	r6, [r4, #16]
 800cb8a:	60c5      	str	r5, [r0, #12]
 800cb8c:	f109 0310 	add.w	r3, r9, #16
 800cb90:	f109 0514 	add.w	r5, r9, #20
 800cb94:	f104 0e14 	add.w	lr, r4, #20
 800cb98:	f100 0b14 	add.w	fp, r0, #20
 800cb9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cba0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	46d9      	mov	r9, fp
 800cba8:	f04f 0c00 	mov.w	ip, #0
 800cbac:	9b01      	ldr	r3, [sp, #4]
 800cbae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cbb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cbb6:	9301      	str	r3, [sp, #4]
 800cbb8:	fa1f f38a 	uxth.w	r3, sl
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	b283      	uxth	r3, r0
 800cbc0:	1acb      	subs	r3, r1, r3
 800cbc2:	0c00      	lsrs	r0, r0, #16
 800cbc4:	4463      	add	r3, ip
 800cbc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cbd4:	4576      	cmp	r6, lr
 800cbd6:	f849 3b04 	str.w	r3, [r9], #4
 800cbda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbde:	d8e5      	bhi.n	800cbac <__mdiff+0x88>
 800cbe0:	1b33      	subs	r3, r6, r4
 800cbe2:	3b15      	subs	r3, #21
 800cbe4:	f023 0303 	bic.w	r3, r3, #3
 800cbe8:	3415      	adds	r4, #21
 800cbea:	3304      	adds	r3, #4
 800cbec:	42a6      	cmp	r6, r4
 800cbee:	bf38      	it	cc
 800cbf0:	2304      	movcc	r3, #4
 800cbf2:	441d      	add	r5, r3
 800cbf4:	445b      	add	r3, fp
 800cbf6:	461e      	mov	r6, r3
 800cbf8:	462c      	mov	r4, r5
 800cbfa:	4544      	cmp	r4, r8
 800cbfc:	d30e      	bcc.n	800cc1c <__mdiff+0xf8>
 800cbfe:	f108 0103 	add.w	r1, r8, #3
 800cc02:	1b49      	subs	r1, r1, r5
 800cc04:	f021 0103 	bic.w	r1, r1, #3
 800cc08:	3d03      	subs	r5, #3
 800cc0a:	45a8      	cmp	r8, r5
 800cc0c:	bf38      	it	cc
 800cc0e:	2100      	movcc	r1, #0
 800cc10:	440b      	add	r3, r1
 800cc12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc16:	b191      	cbz	r1, 800cc3e <__mdiff+0x11a>
 800cc18:	6117      	str	r7, [r2, #16]
 800cc1a:	e79d      	b.n	800cb58 <__mdiff+0x34>
 800cc1c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc20:	46e6      	mov	lr, ip
 800cc22:	0c08      	lsrs	r0, r1, #16
 800cc24:	fa1c fc81 	uxtah	ip, ip, r1
 800cc28:	4471      	add	r1, lr
 800cc2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc2e:	b289      	uxth	r1, r1
 800cc30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc34:	f846 1b04 	str.w	r1, [r6], #4
 800cc38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc3c:	e7dd      	b.n	800cbfa <__mdiff+0xd6>
 800cc3e:	3f01      	subs	r7, #1
 800cc40:	e7e7      	b.n	800cc12 <__mdiff+0xee>
 800cc42:	bf00      	nop
 800cc44:	0800f854 	.word	0x0800f854
 800cc48:	0800f865 	.word	0x0800f865

0800cc4c <__d2b>:
 800cc4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc50:	460f      	mov	r7, r1
 800cc52:	2101      	movs	r1, #1
 800cc54:	ec59 8b10 	vmov	r8, r9, d0
 800cc58:	4616      	mov	r6, r2
 800cc5a:	f7ff fcd5 	bl	800c608 <_Balloc>
 800cc5e:	4604      	mov	r4, r0
 800cc60:	b930      	cbnz	r0, 800cc70 <__d2b+0x24>
 800cc62:	4602      	mov	r2, r0
 800cc64:	4b23      	ldr	r3, [pc, #140]	@ (800ccf4 <__d2b+0xa8>)
 800cc66:	4824      	ldr	r0, [pc, #144]	@ (800ccf8 <__d2b+0xac>)
 800cc68:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc6c:	f000 fa82 	bl	800d174 <__assert_func>
 800cc70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc78:	b10d      	cbz	r5, 800cc7e <__d2b+0x32>
 800cc7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc7e:	9301      	str	r3, [sp, #4]
 800cc80:	f1b8 0300 	subs.w	r3, r8, #0
 800cc84:	d023      	beq.n	800ccce <__d2b+0x82>
 800cc86:	4668      	mov	r0, sp
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	f7ff fd84 	bl	800c796 <__lo0bits>
 800cc8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc92:	b1d0      	cbz	r0, 800ccca <__d2b+0x7e>
 800cc94:	f1c0 0320 	rsb	r3, r0, #32
 800cc98:	fa02 f303 	lsl.w	r3, r2, r3
 800cc9c:	430b      	orrs	r3, r1
 800cc9e:	40c2      	lsrs	r2, r0
 800cca0:	6163      	str	r3, [r4, #20]
 800cca2:	9201      	str	r2, [sp, #4]
 800cca4:	9b01      	ldr	r3, [sp, #4]
 800cca6:	61a3      	str	r3, [r4, #24]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	bf0c      	ite	eq
 800ccac:	2201      	moveq	r2, #1
 800ccae:	2202      	movne	r2, #2
 800ccb0:	6122      	str	r2, [r4, #16]
 800ccb2:	b1a5      	cbz	r5, 800ccde <__d2b+0x92>
 800ccb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ccb8:	4405      	add	r5, r0
 800ccba:	603d      	str	r5, [r7, #0]
 800ccbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ccc0:	6030      	str	r0, [r6, #0]
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	b003      	add	sp, #12
 800ccc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccca:	6161      	str	r1, [r4, #20]
 800cccc:	e7ea      	b.n	800cca4 <__d2b+0x58>
 800ccce:	a801      	add	r0, sp, #4
 800ccd0:	f7ff fd61 	bl	800c796 <__lo0bits>
 800ccd4:	9b01      	ldr	r3, [sp, #4]
 800ccd6:	6163      	str	r3, [r4, #20]
 800ccd8:	3020      	adds	r0, #32
 800ccda:	2201      	movs	r2, #1
 800ccdc:	e7e8      	b.n	800ccb0 <__d2b+0x64>
 800ccde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cce2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cce6:	6038      	str	r0, [r7, #0]
 800cce8:	6918      	ldr	r0, [r3, #16]
 800ccea:	f7ff fd35 	bl	800c758 <__hi0bits>
 800ccee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccf2:	e7e5      	b.n	800ccc0 <__d2b+0x74>
 800ccf4:	0800f854 	.word	0x0800f854
 800ccf8:	0800f865 	.word	0x0800f865

0800ccfc <__ssputs_r>:
 800ccfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd00:	688e      	ldr	r6, [r1, #8]
 800cd02:	461f      	mov	r7, r3
 800cd04:	42be      	cmp	r6, r7
 800cd06:	680b      	ldr	r3, [r1, #0]
 800cd08:	4682      	mov	sl, r0
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	4690      	mov	r8, r2
 800cd0e:	d82d      	bhi.n	800cd6c <__ssputs_r+0x70>
 800cd10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd18:	d026      	beq.n	800cd68 <__ssputs_r+0x6c>
 800cd1a:	6965      	ldr	r5, [r4, #20]
 800cd1c:	6909      	ldr	r1, [r1, #16]
 800cd1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd22:	eba3 0901 	sub.w	r9, r3, r1
 800cd26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd2a:	1c7b      	adds	r3, r7, #1
 800cd2c:	444b      	add	r3, r9
 800cd2e:	106d      	asrs	r5, r5, #1
 800cd30:	429d      	cmp	r5, r3
 800cd32:	bf38      	it	cc
 800cd34:	461d      	movcc	r5, r3
 800cd36:	0553      	lsls	r3, r2, #21
 800cd38:	d527      	bpl.n	800cd8a <__ssputs_r+0x8e>
 800cd3a:	4629      	mov	r1, r5
 800cd3c:	f7ff fbd8 	bl	800c4f0 <_malloc_r>
 800cd40:	4606      	mov	r6, r0
 800cd42:	b360      	cbz	r0, 800cd9e <__ssputs_r+0xa2>
 800cd44:	6921      	ldr	r1, [r4, #16]
 800cd46:	464a      	mov	r2, r9
 800cd48:	f000 fa06 	bl	800d158 <memcpy>
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd56:	81a3      	strh	r3, [r4, #12]
 800cd58:	6126      	str	r6, [r4, #16]
 800cd5a:	6165      	str	r5, [r4, #20]
 800cd5c:	444e      	add	r6, r9
 800cd5e:	eba5 0509 	sub.w	r5, r5, r9
 800cd62:	6026      	str	r6, [r4, #0]
 800cd64:	60a5      	str	r5, [r4, #8]
 800cd66:	463e      	mov	r6, r7
 800cd68:	42be      	cmp	r6, r7
 800cd6a:	d900      	bls.n	800cd6e <__ssputs_r+0x72>
 800cd6c:	463e      	mov	r6, r7
 800cd6e:	6820      	ldr	r0, [r4, #0]
 800cd70:	4632      	mov	r2, r6
 800cd72:	4641      	mov	r1, r8
 800cd74:	f000 f9c6 	bl	800d104 <memmove>
 800cd78:	68a3      	ldr	r3, [r4, #8]
 800cd7a:	1b9b      	subs	r3, r3, r6
 800cd7c:	60a3      	str	r3, [r4, #8]
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	4433      	add	r3, r6
 800cd82:	6023      	str	r3, [r4, #0]
 800cd84:	2000      	movs	r0, #0
 800cd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8a:	462a      	mov	r2, r5
 800cd8c:	f000 fa36 	bl	800d1fc <_realloc_r>
 800cd90:	4606      	mov	r6, r0
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d1e0      	bne.n	800cd58 <__ssputs_r+0x5c>
 800cd96:	6921      	ldr	r1, [r4, #16]
 800cd98:	4650      	mov	r0, sl
 800cd9a:	f7ff fb35 	bl	800c408 <_free_r>
 800cd9e:	230c      	movs	r3, #12
 800cda0:	f8ca 3000 	str.w	r3, [sl]
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdaa:	81a3      	strh	r3, [r4, #12]
 800cdac:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb0:	e7e9      	b.n	800cd86 <__ssputs_r+0x8a>
	...

0800cdb4 <_svfiprintf_r>:
 800cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	4698      	mov	r8, r3
 800cdba:	898b      	ldrh	r3, [r1, #12]
 800cdbc:	061b      	lsls	r3, r3, #24
 800cdbe:	b09d      	sub	sp, #116	@ 0x74
 800cdc0:	4607      	mov	r7, r0
 800cdc2:	460d      	mov	r5, r1
 800cdc4:	4614      	mov	r4, r2
 800cdc6:	d510      	bpl.n	800cdea <_svfiprintf_r+0x36>
 800cdc8:	690b      	ldr	r3, [r1, #16]
 800cdca:	b973      	cbnz	r3, 800cdea <_svfiprintf_r+0x36>
 800cdcc:	2140      	movs	r1, #64	@ 0x40
 800cdce:	f7ff fb8f 	bl	800c4f0 <_malloc_r>
 800cdd2:	6028      	str	r0, [r5, #0]
 800cdd4:	6128      	str	r0, [r5, #16]
 800cdd6:	b930      	cbnz	r0, 800cde6 <_svfiprintf_r+0x32>
 800cdd8:	230c      	movs	r3, #12
 800cdda:	603b      	str	r3, [r7, #0]
 800cddc:	f04f 30ff 	mov.w	r0, #4294967295
 800cde0:	b01d      	add	sp, #116	@ 0x74
 800cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde6:	2340      	movs	r3, #64	@ 0x40
 800cde8:	616b      	str	r3, [r5, #20]
 800cdea:	2300      	movs	r3, #0
 800cdec:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdee:	2320      	movs	r3, #32
 800cdf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdf8:	2330      	movs	r3, #48	@ 0x30
 800cdfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf98 <_svfiprintf_r+0x1e4>
 800cdfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce02:	f04f 0901 	mov.w	r9, #1
 800ce06:	4623      	mov	r3, r4
 800ce08:	469a      	mov	sl, r3
 800ce0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce0e:	b10a      	cbz	r2, 800ce14 <_svfiprintf_r+0x60>
 800ce10:	2a25      	cmp	r2, #37	@ 0x25
 800ce12:	d1f9      	bne.n	800ce08 <_svfiprintf_r+0x54>
 800ce14:	ebba 0b04 	subs.w	fp, sl, r4
 800ce18:	d00b      	beq.n	800ce32 <_svfiprintf_r+0x7e>
 800ce1a:	465b      	mov	r3, fp
 800ce1c:	4622      	mov	r2, r4
 800ce1e:	4629      	mov	r1, r5
 800ce20:	4638      	mov	r0, r7
 800ce22:	f7ff ff6b 	bl	800ccfc <__ssputs_r>
 800ce26:	3001      	adds	r0, #1
 800ce28:	f000 80a7 	beq.w	800cf7a <_svfiprintf_r+0x1c6>
 800ce2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce2e:	445a      	add	r2, fp
 800ce30:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce32:	f89a 3000 	ldrb.w	r3, [sl]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f000 809f 	beq.w	800cf7a <_svfiprintf_r+0x1c6>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce46:	f10a 0a01 	add.w	sl, sl, #1
 800ce4a:	9304      	str	r3, [sp, #16]
 800ce4c:	9307      	str	r3, [sp, #28]
 800ce4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce52:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce54:	4654      	mov	r4, sl
 800ce56:	2205      	movs	r2, #5
 800ce58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce5c:	484e      	ldr	r0, [pc, #312]	@ (800cf98 <_svfiprintf_r+0x1e4>)
 800ce5e:	f7f3 f9bf 	bl	80001e0 <memchr>
 800ce62:	9a04      	ldr	r2, [sp, #16]
 800ce64:	b9d8      	cbnz	r0, 800ce9e <_svfiprintf_r+0xea>
 800ce66:	06d0      	lsls	r0, r2, #27
 800ce68:	bf44      	itt	mi
 800ce6a:	2320      	movmi	r3, #32
 800ce6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce70:	0711      	lsls	r1, r2, #28
 800ce72:	bf44      	itt	mi
 800ce74:	232b      	movmi	r3, #43	@ 0x2b
 800ce76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce80:	d015      	beq.n	800ceae <_svfiprintf_r+0xfa>
 800ce82:	9a07      	ldr	r2, [sp, #28]
 800ce84:	4654      	mov	r4, sl
 800ce86:	2000      	movs	r0, #0
 800ce88:	f04f 0c0a 	mov.w	ip, #10
 800ce8c:	4621      	mov	r1, r4
 800ce8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce92:	3b30      	subs	r3, #48	@ 0x30
 800ce94:	2b09      	cmp	r3, #9
 800ce96:	d94b      	bls.n	800cf30 <_svfiprintf_r+0x17c>
 800ce98:	b1b0      	cbz	r0, 800cec8 <_svfiprintf_r+0x114>
 800ce9a:	9207      	str	r2, [sp, #28]
 800ce9c:	e014      	b.n	800cec8 <_svfiprintf_r+0x114>
 800ce9e:	eba0 0308 	sub.w	r3, r0, r8
 800cea2:	fa09 f303 	lsl.w	r3, r9, r3
 800cea6:	4313      	orrs	r3, r2
 800cea8:	9304      	str	r3, [sp, #16]
 800ceaa:	46a2      	mov	sl, r4
 800ceac:	e7d2      	b.n	800ce54 <_svfiprintf_r+0xa0>
 800ceae:	9b03      	ldr	r3, [sp, #12]
 800ceb0:	1d19      	adds	r1, r3, #4
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	9103      	str	r1, [sp, #12]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	bfbb      	ittet	lt
 800ceba:	425b      	neglt	r3, r3
 800cebc:	f042 0202 	orrlt.w	r2, r2, #2
 800cec0:	9307      	strge	r3, [sp, #28]
 800cec2:	9307      	strlt	r3, [sp, #28]
 800cec4:	bfb8      	it	lt
 800cec6:	9204      	strlt	r2, [sp, #16]
 800cec8:	7823      	ldrb	r3, [r4, #0]
 800ceca:	2b2e      	cmp	r3, #46	@ 0x2e
 800cecc:	d10a      	bne.n	800cee4 <_svfiprintf_r+0x130>
 800cece:	7863      	ldrb	r3, [r4, #1]
 800ced0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ced2:	d132      	bne.n	800cf3a <_svfiprintf_r+0x186>
 800ced4:	9b03      	ldr	r3, [sp, #12]
 800ced6:	1d1a      	adds	r2, r3, #4
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	9203      	str	r2, [sp, #12]
 800cedc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cee0:	3402      	adds	r4, #2
 800cee2:	9305      	str	r3, [sp, #20]
 800cee4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cfa8 <_svfiprintf_r+0x1f4>
 800cee8:	7821      	ldrb	r1, [r4, #0]
 800ceea:	2203      	movs	r2, #3
 800ceec:	4650      	mov	r0, sl
 800ceee:	f7f3 f977 	bl	80001e0 <memchr>
 800cef2:	b138      	cbz	r0, 800cf04 <_svfiprintf_r+0x150>
 800cef4:	9b04      	ldr	r3, [sp, #16]
 800cef6:	eba0 000a 	sub.w	r0, r0, sl
 800cefa:	2240      	movs	r2, #64	@ 0x40
 800cefc:	4082      	lsls	r2, r0
 800cefe:	4313      	orrs	r3, r2
 800cf00:	3401      	adds	r4, #1
 800cf02:	9304      	str	r3, [sp, #16]
 800cf04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf08:	4824      	ldr	r0, [pc, #144]	@ (800cf9c <_svfiprintf_r+0x1e8>)
 800cf0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf0e:	2206      	movs	r2, #6
 800cf10:	f7f3 f966 	bl	80001e0 <memchr>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	d036      	beq.n	800cf86 <_svfiprintf_r+0x1d2>
 800cf18:	4b21      	ldr	r3, [pc, #132]	@ (800cfa0 <_svfiprintf_r+0x1ec>)
 800cf1a:	bb1b      	cbnz	r3, 800cf64 <_svfiprintf_r+0x1b0>
 800cf1c:	9b03      	ldr	r3, [sp, #12]
 800cf1e:	3307      	adds	r3, #7
 800cf20:	f023 0307 	bic.w	r3, r3, #7
 800cf24:	3308      	adds	r3, #8
 800cf26:	9303      	str	r3, [sp, #12]
 800cf28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf2a:	4433      	add	r3, r6
 800cf2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf2e:	e76a      	b.n	800ce06 <_svfiprintf_r+0x52>
 800cf30:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf34:	460c      	mov	r4, r1
 800cf36:	2001      	movs	r0, #1
 800cf38:	e7a8      	b.n	800ce8c <_svfiprintf_r+0xd8>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	3401      	adds	r4, #1
 800cf3e:	9305      	str	r3, [sp, #20]
 800cf40:	4619      	mov	r1, r3
 800cf42:	f04f 0c0a 	mov.w	ip, #10
 800cf46:	4620      	mov	r0, r4
 800cf48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf4c:	3a30      	subs	r2, #48	@ 0x30
 800cf4e:	2a09      	cmp	r2, #9
 800cf50:	d903      	bls.n	800cf5a <_svfiprintf_r+0x1a6>
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d0c6      	beq.n	800cee4 <_svfiprintf_r+0x130>
 800cf56:	9105      	str	r1, [sp, #20]
 800cf58:	e7c4      	b.n	800cee4 <_svfiprintf_r+0x130>
 800cf5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf5e:	4604      	mov	r4, r0
 800cf60:	2301      	movs	r3, #1
 800cf62:	e7f0      	b.n	800cf46 <_svfiprintf_r+0x192>
 800cf64:	ab03      	add	r3, sp, #12
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	462a      	mov	r2, r5
 800cf6a:	4b0e      	ldr	r3, [pc, #56]	@ (800cfa4 <_svfiprintf_r+0x1f0>)
 800cf6c:	a904      	add	r1, sp, #16
 800cf6e:	4638      	mov	r0, r7
 800cf70:	f7fd fe48 	bl	800ac04 <_printf_float>
 800cf74:	1c42      	adds	r2, r0, #1
 800cf76:	4606      	mov	r6, r0
 800cf78:	d1d6      	bne.n	800cf28 <_svfiprintf_r+0x174>
 800cf7a:	89ab      	ldrh	r3, [r5, #12]
 800cf7c:	065b      	lsls	r3, r3, #25
 800cf7e:	f53f af2d 	bmi.w	800cddc <_svfiprintf_r+0x28>
 800cf82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf84:	e72c      	b.n	800cde0 <_svfiprintf_r+0x2c>
 800cf86:	ab03      	add	r3, sp, #12
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	462a      	mov	r2, r5
 800cf8c:	4b05      	ldr	r3, [pc, #20]	@ (800cfa4 <_svfiprintf_r+0x1f0>)
 800cf8e:	a904      	add	r1, sp, #16
 800cf90:	4638      	mov	r0, r7
 800cf92:	f7fe f8cf 	bl	800b134 <_printf_i>
 800cf96:	e7ed      	b.n	800cf74 <_svfiprintf_r+0x1c0>
 800cf98:	0800f8be 	.word	0x0800f8be
 800cf9c:	0800f8c8 	.word	0x0800f8c8
 800cfa0:	0800ac05 	.word	0x0800ac05
 800cfa4:	0800ccfd 	.word	0x0800ccfd
 800cfa8:	0800f8c4 	.word	0x0800f8c4

0800cfac <__sflush_r>:
 800cfac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb4:	0716      	lsls	r6, r2, #28
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	460c      	mov	r4, r1
 800cfba:	d454      	bmi.n	800d066 <__sflush_r+0xba>
 800cfbc:	684b      	ldr	r3, [r1, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	dc02      	bgt.n	800cfc8 <__sflush_r+0x1c>
 800cfc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	dd48      	ble.n	800d05a <__sflush_r+0xae>
 800cfc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfca:	2e00      	cmp	r6, #0
 800cfcc:	d045      	beq.n	800d05a <__sflush_r+0xae>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cfd4:	682f      	ldr	r7, [r5, #0]
 800cfd6:	6a21      	ldr	r1, [r4, #32]
 800cfd8:	602b      	str	r3, [r5, #0]
 800cfda:	d030      	beq.n	800d03e <__sflush_r+0x92>
 800cfdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfde:	89a3      	ldrh	r3, [r4, #12]
 800cfe0:	0759      	lsls	r1, r3, #29
 800cfe2:	d505      	bpl.n	800cff0 <__sflush_r+0x44>
 800cfe4:	6863      	ldr	r3, [r4, #4]
 800cfe6:	1ad2      	subs	r2, r2, r3
 800cfe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfea:	b10b      	cbz	r3, 800cff0 <__sflush_r+0x44>
 800cfec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfee:	1ad2      	subs	r2, r2, r3
 800cff0:	2300      	movs	r3, #0
 800cff2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cff4:	6a21      	ldr	r1, [r4, #32]
 800cff6:	4628      	mov	r0, r5
 800cff8:	47b0      	blx	r6
 800cffa:	1c43      	adds	r3, r0, #1
 800cffc:	89a3      	ldrh	r3, [r4, #12]
 800cffe:	d106      	bne.n	800d00e <__sflush_r+0x62>
 800d000:	6829      	ldr	r1, [r5, #0]
 800d002:	291d      	cmp	r1, #29
 800d004:	d82b      	bhi.n	800d05e <__sflush_r+0xb2>
 800d006:	4a2a      	ldr	r2, [pc, #168]	@ (800d0b0 <__sflush_r+0x104>)
 800d008:	40ca      	lsrs	r2, r1
 800d00a:	07d6      	lsls	r6, r2, #31
 800d00c:	d527      	bpl.n	800d05e <__sflush_r+0xb2>
 800d00e:	2200      	movs	r2, #0
 800d010:	6062      	str	r2, [r4, #4]
 800d012:	04d9      	lsls	r1, r3, #19
 800d014:	6922      	ldr	r2, [r4, #16]
 800d016:	6022      	str	r2, [r4, #0]
 800d018:	d504      	bpl.n	800d024 <__sflush_r+0x78>
 800d01a:	1c42      	adds	r2, r0, #1
 800d01c:	d101      	bne.n	800d022 <__sflush_r+0x76>
 800d01e:	682b      	ldr	r3, [r5, #0]
 800d020:	b903      	cbnz	r3, 800d024 <__sflush_r+0x78>
 800d022:	6560      	str	r0, [r4, #84]	@ 0x54
 800d024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d026:	602f      	str	r7, [r5, #0]
 800d028:	b1b9      	cbz	r1, 800d05a <__sflush_r+0xae>
 800d02a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d02e:	4299      	cmp	r1, r3
 800d030:	d002      	beq.n	800d038 <__sflush_r+0x8c>
 800d032:	4628      	mov	r0, r5
 800d034:	f7ff f9e8 	bl	800c408 <_free_r>
 800d038:	2300      	movs	r3, #0
 800d03a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d03c:	e00d      	b.n	800d05a <__sflush_r+0xae>
 800d03e:	2301      	movs	r3, #1
 800d040:	4628      	mov	r0, r5
 800d042:	47b0      	blx	r6
 800d044:	4602      	mov	r2, r0
 800d046:	1c50      	adds	r0, r2, #1
 800d048:	d1c9      	bne.n	800cfde <__sflush_r+0x32>
 800d04a:	682b      	ldr	r3, [r5, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d0c6      	beq.n	800cfde <__sflush_r+0x32>
 800d050:	2b1d      	cmp	r3, #29
 800d052:	d001      	beq.n	800d058 <__sflush_r+0xac>
 800d054:	2b16      	cmp	r3, #22
 800d056:	d11e      	bne.n	800d096 <__sflush_r+0xea>
 800d058:	602f      	str	r7, [r5, #0]
 800d05a:	2000      	movs	r0, #0
 800d05c:	e022      	b.n	800d0a4 <__sflush_r+0xf8>
 800d05e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d062:	b21b      	sxth	r3, r3
 800d064:	e01b      	b.n	800d09e <__sflush_r+0xf2>
 800d066:	690f      	ldr	r7, [r1, #16]
 800d068:	2f00      	cmp	r7, #0
 800d06a:	d0f6      	beq.n	800d05a <__sflush_r+0xae>
 800d06c:	0793      	lsls	r3, r2, #30
 800d06e:	680e      	ldr	r6, [r1, #0]
 800d070:	bf08      	it	eq
 800d072:	694b      	ldreq	r3, [r1, #20]
 800d074:	600f      	str	r7, [r1, #0]
 800d076:	bf18      	it	ne
 800d078:	2300      	movne	r3, #0
 800d07a:	eba6 0807 	sub.w	r8, r6, r7
 800d07e:	608b      	str	r3, [r1, #8]
 800d080:	f1b8 0f00 	cmp.w	r8, #0
 800d084:	dde9      	ble.n	800d05a <__sflush_r+0xae>
 800d086:	6a21      	ldr	r1, [r4, #32]
 800d088:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d08a:	4643      	mov	r3, r8
 800d08c:	463a      	mov	r2, r7
 800d08e:	4628      	mov	r0, r5
 800d090:	47b0      	blx	r6
 800d092:	2800      	cmp	r0, #0
 800d094:	dc08      	bgt.n	800d0a8 <__sflush_r+0xfc>
 800d096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d09a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d09e:	81a3      	strh	r3, [r4, #12]
 800d0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a8:	4407      	add	r7, r0
 800d0aa:	eba8 0800 	sub.w	r8, r8, r0
 800d0ae:	e7e7      	b.n	800d080 <__sflush_r+0xd4>
 800d0b0:	20400001 	.word	0x20400001

0800d0b4 <_fflush_r>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	690b      	ldr	r3, [r1, #16]
 800d0b8:	4605      	mov	r5, r0
 800d0ba:	460c      	mov	r4, r1
 800d0bc:	b913      	cbnz	r3, 800d0c4 <_fflush_r+0x10>
 800d0be:	2500      	movs	r5, #0
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	b118      	cbz	r0, 800d0ce <_fflush_r+0x1a>
 800d0c6:	6a03      	ldr	r3, [r0, #32]
 800d0c8:	b90b      	cbnz	r3, 800d0ce <_fflush_r+0x1a>
 800d0ca:	f7fe f9dd 	bl	800b488 <__sinit>
 800d0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0f3      	beq.n	800d0be <_fflush_r+0xa>
 800d0d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0d8:	07d0      	lsls	r0, r2, #31
 800d0da:	d404      	bmi.n	800d0e6 <_fflush_r+0x32>
 800d0dc:	0599      	lsls	r1, r3, #22
 800d0de:	d402      	bmi.n	800d0e6 <_fflush_r+0x32>
 800d0e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0e2:	f7fe fb36 	bl	800b752 <__retarget_lock_acquire_recursive>
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	f7ff ff5f 	bl	800cfac <__sflush_r>
 800d0ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0f0:	07da      	lsls	r2, r3, #31
 800d0f2:	4605      	mov	r5, r0
 800d0f4:	d4e4      	bmi.n	800d0c0 <_fflush_r+0xc>
 800d0f6:	89a3      	ldrh	r3, [r4, #12]
 800d0f8:	059b      	lsls	r3, r3, #22
 800d0fa:	d4e1      	bmi.n	800d0c0 <_fflush_r+0xc>
 800d0fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0fe:	f7fe fb29 	bl	800b754 <__retarget_lock_release_recursive>
 800d102:	e7dd      	b.n	800d0c0 <_fflush_r+0xc>

0800d104 <memmove>:
 800d104:	4288      	cmp	r0, r1
 800d106:	b510      	push	{r4, lr}
 800d108:	eb01 0402 	add.w	r4, r1, r2
 800d10c:	d902      	bls.n	800d114 <memmove+0x10>
 800d10e:	4284      	cmp	r4, r0
 800d110:	4623      	mov	r3, r4
 800d112:	d807      	bhi.n	800d124 <memmove+0x20>
 800d114:	1e43      	subs	r3, r0, #1
 800d116:	42a1      	cmp	r1, r4
 800d118:	d008      	beq.n	800d12c <memmove+0x28>
 800d11a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d11e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d122:	e7f8      	b.n	800d116 <memmove+0x12>
 800d124:	4402      	add	r2, r0
 800d126:	4601      	mov	r1, r0
 800d128:	428a      	cmp	r2, r1
 800d12a:	d100      	bne.n	800d12e <memmove+0x2a>
 800d12c:	bd10      	pop	{r4, pc}
 800d12e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d136:	e7f7      	b.n	800d128 <memmove+0x24>

0800d138 <_sbrk_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	4d06      	ldr	r5, [pc, #24]	@ (800d154 <_sbrk_r+0x1c>)
 800d13c:	2300      	movs	r3, #0
 800d13e:	4604      	mov	r4, r0
 800d140:	4608      	mov	r0, r1
 800d142:	602b      	str	r3, [r5, #0]
 800d144:	f7f7 ff68 	bl	8005018 <_sbrk>
 800d148:	1c43      	adds	r3, r0, #1
 800d14a:	d102      	bne.n	800d152 <_sbrk_r+0x1a>
 800d14c:	682b      	ldr	r3, [r5, #0]
 800d14e:	b103      	cbz	r3, 800d152 <_sbrk_r+0x1a>
 800d150:	6023      	str	r3, [r4, #0]
 800d152:	bd38      	pop	{r3, r4, r5, pc}
 800d154:	200014a0 	.word	0x200014a0

0800d158 <memcpy>:
 800d158:	440a      	add	r2, r1
 800d15a:	4291      	cmp	r1, r2
 800d15c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d160:	d100      	bne.n	800d164 <memcpy+0xc>
 800d162:	4770      	bx	lr
 800d164:	b510      	push	{r4, lr}
 800d166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d16a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d16e:	4291      	cmp	r1, r2
 800d170:	d1f9      	bne.n	800d166 <memcpy+0xe>
 800d172:	bd10      	pop	{r4, pc}

0800d174 <__assert_func>:
 800d174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d176:	4614      	mov	r4, r2
 800d178:	461a      	mov	r2, r3
 800d17a:	4b09      	ldr	r3, [pc, #36]	@ (800d1a0 <__assert_func+0x2c>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4605      	mov	r5, r0
 800d180:	68d8      	ldr	r0, [r3, #12]
 800d182:	b14c      	cbz	r4, 800d198 <__assert_func+0x24>
 800d184:	4b07      	ldr	r3, [pc, #28]	@ (800d1a4 <__assert_func+0x30>)
 800d186:	9100      	str	r1, [sp, #0]
 800d188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d18c:	4906      	ldr	r1, [pc, #24]	@ (800d1a8 <__assert_func+0x34>)
 800d18e:	462b      	mov	r3, r5
 800d190:	f000 f870 	bl	800d274 <fiprintf>
 800d194:	f000 f880 	bl	800d298 <abort>
 800d198:	4b04      	ldr	r3, [pc, #16]	@ (800d1ac <__assert_func+0x38>)
 800d19a:	461c      	mov	r4, r3
 800d19c:	e7f3      	b.n	800d186 <__assert_func+0x12>
 800d19e:	bf00      	nop
 800d1a0:	20000078 	.word	0x20000078
 800d1a4:	0800f8d9 	.word	0x0800f8d9
 800d1a8:	0800f8e6 	.word	0x0800f8e6
 800d1ac:	0800f914 	.word	0x0800f914

0800d1b0 <_calloc_r>:
 800d1b0:	b570      	push	{r4, r5, r6, lr}
 800d1b2:	fba1 5402 	umull	r5, r4, r1, r2
 800d1b6:	b934      	cbnz	r4, 800d1c6 <_calloc_r+0x16>
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7ff f999 	bl	800c4f0 <_malloc_r>
 800d1be:	4606      	mov	r6, r0
 800d1c0:	b928      	cbnz	r0, 800d1ce <_calloc_r+0x1e>
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	bd70      	pop	{r4, r5, r6, pc}
 800d1c6:	220c      	movs	r2, #12
 800d1c8:	6002      	str	r2, [r0, #0]
 800d1ca:	2600      	movs	r6, #0
 800d1cc:	e7f9      	b.n	800d1c2 <_calloc_r+0x12>
 800d1ce:	462a      	mov	r2, r5
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	f7fe fa31 	bl	800b638 <memset>
 800d1d6:	e7f4      	b.n	800d1c2 <_calloc_r+0x12>

0800d1d8 <__ascii_mbtowc>:
 800d1d8:	b082      	sub	sp, #8
 800d1da:	b901      	cbnz	r1, 800d1de <__ascii_mbtowc+0x6>
 800d1dc:	a901      	add	r1, sp, #4
 800d1de:	b142      	cbz	r2, 800d1f2 <__ascii_mbtowc+0x1a>
 800d1e0:	b14b      	cbz	r3, 800d1f6 <__ascii_mbtowc+0x1e>
 800d1e2:	7813      	ldrb	r3, [r2, #0]
 800d1e4:	600b      	str	r3, [r1, #0]
 800d1e6:	7812      	ldrb	r2, [r2, #0]
 800d1e8:	1e10      	subs	r0, r2, #0
 800d1ea:	bf18      	it	ne
 800d1ec:	2001      	movne	r0, #1
 800d1ee:	b002      	add	sp, #8
 800d1f0:	4770      	bx	lr
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	e7fb      	b.n	800d1ee <__ascii_mbtowc+0x16>
 800d1f6:	f06f 0001 	mvn.w	r0, #1
 800d1fa:	e7f8      	b.n	800d1ee <__ascii_mbtowc+0x16>

0800d1fc <_realloc_r>:
 800d1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d200:	4607      	mov	r7, r0
 800d202:	4614      	mov	r4, r2
 800d204:	460d      	mov	r5, r1
 800d206:	b921      	cbnz	r1, 800d212 <_realloc_r+0x16>
 800d208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d20c:	4611      	mov	r1, r2
 800d20e:	f7ff b96f 	b.w	800c4f0 <_malloc_r>
 800d212:	b92a      	cbnz	r2, 800d220 <_realloc_r+0x24>
 800d214:	f7ff f8f8 	bl	800c408 <_free_r>
 800d218:	4625      	mov	r5, r4
 800d21a:	4628      	mov	r0, r5
 800d21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d220:	f000 f841 	bl	800d2a6 <_malloc_usable_size_r>
 800d224:	4284      	cmp	r4, r0
 800d226:	4606      	mov	r6, r0
 800d228:	d802      	bhi.n	800d230 <_realloc_r+0x34>
 800d22a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d22e:	d8f4      	bhi.n	800d21a <_realloc_r+0x1e>
 800d230:	4621      	mov	r1, r4
 800d232:	4638      	mov	r0, r7
 800d234:	f7ff f95c 	bl	800c4f0 <_malloc_r>
 800d238:	4680      	mov	r8, r0
 800d23a:	b908      	cbnz	r0, 800d240 <_realloc_r+0x44>
 800d23c:	4645      	mov	r5, r8
 800d23e:	e7ec      	b.n	800d21a <_realloc_r+0x1e>
 800d240:	42b4      	cmp	r4, r6
 800d242:	4622      	mov	r2, r4
 800d244:	4629      	mov	r1, r5
 800d246:	bf28      	it	cs
 800d248:	4632      	movcs	r2, r6
 800d24a:	f7ff ff85 	bl	800d158 <memcpy>
 800d24e:	4629      	mov	r1, r5
 800d250:	4638      	mov	r0, r7
 800d252:	f7ff f8d9 	bl	800c408 <_free_r>
 800d256:	e7f1      	b.n	800d23c <_realloc_r+0x40>

0800d258 <__ascii_wctomb>:
 800d258:	4603      	mov	r3, r0
 800d25a:	4608      	mov	r0, r1
 800d25c:	b141      	cbz	r1, 800d270 <__ascii_wctomb+0x18>
 800d25e:	2aff      	cmp	r2, #255	@ 0xff
 800d260:	d904      	bls.n	800d26c <__ascii_wctomb+0x14>
 800d262:	228a      	movs	r2, #138	@ 0x8a
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	f04f 30ff 	mov.w	r0, #4294967295
 800d26a:	4770      	bx	lr
 800d26c:	700a      	strb	r2, [r1, #0]
 800d26e:	2001      	movs	r0, #1
 800d270:	4770      	bx	lr
	...

0800d274 <fiprintf>:
 800d274:	b40e      	push	{r1, r2, r3}
 800d276:	b503      	push	{r0, r1, lr}
 800d278:	4601      	mov	r1, r0
 800d27a:	ab03      	add	r3, sp, #12
 800d27c:	4805      	ldr	r0, [pc, #20]	@ (800d294 <fiprintf+0x20>)
 800d27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d282:	6800      	ldr	r0, [r0, #0]
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	f000 f83f 	bl	800d308 <_vfiprintf_r>
 800d28a:	b002      	add	sp, #8
 800d28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d290:	b003      	add	sp, #12
 800d292:	4770      	bx	lr
 800d294:	20000078 	.word	0x20000078

0800d298 <abort>:
 800d298:	b508      	push	{r3, lr}
 800d29a:	2006      	movs	r0, #6
 800d29c:	f000 fa08 	bl	800d6b0 <raise>
 800d2a0:	2001      	movs	r0, #1
 800d2a2:	f7f7 fe41 	bl	8004f28 <_exit>

0800d2a6 <_malloc_usable_size_r>:
 800d2a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2aa:	1f18      	subs	r0, r3, #4
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	bfbc      	itt	lt
 800d2b0:	580b      	ldrlt	r3, [r1, r0]
 800d2b2:	18c0      	addlt	r0, r0, r3
 800d2b4:	4770      	bx	lr

0800d2b6 <__sfputc_r>:
 800d2b6:	6893      	ldr	r3, [r2, #8]
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	b410      	push	{r4}
 800d2be:	6093      	str	r3, [r2, #8]
 800d2c0:	da08      	bge.n	800d2d4 <__sfputc_r+0x1e>
 800d2c2:	6994      	ldr	r4, [r2, #24]
 800d2c4:	42a3      	cmp	r3, r4
 800d2c6:	db01      	blt.n	800d2cc <__sfputc_r+0x16>
 800d2c8:	290a      	cmp	r1, #10
 800d2ca:	d103      	bne.n	800d2d4 <__sfputc_r+0x1e>
 800d2cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2d0:	f000 b932 	b.w	800d538 <__swbuf_r>
 800d2d4:	6813      	ldr	r3, [r2, #0]
 800d2d6:	1c58      	adds	r0, r3, #1
 800d2d8:	6010      	str	r0, [r2, #0]
 800d2da:	7019      	strb	r1, [r3, #0]
 800d2dc:	4608      	mov	r0, r1
 800d2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <__sfputs_r>:
 800d2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	460f      	mov	r7, r1
 800d2ea:	4614      	mov	r4, r2
 800d2ec:	18d5      	adds	r5, r2, r3
 800d2ee:	42ac      	cmp	r4, r5
 800d2f0:	d101      	bne.n	800d2f6 <__sfputs_r+0x12>
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	e007      	b.n	800d306 <__sfputs_r+0x22>
 800d2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2fa:	463a      	mov	r2, r7
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	f7ff ffda 	bl	800d2b6 <__sfputc_r>
 800d302:	1c43      	adds	r3, r0, #1
 800d304:	d1f3      	bne.n	800d2ee <__sfputs_r+0xa>
 800d306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d308 <_vfiprintf_r>:
 800d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30c:	460d      	mov	r5, r1
 800d30e:	b09d      	sub	sp, #116	@ 0x74
 800d310:	4614      	mov	r4, r2
 800d312:	4698      	mov	r8, r3
 800d314:	4606      	mov	r6, r0
 800d316:	b118      	cbz	r0, 800d320 <_vfiprintf_r+0x18>
 800d318:	6a03      	ldr	r3, [r0, #32]
 800d31a:	b90b      	cbnz	r3, 800d320 <_vfiprintf_r+0x18>
 800d31c:	f7fe f8b4 	bl	800b488 <__sinit>
 800d320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d322:	07d9      	lsls	r1, r3, #31
 800d324:	d405      	bmi.n	800d332 <_vfiprintf_r+0x2a>
 800d326:	89ab      	ldrh	r3, [r5, #12]
 800d328:	059a      	lsls	r2, r3, #22
 800d32a:	d402      	bmi.n	800d332 <_vfiprintf_r+0x2a>
 800d32c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d32e:	f7fe fa10 	bl	800b752 <__retarget_lock_acquire_recursive>
 800d332:	89ab      	ldrh	r3, [r5, #12]
 800d334:	071b      	lsls	r3, r3, #28
 800d336:	d501      	bpl.n	800d33c <_vfiprintf_r+0x34>
 800d338:	692b      	ldr	r3, [r5, #16]
 800d33a:	b99b      	cbnz	r3, 800d364 <_vfiprintf_r+0x5c>
 800d33c:	4629      	mov	r1, r5
 800d33e:	4630      	mov	r0, r6
 800d340:	f000 f938 	bl	800d5b4 <__swsetup_r>
 800d344:	b170      	cbz	r0, 800d364 <_vfiprintf_r+0x5c>
 800d346:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d348:	07dc      	lsls	r4, r3, #31
 800d34a:	d504      	bpl.n	800d356 <_vfiprintf_r+0x4e>
 800d34c:	f04f 30ff 	mov.w	r0, #4294967295
 800d350:	b01d      	add	sp, #116	@ 0x74
 800d352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d356:	89ab      	ldrh	r3, [r5, #12]
 800d358:	0598      	lsls	r0, r3, #22
 800d35a:	d4f7      	bmi.n	800d34c <_vfiprintf_r+0x44>
 800d35c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d35e:	f7fe f9f9 	bl	800b754 <__retarget_lock_release_recursive>
 800d362:	e7f3      	b.n	800d34c <_vfiprintf_r+0x44>
 800d364:	2300      	movs	r3, #0
 800d366:	9309      	str	r3, [sp, #36]	@ 0x24
 800d368:	2320      	movs	r3, #32
 800d36a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d36e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d372:	2330      	movs	r3, #48	@ 0x30
 800d374:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d524 <_vfiprintf_r+0x21c>
 800d378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d37c:	f04f 0901 	mov.w	r9, #1
 800d380:	4623      	mov	r3, r4
 800d382:	469a      	mov	sl, r3
 800d384:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d388:	b10a      	cbz	r2, 800d38e <_vfiprintf_r+0x86>
 800d38a:	2a25      	cmp	r2, #37	@ 0x25
 800d38c:	d1f9      	bne.n	800d382 <_vfiprintf_r+0x7a>
 800d38e:	ebba 0b04 	subs.w	fp, sl, r4
 800d392:	d00b      	beq.n	800d3ac <_vfiprintf_r+0xa4>
 800d394:	465b      	mov	r3, fp
 800d396:	4622      	mov	r2, r4
 800d398:	4629      	mov	r1, r5
 800d39a:	4630      	mov	r0, r6
 800d39c:	f7ff ffa2 	bl	800d2e4 <__sfputs_r>
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	f000 80a7 	beq.w	800d4f4 <_vfiprintf_r+0x1ec>
 800d3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3a8:	445a      	add	r2, fp
 800d3aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f000 809f 	beq.w	800d4f4 <_vfiprintf_r+0x1ec>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d3bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3c0:	f10a 0a01 	add.w	sl, sl, #1
 800d3c4:	9304      	str	r3, [sp, #16]
 800d3c6:	9307      	str	r3, [sp, #28]
 800d3c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3ce:	4654      	mov	r4, sl
 800d3d0:	2205      	movs	r2, #5
 800d3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3d6:	4853      	ldr	r0, [pc, #332]	@ (800d524 <_vfiprintf_r+0x21c>)
 800d3d8:	f7f2 ff02 	bl	80001e0 <memchr>
 800d3dc:	9a04      	ldr	r2, [sp, #16]
 800d3de:	b9d8      	cbnz	r0, 800d418 <_vfiprintf_r+0x110>
 800d3e0:	06d1      	lsls	r1, r2, #27
 800d3e2:	bf44      	itt	mi
 800d3e4:	2320      	movmi	r3, #32
 800d3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3ea:	0713      	lsls	r3, r2, #28
 800d3ec:	bf44      	itt	mi
 800d3ee:	232b      	movmi	r3, #43	@ 0x2b
 800d3f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3fa:	d015      	beq.n	800d428 <_vfiprintf_r+0x120>
 800d3fc:	9a07      	ldr	r2, [sp, #28]
 800d3fe:	4654      	mov	r4, sl
 800d400:	2000      	movs	r0, #0
 800d402:	f04f 0c0a 	mov.w	ip, #10
 800d406:	4621      	mov	r1, r4
 800d408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d40c:	3b30      	subs	r3, #48	@ 0x30
 800d40e:	2b09      	cmp	r3, #9
 800d410:	d94b      	bls.n	800d4aa <_vfiprintf_r+0x1a2>
 800d412:	b1b0      	cbz	r0, 800d442 <_vfiprintf_r+0x13a>
 800d414:	9207      	str	r2, [sp, #28]
 800d416:	e014      	b.n	800d442 <_vfiprintf_r+0x13a>
 800d418:	eba0 0308 	sub.w	r3, r0, r8
 800d41c:	fa09 f303 	lsl.w	r3, r9, r3
 800d420:	4313      	orrs	r3, r2
 800d422:	9304      	str	r3, [sp, #16]
 800d424:	46a2      	mov	sl, r4
 800d426:	e7d2      	b.n	800d3ce <_vfiprintf_r+0xc6>
 800d428:	9b03      	ldr	r3, [sp, #12]
 800d42a:	1d19      	adds	r1, r3, #4
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	9103      	str	r1, [sp, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	bfbb      	ittet	lt
 800d434:	425b      	neglt	r3, r3
 800d436:	f042 0202 	orrlt.w	r2, r2, #2
 800d43a:	9307      	strge	r3, [sp, #28]
 800d43c:	9307      	strlt	r3, [sp, #28]
 800d43e:	bfb8      	it	lt
 800d440:	9204      	strlt	r2, [sp, #16]
 800d442:	7823      	ldrb	r3, [r4, #0]
 800d444:	2b2e      	cmp	r3, #46	@ 0x2e
 800d446:	d10a      	bne.n	800d45e <_vfiprintf_r+0x156>
 800d448:	7863      	ldrb	r3, [r4, #1]
 800d44a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d44c:	d132      	bne.n	800d4b4 <_vfiprintf_r+0x1ac>
 800d44e:	9b03      	ldr	r3, [sp, #12]
 800d450:	1d1a      	adds	r2, r3, #4
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	9203      	str	r2, [sp, #12]
 800d456:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d45a:	3402      	adds	r4, #2
 800d45c:	9305      	str	r3, [sp, #20]
 800d45e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d534 <_vfiprintf_r+0x22c>
 800d462:	7821      	ldrb	r1, [r4, #0]
 800d464:	2203      	movs	r2, #3
 800d466:	4650      	mov	r0, sl
 800d468:	f7f2 feba 	bl	80001e0 <memchr>
 800d46c:	b138      	cbz	r0, 800d47e <_vfiprintf_r+0x176>
 800d46e:	9b04      	ldr	r3, [sp, #16]
 800d470:	eba0 000a 	sub.w	r0, r0, sl
 800d474:	2240      	movs	r2, #64	@ 0x40
 800d476:	4082      	lsls	r2, r0
 800d478:	4313      	orrs	r3, r2
 800d47a:	3401      	adds	r4, #1
 800d47c:	9304      	str	r3, [sp, #16]
 800d47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d482:	4829      	ldr	r0, [pc, #164]	@ (800d528 <_vfiprintf_r+0x220>)
 800d484:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d488:	2206      	movs	r2, #6
 800d48a:	f7f2 fea9 	bl	80001e0 <memchr>
 800d48e:	2800      	cmp	r0, #0
 800d490:	d03f      	beq.n	800d512 <_vfiprintf_r+0x20a>
 800d492:	4b26      	ldr	r3, [pc, #152]	@ (800d52c <_vfiprintf_r+0x224>)
 800d494:	bb1b      	cbnz	r3, 800d4de <_vfiprintf_r+0x1d6>
 800d496:	9b03      	ldr	r3, [sp, #12]
 800d498:	3307      	adds	r3, #7
 800d49a:	f023 0307 	bic.w	r3, r3, #7
 800d49e:	3308      	adds	r3, #8
 800d4a0:	9303      	str	r3, [sp, #12]
 800d4a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4a4:	443b      	add	r3, r7
 800d4a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4a8:	e76a      	b.n	800d380 <_vfiprintf_r+0x78>
 800d4aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	2001      	movs	r0, #1
 800d4b2:	e7a8      	b.n	800d406 <_vfiprintf_r+0xfe>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	3401      	adds	r4, #1
 800d4b8:	9305      	str	r3, [sp, #20]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	f04f 0c0a 	mov.w	ip, #10
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c6:	3a30      	subs	r2, #48	@ 0x30
 800d4c8:	2a09      	cmp	r2, #9
 800d4ca:	d903      	bls.n	800d4d4 <_vfiprintf_r+0x1cc>
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d0c6      	beq.n	800d45e <_vfiprintf_r+0x156>
 800d4d0:	9105      	str	r1, [sp, #20]
 800d4d2:	e7c4      	b.n	800d45e <_vfiprintf_r+0x156>
 800d4d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4d8:	4604      	mov	r4, r0
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e7f0      	b.n	800d4c0 <_vfiprintf_r+0x1b8>
 800d4de:	ab03      	add	r3, sp, #12
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	462a      	mov	r2, r5
 800d4e4:	4b12      	ldr	r3, [pc, #72]	@ (800d530 <_vfiprintf_r+0x228>)
 800d4e6:	a904      	add	r1, sp, #16
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f7fd fb8b 	bl	800ac04 <_printf_float>
 800d4ee:	4607      	mov	r7, r0
 800d4f0:	1c78      	adds	r0, r7, #1
 800d4f2:	d1d6      	bne.n	800d4a2 <_vfiprintf_r+0x19a>
 800d4f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4f6:	07d9      	lsls	r1, r3, #31
 800d4f8:	d405      	bmi.n	800d506 <_vfiprintf_r+0x1fe>
 800d4fa:	89ab      	ldrh	r3, [r5, #12]
 800d4fc:	059a      	lsls	r2, r3, #22
 800d4fe:	d402      	bmi.n	800d506 <_vfiprintf_r+0x1fe>
 800d500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d502:	f7fe f927 	bl	800b754 <__retarget_lock_release_recursive>
 800d506:	89ab      	ldrh	r3, [r5, #12]
 800d508:	065b      	lsls	r3, r3, #25
 800d50a:	f53f af1f 	bmi.w	800d34c <_vfiprintf_r+0x44>
 800d50e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d510:	e71e      	b.n	800d350 <_vfiprintf_r+0x48>
 800d512:	ab03      	add	r3, sp, #12
 800d514:	9300      	str	r3, [sp, #0]
 800d516:	462a      	mov	r2, r5
 800d518:	4b05      	ldr	r3, [pc, #20]	@ (800d530 <_vfiprintf_r+0x228>)
 800d51a:	a904      	add	r1, sp, #16
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7fd fe09 	bl	800b134 <_printf_i>
 800d522:	e7e4      	b.n	800d4ee <_vfiprintf_r+0x1e6>
 800d524:	0800f8be 	.word	0x0800f8be
 800d528:	0800f8c8 	.word	0x0800f8c8
 800d52c:	0800ac05 	.word	0x0800ac05
 800d530:	0800d2e5 	.word	0x0800d2e5
 800d534:	0800f8c4 	.word	0x0800f8c4

0800d538 <__swbuf_r>:
 800d538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53a:	460e      	mov	r6, r1
 800d53c:	4614      	mov	r4, r2
 800d53e:	4605      	mov	r5, r0
 800d540:	b118      	cbz	r0, 800d54a <__swbuf_r+0x12>
 800d542:	6a03      	ldr	r3, [r0, #32]
 800d544:	b90b      	cbnz	r3, 800d54a <__swbuf_r+0x12>
 800d546:	f7fd ff9f 	bl	800b488 <__sinit>
 800d54a:	69a3      	ldr	r3, [r4, #24]
 800d54c:	60a3      	str	r3, [r4, #8]
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	071a      	lsls	r2, r3, #28
 800d552:	d501      	bpl.n	800d558 <__swbuf_r+0x20>
 800d554:	6923      	ldr	r3, [r4, #16]
 800d556:	b943      	cbnz	r3, 800d56a <__swbuf_r+0x32>
 800d558:	4621      	mov	r1, r4
 800d55a:	4628      	mov	r0, r5
 800d55c:	f000 f82a 	bl	800d5b4 <__swsetup_r>
 800d560:	b118      	cbz	r0, 800d56a <__swbuf_r+0x32>
 800d562:	f04f 37ff 	mov.w	r7, #4294967295
 800d566:	4638      	mov	r0, r7
 800d568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d56a:	6823      	ldr	r3, [r4, #0]
 800d56c:	6922      	ldr	r2, [r4, #16]
 800d56e:	1a98      	subs	r0, r3, r2
 800d570:	6963      	ldr	r3, [r4, #20]
 800d572:	b2f6      	uxtb	r6, r6
 800d574:	4283      	cmp	r3, r0
 800d576:	4637      	mov	r7, r6
 800d578:	dc05      	bgt.n	800d586 <__swbuf_r+0x4e>
 800d57a:	4621      	mov	r1, r4
 800d57c:	4628      	mov	r0, r5
 800d57e:	f7ff fd99 	bl	800d0b4 <_fflush_r>
 800d582:	2800      	cmp	r0, #0
 800d584:	d1ed      	bne.n	800d562 <__swbuf_r+0x2a>
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	3b01      	subs	r3, #1
 800d58a:	60a3      	str	r3, [r4, #8]
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	6022      	str	r2, [r4, #0]
 800d592:	701e      	strb	r6, [r3, #0]
 800d594:	6962      	ldr	r2, [r4, #20]
 800d596:	1c43      	adds	r3, r0, #1
 800d598:	429a      	cmp	r2, r3
 800d59a:	d004      	beq.n	800d5a6 <__swbuf_r+0x6e>
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	07db      	lsls	r3, r3, #31
 800d5a0:	d5e1      	bpl.n	800d566 <__swbuf_r+0x2e>
 800d5a2:	2e0a      	cmp	r6, #10
 800d5a4:	d1df      	bne.n	800d566 <__swbuf_r+0x2e>
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f7ff fd83 	bl	800d0b4 <_fflush_r>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d0d9      	beq.n	800d566 <__swbuf_r+0x2e>
 800d5b2:	e7d6      	b.n	800d562 <__swbuf_r+0x2a>

0800d5b4 <__swsetup_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4b29      	ldr	r3, [pc, #164]	@ (800d65c <__swsetup_r+0xa8>)
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	6818      	ldr	r0, [r3, #0]
 800d5bc:	460c      	mov	r4, r1
 800d5be:	b118      	cbz	r0, 800d5c8 <__swsetup_r+0x14>
 800d5c0:	6a03      	ldr	r3, [r0, #32]
 800d5c2:	b90b      	cbnz	r3, 800d5c8 <__swsetup_r+0x14>
 800d5c4:	f7fd ff60 	bl	800b488 <__sinit>
 800d5c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5cc:	0719      	lsls	r1, r3, #28
 800d5ce:	d422      	bmi.n	800d616 <__swsetup_r+0x62>
 800d5d0:	06da      	lsls	r2, r3, #27
 800d5d2:	d407      	bmi.n	800d5e4 <__swsetup_r+0x30>
 800d5d4:	2209      	movs	r2, #9
 800d5d6:	602a      	str	r2, [r5, #0]
 800d5d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5dc:	81a3      	strh	r3, [r4, #12]
 800d5de:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e2:	e033      	b.n	800d64c <__swsetup_r+0x98>
 800d5e4:	0758      	lsls	r0, r3, #29
 800d5e6:	d512      	bpl.n	800d60e <__swsetup_r+0x5a>
 800d5e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5ea:	b141      	cbz	r1, 800d5fe <__swsetup_r+0x4a>
 800d5ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5f0:	4299      	cmp	r1, r3
 800d5f2:	d002      	beq.n	800d5fa <__swsetup_r+0x46>
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	f7fe ff07 	bl	800c408 <_free_r>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5fe:	89a3      	ldrh	r3, [r4, #12]
 800d600:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d604:	81a3      	strh	r3, [r4, #12]
 800d606:	2300      	movs	r3, #0
 800d608:	6063      	str	r3, [r4, #4]
 800d60a:	6923      	ldr	r3, [r4, #16]
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	f043 0308 	orr.w	r3, r3, #8
 800d614:	81a3      	strh	r3, [r4, #12]
 800d616:	6923      	ldr	r3, [r4, #16]
 800d618:	b94b      	cbnz	r3, 800d62e <__swsetup_r+0x7a>
 800d61a:	89a3      	ldrh	r3, [r4, #12]
 800d61c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d624:	d003      	beq.n	800d62e <__swsetup_r+0x7a>
 800d626:	4621      	mov	r1, r4
 800d628:	4628      	mov	r0, r5
 800d62a:	f000 f883 	bl	800d734 <__smakebuf_r>
 800d62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d632:	f013 0201 	ands.w	r2, r3, #1
 800d636:	d00a      	beq.n	800d64e <__swsetup_r+0x9a>
 800d638:	2200      	movs	r2, #0
 800d63a:	60a2      	str	r2, [r4, #8]
 800d63c:	6962      	ldr	r2, [r4, #20]
 800d63e:	4252      	negs	r2, r2
 800d640:	61a2      	str	r2, [r4, #24]
 800d642:	6922      	ldr	r2, [r4, #16]
 800d644:	b942      	cbnz	r2, 800d658 <__swsetup_r+0xa4>
 800d646:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d64a:	d1c5      	bne.n	800d5d8 <__swsetup_r+0x24>
 800d64c:	bd38      	pop	{r3, r4, r5, pc}
 800d64e:	0799      	lsls	r1, r3, #30
 800d650:	bf58      	it	pl
 800d652:	6962      	ldrpl	r2, [r4, #20]
 800d654:	60a2      	str	r2, [r4, #8]
 800d656:	e7f4      	b.n	800d642 <__swsetup_r+0x8e>
 800d658:	2000      	movs	r0, #0
 800d65a:	e7f7      	b.n	800d64c <__swsetup_r+0x98>
 800d65c:	20000078 	.word	0x20000078

0800d660 <_raise_r>:
 800d660:	291f      	cmp	r1, #31
 800d662:	b538      	push	{r3, r4, r5, lr}
 800d664:	4605      	mov	r5, r0
 800d666:	460c      	mov	r4, r1
 800d668:	d904      	bls.n	800d674 <_raise_r+0x14>
 800d66a:	2316      	movs	r3, #22
 800d66c:	6003      	str	r3, [r0, #0]
 800d66e:	f04f 30ff 	mov.w	r0, #4294967295
 800d672:	bd38      	pop	{r3, r4, r5, pc}
 800d674:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d676:	b112      	cbz	r2, 800d67e <_raise_r+0x1e>
 800d678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d67c:	b94b      	cbnz	r3, 800d692 <_raise_r+0x32>
 800d67e:	4628      	mov	r0, r5
 800d680:	f000 f830 	bl	800d6e4 <_getpid_r>
 800d684:	4622      	mov	r2, r4
 800d686:	4601      	mov	r1, r0
 800d688:	4628      	mov	r0, r5
 800d68a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d68e:	f000 b817 	b.w	800d6c0 <_kill_r>
 800d692:	2b01      	cmp	r3, #1
 800d694:	d00a      	beq.n	800d6ac <_raise_r+0x4c>
 800d696:	1c59      	adds	r1, r3, #1
 800d698:	d103      	bne.n	800d6a2 <_raise_r+0x42>
 800d69a:	2316      	movs	r3, #22
 800d69c:	6003      	str	r3, [r0, #0]
 800d69e:	2001      	movs	r0, #1
 800d6a0:	e7e7      	b.n	800d672 <_raise_r+0x12>
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	4798      	blx	r3
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	e7e0      	b.n	800d672 <_raise_r+0x12>

0800d6b0 <raise>:
 800d6b0:	4b02      	ldr	r3, [pc, #8]	@ (800d6bc <raise+0xc>)
 800d6b2:	4601      	mov	r1, r0
 800d6b4:	6818      	ldr	r0, [r3, #0]
 800d6b6:	f7ff bfd3 	b.w	800d660 <_raise_r>
 800d6ba:	bf00      	nop
 800d6bc:	20000078 	.word	0x20000078

0800d6c0 <_kill_r>:
 800d6c0:	b538      	push	{r3, r4, r5, lr}
 800d6c2:	4d07      	ldr	r5, [pc, #28]	@ (800d6e0 <_kill_r+0x20>)
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	4608      	mov	r0, r1
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	602b      	str	r3, [r5, #0]
 800d6ce:	f7f7 fc1b 	bl	8004f08 <_kill>
 800d6d2:	1c43      	adds	r3, r0, #1
 800d6d4:	d102      	bne.n	800d6dc <_kill_r+0x1c>
 800d6d6:	682b      	ldr	r3, [r5, #0]
 800d6d8:	b103      	cbz	r3, 800d6dc <_kill_r+0x1c>
 800d6da:	6023      	str	r3, [r4, #0]
 800d6dc:	bd38      	pop	{r3, r4, r5, pc}
 800d6de:	bf00      	nop
 800d6e0:	200014a0 	.word	0x200014a0

0800d6e4 <_getpid_r>:
 800d6e4:	f7f7 bc08 	b.w	8004ef8 <_getpid>

0800d6e8 <__swhatbuf_r>:
 800d6e8:	b570      	push	{r4, r5, r6, lr}
 800d6ea:	460c      	mov	r4, r1
 800d6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6f0:	2900      	cmp	r1, #0
 800d6f2:	b096      	sub	sp, #88	@ 0x58
 800d6f4:	4615      	mov	r5, r2
 800d6f6:	461e      	mov	r6, r3
 800d6f8:	da0d      	bge.n	800d716 <__swhatbuf_r+0x2e>
 800d6fa:	89a3      	ldrh	r3, [r4, #12]
 800d6fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d700:	f04f 0100 	mov.w	r1, #0
 800d704:	bf14      	ite	ne
 800d706:	2340      	movne	r3, #64	@ 0x40
 800d708:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d70c:	2000      	movs	r0, #0
 800d70e:	6031      	str	r1, [r6, #0]
 800d710:	602b      	str	r3, [r5, #0]
 800d712:	b016      	add	sp, #88	@ 0x58
 800d714:	bd70      	pop	{r4, r5, r6, pc}
 800d716:	466a      	mov	r2, sp
 800d718:	f000 f848 	bl	800d7ac <_fstat_r>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	dbec      	blt.n	800d6fa <__swhatbuf_r+0x12>
 800d720:	9901      	ldr	r1, [sp, #4]
 800d722:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d726:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d72a:	4259      	negs	r1, r3
 800d72c:	4159      	adcs	r1, r3
 800d72e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d732:	e7eb      	b.n	800d70c <__swhatbuf_r+0x24>

0800d734 <__smakebuf_r>:
 800d734:	898b      	ldrh	r3, [r1, #12]
 800d736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d738:	079d      	lsls	r5, r3, #30
 800d73a:	4606      	mov	r6, r0
 800d73c:	460c      	mov	r4, r1
 800d73e:	d507      	bpl.n	800d750 <__smakebuf_r+0x1c>
 800d740:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	6123      	str	r3, [r4, #16]
 800d748:	2301      	movs	r3, #1
 800d74a:	6163      	str	r3, [r4, #20]
 800d74c:	b003      	add	sp, #12
 800d74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d750:	ab01      	add	r3, sp, #4
 800d752:	466a      	mov	r2, sp
 800d754:	f7ff ffc8 	bl	800d6e8 <__swhatbuf_r>
 800d758:	9f00      	ldr	r7, [sp, #0]
 800d75a:	4605      	mov	r5, r0
 800d75c:	4639      	mov	r1, r7
 800d75e:	4630      	mov	r0, r6
 800d760:	f7fe fec6 	bl	800c4f0 <_malloc_r>
 800d764:	b948      	cbnz	r0, 800d77a <__smakebuf_r+0x46>
 800d766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d76a:	059a      	lsls	r2, r3, #22
 800d76c:	d4ee      	bmi.n	800d74c <__smakebuf_r+0x18>
 800d76e:	f023 0303 	bic.w	r3, r3, #3
 800d772:	f043 0302 	orr.w	r3, r3, #2
 800d776:	81a3      	strh	r3, [r4, #12]
 800d778:	e7e2      	b.n	800d740 <__smakebuf_r+0xc>
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	6020      	str	r0, [r4, #0]
 800d77e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d782:	81a3      	strh	r3, [r4, #12]
 800d784:	9b01      	ldr	r3, [sp, #4]
 800d786:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d78a:	b15b      	cbz	r3, 800d7a4 <__smakebuf_r+0x70>
 800d78c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d790:	4630      	mov	r0, r6
 800d792:	f000 f81d 	bl	800d7d0 <_isatty_r>
 800d796:	b128      	cbz	r0, 800d7a4 <__smakebuf_r+0x70>
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	f023 0303 	bic.w	r3, r3, #3
 800d79e:	f043 0301 	orr.w	r3, r3, #1
 800d7a2:	81a3      	strh	r3, [r4, #12]
 800d7a4:	89a3      	ldrh	r3, [r4, #12]
 800d7a6:	431d      	orrs	r5, r3
 800d7a8:	81a5      	strh	r5, [r4, #12]
 800d7aa:	e7cf      	b.n	800d74c <__smakebuf_r+0x18>

0800d7ac <_fstat_r>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	4d07      	ldr	r5, [pc, #28]	@ (800d7cc <_fstat_r+0x20>)
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	4608      	mov	r0, r1
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	602b      	str	r3, [r5, #0]
 800d7ba:	f7f7 fc05 	bl	8004fc8 <_fstat>
 800d7be:	1c43      	adds	r3, r0, #1
 800d7c0:	d102      	bne.n	800d7c8 <_fstat_r+0x1c>
 800d7c2:	682b      	ldr	r3, [r5, #0]
 800d7c4:	b103      	cbz	r3, 800d7c8 <_fstat_r+0x1c>
 800d7c6:	6023      	str	r3, [r4, #0]
 800d7c8:	bd38      	pop	{r3, r4, r5, pc}
 800d7ca:	bf00      	nop
 800d7cc:	200014a0 	.word	0x200014a0

0800d7d0 <_isatty_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	4d06      	ldr	r5, [pc, #24]	@ (800d7ec <_isatty_r+0x1c>)
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	4608      	mov	r0, r1
 800d7da:	602b      	str	r3, [r5, #0]
 800d7dc:	f7f7 fc04 	bl	8004fe8 <_isatty>
 800d7e0:	1c43      	adds	r3, r0, #1
 800d7e2:	d102      	bne.n	800d7ea <_isatty_r+0x1a>
 800d7e4:	682b      	ldr	r3, [r5, #0]
 800d7e6:	b103      	cbz	r3, 800d7ea <_isatty_r+0x1a>
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	bd38      	pop	{r3, r4, r5, pc}
 800d7ec:	200014a0 	.word	0x200014a0

0800d7f0 <sqrtf>:
 800d7f0:	b508      	push	{r3, lr}
 800d7f2:	ed2d 8b02 	vpush	{d8}
 800d7f6:	eeb0 8a40 	vmov.f32	s16, s0
 800d7fa:	f000 f87e 	bl	800d8fa <__ieee754_sqrtf>
 800d7fe:	eeb4 8a48 	vcmp.f32	s16, s16
 800d802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d806:	d60c      	bvs.n	800d822 <sqrtf+0x32>
 800d808:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d828 <sqrtf+0x38>
 800d80c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d814:	d505      	bpl.n	800d822 <sqrtf+0x32>
 800d816:	f7fd ff71 	bl	800b6fc <__errno>
 800d81a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d81e:	2321      	movs	r3, #33	@ 0x21
 800d820:	6003      	str	r3, [r0, #0]
 800d822:	ecbd 8b02 	vpop	{d8}
 800d826:	bd08      	pop	{r3, pc}
 800d828:	00000000 	.word	0x00000000

0800d82c <fmaxf>:
 800d82c:	b508      	push	{r3, lr}
 800d82e:	ed2d 8b02 	vpush	{d8}
 800d832:	eeb0 8a40 	vmov.f32	s16, s0
 800d836:	eef0 8a60 	vmov.f32	s17, s1
 800d83a:	f000 f815 	bl	800d868 <__fpclassifyf>
 800d83e:	b930      	cbnz	r0, 800d84e <fmaxf+0x22>
 800d840:	eeb0 8a68 	vmov.f32	s16, s17
 800d844:	eeb0 0a48 	vmov.f32	s0, s16
 800d848:	ecbd 8b02 	vpop	{d8}
 800d84c:	bd08      	pop	{r3, pc}
 800d84e:	eeb0 0a68 	vmov.f32	s0, s17
 800d852:	f000 f809 	bl	800d868 <__fpclassifyf>
 800d856:	2800      	cmp	r0, #0
 800d858:	d0f4      	beq.n	800d844 <fmaxf+0x18>
 800d85a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d862:	dded      	ble.n	800d840 <fmaxf+0x14>
 800d864:	e7ee      	b.n	800d844 <fmaxf+0x18>
	...

0800d868 <__fpclassifyf>:
 800d868:	ee10 3a10 	vmov	r3, s0
 800d86c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800d870:	d00d      	beq.n	800d88e <__fpclassifyf+0x26>
 800d872:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800d876:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800d87a:	d30a      	bcc.n	800d892 <__fpclassifyf+0x2a>
 800d87c:	4b07      	ldr	r3, [pc, #28]	@ (800d89c <__fpclassifyf+0x34>)
 800d87e:	1e42      	subs	r2, r0, #1
 800d880:	429a      	cmp	r2, r3
 800d882:	d908      	bls.n	800d896 <__fpclassifyf+0x2e>
 800d884:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800d888:	4258      	negs	r0, r3
 800d88a:	4158      	adcs	r0, r3
 800d88c:	4770      	bx	lr
 800d88e:	2002      	movs	r0, #2
 800d890:	4770      	bx	lr
 800d892:	2004      	movs	r0, #4
 800d894:	4770      	bx	lr
 800d896:	2003      	movs	r0, #3
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	007ffffe 	.word	0x007ffffe

0800d8a0 <lroundf>:
 800d8a0:	ee10 1a10 	vmov	r1, s0
 800d8a4:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800d8a8:	2900      	cmp	r1, #0
 800d8aa:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 800d8ae:	bfac      	ite	ge
 800d8b0:	2001      	movge	r0, #1
 800d8b2:	f04f 30ff 	movlt.w	r0, #4294967295
 800d8b6:	2a1e      	cmp	r2, #30
 800d8b8:	dc1a      	bgt.n	800d8f0 <lroundf+0x50>
 800d8ba:	2a00      	cmp	r2, #0
 800d8bc:	da03      	bge.n	800d8c6 <lroundf+0x26>
 800d8be:	3201      	adds	r2, #1
 800d8c0:	bf18      	it	ne
 800d8c2:	2000      	movne	r0, #0
 800d8c4:	4770      	bx	lr
 800d8c6:	2a16      	cmp	r2, #22
 800d8c8:	bfd8      	it	le
 800d8ca:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 800d8ce:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800d8d2:	bfd8      	it	le
 800d8d4:	4113      	asrle	r3, r2
 800d8d6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800d8da:	bfcd      	iteet	gt
 800d8dc:	3b96      	subgt	r3, #150	@ 0x96
 800d8de:	185b      	addle	r3, r3, r1
 800d8e0:	f1c2 0217 	rsble	r2, r2, #23
 800d8e4:	fa01 f303 	lslgt.w	r3, r1, r3
 800d8e8:	bfd8      	it	le
 800d8ea:	40d3      	lsrle	r3, r2
 800d8ec:	4358      	muls	r0, r3
 800d8ee:	4770      	bx	lr
 800d8f0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d8f4:	ee17 0a90 	vmov	r0, s15
 800d8f8:	4770      	bx	lr

0800d8fa <__ieee754_sqrtf>:
 800d8fa:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d8fe:	4770      	bx	lr

0800d900 <roundf>:
 800d900:	ee10 0a10 	vmov	r0, s0
 800d904:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d908:	3a7f      	subs	r2, #127	@ 0x7f
 800d90a:	2a16      	cmp	r2, #22
 800d90c:	dc15      	bgt.n	800d93a <roundf+0x3a>
 800d90e:	2a00      	cmp	r2, #0
 800d910:	da08      	bge.n	800d924 <roundf+0x24>
 800d912:	3201      	adds	r2, #1
 800d914:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800d918:	d101      	bne.n	800d91e <roundf+0x1e>
 800d91a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800d91e:	ee00 3a10 	vmov	s0, r3
 800d922:	4770      	bx	lr
 800d924:	4907      	ldr	r1, [pc, #28]	@ (800d944 <roundf+0x44>)
 800d926:	4111      	asrs	r1, r2
 800d928:	4201      	tst	r1, r0
 800d92a:	d0fa      	beq.n	800d922 <roundf+0x22>
 800d92c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d930:	4113      	asrs	r3, r2
 800d932:	4403      	add	r3, r0
 800d934:	ea23 0301 	bic.w	r3, r3, r1
 800d938:	e7f1      	b.n	800d91e <roundf+0x1e>
 800d93a:	2a80      	cmp	r2, #128	@ 0x80
 800d93c:	d1f1      	bne.n	800d922 <roundf+0x22>
 800d93e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d942:	4770      	bx	lr
 800d944:	007fffff 	.word	0x007fffff

0800d948 <_init>:
 800d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94a:	bf00      	nop
 800d94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94e:	bc08      	pop	{r3}
 800d950:	469e      	mov	lr, r3
 800d952:	4770      	bx	lr

0800d954 <_fini>:
 800d954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d956:	bf00      	nop
 800d958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95a:	bc08      	pop	{r3}
 800d95c:	469e      	mov	lr, r3
 800d95e:	4770      	bx	lr
