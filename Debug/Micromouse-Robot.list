
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d948  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021bc  0800dae8  0800dae8  0000eae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fca4  0800fca4  00011234  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fca4  0800fca4  00010ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcac  0800fcac  00011234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcac  0800fcac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fcb0  0800fcb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0800fcb4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001278  20000234  0800fee8  00011234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014ac  0800fee8  000114ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e29  00000000  00000000  00011264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399f  00000000  00000000  0002908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  0002ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103b  00000000  00000000  0002dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aab0  00000000  00000000  0002ef23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001999b  00000000  00000000  000499d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a08f1  00000000  00000000  0006336e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103c5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006924  00000000  00000000  00103ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0010a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000234 	.word	0x20000234
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dad0 	.word	0x0800dad0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000238 	.word	0x20000238
 80001dc:	0800dad0 	.word	0x0800dad0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	80fb      	strh	r3, [r7, #6]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d106      	bne.n	8000fa8 <play_tone+0x24>
        speaker_off();
 8000f9a:	f000 f837 	bl	800100c <speaker_off>
        HAL_Delay(duration_ms);
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f005 fb43 	bl	800662c <HAL_Delay>
        return;
 8000fa6:	e02a      	b.n	8000ffe <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4a16      	ldr	r2, [pc, #88]	@ (8001004 <play_tone+0x80>)
 8000fac:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fb0:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb8:	d302      	bcc.n	8000fc0 <play_tone+0x3c>
 8000fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fbe:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b13      	cmp	r3, #19
 8000fc4:	d801      	bhi.n	8000fca <play_tone+0x46>
 8000fc6:	2314      	movs	r3, #20
 8000fc8:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <play_tone+0x84>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	3a01      	subs	r2, #1
 8000fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <play_tone+0x84>)
 8000fda:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <play_tone+0x84>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	0852      	lsrs	r2, r2, #1
 8000fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4807      	ldr	r0, [pc, #28]	@ (8001008 <play_tone+0x84>)
 8000fea:	f007 fd7b 	bl	8008ae4 <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f005 fb1b 	bl	800662c <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <play_tone+0x84>)
 8000ffa:	f007 fe23 	bl	8008c44 <HAL_TIM_PWM_Stop>
}
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	003d0900 	.word	0x003d0900
 8001008:	20000300 	.word	0x20000300

0800100c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001010:	2108      	movs	r1, #8
 8001012:	4802      	ldr	r0, [pc, #8]	@ (800101c <speaker_off+0x10>)
 8001014:	f007 fe16 	bl	8008c44 <HAL_TIM_PWM_Stop>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000300 	.word	0x20000300

08001020 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8001024:	21c8      	movs	r1, #200	@ 0xc8
 8001026:	f240 200b 	movw	r0, #523	@ 0x20b
 800102a:	f7ff ffab 	bl	8000f84 <play_tone>
    play_tone(0, 50);     // Pause
 800102e:	2132      	movs	r1, #50	@ 0x32
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff ffa7 	bl	8000f84 <play_tone>
    play_tone(659, 200);  // E5
 8001036:	21c8      	movs	r1, #200	@ 0xc8
 8001038:	f240 2093 	movw	r0, #659	@ 0x293
 800103c:	f7ff ffa2 	bl	8000f84 <play_tone>
    play_tone(0, 50);     // Pause
 8001040:	2132      	movs	r1, #50	@ 0x32
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ff9e 	bl	8000f84 <play_tone>
    play_tone(784, 300);  // G5
 8001048:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800104c:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001050:	f7ff ff98 	bl	8000f84 <play_tone>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <play_confirmation_tone>:

/**
 * @brief Play confirmation tone
 */
void play_confirmation_tone(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
    play_tone(784, 150);  // G5
 800105c:	2196      	movs	r1, #150	@ 0x96
 800105e:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001062:	f7ff ff8f 	bl	8000f84 <play_tone>
    play_tone(0, 50);     // Pause
 8001066:	2132      	movs	r1, #50	@ 0x32
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff ff8b 	bl	8000f84 <play_tone>
    play_tone(1047, 200); // C6
 800106e:	21c8      	movs	r1, #200	@ 0xc8
 8001070:	f240 4017 	movw	r0, #1047	@ 0x417
 8001074:	f7ff ff86 	bl	8000f84 <play_tone>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <play_success_tone>:

/**
 * @brief Play success tone sequence
 */
void play_success_tone(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    play_tone(523, 100);  // C5
 8001080:	2164      	movs	r1, #100	@ 0x64
 8001082:	f240 200b 	movw	r0, #523	@ 0x20b
 8001086:	f7ff ff7d 	bl	8000f84 <play_tone>
    play_tone(659, 100);  // E5
 800108a:	2164      	movs	r1, #100	@ 0x64
 800108c:	f240 2093 	movw	r0, #659	@ 0x293
 8001090:	f7ff ff78 	bl	8000f84 <play_tone>
    play_tone(784, 100);  // G5
 8001094:	2164      	movs	r1, #100	@ 0x64
 8001096:	f44f 7044 	mov.w	r0, #784	@ 0x310
 800109a:	f7ff ff73 	bl	8000f84 <play_tone>
    play_tone(1047, 200); // C6
 800109e:	21c8      	movs	r1, #200	@ 0xc8
 80010a0:	f240 4017 	movw	r0, #1047	@ 0x417
 80010a4:	f7ff ff6e 	bl	8000f84 <play_tone>
    play_tone(0, 100);    // Pause
 80010a8:	2164      	movs	r1, #100	@ 0x64
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff ff6a 	bl	8000f84 <play_tone>
    play_tone(1047, 100); // C6
 80010b0:	2164      	movs	r1, #100	@ 0x64
 80010b2:	f240 4017 	movw	r0, #1047	@ 0x417
 80010b6:	f7ff ff65 	bl	8000f84 <play_tone>
    play_tone(784, 100);  // G5
 80010ba:	2164      	movs	r1, #100	@ 0x64
 80010bc:	f44f 7044 	mov.w	r0, #784	@ 0x310
 80010c0:	f7ff ff60 	bl	8000f84 <play_tone>
    play_tone(1047, 300); // C6
 80010c4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80010c8:	f240 4017 	movw	r0, #1047	@ 0x417
 80010cc:	f7ff ff5a 	bl	8000f84 <play_tone>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <play_error_tone>:

/**
 * @brief Play error tone sequence
 */
void play_error_tone(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	e00a      	b.n	80010f6 <play_error_tone+0x22>
        play_tone(220, 200);  // A3
 80010e0:	21c8      	movs	r1, #200	@ 0xc8
 80010e2:	20dc      	movs	r0, #220	@ 0xdc
 80010e4:	f7ff ff4e 	bl	8000f84 <play_tone>
        play_tone(0, 100);    // Pause
 80010e8:	2164      	movs	r1, #100	@ 0x64
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff ff4a 	bl	8000f84 <play_tone>
    for (int i = 0; i < 3; i++) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	ddf1      	ble.n	80010e0 <play_error_tone+0xc>
    }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <play_wall_beep>:

/**
 * @brief Play wall detection beep
 */
void play_wall_beep(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
    play_tone(1000, 50);
 800110a:	2132      	movs	r1, #50	@ 0x32
 800110c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001110:	f7ff ff38 	bl	8000f84 <play_tone>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <play_turn_beep>:

/**
 * @brief Play turn signal beep
 */
void play_turn_beep(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    play_tone(800, 30);
 800111c:	211e      	movs	r1, #30
 800111e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001122:	f7ff ff2f 	bl	8000f84 <play_tone>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}

0800112a <play_battery_warning>:

/**
 * @brief Play battery low warning
 */
void play_battery_warning(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	e00b      	b.n	800114e <play_battery_warning+0x24>
        play_tone(440, 100);  // A4
 8001136:	2164      	movs	r1, #100	@ 0x64
 8001138:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 800113c:	f7ff ff22 	bl	8000f84 <play_tone>
        play_tone(0, 100);    // Pause
 8001140:	2164      	movs	r1, #100	@ 0x64
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff ff1e 	bl	8000f84 <play_tone>
    for (int i = 0; i < 5; i++) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b04      	cmp	r3, #4
 8001152:	ddf0      	ble.n	8001136 <play_battery_warning+0xc>
    }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff f889 	bl	8000280 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <send_bluetooth_message+0x28>)
 800117a:	f008 fd9d 	bl	8009cb8 <HAL_UART_Transmit>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000420 	.word	0x20000420

0800118c <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 800118c:	b40f      	push	{r0, r1, r2, r3}
 800118e:	b580      	push	{r7, lr}
 8001190:	b0c2      	sub	sp, #264	@ 0x108
 8001192:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8001194:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800119c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011a0:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80011a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011aa:	f107 0008 	add.w	r0, r7, #8
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80011b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b8:	f00a faf2 	bl	800b7a0 <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffcd 	bl	8001160 <send_bluetooth_message>
}
 80011c6:	bf00      	nop
 80011c8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80011cc:	46bd      	mov	sp, r7
 80011ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011d2:	b004      	add	sp, #16
 80011d4:	4770      	bx	lr
	...

080011d8 <send_maze_state>:

/**
 * @brief Send current maze state
 */
void send_maze_state(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	@ 0x50
 80011dc:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== MAZE STATE ===\r\n");
 80011de:	4848      	ldr	r0, [pc, #288]	@ (8001300 <send_maze_state+0x128>)
 80011e0:	f7ff ffbe 	bl	8001160 <send_bluetooth_message>

    // Send maze in ASCII format
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 80011e4:	230b      	movs	r3, #11
 80011e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011e8:	e061      	b.n	80012ae <send_maze_state+0xd6>
        char line[64] = "";
 80011ea:	463b      	mov	r3, r7
 80011ec:	2240      	movs	r2, #64	@ 0x40
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a fae3 	bl	800b7bc <memset>
        for (int x = 0; x < MAZE_SIZE; x++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011fa:	e041      	b.n	8001280 <send_maze_state+0xa8>
            char cell[8];
            if (maze[x][y].visited) {
 80011fc:	4941      	ldr	r1, [pc, #260]	@ (8001304 <send_maze_state+0x12c>)
 80011fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800120a:	4413      	add	r3, r2
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	440b      	add	r3, r1
 8001210:	3304      	adds	r3, #4
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d023      	beq.n	8001260 <send_maze_state+0x88>
                sprintf(cell, "%3d ", maze[x][y].distance < MAX_DISTANCE ? maze[x][y].distance : 999);
 8001218:	493a      	ldr	r1, [pc, #232]	@ (8001304 <send_maze_state+0x12c>)
 800121a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001226:	4413      	add	r3, r2
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	440b      	add	r3, r1
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001232:	4293      	cmp	r3, r2
 8001234:	dc0b      	bgt.n	800124e <send_maze_state+0x76>
 8001236:	4933      	ldr	r1, [pc, #204]	@ (8001304 <send_maze_state+0x12c>)
 8001238:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001244:	4413      	add	r3, r2
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	440b      	add	r3, r1
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	e001      	b.n	8001252 <send_maze_state+0x7a>
 800124e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001252:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001256:	461a      	mov	r2, r3
 8001258:	492b      	ldr	r1, [pc, #172]	@ (8001308 <send_maze_state+0x130>)
 800125a:	f00a fa0d 	bl	800b678 <siprintf>
 800125e:	e005      	b.n	800126c <send_maze_state+0x94>
            } else {
                sprintf(cell, " -- ");
 8001260:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001264:	4929      	ldr	r1, [pc, #164]	@ (800130c <send_maze_state+0x134>)
 8001266:	4618      	mov	r0, r3
 8001268:	f00a fa06 	bl	800b678 <siprintf>
            }
            strcat(line, cell);
 800126c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001270:	463b      	mov	r3, r7
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f00a faa9 	bl	800b7cc <strcat>
        for (int x = 0; x < MAZE_SIZE; x++) {
 800127a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800127c:	3301      	adds	r3, #1
 800127e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001282:	2b0b      	cmp	r3, #11
 8001284:	ddba      	ble.n	80011fc <send_maze_state+0x24>
        }
        strcat(line, "\r\n");
 8001286:	463b      	mov	r3, r7
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe fff9 	bl	8000280 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	463b      	mov	r3, r7
 8001294:	4413      	add	r3, r2
 8001296:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <send_maze_state+0x138>)
 8001298:	8811      	ldrh	r1, [r2, #0]
 800129a:	7892      	ldrb	r2, [r2, #2]
 800129c:	8019      	strh	r1, [r3, #0]
 800129e:	709a      	strb	r2, [r3, #2]
        send_bluetooth_message(line);
 80012a0:	463b      	mov	r3, r7
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff5c 	bl	8001160 <send_bluetooth_message>
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 80012a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012aa:	3b01      	subs	r3, #1
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80012ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da9a      	bge.n	80011ea <send_maze_state+0x12>
    }

    send_bluetooth_printf("Robot Position: (%d,%d) Direction: %d\r\n",
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <send_maze_state+0x13c>)
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <send_maze_state+0x13c>)
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <send_maze_state+0x13c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4815      	ldr	r0, [pc, #84]	@ (8001318 <send_maze_state+0x140>)
 80012c2:	f7ff ff63 	bl	800118c <send_bluetooth_printf>
                         robot.x, robot.y, robot.direction);
    send_bluetooth_printf("Center Reached: %s\r\n", robot.center_reached ? "YES" : "NO");
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <send_maze_state+0x13c>)
 80012c8:	7b1b      	ldrb	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <send_maze_state+0xfa>
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <send_maze_state+0x144>)
 80012d0:	e000      	b.n	80012d4 <send_maze_state+0xfc>
 80012d2:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <send_maze_state+0x148>)
 80012d4:	4619      	mov	r1, r3
 80012d6:	4813      	ldr	r0, [pc, #76]	@ (8001324 <send_maze_state+0x14c>)
 80012d8:	f7ff ff58 	bl	800118c <send_bluetooth_printf>
    send_bluetooth_printf("Returned to Start: %s\r\n", robot.returned_to_start ? "YES" : "NO");
 80012dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <send_maze_state+0x13c>)
 80012de:	7b5b      	ldrb	r3, [r3, #13]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <send_maze_state+0x110>
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <send_maze_state+0x144>)
 80012e6:	e000      	b.n	80012ea <send_maze_state+0x112>
 80012e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <send_maze_state+0x148>)
 80012ea:	4619      	mov	r1, r3
 80012ec:	480e      	ldr	r0, [pc, #56]	@ (8001328 <send_maze_state+0x150>)
 80012ee:	f7ff ff4d 	bl	800118c <send_bluetooth_printf>
    send_bluetooth_message("==================\r\n");
 80012f2:	480e      	ldr	r0, [pc, #56]	@ (800132c <send_maze_state+0x154>)
 80012f4:	f7ff ff34 	bl	8001160 <send_bluetooth_message>
}
 80012f8:	bf00      	nop
 80012fa:	3750      	adds	r7, #80	@ 0x50
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0800dae8 	.word	0x0800dae8
 8001304:	20000468 	.word	0x20000468
 8001308:	0800db00 	.word	0x0800db00
 800130c:	0800db08 	.word	0x0800db08
 8001310:	0800db10 	.word	0x0800db10
 8001314:	20000d68 	.word	0x20000d68
 8001318:	0800db14 	.word	0x0800db14
 800131c:	0800db3c 	.word	0x0800db3c
 8001320:	0800db40 	.word	0x0800db40
 8001324:	0800db44 	.word	0x0800db44
 8001328:	0800db5c 	.word	0x0800db5c
 800132c:	0800db74 	.word	0x0800db74

08001330 <send_sensor_data>:

/**
 * @brief Send current sensor data
 */
void send_sensor_data(void)
{
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	b087      	sub	sp, #28
 8001334:	af06      	add	r7, sp, #24
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001336:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <send_sensor_data+0x54>)
 8001338:	881b      	ldrh	r3, [r3, #0]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800133a:	461d      	mov	r5, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <send_sensor_data+0x54>)
 800133e:	891b      	ldrh	r3, [r3, #8]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001340:	461e      	mov	r6, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <send_sensor_data+0x54>)
 8001344:	885b      	ldrh	r3, [r3, #2]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001346:	469c      	mov	ip, r3
                         sensors.side_left, sensors.side_right,
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <send_sensor_data+0x54>)
 800134a:	88db      	ldrh	r3, [r3, #6]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800134c:	461a      	mov	r2, r3
                         sensors.side_left, sensors.side_right,
 800134e:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <send_sensor_data+0x54>)
 8001350:	889b      	ldrh	r3, [r3, #4]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001352:	4619      	mov	r1, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <send_sensor_data+0x54>)
 8001356:	7a9b      	ldrb	r3, [r3, #10]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001358:	4618      	mov	r0, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <send_sensor_data+0x54>)
 800135c:	7adb      	ldrb	r3, [r3, #11]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800135e:	461c      	mov	r4, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <send_sensor_data+0x54>)
 8001362:	7b1b      	ldrb	r3, [r3, #12]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001364:	9304      	str	r3, [sp, #16]
 8001366:	9403      	str	r4, [sp, #12]
 8001368:	9002      	str	r0, [sp, #8]
 800136a:	9101      	str	r1, [sp, #4]
 800136c:	9200      	str	r2, [sp, #0]
 800136e:	4663      	mov	r3, ip
 8001370:	4632      	mov	r2, r6
 8001372:	4629      	mov	r1, r5
 8001374:	4804      	ldr	r0, [pc, #16]	@ (8001388 <send_sensor_data+0x58>)
 8001376:	f7ff ff09 	bl	800118c <send_bluetooth_printf>
}
 800137a:	bf00      	nop
 800137c:	3704      	adds	r7, #4
 800137e:	46bd      	mov	sp, r7
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000d7c 	.word	0x20000d7c
 8001388:	0800db8c 	.word	0x0800db8c

0800138c <send_position_data>:

/**
 * @brief Send current position and encoder data
 */
void send_position_data(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
    int32_t left_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <send_position_data+0x44>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800139c:	607b      	str	r3, [r7, #4]
    int32_t right_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim4) - 32768;
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <send_position_data+0x48>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80013a8:	603b      	str	r3, [r7, #0]

    send_bluetooth_printf("POSITION - X:%d Y:%d Dir:%d EncL:%ld EncR:%ld\r\n",
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <send_position_data+0x4c>)
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <send_position_data+0x4c>)
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <send_position_data+0x4c>)
 80013b4:	6898      	ldr	r0, [r3, #8]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4603      	mov	r3, r0
 80013c0:	4806      	ldr	r0, [pc, #24]	@ (80013dc <send_position_data+0x50>)
 80013c2:	f7ff fee3 	bl	800118c <send_bluetooth_printf>
                         robot.x, robot.y, robot.direction, left_count, right_count);
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000348 	.word	0x20000348
 80013d4:	200003d8 	.word	0x200003d8
 80013d8:	20000d68 	.word	0x20000d68
 80013dc:	0800dbd0 	.word	0x0800dbd0

080013e0 <send_performance_metrics>:

/**
 * @brief Send performance metrics
 */
void send_performance_metrics(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
    float efficiency = get_exploration_efficiency();  // make functions
 80013e6:	f002 fa83 	bl	80038f0 <get_exploration_efficiency>
 80013ea:	ed87 0a01 	vstr	s0, [r7, #4]
    int optimal_distance = get_optimal_distance();		// make functions
 80013ee:	f002 facf 	bl	8003990 <get_optimal_distance>
 80013f2:	6038      	str	r0, [r7, #0]

    send_bluetooth_message("\r\n=== PERFORMANCE METRICS ===\r\n");
 80013f4:	4824      	ldr	r0, [pc, #144]	@ (8001488 <send_performance_metrics+0xa8>)
 80013f6:	f7ff feb3 	bl	8001160 <send_bluetooth_message>
    send_bluetooth_printf("Exploration Steps: %d\r\n", robot.exploration_steps);
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <send_performance_metrics+0xac>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	4619      	mov	r1, r3
 8001400:	4823      	ldr	r0, [pc, #140]	@ (8001490 <send_performance_metrics+0xb0>)
 8001402:	f7ff fec3 	bl	800118c <send_bluetooth_printf>
    send_bluetooth_printf("Exploration Efficiency: %.1f%%\r\n", efficiency);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff f8a6 	bl	8000558 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4820      	ldr	r0, [pc, #128]	@ (8001494 <send_performance_metrics+0xb4>)
 8001412:	f7ff febb 	bl	800118c <send_bluetooth_printf>
    send_bluetooth_printf("Optimal Path Distance: %d steps\r\n", optimal_distance);
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	481f      	ldr	r0, [pc, #124]	@ (8001498 <send_performance_metrics+0xb8>)
 800141a:	f7ff feb7 	bl	800118c <send_bluetooth_printf>

    // Performance rating
    if (efficiency <= 50.0f && optimal_distance > 0) {
 800141e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001422:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800149c <send_performance_metrics+0xbc>
 8001426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	d806      	bhi.n	800143e <send_performance_metrics+0x5e>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dd03      	ble.n	800143e <send_performance_metrics+0x5e>
        send_bluetooth_message("Rating: ⭐⭐⭐⭐⭐ LEVEL\r\n");
 8001436:	481a      	ldr	r0, [pc, #104]	@ (80014a0 <send_performance_metrics+0xc0>)
 8001438:	f7ff fe92 	bl	8001160 <send_bluetooth_message>
 800143c:	e01c      	b.n	8001478 <send_performance_metrics+0x98>
    } else if (efficiency <= 65.0f) {
 800143e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001442:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80014a4 <send_performance_metrics+0xc4>
 8001446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	d803      	bhi.n	8001458 <send_performance_metrics+0x78>
        send_bluetooth_message("Rating: ⭐⭐⭐⭐ COMPETITION READY\r\n");
 8001450:	4815      	ldr	r0, [pc, #84]	@ (80014a8 <send_performance_metrics+0xc8>)
 8001452:	f7ff fe85 	bl	8001160 <send_bluetooth_message>
 8001456:	e00f      	b.n	8001478 <send_performance_metrics+0x98>
    } else if (efficiency <= 80.0f) {
 8001458:	edd7 7a01 	vldr	s15, [r7, #4]
 800145c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80014ac <send_performance_metrics+0xcc>
 8001460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d803      	bhi.n	8001472 <send_performance_metrics+0x92>
        send_bluetooth_message("Rating: ⭐⭐⭐ GOOD PERFORMANCE\r\n");
 800146a:	4811      	ldr	r0, [pc, #68]	@ (80014b0 <send_performance_metrics+0xd0>)
 800146c:	f7ff fe78 	bl	8001160 <send_bluetooth_message>
 8001470:	e002      	b.n	8001478 <send_performance_metrics+0x98>
    } else {
        send_bluetooth_message("Rating: ⭐⭐ NEEDS OPTIMIZATION\r\n");
 8001472:	4810      	ldr	r0, [pc, #64]	@ (80014b4 <send_performance_metrics+0xd4>)
 8001474:	f7ff fe74 	bl	8001160 <send_bluetooth_message>
    }
    send_bluetooth_message("===========================\r\n");
 8001478:	480f      	ldr	r0, [pc, #60]	@ (80014b8 <send_performance_metrics+0xd8>)
 800147a:	f7ff fe71 	bl	8001160 <send_bluetooth_message>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	0800dc00 	.word	0x0800dc00
 800148c:	20000d68 	.word	0x20000d68
 8001490:	0800dc20 	.word	0x0800dc20
 8001494:	0800dc38 	.word	0x0800dc38
 8001498:	0800dc5c 	.word	0x0800dc5c
 800149c:	42480000 	.word	0x42480000
 80014a0:	0800dc80 	.word	0x0800dc80
 80014a4:	42820000 	.word	0x42820000
 80014a8:	0800dca0 	.word	0x0800dca0
 80014ac:	42a00000 	.word	0x42a00000
 80014b0:	0800dccc 	.word	0x0800dccc
 80014b4:	0800dcf4 	.word	0x0800dcf4
 80014b8:	0800dd18 	.word	0x0800dd18

080014bc <send_battery_status>:

/**
 * @brief Send battery status
 */
void send_battery_status(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af02      	add	r7, sp, #8
    // Convert ADC reading to voltage (assuming 3.3V reference)
    float voltage = (sensors.battery * 3.3f) / 4096.0f;
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <send_battery_status+0x60>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001520 <send_battery_status+0x64>
 80014d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d6:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001524 <send_battery_status+0x68>
 80014da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014de:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_printf("Battery: %.2fV (ADC:%d)", voltage, sensors.battery);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff f838 	bl	8000558 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	490b      	ldr	r1, [pc, #44]	@ (800151c <send_battery_status+0x60>)
 80014ee:	8809      	ldrh	r1, [r1, #0]
 80014f0:	9100      	str	r1, [sp, #0]
 80014f2:	480d      	ldr	r0, [pc, #52]	@ (8001528 <send_battery_status+0x6c>)
 80014f4:	f7ff fe4a 	bl	800118c <send_bluetooth_printf>

    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <send_battery_status+0x60>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001500:	4293      	cmp	r3, r2
 8001502:	d803      	bhi.n	800150c <send_battery_status+0x50>
        send_bluetooth_message(" - LOW BATTERY WARNING!\r\n");
 8001504:	4809      	ldr	r0, [pc, #36]	@ (800152c <send_battery_status+0x70>)
 8001506:	f7ff fe2b 	bl	8001160 <send_bluetooth_message>
    } else {
        send_bluetooth_message(" - OK\r\n");
    }
}
 800150a:	e002      	b.n	8001512 <send_battery_status+0x56>
        send_bluetooth_message(" - OK\r\n");
 800150c:	4808      	ldr	r0, [pc, #32]	@ (8001530 <send_battery_status+0x74>)
 800150e:	f7ff fe27 	bl	8001160 <send_bluetooth_message>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000d7c 	.word	0x20000d7c
 8001520:	40533333 	.word	0x40533333
 8001524:	45800000 	.word	0x45800000
 8001528:	0800dd38 	.word	0x0800dd38
 800152c:	0800dd50 	.word	0x0800dd50
 8001530:	0800dd6c 	.word	0x0800dd6c

08001534 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001544:	b2db      	uxtb	r3, r3
 8001546:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001552:	4817      	ldr	r0, [pc, #92]	@ (80015b0 <mpu9250_read_register+0x7c>)
 8001554:	f005 ffa8 	bl	80074a8 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 8001558:	f107 010d 	add.w	r1, r7, #13
 800155c:	2364      	movs	r3, #100	@ 0x64
 800155e:	2201      	movs	r2, #1
 8001560:	4814      	ldr	r0, [pc, #80]	@ (80015b4 <mpu9250_read_register+0x80>)
 8001562:	f006 fcce 	bl	8007f02 <HAL_SPI_Transmit>
 8001566:	4603      	mov	r3, r0
 8001568:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 800156a:	f107 010c 	add.w	r1, r7, #12
 800156e:	2364      	movs	r3, #100	@ 0x64
 8001570:	2201      	movs	r2, #1
 8001572:	4810      	ldr	r0, [pc, #64]	@ (80015b4 <mpu9250_read_register+0x80>)
 8001574:	f006 fe09 	bl	800818a <HAL_SPI_Receive>
 8001578:	4603      	mov	r3, r0
 800157a:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001582:	480b      	ldr	r0, [pc, #44]	@ (80015b0 <mpu9250_read_register+0x7c>)
 8001584:	f005 ff90 	bl	80074a8 <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <mpu9250_read_register+0x60>
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 8001594:	4808      	ldr	r0, [pc, #32]	@ (80015b8 <mpu9250_read_register+0x84>)
 8001596:	f7ff fde3 	bl	8001160 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <mpu9250_read_register+0x88>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 80015a0:	23ff      	movs	r3, #255	@ 0xff
 80015a2:	e000      	b.n	80015a6 <mpu9250_read_register+0x72>
    }

    return rx_data;
 80015a4:	7b3b      	ldrb	r3, [r7, #12]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40020400 	.word	0x40020400
 80015b4:	200002a8 	.word	0x200002a8
 80015b8:	0800de8c 	.word	0x0800de8c
 80015bc:	20000250 	.word	0x20000250

080015c0 <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	460a      	mov	r2, r1
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	4613      	mov	r3, r2
 80015ce:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	733b      	strb	r3, [r7, #12]
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015de:	4811      	ldr	r0, [pc, #68]	@ (8001624 <mpu9250_write_register+0x64>)
 80015e0:	f005 ff62 	bl	80074a8 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 80015e4:	f107 010c 	add.w	r1, r7, #12
 80015e8:	2364      	movs	r3, #100	@ 0x64
 80015ea:	2202      	movs	r2, #2
 80015ec:	480e      	ldr	r0, [pc, #56]	@ (8001628 <mpu9250_write_register+0x68>)
 80015ee:	f006 fc88 	bl	8007f02 <HAL_SPI_Transmit>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015fc:	4809      	ldr	r0, [pc, #36]	@ (8001624 <mpu9250_write_register+0x64>)
 80015fe:	f005 ff53 	bl	80074a8 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 8001608:	4808      	ldr	r0, [pc, #32]	@ (800162c <mpu9250_write_register+0x6c>)
 800160a:	f7ff fda9 	bl	8001160 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <mpu9250_write_register+0x70>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8001614:	2001      	movs	r0, #1
 8001616:	f005 f809 	bl	800662c <HAL_Delay>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020400 	.word	0x40020400
 8001628:	200002a8 	.word	0x200002a8
 800162c:	0800deb0 	.word	0x0800deb0
 8001630:	20000250 	.word	0x20000250

08001634 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 800163a:	483c      	ldr	r0, [pc, #240]	@ (800172c <mpu9250_init+0xf8>)
 800163c:	f7ff fd90 	bl	8001160 <send_bluetooth_message>
    HAL_Delay(200);
 8001640:	20c8      	movs	r0, #200	@ 0xc8
 8001642:	f004 fff3 	bl	800662c <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 8001646:	2180      	movs	r1, #128	@ 0x80
 8001648:	206b      	movs	r0, #107	@ 0x6b
 800164a:	f7ff ffb9 	bl	80015c0 <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 800164e:	20fa      	movs	r0, #250	@ 0xfa
 8001650:	f004 ffec 	bl	800662c <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 8001654:	2100      	movs	r1, #0
 8001656:	206b      	movs	r0, #107	@ 0x6b
 8001658:	f7ff ffb2 	bl	80015c0 <mpu9250_write_register>
    HAL_Delay(50);
 800165c:	2032      	movs	r0, #50	@ 0x32
 800165e:	f004 ffe5 	bl	800662c <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 8001662:	2101      	movs	r1, #1
 8001664:	206b      	movs	r0, #107	@ 0x6b
 8001666:	f7ff ffab 	bl	80015c0 <mpu9250_write_register>
    HAL_Delay(50);
 800166a:	2032      	movs	r0, #50	@ 0x32
 800166c:	f004 ffde 	bl	800662c <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 8001670:	2100      	movs	r1, #0
 8001672:	206c      	movs	r0, #108	@ 0x6c
 8001674:	f7ff ffa4 	bl	80015c0 <mpu9250_write_register>
    HAL_Delay(10);
 8001678:	200a      	movs	r0, #10
 800167a:	f004 ffd7 	bl	800662c <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 800167e:	206a      	movs	r0, #106	@ 0x6a
 8001680:	f7ff ff58 	bl	8001534 <mpu9250_read_register>
 8001684:	4603      	mov	r3, r0
 8001686:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	4619      	mov	r1, r3
 8001694:	206a      	movs	r0, #106	@ 0x6a
 8001696:	f7ff ff93 	bl	80015c0 <mpu9250_write_register>
     HAL_Delay(10);
 800169a:	200a      	movs	r0, #10
 800169c:	f004 ffc6 	bl	800662c <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 80016a0:	2104      	movs	r1, #4
 80016a2:	2019      	movs	r0, #25
 80016a4:	f7ff ff8c 	bl	80015c0 <mpu9250_write_register>
    HAL_Delay(10);
 80016a8:	200a      	movs	r0, #10
 80016aa:	f004 ffbf 	bl	800662c <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 80016ae:	2102      	movs	r1, #2
 80016b0:	201a      	movs	r0, #26
 80016b2:	f7ff ff85 	bl	80015c0 <mpu9250_write_register>
    HAL_Delay(10);
 80016b6:	200a      	movs	r0, #10
 80016b8:	f004 ffb8 	bl	800662c <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 80016bc:	2108      	movs	r1, #8
 80016be:	201b      	movs	r0, #27
 80016c0:	f7ff ff7e 	bl	80015c0 <mpu9250_write_register>
    HAL_Delay(10);
 80016c4:	200a      	movs	r0, #10
 80016c6:	f004 ffb1 	bl	800662c <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 80016ca:	2108      	movs	r1, #8
 80016cc:	201c      	movs	r0, #28
 80016ce:	f7ff ff77 	bl	80015c0 <mpu9250_write_register>
    HAL_Delay(10);
 80016d2:	200a      	movs	r0, #10
 80016d4:	f004 ffaa 	bl	800662c <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 80016d8:	2102      	movs	r1, #2
 80016da:	201d      	movs	r0, #29
 80016dc:	f7ff ff70 	bl	80015c0 <mpu9250_write_register>
    HAL_Delay(10);
 80016e0:	200a      	movs	r0, #10
 80016e2:	f004 ffa3 	bl	800662c <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 80016e6:	2075      	movs	r0, #117	@ 0x75
 80016e8:	f7ff ff24 	bl	8001534 <mpu9250_read_register>
 80016ec:	4603      	mov	r3, r0
 80016ee:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 80016f0:	79bb      	ldrb	r3, [r7, #6]
 80016f2:	4619      	mov	r1, r3
 80016f4:	480e      	ldr	r0, [pc, #56]	@ (8001730 <mpu9250_init+0xfc>)
 80016f6:	f7ff fd49 	bl	800118c <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	2b70      	cmp	r3, #112	@ 0x70
 80016fe:	d009      	beq.n	8001714 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 8001700:	79bb      	ldrb	r3, [r7, #6]
 8001702:	4619      	mov	r1, r3
 8001704:	480b      	ldr	r0, [pc, #44]	@ (8001734 <mpu9250_init+0x100>)
 8001706:	f7ff fd41 	bl	800118c <send_bluetooth_printf>
        mpu9250_initialized=false;
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <mpu9250_init+0x104>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
        return false;
 8001710:	2300      	movs	r3, #0
 8001712:	e006      	b.n	8001722 <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8001714:	4809      	ldr	r0, [pc, #36]	@ (800173c <mpu9250_init+0x108>)
 8001716:	f7ff fd23 	bl	8001160 <send_bluetooth_message>
    mpu9250_initialized=true;
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <mpu9250_init+0x104>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
    return true;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	0800ded8 	.word	0x0800ded8
 8001730:	0800df04 	.word	0x0800df04
 8001734:	0800df18 	.word	0x0800df18
 8001738:	20000250 	.word	0x20000250
 800173c:	0800df40 	.word	0x0800df40

08001740 <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 8001746:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <mpu9250_calibrate_bias+0xa4>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f083 0301 	eor.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <mpu9250_calibrate_bias+0x1c>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 8001754:	4824      	ldr	r0, [pc, #144]	@ (80017e8 <mpu9250_calibrate_bias+0xa8>)
 8001756:	f7ff fd03 	bl	8001160 <send_bluetooth_message>
        return;
 800175a:	e03f      	b.n	80017dc <mpu9250_calibrate_bias+0x9c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 800175c:	4823      	ldr	r0, [pc, #140]	@ (80017ec <mpu9250_calibrate_bias+0xac>)
 800175e:	f7ff fcff 	bl	8001160 <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 100;
 8001762:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <mpu9250_calibrate_bias+0xb0>)
 8001764:	2264      	movs	r2, #100	@ 0x64
 8001766:	609a      	str	r2, [r3, #8]
    //float sum_x = 0, sum_y = 0, sum_z = 0;
    float sum_z = 0;
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	e014      	b.n	800179e <mpu9250_calibrate_bias+0x5e>
        mpu9250_read_gyro();
 8001774:	f000 f87c 	bl	8001870 <mpu9250_read_gyro>
        //sum_x += gyro.gyro_x;
        //sum_y += gyro.gyro_y;
        sum_z += gyro.gyro_z;
 8001778:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <mpu9250_calibrate_bias+0xb4>)
 800177a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001786:	ed97 7a01 	vldr	s14, [r7, #4]
 800178a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178e:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 8001792:	2003      	movs	r0, #3
 8001794:	f004 ff4a 	bl	800662c <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <mpu9250_calibrate_bias+0xb0>)
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8e5      	bhi.n	8001774 <mpu9250_calibrate_bias+0x34>
    }

    //enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
    //enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <mpu9250_calibrate_bias+0xb0>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b4:	edd7 6a01 	vldr	s13, [r7, #4]
 80017b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <mpu9250_calibrate_bias+0xb0>)
 80017be:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.calibrated = true;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <mpu9250_calibrate_bias+0xb0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	711a      	strb	r2, [r3, #4]

//    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
//                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
    send_bluetooth_printf("Gyro bias calibrated: Z:%.1f\r\n", enhanced_gyro.gyro_bias_z);
 80017c8:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <mpu9250_calibrate_bias+0xb0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fec3 	bl	8000558 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4808      	ldr	r0, [pc, #32]	@ (80017f8 <mpu9250_calibrate_bias+0xb8>)
 80017d8:	f7ff fcd8 	bl	800118c <send_bluetooth_printf>
}
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000250 	.word	0x20000250
 80017e8:	0800df54 	.word	0x0800df54
 80017ec:	0800df80 	.word	0x0800df80
 80017f0:	20000254 	.word	0x20000254
 80017f4:	20000d8c 	.word	0x20000d8c
 80017f8:	0800dfb4 	.word	0x0800dfb4

080017fc <mpu9250_get_gyro_z_compensated>:

/**
 * @brief Get bias-compensated gyro Z value in degrees per second
 */
float mpu9250_get_gyro_z_compensated(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
    if (!enhanced_gyro.calibrated) {
 8001802:	4b12      	ldr	r3, [pc, #72]	@ (800184c <mpu9250_get_gyro_z_compensated+0x50>)
 8001804:	791b      	ldrb	r3, [r3, #4]
 8001806:	f083 0301 	eor.w	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <mpu9250_get_gyro_z_compensated+0x1e>
        return mpu9250_get_gyro_z_dps(); // Fall back to uncompensated
 8001810:	f000 f902 	bl	8001a18 <mpu9250_get_gyro_z_dps>
 8001814:	eef0 7a40 	vmov.f32	s15, s0
 8001818:	e013      	b.n	8001842 <mpu9250_get_gyro_z_compensated+0x46>
    }

    float raw_z_dps = (float)(gyro.gyro_z - enhanced_gyro.gyro_bias_z) / 65.5f;
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <mpu9250_get_gyro_z_compensated+0x54>)
 800181c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <mpu9250_get_gyro_z_compensated+0x50>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001832:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001854 <mpu9250_get_gyro_z_compensated+0x58>
 8001836:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800183a:	edc7 7a01 	vstr	s15, [r7, #4]
    return raw_z_dps;
 800183e:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000254 	.word	0x20000254
 8001850:	20000d8c 	.word	0x20000d8c
 8001854:	42830000 	.word	0x42830000

08001858 <mpu9250_is_initialized>:

/**
 * @brief Check if MPU9250 is initialized - NEW FUNCTION
 */
bool mpu9250_is_initialized(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
    return mpu9250_initialized;
 800185c:	4b03      	ldr	r3, [pc, #12]	@ (800186c <mpu9250_is_initialized+0x14>)
 800185e:	781b      	ldrb	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000250 	.word	0x20000250

08001870 <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 8001876:	4b25      	ldr	r3, [pc, #148]	@ (800190c <mpu9250_read_gyro+0x9c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	f083 0301 	eor.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 8001884:	4822      	ldr	r0, [pc, #136]	@ (8001910 <mpu9250_read_gyro+0xa0>)
 8001886:	f7ff fc6b 	bl	8001160 <send_bluetooth_message>
        return;
 800188a:	e03c      	b.n	8001906 <mpu9250_read_gyro+0x96>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 800188c:	23c3      	movs	r3, #195	@ 0xc3
 800188e:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001896:	481f      	ldr	r0, [pc, #124]	@ (8001914 <mpu9250_read_gyro+0xa4>)
 8001898:	f005 fe06 	bl	80074a8 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 800189c:	1df9      	adds	r1, r7, #7
 800189e:	2364      	movs	r3, #100	@ 0x64
 80018a0:	2201      	movs	r2, #1
 80018a2:	481d      	ldr	r0, [pc, #116]	@ (8001918 <mpu9250_read_gyro+0xa8>)
 80018a4:	f006 fb2d 	bl	8007f02 <HAL_SPI_Transmit>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018b8:	4816      	ldr	r0, [pc, #88]	@ (8001914 <mpu9250_read_gyro+0xa4>)
 80018ba:	f005 fdf5 	bl	80074a8 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 80018be:	4817      	ldr	r0, [pc, #92]	@ (800191c <mpu9250_read_gyro+0xac>)
 80018c0:	f7ff fc4e 	bl	8001160 <send_bluetooth_message>
        return;
 80018c4:	e01f      	b.n	8001906 <mpu9250_read_gyro+0x96>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 80018c6:	f107 0108 	add.w	r1, r7, #8
 80018ca:	2364      	movs	r3, #100	@ 0x64
 80018cc:	2206      	movs	r2, #6
 80018ce:	4812      	ldr	r0, [pc, #72]	@ (8001918 <mpu9250_read_gyro+0xa8>)
 80018d0:	f006 fc5b 	bl	800818a <HAL_SPI_Receive>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018de:	480d      	ldr	r0, [pc, #52]	@ (8001914 <mpu9250_read_gyro+0xa4>)
 80018e0:	f005 fde2 	bl	80074a8 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 80018ea:	480d      	ldr	r0, [pc, #52]	@ (8001920 <mpu9250_read_gyro+0xb0>)
 80018ec:	f7ff fc38 	bl	8001160 <send_bluetooth_message>
        return;
 80018f0:	e009      	b.n	8001906 <mpu9250_read_gyro+0x96>
    }

    // Convert to signed 16-bit values
    //gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
    //gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 80018f2:	7b3b      	ldrb	r3, [r7, #12]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	7b7b      	ldrb	r3, [r7, #13]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	b21a      	sxth	r2, r3
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <mpu9250_read_gyro+0xb4>)
 8001904:	809a      	strh	r2, [r3, #4]
}
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000250 	.word	0x20000250
 8001910:	0800dfd4 	.word	0x0800dfd4
 8001914:	40020400 	.word	0x40020400
 8001918:	200002a8 	.word	0x200002a8
 800191c:	0800e008 	.word	0x0800e008
 8001920:	0800e02c 	.word	0x0800e02c
 8001924:	20000d8c 	.word	0x20000d8c

08001928 <mpu9250_read_accel>:

/**
 * @brief Read raw accelerometer data - FIXED with error checking
 */
void mpu9250_read_accel(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 800192e:	4b2f      	ldr	r3, [pc, #188]	@ (80019ec <mpu9250_read_accel+0xc4>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	f083 0301 	eor.w	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <mpu9250_read_accel+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read accel\r\n");
 800193c:	482c      	ldr	r0, [pc, #176]	@ (80019f0 <mpu9250_read_accel+0xc8>)
 800193e:	f7ff fc0f 	bl	8001160 <send_bluetooth_message>
        return;
 8001942:	e050      	b.n	80019e6 <mpu9250_read_accel+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_ACCEL_XOUT_H | 0x80; // Set read bit
 8001944:	23bb      	movs	r3, #187	@ 0xbb
 8001946:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800194e:	4829      	ldr	r0, [pc, #164]	@ (80019f4 <mpu9250_read_accel+0xcc>)
 8001950:	f005 fdaa 	bl	80074a8 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8001954:	1df9      	adds	r1, r7, #7
 8001956:	2364      	movs	r3, #100	@ 0x64
 8001958:	2201      	movs	r2, #1
 800195a:	4827      	ldr	r0, [pc, #156]	@ (80019f8 <mpu9250_read_accel+0xd0>)
 800195c:	f006 fad1 	bl	8007f02 <HAL_SPI_Transmit>
 8001960:	4603      	mov	r3, r0
 8001962:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <mpu9250_read_accel+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 800196a:	2201      	movs	r2, #1
 800196c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001970:	4820      	ldr	r0, [pc, #128]	@ (80019f4 <mpu9250_read_accel+0xcc>)
 8001972:	f005 fd99 	bl	80074a8 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in accel read\r\n");
 8001976:	4821      	ldr	r0, [pc, #132]	@ (80019fc <mpu9250_read_accel+0xd4>)
 8001978:	f7ff fbf2 	bl	8001160 <send_bluetooth_message>
        return;
 800197c:	e033      	b.n	80019e6 <mpu9250_read_accel+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	2364      	movs	r3, #100	@ 0x64
 8001984:	2206      	movs	r2, #6
 8001986:	481c      	ldr	r0, [pc, #112]	@ (80019f8 <mpu9250_read_accel+0xd0>)
 8001988:	f006 fbff 	bl	800818a <HAL_SPI_Receive>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001996:	4817      	ldr	r0, [pc, #92]	@ (80019f4 <mpu9250_read_accel+0xcc>)
 8001998:	f005 fd86 	bl	80074a8 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <mpu9250_read_accel+0x82>
        send_bluetooth_message("SPI receive error in accel read\r\n");
 80019a2:	4817      	ldr	r0, [pc, #92]	@ (8001a00 <mpu9250_read_accel+0xd8>)
 80019a4:	f7ff fbdc 	bl	8001160 <send_bluetooth_message>
        return;
 80019a8:	e01d      	b.n	80019e6 <mpu9250_read_accel+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.accel_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 80019aa:	7a3b      	ldrb	r3, [r7, #8]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	7a7b      	ldrb	r3, [r7, #9]
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <mpu9250_read_accel+0xdc>)
 80019bc:	80da      	strh	r2, [r3, #6]
    gyro.accel_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 80019be:	7abb      	ldrb	r3, [r7, #10]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b21a      	sxth	r2, r3
 80019ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <mpu9250_read_accel+0xdc>)
 80019d0:	811a      	strh	r2, [r3, #8]
    gyro.accel_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 80019d2:	7b3b      	ldrb	r3, [r7, #12]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	b21a      	sxth	r2, r3
 80019da:	7b7b      	ldrb	r3, [r7, #13]
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <mpu9250_read_accel+0xdc>)
 80019e4:	815a      	strh	r2, [r3, #10]
}
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000250 	.word	0x20000250
 80019f0:	0800e050 	.word	0x0800e050
 80019f4:	40020400 	.word	0x40020400
 80019f8:	200002a8 	.word	0x200002a8
 80019fc:	0800e088 	.word	0x0800e088
 8001a00:	0800e0ac 	.word	0x0800e0ac
 8001a04:	20000d8c 	.word	0x20000d8c

08001a08 <mpu9250_read_all>:

/**
 * @brief Read all IMU data
 */
void mpu9250_read_all(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
    mpu9250_read_accel();
 8001a0c:	f7ff ff8c 	bl	8001928 <mpu9250_read_accel>
    mpu9250_read_gyro();
 8001a10:	f7ff ff2e 	bl	8001870 <mpu9250_read_gyro>
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <mpu9250_get_gyro_z_dps>:

/**
 * @brief Get gyro Z-axis in degrees per second
 */
float mpu9250_get_gyro_z_dps(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
    // ±500 dps range, 16-bit resolution
    // Sensitivity: 65.5 LSB/(dps)

    return (float)gyro.gyro_z / 65.5f;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <mpu9250_get_gyro_z_dps+0x2c>)
 8001a1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001a48 <mpu9250_get_gyro_z_dps+0x30>
 8001a2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a32:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000d8c 	.word	0x20000d8c
 8001a48:	42830000 	.word	0x42830000

08001a4c <mpu9250_send_status>:

/**
 * @brief Get MPU9250 status for debugging - NEW FUNCTION
 */
void mpu9250_send_status(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
                         mpu9250_initialized ? "OK" : "FAILED");
 8001a52:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <mpu9250_send_status+0xa8>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <mpu9250_send_status+0x12>
 8001a5a:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <mpu9250_send_status+0xac>)
 8001a5c:	e000      	b.n	8001a60 <mpu9250_send_status+0x14>
 8001a5e:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <mpu9250_send_status+0xb0>)
 8001a60:	4619      	mov	r1, r3
 8001a62:	4827      	ldr	r0, [pc, #156]	@ (8001b00 <mpu9250_send_status+0xb4>)
 8001a64:	f7ff fb92 	bl	800118c <send_bluetooth_printf>

    if (mpu9250_initialized) {
 8001a68:	4b22      	ldr	r3, [pc, #136]	@ (8001af4 <mpu9250_send_status+0xa8>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d03c      	beq.n	8001aea <mpu9250_send_status+0x9e>
        uint8_t who_am_i = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001a70:	2075      	movs	r0, #117	@ 0x75
 8001a72:	f7ff fd5f 	bl	8001534 <mpu9250_read_register>
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
        uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 8001a7a:	206a      	movs	r0, #106	@ 0x6a
 8001a7c:	f7ff fd5a 	bl	8001534 <mpu9250_read_register>
 8001a80:	4603      	mov	r3, r0
 8001a82:	71bb      	strb	r3, [r7, #6]
        uint8_t pwr_mgmt = mpu9250_read_register(MPU9250_PWR_MGMT_1);
 8001a84:	206b      	movs	r0, #107	@ 0x6b
 8001a86:	f7ff fd55 	bl	8001534 <mpu9250_read_register>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	717b      	strb	r3, [r7, #5]

        send_bluetooth_printf("WHO_AM_I:0x%02X USER_CTRL:0x%02X PWR_MGMT:0x%02X\r\n",
 8001a8e:	79f9      	ldrb	r1, [r7, #7]
 8001a90:	79ba      	ldrb	r2, [r7, #6]
 8001a92:	797b      	ldrb	r3, [r7, #5]
 8001a94:	481b      	ldr	r0, [pc, #108]	@ (8001b04 <mpu9250_send_status+0xb8>)
 8001a96:	f7ff fb79 	bl	800118c <send_bluetooth_printf>
                             who_am_i, user_ctrl, pwr_mgmt);

        if (user_ctrl & 0x10) {
 8001a9a:	79bb      	ldrb	r3, [r7, #6]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <mpu9250_send_status+0x60>
            send_bluetooth_message("I2C disabled: ✅\r\n");
 8001aa4:	4818      	ldr	r0, [pc, #96]	@ (8001b08 <mpu9250_send_status+0xbc>)
 8001aa6:	f7ff fb5b 	bl	8001160 <send_bluetooth_message>
 8001aaa:	e002      	b.n	8001ab2 <mpu9250_send_status+0x66>
        } else {
            send_bluetooth_message("I2C disabled: ❌\r\n");
 8001aac:	4817      	ldr	r0, [pc, #92]	@ (8001b0c <mpu9250_send_status+0xc0>)
 8001aae:	f7ff fb57 	bl	8001160 <send_bluetooth_message>
        }

        // Read current sensor values
        mpu9250_read_all();
 8001ab2:	f7ff ffa9 	bl	8001a08 <mpu9250_read_all>
//        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
//                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001ab6:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <mpu9250_send_status+0xc4>)
 8001ab8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001abc:	4619      	mov	r1, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001abe:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <mpu9250_send_status+0xc4>)
 8001ac0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001ac4:	461a      	mov	r2, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <mpu9250_send_status+0xc4>)
 8001ac8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001acc:	4811      	ldr	r0, [pc, #68]	@ (8001b14 <mpu9250_send_status+0xc8>)
 8001ace:	f7ff fb5d 	bl	800118c <send_bluetooth_printf>
        send_bluetooth_printf("Gyro Z:%.1f°/s\r\n",mpu9250_get_gyro_z_dps());
 8001ad2:	f7ff ffa1 	bl	8001a18 <mpu9250_get_gyro_z_dps>
 8001ad6:	ee10 3a10 	vmov	r3, s0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd3c 	bl	8000558 <__aeabi_f2d>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <mpu9250_send_status+0xcc>)
 8001ae6:	f7ff fb51 	bl	800118c <send_bluetooth_printf>
    }
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000250 	.word	0x20000250
 8001af8:	0800e0d0 	.word	0x0800e0d0
 8001afc:	0800e0d4 	.word	0x0800e0d4
 8001b00:	0800e0dc 	.word	0x0800e0dc
 8001b04:	0800e0f8 	.word	0x0800e0f8
 8001b08:	0800e12c 	.word	0x0800e12c
 8001b0c:	0800e140 	.word	0x0800e140
 8001b10:	20000d8c 	.word	0x20000d8c
 8001b14:	0800e154 	.word	0x0800e154
 8001b18:	0800e16c 	.word	0x0800e16c

08001b1c <initialize_hardware_systems>:


/**
 * @brief Initialize all hardware systems and perform diagnostics
 */
static void initialize_hardware_systems(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    //send_bluetooth_message("\r\n" "="*60 "\r\n");
    send_bluetooth_message("🤖 CHAMPIONSHIP MICROMOUSE INITIALIZATION 🤖\r\n");
 8001b20:	4828      	ldr	r0, [pc, #160]	@ (8001bc4 <initialize_hardware_systems+0xa8>)
 8001b22:	f7ff fb1d 	bl	8001160 <send_bluetooth_message>
    //send_bluetooth_message("="*60 "\r\n");

    // Initialize PWM for motors
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6 (MOTOR_IN1)
 8001b26:	2100      	movs	r1, #0
 8001b28:	4827      	ldr	r0, [pc, #156]	@ (8001bc8 <initialize_hardware_systems+0xac>)
 8001b2a:	f006 ffdb 	bl	8008ae4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // PA7 (MOTOR_IN2)
 8001b2e:	2104      	movs	r1, #4
 8001b30:	4825      	ldr	r0, [pc, #148]	@ (8001bc8 <initialize_hardware_systems+0xac>)
 8001b32:	f006 ffd7 	bl	8008ae4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // PB0 (MOTOR_IN3)
 8001b36:	2108      	movs	r1, #8
 8001b38:	4823      	ldr	r0, [pc, #140]	@ (8001bc8 <initialize_hardware_systems+0xac>)
 8001b3a:	f006 ffd3 	bl	8008ae4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PB1 (MOTOR_IN4)
 8001b3e:	210c      	movs	r1, #12
 8001b40:	4821      	ldr	r0, [pc, #132]	@ (8001bc8 <initialize_hardware_systems+0xac>)
 8001b42:	f006 ffcf 	bl	8008ae4 <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET); // Enable DRV8833
 8001b46:	2201      	movs	r2, #1
 8001b48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b4c:	481f      	ldr	r0, [pc, #124]	@ (8001bcc <initialize_hardware_systems+0xb0>)
 8001b4e:	f005 fcab 	bl	80074a8 <HAL_GPIO_WritePin>

    // Verify ADC GPIO configuration
    verify_adc_gpio_configuration();
 8001b52:	f000 fd95 	bl	8002680 <verify_adc_gpio_configuration>
    adc_system_diagnostics();
 8001b56:	f002 fec7 	bl	80048e8 <adc_system_diagnostics>

    // Initialize and test MPU9250 gyroscope
    if (mpu9250_init()) {
 8001b5a:	f7ff fd6b 	bl	8001634 <mpu9250_init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00f      	beq.n	8001b84 <initialize_hardware_systems+0x68>
        send_bluetooth_message("✅ MPU9250 gyroscope initialized successfully\r\n");
 8001b64:	481a      	ldr	r0, [pc, #104]	@ (8001bd0 <initialize_hardware_systems+0xb4>)
 8001b66:	f7ff fafb 	bl	8001160 <send_bluetooth_message>
        send_bluetooth_message("⚠️ KEEP ROBOT STATIONARY during gyro calibration!\r\n");
 8001b6a:	481a      	ldr	r0, [pc, #104]	@ (8001bd4 <initialize_hardware_systems+0xb8>)
 8001b6c:	f7ff faf8 	bl	8001160 <send_bluetooth_message>
        HAL_Delay(2000);
 8001b70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b74:	f004 fd5a 	bl	800662c <HAL_Delay>
        mpu9250_calibrate_bias();
 8001b78:	f7ff fde2 	bl	8001740 <mpu9250_calibrate_bias>
        send_bluetooth_message("✅ Gyro calibration complete\r\n");
 8001b7c:	4816      	ldr	r0, [pc, #88]	@ (8001bd8 <initialize_hardware_systems+0xbc>)
 8001b7e:	f7ff faef 	bl	8001160 <send_bluetooth_message>
 8001b82:	e002      	b.n	8001b8a <initialize_hardware_systems+0x6e>
    } else {
        send_bluetooth_message("⚠️ Gyro initialization failed - using basic movement\r\n");
 8001b84:	4815      	ldr	r0, [pc, #84]	@ (8001bdc <initialize_hardware_systems+0xc0>)
 8001b86:	f7ff faeb 	bl	8001160 <send_bluetooth_message>
    }

    // Initialize encoders
    start_encoders();
 8001b8a:	f001 ff89 	bl	8003aa0 <start_encoders>
    HAL_Delay(100);
 8001b8e:	2064      	movs	r0, #100	@ 0x64
 8001b90:	f004 fd4c 	bl	800662c <HAL_Delay>

    // Test encoder functionality
    if (get_left_encoder_total() == 0 && get_right_encoder_total() == 0) {
 8001b94:	f001 ff4a 	bl	8003a2c <get_left_encoder_total>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d108      	bne.n	8001bb0 <initialize_hardware_systems+0x94>
 8001b9e:	f001 ff4f 	bl	8003a40 <get_right_encoder_total>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d103      	bne.n	8001bb0 <initialize_hardware_systems+0x94>
        send_bluetooth_message("⚠️ WARNING: Encoders may not be working properly\r\n");
 8001ba8:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <initialize_hardware_systems+0xc4>)
 8001baa:	f7ff fad9 	bl	8001160 <send_bluetooth_message>
 8001bae:	e002      	b.n	8001bb6 <initialize_hardware_systems+0x9a>
    } else {
        send_bluetooth_message("✅ Encoders initialized and responding\r\n");
 8001bb0:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <initialize_hardware_systems+0xc8>)
 8001bb2:	f7ff fad5 	bl	8001160 <send_bluetooth_message>
    }

    // Initialize maze exploration system
    initialize_maze_exploration();
 8001bb6:	f000 fe5f 	bl	8002878 <initialize_maze_exploration>

    send_bluetooth_message("✅ All systems initialized successfully!\r\n");
 8001bba:	480b      	ldr	r0, [pc, #44]	@ (8001be8 <initialize_hardware_systems+0xcc>)
 8001bbc:	f7ff fad0 	bl	8001160 <send_bluetooth_message>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0800e180 	.word	0x0800e180
 8001bc8:	20000390 	.word	0x20000390
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	0800e1b4 	.word	0x0800e1b4
 8001bd4:	0800e1e8 	.word	0x0800e1e8
 8001bd8:	0800e220 	.word	0x0800e220
 8001bdc:	0800e240 	.word	0x0800e240
 8001be0:	0800e27c 	.word	0x0800e27c
 8001be4:	0800e2b4 	.word	0x0800e2b4
 8001be8:	0800e2e0 	.word	0x0800e2e0

08001bec <run_system_diagnostics>:

/**
 * @brief Run comprehensive system diagnostics
 */
static void run_system_diagnostics(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🔧 SYSTEM DIAGNOSTICS 🔧\r\n");
 8001bf0:	4821      	ldr	r0, [pc, #132]	@ (8001c78 <run_system_diagnostics+0x8c>)
 8001bf2:	f7ff fab5 	bl	8001160 <send_bluetooth_message>

    // Test sensors
    update_sensors();
 8001bf6:	f002 fd7d 	bl	80046f4 <update_sensors>
    if (sensors.battery == 0 && sensors.front_left == 0 &&
 8001bfa:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <run_system_diagnostics+0x90>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d113      	bne.n	8001c2a <run_system_diagnostics+0x3e>
 8001c02:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <run_system_diagnostics+0x90>)
 8001c04:	891b      	ldrh	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10f      	bne.n	8001c2a <run_system_diagnostics+0x3e>
        sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <run_system_diagnostics+0x90>)
 8001c0c:	885b      	ldrh	r3, [r3, #2]
    if (sensors.battery == 0 && sensors.front_left == 0 &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10b      	bne.n	8001c2a <run_system_diagnostics+0x3e>
        sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8001c12:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <run_system_diagnostics+0x90>)
 8001c14:	88db      	ldrh	r3, [r3, #6]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <run_system_diagnostics+0x3e>
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <run_system_diagnostics+0x90>)
 8001c1c:	889b      	ldrh	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d103      	bne.n	8001c2a <run_system_diagnostics+0x3e>
        send_bluetooth_message("❌ CRITICAL: All sensors reading zero - check connections!\r\n");
 8001c22:	4817      	ldr	r0, [pc, #92]	@ (8001c80 <run_system_diagnostics+0x94>)
 8001c24:	f7ff fa9c 	bl	8001160 <send_bluetooth_message>
 8001c28:	e004      	b.n	8001c34 <run_system_diagnostics+0x48>
    } else {
        send_bluetooth_message("✅ Sensors responding normally\r\n");
 8001c2a:	4816      	ldr	r0, [pc, #88]	@ (8001c84 <run_system_diagnostics+0x98>)
 8001c2c:	f7ff fa98 	bl	8001160 <send_bluetooth_message>
        send_sensor_data();
 8001c30:	f7ff fb7e 	bl	8001330 <send_sensor_data>
    }

    // Test battery
    send_battery_status();
 8001c34:	f7ff fc42 	bl	80014bc <send_battery_status>

    // Test gyro if available
    if (mpu9250_is_initialized()) {
 8001c38:	f7ff fe0e 	bl	8001858 <mpu9250_is_initialized>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <run_system_diagnostics+0x5a>
        mpu9250_send_status();
 8001c42:	f7ff ff03 	bl	8001a4c <mpu9250_send_status>
    }

    // Test encoders
    send_encoder_status();
 8001c46:	f002 f905 	bl	8003e54 <send_encoder_status>

    // System health check
    if (system_health_check()) {
 8001c4a:	f003 fb49 	bl	80052e0 <system_health_check>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <run_system_diagnostics+0x76>
        send_bluetooth_message("✅ System health check PASSED\r\n");
 8001c54:	480c      	ldr	r0, [pc, #48]	@ (8001c88 <run_system_diagnostics+0x9c>)
 8001c56:	f7ff fa83 	bl	8001160 <send_bluetooth_message>
        system_ready = true;
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <run_system_diagnostics+0xa0>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	e005      	b.n	8001c6e <run_system_diagnostics+0x82>
    } else {
        send_bluetooth_message("⚠️ System health check FAILED - check warnings above\r\n");
 8001c62:	480b      	ldr	r0, [pc, #44]	@ (8001c90 <run_system_diagnostics+0xa4>)
 8001c64:	f7ff fa7c 	bl	8001160 <send_bluetooth_message>
        system_ready = true;//false;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <run_system_diagnostics+0xa0>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
    }

    send_bluetooth_message("🔧 Diagnostics complete!\r\n");
 8001c6e:	4809      	ldr	r0, [pc, #36]	@ (8001c94 <run_system_diagnostics+0xa8>)
 8001c70:	f7ff fa76 	bl	8001160 <send_bluetooth_message>
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800e30c 	.word	0x0800e30c
 8001c7c:	20000d7c 	.word	0x20000d7c
 8001c80:	0800e330 	.word	0x0800e330
 8001c84:	0800e370 	.word	0x0800e370
 8001c88:	0800e394 	.word	0x0800e394
 8001c8c:	20000db2 	.word	0x20000db2
 8001c90:	0800e3b8 	.word	0x0800e3b8
 8001c94:	0800e3f4 	.word	0x0800e3f4

08001c98 <send_periodic_status>:


/**
 * @brief Send periodic status updates
 */
static void send_periodic_status(void) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8001c9e:	f004 fcb9 	bl	8006614 <HAL_GetTick>
 8001ca2:	6078      	str	r0, [r7, #4]

    // Send status every 10 seconds when not exploring
    if (current_time - last_status_time > 10000 && !exploration_started) {
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <send_periodic_status+0x80>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d916      	bls.n	8001ce2 <send_periodic_status+0x4a>
 8001cb4:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <send_periodic_status+0x84>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	f083 0301 	eor.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00f      	beq.n	8001ce2 <send_periodic_status+0x4a>
        send_battery_status();
 8001cc2:	f7ff fbfb 	bl	80014bc <send_battery_status>

        if (system_ready) {
 8001cc6:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <send_periodic_status+0x88>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <send_periodic_status+0x3e>
            send_bluetooth_message("💚 System ready - Press LEFT button to start exploration\r\n");
 8001cce:	4815      	ldr	r0, [pc, #84]	@ (8001d24 <send_periodic_status+0x8c>)
 8001cd0:	f7ff fa46 	bl	8001160 <send_bluetooth_message>
 8001cd4:	e002      	b.n	8001cdc <send_periodic_status+0x44>
        } else {
            send_bluetooth_message("🔴 System not ready - Check diagnostics\r\n");
 8001cd6:	4814      	ldr	r0, [pc, #80]	@ (8001d28 <send_periodic_status+0x90>)
 8001cd8:	f7ff fa42 	bl	8001160 <send_bluetooth_message>
        }

        last_status_time = current_time;
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8001d18 <send_periodic_status+0x80>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
    }

    // Blink LED to show system is alive
    if (current_time - last_blink_time > 2000) {
 8001ce2:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <send_periodic_status+0x94>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001cee:	d90f      	bls.n	8001d10 <send_periodic_status+0x78>
        if (system_ready) {
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <send_periodic_status+0x88>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d004      	beq.n	8001d02 <send_periodic_status+0x6a>
            HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	480d      	ldr	r0, [pc, #52]	@ (8001d30 <send_periodic_status+0x98>)
 8001cfc:	f005 fbed 	bl	80074da <HAL_GPIO_TogglePin>
 8001d00:	e003      	b.n	8001d0a <send_periodic_status+0x72>
        } else {
            // Fast blink if system not ready
            HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8001d02:	2120      	movs	r1, #32
 8001d04:	480a      	ldr	r0, [pc, #40]	@ (8001d30 <send_periodic_status+0x98>)
 8001d06:	f005 fbe8 	bl	80074da <HAL_GPIO_TogglePin>
        }
        last_blink_time = current_time;
 8001d0a:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <send_periodic_status+0x94>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6013      	str	r3, [r2, #0]
    }
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000db4 	.word	0x20000db4
 8001d1c:	20000db3 	.word	0x20000db3
 8001d20:	20000db2 	.word	0x20000db2
 8001d24:	0800e414 	.word	0x0800e414
 8001d28:	0800e454 	.word	0x0800e454
 8001d2c:	20000db8 	.word	0x20000db8
 8001d30:	40020400 	.word	0x40020400

08001d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d38:	f004 fc06 	bl	8006548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3c:	f000 f8c4 	bl	8001ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d40:	f000 fbbc 	bl	80024bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d44:	f000 f928 	bl	8001f98 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001d48:	f000 f978 	bl	800203c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001d4c:	f000 f9ac 	bl	80020a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d50:	f000 fa4a 	bl	80021e8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001d54:	f000 fb34 	bl	80023c0 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001d58:	f000 fb86 	bl	8002468 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001d5c:	f000 fa98 	bl	8002290 <MX_TIM3_Init>


  // main.c — after SystemClock_Config();


  dwt_delay_init(HAL_RCC_GetHCLKFreq());
 8001d60:	f006 f812 	bl	8007d88 <HAL_RCC_GetHCLKFreq>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fd60 	bl	800282c <dwt_delay_init>


  /* USER CODE BEGIN 2 */
  // Initialize all hardware systems
  initialize_hardware_systems();
 8001d6c:	f7ff fed6 	bl	8001b1c <initialize_hardware_systems>

  // Run system diagnostics
  run_system_diagnostics();
 8001d70:	f7ff ff3c 	bl	8001bec <run_system_diagnostics>

  // Play startup sequence
  play_startup_tone();
 8001d74:	f7ff f954 	bl	8001020 <play_startup_tone>
  led_sequence_startup();
 8001d78:	f003 fa16 	bl	80051a8 <led_sequence_startup>

  // Send startup message
  send_bluetooth_message("\r\n🎮 MICROMOUSE CONTROL READY 🎮\r\n");
 8001d7c:	4844      	ldr	r0, [pc, #272]	@ (8001e90 <main+0x15c>)
 8001d7e:	f7ff f9ef 	bl	8001160 <send_bluetooth_message>
  send_bluetooth_message("LEFT button: Start exploration\r\n");
 8001d82:	4844      	ldr	r0, [pc, #272]	@ (8001e94 <main+0x160>)
 8001d84:	f7ff f9ec 	bl	8001160 <send_bluetooth_message>
  send_bluetooth_message("RIGHT button: Status/Emergency stop\r\n");
 8001d88:	4843      	ldr	r0, [pc, #268]	@ (8001e98 <main+0x164>)
 8001d8a:	f7ff f9e9 	bl	8001160 <send_bluetooth_message>
  send_bluetooth_message("Waiting for user input...\r\n");
 8001d8e:	4843      	ldr	r0, [pc, #268]	@ (8001e9c <main+0x168>)
 8001d90:	f7ff f9e6 	bl	8001160 <send_bluetooth_message>

    // Initial status
  last_status_time = HAL_GetTick();
 8001d94:	f004 fc3e 	bl	8006614 <HAL_GetTick>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4a41      	ldr	r2, [pc, #260]	@ (8001ea0 <main+0x16c>)
 8001d9c:	6013      	str	r3, [r2, #0]
  last_blink_time = HAL_GetTick();
 8001d9e:	f004 fc39 	bl	8006614 <HAL_GetTick>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea4 <main+0x170>)
 8001da6:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN 3 */

	//update_sensors();
	// Handle button events
	if (button_pressed == 1) {
 8001da8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea8 <main+0x174>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d133      	bne.n	8001e1a <main+0xe6>
		button_pressed = 0;
 8001db2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea8 <main+0x174>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]

		if (!exploration_started && system_ready) {
 8001db8:	4b3c      	ldr	r3, [pc, #240]	@ (8001eac <main+0x178>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	f083 0301 	eor.w	r3, r3, #1
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <main+0xb8>
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb0 <main+0x17c>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00e      	beq.n	8001dec <main+0xb8>
			send_bluetooth_message("\r\n🚀 STARTING MAZE EXPLORATION! 🚀\r\n");
 8001dce:	4839      	ldr	r0, [pc, #228]	@ (8001eb4 <main+0x180>)
 8001dd0:	f7ff f9c6 	bl	8001160 <send_bluetooth_message>
			play_confirmation_tone();
 8001dd4:	f7ff f940 	bl	8001058 <play_confirmation_tone>
			HAL_Delay(1000);
 8001dd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ddc:	f004 fc26 	bl	800662c <HAL_Delay>

			exploration_started = true;
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <main+0x178>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
			run_maze_exploration_sequence();
 8001de6:	f001 fcdd 	bl	80037a4 <run_maze_exploration_sequence>
 8001dea:	e016      	b.n	8001e1a <main+0xe6>

		} else if (is_exploration_complete()) {
 8001dec:	f001 fd70 	bl	80038d0 <is_exploration_complete>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <main+0xce>
			send_bluetooth_message("\r\n🏁 EXPLORATION COMPLETE - Ready for speed run! 🏁\r\n");
 8001df6:	4830      	ldr	r0, [pc, #192]	@ (8001eb8 <main+0x184>)
 8001df8:	f7ff f9b2 	bl	8001160 <send_bluetooth_message>
			send_performance_metrics();
 8001dfc:	f7ff faf0 	bl	80013e0 <send_performance_metrics>
 8001e00:	e00b      	b.n	8001e1a <main+0xe6>

		} else if (!system_ready) {
 8001e02:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb0 <main+0x17c>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	f083 0301 	eor.w	r3, r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <main+0xe6>
			send_bluetooth_message("⚠️ System not ready - check diagnostics!\r\n");
 8001e10:	482a      	ldr	r0, [pc, #168]	@ (8001ebc <main+0x188>)
 8001e12:	f7ff f9a5 	bl	8001160 <send_bluetooth_message>
			play_error_tone();
 8001e16:	f7ff f95d 	bl	80010d4 <play_error_tone>
		}
	}

	if (button_pressed == 2) {
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <main+0x174>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d128      	bne.n	8001e76 <main+0x142>
		button_pressed = 0;
 8001e24:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <main+0x174>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]

		// Right button - emergency stop or reset
		if (exploration_started && !is_exploration_complete()) {
 8001e2a:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <main+0x178>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <main+0x124>
 8001e32:	f001 fd4d 	bl	80038d0 <is_exploration_complete>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f083 0301 	eor.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <main+0x124>
			send_bluetooth_message("🛑 EMERGENCY STOP!\r\n");
 8001e42:	481f      	ldr	r0, [pc, #124]	@ (8001ec0 <main+0x18c>)
 8001e44:	f7ff f98c 	bl	8001160 <send_bluetooth_message>
			stop_motors();
 8001e48:	f001 ff0e 	bl	8003c68 <stop_motors>
			play_error_tone();
 8001e4c:	f7ff f942 	bl	80010d4 <play_error_tone>
			exploration_started = false;
 8001e50:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <main+0x178>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	e00e      	b.n	8001e76 <main+0x142>
		} else {
			// Send detailed status
			send_bluetooth_message("\r\n📊 DETAILED STATUS REPORT 📊\r\n");
 8001e58:	481a      	ldr	r0, [pc, #104]	@ (8001ec4 <main+0x190>)
 8001e5a:	f7ff f981 	bl	8001160 <send_bluetooth_message>
			send_maze_state();
 8001e5e:	f7ff f9bb 	bl	80011d8 <send_maze_state>
			send_sensor_data();
 8001e62:	f7ff fa65 	bl	8001330 <send_sensor_data>
			send_position_data();
 8001e66:	f7ff fa91 	bl	800138c <send_position_data>
			if (exploration_started) {
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <main+0x178>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <main+0x142>
				send_performance_metrics();
 8001e72:	f7ff fab5 	bl	80013e0 <send_performance_metrics>
			}
		}
	}

	// Send periodic status updates
	send_periodic_status();
 8001e76:	f7ff ff0f 	bl	8001c98 <send_periodic_status>

	// If exploration is running, let it continue
	if (exploration_started && !is_exploration_complete()) {
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <main+0x178>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <main+0x152>
 8001e82:	f001 fd25 	bl	80038d0 <is_exploration_complete>
		// The exploration runs in run_maze_exploration_sequence()
		// and handles its own loop until complete
	}

	// Small delay to prevent overwhelming the system
	HAL_Delay(50);
 8001e86:	2032      	movs	r0, #50	@ 0x32
 8001e88:	f004 fbd0 	bl	800662c <HAL_Delay>
	if (button_pressed == 1) {
 8001e8c:	e78c      	b.n	8001da8 <main+0x74>
 8001e8e:	bf00      	nop
 8001e90:	0800e480 	.word	0x0800e480
 8001e94:	0800e4a8 	.word	0x0800e4a8
 8001e98:	0800e4cc 	.word	0x0800e4cc
 8001e9c:	0800e4f4 	.word	0x0800e4f4
 8001ea0:	20000db4 	.word	0x20000db4
 8001ea4:	20000db8 	.word	0x20000db8
 8001ea8:	20000db0 	.word	0x20000db0
 8001eac:	20000db3 	.word	0x20000db3
 8001eb0:	20000db2 	.word	0x20000db2
 8001eb4:	0800e510 	.word	0x0800e510
 8001eb8:	0800e53c 	.word	0x0800e53c
 8001ebc:	0800e578 	.word	0x0800e578
 8001ec0:	0800e5a8 	.word	0x0800e5a8
 8001ec4:	0800e5c0 	.word	0x0800e5c0

08001ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b094      	sub	sp, #80	@ 0x50
 8001ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ece:	f107 0320 	add.w	r3, r7, #32
 8001ed2:	2230      	movs	r2, #48	@ 0x30
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 fc70 	bl	800b7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <SystemClock_Config+0xc8>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	4a26      	ldr	r2, [pc, #152]	@ (8001f90 <SystemClock_Config+0xc8>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efc:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <SystemClock_Config+0xc8>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <SystemClock_Config+0xcc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <SystemClock_Config+0xcc>)
 8001f12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <SystemClock_Config+0xcc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f30:	2302      	movs	r3, #2
 8001f32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f34:	2300      	movs	r3, #0
 8001f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f38:	2310      	movs	r3, #16
 8001f3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f3c:	23a8      	movs	r3, #168	@ 0xa8
 8001f3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f40:	2302      	movs	r3, #2
 8001f42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f44:	2304      	movs	r3, #4
 8001f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f005 faf7 	bl	8007540 <HAL_RCC_OscConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f58:	f000 fbce 	bl	80026f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f60:	2302      	movs	r3, #2
 8001f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	2102      	movs	r1, #2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f005 fd59 	bl	8007a30 <HAL_RCC_ClockConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f84:	f000 fbb8 	bl	80026f8 <Error_Handler>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3750      	adds	r7, #80	@ 0x50
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40007000 	.word	0x40007000

08001f98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001faa:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fac:	4a21      	ldr	r2, [pc, #132]	@ (8002034 <MX_ADC1_Init+0x9c>)
 8001fae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fca:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fda:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <MX_ADC1_Init+0xa0>)
 8001fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fde:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ff8:	480d      	ldr	r0, [pc, #52]	@ (8002030 <MX_ADC1_Init+0x98>)
 8001ffa:	f004 fb3b 	bl	8006674 <HAL_ADC_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002004:	f000 fb78 	bl	80026f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002008:	2300      	movs	r3, #0
 800200a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800200c:	2301      	movs	r3, #1
 800200e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002010:	2304      	movs	r3, #4
 8002012:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002014:	463b      	mov	r3, r7
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	@ (8002030 <MX_ADC1_Init+0x98>)
 800201a:	f004 fcef 	bl	80069fc <HAL_ADC_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002024:	f000 fb68 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000260 	.word	0x20000260
 8002034:	40012000 	.word	0x40012000
 8002038:	0f000001 	.word	0x0f000001

0800203c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002040:	4b17      	ldr	r3, [pc, #92]	@ (80020a0 <MX_SPI2_Init+0x64>)
 8002042:	4a18      	ldr	r2, [pc, #96]	@ (80020a4 <MX_SPI2_Init+0x68>)
 8002044:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <MX_SPI2_Init+0x64>)
 8002048:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800204c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800204e:	4b14      	ldr	r3, [pc, #80]	@ (80020a0 <MX_SPI2_Init+0x64>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002054:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <MX_SPI2_Init+0x64>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800205a:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <MX_SPI2_Init+0x64>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002060:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <MX_SPI2_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <MX_SPI2_Init+0x64>)
 8002068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800206c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800206e:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <MX_SPI2_Init+0x64>)
 8002070:	2230      	movs	r2, #48	@ 0x30
 8002072:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002074:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <MX_SPI2_Init+0x64>)
 8002076:	2200      	movs	r2, #0
 8002078:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <MX_SPI2_Init+0x64>)
 800207c:	2200      	movs	r2, #0
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002080:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <MX_SPI2_Init+0x64>)
 8002082:	2200      	movs	r2, #0
 8002084:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <MX_SPI2_Init+0x64>)
 8002088:	220a      	movs	r2, #10
 800208a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800208c:	4804      	ldr	r0, [pc, #16]	@ (80020a0 <MX_SPI2_Init+0x64>)
 800208e:	f005 feaf 	bl	8007df0 <HAL_SPI_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002098:	f000 fb2e 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	200002a8 	.word	0x200002a8
 80020a4:	40003800 	.word	0x40003800

080020a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b096      	sub	sp, #88	@ 0x58
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]
 80020d6:	615a      	str	r2, [r3, #20]
 80020d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2220      	movs	r2, #32
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f009 fb6b 	bl	800b7bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020e6:	4b3e      	ldr	r3, [pc, #248]	@ (80021e0 <MX_TIM1_Init+0x138>)
 80020e8:	4a3e      	ldr	r2, [pc, #248]	@ (80021e4 <MX_TIM1_Init+0x13c>)
 80020ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80020ec:	4b3c      	ldr	r3, [pc, #240]	@ (80021e0 <MX_TIM1_Init+0x138>)
 80020ee:	2214      	movs	r2, #20
 80020f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f2:	4b3b      	ldr	r3, [pc, #236]	@ (80021e0 <MX_TIM1_Init+0x138>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 80020f8:	4b39      	ldr	r3, [pc, #228]	@ (80021e0 <MX_TIM1_Init+0x138>)
 80020fa:	22c8      	movs	r2, #200	@ 0xc8
 80020fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fe:	4b38      	ldr	r3, [pc, #224]	@ (80021e0 <MX_TIM1_Init+0x138>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002104:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <MX_TIM1_Init+0x138>)
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800210a:	4b35      	ldr	r3, [pc, #212]	@ (80021e0 <MX_TIM1_Init+0x138>)
 800210c:	2280      	movs	r2, #128	@ 0x80
 800210e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002110:	4833      	ldr	r0, [pc, #204]	@ (80021e0 <MX_TIM1_Init+0x138>)
 8002112:	f006 fc3f 	bl	8008994 <HAL_TIM_Base_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800211c:	f000 faec 	bl	80026f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002124:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002126:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800212a:	4619      	mov	r1, r3
 800212c:	482c      	ldr	r0, [pc, #176]	@ (80021e0 <MX_TIM1_Init+0x138>)
 800212e:	f007 f8d3 	bl	80092d8 <HAL_TIM_ConfigClockSource>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002138:	f000 fade 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800213c:	4828      	ldr	r0, [pc, #160]	@ (80021e0 <MX_TIM1_Init+0x138>)
 800213e:	f006 fc78 	bl	8008a32 <HAL_TIM_PWM_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002148:	f000 fad6 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002154:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002158:	4619      	mov	r1, r3
 800215a:	4821      	ldr	r0, [pc, #132]	@ (80021e0 <MX_TIM1_Init+0x138>)
 800215c:	f007 fc88 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002166:	f000 fac7 	bl	80026f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216a:	2360      	movs	r3, #96	@ 0x60
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 800216e:	2364      	movs	r3, #100	@ 0x64
 8002170:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002176:	2300      	movs	r3, #0
 8002178:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800218a:	2208      	movs	r2, #8
 800218c:	4619      	mov	r1, r3
 800218e:	4814      	ldr	r0, [pc, #80]	@ (80021e0 <MX_TIM1_Init+0x138>)
 8002190:	f006 ffe0 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800219a:	f000 faad 	bl	80026f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	4619      	mov	r1, r3
 80021c0:	4807      	ldr	r0, [pc, #28]	@ (80021e0 <MX_TIM1_Init+0x138>)
 80021c2:	f007 fcc3 	bl	8009b4c <HAL_TIMEx_ConfigBreakDeadTime>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80021cc:	f000 fa94 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021d0:	4803      	ldr	r0, [pc, #12]	@ (80021e0 <MX_TIM1_Init+0x138>)
 80021d2:	f002 fdcb 	bl	8004d6c <HAL_TIM_MspPostInit>

}
 80021d6:	bf00      	nop
 80021d8:	3758      	adds	r7, #88	@ 0x58
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000300 	.word	0x20000300
 80021e4:	40010000 	.word	0x40010000

080021e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	@ 0x30
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	2224      	movs	r2, #36	@ 0x24
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f009 fae0 	bl	800b7bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002204:	4b21      	ldr	r3, [pc, #132]	@ (800228c <MX_TIM2_Init+0xa4>)
 8002206:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800220a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <MX_TIM2_Init+0xa4>)
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <MX_TIM2_Init+0xa4>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002218:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <MX_TIM2_Init+0xa4>)
 800221a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800221e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <MX_TIM2_Init+0xa4>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002226:	4b19      	ldr	r3, [pc, #100]	@ (800228c <MX_TIM2_Init+0xa4>)
 8002228:	2280      	movs	r2, #128	@ 0x80
 800222a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800222c:	2303      	movs	r3, #3
 800222e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002234:	2301      	movs	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002244:	2301      	movs	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002248:	2300      	movs	r3, #0
 800224a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	4619      	mov	r1, r3
 8002256:	480d      	ldr	r0, [pc, #52]	@ (800228c <MX_TIM2_Init+0xa4>)
 8002258:	f006 fd58 	bl	8008d0c <HAL_TIM_Encoder_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002262:	f000 fa49 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4806      	ldr	r0, [pc, #24]	@ (800228c <MX_TIM2_Init+0xa4>)
 8002274:	f007 fbfc 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800227e:	f000 fa3b 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	3730      	adds	r7, #48	@ 0x30
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000348 	.word	0x20000348

08002290 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08e      	sub	sp, #56	@ 0x38
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002296:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a4:	f107 0320 	add.w	r3, r7, #32
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	615a      	str	r2, [r3, #20]
 80022be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022c0:	4b3d      	ldr	r3, [pc, #244]	@ (80023b8 <MX_TIM3_Init+0x128>)
 80022c2:	4a3e      	ldr	r2, [pc, #248]	@ (80023bc <MX_TIM3_Init+0x12c>)
 80022c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80022c6:	4b3c      	ldr	r3, [pc, #240]	@ (80023b8 <MX_TIM3_Init+0x128>)
 80022c8:	2204      	movs	r2, #4
 80022ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022cc:	4b3a      	ldr	r3, [pc, #232]	@ (80023b8 <MX_TIM3_Init+0x128>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 80022d2:	4b39      	ldr	r3, [pc, #228]	@ (80023b8 <MX_TIM3_Init+0x128>)
 80022d4:	f240 3246 	movw	r2, #838	@ 0x346
 80022d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022da:	4b37      	ldr	r3, [pc, #220]	@ (80023b8 <MX_TIM3_Init+0x128>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022e0:	4b35      	ldr	r3, [pc, #212]	@ (80023b8 <MX_TIM3_Init+0x128>)
 80022e2:	2280      	movs	r2, #128	@ 0x80
 80022e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022e6:	4834      	ldr	r0, [pc, #208]	@ (80023b8 <MX_TIM3_Init+0x128>)
 80022e8:	f006 fb54 	bl	8008994 <HAL_TIM_Base_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80022f2:	f000 fa01 	bl	80026f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002300:	4619      	mov	r1, r3
 8002302:	482d      	ldr	r0, [pc, #180]	@ (80023b8 <MX_TIM3_Init+0x128>)
 8002304:	f006 ffe8 	bl	80092d8 <HAL_TIM_ConfigClockSource>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800230e:	f000 f9f3 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002312:	4829      	ldr	r0, [pc, #164]	@ (80023b8 <MX_TIM3_Init+0x128>)
 8002314:	f006 fb8d 	bl	8008a32 <HAL_TIM_PWM_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800231e:	f000 f9eb 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800232a:	f107 0320 	add.w	r3, r7, #32
 800232e:	4619      	mov	r1, r3
 8002330:	4821      	ldr	r0, [pc, #132]	@ (80023b8 <MX_TIM3_Init+0x128>)
 8002332:	f007 fb9d 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800233c:	f000 f9dc 	bl	80026f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002340:	2360      	movs	r3, #96	@ 0x60
 8002342:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	2200      	movs	r2, #0
 8002354:	4619      	mov	r1, r3
 8002356:	4818      	ldr	r0, [pc, #96]	@ (80023b8 <MX_TIM3_Init+0x128>)
 8002358:	f006 fefc 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002362:	f000 f9c9 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2204      	movs	r2, #4
 800236a:	4619      	mov	r1, r3
 800236c:	4812      	ldr	r0, [pc, #72]	@ (80023b8 <MX_TIM3_Init+0x128>)
 800236e:	f006 fef1 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002378:	f000 f9be 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	2208      	movs	r2, #8
 8002380:	4619      	mov	r1, r3
 8002382:	480d      	ldr	r0, [pc, #52]	@ (80023b8 <MX_TIM3_Init+0x128>)
 8002384:	f006 fee6 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800238e:	f000 f9b3 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	220c      	movs	r2, #12
 8002396:	4619      	mov	r1, r3
 8002398:	4807      	ldr	r0, [pc, #28]	@ (80023b8 <MX_TIM3_Init+0x128>)
 800239a:	f006 fedb 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80023a4:	f000 f9a8 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023a8:	4803      	ldr	r0, [pc, #12]	@ (80023b8 <MX_TIM3_Init+0x128>)
 80023aa:	f002 fcdf 	bl	8004d6c <HAL_TIM_MspPostInit>

}
 80023ae:	bf00      	nop
 80023b0:	3738      	adds	r7, #56	@ 0x38
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000390 	.word	0x20000390
 80023bc:	40000400 	.word	0x40000400

080023c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	@ 0x30
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	2224      	movs	r2, #36	@ 0x24
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f009 f9f4 	bl	800b7bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023dc:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <MX_TIM4_Init+0xa0>)
 80023de:	4a21      	ldr	r2, [pc, #132]	@ (8002464 <MX_TIM4_Init+0xa4>)
 80023e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <MX_TIM4_Init+0xa0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <MX_TIM4_Init+0xa0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002460 <MX_TIM4_Init+0xa0>)
 80023f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <MX_TIM4_Init+0xa0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023fc:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <MX_TIM4_Init+0xa0>)
 80023fe:	2280      	movs	r2, #128	@ 0x80
 8002400:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002402:	2303      	movs	r3, #3
 8002404:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800240a:	2301      	movs	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800241a:	2301      	movs	r3, #1
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	4619      	mov	r1, r3
 800242c:	480c      	ldr	r0, [pc, #48]	@ (8002460 <MX_TIM4_Init+0xa0>)
 800242e:	f006 fc6d 	bl	8008d0c <HAL_TIM_Encoder_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002438:	f000 f95e 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	4619      	mov	r1, r3
 8002448:	4805      	ldr	r0, [pc, #20]	@ (8002460 <MX_TIM4_Init+0xa0>)
 800244a:	f007 fb11 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002454:	f000 f950 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	3730      	adds	r7, #48	@ 0x30
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200003d8 	.word	0x200003d8
 8002464:	40000800 	.word	0x40000800

08002468 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <MX_USART6_UART_Init+0x4c>)
 800246e:	4a12      	ldr	r2, [pc, #72]	@ (80024b8 <MX_USART6_UART_Init+0x50>)
 8002470:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <MX_USART6_UART_Init+0x4c>)
 8002474:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002478:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <MX_USART6_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <MX_USART6_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002486:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <MX_USART6_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <MX_USART6_UART_Init+0x4c>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <MX_USART6_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <MX_USART6_UART_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800249e:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <MX_USART6_UART_Init+0x4c>)
 80024a0:	f007 fbba 	bl	8009c18 <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024aa:	f000 f925 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000420 	.word	0x20000420
 80024b8:	40011400 	.word	0x40011400

080024bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002604 <MX_GPIO_Init+0x148>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a4a      	ldr	r2, [pc, #296]	@ (8002604 <MX_GPIO_Init+0x148>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b48      	ldr	r3, [pc, #288]	@ (8002604 <MX_GPIO_Init+0x148>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4b44      	ldr	r3, [pc, #272]	@ (8002604 <MX_GPIO_Init+0x148>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a43      	ldr	r2, [pc, #268]	@ (8002604 <MX_GPIO_Init+0x148>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b41      	ldr	r3, [pc, #260]	@ (8002604 <MX_GPIO_Init+0x148>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <MX_GPIO_Init+0x148>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4a3c      	ldr	r2, [pc, #240]	@ (8002604 <MX_GPIO_Init+0x148>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4b3a      	ldr	r3, [pc, #232]	@ (8002604 <MX_GPIO_Init+0x148>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800252c:	4836      	ldr	r0, [pc, #216]	@ (8002608 <MX_GPIO_Init+0x14c>)
 800252e:	f004 ffbb 	bl	80074a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 8002532:	2200      	movs	r2, #0
 8002534:	f241 3130 	movw	r1, #4912	@ 0x1330
 8002538:	4834      	ldr	r0, [pc, #208]	@ (800260c <MX_GPIO_Init+0x150>)
 800253a:	f004 ffb5 	bl	80074a8 <HAL_GPIO_WritePin>
                          |EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 800253e:	2200      	movs	r2, #0
 8002540:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002544:	4832      	ldr	r0, [pc, #200]	@ (8002610 <MX_GPIO_Init+0x154>)
 8002546:	f004 ffaf 	bl	80074a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 800254a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800254e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002550:	2301      	movs	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	4619      	mov	r1, r3
 8002562:	4829      	ldr	r0, [pc, #164]	@ (8002608 <MX_GPIO_Init+0x14c>)
 8002564:	f004 fe1c 	bl	80071a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8002568:	2302      	movs	r3, #2
 800256a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800256c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	4619      	mov	r1, r3
 800257c:	4824      	ldr	r0, [pc, #144]	@ (8002610 <MX_GPIO_Init+0x154>)
 800257e:	f004 fe0f 	bl	80071a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 8002582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002588:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800258c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	4619      	mov	r1, r3
 8002598:	481c      	ldr	r0, [pc, #112]	@ (800260c <MX_GPIO_Init+0x150>)
 800259a:	f004 fe01 	bl	80071a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_LEFT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 800259e:	f241 3330 	movw	r3, #4912	@ 0x1330
 80025a2:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a4:	2301      	movs	r3, #1
 80025a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	4619      	mov	r1, r3
 80025b6:	4815      	ldr	r0, [pc, #84]	@ (800260c <MX_GPIO_Init+0x150>)
 80025b8:	f004 fdf2 	bl	80071a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_RIGHT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin;
 80025bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c2:	2301      	movs	r3, #1
 80025c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ce:	f107 030c 	add.w	r3, r7, #12
 80025d2:	4619      	mov	r1, r3
 80025d4:	480e      	ldr	r0, [pc, #56]	@ (8002610 <MX_GPIO_Init+0x154>)
 80025d6:	f004 fde3 	bl	80071a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2105      	movs	r1, #5
 80025de:	2007      	movs	r0, #7
 80025e0:	f004 fd15 	bl	800700e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80025e4:	2007      	movs	r0, #7
 80025e6:	f004 fd2e 	bl	8007046 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2105      	movs	r1, #5
 80025ee:	2028      	movs	r0, #40	@ 0x28
 80025f0:	f004 fd0d 	bl	800700e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025f4:	2028      	movs	r0, #40	@ 0x28
 80025f6:	f004 fd26 	bl	8007046 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80025fa:	bf00      	nop
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40020800 	.word	0x40020800
 800260c:	40020400 	.word	0x40020400
 8002610:	40020000 	.word	0x40020000

08002614 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 800261e:	f003 fff9 	bl	8006614 <HAL_GetTick>
 8002622:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 8002624:	4b11      	ldr	r3, [pc, #68]	@ (800266c <HAL_GPIO_EXTI_Callback+0x58>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2bc8      	cmp	r3, #200	@ 0xc8
 800262e:	d919      	bls.n	8002664 <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d109      	bne.n	800264a <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 8002636:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 800263c:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <HAL_GPIO_EXTI_Callback+0x60>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 8002642:	480d      	ldr	r0, [pc, #52]	@ (8002678 <HAL_GPIO_EXTI_Callback+0x64>)
 8002644:	f7fe fd8c 	bl	8001160 <send_bluetooth_message>
 8002648:	e009      	b.n	800265e <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002650:	d105      	bne.n	800265e <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 8002652:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002654:	2202      	movs	r2, #2
 8002656:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 8002658:	4808      	ldr	r0, [pc, #32]	@ (800267c <HAL_GPIO_EXTI_Callback+0x68>)
 800265a:	f7fe fd81 	bl	8001160 <send_bluetooth_message>
        }
        last_press = current_time;
 800265e:	4a03      	ldr	r2, [pc, #12]	@ (800266c <HAL_GPIO_EXTI_Callback+0x58>)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6013      	str	r3, [r2, #0]
    }
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000dbc 	.word	0x20000dbc
 8002670:	20000db0 	.word	0x20000db0
 8002674:	20000db1 	.word	0x20000db1
 8002678:	0800e5e8 	.word	0x0800e5e8
 800267c:	0800e600 	.word	0x0800e600

08002680 <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002694:	2301      	movs	r3, #1
 8002696:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002698:	2303      	movs	r3, #3
 800269a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	4619      	mov	r1, r3
 80026a4:	4812      	ldr	r0, [pc, #72]	@ (80026f0 <verify_adc_gpio_configuration+0x70>)
 80026a6:	f004 fd7b 	bl	80071a0 <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026aa:	2304      	movs	r3, #4
 80026ac:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	480f      	ldr	r0, [pc, #60]	@ (80026f0 <verify_adc_gpio_configuration+0x70>)
 80026b4:	f004 fd74 	bl	80071a0 <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026b8:	2308      	movs	r3, #8
 80026ba:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	4619      	mov	r1, r3
 80026c0:	480b      	ldr	r0, [pc, #44]	@ (80026f0 <verify_adc_gpio_configuration+0x70>)
 80026c2:	f004 fd6d 	bl	80071a0 <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026c6:	2310      	movs	r3, #16
 80026c8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	4619      	mov	r1, r3
 80026ce:	4808      	ldr	r0, [pc, #32]	@ (80026f0 <verify_adc_gpio_configuration+0x70>)
 80026d0:	f004 fd66 	bl	80071a0 <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026d4:	2320      	movs	r3, #32
 80026d6:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	4619      	mov	r1, r3
 80026dc:	4804      	ldr	r0, [pc, #16]	@ (80026f0 <verify_adc_gpio_configuration+0x70>)
 80026de:	f004 fd5f 	bl	80071a0 <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 80026e2:	4804      	ldr	r0, [pc, #16]	@ (80026f4 <verify_adc_gpio_configuration+0x74>)
 80026e4:	f7fe fd3c 	bl	8001160 <send_bluetooth_message>
}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40020000 	.word	0x40020000
 80026f4:	0800e618 	.word	0x0800e618

080026f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026fc:	b672      	cpsid	i
}
 80026fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002700:	2110      	movs	r1, #16
 8002702:	4806      	ldr	r0, [pc, #24]	@ (800271c <Error_Handler+0x24>)
 8002704:	f004 fee9 	bl	80074da <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8002708:	2120      	movs	r1, #32
 800270a:	4804      	ldr	r0, [pc, #16]	@ (800271c <Error_Handler+0x24>)
 800270c:	f004 fee5 	bl	80074da <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8002710:	2064      	movs	r0, #100	@ 0x64
 8002712:	f003 ff8b 	bl	800662c <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002716:	bf00      	nop
 8002718:	e7f2      	b.n	8002700 <Error_Handler+0x8>
 800271a:	bf00      	nop
 800271c:	40020400 	.word	0x40020400

08002720 <queue_init>:
} BFSQueue;

static BFSQueue bfs_queue;

/* Queue Operations */
static void queue_init(BFSQueue* q) {
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    q->head = q->tail = 0;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <queue_empty>:

static int queue_empty(BFSQueue* q) {
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    return q->head == q->tail;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800275c:	429a      	cmp	r2, r3
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <queue_push>:

static void queue_push(BFSQueue* q, Position pos) {
 8002772:	b480      	push	{r7}
 8002774:	b085      	sub	sp, #20
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	e883 0006 	stmia.w	r3, {r1, r2}
    if (q->tail < QUEUE_MAX_SIZE) {
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8002786:	2b9f      	cmp	r3, #159	@ 0x9f
 8002788:	dc0e      	bgt.n	80027a8 <queue_push+0x36>
        q->queue[q->tail++] = pos;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8002790:	1c59      	adds	r1, r3, #1
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f8c2 1504 	str.w	r1, [r2, #1284]	@ 0x504
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	1d3a      	adds	r2, r7, #4
 80027a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <queue_pop>:

static Position queue_pop(BFSQueue* q) {
 80027b4:	b490      	push	{r4, r7}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
    return q->queue[q->head++];
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80027c4:	1c59      	adds	r1, r3, #1
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	f8c2 1500 	str.w	r1, [r2, #1280]	@ 0x500
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	460c      	mov	r4, r1
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027da:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc90      	pop	{r4, r7}
 80027e6:	4770      	bx	lr

080027e8 <dwt_delay_us>:
static uint32_t dwt_cycles_per_us;

void dwt_delay_us(uint32_t us) {
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <dwt_delay_us+0x3c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * dwt_cycles_per_us;
 80027f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <dwt_delay_us+0x40>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks) { __NOP(); }
 8002802:	e000      	b.n	8002806 <dwt_delay_us+0x1e>
 8002804:	bf00      	nop
 8002806:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <dwt_delay_us+0x3c>)
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	d8f7      	bhi.n	8002804 <dwt_delay_us+0x1c>
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e0001000 	.word	0xe0001000
 8002828:	200012e0 	.word	0x200012e0

0800282c <dwt_delay_init>:
void dwt_delay_init(uint32_t cpu_hz) {
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <dwt_delay_init+0x3c>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a0b      	ldr	r2, [pc, #44]	@ (8002868 <dwt_delay_init+0x3c>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800283e:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002840:	4b0a      	ldr	r3, [pc, #40]	@ (800286c <dwt_delay_init+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a09      	ldr	r2, [pc, #36]	@ (800286c <dwt_delay_init+0x40>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6013      	str	r3, [r2, #0]
    dwt_cycles_per_us = cpu_hz / 1000000U; // e.g., 84 for 84 MHz
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a08      	ldr	r2, [pc, #32]	@ (8002870 <dwt_delay_init+0x44>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	0c9b      	lsrs	r3, r3, #18
 8002856:	4a07      	ldr	r2, [pc, #28]	@ (8002874 <dwt_delay_init+0x48>)
 8002858:	6013      	str	r3, [r2, #0]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000edf0 	.word	0xe000edf0
 800286c:	e0001000 	.word	0xe0001000
 8002870:	431bde83 	.word	0x431bde83
 8002874:	200012e0 	.word	0x200012e0

08002878 <initialize_maze_exploration>:


/**
 * @brief Initialize maze for exploration
 */
void initialize_maze_exploration(void) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n=== INITIALIZING MAZE EXPLORATION ===\r\n");
 800287e:	4863      	ldr	r0, [pc, #396]	@ (8002a0c <initialize_maze_exploration+0x194>)
 8002880:	f7fe fc6e 	bl	8001160 <send_bluetooth_message>

    // Initialize maze structure
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e04a      	b.n	8002920 <initialize_maze_exploration+0xa8>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	e041      	b.n	8002914 <initialize_maze_exploration+0x9c>
            maze[x][y].distance = MAX_DISTANCE;
 8002890:	495f      	ldr	r1, [pc, #380]	@ (8002a10 <initialize_maze_exploration+0x198>)
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	4413      	add	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	440b      	add	r3, r1
 80028a4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80028a8:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 80028aa:	4959      	ldr	r1, [pc, #356]	@ (8002a10 <initialize_maze_exploration+0x198>)
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	4413      	add	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	440b      	add	r3, r1
 80028be:	3304      	adds	r3, #4
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 80028c4:	4952      	ldr	r1, [pc, #328]	@ (8002a10 <initialize_maze_exploration+0x198>)
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	4413      	add	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	440b      	add	r3, r1
 80028d8:	330c      	adds	r3, #12
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

            // Initialize all walls as unknown (false)
            for (int dir = 0; dir < 4; dir++) {
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	e011      	b.n	8002908 <initialize_maze_exploration+0x90>
                maze[x][y].walls[dir] = false;
 80028e4:	494a      	ldr	r1, [pc, #296]	@ (8002a10 <initialize_maze_exploration+0x198>)
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	4413      	add	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	18ca      	adds	r2, r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	3305      	adds	r3, #5
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
            for (int dir = 0; dir < 4; dir++) {
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3301      	adds	r3, #1
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b03      	cmp	r3, #3
 800290c:	ddea      	ble.n	80028e4 <initialize_maze_exploration+0x6c>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3301      	adds	r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b0b      	cmp	r3, #11
 8002918:	ddba      	ble.n	8002890 <initialize_maze_exploration+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3301      	adds	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b0b      	cmp	r3, #11
 8002924:	ddb1      	ble.n	800288a <initialize_maze_exploration+0x12>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002926:	2300      	movs	r3, #0
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	e025      	b.n	8002978 <initialize_maze_exploration+0x100>
        maze[i][0].walls[SOUTH] = true;                    // Bottom boundary
 800292c:	4938      	ldr	r1, [pc, #224]	@ (8002a10 <initialize_maze_exploration+0x198>)
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	019b      	lsls	r3, r3, #6
 8002938:	440b      	add	r3, r1
 800293a:	3307      	adds	r3, #7
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true;          // Top boundary
 8002940:	4933      	ldr	r1, [pc, #204]	@ (8002a10 <initialize_maze_exploration+0x198>)
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	019b      	lsls	r3, r3, #6
 800294c:	440b      	add	r3, r1
 800294e:	33b5      	adds	r3, #181	@ 0xb5
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;                     // Left boundary
 8002954:	4a2e      	ldr	r2, [pc, #184]	@ (8002a10 <initialize_maze_exploration+0x198>)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	4413      	add	r3, r2
 800295c:	3308      	adds	r3, #8
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;           // Right boundary
 8002962:	4a2b      	ldr	r2, [pc, #172]	@ (8002a10 <initialize_maze_exploration+0x198>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	f603 0346 	addw	r3, r3, #2118	@ 0x846
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b0b      	cmp	r3, #11
 800297c:	ddd6      	ble.n	800292c <initialize_maze_exploration+0xb4>
    }

    // Set maze center coordinates
    maze_center_x1 = MAZE_SIZE / 2 - 1;
 800297e:	4b25      	ldr	r3, [pc, #148]	@ (8002a14 <initialize_maze_exploration+0x19c>)
 8002980:	2205      	movs	r2, #5
 8002982:	601a      	str	r2, [r3, #0]
    maze_center_y1 = MAZE_SIZE / 2 - 1;
 8002984:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <initialize_maze_exploration+0x1a0>)
 8002986:	2205      	movs	r2, #5
 8002988:	601a      	str	r2, [r3, #0]
    maze_center_x2 = MAZE_SIZE / 2;
 800298a:	4b24      	ldr	r3, [pc, #144]	@ (8002a1c <initialize_maze_exploration+0x1a4>)
 800298c:	2206      	movs	r2, #6
 800298e:	601a      	str	r2, [r3, #0]
    maze_center_y2 = MAZE_SIZE / 2;
 8002990:	4b23      	ldr	r3, [pc, #140]	@ (8002a20 <initialize_maze_exploration+0x1a8>)
 8002992:	2206      	movs	r2, #6
 8002994:	601a      	str	r2, [r3, #0]

    // Initialize robot state
    robot.x = 0;
 8002996:	4b23      	ldr	r3, [pc, #140]	@ (8002a24 <initialize_maze_exploration+0x1ac>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 800299c:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <initialize_maze_exploration+0x1ac>)
 800299e:	2200      	movs	r2, #0
 80029a0:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 80029a2:	4b20      	ldr	r3, [pc, #128]	@ (8002a24 <initialize_maze_exploration+0x1ac>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 80029a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a24 <initialize_maze_exploration+0x1ac>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 80029ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <initialize_maze_exploration+0x1ac>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <initialize_maze_exploration+0x1ac>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]

    // Mark starting position
    maze[0][0].visited = true;
 80029ba:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <initialize_maze_exploration+0x198>)
 80029bc:	2201      	movs	r2, #1
 80029be:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 80029c0:	4b13      	ldr	r3, [pc, #76]	@ (8002a10 <initialize_maze_exploration+0x198>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	60da      	str	r2, [r3, #12]

    // Reset exploration flags
    exploration_completed = 0;
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <initialize_maze_exploration+0x1b0>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
    optimal_path_calculated = 0;
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <initialize_maze_exploration+0x1b4>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

    send_bluetooth_printf("Maze Size: %dx%d\r\n", MAZE_SIZE, MAZE_SIZE);
 80029d2:	220c      	movs	r2, #12
 80029d4:	210c      	movs	r1, #12
 80029d6:	4816      	ldr	r0, [pc, #88]	@ (8002a30 <initialize_maze_exploration+0x1b8>)
 80029d8:	f7fe fbd8 	bl	800118c <send_bluetooth_printf>
    send_bluetooth_printf("Center: (%d,%d) to (%d,%d)\r\n",
 80029dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <initialize_maze_exploration+0x19c>)
 80029de:	6819      	ldr	r1, [r3, #0]
 80029e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <initialize_maze_exploration+0x1a0>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <initialize_maze_exploration+0x1a4>)
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <initialize_maze_exploration+0x1a8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	4603      	mov	r3, r0
 80029f0:	4810      	ldr	r0, [pc, #64]	@ (8002a34 <initialize_maze_exploration+0x1bc>)
 80029f2:	f7fe fbcb 	bl	800118c <send_bluetooth_printf>
                         maze_center_x1, maze_center_y1, maze_center_x2, maze_center_y2);
    send_bluetooth_message("Maze exploration initialized successfully!\r\n");
 80029f6:	4810      	ldr	r0, [pc, #64]	@ (8002a38 <initialize_maze_exploration+0x1c0>)
 80029f8:	f7fe fbb2 	bl	8001160 <send_bluetooth_message>
    send_bluetooth_message("==========================================\r\n");
 80029fc:	480f      	ldr	r0, [pc, #60]	@ (8002a3c <initialize_maze_exploration+0x1c4>)
 80029fe:	f7fe fbaf 	bl	8001160 <send_bluetooth_message>
}
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	0800e640 	.word	0x0800e640
 8002a10:	20000468 	.word	0x20000468
 8002a14:	20000dc0 	.word	0x20000dc0
 8002a18:	20000dc4 	.word	0x20000dc4
 8002a1c:	20000dc8 	.word	0x20000dc8
 8002a20:	20000dcc 	.word	0x20000dcc
 8002a24:	20000d68 	.word	0x20000d68
 8002a28:	20000dd0 	.word	0x20000dd0
 8002a2c:	20000dd4 	.word	0x20000dd4
 8002a30:	0800e66c 	.word	0x0800e66c
 8002a34:	0800e680 	.word	0x0800e680
 8002a38:	0800e6a0 	.word	0x0800e6a0
 8002a3c:	0800e6d0 	.word	0x0800e6d0

08002a40 <flood_fill_algorithm>:

/**
 * @brief Flood fill algorithm implementation
 */
void flood_fill_algorithm(void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b098      	sub	sp, #96	@ 0x60
 8002a44:	af00      	add	r7, sp, #0
    // Initialize all distances to MAX_DISTANCE
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002a46:	2300      	movs	r3, #0
 8002a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a4a:	e018      	b.n	8002a7e <flood_fill_algorithm+0x3e>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a50:	e00f      	b.n	8002a72 <flood_fill_algorithm+0x32>
            maze[x][y].distance = MAX_DISTANCE;
 8002a52:	4992      	ldr	r1, [pc, #584]	@ (8002c9c <flood_fill_algorithm+0x25c>)
 8002a54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a60:	4413      	add	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	440b      	add	r3, r1
 8002a66:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002a6a:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a6e:	3301      	adds	r3, #1
 8002a70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a74:	2b0b      	cmp	r3, #11
 8002a76:	ddec      	ble.n	8002a52 <flood_fill_algorithm+0x12>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a80:	2b0b      	cmp	r3, #11
 8002a82:	dde3      	ble.n	8002a4c <flood_fill_algorithm+0xc>
        }
    }

    // Initialize queue
    queue_init(&bfs_queue);
 8002a84:	4886      	ldr	r0, [pc, #536]	@ (8002ca0 <flood_fill_algorithm+0x260>)
 8002a86:	f7ff fe4b 	bl	8002720 <queue_init>

    // Set goal distances and add to queue
    if (!robot.center_reached) {
 8002a8a:	4b86      	ldr	r3, [pc, #536]	@ (8002ca4 <flood_fill_algorithm+0x264>)
 8002a8c:	7b1b      	ldrb	r3, [r3, #12]
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d06c      	beq.n	8002b72 <flood_fill_algorithm+0x132>
        // Heading to center
        maze[maze_center_x1][maze_center_y1].distance = 0;
 8002a98:	4b83      	ldr	r3, [pc, #524]	@ (8002ca8 <flood_fill_algorithm+0x268>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b83      	ldr	r3, [pc, #524]	@ (8002cac <flood_fill_algorithm+0x26c>)
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	487e      	ldr	r0, [pc, #504]	@ (8002c9c <flood_fill_algorithm+0x25c>)
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4403      	add	r3, r0
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
        maze[maze_center_x2][maze_center_y1].distance = 0;
 8002ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb0 <flood_fill_algorithm+0x270>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b7c      	ldr	r3, [pc, #496]	@ (8002cac <flood_fill_algorithm+0x26c>)
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	4877      	ldr	r0, [pc, #476]	@ (8002c9c <flood_fill_algorithm+0x25c>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	4403      	add	r3, r0
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
        maze[maze_center_x1][maze_center_y2].distance = 0;
 8002ad0:	4b75      	ldr	r3, [pc, #468]	@ (8002ca8 <flood_fill_algorithm+0x268>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b77      	ldr	r3, [pc, #476]	@ (8002cb4 <flood_fill_algorithm+0x274>)
 8002ad6:	6819      	ldr	r1, [r3, #0]
 8002ad8:	4870      	ldr	r0, [pc, #448]	@ (8002c9c <flood_fill_algorithm+0x25c>)
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	4403      	add	r3, r0
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
        maze[maze_center_x2][maze_center_y2].distance = 0;
 8002aec:	4b70      	ldr	r3, [pc, #448]	@ (8002cb0 <flood_fill_algorithm+0x270>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b70      	ldr	r3, [pc, #448]	@ (8002cb4 <flood_fill_algorithm+0x274>)
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	4869      	ldr	r0, [pc, #420]	@ (8002c9c <flood_fill_algorithm+0x25c>)
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	4403      	add	r3, r0
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        queue_push(&bfs_queue, (Position){maze_center_x1, maze_center_y1});
 8002b08:	4b67      	ldr	r3, [pc, #412]	@ (8002ca8 <flood_fill_algorithm+0x268>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b0e:	4b67      	ldr	r3, [pc, #412]	@ (8002cac <flood_fill_algorithm+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b18:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b1c:	4860      	ldr	r0, [pc, #384]	@ (8002ca0 <flood_fill_algorithm+0x260>)
 8002b1e:	f7ff fe28 	bl	8002772 <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x2, maze_center_y1});
 8002b22:	4b63      	ldr	r3, [pc, #396]	@ (8002cb0 <flood_fill_algorithm+0x270>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b28:	4b60      	ldr	r3, [pc, #384]	@ (8002cac <flood_fill_algorithm+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b32:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b36:	485a      	ldr	r0, [pc, #360]	@ (8002ca0 <flood_fill_algorithm+0x260>)
 8002b38:	f7ff fe1b 	bl	8002772 <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x1, maze_center_y2});
 8002b3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca8 <flood_fill_algorithm+0x268>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b42:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb4 <flood_fill_algorithm+0x274>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b50:	4853      	ldr	r0, [pc, #332]	@ (8002ca0 <flood_fill_algorithm+0x260>)
 8002b52:	f7ff fe0e 	bl	8002772 <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x2, maze_center_y2});
 8002b56:	4b56      	ldr	r3, [pc, #344]	@ (8002cb0 <flood_fill_algorithm+0x270>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	4b55      	ldr	r3, [pc, #340]	@ (8002cb4 <flood_fill_algorithm+0x274>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	623b      	str	r3, [r7, #32]
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b6a:	484d      	ldr	r0, [pc, #308]	@ (8002ca0 <flood_fill_algorithm+0x260>)
 8002b6c:	f7ff fe01 	bl	8002772 <queue_push>
 8002b70:	e00d      	b.n	8002b8e <flood_fill_algorithm+0x14e>
    } else {
        // Returning to start
        maze[0][0].distance = 0;
 8002b72:	4b4a      	ldr	r3, [pc, #296]	@ (8002c9c <flood_fill_algorithm+0x25c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
        queue_push(&bfs_queue, (Position){0, 0});
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b88:	4845      	ldr	r0, [pc, #276]	@ (8002ca0 <flood_fill_algorithm+0x260>)
 8002b8a:	f7ff fdf2 	bl	8002772 <queue_push>
    }

    // Flood fill propagation
    int updates = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	657b      	str	r3, [r7, #84]	@ 0x54
    while (!queue_empty(&bfs_queue)) {
 8002b92:	e074      	b.n	8002c7e <flood_fill_algorithm+0x23e>
        Position current = queue_pop(&bfs_queue);
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	4941      	ldr	r1, [pc, #260]	@ (8002ca0 <flood_fill_algorithm+0x260>)
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fe0a 	bl	80027b4 <queue_pop>
        int x = current.x;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        int y = current.y;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Check all four directions
        for (int dir = 0; dir < 4; dir++) {
 8002ba8:	2300      	movs	r3, #0
 8002baa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bac:	e064      	b.n	8002c78 <flood_fill_algorithm+0x238>
            if (maze[x][y].walls[dir]) continue; // Wall blocks this direction
 8002bae:	493b      	ldr	r1, [pc, #236]	@ (8002c9c <flood_fill_algorithm+0x25c>)
 8002bb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bbc:	4413      	add	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	18ca      	adds	r2, r1, r3
 8002bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3305      	adds	r3, #5
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d14e      	bne.n	8002c6c <flood_fill_algorithm+0x22c>

            int nx = x + dx[dir];
 8002bce:	4a3a      	ldr	r2, [pc, #232]	@ (8002cb8 <flood_fill_algorithm+0x278>)
 8002bd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bd8:	4413      	add	r3, r2
 8002bda:	647b      	str	r3, [r7, #68]	@ 0x44
            int ny = y + dy[dir];
 8002bdc:	4a37      	ldr	r2, [pc, #220]	@ (8002cbc <flood_fill_algorithm+0x27c>)
 8002bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002be6:	4413      	add	r3, r2
 8002be8:	643b      	str	r3, [r7, #64]	@ 0x40

            // Check bounds
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db3f      	blt.n	8002c70 <flood_fill_algorithm+0x230>
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf2:	2b0b      	cmp	r3, #11
 8002bf4:	dc3c      	bgt.n	8002c70 <flood_fill_algorithm+0x230>
 8002bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	db39      	blt.n	8002c70 <flood_fill_algorithm+0x230>
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bfe:	2b0b      	cmp	r3, #11
 8002c00:	dc36      	bgt.n	8002c70 <flood_fill_algorithm+0x230>

            int new_distance = maze[x][y].distance + 1;
 8002c02:	4926      	ldr	r1, [pc, #152]	@ (8002c9c <flood_fill_algorithm+0x25c>)
 8002c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c10:	4413      	add	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	440b      	add	r3, r1
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (new_distance < maze[nx][ny].distance) {
 8002c1c:	491f      	ldr	r1, [pc, #124]	@ (8002c9c <flood_fill_algorithm+0x25c>)
 8002c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c2a:	4413      	add	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	440b      	add	r3, r1
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c34:	429a      	cmp	r2, r3
 8002c36:	da1c      	bge.n	8002c72 <flood_fill_algorithm+0x232>
                maze[nx][ny].distance = new_distance;
 8002c38:	4918      	ldr	r1, [pc, #96]	@ (8002c9c <flood_fill_algorithm+0x25c>)
 8002c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c46:	4413      	add	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	440b      	add	r3, r1
 8002c4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c4e:	601a      	str	r2, [r3, #0]
                queue_push(&bfs_queue, (Position){nx, ny});
 8002c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c5e:	4810      	ldr	r0, [pc, #64]	@ (8002ca0 <flood_fill_algorithm+0x260>)
 8002c60:	f7ff fd87 	bl	8002772 <queue_push>
                updates++;
 8002c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c66:	3301      	adds	r3, #1
 8002c68:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c6a:	e002      	b.n	8002c72 <flood_fill_algorithm+0x232>
            if (maze[x][y].walls[dir]) continue; // Wall blocks this direction
 8002c6c:	bf00      	nop
 8002c6e:	e000      	b.n	8002c72 <flood_fill_algorithm+0x232>
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002c70:	bf00      	nop
        for (int dir = 0; dir < 4; dir++) {
 8002c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c74:	3301      	adds	r3, #1
 8002c76:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	dd97      	ble.n	8002bae <flood_fill_algorithm+0x16e>
    while (!queue_empty(&bfs_queue)) {
 8002c7e:	4808      	ldr	r0, [pc, #32]	@ (8002ca0 <flood_fill_algorithm+0x260>)
 8002c80:	f7ff fd62 	bl	8002748 <queue_empty>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d084      	beq.n	8002b94 <flood_fill_algorithm+0x154>
            }
        }
    }

    send_bluetooth_printf("Flood fill complete: %d updates\r\n", updates);
 8002c8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c8c:	480c      	ldr	r0, [pc, #48]	@ (8002cc0 <flood_fill_algorithm+0x280>)
 8002c8e:	f7fe fa7d 	bl	800118c <send_bluetooth_printf>
}
 8002c92:	bf00      	nop
 8002c94:	3760      	adds	r7, #96	@ 0x60
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000468 	.word	0x20000468
 8002ca0:	20000dd8 	.word	0x20000dd8
 8002ca4:	20000d68 	.word	0x20000d68
 8002ca8:	20000dc0 	.word	0x20000dc0
 8002cac:	20000dc4 	.word	0x20000dc4
 8002cb0:	20000dc8 	.word	0x20000dc8
 8002cb4:	20000dcc 	.word	0x20000dcc
 8002cb8:	0800f6ec 	.word	0x0800f6ec
 8002cbc:	0800f6fc 	.word	0x0800f6fc
 8002cc0:	0800e700 	.word	0x0800e700

08002cc4 <get_best_direction>:

/**
 * @brief Get best direction to move based on flood fill values
 */
int get_best_direction(void) {
 8002cc4:	b480      	push	{r7}
 8002cc6:	b093      	sub	sp, #76	@ 0x4c
 8002cc8:	af00      	add	r7, sp, #0
    int best_dir = robot.direction;
 8002cca:	4b93      	ldr	r3, [pc, #588]	@ (8002f18 <get_best_direction+0x254>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	647b      	str	r3, [r7, #68]	@ 0x44
    int min_distance = MAX_DISTANCE;
 8002cd0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002cd4:	643b      	str	r3, [r7, #64]	@ 0x40
    int min_visits = 999;
 8002cd6:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    bool found_unvisited = false;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Direction priority: forward, right, left, backward
    int priority[4];
    priority[0] = robot.direction;                    // Forward
 8002ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8002f18 <get_best_direction+0x254>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	603b      	str	r3, [r7, #0]
    priority[1] = (robot.direction + 1) % 4;         // Right
 8002ce8:	4b8b      	ldr	r3, [pc, #556]	@ (8002f18 <get_best_direction+0x254>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	3301      	adds	r3, #1
 8002cee:	425a      	negs	r2, r3
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	f002 0203 	and.w	r2, r2, #3
 8002cf8:	bf58      	it	pl
 8002cfa:	4253      	negpl	r3, r2
 8002cfc:	607b      	str	r3, [r7, #4]
    priority[2] = (robot.direction + 3) % 4;         // Left
 8002cfe:	4b86      	ldr	r3, [pc, #536]	@ (8002f18 <get_best_direction+0x254>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	3303      	adds	r3, #3
 8002d04:	425a      	negs	r2, r3
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	f002 0203 	and.w	r2, r2, #3
 8002d0e:	bf58      	it	pl
 8002d10:	4253      	negpl	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
    priority[3] = (robot.direction + 2) % 4;         // Backward
 8002d14:	4b80      	ldr	r3, [pc, #512]	@ (8002f18 <get_best_direction+0x254>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	3302      	adds	r3, #2
 8002d1a:	425a      	negs	r2, r3
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	f002 0203 	and.w	r2, r2, #3
 8002d24:	bf58      	it	pl
 8002d26:	4253      	negpl	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

    // First pass: prioritize unvisited cells
    for (int p = 0; p < 4; p++) {
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d2e:	e068      	b.n	8002e02 <get_best_direction+0x13e>
        int dir = priority[p];
 8002d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	3348      	adds	r3, #72	@ 0x48
 8002d36:	443b      	add	r3, r7
 8002d38:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002d3c:	61bb      	str	r3, [r7, #24]

        // Check if there's a wall in this direction
        if (maze[robot.x][robot.y].walls[dir]) continue;
 8002d3e:	4b76      	ldr	r3, [pc, #472]	@ (8002f18 <get_best_direction+0x254>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b75      	ldr	r3, [pc, #468]	@ (8002f18 <get_best_direction+0x254>)
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	4875      	ldr	r0, [pc, #468]	@ (8002f1c <get_best_direction+0x258>)
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	18c2      	adds	r2, r0, r3
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4413      	add	r3, r2
 8002d5a:	3305      	adds	r3, #5
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d149      	bne.n	8002df6 <get_best_direction+0x132>

        int nx = robot.x + dx[dir];
 8002d62:	4b6d      	ldr	r3, [pc, #436]	@ (8002f18 <get_best_direction+0x254>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	496e      	ldr	r1, [pc, #440]	@ (8002f20 <get_best_direction+0x25c>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d6e:	4413      	add	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]
        int ny = robot.y + dy[dir];
 8002d72:	4b69      	ldr	r3, [pc, #420]	@ (8002f18 <get_best_direction+0x254>)
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	496b      	ldr	r1, [pc, #428]	@ (8002f24 <get_best_direction+0x260>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d7e:	4413      	add	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

        // Check bounds
        if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	db38      	blt.n	8002dfa <get_best_direction+0x136>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b0b      	cmp	r3, #11
 8002d8c:	dc35      	bgt.n	8002dfa <get_best_direction+0x136>
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db32      	blt.n	8002dfa <get_best_direction+0x136>
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b0b      	cmp	r3, #11
 8002d98:	dc2f      	bgt.n	8002dfa <get_best_direction+0x136>

        // Prioritize unvisited cells
        if (maze[nx][ny].visit_count == 0) {
 8002d9a:	4960      	ldr	r1, [pc, #384]	@ (8002f1c <get_best_direction+0x258>)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	440b      	add	r3, r1
 8002dae:	330c      	adds	r3, #12
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d122      	bne.n	8002dfc <get_best_direction+0x138>
            found_unvisited = true;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            if (maze[nx][ny].distance < min_distance) {
 8002dbc:	4957      	ldr	r1, [pc, #348]	@ (8002f1c <get_best_direction+0x258>)
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4413      	add	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	440b      	add	r3, r1
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	dd11      	ble.n	8002dfc <get_best_direction+0x138>
                min_distance = maze[nx][ny].distance;
 8002dd8:	4950      	ldr	r1, [pc, #320]	@ (8002f1c <get_best_direction+0x258>)
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	440b      	add	r3, r1
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	643b      	str	r3, [r7, #64]	@ 0x40
                best_dir = dir;
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002df4:	e002      	b.n	8002dfc <get_best_direction+0x138>
        if (maze[robot.x][robot.y].walls[dir]) continue;
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <get_best_direction+0x138>
        if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002dfa:	bf00      	nop
    for (int p = 0; p < 4; p++) {
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dfe:	3301      	adds	r3, #1
 8002e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	dd93      	ble.n	8002d30 <get_best_direction+0x6c>
            }
        }
    }

    // Second pass: if no unvisited cells, choose based on distance and visit count
    if (!found_unvisited) {
 8002e08:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002e0c:	f083 0301 	eor.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d079      	beq.n	8002f0a <get_best_direction+0x246>
        for (int p = 0; p < 4; p++) {
 8002e16:	2300      	movs	r3, #0
 8002e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e1a:	e073      	b.n	8002f04 <get_best_direction+0x240>
            int dir = priority[p];
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	3348      	adds	r3, #72	@ 0x48
 8002e22:	443b      	add	r3, r7
 8002e24:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (maze[robot.x][robot.y].walls[dir]) continue;
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f18 <get_best_direction+0x254>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f18 <get_best_direction+0x254>)
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	483a      	ldr	r0, [pc, #232]	@ (8002f1c <get_best_direction+0x258>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	18c2      	adds	r2, r0, r3
 8002e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e44:	4413      	add	r3, r2
 8002e46:	3305      	adds	r3, #5
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d154      	bne.n	8002ef8 <get_best_direction+0x234>

            int nx = robot.x + dx[dir];
 8002e4e:	4b32      	ldr	r3, [pc, #200]	@ (8002f18 <get_best_direction+0x254>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4933      	ldr	r1, [pc, #204]	@ (8002f20 <get_best_direction+0x25c>)
 8002e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
            int ny = robot.y + dy[dir];
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002f18 <get_best_direction+0x254>)
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4930      	ldr	r1, [pc, #192]	@ (8002f24 <get_best_direction+0x260>)
 8002e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db43      	blt.n	8002efc <get_best_direction+0x238>
 8002e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e76:	2b0b      	cmp	r3, #11
 8002e78:	dc40      	bgt.n	8002efc <get_best_direction+0x238>
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db3d      	blt.n	8002efc <get_best_direction+0x238>
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	2b0b      	cmp	r3, #11
 8002e84:	dc3a      	bgt.n	8002efc <get_best_direction+0x238>

            int nd = maze[nx][ny].distance;
 8002e86:	4925      	ldr	r1, [pc, #148]	@ (8002f1c <get_best_direction+0x258>)
 8002e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e94:	4413      	add	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	440b      	add	r3, r1
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	623b      	str	r3, [r7, #32]
            int nv = maze[nx][ny].visit_count;
 8002e9e:	491f      	ldr	r1, [pc, #124]	@ (8002f1c <get_best_direction+0x258>)
 8002ea0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eac:	4413      	add	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	440b      	add	r3, r1
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	61fb      	str	r3, [r7, #28]

            // Choose cell with minimum distance, then minimum visits, then prefer forward
            if (nd < min_distance ||
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	db14      	blt.n	8002eea <get_best_direction+0x226>
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d103      	bne.n	8002ed0 <get_best_direction+0x20c>
                (nd == min_distance && nv < min_visits) ||
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	db0c      	blt.n	8002eea <get_best_direction+0x226>
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d112      	bne.n	8002efe <get_best_direction+0x23a>
                (nd == min_distance && nv == min_visits && dir == robot.direction)) {
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d10e      	bne.n	8002efe <get_best_direction+0x23a>
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <get_best_direction+0x254>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d109      	bne.n	8002efe <get_best_direction+0x23a>
                min_distance = nd;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	643b      	str	r3, [r7, #64]	@ 0x40
                min_visits = nv;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                best_dir = dir;
 8002ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ef6:	e002      	b.n	8002efe <get_best_direction+0x23a>
            if (maze[robot.x][robot.y].walls[dir]) continue;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <get_best_direction+0x23a>
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002efc:	bf00      	nop
        for (int p = 0; p < 4; p++) {
 8002efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f00:	3301      	adds	r3, #1
 8002f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	dd88      	ble.n	8002e1c <get_best_direction+0x158>
            }
        }
    }

    return best_dir;
 8002f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	374c      	adds	r7, #76	@ 0x4c
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	20000d68 	.word	0x20000d68
 8002f1c:	20000468 	.word	0x20000468
 8002f20:	0800f6ec 	.word	0x0800f6ec
 8002f24:	0800f6fc 	.word	0x0800f6fc

08002f28 <turn_to_direction>:
int r=0;

/**
 * @brief Turn robot to face the specified direction
 */
void turn_to_direction(int target_direction) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    int current_dir = robot.direction;
 8002f30:	4b2a      	ldr	r3, [pc, #168]	@ (8002fdc <turn_to_direction+0xb4>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60fb      	str	r3, [r7, #12]
    int turn_diff = (target_direction - current_dir + 4) % 4;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	425a      	negs	r2, r3
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	f002 0203 	and.w	r2, r2, #3
 8002f48:	bf58      	it	pl
 8002f4a:	4253      	negpl	r3, r2
 8002f4c:	60bb      	str	r3, [r7, #8]

    switch (turn_diff) {
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d83b      	bhi.n	8002fcc <turn_to_direction+0xa4>
 8002f54:	a201      	add	r2, pc, #4	@ (adr r2, 8002f5c <turn_to_direction+0x34>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002fcd 	.word	0x08002fcd
 8002f60:	08002f6d 	.word	0x08002f6d
 8002f64:	08002f8d 	.word	0x08002f8d
 8002f68:	08002fad 	.word	0x08002fad
        case 0:
            // Already facing correct direction
            break;
        case 1:
            // Turn right (90 degrees clockwise)
            send_bluetooth_message("Turning RIGHT...\r\n");
 8002f6c:	481c      	ldr	r0, [pc, #112]	@ (8002fe0 <turn_to_direction+0xb8>)
 8002f6e:	f7fe f8f7 	bl	8001160 <send_bluetooth_message>
            turn_right();
 8002f72:	f000 fe03 	bl	8003b7c <turn_right>
            l=1549;
 8002f76:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <turn_to_direction+0xbc>)
 8002f78:	f240 620d 	movw	r2, #1549	@ 0x60d
 8002f7c:	601a      	str	r2, [r3, #0]
            r=1537;
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe8 <turn_to_direction+0xc0>)
 8002f80:	f240 6201 	movw	r2, #1537	@ 0x601
 8002f84:	601a      	str	r2, [r3, #0]
            play_turn_beep();
 8002f86:	f7fe f8c7 	bl	8001118 <play_turn_beep>
            break;
 8002f8a:	e01f      	b.n	8002fcc <turn_to_direction+0xa4>
        case 2:
            // Turn around (180 degrees)
            send_bluetooth_message("Turning AROUND...\r\n");
 8002f8c:	4817      	ldr	r0, [pc, #92]	@ (8002fec <turn_to_direction+0xc4>)
 8002f8e:	f7fe f8e7 	bl	8001160 <send_bluetooth_message>
            turn_around();
 8002f92:	f000 fe25 	bl	8003be0 <turn_around>
            l=1530;
 8002f96:	4b13      	ldr	r3, [pc, #76]	@ (8002fe4 <turn_to_direction+0xbc>)
 8002f98:	f240 52fa 	movw	r2, #1530	@ 0x5fa
 8002f9c:	601a      	str	r2, [r3, #0]
            r=1562;
 8002f9e:	4b12      	ldr	r3, [pc, #72]	@ (8002fe8 <turn_to_direction+0xc0>)
 8002fa0:	f240 621a 	movw	r2, #1562	@ 0x61a
 8002fa4:	601a      	str	r2, [r3, #0]
            play_turn_beep();
 8002fa6:	f7fe f8b7 	bl	8001118 <play_turn_beep>
            break;
 8002faa:	e00f      	b.n	8002fcc <turn_to_direction+0xa4>
        case 3:
            // Turn left (90 degrees counter-clockwise)
            send_bluetooth_message("Turning LEFT...\r\n");
 8002fac:	4810      	ldr	r0, [pc, #64]	@ (8002ff0 <turn_to_direction+0xc8>)
 8002fae:	f7fe f8d7 	bl	8001160 <send_bluetooth_message>
            turn_left();
 8002fb2:	f000 fdb1 	bl	8003b18 <turn_left>
            l=1330;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <turn_to_direction+0xbc>)
 8002fb8:	f240 5232 	movw	r2, #1330	@ 0x532
 8002fbc:	601a      	str	r2, [r3, #0]
            r=1352;
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <turn_to_direction+0xc0>)
 8002fc0:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 8002fc4:	601a      	str	r2, [r3, #0]
            play_turn_beep();
 8002fc6:	f7fe f8a7 	bl	8001118 <play_turn_beep>
            break;
 8002fca:	bf00      	nop
    }

    robot.direction = target_direction;
 8002fcc:	4a03      	ldr	r2, [pc, #12]	@ (8002fdc <turn_to_direction+0xb4>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6093      	str	r3, [r2, #8]
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000d68 	.word	0x20000d68
 8002fe0:	0800e724 	.word	0x0800e724
 8002fe4:	200012e4 	.word	0x200012e4
 8002fe8:	200012e8 	.word	0x200012e8
 8002fec:	0800e738 	.word	0x0800e738
 8002ff0:	0800e74c 	.word	0x0800e74c

08002ff4 <move_forward_one_cell>:

/**
 * @brief Move forward one cell with precise control
 */
bool move_forward_one_cell(void) {
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
    send_bluetooth_printf("Moving forward from (%d,%d) to ", robot.x, robot.y);
 8002ffa:	4b37      	ldr	r3, [pc, #220]	@ (80030d8 <move_forward_one_cell+0xe4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a36      	ldr	r2, [pc, #216]	@ (80030d8 <move_forward_one_cell+0xe4>)
 8003000:	6852      	ldr	r2, [r2, #4]
 8003002:	4619      	mov	r1, r3
 8003004:	4835      	ldr	r0, [pc, #212]	@ (80030dc <move_forward_one_cell+0xe8>)
 8003006:	f7fe f8c1 	bl	800118c <send_bluetooth_printf>

    // Calculate new position
    int new_x = robot.x + dx[robot.direction];
 800300a:	4b33      	ldr	r3, [pc, #204]	@ (80030d8 <move_forward_one_cell+0xe4>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b32      	ldr	r3, [pc, #200]	@ (80030d8 <move_forward_one_cell+0xe4>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	4933      	ldr	r1, [pc, #204]	@ (80030e0 <move_forward_one_cell+0xec>)
 8003014:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003018:	4413      	add	r3, r2
 800301a:	607b      	str	r3, [r7, #4]
    int new_y = robot.y + dy[robot.direction];
 800301c:	4b2e      	ldr	r3, [pc, #184]	@ (80030d8 <move_forward_one_cell+0xe4>)
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	4b2d      	ldr	r3, [pc, #180]	@ (80030d8 <move_forward_one_cell+0xe4>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	492f      	ldr	r1, [pc, #188]	@ (80030e4 <move_forward_one_cell+0xf0>)
 8003026:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800302a:	4413      	add	r3, r2
 800302c:	603b      	str	r3, [r7, #0]

    // Check bounds
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	db08      	blt.n	8003046 <move_forward_one_cell+0x52>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b0b      	cmp	r3, #11
 8003038:	dc05      	bgt.n	8003046 <move_forward_one_cell+0x52>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db02      	blt.n	8003046 <move_forward_one_cell+0x52>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b0b      	cmp	r3, #11
 8003044:	dd04      	ble.n	8003050 <move_forward_one_cell+0x5c>
        send_bluetooth_message("BLOCKED - Out of bounds!\r\n");
 8003046:	4828      	ldr	r0, [pc, #160]	@ (80030e8 <move_forward_one_cell+0xf4>)
 8003048:	f7fe f88a 	bl	8001160 <send_bluetooth_message>
        return false;
 800304c:	2300      	movs	r3, #0
 800304e:	e03e      	b.n	80030ce <move_forward_one_cell+0xda>
    }

    send_bluetooth_printf("(%d,%d)\r\n", new_x, new_y);
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4825      	ldr	r0, [pc, #148]	@ (80030ec <move_forward_one_cell+0xf8>)
 8003056:	f7fe f899 	bl	800118c <send_bluetooth_printf>


    // Use precise encoder-based movement
    move_forward_distance(LEFT_ENCODER_COUNTS_PER_CELL ,RIGHT_ENCODER_COUNTS_PER_CELL);
 800305a:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 800305e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003062:	f000 fe3b 	bl	8003cdc <move_forward_distance>

    // Update robot position
    robot.x = new_x;
 8003066:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <move_forward_one_cell+0xe4>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 800306c:	4a1a      	ldr	r2, [pc, #104]	@ (80030d8 <move_forward_one_cell+0xe4>)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6053      	str	r3, [r2, #4]
    robot.exploration_steps++;
 8003072:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <move_forward_one_cell+0xe4>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	3301      	adds	r3, #1
 8003078:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <move_forward_one_cell+0xe4>)
 800307a:	6113      	str	r3, [r2, #16]

    // Mark cell as visited
    maze[robot.x][robot.y].visited = true;
 800307c:	4b16      	ldr	r3, [pc, #88]	@ (80030d8 <move_forward_one_cell+0xe4>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b15      	ldr	r3, [pc, #84]	@ (80030d8 <move_forward_one_cell+0xe4>)
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	481a      	ldr	r0, [pc, #104]	@ (80030f0 <move_forward_one_cell+0xfc>)
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	4403      	add	r3, r0
 8003094:	3304      	adds	r3, #4
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 800309a:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <move_forward_one_cell+0xe4>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4b0e      	ldr	r3, [pc, #56]	@ (80030d8 <move_forward_one_cell+0xe4>)
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	4813      	ldr	r0, [pc, #76]	@ (80030f0 <move_forward_one_cell+0xfc>)
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	4403      	add	r3, r0
 80030b2:	330c      	adds	r3, #12
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	1c58      	adds	r0, r3, #1
 80030b8:	4c0d      	ldr	r4, [pc, #52]	@ (80030f0 <move_forward_one_cell+0xfc>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	4423      	add	r3, r4
 80030c8:	330c      	adds	r3, #12
 80030ca:	6018      	str	r0, [r3, #0]

    return true;
 80030cc:	2301      	movs	r3, #1
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd90      	pop	{r4, r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000d68 	.word	0x20000d68
 80030dc:	0800e760 	.word	0x0800e760
 80030e0:	0800f6ec 	.word	0x0800f6ec
 80030e4:	0800f6fc 	.word	0x0800f6fc
 80030e8:	0800e780 	.word	0x0800e780
 80030ec:	0800e79c 	.word	0x0800e79c
 80030f0:	20000468 	.word	0x20000468

080030f4 <move_forward_one_cell_truns>:
int flag=1;

bool move_forward_one_cell_truns(void){
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
    send_bluetooth_printf("Moving forward from (%d,%d) to ", robot.x, robot.y);
 80030fa:	4b58      	ldr	r3, [pc, #352]	@ (800325c <move_forward_one_cell_truns+0x168>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a57      	ldr	r2, [pc, #348]	@ (800325c <move_forward_one_cell_truns+0x168>)
 8003100:	6852      	ldr	r2, [r2, #4]
 8003102:	4619      	mov	r1, r3
 8003104:	4856      	ldr	r0, [pc, #344]	@ (8003260 <move_forward_one_cell_truns+0x16c>)
 8003106:	f7fe f841 	bl	800118c <send_bluetooth_printf>

    // Calculate new position
    int new_x = robot.x + dx[robot.direction];
 800310a:	4b54      	ldr	r3, [pc, #336]	@ (800325c <move_forward_one_cell_truns+0x168>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b53      	ldr	r3, [pc, #332]	@ (800325c <move_forward_one_cell_truns+0x168>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4954      	ldr	r1, [pc, #336]	@ (8003264 <move_forward_one_cell_truns+0x170>)
 8003114:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003118:	4413      	add	r3, r2
 800311a:	607b      	str	r3, [r7, #4]
    int new_y = robot.y + dy[robot.direction];
 800311c:	4b4f      	ldr	r3, [pc, #316]	@ (800325c <move_forward_one_cell_truns+0x168>)
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4b4e      	ldr	r3, [pc, #312]	@ (800325c <move_forward_one_cell_truns+0x168>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4950      	ldr	r1, [pc, #320]	@ (8003268 <move_forward_one_cell_truns+0x174>)
 8003126:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800312a:	4413      	add	r3, r2
 800312c:	603b      	str	r3, [r7, #0]

    // Check bounds
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	db08      	blt.n	8003146 <move_forward_one_cell_truns+0x52>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b0b      	cmp	r3, #11
 8003138:	dc05      	bgt.n	8003146 <move_forward_one_cell_truns+0x52>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db02      	blt.n	8003146 <move_forward_one_cell_truns+0x52>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b0b      	cmp	r3, #11
 8003144:	dd04      	ble.n	8003150 <move_forward_one_cell_truns+0x5c>
        send_bluetooth_message("BLOCKED - Out of bounds!\r\n");
 8003146:	4849      	ldr	r0, [pc, #292]	@ (800326c <move_forward_one_cell_truns+0x178>)
 8003148:	f7fe f80a 	bl	8001160 <send_bluetooth_message>
        return false;
 800314c:	2300      	movs	r3, #0
 800314e:	e080      	b.n	8003252 <move_forward_one_cell_truns+0x15e>
    }

    send_bluetooth_printf("(%d,%d)\r\n", new_x, new_y);
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4846      	ldr	r0, [pc, #280]	@ (8003270 <move_forward_one_cell_truns+0x17c>)
 8003156:	f7fe f819 	bl	800118c <send_bluetooth_printf>
    if (l!=0 && r!=0){
 800315a:	4b46      	ldr	r3, [pc, #280]	@ (8003274 <move_forward_one_cell_truns+0x180>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d012      	beq.n	8003188 <move_forward_one_cell_truns+0x94>
 8003162:	4b45      	ldr	r3, [pc, #276]	@ (8003278 <move_forward_one_cell_truns+0x184>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00e      	beq.n	8003188 <move_forward_one_cell_truns+0x94>
    	move_forward_distance(l,r);
 800316a:	4b42      	ldr	r3, [pc, #264]	@ (8003274 <move_forward_one_cell_truns+0x180>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a42      	ldr	r2, [pc, #264]	@ (8003278 <move_forward_one_cell_truns+0x184>)
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fdb1 	bl	8003cdc <move_forward_distance>
    	l=0;
 800317a:	4b3e      	ldr	r3, [pc, #248]	@ (8003274 <move_forward_one_cell_truns+0x180>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
    	r=0;
 8003180:	4b3d      	ldr	r3, [pc, #244]	@ (8003278 <move_forward_one_cell_truns+0x184>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e030      	b.n	80031ea <move_forward_one_cell_truns+0xf6>
    }
    else if (sensors.wall_left || sensors.wall_right){
 8003188:	4b3c      	ldr	r3, [pc, #240]	@ (800327c <move_forward_one_cell_truns+0x188>)
 800318a:	7adb      	ldrb	r3, [r3, #11]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <move_forward_one_cell_truns+0xa4>
 8003190:	4b3a      	ldr	r3, [pc, #232]	@ (800327c <move_forward_one_cell_truns+0x188>)
 8003192:	7b1b      	ldrb	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d014      	beq.n	80031c2 <move_forward_one_cell_truns+0xce>
    	if (flag==1){
 8003198:	4b39      	ldr	r3, [pc, #228]	@ (8003280 <move_forward_one_cell_truns+0x18c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d109      	bne.n	80031b4 <move_forward_one_cell_truns+0xc0>
    		move_forward_WF_distance(1250,1250);
 80031a0:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 80031a4:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80031a8:	f000 fdcb 	bl	8003d42 <move_forward_WF_distance>
    		flag=0;
 80031ac:	4b34      	ldr	r3, [pc, #208]	@ (8003280 <move_forward_one_cell_truns+0x18c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
    	if (flag==1){
 80031b2:	e01a      	b.n	80031ea <move_forward_one_cell_truns+0xf6>
    	}else{
    		move_forward_WF_distance(LEFT_ENCODER_COUNTS_PER_CELL ,RIGHT_ENCODER_COUNTS_PER_CELL);
 80031b4:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80031b8:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80031bc:	f000 fdc1 	bl	8003d42 <move_forward_WF_distance>
    	if (flag==1){
 80031c0:	e013      	b.n	80031ea <move_forward_one_cell_truns+0xf6>
    	}



    }else{
    	if (flag==1){
 80031c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003280 <move_forward_one_cell_truns+0x18c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d109      	bne.n	80031de <move_forward_one_cell_truns+0xea>
			move_forward_distance(1250 ,1250);
 80031ca:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 80031ce:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80031d2:	f000 fd83 	bl	8003cdc <move_forward_distance>
			flag=0;
 80031d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003280 <move_forward_one_cell_truns+0x18c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e005      	b.n	80031ea <move_forward_one_cell_truns+0xf6>
    	}else{
    		move_forward_distance(LEFT_ENCODER_COUNTS_PER_CELL ,RIGHT_ENCODER_COUNTS_PER_CELL);
 80031de:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80031e2:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80031e6:	f000 fd79 	bl	8003cdc <move_forward_distance>

    // Use precise encoder-based movement


    // Update robot position
    robot.x = new_x;
 80031ea:	4a1c      	ldr	r2, [pc, #112]	@ (800325c <move_forward_one_cell_truns+0x168>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 80031f0:	4a1a      	ldr	r2, [pc, #104]	@ (800325c <move_forward_one_cell_truns+0x168>)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6053      	str	r3, [r2, #4]
    robot.exploration_steps++;
 80031f6:	4b19      	ldr	r3, [pc, #100]	@ (800325c <move_forward_one_cell_truns+0x168>)
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	3301      	adds	r3, #1
 80031fc:	4a17      	ldr	r2, [pc, #92]	@ (800325c <move_forward_one_cell_truns+0x168>)
 80031fe:	6113      	str	r3, [r2, #16]

    // Mark cell as visited
    maze[robot.x][robot.y].visited = true;
 8003200:	4b16      	ldr	r3, [pc, #88]	@ (800325c <move_forward_one_cell_truns+0x168>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b15      	ldr	r3, [pc, #84]	@ (800325c <move_forward_one_cell_truns+0x168>)
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	481e      	ldr	r0, [pc, #120]	@ (8003284 <move_forward_one_cell_truns+0x190>)
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	4403      	add	r3, r0
 8003218:	3304      	adds	r3, #4
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 800321e:	4b0f      	ldr	r3, [pc, #60]	@ (800325c <move_forward_one_cell_truns+0x168>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4b0e      	ldr	r3, [pc, #56]	@ (800325c <move_forward_one_cell_truns+0x168>)
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	4817      	ldr	r0, [pc, #92]	@ (8003284 <move_forward_one_cell_truns+0x190>)
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	4403      	add	r3, r0
 8003236:	330c      	adds	r3, #12
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	1c58      	adds	r0, r3, #1
 800323c:	4c11      	ldr	r4, [pc, #68]	@ (8003284 <move_forward_one_cell_truns+0x190>)
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	4423      	add	r3, r4
 800324c:	330c      	adds	r3, #12
 800324e:	6018      	str	r0, [r3, #0]

    return true;
 8003250:	2301      	movs	r3, #1
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	bf00      	nop
 800325c:	20000d68 	.word	0x20000d68
 8003260:	0800e760 	.word	0x0800e760
 8003264:	0800f6ec 	.word	0x0800f6ec
 8003268:	0800f6fc 	.word	0x0800f6fc
 800326c:	0800e780 	.word	0x0800e780
 8003270:	0800e79c 	.word	0x0800e79c
 8003274:	200012e4 	.word	0x200012e4
 8003278:	200012e8 	.word	0x200012e8
 800327c:	20000d7c 	.word	0x20000d7c
 8003280:	20000000 	.word	0x20000000
 8003284:	20000468 	.word	0x20000468

08003288 <is_at_goal>:

/**
 * @brief Check if robot is at goal position
 */
bool is_at_goal(void) {
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
    if (!robot.center_reached) {
 800328c:	4b1c      	ldr	r3, [pc, #112]	@ (8003300 <is_at_goal+0x78>)
 800328e:	7b1b      	ldrb	r3, [r3, #12]
 8003290:	f083 0301 	eor.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01e      	beq.n	80032d8 <is_at_goal+0x50>
        // Check if at center
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <is_at_goal+0x78>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <is_at_goal+0x7c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d005      	beq.n	80032b2 <is_at_goal+0x2a>
 80032a6:	4b16      	ldr	r3, [pc, #88]	@ (8003300 <is_at_goal+0x78>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b17      	ldr	r3, [pc, #92]	@ (8003308 <is_at_goal+0x80>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d10d      	bne.n	80032ce <is_at_goal+0x46>
                (robot.y == maze_center_y1 || robot.y == maze_center_y2));
 80032b2:	4b13      	ldr	r3, [pc, #76]	@ (8003300 <is_at_goal+0x78>)
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <is_at_goal+0x84>)
 80032b8:	681b      	ldr	r3, [r3, #0]
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d005      	beq.n	80032ca <is_at_goal+0x42>
                (robot.y == maze_center_y1 || robot.y == maze_center_y2));
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <is_at_goal+0x78>)
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4b13      	ldr	r3, [pc, #76]	@ (8003310 <is_at_goal+0x88>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d101      	bne.n	80032ce <is_at_goal+0x46>
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <is_at_goal+0x48>
 80032ce:	2300      	movs	r3, #0
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e00d      	b.n	80032f4 <is_at_goal+0x6c>
    } else {
        // Check if returned to start
        return (robot.x == 0 && robot.y == 0);
 80032d8:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <is_at_goal+0x78>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <is_at_goal+0x64>
 80032e0:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <is_at_goal+0x78>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <is_at_goal+0x64>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <is_at_goal+0x66>
 80032ec:	2300      	movs	r3, #0
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	b2db      	uxtb	r3, r3
    }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000d68 	.word	0x20000d68
 8003304:	20000dc0 	.word	0x20000dc0
 8003308:	20000dc8 	.word	0x20000dc8
 800330c:	20000dc4 	.word	0x20000dc4
 8003310:	20000dcc 	.word	0x20000dcc

08003314 <update_maze_walls>:

/**
 * @brief Update walls based on sensor readings
 */
void update_maze_walls(void) {
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	b08d      	sub	sp, #52	@ 0x34
 8003318:	af04      	add	r7, sp, #16
    // Update sensors first
    update_sensors();
 800331a:	f001 f9eb 	bl	80046f4 <update_sensors>

    // Update wall information based on current direction and sensor readings
    if (sensors.wall_front) {
 800331e:	4b89      	ldr	r3, [pc, #548]	@ (8003544 <update_maze_walls+0x230>)
 8003320:	7a9b      	ldrb	r3, [r3, #10]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d047      	beq.n	80033b6 <update_maze_walls+0xa2>
        maze[robot.x][robot.y].walls[robot.direction] = true;
 8003326:	4b88      	ldr	r3, [pc, #544]	@ (8003548 <update_maze_walls+0x234>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b87      	ldr	r3, [pc, #540]	@ (8003548 <update_maze_walls+0x234>)
 800332c:	6858      	ldr	r0, [r3, #4]
 800332e:	4b86      	ldr	r3, [pc, #536]	@ (8003548 <update_maze_walls+0x234>)
 8003330:	6899      	ldr	r1, [r3, #8]
 8003332:	4c86      	ldr	r4, [pc, #536]	@ (800354c <update_maze_walls+0x238>)
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4403      	add	r3, r0
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	4423      	add	r3, r4
 8003342:	440b      	add	r3, r1
 8003344:	3305      	adds	r3, #5
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]

        // Update opposite wall in neighbor cell
        int nx = robot.x + dx[robot.direction];
 800334a:	4b7f      	ldr	r3, [pc, #508]	@ (8003548 <update_maze_walls+0x234>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b7e      	ldr	r3, [pc, #504]	@ (8003548 <update_maze_walls+0x234>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	497f      	ldr	r1, [pc, #508]	@ (8003550 <update_maze_walls+0x23c>)
 8003354:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003358:	4413      	add	r3, r2
 800335a:	61fb      	str	r3, [r7, #28]
        int ny = robot.y + dy[robot.direction];
 800335c:	4b7a      	ldr	r3, [pc, #488]	@ (8003548 <update_maze_walls+0x234>)
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	4b79      	ldr	r3, [pc, #484]	@ (8003548 <update_maze_walls+0x234>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	497b      	ldr	r1, [pc, #492]	@ (8003554 <update_maze_walls+0x240>)
 8003366:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800336a:	4413      	add	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db20      	blt.n	80033b6 <update_maze_walls+0xa2>
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	2b0b      	cmp	r3, #11
 8003378:	dc1d      	bgt.n	80033b6 <update_maze_walls+0xa2>
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db1a      	blt.n	80033b6 <update_maze_walls+0xa2>
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b0b      	cmp	r3, #11
 8003384:	dc17      	bgt.n	80033b6 <update_maze_walls+0xa2>
            maze[nx][ny].walls[(robot.direction + 2) % 4] = true;
 8003386:	4b70      	ldr	r3, [pc, #448]	@ (8003548 <update_maze_walls+0x234>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	3302      	adds	r3, #2
 800338c:	4259      	negs	r1, r3
 800338e:	f003 0203 	and.w	r2, r3, #3
 8003392:	f001 0303 	and.w	r3, r1, #3
 8003396:	bf58      	it	pl
 8003398:	425a      	negpl	r2, r3
 800339a:	486c      	ldr	r0, [pc, #432]	@ (800354c <update_maze_walls+0x238>)
 800339c:	69f9      	ldr	r1, [r7, #28]
 800339e:	460b      	mov	r3, r1
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	440b      	add	r3, r1
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	69b9      	ldr	r1, [r7, #24]
 80033a8:	440b      	add	r3, r1
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4403      	add	r3, r0
 80033ae:	4413      	add	r3, r2
 80033b0:	3305      	adds	r3, #5
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_left) {
 80033b6:	4b63      	ldr	r3, [pc, #396]	@ (8003544 <update_maze_walls+0x230>)
 80033b8:	7adb      	ldrb	r3, [r3, #11]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d04e      	beq.n	800345c <update_maze_walls+0x148>
        int left_dir = (robot.direction + 3) % 4;
 80033be:	4b62      	ldr	r3, [pc, #392]	@ (8003548 <update_maze_walls+0x234>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	3303      	adds	r3, #3
 80033c4:	425a      	negs	r2, r3
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	f002 0203 	and.w	r2, r2, #3
 80033ce:	bf58      	it	pl
 80033d0:	4253      	negpl	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
        maze[robot.x][robot.y].walls[left_dir] = true;
 80033d4:	4b5c      	ldr	r3, [pc, #368]	@ (8003548 <update_maze_walls+0x234>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003548 <update_maze_walls+0x234>)
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	485b      	ldr	r0, [pc, #364]	@ (800354c <update_maze_walls+0x238>)
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	18c2      	adds	r2, r0, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	4413      	add	r3, r2
 80033f0:	3305      	adds	r3, #5
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]

        int nx = robot.x + dx[left_dir];
 80033f6:	4b54      	ldr	r3, [pc, #336]	@ (8003548 <update_maze_walls+0x234>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4955      	ldr	r1, [pc, #340]	@ (8003550 <update_maze_walls+0x23c>)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003402:	4413      	add	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        int ny = robot.y + dy[left_dir];
 8003406:	4b50      	ldr	r3, [pc, #320]	@ (8003548 <update_maze_walls+0x234>)
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4952      	ldr	r1, [pc, #328]	@ (8003554 <update_maze_walls+0x240>)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003412:	4413      	add	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db1f      	blt.n	800345c <update_maze_walls+0x148>
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b0b      	cmp	r3, #11
 8003420:	dc1c      	bgt.n	800345c <update_maze_walls+0x148>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db19      	blt.n	800345c <update_maze_walls+0x148>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b0b      	cmp	r3, #11
 800342c:	dc16      	bgt.n	800345c <update_maze_walls+0x148>
            maze[nx][ny].walls[(left_dir + 2) % 4] = true;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3302      	adds	r3, #2
 8003432:	4259      	negs	r1, r3
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	f001 0303 	and.w	r3, r1, #3
 800343c:	bf58      	it	pl
 800343e:	425a      	negpl	r2, r3
 8003440:	4842      	ldr	r0, [pc, #264]	@ (800354c <update_maze_walls+0x238>)
 8003442:	6939      	ldr	r1, [r7, #16]
 8003444:	460b      	mov	r3, r1
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	440b      	add	r3, r1
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	68f9      	ldr	r1, [r7, #12]
 800344e:	440b      	add	r3, r1
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	4403      	add	r3, r0
 8003454:	4413      	add	r3, r2
 8003456:	3305      	adds	r3, #5
 8003458:	2201      	movs	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_right) {
 800345c:	4b39      	ldr	r3, [pc, #228]	@ (8003544 <update_maze_walls+0x230>)
 800345e:	7b1b      	ldrb	r3, [r3, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d04e      	beq.n	8003502 <update_maze_walls+0x1ee>
        int right_dir = (robot.direction + 1) % 4;
 8003464:	4b38      	ldr	r3, [pc, #224]	@ (8003548 <update_maze_walls+0x234>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	3301      	adds	r3, #1
 800346a:	425a      	negs	r2, r3
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	f002 0203 	and.w	r2, r2, #3
 8003474:	bf58      	it	pl
 8003476:	4253      	negpl	r3, r2
 8003478:	60bb      	str	r3, [r7, #8]
        maze[robot.x][robot.y].walls[right_dir] = true;
 800347a:	4b33      	ldr	r3, [pc, #204]	@ (8003548 <update_maze_walls+0x234>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b32      	ldr	r3, [pc, #200]	@ (8003548 <update_maze_walls+0x234>)
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	4832      	ldr	r0, [pc, #200]	@ (800354c <update_maze_walls+0x238>)
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	18c2      	adds	r2, r0, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4413      	add	r3, r2
 8003496:	3305      	adds	r3, #5
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]

        int nx = robot.x + dx[right_dir];
 800349c:	4b2a      	ldr	r3, [pc, #168]	@ (8003548 <update_maze_walls+0x234>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	492b      	ldr	r1, [pc, #172]	@ (8003550 <update_maze_walls+0x23c>)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034a8:	4413      	add	r3, r2
 80034aa:	607b      	str	r3, [r7, #4]
        int ny = robot.y + dy[right_dir];
 80034ac:	4b26      	ldr	r3, [pc, #152]	@ (8003548 <update_maze_walls+0x234>)
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4928      	ldr	r1, [pc, #160]	@ (8003554 <update_maze_walls+0x240>)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034b8:	4413      	add	r3, r2
 80034ba:	603b      	str	r3, [r7, #0]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	db1f      	blt.n	8003502 <update_maze_walls+0x1ee>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b0b      	cmp	r3, #11
 80034c6:	dc1c      	bgt.n	8003502 <update_maze_walls+0x1ee>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db19      	blt.n	8003502 <update_maze_walls+0x1ee>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b0b      	cmp	r3, #11
 80034d2:	dc16      	bgt.n	8003502 <update_maze_walls+0x1ee>
            maze[nx][ny].walls[(right_dir + 2) % 4] = true;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3302      	adds	r3, #2
 80034d8:	4259      	negs	r1, r3
 80034da:	f003 0203 	and.w	r2, r3, #3
 80034de:	f001 0303 	and.w	r3, r1, #3
 80034e2:	bf58      	it	pl
 80034e4:	425a      	negpl	r2, r3
 80034e6:	4819      	ldr	r0, [pc, #100]	@ (800354c <update_maze_walls+0x238>)
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	440b      	add	r3, r1
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	6839      	ldr	r1, [r7, #0]
 80034f4:	440b      	add	r3, r1
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	4403      	add	r3, r0
 80034fa:	4413      	add	r3, r2
 80034fc:	3305      	adds	r3, #5
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
        }
    }

    // Send wall detection feedback
    // Send wall detection feedback
    if (sensors.wall_front || sensors.wall_left || sensors.wall_right) {
 8003502:	4b10      	ldr	r3, [pc, #64]	@ (8003544 <update_maze_walls+0x230>)
 8003504:	7a9b      	ldrb	r3, [r3, #10]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <update_maze_walls+0x206>
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <update_maze_walls+0x230>)
 800350c:	7adb      	ldrb	r3, [r3, #11]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <update_maze_walls+0x206>
 8003512:	4b0c      	ldr	r3, [pc, #48]	@ (8003544 <update_maze_walls+0x230>)
 8003514:	7b1b      	ldrb	r3, [r3, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d037      	beq.n	800358a <update_maze_walls+0x276>
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
                             sensors.wall_front ? "Y" : "N",
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <update_maze_walls+0x230>)
 800351c:	7a9b      	ldrb	r3, [r3, #10]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <update_maze_walls+0x212>
 8003522:	490d      	ldr	r1, [pc, #52]	@ (8003558 <update_maze_walls+0x244>)
 8003524:	e000      	b.n	8003528 <update_maze_walls+0x214>
 8003526:	490d      	ldr	r1, [pc, #52]	@ (800355c <update_maze_walls+0x248>)
                             sensors.wall_left ? "Y" : "N",
 8003528:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <update_maze_walls+0x230>)
 800352a:	7adb      	ldrb	r3, [r3, #11]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <update_maze_walls+0x220>
 8003530:	4a09      	ldr	r2, [pc, #36]	@ (8003558 <update_maze_walls+0x244>)
 8003532:	e000      	b.n	8003536 <update_maze_walls+0x222>
 8003534:	4a09      	ldr	r2, [pc, #36]	@ (800355c <update_maze_walls+0x248>)
                             sensors.wall_right ? "Y" : "N",
 8003536:	4b03      	ldr	r3, [pc, #12]	@ (8003544 <update_maze_walls+0x230>)
 8003538:	7b1b      	ldrb	r3, [r3, #12]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 800353a:	2b00      	cmp	r3, #0
 800353c:	d010      	beq.n	8003560 <update_maze_walls+0x24c>
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <update_maze_walls+0x244>)
 8003540:	e00f      	b.n	8003562 <update_maze_walls+0x24e>
 8003542:	bf00      	nop
 8003544:	20000d7c 	.word	0x20000d7c
 8003548:	20000d68 	.word	0x20000d68
 800354c:	20000468 	.word	0x20000468
 8003550:	0800f6ec 	.word	0x0800f6ec
 8003554:	0800f6fc 	.word	0x0800f6fc
 8003558:	0800e7a8 	.word	0x0800e7a8
 800355c:	0800e7ac 	.word	0x0800e7ac
 8003560:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <update_maze_walls+0x2d0>)
                             sensors.front_left, sensors.front_right,
 8003562:	4821      	ldr	r0, [pc, #132]	@ (80035e8 <update_maze_walls+0x2d4>)
 8003564:	8900      	ldrh	r0, [r0, #8]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 8003566:	4604      	mov	r4, r0
                             sensors.front_left, sensors.front_right,
 8003568:	481f      	ldr	r0, [pc, #124]	@ (80035e8 <update_maze_walls+0x2d4>)
 800356a:	8840      	ldrh	r0, [r0, #2]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 800356c:	4605      	mov	r5, r0
                             sensors.side_left, sensors.side_right);
 800356e:	481e      	ldr	r0, [pc, #120]	@ (80035e8 <update_maze_walls+0x2d4>)
 8003570:	88c0      	ldrh	r0, [r0, #6]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 8003572:	4606      	mov	r6, r0
                             sensors.side_left, sensors.side_right);
 8003574:	481c      	ldr	r0, [pc, #112]	@ (80035e8 <update_maze_walls+0x2d4>)
 8003576:	8880      	ldrh	r0, [r0, #4]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 8003578:	9003      	str	r0, [sp, #12]
 800357a:	9602      	str	r6, [sp, #8]
 800357c:	9501      	str	r5, [sp, #4]
 800357e:	9400      	str	r4, [sp, #0]
 8003580:	481a      	ldr	r0, [pc, #104]	@ (80035ec <update_maze_walls+0x2d8>)
 8003582:	f7fd fe03 	bl	800118c <send_bluetooth_printf>

        play_wall_beep();
 8003586:	f7fd fdbe 	bl	8001106 <play_wall_beep>
    }

    // Mark current cell as visited
    maze[robot.x][robot.y].visited = true;
 800358a:	4b19      	ldr	r3, [pc, #100]	@ (80035f0 <update_maze_walls+0x2dc>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4b18      	ldr	r3, [pc, #96]	@ (80035f0 <update_maze_walls+0x2dc>)
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	4818      	ldr	r0, [pc, #96]	@ (80035f4 <update_maze_walls+0x2e0>)
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4403      	add	r3, r0
 80035a2:	3304      	adds	r3, #4
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <update_maze_walls+0x2dc>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <update_maze_walls+0x2dc>)
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	4810      	ldr	r0, [pc, #64]	@ (80035f4 <update_maze_walls+0x2e0>)
 80035b2:	4613      	mov	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	4403      	add	r3, r0
 80035c0:	330c      	adds	r3, #12
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1c58      	adds	r0, r3, #1
 80035c6:	4c0b      	ldr	r4, [pc, #44]	@ (80035f4 <update_maze_walls+0x2e0>)
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	4423      	add	r3, r4
 80035d6:	330c      	adds	r3, #12
 80035d8:	6018      	str	r0, [r3, #0]
}
 80035da:	bf00      	nop
 80035dc:	3724      	adds	r7, #36	@ 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035e2:	bf00      	nop
 80035e4:	0800e7ac 	.word	0x0800e7ac
 80035e8:	20000d7c 	.word	0x20000d7c
 80035ec:	0800e7b0 	.word	0x0800e7b0
 80035f0:	20000d68 	.word	0x20000d68
 80035f4:	20000468 	.word	0x20000468

080035f8 <explore_maze>:

/**
 * @brief Main maze exploration function
 */
void explore_maze(void) {
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n🚀 STARTING MAZE EXPLORATION 🚀\r\n");
 80035fe:	485d      	ldr	r0, [pc, #372]	@ (8003774 <explore_maze+0x17c>)
 8003600:	f7fd fdae 	bl	8001160 <send_bluetooth_message>

    int max_steps = MAZE_SIZE * MAZE_SIZE * 3; // Safety limit
 8003604:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8003608:	607b      	str	r3, [r7, #4]
    int steps = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]

    while (!is_at_goal() && steps < max_steps) {
 800360e:	e066      	b.n	80036de <explore_maze+0xe6>
        // Update wall information
        update_maze_walls();
 8003610:	f7ff fe80 	bl	8003314 <update_maze_walls>
        HAL_Delay(10);
 8003614:	200a      	movs	r0, #10
 8003616:	f003 f809 	bl	800662c <HAL_Delay>

        // Run flood fill algorithm
        flood_fill_algorithm();
 800361a:	f7ff fa11 	bl	8002a40 <flood_fill_algorithm>

        // Get best direction to move
        int best_direction = get_best_direction();
 800361e:	f7ff fb51 	bl	8002cc4 <get_best_direction>
 8003622:	6038      	str	r0, [r7, #0]

        // Turn to face best direction
        turn_to_direction(best_direction);
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	f7ff fc7f 	bl	8002f28 <turn_to_direction>

        // Move forward if possible
        if (!move_forward_one_cell_truns()){
 800362a:	f7ff fd63 	bl	80030f4 <move_forward_one_cell_truns>
 800362e:	4603      	mov	r3, r0
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02e      	beq.n	8003698 <explore_maze+0xa0>
            send_bluetooth_message("❌ Movement failed! Trying alternative...\r\n");
 800363a:	484f      	ldr	r0, [pc, #316]	@ (8003778 <explore_maze+0x180>)
 800363c:	f7fd fd90 	bl	8001160 <send_bluetooth_message>

            // Try alternative directions
            for (int alt_dir = 0; alt_dir < 4; alt_dir++) {
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	e023      	b.n	800368e <explore_maze+0x96>
                if (alt_dir != best_direction &&
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d01c      	beq.n	8003688 <explore_maze+0x90>
                    !maze[robot.x][robot.y].walls[alt_dir]) {
 800364e:	4b4b      	ldr	r3, [pc, #300]	@ (800377c <explore_maze+0x184>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b4a      	ldr	r3, [pc, #296]	@ (800377c <explore_maze+0x184>)
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	484a      	ldr	r0, [pc, #296]	@ (8003780 <explore_maze+0x188>)
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	18c2      	adds	r2, r0, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4413      	add	r3, r2
 800366a:	3305      	adds	r3, #5
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	f083 0301 	eor.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
                if (alt_dir != best_direction &&
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <explore_maze+0x90>

                    turn_to_direction(alt_dir);
 8003678:	68b8      	ldr	r0, [r7, #8]
 800367a:	f7ff fc55 	bl	8002f28 <turn_to_direction>
                    if (move_forward_one_cell()) {
 800367e:	f7ff fcb9 	bl	8002ff4 <move_forward_one_cell>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d106      	bne.n	8003696 <explore_maze+0x9e>
            for (int alt_dir = 0; alt_dir < 4; alt_dir++) {
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	3301      	adds	r3, #1
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b03      	cmp	r3, #3
 8003692:	ddd8      	ble.n	8003646 <explore_maze+0x4e>
 8003694:	e000      	b.n	8003698 <explore_maze+0xa0>
                        break;
 8003696:	bf00      	nop
                }
            }
        }

        // Send periodic status updates
        if (steps % 5 == 0) {
 8003698:	68f9      	ldr	r1, [r7, #12]
 800369a:	4b3a      	ldr	r3, [pc, #232]	@ (8003784 <explore_maze+0x18c>)
 800369c:	fb83 2301 	smull	r2, r3, r3, r1
 80036a0:	105a      	asrs	r2, r3, #1
 80036a2:	17cb      	asrs	r3, r1, #31
 80036a4:	1ad2      	subs	r2, r2, r3
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	1aca      	subs	r2, r1, r3
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	d112      	bne.n	80036d8 <explore_maze+0xe0>
            send_bluetooth_printf("Step %d: Position (%d,%d), Direction: %s\r\n",
 80036b2:	4b32      	ldr	r3, [pc, #200]	@ (800377c <explore_maze+0x184>)
 80036b4:	681c      	ldr	r4, [r3, #0]
 80036b6:	4b31      	ldr	r3, [pc, #196]	@ (800377c <explore_maze+0x184>)
 80036b8:	685d      	ldr	r5, [r3, #4]
 80036ba:	4b30      	ldr	r3, [pc, #192]	@ (800377c <explore_maze+0x184>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 fde2 	bl	8005288 <get_direction_name>
 80036c4:	4603      	mov	r3, r0
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	462b      	mov	r3, r5
 80036ca:	4622      	mov	r2, r4
 80036cc:	68f9      	ldr	r1, [r7, #12]
 80036ce:	482e      	ldr	r0, [pc, #184]	@ (8003788 <explore_maze+0x190>)
 80036d0:	f7fd fd5c 	bl	800118c <send_bluetooth_printf>
                                 steps, robot.x, robot.y, get_direction_name(robot.direction));
            send_maze_state();
 80036d4:	f7fd fd80 	bl	80011d8 <send_maze_state>
        }

        steps++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
    while (!is_at_goal() && steps < max_steps) {
 80036de:	f7ff fdd3 	bl	8003288 <is_at_goal>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f083 0301 	eor.w	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <explore_maze+0xfe>
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	db8c      	blt.n	8003610 <explore_maze+0x18>

        // Brief delay for stability
        //HAL_Delay(100);
    }

    if (is_at_goal()) {
 80036f6:	f7ff fdc7 	bl	8003288 <is_at_goal>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d026      	beq.n	800374e <explore_maze+0x156>
        if (!robot.center_reached) {
 8003700:	4b1e      	ldr	r3, [pc, #120]	@ (800377c <explore_maze+0x184>)
 8003702:	7b1b      	ldrb	r3, [r3, #12]
 8003704:	f083 0301 	eor.w	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d011      	beq.n	8003732 <explore_maze+0x13a>
            robot.center_reached = true;
 800370e:	4b1b      	ldr	r3, [pc, #108]	@ (800377c <explore_maze+0x184>)
 8003710:	2201      	movs	r2, #1
 8003712:	731a      	strb	r2, [r3, #12]
            send_bluetooth_message("🎯 CENTER REACHED! 🎯\r\n");
 8003714:	481d      	ldr	r0, [pc, #116]	@ (800378c <explore_maze+0x194>)
 8003716:	f7fd fd23 	bl	8001160 <send_bluetooth_message>
            play_success_tone();
 800371a:	f7fd fcaf 	bl	800107c <play_success_tone>

            // Brief celebration
            led_sequence_complete();
 800371e:	f001 fd75 	bl	800520c <led_sequence_complete>
            HAL_Delay(2000);
 8003722:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003726:	f002 ff81 	bl	800662c <HAL_Delay>

            send_bluetooth_message("Now returning to start...\r\n");
 800372a:	4819      	ldr	r0, [pc, #100]	@ (8003790 <explore_maze+0x198>)
 800372c:	f7fd fd18 	bl	8001160 <send_bluetooth_message>
 8003730:	e015      	b.n	800375e <explore_maze+0x166>
        } else {
            robot.returned_to_start = true;
 8003732:	4b12      	ldr	r3, [pc, #72]	@ (800377c <explore_maze+0x184>)
 8003734:	2201      	movs	r2, #1
 8003736:	735a      	strb	r2, [r3, #13]
            send_bluetooth_message("🏁 RETURNED TO START! 🏁\r\n");
 8003738:	4816      	ldr	r0, [pc, #88]	@ (8003794 <explore_maze+0x19c>)
 800373a:	f7fd fd11 	bl	8001160 <send_bluetooth_message>
            play_success_tone();
 800373e:	f7fd fc9d 	bl	800107c <play_success_tone>
            led_sequence_complete();
 8003742:	f001 fd63 	bl	800520c <led_sequence_complete>
            exploration_completed = 1;
 8003746:	4b14      	ldr	r3, [pc, #80]	@ (8003798 <explore_maze+0x1a0>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e007      	b.n	800375e <explore_maze+0x166>
        }
    } else {
        send_bluetooth_printf("❌ Exploration incomplete after %d steps\r\n", max_steps);
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4812      	ldr	r0, [pc, #72]	@ (800379c <explore_maze+0x1a4>)
 8003752:	f7fd fd1b 	bl	800118c <send_bluetooth_printf>
        play_error_tone();
 8003756:	f7fd fcbd 	bl	80010d4 <play_error_tone>
        led_sequence_error();
 800375a:	f001 fd76 	bl	800524a <led_sequence_error>
    }

    send_bluetooth_printf("Total exploration steps: %d\r\n", robot.exploration_steps);
 800375e:	4b07      	ldr	r3, [pc, #28]	@ (800377c <explore_maze+0x184>)
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	4619      	mov	r1, r3
 8003764:	480e      	ldr	r0, [pc, #56]	@ (80037a0 <explore_maze+0x1a8>)
 8003766:	f7fd fd11 	bl	800118c <send_bluetooth_printf>
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bdb0      	pop	{r4, r5, r7, pc}
 8003772:	bf00      	nop
 8003774:	0800e7ec 	.word	0x0800e7ec
 8003778:	0800e814 	.word	0x0800e814
 800377c:	20000d68 	.word	0x20000d68
 8003780:	20000468 	.word	0x20000468
 8003784:	66666667 	.word	0x66666667
 8003788:	0800e844 	.word	0x0800e844
 800378c:	0800e870 	.word	0x0800e870
 8003790:	0800e88c 	.word	0x0800e88c
 8003794:	0800e8a8 	.word	0x0800e8a8
 8003798:	20000dd0 	.word	0x20000dd0
 800379c:	0800e8c8 	.word	0x0800e8c8
 80037a0:	0800e8f4 	.word	0x0800e8f4

080037a4 <run_maze_exploration_sequence>:

/**
 * @brief Run complete maze exploration sequence
 */
void run_maze_exploration_sequence(void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af02      	add	r7, sp, #8
    //send_bluetooth_message("\r\n" "=" * 50 "\r\n");
    send_bluetooth_message("🐭 MICROMOUSE MAZE EXPLORATION 🐭\r\n");
 80037aa:	483f      	ldr	r0, [pc, #252]	@ (80038a8 <run_maze_exploration_sequence+0x104>)
 80037ac:	f7fd fcd8 	bl	8001160 <send_bluetooth_message>
    //send_bluetooth_message("=" * 50 "\r\n");

    // Phase 1: Exploration to center
    if (!robot.center_reached) {
 80037b0:	4b3e      	ldr	r3, [pc, #248]	@ (80038ac <run_maze_exploration_sequence+0x108>)
 80037b2:	7b1b      	ldrb	r3, [r3, #12]
 80037b4:	f083 0301 	eor.w	r3, r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d006      	beq.n	80037cc <run_maze_exploration_sequence+0x28>
        send_bluetooth_message("Phase 1: Exploring to center...\r\n");
 80037be:	483c      	ldr	r0, [pc, #240]	@ (80038b0 <run_maze_exploration_sequence+0x10c>)
 80037c0:	f7fd fcce 	bl	8001160 <send_bluetooth_message>
        led_sequence_exploring();
 80037c4:	f001 fd12 	bl	80051ec <led_sequence_exploring>
        explore_maze();
 80037c8:	f7ff ff16 	bl	80035f8 <explore_maze>
    }

    // Phase 2: Return to start
    if (robot.center_reached && !robot.returned_to_start) {
 80037cc:	4b37      	ldr	r3, [pc, #220]	@ (80038ac <run_maze_exploration_sequence+0x108>)
 80037ce:	7b1b      	ldrb	r3, [r3, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d011      	beq.n	80037f8 <run_maze_exploration_sequence+0x54>
 80037d4:	4b35      	ldr	r3, [pc, #212]	@ (80038ac <run_maze_exploration_sequence+0x108>)
 80037d6:	7b5b      	ldrb	r3, [r3, #13]
 80037d8:	f083 0301 	eor.w	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <run_maze_exploration_sequence+0x54>
        send_bluetooth_message("Phase 2: Returning to start...\r\n");
 80037e2:	4834      	ldr	r0, [pc, #208]	@ (80038b4 <run_maze_exploration_sequence+0x110>)
 80037e4:	f7fd fcbc 	bl	8001160 <send_bluetooth_message>
        led_sequence_returning();
 80037e8:	f001 fd08 	bl	80051fc <led_sequence_returning>
        HAL_Delay(1000);
 80037ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037f0:	f002 ff1c 	bl	800662c <HAL_Delay>
        explore_maze();
 80037f4:	f7ff ff00 	bl	80035f8 <explore_maze>
    }

    // Phase 3: Report results
    if (robot.returned_to_start) {
 80037f8:	4b2c      	ldr	r3, [pc, #176]	@ (80038ac <run_maze_exploration_sequence+0x108>)
 80037fa:	7b5b      	ldrb	r3, [r3, #13]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d04f      	beq.n	80038a0 <run_maze_exploration_sequence+0xfc>
        send_bluetooth_message("\r\n" "🏆 EXPLORATION COMPLETE! 🏆" "\r\n");
 8003800:	482d      	ldr	r0, [pc, #180]	@ (80038b8 <run_maze_exploration_sequence+0x114>)
 8003802:	f7fd fcad 	bl	8001160 <send_bluetooth_message>
        send_performance_metrics();
 8003806:	f7fd fdeb 	bl	80013e0 <send_performance_metrics>

        // Calculate exploration efficiency
        int total_cells = MAZE_SIZE * MAZE_SIZE;
 800380a:	2390      	movs	r3, #144	@ 0x90
 800380c:	60bb      	str	r3, [r7, #8]
        int visited_cells = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
        for (int x = 0; x < MAZE_SIZE; x++) {
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	e01c      	b.n	8003852 <run_maze_exploration_sequence+0xae>
            for (int y = 0; y < MAZE_SIZE; y++) {
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e013      	b.n	8003846 <run_maze_exploration_sequence+0xa2>
                if (maze[x][y].visited) visited_cells++;
 800381e:	4927      	ldr	r1, [pc, #156]	@ (80038bc <run_maze_exploration_sequence+0x118>)
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	440b      	add	r3, r1
 8003832:	3304      	adds	r3, #4
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <run_maze_exploration_sequence+0x9c>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
            for (int y = 0; y < MAZE_SIZE; y++) {
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3301      	adds	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b0b      	cmp	r3, #11
 800384a:	dde8      	ble.n	800381e <run_maze_exploration_sequence+0x7a>
        for (int x = 0; x < MAZE_SIZE; x++) {
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	3301      	adds	r3, #1
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b0b      	cmp	r3, #11
 8003856:	dddf      	ble.n	8003818 <run_maze_exploration_sequence+0x74>
            }
        }

        float exploration_percentage = (float)visited_cells / total_cells * 100.0f;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800386c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003870:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80038c0 <run_maze_exploration_sequence+0x11c>
 8003874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003878:	edc7 7a01 	vstr	s15, [r7, #4]
        send_bluetooth_printf("Exploration Coverage: %d/%d cells (%.1f%%)\r\n",
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fc fe6b 	bl	8000558 <__aeabi_f2d>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	e9cd 2300 	strd	r2, r3, [sp]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	6979      	ldr	r1, [r7, #20]
 800388e:	480d      	ldr	r0, [pc, #52]	@ (80038c4 <run_maze_exploration_sequence+0x120>)
 8003890:	f7fd fc7c 	bl	800118c <send_bluetooth_printf>
                             visited_cells, total_cells, exploration_percentage);

        // Ready for speed run (future implementation)
        send_bluetooth_message("🚀 Ready for speed run optimization! 🚀\r\n");
 8003894:	480c      	ldr	r0, [pc, #48]	@ (80038c8 <run_maze_exploration_sequence+0x124>)
 8003896:	f7fd fc63 	bl	8001160 <send_bluetooth_message>

        exploration_completed = 1;
 800389a:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <run_maze_exploration_sequence+0x128>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]
    }
}
 80038a0:	bf00      	nop
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	0800e914 	.word	0x0800e914
 80038ac:	20000d68 	.word	0x20000d68
 80038b0:	0800e93c 	.word	0x0800e93c
 80038b4:	0800e960 	.word	0x0800e960
 80038b8:	0800e984 	.word	0x0800e984
 80038bc:	20000468 	.word	0x20000468
 80038c0:	42c80000 	.word	0x42c80000
 80038c4:	0800e9a8 	.word	0x0800e9a8
 80038c8:	0800e9d8 	.word	0x0800e9d8
 80038cc:	20000dd0 	.word	0x20000dd0

080038d0 <is_exploration_complete>:

/**
 * @brief Check if exploration is complete
 */
bool is_exploration_complete(void) {
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
    return exploration_completed;
 80038d4:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <is_exploration_complete+0x1c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf14      	ite	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	2300      	moveq	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	20000dd0 	.word	0x20000dd0

080038f0 <get_exploration_efficiency>:

/**
 * @brief Get exploration efficiency
 */
float get_exploration_efficiency(void) {
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
    if (robot.exploration_steps == 0) return 0.0f;
 80038f6:	4b21      	ldr	r3, [pc, #132]	@ (800397c <get_exploration_efficiency+0x8c>)
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <get_exploration_efficiency+0x14>
 80038fe:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8003980 <get_exploration_efficiency+0x90>
 8003902:	e034      	b.n	800396e <get_exploration_efficiency+0x7e>

    // Calculate theoretical minimum (Manhattan distance)
    int min_to_center = abs(maze_center_x1) + abs(maze_center_y1);
 8003904:	4b1f      	ldr	r3, [pc, #124]	@ (8003984 <get_exploration_efficiency+0x94>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800390c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <get_exploration_efficiency+0x98>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	bfb8      	it	lt
 8003918:	425b      	neglt	r3, r3
 800391a:	4413      	add	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
    int min_to_start = abs(maze_center_x1 - 0) + abs(maze_center_y1 - 0);
 800391e:	4b19      	ldr	r3, [pc, #100]	@ (8003984 <get_exploration_efficiency+0x94>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003926:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800392a:	4b17      	ldr	r3, [pc, #92]	@ (8003988 <get_exploration_efficiency+0x98>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	bfb8      	it	lt
 8003932:	425b      	neglt	r3, r3
 8003934:	4413      	add	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]
    int theoretical_min = min_to_center + min_to_start;
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4413      	add	r3, r2
 800393e:	607b      	str	r3, [r7, #4]

    if (theoretical_min == 0) return 100.0f;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <get_exploration_efficiency+0x5c>
 8003946:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800398c <get_exploration_efficiency+0x9c>
 800394a:	e010      	b.n	800396e <get_exploration_efficiency+0x7e>

    return ((float)theoretical_min / robot.exploration_steps) * 100.0f;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003956:	4b09      	ldr	r3, [pc, #36]	@ (800397c <get_exploration_efficiency+0x8c>)
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003966:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800398c <get_exploration_efficiency+0x9c>
 800396a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800396e:	eeb0 0a67 	vmov.f32	s0, s15
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	20000d68 	.word	0x20000d68
 8003980:	00000000 	.word	0x00000000
 8003984:	20000dc0 	.word	0x20000dc0
 8003988:	20000dc4 	.word	0x20000dc4
 800398c:	42c80000 	.word	0x42c80000

08003990 <get_optimal_distance>:

/**
 * @brief Get optimal distance for current maze knowledge
 */
int get_optimal_distance(void) {
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
    // This would implement A* or similar for optimal path calculation
    // For now, return the flood fill distance to center
    return maze[0][0].distance;
 8003994:	4b03      	ldr	r3, [pc, #12]	@ (80039a4 <get_optimal_distance+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000468 	.word	0x20000468

080039a8 <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 80039ae:	4b19      	ldr	r3, [pc, #100]	@ (8003a14 <update_encoder_totals+0x6c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 80039b6:	4b18      	ldr	r3, [pc, #96]	@ (8003a18 <update_encoder_totals+0x70>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 80039be:	4b17      	ldr	r3, [pc, #92]	@ (8003a1c <update_encoder_totals+0x74>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 80039ca:	4b15      	ldr	r3, [pc, #84]	@ (8003a20 <update_encoder_totals+0x78>)
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	88ba      	ldrh	r2, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    right_diff = -right_diff;  // Make left encoder positive for forward movement
 80039d6:	883b      	ldrh	r3, [r7, #0]
 80039d8:	425b      	negs	r3, r3
 80039da:	b29b      	uxth	r3, r3
 80039dc:	803b      	strh	r3, [r7, #0]

    // Update totals
    left_total += left_diff;
 80039de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80039e2:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <update_encoder_totals+0x7c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4413      	add	r3, r2
 80039e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a24 <update_encoder_totals+0x7c>)
 80039ea:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 80039ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80039f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003a28 <update_encoder_totals+0x80>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4413      	add	r3, r2
 80039f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003a28 <update_encoder_totals+0x80>)
 80039f8:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 80039fa:	4a08      	ldr	r2, [pc, #32]	@ (8003a1c <update_encoder_totals+0x74>)
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 8003a00:	4a07      	ldr	r2, [pc, #28]	@ (8003a20 <update_encoder_totals+0x78>)
 8003a02:	88bb      	ldrh	r3, [r7, #4]
 8003a04:	8013      	strh	r3, [r2, #0]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000348 	.word	0x20000348
 8003a18:	200003d8 	.word	0x200003d8
 8003a1c:	20000004 	.word	0x20000004
 8003a20:	20000006 	.word	0x20000006
 8003a24:	200012ec 	.word	0x200012ec
 8003a28:	200012f0 	.word	0x200012f0

08003a2c <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8003a30:	f7ff ffba 	bl	80039a8 <update_encoder_totals>
    return left_total;
 8003a34:	4b01      	ldr	r3, [pc, #4]	@ (8003a3c <get_left_encoder_total+0x10>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	200012ec 	.word	0x200012ec

08003a40 <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8003a44:	f7ff ffb0 	bl	80039a8 <update_encoder_totals>
    return right_total;
 8003a48:	4b01      	ldr	r3, [pc, #4]	@ (8003a50 <get_right_encoder_total+0x10>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200012f0 	.word	0x200012f0

08003a54 <reset_encoder_totals>:

/**
 * @brief Reset encoder totals - NEW FUNCTION
 */
void reset_encoder_totals(void) {
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
    left_total = 0;
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <reset_encoder_totals+0x34>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <reset_encoder_totals+0x38>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
    last_left_count = __HAL_TIM_GET_COUNTER(&htim2);
 8003a64:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <reset_encoder_totals+0x3c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <reset_encoder_totals+0x40>)
 8003a6e:	801a      	strh	r2, [r3, #0]
    last_right_count = __HAL_TIM_GET_COUNTER(&htim4);
 8003a70:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <reset_encoder_totals+0x44>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	4b08      	ldr	r3, [pc, #32]	@ (8003a9c <reset_encoder_totals+0x48>)
 8003a7a:	801a      	strh	r2, [r3, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	200012ec 	.word	0x200012ec
 8003a8c:	200012f0 	.word	0x200012f0
 8003a90:	20000348 	.word	0x20000348
 8003a94:	20000004 	.word	0x20000004
 8003a98:	200003d8 	.word	0x200003d8
 8003a9c:	20000006 	.word	0x20000006

08003aa0 <start_encoders>:

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 8003aa4:	213c      	movs	r1, #60	@ 0x3c
 8003aa6:	4815      	ldr	r0, [pc, #84]	@ (8003afc <start_encoders+0x5c>)
 8003aa8:	f005 f9d6 	bl	8008e58 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 8003aac:	213c      	movs	r1, #60	@ 0x3c
 8003aae:	4814      	ldr	r0, [pc, #80]	@ (8003b00 <start_encoders+0x60>)
 8003ab0:	f005 f9d2 	bl	8008e58 <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 8003ab4:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <start_encoders+0x5c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 8003abe:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <start_encoders+0x60>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003ac6:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f002 fdaf 	bl	800662c <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 8003ace:	4b0d      	ldr	r3, [pc, #52]	@ (8003b04 <start_encoders+0x64>)
 8003ad0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003ad4:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <start_encoders+0x68>)
 8003ad8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003adc:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 8003ade:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <start_encoders+0x6c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <start_encoders+0x70>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 8003aea:	4b0a      	ldr	r3, [pc, #40]	@ (8003b14 <start_encoders+0x74>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 8003af0:	4b08      	ldr	r3, [pc, #32]	@ (8003b14 <start_encoders+0x74>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	60da      	str	r2, [r3, #12]
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200003d8 	.word	0x200003d8
 8003b00:	20000348 	.word	0x20000348
 8003b04:	20000004 	.word	0x20000004
 8003b08:	20000006 	.word	0x20000006
 8003b0c:	200012ec 	.word	0x200012ec
 8003b10:	200012f0 	.word	0x200012f0
 8003b14:	20000da0 	.word	0x20000da0

08003b18 <turn_left>:

static const int16_t S_CURVE_LUT[S_CURVE_LUT_LEN] = {
    700, 700, 700, 699, 698, 697, 695, 692, 689, 685, 680, 674, 667, 660, 652, 643, 633, 623, 612, 601, 589, 577, 564, 551, 538, 525, 512, 499, 486, 473, 461, 449, 438, 427, 417, 407, 398, 390, 383, 376, 370, 365, 361, 358, 355, 353, 352, 351, 350, 350, 350
};

void turn_left(void) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0

    // turn 90 degrees left using gyro PID, 1200 ms timeout for safety
	if (sensors.wall_front){
 8003b1c:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <turn_left+0x58>)
 8003b1e:	7a9b      	ldrb	r3, [r3, #10]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d006      	beq.n	8003b32 <turn_left+0x1a>
		align_front_to_wall(600,4000);
 8003b24:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8003b28:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003b2c:	f001 fc32 	bl	8005394 <align_front_to_wall>
 8003b30:	e005      	b.n	8003b3e <turn_left+0x26>
	}else{

		move_forward_distance(957,957);
 8003b32:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8003b36:	f240 30bd 	movw	r0, #957	@ 0x3bd
 8003b3a:	f000 f8cf 	bl	8003cdc <move_forward_distance>

		//dwt_delay_us(100);
	}


    gyro_turn_reset();
 8003b3e:	f000 fb09 	bl	8004154 <gyro_turn_reset>
    turn_in_place_gyro(+90.0f, 520, 1200);
 8003b42:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003b46:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003b4a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003b74 <turn_left+0x5c>
 8003b4e:	f000 fbdd 	bl	800430c <turn_in_place_gyro>

    //move_forward_distance(1549,1537);//////////////
    robot.direction = (robot.direction + 3) % 4;
 8003b52:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <turn_left+0x60>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	3303      	adds	r3, #3
 8003b58:	425a      	negs	r2, r3
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	f002 0203 	and.w	r2, r2, #3
 8003b62:	bf58      	it	pl
 8003b64:	4253      	negpl	r3, r2
 8003b66:	4a04      	ldr	r2, [pc, #16]	@ (8003b78 <turn_left+0x60>)
 8003b68:	6093      	str	r3, [r2, #8]

}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000d7c 	.word	0x20000d7c
 8003b74:	42b40000 	.word	0x42b40000
 8003b78:	20000d68 	.word	0x20000d68

08003b7c <turn_right>:

void turn_right(void) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
	if (sensors.wall_front){
 8003b80:	4b14      	ldr	r3, [pc, #80]	@ (8003bd4 <turn_right+0x58>)
 8003b82:	7a9b      	ldrb	r3, [r3, #10]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <turn_right+0x1a>
		align_front_to_wall(600,3000);
 8003b88:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8003b8c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003b90:	f001 fc00 	bl	8005394 <align_front_to_wall>
 8003b94:	e005      	b.n	8003ba2 <turn_right+0x26>
	}else{
		move_forward_distance(957,957);
 8003b96:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8003b9a:	f240 30bd 	movw	r0, #957	@ 0x3bd
 8003b9e:	f000 f89d 	bl	8003cdc <move_forward_distance>
	}
	gyro_turn_reset();
 8003ba2:	f000 fad7 	bl	8004154 <gyro_turn_reset>
    turn_in_place_gyro(-90.0f, 520, 1200);
 8003ba6:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003baa:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003bae:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003bd8 <turn_right+0x5c>
 8003bb2:	f000 fbab 	bl	800430c <turn_in_place_gyro>
    //move_forward_distance(1530,1562);
    robot.direction = (robot.direction + 1) % 4;
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <turn_right+0x60>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	425a      	negs	r2, r3
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	f002 0203 	and.w	r2, r2, #3
 8003bc6:	bf58      	it	pl
 8003bc8:	4253      	negpl	r3, r2
 8003bca:	4a04      	ldr	r2, [pc, #16]	@ (8003bdc <turn_right+0x60>)
 8003bcc:	6093      	str	r3, [r2, #8]
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000d7c 	.word	0x20000d7c
 8003bd8:	c2b40000 	.word	0xc2b40000
 8003bdc:	20000d68 	.word	0x20000d68

08003be0 <turn_around>:

/**
 * @brief Turn around 180 degrees
 */
void turn_around(void) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
	if (sensors.wall_front){
 8003be4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c5c <turn_around+0x7c>)
 8003be6:	7a9b      	ldrb	r3, [r3, #10]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d006      	beq.n	8003bfa <turn_around+0x1a>
		align_front_to_wall(600,3000);
 8003bec:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8003bf0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003bf4:	f001 fbce 	bl	8005394 <align_front_to_wall>
 8003bf8:	e005      	b.n	8003c06 <turn_around+0x26>
	}else{
		move_forward_distance(957,957);
 8003bfa:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8003bfe:	f240 30bd 	movw	r0, #957	@ 0x3bd
 8003c02:	f000 f86b 	bl	8003cdc <move_forward_distance>
	}
	turn_in_place_gyro(-90.0f, 520, 1200);
 8003c06:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003c0a:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003c0e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8003c60 <turn_around+0x80>
 8003c12:	f000 fb7b 	bl	800430c <turn_in_place_gyro>
	turn_in_place_gyro(-90.0f, 520, 1200);
 8003c16:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003c1a:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003c1e:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003c60 <turn_around+0x80>
 8003c22:	f000 fb73 	bl	800430c <turn_in_place_gyro>

	//move_forward_distance(1330,1352);/////////////////

	robot.direction = (robot.direction + 1) % 4;
 8003c26:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <turn_around+0x84>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	425a      	negs	r2, r3
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	f002 0203 	and.w	r2, r2, #3
 8003c36:	bf58      	it	pl
 8003c38:	4253      	negpl	r3, r2
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c64 <turn_around+0x84>)
 8003c3c:	6093      	str	r3, [r2, #8]
	robot.direction = (robot.direction + 1) % 4;
 8003c3e:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <turn_around+0x84>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	3301      	adds	r3, #1
 8003c44:	425a      	negs	r2, r3
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	f002 0203 	and.w	r2, r2, #3
 8003c4e:	bf58      	it	pl
 8003c50:	4253      	negpl	r3, r2
 8003c52:	4a04      	ldr	r2, [pc, #16]	@ (8003c64 <turn_around+0x84>)
 8003c54:	6093      	str	r3, [r2, #8]


}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000d7c 	.word	0x20000d7c
 8003c60:	c2b40000 	.word	0xc2b40000
 8003c64:	20000d68 	.word	0x20000d68

08003c68 <stop_motors>:

/**
 * @brief Stop both motors
 */
void stop_motors(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // Left motor PWM = 0
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <stop_motors+0x30>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // Left motor direction = 0
 8003c74:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <stop_motors+0x30>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);  // Right motor PWM = 0
 8003c7c:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <stop_motors+0x30>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2200      	movs	r2, #0
 8003c82:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);  // Right motor direction = 0
 8003c84:	4b04      	ldr	r3, [pc, #16]	@ (8003c98 <stop_motors+0x30>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000390 	.word	0x20000390

08003c9c <break_motors>:
void break_motors(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
    // Apply active braking by setting both inputs HIGH for each motor
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);  // Left IN1 = HIGH
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd8 <break_motors+0x3c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);  // Left IN2 = HIGH
 8003caa:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <break_motors+0x3c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cb2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);  // Right IN3 = HIGH
 8003cb4:	4b08      	ldr	r3, [pc, #32]	@ (8003cd8 <break_motors+0x3c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cbc:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);  // Right IN4 = HIGH
 8003cbe:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <break_motors+0x3c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    HAL_Delay(200);  // Hold brake briefly
 8003cc8:	20c8      	movs	r0, #200	@ 0xc8
 8003cca:	f002 fcaf 	bl	800662c <HAL_Delay>
    stop_motors();   // Then coast
 8003cce:	f7ff ffcb 	bl	8003c68 <stop_motors>
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000390 	.word	0x20000390

08003cdc <move_forward_distance>:


/**
 * @brief Move forward a specific distance - FIXED VERSION
 */
void move_forward_distance(int Left_target_counts,int Right_target_counts) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]

    //  Use safe encoder reading
	reset_encoder_totals();
 8003ce6:	f7ff feb5 	bl	8003a54 <reset_encoder_totals>
    int32_t start_left = get_left_encoder_total();
 8003cea:	f7ff fe9f 	bl	8003a2c <get_left_encoder_total>
 8003cee:	61f8      	str	r0, [r7, #28]
    int32_t start_right = get_right_encoder_total();
 8003cf0:	f7ff fea6 	bl	8003a40 <get_right_encoder_total>
 8003cf4:	61b8      	str	r0, [r7, #24]
    moveStraightGyroPID_Reset();
 8003cf6:	f000 f8f9 	bl	8003eec <moveStraightGyroPID_Reset>


    while (1) {
    	mpu9250_read_gyro();
 8003cfa:	f7fd fdb9 	bl	8001870 <mpu9250_read_gyro>
    	moveStraightGyroPID();
 8003cfe:	f000 f919 	bl	8003f34 <moveStraightGyroPID>


        int32_t current_left = get_left_encoder_total();
 8003d02:	f7ff fe93 	bl	8003a2c <get_left_encoder_total>
 8003d06:	6178      	str	r0, [r7, #20]
        int32_t current_right = get_right_encoder_total();
 8003d08:	f7ff fe9a 	bl	8003a40 <get_right_encoder_total>
 8003d0c:	6138      	str	r0, [r7, #16]
        int32_t left_traveled =  start_left-current_left;
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	60fb      	str	r3, [r7, #12]
        int32_t right_traveled = start_right-current_right;
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	60bb      	str	r3, [r7, #8]
        //int32_t avg_traveled = (left_traveled + right_traveled) / 2;

        //send_bluetooth_printf("L:%ld R:%ld\r\n",current_left,current_right);

        if (left_traveled>=Left_target_counts || right_traveled>=Right_target_counts) {
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	da07      	bge.n	8003d36 <move_forward_distance+0x5a>
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	da03      	bge.n	8003d36 <move_forward_distance+0x5a>
            break;
        }
        HAL_Delay(1);
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f002 fc7c 	bl	800662c <HAL_Delay>
    while (1) {
 8003d34:	e7e1      	b.n	8003cfa <move_forward_distance+0x1e>
    }

    break_motors();		// use a S-curve to apply break/////////////////////
 8003d36:	f7ff ffb1 	bl	8003c9c <break_motors>
}
 8003d3a:	bf00      	nop
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <move_forward_WF_distance>:

/**
 * @brief Move forward a specific distance - FIXED VERSION
 */
void move_forward_WF_distance(int Left_target_counts,int Right_target_counts) {
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b08a      	sub	sp, #40	@ 0x28
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]

    // FIXED: Use safe encoder reading
	reset_encoder_totals();
 8003d4c:	f7ff fe82 	bl	8003a54 <reset_encoder_totals>
    int32_t start_left = get_left_encoder_total();
 8003d50:	f7ff fe6c 	bl	8003a2c <get_left_encoder_total>
 8003d54:	6278      	str	r0, [r7, #36]	@ 0x24
    int32_t start_right = get_right_encoder_total();
 8003d56:	f7ff fe73 	bl	8003a40 <get_right_encoder_total>
 8003d5a:	6238      	str	r0, [r7, #32]
    // 0 = auto (both → center; else follow visible side), 1 = left, 2 = right
    int mode = 0;               // WF_AUTO
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61fb      	str	r3, [r7, #28]
    int base_pwm = 650;         // UPDATEDDDDDDDDDDDDDDDDDD
 8003d60:	f240 238a 	movw	r3, #650	@ 0x28a
 8003d64:	61bb      	str	r3, [r7, #24]

    // bootstrap targets & reset integrators
    wall_follow_reset_int(mode, base_pwm);
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	69f8      	ldr	r0, [r7, #28]
 8003d6a:	f001 fccf 	bl	800570c <wall_follow_reset_int>

    fusion_align_entry(570, 3000);
 8003d6e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8003d72:	f240 203a 	movw	r0, #570	@ 0x23a
 8003d76:	f002 f9b7 	bl	80060e8 <fusion_align_entry>


    fusion_reset();
 8003d7a:	f001 fee9 	bl	8005b50 <fusion_reset>
    fusion_set_heading_ref_to_current();  // lock the present heading
 8003d7e:	f001 ff4d 	bl	8005c1c <fusion_set_heading_ref_to_current>

    while (1) {
    	fusion_step(/*base_pwm=*/650);  // 0 → uses WF_BASE_PWM; or pass an explicit base
 8003d82:	f240 208a 	movw	r0, #650	@ 0x28a
 8003d86:	f001 ff59 	bl	8005c3c <fusion_step>

    	//wall_follow_step();     // computes e, PID, sets motor PWMs
		//HAL_Delay(200);           // keep a steady loop
		dwt_delay_us(50);
 8003d8a:	2032      	movs	r0, #50	@ 0x32
 8003d8c:	f7fe fd2c 	bl	80027e8 <dwt_delay_us>


        int32_t current_left = get_left_encoder_total();
 8003d90:	f7ff fe4c 	bl	8003a2c <get_left_encoder_total>
 8003d94:	6178      	str	r0, [r7, #20]
        int32_t current_right = get_right_encoder_total();
 8003d96:	f7ff fe53 	bl	8003a40 <get_right_encoder_total>
 8003d9a:	6138      	str	r0, [r7, #16]
        int32_t left_traveled =  start_left-current_left;
 8003d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	60fb      	str	r3, [r7, #12]
        int32_t right_traveled = start_right-current_right;
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	60bb      	str	r3, [r7, #8]
        //int32_t avg_traveled = (left_traveled + right_traveled) / 2;

        //send_bluetooth_printf("L:%ld R:%ld\r\n",current_left,current_right);

        if (left_traveled>=Left_target_counts || right_traveled>=Right_target_counts) {
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	da04      	bge.n	8003dbe <move_forward_WF_distance+0x7c>
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	da00      	bge.n	8003dbe <move_forward_WF_distance+0x7c>
    while (1) {
 8003dbc:	e7e1      	b.n	8003d82 <move_forward_WF_distance+0x40>
            break;
        }
        //HAL_Delay(1);
    }
    break_motors();		// use a S-curve to apply break/////////////////////
 8003dbe:	f7ff ff6d 	bl	8003c9c <break_motors>
    //move_forward_distance(Left_target_counts/2,Right_target_counts/2);


}
 8003dc2:	bf00      	nop
 8003dc4:	3728      	adds	r7, #40	@ 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <motor_set>:



// helper to set speed (0–1000 = 0–100%)
// Fixed motor_set function for DRV8833
void motor_set(uint8_t motor, bool forward, uint16_t duty) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	71bb      	strb	r3, [r7, #6]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80bb      	strh	r3, [r7, #4]
    if (motor == 0) { // Left motor
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d115      	bne.n	8003e10 <motor_set+0x44>
        if (forward) {
 8003de4:	79bb      	ldrb	r3, [r7, #6]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <motor_set+0x30>
			// Left reverse: IN1=LOW, IN2=PWM
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty); // PA6 = PWM
 8003dea:	4b17      	ldr	r3, [pc, #92]	@ (8003e48 <motor_set+0x7c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	88ba      	ldrh	r2, [r7, #4]
 8003df0:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // PA7 = LOW
 8003df2:	4b15      	ldr	r3, [pc, #84]	@ (8003e48 <motor_set+0x7c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM

        }
    }
}
 8003dfa:	e020      	b.n	8003e3e <motor_set+0x72>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty); // PA7 = PWM
 8003dfc:	4b12      	ldr	r3, [pc, #72]	@ (8003e48 <motor_set+0x7c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	88ba      	ldrh	r2, [r7, #4]
 8003e02:	639a      	str	r2, [r3, #56]	@ 0x38
        	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET); // PA6 = LOW
 8003e04:	2200      	movs	r2, #0
 8003e06:	2140      	movs	r1, #64	@ 0x40
 8003e08:	4810      	ldr	r0, [pc, #64]	@ (8003e4c <motor_set+0x80>)
 8003e0a:	f003 fb4d 	bl	80074a8 <HAL_GPIO_WritePin>
}
 8003e0e:	e016      	b.n	8003e3e <motor_set+0x72>
    	bool actual_forward = forward;  // invert direction
 8003e10:	79bb      	ldrb	r3, [r7, #6]
 8003e12:	73fb      	strb	r3, [r7, #15]
        if (actual_forward) {
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <motor_set+0x62>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty); // PB1 = PWM
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <motor_set+0x7c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	88ba      	ldrh	r2, [r7, #4]
 8003e20:	641a      	str	r2, [r3, #64]	@ 0x40
        	HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_RESET); // PB0 = LOW
 8003e22:	2200      	movs	r2, #0
 8003e24:	2101      	movs	r1, #1
 8003e26:	480a      	ldr	r0, [pc, #40]	@ (8003e50 <motor_set+0x84>)
 8003e28:	f003 fb3e 	bl	80074a8 <HAL_GPIO_WritePin>
}
 8003e2c:	e007      	b.n	8003e3e <motor_set+0x72>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
 8003e2e:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <motor_set+0x7c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM
 8003e36:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <motor_set+0x7c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	88ba      	ldrh	r2, [r7, #4]
 8003e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000390 	.word	0x20000390
 8003e4c:	40020000 	.word	0x40020000
 8003e50:	40020400 	.word	0x40020400

08003e54 <send_encoder_status>:


/**
 * @brief Get encoder status for debugging - NEW FUNCTION
 */
void send_encoder_status(void) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af02      	add	r7, sp, #8
    update_encoder_totals();
 8003e5a:	f7ff fda5 	bl	80039a8 <update_encoder_totals>
    send_bluetooth_printf("Encoders - Left:%ld Right:%ld Raw_L:%d Raw_R:%d\r\n",
 8003e5e:	4b09      	ldr	r3, [pc, #36]	@ (8003e84 <send_encoder_status+0x30>)
 8003e60:	6819      	ldr	r1, [r3, #0]
 8003e62:	4b09      	ldr	r3, [pc, #36]	@ (8003e88 <send_encoder_status+0x34>)
 8003e64:	681a      	ldr	r2, [r3, #0]
                         left_total, right_total,
                         __HAL_TIM_GET_COUNTER(&htim2), __HAL_TIM_GET_COUNTER(&htim4));
 8003e66:	4b09      	ldr	r3, [pc, #36]	@ (8003e8c <send_encoder_status+0x38>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003e6c:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <send_encoder_status+0x3c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    send_bluetooth_printf("Encoders - Left:%ld Right:%ld Raw_L:%d Raw_R:%d\r\n",
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	4603      	mov	r3, r0
 8003e76:	4807      	ldr	r0, [pc, #28]	@ (8003e94 <send_encoder_status+0x40>)
 8003e78:	f7fd f988 	bl	800118c <send_bluetooth_printf>
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	200012ec 	.word	0x200012ec
 8003e88:	200012f0 	.word	0x200012f0
 8003e8c:	20000348 	.word	0x20000348
 8003e90:	200003d8 	.word	0x200003d8
 8003e94:	0800eaac 	.word	0x0800eaac

08003e98 <clampf_local>:
static const int PWM_MIN = 0;
static const int PWM_MAX = 1000;
static const int PWM_MIN_MOVE = 40;                // optional min to overcome stiction

/* Helper clamp */
static inline float clampf_local(float v, float lo, float hi) {
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ea2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ea6:	ed87 1a01 	vstr	s2, [r7, #4]
    return (v < lo) ? lo : (v > hi) ? hi : v;
 8003eaa:	ed97 7a03 	vldr	s14, [r7, #12]
 8003eae:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eba:	d501      	bpl.n	8003ec0 <clampf_local+0x28>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	e00b      	b.n	8003ed8 <clampf_local+0x40>
 8003ec0:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ec4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed0:	dd01      	ble.n	8003ed6 <clampf_local+0x3e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	e000      	b.n	8003ed8 <clampf_local+0x40>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	ee07 3a90 	vmov	s15, r3
}
 8003edc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <moveStraightGyroPID_Reset>:
    if (v < lo) return lo;
    if (v > hi) return hi;
    return v;
}

void moveStraightGyroPID_Reset(void) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
    pid_error_prev = 0.0f;
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <moveStraightGyroPID_Reset+0x34>)
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
    pid_integral = 0.0f;
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <moveStraightGyroPID_Reset+0x38>)
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
    pid_deriv_filt = 0.0f;
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <moveStraightGyroPID_Reset+0x3c>)
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
    learn_cooldown = 0.0f;
 8003f08:	4b08      	ldr	r3, [pc, #32]	@ (8003f2c <moveStraightGyroPID_Reset+0x40>)
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
    pid_last_ms = HAL_GetTick();
 8003f10:	f002 fb80 	bl	8006614 <HAL_GetTick>
 8003f14:	4603      	mov	r3, r0
 8003f16:	4a06      	ldr	r2, [pc, #24]	@ (8003f30 <moveStraightGyroPID_Reset+0x44>)
 8003f18:	6013      	str	r3, [r2, #0]
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	200012f8 	.word	0x200012f8
 8003f24:	200012fc 	.word	0x200012fc
 8003f28:	20001300 	.word	0x20001300
 8003f2c:	20001304 	.word	0x20001304
 8003f30:	200012f4 	.word	0x200012f4

08003f34 <moveStraightGyroPID>:




void moveStraightGyroPID(void) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8003f3a:	f002 fb6b 	bl	8006614 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]
    float dt = (now - pid_last_ms) / 1000.0f;
 8003f40:	4b6c      	ldr	r3, [pc, #432]	@ (80040f4 <moveStraightGyroPID+0x1c0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	ee07 3a90 	vmov	s15, r3
 8003f4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f50:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80040f8 <moveStraightGyroPID+0x1c4>
 8003f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f58:	edc7 7a07 	vstr	s15, [r7, #28]
    if (dt <= 0.0f) dt = 0.001f; // safety small dt if HAL tick didn't advance
 8003f5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f68:	d801      	bhi.n	8003f6e <moveStraightGyroPID+0x3a>
 8003f6a:	4b64      	ldr	r3, [pc, #400]	@ (80040fc <moveStraightGyroPID+0x1c8>)
 8003f6c:	61fb      	str	r3, [r7, #28]
    pid_last_ms = now;
 8003f6e:	4a61      	ldr	r2, [pc, #388]	@ (80040f4 <moveStraightGyroPID+0x1c0>)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	6013      	str	r3, [r2, #0]

    /* READ: your gyro rate (deg/s). Keep original sign convention:
       original code used error_g = mpu9250_get_gyro_z_compensated();
       and motor1 = base - correction; motor2 = base + correction;
       so we preserve that mapping for compatibility. */
    float error = mpu9250_get_gyro_z_compensated();
 8003f74:	f7fd fc42 	bl	80017fc <mpu9250_get_gyro_z_compensated>
 8003f78:	ed87 0a03 	vstr	s0, [r7, #12]

    /* Integral (with dt) + anti-windup clamp */
    pid_integral += error * dt;
 8003f7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f80:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f88:	4b5d      	ldr	r3, [pc, #372]	@ (8004100 <moveStraightGyroPID+0x1cc>)
 8003f8a:	edd3 7a00 	vldr	s15, [r3]
 8003f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f92:	4b5b      	ldr	r3, [pc, #364]	@ (8004100 <moveStraightGyroPID+0x1cc>)
 8003f94:	edc3 7a00 	vstr	s15, [r3]
    pid_integral = clampf_local(pid_integral, -INTEGRAL_LIMIT, INTEGRAL_LIMIT);
 8003f98:	4b59      	ldr	r3, [pc, #356]	@ (8004100 <moveStraightGyroPID+0x1cc>)
 8003f9a:	edd3 7a00 	vldr	s15, [r3]
 8003f9e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003fa2:	eeb1 7a47 	vneg.f32	s14, s14
 8003fa6:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003faa:	eeb0 1a66 	vmov.f32	s2, s13
 8003fae:	eef0 0a47 	vmov.f32	s1, s14
 8003fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb6:	f7ff ff6f 	bl	8003e98 <clampf_local>
 8003fba:	eef0 7a40 	vmov.f32	s15, s0
 8003fbe:	4b50      	ldr	r3, [pc, #320]	@ (8004100 <moveStraightGyroPID+0x1cc>)
 8003fc0:	edc3 7a00 	vstr	s15, [r3]

    /* Derivative (on error) and low-pass filter */
    float deriv_raw = (error - pid_error_prev) / dt;    // d(error)/dt
 8003fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8004104 <moveStraightGyroPID+0x1d0>)
 8003fc6:	edd3 7a00 	vldr	s15, [r3]
 8003fca:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fce:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003fd2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fda:	edc7 7a02 	vstr	s15, [r7, #8]
    pid_deriv_filt = DERIV_FILTER_ALPHA * pid_deriv_filt + (1.0f - DERIV_FILTER_ALPHA) * deriv_raw;
 8003fde:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8004108 <moveStraightGyroPID+0x1d4>
 8003fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800410c <moveStraightGyroPID+0x1d8>)
 8003fe4:	edd3 7a00 	vldr	s15, [r3]
 8003fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fec:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8004108 <moveStraightGyroPID+0x1d4>
 8003ff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ff4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ff8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004004:	4b41      	ldr	r3, [pc, #260]	@ (800410c <moveStraightGyroPID+0x1d8>)
 8004006:	edc3 7a00 	vstr	s15, [r3]

    /* PID output (correction) */
    float correction = (Kp_g * error) + (Ki_g * pid_integral) + (Kd_g * pid_deriv_filt);
 800400a:	4b41      	ldr	r3, [pc, #260]	@ (8004110 <moveStraightGyroPID+0x1dc>)
 800400c:	ed93 7a00 	vldr	s14, [r3]
 8004010:	edd7 7a03 	vldr	s15, [r7, #12]
 8004014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004018:	4b3e      	ldr	r3, [pc, #248]	@ (8004114 <moveStraightGyroPID+0x1e0>)
 800401a:	edd3 6a00 	vldr	s13, [r3]
 800401e:	4b38      	ldr	r3, [pc, #224]	@ (8004100 <moveStraightGyroPID+0x1cc>)
 8004020:	edd3 7a00 	vldr	s15, [r3]
 8004024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800402c:	4b3a      	ldr	r3, [pc, #232]	@ (8004118 <moveStraightGyroPID+0x1e4>)
 800402e:	edd3 6a00 	vldr	s13, [r3]
 8004032:	4b36      	ldr	r3, [pc, #216]	@ (800410c <moveStraightGyroPID+0x1d8>)
 8004034:	edd3 7a00 	vldr	s15, [r3]
 8004038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800403c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004040:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Base PWM for forward motion (adjust to your nominal cruising PWM) */
    const int base_pwm = 570;
 8004044:	f240 233a 	movw	r3, #570	@ 0x23a
 8004048:	603b      	str	r3, [r7, #0]

    int motor1Speed = (int)roundf((float)base_pwm - correction); // right wheel in your mapping
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	ee07 3a90 	vmov	s15, r3
 8004050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004054:	edd7 7a01 	vldr	s15, [r7, #4]
 8004058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800405c:	eeb0 0a67 	vmov.f32	s0, s15
 8004060:	f009 fd12 	bl	800da88 <roundf>
 8004064:	eef0 7a40 	vmov.f32	s15, s0
 8004068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800406c:	ee17 3a90 	vmov	r3, s15
 8004070:	61bb      	str	r3, [r7, #24]
    int motor2Speed = (int)roundf((float)base_pwm + correction); // left wheel
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800407c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004084:	eeb0 0a67 	vmov.f32	s0, s15
 8004088:	f009 fcfe 	bl	800da88 <roundf>
 800408c:	eef0 7a40 	vmov.f32	s15, s0
 8004090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004094:	ee17 3a90 	vmov	r3, s15
 8004098:	617b      	str	r3, [r7, #20]

    /* Clamp PWM outputs (and provide a safe top, not full 1000 if you prefer) */
    if (motor1Speed > 1200) motor1Speed = 1200;
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80040a0:	dd02      	ble.n	80040a8 <moveStraightGyroPID+0x174>
 80040a2:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80040a6:	61bb      	str	r3, [r7, #24]
    if (motor2Speed > 1200) motor2Speed = 1200;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80040ae:	dd02      	ble.n	80040b6 <moveStraightGyroPID+0x182>
 80040b0:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80040b4:	617b      	str	r3, [r7, #20]
    if (motor1Speed < 0) motor1Speed = 0;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	da01      	bge.n	80040c0 <moveStraightGyroPID+0x18c>
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
    if (motor2Speed < 0) motor2Speed = 0;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	da01      	bge.n	80040ca <moveStraightGyroPID+0x196>
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]



    /* Set motors: adjust direction flags if your wiring uses opposite logic */
    motor_set(0, true, motor2Speed); // Left
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	2101      	movs	r1, #1
 80040d2:	2000      	movs	r0, #0
 80040d4:	f7ff fe7a 	bl	8003dcc <motor_set>
    motor_set(1, true, motor1Speed); // Right
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	2101      	movs	r1, #1
 80040e0:	2001      	movs	r0, #1
 80040e2:	f7ff fe73 	bl	8003dcc <motor_set>

    /* store previous error for next derivative computation */
    pid_error_prev = error;
 80040e6:	4a07      	ldr	r2, [pc, #28]	@ (8004104 <moveStraightGyroPID+0x1d0>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	200012f4 	.word	0x200012f4
 80040f8:	447a0000 	.word	0x447a0000
 80040fc:	3a83126f 	.word	0x3a83126f
 8004100:	200012fc 	.word	0x200012fc
 8004104:	200012f8 	.word	0x200012f8
 8004108:	3f6fd007 	.word	0x3f6fd007
 800410c:	20001300 	.word	0x20001300
 8004110:	20000008 	.word	0x20000008
 8004114:	2000000c 	.word	0x2000000c
 8004118:	20000010 	.word	0x20000010

0800411c <signf>:
static const float INTEGRAL_CLAMP = 10.0f;

// --- PID state ---
static float pid_int = 0.0f, pid_prev_err = 0.0f, pid_deriv_f = 0.0f;

static inline float signf(float x) { return (x >= 0.0f) ? 1.0f : -1.0f; }
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	ed87 0a01 	vstr	s0, [r7, #4]
 8004126:	edd7 7a01 	vldr	s15, [r7, #4]
 800412a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004132:	db02      	blt.n	800413a <signf+0x1e>
 8004134:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004138:	e000      	b.n	800413c <signf+0x20>
 800413a:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <signf+0x34>)
 800413c:	ee07 3a90 	vmov	s15, r3
 8004140:	eeb0 0a67 	vmov.f32	s0, s15
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	bf800000 	.word	0xbf800000

08004154 <gyro_turn_reset>:

void gyro_turn_reset(void) {
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
    pid_int = 0.0f;
 8004158:	4b09      	ldr	r3, [pc, #36]	@ (8004180 <gyro_turn_reset+0x2c>)
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
    pid_prev_err = 0.0f;
 8004160:	4b08      	ldr	r3, [pc, #32]	@ (8004184 <gyro_turn_reset+0x30>)
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
    pid_deriv_f = 0.0f;
 8004168:	4b07      	ldr	r3, [pc, #28]	@ (8004188 <gyro_turn_reset+0x34>)
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
    pid_last_ms = HAL_GetTick();
 8004170:	f002 fa50 	bl	8006614 <HAL_GetTick>
 8004174:	4603      	mov	r3, r0
 8004176:	4a05      	ldr	r2, [pc, #20]	@ (800418c <gyro_turn_reset+0x38>)
 8004178:	6013      	str	r3, [r2, #0]
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20001308 	.word	0x20001308
 8004184:	2000130c 	.word	0x2000130c
 8004188:	20001310 	.word	0x20001310
 800418c:	200012f4 	.word	0x200012f4

08004190 <gyro_rate_pid_step>:

float gyro_rate_pid_step(float sp_dps, float meas_dps, float *p_dt) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	ed87 0a03 	vstr	s0, [r7, #12]
 800419a:	edc7 0a02 	vstr	s1, [r7, #8]
 800419e:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 80041a0:	f002 fa38 	bl	8006614 <HAL_GetTick>
 80041a4:	61b8      	str	r0, [r7, #24]
    float dt = (now - pid_last_ms) / 1000.0f;
 80041a6:	4b4e      	ldr	r3, [pc, #312]	@ (80042e0 <gyro_rate_pid_step+0x150>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041b6:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80042e4 <gyro_rate_pid_step+0x154>
 80041ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041be:	edc7 7a07 	vstr	s15, [r7, #28]
    if (dt <= 0.0f) dt = 0.002f;
 80041c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80041c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ce:	d801      	bhi.n	80041d4 <gyro_rate_pid_step+0x44>
 80041d0:	4b45      	ldr	r3, [pc, #276]	@ (80042e8 <gyro_rate_pid_step+0x158>)
 80041d2:	61fb      	str	r3, [r7, #28]
    pid_last_ms = now;
 80041d4:	4a42      	ldr	r2, [pc, #264]	@ (80042e0 <gyro_rate_pid_step+0x150>)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	6013      	str	r3, [r2, #0]
    if (p_dt) *p_dt = dt;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <gyro_rate_pid_step+0x56>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	601a      	str	r2, [r3, #0]

    float err = sp_dps - meas_dps;
 80041e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80041ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80041ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041f2:	edc7 7a05 	vstr	s15, [r7, #20]

    // integral (anti-windup)
    pid_int += err * dt;
 80041f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80041fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80041fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004202:	4b3a      	ldr	r3, [pc, #232]	@ (80042ec <gyro_rate_pid_step+0x15c>)
 8004204:	edd3 7a00 	vldr	s15, [r3]
 8004208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800420c:	4b37      	ldr	r3, [pc, #220]	@ (80042ec <gyro_rate_pid_step+0x15c>)
 800420e:	edc3 7a00 	vstr	s15, [r3]
    if (pid_int >  INTEGRAL_CLAMP) pid_int =  INTEGRAL_CLAMP;
 8004212:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <gyro_rate_pid_step+0x15c>)
 8004214:	edd3 7a00 	vldr	s15, [r3]
 8004218:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800421c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004224:	dd02      	ble.n	800422c <gyro_rate_pid_step+0x9c>
 8004226:	4a32      	ldr	r2, [pc, #200]	@ (80042f0 <gyro_rate_pid_step+0x160>)
 8004228:	4b30      	ldr	r3, [pc, #192]	@ (80042ec <gyro_rate_pid_step+0x15c>)
 800422a:	601a      	str	r2, [r3, #0]
    if (pid_int < -INTEGRAL_CLAMP) pid_int = -INTEGRAL_CLAMP;
 800422c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004230:	eeb1 7a67 	vneg.f32	s14, s15
 8004234:	4b2d      	ldr	r3, [pc, #180]	@ (80042ec <gyro_rate_pid_step+0x15c>)
 8004236:	edd3 7a00 	vldr	s15, [r3]
 800423a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800423e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004242:	dd06      	ble.n	8004252 <gyro_rate_pid_step+0xc2>
 8004244:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004248:	eef1 7a67 	vneg.f32	s15, s15
 800424c:	4b27      	ldr	r3, [pc, #156]	@ (80042ec <gyro_rate_pid_step+0x15c>)
 800424e:	edc3 7a00 	vstr	s15, [r3]

    // derivative (filtered)
    float d_raw = (err - pid_prev_err) / dt;
 8004252:	4b28      	ldr	r3, [pc, #160]	@ (80042f4 <gyro_rate_pid_step+0x164>)
 8004254:	edd3 7a00 	vldr	s15, [r3]
 8004258:	ed97 7a05 	vldr	s14, [r7, #20]
 800425c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004260:	ed97 7a07 	vldr	s14, [r7, #28]
 8004264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004268:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_deriv_f = DERIV_ALPHA * pid_deriv_f + (1.0f - DERIV_ALPHA) * d_raw;
 800426c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80042f8 <gyro_rate_pid_step+0x168>
 8004270:	4b22      	ldr	r3, [pc, #136]	@ (80042fc <gyro_rate_pid_step+0x16c>)
 8004272:	edd3 7a00 	vldr	s15, [r3]
 8004276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800427a:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80042f8 <gyro_rate_pid_step+0x168>
 800427e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004282:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004286:	edd7 7a04 	vldr	s15, [r7, #16]
 800428a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800428e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004292:	4b1a      	ldr	r3, [pc, #104]	@ (80042fc <gyro_rate_pid_step+0x16c>)
 8004294:	edc3 7a00 	vstr	s15, [r3]
    pid_prev_err = err;
 8004298:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <gyro_rate_pid_step+0x164>)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	6013      	str	r3, [r2, #0]

    // PID → ΔPWM (right - left)
    return Kp_g*err + Ki_g*pid_int + Kd_g*pid_deriv_f;
 800429e:	4b18      	ldr	r3, [pc, #96]	@ (8004300 <gyro_rate_pid_step+0x170>)
 80042a0:	ed93 7a00 	vldr	s14, [r3]
 80042a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80042a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ac:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <gyro_rate_pid_step+0x174>)
 80042ae:	edd3 6a00 	vldr	s13, [r3]
 80042b2:	4b0e      	ldr	r3, [pc, #56]	@ (80042ec <gyro_rate_pid_step+0x15c>)
 80042b4:	edd3 7a00 	vldr	s15, [r3]
 80042b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042c0:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <gyro_rate_pid_step+0x178>)
 80042c2:	edd3 6a00 	vldr	s13, [r3]
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <gyro_rate_pid_step+0x16c>)
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80042d4:	eeb0 0a67 	vmov.f32	s0, s15
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	200012f4 	.word	0x200012f4
 80042e4:	447a0000 	.word	0x447a0000
 80042e8:	3b03126f 	.word	0x3b03126f
 80042ec:	20001308 	.word	0x20001308
 80042f0:	41200000 	.word	0x41200000
 80042f4:	2000130c 	.word	0x2000130c
 80042f8:	3f666666 	.word	0x3f666666
 80042fc:	20001310 	.word	0x20001310
 8004300:	20000008 	.word	0x20000008
 8004304:	2000000c 	.word	0x2000000c
 8004308:	20000010 	.word	0x20000010

0800430c <turn_in_place_gyro>:
/**
 * In-place turn by angle (deg). +angle = CCW/left, -angle = CW/right.
 * base_pwm = 80..250 is typical. timeout_ms is safety.
 */
void turn_in_place_gyro(float angle_deg, int base_pwm, uint32_t timeout_ms)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	ed2d 8b02 	vpush	{d8}
 8004312:	b098      	sub	sp, #96	@ 0x60
 8004314:	af00      	add	r7, sp, #0
 8004316:	ed87 0a03 	vstr	s0, [r7, #12]
 800431a:	60b8      	str	r0, [r7, #8]
 800431c:	6079      	str	r1, [r7, #4]
    if (base_pwm < 60)  base_pwm = 60;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b3b      	cmp	r3, #59	@ 0x3b
 8004322:	dc01      	bgt.n	8004328 <turn_in_place_gyro+0x1c>
 8004324:	233c      	movs	r3, #60	@ 0x3c
 8004326:	60bb      	str	r3, [r7, #8]
    if (base_pwm > 400) base_pwm = 400;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800432e:	dd02      	ble.n	8004336 <turn_in_place_gyro+0x2a>
 8004330:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004334:	60bb      	str	r3, [r7, #8]

    gyro_turn_reset();
 8004336:	f7ff ff0d 	bl	8004154 <gyro_turn_reset>

    float yaw = 0.0f;                  // integrated heading (deg)
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float target = angle_deg;    // signed target
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t t0 = HAL_GetTick();
 8004344:	f002 f966 	bl	8006614 <HAL_GetTick>
 8004348:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t settle_start = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	65bb      	str	r3, [r7, #88]	@ 0x58

    // last timestamp for yaw integration
    uint32_t last_ms = HAL_GetTick();
 800434e:	f002 f961 	bl	8006614 <HAL_GetTick>
 8004352:	6578      	str	r0, [r7, #84]	@ 0x54

    while (1) {
        // --- timing ---
        uint32_t now = HAL_GetTick();
 8004354:	f002 f95e 	bl	8006614 <HAL_GetTick>
 8004358:	6378      	str	r0, [r7, #52]	@ 0x34
        float dt = (now - last_ms) / 1000.0f;
 800435a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800435c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004368:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8004608 <turn_in_place_gyro+0x2fc>
 800436c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004370:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        if (dt <= 0.0f) dt = 0.001f;
 8004374:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8004378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004380:	d801      	bhi.n	8004386 <turn_in_place_gyro+0x7a>
 8004382:	4ba2      	ldr	r3, [pc, #648]	@ (800460c <turn_in_place_gyro+0x300>)
 8004384:	653b      	str	r3, [r7, #80]	@ 0x50
        last_ms = now;
 8004386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004388:	657b      	str	r3, [r7, #84]	@ 0x54
        mpu9250_read_gyro();
 800438a:	f7fd fa71 	bl	8001870 <mpu9250_read_gyro>
        // --- sensors ---
        float gz = mpu9250_get_gyro_z_compensated();  // deg/s
 800438e:	f7fd fa35 	bl	80017fc <mpu9250_get_gyro_z_compensated>
 8004392:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

        // --- integrate heading (keep sign!) ---
        yaw += gz * dt;
 8004396:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800439a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800439e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80043a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043aa:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

        // signed angle error (THIS FIXES THE MAIN BUG)
        float ang_err = target - yaw;
 80043ae:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80043b2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80043b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        // desired rate with braking law (changes sign if you overshoot)
        float omega_brake = sqrtf(fmaxf(0.0f, 2.0f * ALPHA_MAX_DPS2 * fabsf(ang_err)));
 80043be:	4b94      	ldr	r3, [pc, #592]	@ (8004610 <turn_in_place_gyro+0x304>)
 80043c0:	edd3 7a00 	vldr	s15, [r3]
 80043c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80043c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80043cc:	eef0 7ae7 	vabs.f32	s15, s15
 80043d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d4:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8004614 <turn_in_place_gyro+0x308>
 80043d8:	eeb0 0a67 	vmov.f32	s0, s15
 80043dc:	f009 faea 	bl	800d9b4 <fmaxf>
 80043e0:	eef0 7a40 	vmov.f32	s15, s0
 80043e4:	eeb0 0a67 	vmov.f32	s0, s15
 80043e8:	f009 fac6 	bl	800d978 <sqrtf>
 80043ec:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        float omega_des = clampf_local(omega_brake, 0.0f, OMEGA_MAX_DPS) * signf(ang_err);
 80043f0:	4b89      	ldr	r3, [pc, #548]	@ (8004618 <turn_in_place_gyro+0x30c>)
 80043f2:	edd3 7a00 	vldr	s15, [r3]
 80043f6:	eeb0 1a67 	vmov.f32	s2, s15
 80043fa:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8004614 <turn_in_place_gyro+0x308>
 80043fe:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8004402:	f7ff fd49 	bl	8003e98 <clampf_local>
 8004406:	eeb0 8a40 	vmov.f32	s16, s0
 800440a:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800440e:	f7ff fe85 	bl	800411c <signf>
 8004412:	eef0 7a40 	vmov.f32	s15, s0
 8004416:	ee68 7a27 	vmul.f32	s15, s16, s15
 800441a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

        // small deadband on command (avoid micro twitch)
        if (fabsf(omega_des) < OMEGA_CMD_DEADBAND) omega_des = 0.0f;
 800441e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004422:	eeb0 7ae7 	vabs.f32	s14, s15
 8004426:	4b7d      	ldr	r3, [pc, #500]	@ (800461c <turn_in_place_gyro+0x310>)
 8004428:	edd3 7a00 	vldr	s15, [r3]
 800442c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004434:	d502      	bpl.n	800443c <turn_in_place_gyro+0x130>
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	64fb      	str	r3, [r7, #76]	@ 0x4c

        // --- inner rate loop ---
        float pid_dt = 0.0f;
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
        float dPWM_pid = gyro_rate_pid_step(omega_des, gz, &pid_dt);  // ΔPWM from PID
 8004442:	f107 0310 	add.w	r3, r7, #16
 8004446:	4618      	mov	r0, r3
 8004448:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 800444c:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8004450:	f7ff fe9e 	bl	8004190 <gyro_rate_pid_step>
 8004454:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        float dPWM_ff  = (fabsf(omega_des) > 0.0f) ? (omega_des / GYRO_K_DPS_PER_DPWM) : 0.0f;
 8004458:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800445c:	eef0 7ae7 	vabs.f32	s15, s15
 8004460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004468:	dd06      	ble.n	8004478 <turn_in_place_gyro+0x16c>
 800446a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800446e:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8004620 <turn_in_place_gyro+0x314>
 8004472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004476:	e001      	b.n	800447c <turn_in_place_gyro+0x170>
 8004478:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8004614 <turn_in_place_gyro+0x308>
 800447c:	edc7 7a08 	vstr	s15, [r7, #32]
        float dPWM     = dPWM_ff + dPWM_pid;   // total ΔPWM (right - left), signed
 8004480:	ed97 7a08 	vldr	s14, [r7, #32]
 8004484:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800448c:	edc7 7a07 	vstr	s15, [r7, #28]

        // split ΔPWM around base so both sides get torque
        float right_mag = (float)base_pwm + 0.5f * fabsf(dPWM);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800449a:	edd7 7a07 	vldr	s15, [r7, #28]
 800449e:	eef0 7ae7 	vabs.f32	s15, s15
 80044a2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80044a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ae:	edc7 7a06 	vstr	s15, [r7, #24]
        float left_mag  = (float)base_pwm + 0.5f * fabsf(dPWM);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	ee07 3a90 	vmov	s15, r3
 80044b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80044c0:	eef0 7ae7 	vabs.f32	s15, s15
 80044c4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80044c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d0:	edc7 7a05 	vstr	s15, [r7, #20]

        // decide directions from CURRENT command sign (not the initial turn dir)
        bool left_forward, right_forward;
        if (dPWM >= 0.0f) {
 80044d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80044d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e0:	db06      	blt.n	80044f0 <turn_in_place_gyro+0x1e4>
            // turn left: left backward, right forward
            left_forward  = false;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            right_forward = true;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80044ee:	e005      	b.n	80044fc <turn_in_place_gyro+0x1f0>
        } else {
            // turn right: left forward, right backward
            left_forward  = true;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            right_forward = false;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        }

        // if command very small AND rate small, cut power to stop cleanly
        if (fabsf(ang_err) <= ANGLE_TOL_DEG && fabsf(gz) <= RATE_TOL_DPS) {
 80044fc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004500:	eeb0 7ae7 	vabs.f32	s14, s15
 8004504:	4b47      	ldr	r3, [pc, #284]	@ (8004624 <turn_in_place_gyro+0x318>)
 8004506:	edd3 7a00 	vldr	s15, [r3]
 800450a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	d822      	bhi.n	800455a <turn_in_place_gyro+0x24e>
 8004514:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004518:	eeb0 7ae7 	vabs.f32	s14, s15
 800451c:	4b42      	ldr	r3, [pc, #264]	@ (8004628 <turn_in_place_gyro+0x31c>)
 800451e:	edd3 7a00 	vldr	s15, [r3]
 8004522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452a:	d816      	bhi.n	800455a <turn_in_place_gyro+0x24e>
            motor_set(0, true, 0);
 800452c:	2200      	movs	r2, #0
 800452e:	2101      	movs	r1, #1
 8004530:	2000      	movs	r0, #0
 8004532:	f7ff fc4b 	bl	8003dcc <motor_set>
            motor_set(1, true, 0);
 8004536:	2200      	movs	r2, #0
 8004538:	2101      	movs	r1, #1
 800453a:	2001      	movs	r0, #1
 800453c:	f7ff fc46 	bl	8003dcc <motor_set>
            if (settle_start == 0) settle_start = now;
 8004540:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <turn_in_place_gyro+0x23e>
 8004546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004548:	65bb      	str	r3, [r7, #88]	@ 0x58
            if ((now - settle_start) >= SETTLE_MS) break;
 800454a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800454c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	4b36      	ldr	r3, [pc, #216]	@ (800462c <turn_in_place_gyro+0x320>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d340      	bcc.n	80045da <turn_in_place_gyro+0x2ce>
 8004558:	e04a      	b.n	80045f0 <turn_in_place_gyro+0x2e4>
        } else {
            settle_start = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	65bb      	str	r3, [r7, #88]	@ 0x58

            // Apply PWM (no fake “min move” offsets here—let control truly go to 0 near stop)
            int pwmL = (int)roundf(left_mag);
 800455e:	ed97 0a05 	vldr	s0, [r7, #20]
 8004562:	f009 fa91 	bl	800da88 <roundf>
 8004566:	eef0 7a40 	vmov.f32	s15, s0
 800456a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800456e:	ee17 3a90 	vmov	r3, s15
 8004572:	647b      	str	r3, [r7, #68]	@ 0x44
            int pwmR = (int)roundf(right_mag);
 8004574:	ed97 0a06 	vldr	s0, [r7, #24]
 8004578:	f009 fa86 	bl	800da88 <roundf>
 800457c:	eef0 7a40 	vmov.f32	s15, s0
 8004580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004584:	ee17 3a90 	vmov	r3, s15
 8004588:	643b      	str	r3, [r7, #64]	@ 0x40
            if (pwmL < 0) pwmL = 0;
 800458a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800458c:	2b00      	cmp	r3, #0
 800458e:	da01      	bge.n	8004594 <turn_in_place_gyro+0x288>
 8004590:	2300      	movs	r3, #0
 8004592:	647b      	str	r3, [r7, #68]	@ 0x44
            if (pwmL > 1000) pwmL = 1000;
 8004594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004596:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800459a:	dd02      	ble.n	80045a2 <turn_in_place_gyro+0x296>
 800459c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045a0:	647b      	str	r3, [r7, #68]	@ 0x44
            if (pwmR < 0) pwmR = 0;
 80045a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	da01      	bge.n	80045ac <turn_in_place_gyro+0x2a0>
 80045a8:	2300      	movs	r3, #0
 80045aa:	643b      	str	r3, [r7, #64]	@ 0x40
            if (pwmR > 1000) pwmR = 1000;
 80045ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045b2:	dd02      	ble.n	80045ba <turn_in_place_gyro+0x2ae>
 80045b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045b8:	643b      	str	r3, [r7, #64]	@ 0x40

            motor_set(0, left_forward,  (uint16_t)pwmL);
 80045ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045bc:	b29a      	uxth	r2, r3
 80045be:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80045c2:	4619      	mov	r1, r3
 80045c4:	2000      	movs	r0, #0
 80045c6:	f7ff fc01 	bl	8003dcc <motor_set>
            motor_set(1, right_forward, (uint16_t)pwmR);
 80045ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80045d2:	4619      	mov	r1, r3
 80045d4:	2001      	movs	r0, #1
 80045d6:	f7ff fbf9 	bl	8003dcc <motor_set>
        }

        if ((now - t0) > timeout_ms) break;
 80045da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d303      	bcc.n	80045ee <turn_in_place_gyro+0x2e2>

        HAL_Delay(2); // ~500 Hz outer loop
 80045e6:	2002      	movs	r0, #2
 80045e8:	f002 f820 	bl	800662c <HAL_Delay>
    while (1) {
 80045ec:	e6b2      	b.n	8004354 <turn_in_place_gyro+0x48>
        if ((now - t0) > timeout_ms) break;
 80045ee:	bf00      	nop
    }

    break_motors();
 80045f0:	f7ff fb54 	bl	8003c9c <break_motors>
    HAL_Delay(60);
 80045f4:	203c      	movs	r0, #60	@ 0x3c
 80045f6:	f002 f819 	bl	800662c <HAL_Delay>
}
 80045fa:	bf00      	nop
 80045fc:	3760      	adds	r7, #96	@ 0x60
 80045fe:	46bd      	mov	sp, r7
 8004600:	ecbd 8b02 	vpop	{d8}
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	447a0000 	.word	0x447a0000
 800460c:	3a83126f 	.word	0x3a83126f
 8004610:	20000018 	.word	0x20000018
 8004614:	00000000 	.word	0x00000000
 8004618:	20000014 	.word	0x20000014
 800461c:	20000028 	.word	0x20000028
 8004620:	3fb0ff97 	.word	0x3fb0ff97
 8004624:	2000001c 	.word	0x2000001c
 8004628:	20000020 	.word	0x20000020
 800462c:	20000024 	.word	0x20000024

08004630 <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 8004634:	2200      	movs	r2, #0
 8004636:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800463a:	480b      	ldr	r0, [pc, #44]	@ (8004668 <turn_off_emitters+0x38>)
 800463c:	f002 ff34 	bl	80074a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8004640:	2200      	movs	r2, #0
 8004642:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004646:	4809      	ldr	r0, [pc, #36]	@ (800466c <turn_off_emitters+0x3c>)
 8004648:	f002 ff2e 	bl	80074a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004652:	4805      	ldr	r0, [pc, #20]	@ (8004668 <turn_off_emitters+0x38>)
 8004654:	f002 ff28 	bl	80074a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800465e:	4803      	ldr	r0, [pc, #12]	@ (800466c <turn_off_emitters+0x3c>)
 8004660:	f002 ff22 	bl	80074a8 <HAL_GPIO_WritePin>
}
 8004664:	bf00      	nop
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40020400 	.word	0x40020400
 800466c:	40020000 	.word	0x40020000

08004670 <read_adc_channel>:

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef cfg = {0};
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	60da      	str	r2, [r3, #12]
    cfg.Channel = channel;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60fb      	str	r3, [r7, #12]
    cfg.Rank = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	613b      	str	r3, [r7, #16]
    cfg.SamplingTime = ADC_SAMPLETIME_480CYCLES; // more stable than 84
 800468e:	2307      	movs	r3, #7
 8004690:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &cfg) != HAL_OK) return 0;
 8004692:	f107 030c 	add.w	r3, r7, #12
 8004696:	4619      	mov	r1, r3
 8004698:	4815      	ldr	r0, [pc, #84]	@ (80046f0 <read_adc_channel+0x80>)
 800469a:	f002 f9af 	bl	80069fc <HAL_ADC_ConfigChannel>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <read_adc_channel+0x38>
 80046a4:	2300      	movs	r3, #0
 80046a6:	e01f      	b.n	80046e8 <read_adc_channel+0x78>

    dwt_delay_us(5);                     // tiny mux settle
 80046a8:	2005      	movs	r0, #5
 80046aa:	f7fe f89d 	bl	80027e8 <dwt_delay_us>

    // dummy conversion (discard)
    HAL_ADC_Start(&hadc1);
 80046ae:	4810      	ldr	r0, [pc, #64]	@ (80046f0 <read_adc_channel+0x80>)
 80046b0:	f002 f824 	bl	80066fc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 80046b4:	210a      	movs	r1, #10
 80046b6:	480e      	ldr	r0, [pc, #56]	@ (80046f0 <read_adc_channel+0x80>)
 80046b8:	f002 f907 	bl	80068ca <HAL_ADC_PollForConversion>
    (void)HAL_ADC_GetValue(&hadc1);
 80046bc:	480c      	ldr	r0, [pc, #48]	@ (80046f0 <read_adc_channel+0x80>)
 80046be:	f002 f98f 	bl	80069e0 <HAL_ADC_GetValue>
    HAL_ADC_Stop(&hadc1);
 80046c2:	480b      	ldr	r0, [pc, #44]	@ (80046f0 <read_adc_channel+0x80>)
 80046c4:	f002 f8ce 	bl	8006864 <HAL_ADC_Stop>

    // real conversion
    HAL_ADC_Start(&hadc1);
 80046c8:	4809      	ldr	r0, [pc, #36]	@ (80046f0 <read_adc_channel+0x80>)
 80046ca:	f002 f817 	bl	80066fc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 80046ce:	210a      	movs	r1, #10
 80046d0:	4807      	ldr	r0, [pc, #28]	@ (80046f0 <read_adc_channel+0x80>)
 80046d2:	f002 f8fa 	bl	80068ca <HAL_ADC_PollForConversion>
    uint16_t v = HAL_ADC_GetValue(&hadc1);
 80046d6:	4806      	ldr	r0, [pc, #24]	@ (80046f0 <read_adc_channel+0x80>)
 80046d8:	f002 f982 	bl	80069e0 <HAL_ADC_GetValue>
 80046dc:	4603      	mov	r3, r0
 80046de:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 80046e0:	4803      	ldr	r0, [pc, #12]	@ (80046f0 <read_adc_channel+0x80>)
 80046e2:	f002 f8bf 	bl	8006864 <HAL_ADC_Stop>
    return v;
 80046e6:	8bfb      	ldrh	r3, [r7, #30]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000260 	.word	0x20000260

080046f4 <update_sensors>:
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
}



void update_sensors(void){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
	turn_off_emitters();
 80046fa:	f7ff ff99 	bl	8004630 <turn_off_emitters>
	//dwt_delay_us(500);
	uint16_t off_FL = read_adc_channel(ADC_CHANNEL_5);
 80046fe:	2005      	movs	r0, #5
 8004700:	f7ff ffb6 	bl	8004670 <read_adc_channel>
 8004704:	4603      	mov	r3, r0
 8004706:	83bb      	strh	r3, [r7, #28]
	uint16_t off_FR = read_adc_channel(ADC_CHANNEL_2);
 8004708:	2002      	movs	r0, #2
 800470a:	f7ff ffb1 	bl	8004670 <read_adc_channel>
 800470e:	4603      	mov	r3, r0
 8004710:	83fb      	strh	r3, [r7, #30]
	uint16_t off_L = read_adc_channel(ADC_CHANNEL_4);
 8004712:	2004      	movs	r0, #4
 8004714:	f7ff ffac 	bl	8004670 <read_adc_channel>
 8004718:	4603      	mov	r3, r0
 800471a:	817b      	strh	r3, [r7, #10]
	uint16_t off_R = read_adc_channel(ADC_CHANNEL_3);
 800471c:	2003      	movs	r0, #3
 800471e:	f7ff ffa7 	bl	8004670 <read_adc_channel>
 8004722:	4603      	mov	r3, r0
 8004724:	813b      	strh	r3, [r7, #8]

	EMIT_ON(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin);
 8004726:	2201      	movs	r2, #1
 8004728:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800472c:	486a      	ldr	r0, [pc, #424]	@ (80048d8 <update_sensors+0x1e4>)
 800472e:	f002 febb 	bl	80074a8 <HAL_GPIO_WritePin>
	EMIT_ON(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin);
 8004732:	2201      	movs	r2, #1
 8004734:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004738:	4868      	ldr	r0, [pc, #416]	@ (80048dc <update_sensors+0x1e8>)
 800473a:	f002 feb5 	bl	80074a8 <HAL_GPIO_WritePin>
	dwt_delay_us(50);
 800473e:	2032      	movs	r0, #50	@ 0x32
 8004740:	f7fe f852 	bl	80027e8 <dwt_delay_us>
	//HAL_Delay(1);

	uint16_t on_FL = read_adc_channel(ADC_CHANNEL_5);
 8004744:	2005      	movs	r0, #5
 8004746:	f7ff ff93 	bl	8004670 <read_adc_channel>
 800474a:	4603      	mov	r3, r0
 800474c:	80fb      	strh	r3, [r7, #6]
	uint16_t on_FR = read_adc_channel(ADC_CHANNEL_2);
 800474e:	2002      	movs	r0, #2
 8004750:	f7ff ff8e 	bl	8004670 <read_adc_channel>
 8004754:	4603      	mov	r3, r0
 8004756:	80bb      	strh	r3, [r7, #4]

	turn_off_emitters();
 8004758:	f7ff ff6a 	bl	8004630 <turn_off_emitters>
	EMIT_ON(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin);
 800475c:	2201      	movs	r2, #1
 800475e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004762:	485e      	ldr	r0, [pc, #376]	@ (80048dc <update_sensors+0x1e8>)
 8004764:	f002 fea0 	bl	80074a8 <HAL_GPIO_WritePin>
	EMIT_ON(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin);
 8004768:	2201      	movs	r2, #1
 800476a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800476e:	485a      	ldr	r0, [pc, #360]	@ (80048d8 <update_sensors+0x1e4>)
 8004770:	f002 fe9a 	bl	80074a8 <HAL_GPIO_WritePin>
	dwt_delay_us(80);
 8004774:	2050      	movs	r0, #80	@ 0x50
 8004776:	f7fe f837 	bl	80027e8 <dwt_delay_us>
	//HAL_Delay(1);

	uint16_t on_L = read_adc_channel(ADC_CHANNEL_4);
 800477a:	2004      	movs	r0, #4
 800477c:	f7ff ff78 	bl	8004670 <read_adc_channel>
 8004780:	4603      	mov	r3, r0
 8004782:	807b      	strh	r3, [r7, #2]
	uint16_t on_R = read_adc_channel(ADC_CHANNEL_3);
 8004784:	2003      	movs	r0, #3
 8004786:	f7ff ff73 	bl	8004670 <read_adc_channel>
 800478a:	4603      	mov	r3, r0
 800478c:	803b      	strh	r3, [r7, #0]

	turn_off_emitters();
 800478e:	f7ff ff4f 	bl	8004630 <turn_off_emitters>
	uint32_t diff_FL;
	uint32_t diff_FR;
	uint32_t diff_L;
	uint32_t diff_R;

	if (on_FL>off_FL){
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	8bbb      	ldrh	r3, [r7, #28]
 8004796:	429a      	cmp	r2, r3
 8004798:	d904      	bls.n	80047a4 <update_sensors+0xb0>
		diff_FL = (uint32_t)on_FL-(uint32_t)off_FL;
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	8bbb      	ldrh	r3, [r7, #28]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	e001      	b.n	80047a8 <update_sensors+0xb4>
	}else{
		diff_FL =0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
	}
	if (on_FR>off_FR){
 80047a8:	88ba      	ldrh	r2, [r7, #4]
 80047aa:	8bfb      	ldrh	r3, [r7, #30]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d904      	bls.n	80047ba <update_sensors+0xc6>
		diff_FR = (uint32_t)on_FR-(uint32_t)off_FR;
 80047b0:	88ba      	ldrh	r2, [r7, #4]
 80047b2:	8bfb      	ldrh	r3, [r7, #30]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	e001      	b.n	80047be <update_sensors+0xca>
	}else{
		diff_FR =0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
	}
	if (on_L>off_L){
 80047be:	887a      	ldrh	r2, [r7, #2]
 80047c0:	897b      	ldrh	r3, [r7, #10]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d904      	bls.n	80047d0 <update_sensors+0xdc>
		diff_L = (uint32_t)on_L-(uint32_t)off_L;
 80047c6:	887a      	ldrh	r2, [r7, #2]
 80047c8:	897b      	ldrh	r3, [r7, #10]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	e001      	b.n	80047d4 <update_sensors+0xe0>
	}else{
		diff_L=0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]
	}
	if (on_R>off_R){
 80047d4:	883a      	ldrh	r2, [r7, #0]
 80047d6:	893b      	ldrh	r3, [r7, #8]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d904      	bls.n	80047e6 <update_sensors+0xf2>
		diff_R = (uint32_t)on_R-(uint32_t)off_R;
 80047dc:	883a      	ldrh	r2, [r7, #0]
 80047de:	893b      	ldrh	r3, [r7, #8]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e001      	b.n	80047ea <update_sensors+0xf6>
	}else{
		diff_R = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
	}

	diff_FL=(diff_FL*NOMINAL)/1000;
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047f0:	fb02 f303 	mul.w	r3, r2, r3
 80047f4:	4a3a      	ldr	r2, [pc, #232]	@ (80048e0 <update_sensors+0x1ec>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	099b      	lsrs	r3, r3, #6
 80047fc:	61bb      	str	r3, [r7, #24]
	diff_FR=(diff_FR*NOMINAL)/1000;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	4a35      	ldr	r2, [pc, #212]	@ (80048e0 <update_sensors+0x1ec>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	099b      	lsrs	r3, r3, #6
 8004810:	617b      	str	r3, [r7, #20]
	diff_L=(diff_L*NOMINAL)/1000;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004818:	fb02 f303 	mul.w	r3, r2, r3
 800481c:	4a30      	ldr	r2, [pc, #192]	@ (80048e0 <update_sensors+0x1ec>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	613b      	str	r3, [r7, #16]
	diff_R=(diff_R*NOMINAL)/1000;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	4a2b      	ldr	r2, [pc, #172]	@ (80048e0 <update_sensors+0x1ec>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	60fb      	str	r3, [r7, #12]


    sensors.front_left  = diff_FL;
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	b29a      	uxth	r2, r3
 800483e:	4b29      	ldr	r3, [pc, #164]	@ (80048e4 <update_sensors+0x1f0>)
 8004840:	811a      	strh	r2, [r3, #8]
    sensors.front_right = diff_FR;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	b29a      	uxth	r2, r3
 8004846:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <update_sensors+0x1f0>)
 8004848:	805a      	strh	r2, [r3, #2]
    sensors.side_left   = diff_L;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	b29a      	uxth	r2, r3
 800484e:	4b25      	ldr	r3, [pc, #148]	@ (80048e4 <update_sensors+0x1f0>)
 8004850:	80da      	strh	r2, [r3, #6]
    sensors.side_right  = diff_R; //tot_diff_R/5;  //
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	b29a      	uxth	r2, r3
 8004856:	4b23      	ldr	r3, [pc, #140]	@ (80048e4 <update_sensors+0x1f0>)
 8004858:	809a      	strh	r2, [r3, #4]
    sensors.battery = read_adc_channel(ADC_CHANNEL_0);
 800485a:	2000      	movs	r0, #0
 800485c:	f7ff ff08 	bl	8004670 <read_adc_channel>
 8004860:	4603      	mov	r3, r0
 8004862:	461a      	mov	r2, r3
 8004864:	4b1f      	ldr	r3, [pc, #124]	@ (80048e4 <update_sensors+0x1f0>)
 8004866:	801a      	strh	r2, [r3, #0]
                            (sensors.front_right > get_calibrated_threshold(1));
        sensors.wall_left = (sensors.side_left > get_calibrated_threshold(2));
        sensors.wall_right = (sensors.side_right > get_calibrated_threshold(3));
    } else {
        // Fallback to static thresholds
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT_L) ||
 8004868:	4b1e      	ldr	r3, [pc, #120]	@ (80048e4 <update_sensors+0x1f0>)
 800486a:	891b      	ldrh	r3, [r3, #8]
 800486c:	2b06      	cmp	r3, #6
 800486e:	d803      	bhi.n	8004878 <update_sensors+0x184>
                            (sensors.front_right > WALL_THRESHOLD_FRONT_R);
 8004870:	4b1c      	ldr	r3, [pc, #112]	@ (80048e4 <update_sensors+0x1f0>)
 8004872:	885b      	ldrh	r3, [r3, #2]
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT_L) ||
 8004874:	2b06      	cmp	r3, #6
 8004876:	d901      	bls.n	800487c <update_sensors+0x188>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <update_sensors+0x18a>
 800487c:	2300      	movs	r3, #0
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	b2da      	uxtb	r2, r3
 8004884:	4b17      	ldr	r3, [pc, #92]	@ (80048e4 <update_sensors+0x1f0>)
 8004886:	729a      	strb	r2, [r3, #10]
        sensors.wall_frontL= (sensors.front_left > WALL_THRESHOLD_FRONT_L);
 8004888:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <update_sensors+0x1f0>)
 800488a:	891b      	ldrh	r3, [r3, #8]
 800488c:	2b06      	cmp	r3, #6
 800488e:	bf8c      	ite	hi
 8004890:	2301      	movhi	r3, #1
 8004892:	2300      	movls	r3, #0
 8004894:	b2da      	uxtb	r2, r3
 8004896:	4b13      	ldr	r3, [pc, #76]	@ (80048e4 <update_sensors+0x1f0>)
 8004898:	735a      	strb	r2, [r3, #13]
        sensors.wall_frontR= (sensors.front_right > WALL_THRESHOLD_FRONT_R);
 800489a:	4b12      	ldr	r3, [pc, #72]	@ (80048e4 <update_sensors+0x1f0>)
 800489c:	885b      	ldrh	r3, [r3, #2]
 800489e:	2b06      	cmp	r3, #6
 80048a0:	bf8c      	ite	hi
 80048a2:	2301      	movhi	r3, #1
 80048a4:	2300      	movls	r3, #0
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	4b0e      	ldr	r3, [pc, #56]	@ (80048e4 <update_sensors+0x1f0>)
 80048aa:	739a      	strb	r2, [r3, #14]
        sensors.wall_left = (sensors.side_left > WALL_THRESHOLD_SIDE_L);
 80048ac:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <update_sensors+0x1f0>)
 80048ae:	88db      	ldrh	r3, [r3, #6]
 80048b0:	2b0f      	cmp	r3, #15
 80048b2:	bf8c      	ite	hi
 80048b4:	2301      	movhi	r3, #1
 80048b6:	2300      	movls	r3, #0
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <update_sensors+0x1f0>)
 80048bc:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > WALL_THRESHOLD_SIDE_R);
 80048be:	4b09      	ldr	r3, [pc, #36]	@ (80048e4 <update_sensors+0x1f0>)
 80048c0:	889b      	ldrh	r3, [r3, #4]
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	bf8c      	ite	hi
 80048c6:	2301      	movhi	r3, #1
 80048c8:	2300      	movls	r3, #0
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <update_sensors+0x1f0>)
 80048ce:	731a      	strb	r2, [r3, #12]

//	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
//		                          sensors.front_left, sensors.front_right,sensors.wall_front,
//		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);

}
 80048d0:	bf00      	nop
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40020400 	.word	0x40020400
 80048dc:	40020000 	.word	0x40020000
 80048e0:	10624dd3 	.word	0x10624dd3
 80048e4:	20000d7c 	.word	0x20000d7c

080048e8 <adc_system_diagnostics>:

    send_bluetooth_message("===============================\r\n");
}


void adc_system_diagnostics(void) {
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	b08e      	sub	sp, #56	@ 0x38
 80048ec:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 80048ee:	484b      	ldr	r0, [pc, #300]	@ (8004a1c <adc_system_diagnostics+0x134>)
 80048f0:	f7fc fc36 	bl	8001160 <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 80048f4:	4b4a      	ldr	r3, [pc, #296]	@ (8004a20 <adc_system_diagnostics+0x138>)
 80048f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 8004900:	4848      	ldr	r0, [pc, #288]	@ (8004a24 <adc_system_diagnostics+0x13c>)
 8004902:	f7fc fc2d 	bl	8001160 <send_bluetooth_message>
 8004906:	e002      	b.n	800490e <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 8004908:	4847      	ldr	r0, [pc, #284]	@ (8004a28 <adc_system_diagnostics+0x140>)
 800490a:	f7fc fc29 	bl	8001160 <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 800490e:	4b44      	ldr	r3, [pc, #272]	@ (8004a20 <adc_system_diagnostics+0x138>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 800491a:	4844      	ldr	r0, [pc, #272]	@ (8004a2c <adc_system_diagnostics+0x144>)
 800491c:	f7fc fc20 	bl	8001160 <send_bluetooth_message>
 8004920:	e002      	b.n	8004928 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 8004922:	4843      	ldr	r0, [pc, #268]	@ (8004a30 <adc_system_diagnostics+0x148>)
 8004924:	f7fc fc1c 	bl	8001160 <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 8004928:	4b42      	ldr	r3, [pc, #264]	@ (8004a34 <adc_system_diagnostics+0x14c>)
 800492a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492c:	2b01      	cmp	r3, #1
 800492e:	d103      	bne.n	8004938 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 8004930:	4841      	ldr	r0, [pc, #260]	@ (8004a38 <adc_system_diagnostics+0x150>)
 8004932:	f7fc fc15 	bl	8001160 <send_bluetooth_message>
 8004936:	e005      	b.n	8004944 <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 8004938:	4b3e      	ldr	r3, [pc, #248]	@ (8004a34 <adc_system_diagnostics+0x14c>)
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	4619      	mov	r1, r3
 800493e:	483f      	ldr	r0, [pc, #252]	@ (8004a3c <adc_system_diagnostics+0x154>)
 8004940:	f7fc fc24 	bl	800118c <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 8004944:	483e      	ldr	r0, [pc, #248]	@ (8004a40 <adc_system_diagnostics+0x158>)
 8004946:	f7fc fc0b 	bl	8001160 <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 800494a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a44 <adc_system_diagnostics+0x15c>)
 800494c:	f107 0420 	add.w	r4, r7, #32
 8004950:	461d      	mov	r5, r3
 8004952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 800495a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a48 <adc_system_diagnostics+0x160>)
 800495c:	f107 040c 	add.w	r4, r7, #12
 8004960:	461d      	mov	r5, r3
 8004962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004966:	682b      	ldr	r3, [r5, #0]
 8004968:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 800496a:	2300      	movs	r3, #0
 800496c:	637b      	str	r3, [r7, #52]	@ 0x34
 800496e:	e04b      	b.n	8004a08 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 8004970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	3338      	adds	r3, #56	@ 0x38
 8004976:	443b      	add	r3, r7
 8004978:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fe77 	bl	8004670 <read_adc_channel>
 8004982:	4603      	mov	r3, r0
 8004984:	461a      	mov	r2, r3
 8004986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	3338      	adds	r3, #56	@ 0x38
 800498c:	443b      	add	r3, r7
 800498e:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	3338      	adds	r3, #56	@ 0x38
 8004998:	443b      	add	r3, r7
 800499a:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 800499e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	3338      	adds	r3, #56	@ 0x38
 80049a4:	443b      	add	r3, r7
 80049a6:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01f      	beq.n	80049ee <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80049ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	3338      	adds	r3, #56	@ 0x38
 80049b4:	443b      	add	r3, r7
 80049b6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d015      	beq.n	80049ea <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 80049be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	3338      	adds	r3, #56	@ 0x38
 80049c4:	443b      	add	r3, r7
 80049c6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d00b      	beq.n	80049e6 <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 80049ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	3338      	adds	r3, #56	@ 0x38
 80049d4:	443b      	add	r3, r7
 80049d6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d101      	bne.n	80049e2 <adc_system_diagnostics+0xfa>
 80049de:	2204      	movs	r2, #4
 80049e0:	e006      	b.n	80049f0 <adc_system_diagnostics+0x108>
 80049e2:	2205      	movs	r2, #5
 80049e4:	e004      	b.n	80049f0 <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 80049e6:	2203      	movs	r2, #3
 80049e8:	e002      	b.n	80049f0 <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80049ea:	2202      	movs	r2, #2
 80049ec:	e000      	b.n	80049f0 <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80049ee:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 80049f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	3338      	adds	r3, #56	@ 0x38
 80049f6:	443b      	add	r3, r7
 80049f8:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80049fc:	4813      	ldr	r0, [pc, #76]	@ (8004a4c <adc_system_diagnostics+0x164>)
 80049fe:	f7fc fbc5 	bl	800118c <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 8004a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a04:	3301      	adds	r3, #1
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	ddb0      	ble.n	8004970 <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 8004a0e:	4810      	ldr	r0, [pc, #64]	@ (8004a50 <adc_system_diagnostics+0x168>)
 8004a10:	f7fc fba6 	bl	8001160 <send_bluetooth_message>
}
 8004a14:	bf00      	nop
 8004a16:	3738      	adds	r7, #56	@ 0x38
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a1c:	0800f424 	.word	0x0800f424
 8004a20:	40023800 	.word	0x40023800
 8004a24:	0800f448 	.word	0x0800f448
 8004a28:	0800f464 	.word	0x0800f464
 8004a2c:	0800f480 	.word	0x0800f480
 8004a30:	0800f49c 	.word	0x0800f49c
 8004a34:	20000260 	.word	0x20000260
 8004a38:	0800f4b8 	.word	0x0800f4b8
 8004a3c:	0800f4d0 	.word	0x0800f4d0
 8004a40:	0800f4e8 	.word	0x0800f4e8
 8004a44:	0800f518 	.word	0x0800f518
 8004a48:	0800f564 	.word	0x0800f564
 8004a4c:	0800f508 	.word	0x0800f508
 8004a50:	0800f400 	.word	0x0800f400

08004a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	4b10      	ldr	r3, [pc, #64]	@ (8004aa0 <HAL_MspInit+0x4c>)
 8004a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a62:	4a0f      	ldr	r2, [pc, #60]	@ (8004aa0 <HAL_MspInit+0x4c>)
 8004a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <HAL_MspInit+0x4c>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4b09      	ldr	r3, [pc, #36]	@ (8004aa0 <HAL_MspInit+0x4c>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	4a08      	ldr	r2, [pc, #32]	@ (8004aa0 <HAL_MspInit+0x4c>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <HAL_MspInit+0x4c>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800

08004aa4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	@ 0x28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aac:	f107 0314 	add.w	r3, r7, #20
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	60da      	str	r2, [r3, #12]
 8004aba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a17      	ldr	r2, [pc, #92]	@ (8004b20 <HAL_ADC_MspInit+0x7c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d127      	bne.n	8004b16 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	4b16      	ldr	r3, [pc, #88]	@ (8004b24 <HAL_ADC_MspInit+0x80>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ace:	4a15      	ldr	r2, [pc, #84]	@ (8004b24 <HAL_ADC_MspInit+0x80>)
 8004ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ad6:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <HAL_ADC_MspInit+0x80>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b24 <HAL_ADC_MspInit+0x80>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	4a0e      	ldr	r2, [pc, #56]	@ (8004b24 <HAL_ADC_MspInit+0x80>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004af2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <HAL_ADC_MspInit+0x80>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 8004afe:	233d      	movs	r3, #61	@ 0x3d
 8004b00:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b02:	2303      	movs	r3, #3
 8004b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b0a:	f107 0314 	add.w	r3, r7, #20
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4805      	ldr	r0, [pc, #20]	@ (8004b28 <HAL_ADC_MspInit+0x84>)
 8004b12:	f002 fb45 	bl	80071a0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004b16:	bf00      	nop
 8004b18:	3728      	adds	r7, #40	@ 0x28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40012000 	.word	0x40012000
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40020000 	.word	0x40020000

08004b2c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	@ 0x28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b34:	f107 0314 	add.w	r3, r7, #20
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a19      	ldr	r2, [pc, #100]	@ (8004bb0 <HAL_SPI_MspInit+0x84>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d12c      	bne.n	8004ba8 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	4b18      	ldr	r3, [pc, #96]	@ (8004bb4 <HAL_SPI_MspInit+0x88>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	4a17      	ldr	r2, [pc, #92]	@ (8004bb4 <HAL_SPI_MspInit+0x88>)
 8004b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b5e:	4b15      	ldr	r3, [pc, #84]	@ (8004bb4 <HAL_SPI_MspInit+0x88>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	4b11      	ldr	r3, [pc, #68]	@ (8004bb4 <HAL_SPI_MspInit+0x88>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	4a10      	ldr	r2, [pc, #64]	@ (8004bb4 <HAL_SPI_MspInit+0x88>)
 8004b74:	f043 0302 	orr.w	r3, r3, #2
 8004b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <HAL_SPI_MspInit+0x88>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 8004b86:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b94:	2303      	movs	r3, #3
 8004b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b98:	2305      	movs	r3, #5
 8004b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b9c:	f107 0314 	add.w	r3, r7, #20
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4805      	ldr	r0, [pc, #20]	@ (8004bb8 <HAL_SPI_MspInit+0x8c>)
 8004ba4:	f002 fafc 	bl	80071a0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004ba8:	bf00      	nop
 8004baa:	3728      	adds	r7, #40	@ 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40003800 	.word	0x40003800
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	40020400 	.word	0x40020400

08004bbc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	@ (8004c2c <HAL_TIM_Base_MspInit+0x70>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d116      	bne.n	8004bfc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	4b17      	ldr	r3, [pc, #92]	@ (8004c30 <HAL_TIM_Base_MspInit+0x74>)
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd6:	4a16      	ldr	r2, [pc, #88]	@ (8004c30 <HAL_TIM_Base_MspInit+0x74>)
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bde:	4b14      	ldr	r3, [pc, #80]	@ (8004c30 <HAL_TIM_Base_MspInit+0x74>)
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8004bea:	2200      	movs	r2, #0
 8004bec:	2107      	movs	r1, #7
 8004bee:	2019      	movs	r0, #25
 8004bf0:	f002 fa0d 	bl	800700e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004bf4:	2019      	movs	r0, #25
 8004bf6:	f002 fa26 	bl	8007046 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004bfa:	e012      	b.n	8004c22 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0c      	ldr	r2, [pc, #48]	@ (8004c34 <HAL_TIM_Base_MspInit+0x78>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d10d      	bne.n	8004c22 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	4b09      	ldr	r3, [pc, #36]	@ (8004c30 <HAL_TIM_Base_MspInit+0x74>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	4a08      	ldr	r2, [pc, #32]	@ (8004c30 <HAL_TIM_Base_MspInit+0x74>)
 8004c10:	f043 0302 	orr.w	r3, r3, #2
 8004c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c16:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <HAL_TIM_Base_MspInit+0x74>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40000400 	.word	0x40000400

08004c38 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	@ 0x30
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c40:	f107 031c 	add.w	r3, r7, #28
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c58:	d14b      	bne.n	8004cf2 <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	4a3e      	ldr	r2, [pc, #248]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	4b38      	ldr	r3, [pc, #224]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	4a37      	ldr	r2, [pc, #220]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c86:	4b35      	ldr	r3, [pc, #212]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	4b31      	ldr	r3, [pc, #196]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	4a30      	ldr	r2, [pc, #192]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004c9c:	f043 0302 	orr.w	r3, r3, #2
 8004ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 8004cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 8004cc4:	f107 031c 	add.w	r3, r7, #28
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4825      	ldr	r0, [pc, #148]	@ (8004d60 <HAL_TIM_Encoder_MspInit+0x128>)
 8004ccc:	f002 fa68 	bl	80071a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 8004ce4:	f107 031c 	add.w	r3, r7, #28
 8004ce8:	4619      	mov	r1, r3
 8004cea:	481e      	ldr	r0, [pc, #120]	@ (8004d64 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004cec:	f002 fa58 	bl	80071a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004cf0:	e030      	b.n	8004d54 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <HAL_TIM_Encoder_MspInit+0x130>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d12b      	bne.n	8004d54 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	4b16      	ldr	r3, [pc, #88]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	4a15      	ldr	r2, [pc, #84]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d06:	f043 0304 	orr.w	r3, r3, #4
 8004d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d0c:	4b13      	ldr	r3, [pc, #76]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d20:	4a0e      	ldr	r2, [pc, #56]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d22:	f043 0302 	orr.w	r3, r3, #2
 8004d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d28:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <HAL_TIM_Encoder_MspInit+0x124>)
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 8004d34:	23c0      	movs	r3, #192	@ 0xc0
 8004d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d40:	2300      	movs	r3, #0
 8004d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004d44:	2302      	movs	r3, #2
 8004d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d48:	f107 031c 	add.w	r3, r7, #28
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4805      	ldr	r0, [pc, #20]	@ (8004d64 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004d50:	f002 fa26 	bl	80071a0 <HAL_GPIO_Init>
}
 8004d54:	bf00      	nop
 8004d56:	3730      	adds	r7, #48	@ 0x30
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40020000 	.word	0x40020000
 8004d64:	40020400 	.word	0x40020400
 8004d68:	40000800 	.word	0x40000800

08004d6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	@ 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d74:	f107 0314 	add.w	r3, r7, #20
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	60da      	str	r2, [r3, #12]
 8004d82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a33      	ldr	r2, [pc, #204]	@ (8004e58 <HAL_TIM_MspPostInit+0xec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d11f      	bne.n	8004dce <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	4b32      	ldr	r3, [pc, #200]	@ (8004e5c <HAL_TIM_MspPostInit+0xf0>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d96:	4a31      	ldr	r2, [pc, #196]	@ (8004e5c <HAL_TIM_MspPostInit+0xf0>)
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e5c <HAL_TIM_MspPostInit+0xf0>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 8004daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db0:	2302      	movs	r3, #2
 8004db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db8:	2300      	movs	r3, #0
 8004dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4826      	ldr	r0, [pc, #152]	@ (8004e60 <HAL_TIM_MspPostInit+0xf4>)
 8004dc8:	f002 f9ea 	bl	80071a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004dcc:	e040      	b.n	8004e50 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a24      	ldr	r2, [pc, #144]	@ (8004e64 <HAL_TIM_MspPostInit+0xf8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d13b      	bne.n	8004e50 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8004e5c <HAL_TIM_MspPostInit+0xf0>)
 8004dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e5c <HAL_TIM_MspPostInit+0xf0>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004de8:	4b1c      	ldr	r3, [pc, #112]	@ (8004e5c <HAL_TIM_MspPostInit+0xf0>)
 8004dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df4:	2300      	movs	r3, #0
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	4b18      	ldr	r3, [pc, #96]	@ (8004e5c <HAL_TIM_MspPostInit+0xf0>)
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	4a17      	ldr	r2, [pc, #92]	@ (8004e5c <HAL_TIM_MspPostInit+0xf0>)
 8004dfe:	f043 0302 	orr.w	r3, r3, #2
 8004e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e04:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <HAL_TIM_MspPostInit+0xf0>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8004e10:	23c0      	movs	r3, #192	@ 0xc0
 8004e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e14:	2302      	movs	r3, #2
 8004e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e20:	2302      	movs	r3, #2
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	4619      	mov	r1, r3
 8004e2a:	480d      	ldr	r0, [pc, #52]	@ (8004e60 <HAL_TIM_MspPostInit+0xf4>)
 8004e2c:	f002 f9b8 	bl	80071a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 8004e30:	2303      	movs	r3, #3
 8004e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e34:	2302      	movs	r3, #2
 8004e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e40:	2302      	movs	r3, #2
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e44:	f107 0314 	add.w	r3, r7, #20
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4807      	ldr	r0, [pc, #28]	@ (8004e68 <HAL_TIM_MspPostInit+0xfc>)
 8004e4c:	f002 f9a8 	bl	80071a0 <HAL_GPIO_Init>
}
 8004e50:	bf00      	nop
 8004e52:	3728      	adds	r7, #40	@ 0x28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	40020000 	.word	0x40020000
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40020400 	.word	0x40020400

08004e6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	@ 0x28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e74:	f107 0314 	add.w	r3, r7, #20
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	609a      	str	r2, [r3, #8]
 8004e80:	60da      	str	r2, [r3, #12]
 8004e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1d      	ldr	r2, [pc, #116]	@ (8004f00 <HAL_UART_MspInit+0x94>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d134      	bne.n	8004ef8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	4b1c      	ldr	r3, [pc, #112]	@ (8004f04 <HAL_UART_MspInit+0x98>)
 8004e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e96:	4a1b      	ldr	r2, [pc, #108]	@ (8004f04 <HAL_UART_MspInit+0x98>)
 8004e98:	f043 0320 	orr.w	r3, r3, #32
 8004e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e9e:	4b19      	ldr	r3, [pc, #100]	@ (8004f04 <HAL_UART_MspInit+0x98>)
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	4b15      	ldr	r3, [pc, #84]	@ (8004f04 <HAL_UART_MspInit+0x98>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	4a14      	ldr	r2, [pc, #80]	@ (8004f04 <HAL_UART_MspInit+0x98>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eba:	4b12      	ldr	r3, [pc, #72]	@ (8004f04 <HAL_UART_MspInit+0x98>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8004ec6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004ed8:	2308      	movs	r3, #8
 8004eda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004edc:	f107 0314 	add.w	r3, r7, #20
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4809      	ldr	r0, [pc, #36]	@ (8004f08 <HAL_UART_MspInit+0x9c>)
 8004ee4:	f002 f95c 	bl	80071a0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2106      	movs	r1, #6
 8004eec:	2047      	movs	r0, #71	@ 0x47
 8004eee:	f002 f88e 	bl	800700e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004ef2:	2047      	movs	r0, #71	@ 0x47
 8004ef4:	f002 f8a7 	bl	8007046 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8004ef8:	bf00      	nop
 8004efa:	3728      	adds	r7, #40	@ 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40011400 	.word	0x40011400
 8004f04:	40023800 	.word	0x40023800
 8004f08:	40020000 	.word	0x40020000

08004f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f10:	bf00      	nop
 8004f12:	e7fd      	b.n	8004f10 <NMI_Handler+0x4>

08004f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <HardFault_Handler+0x4>

08004f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <MemManage_Handler+0x4>

08004f24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f28:	bf00      	nop
 8004f2a:	e7fd      	b.n	8004f28 <BusFault_Handler+0x4>

08004f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f30:	bf00      	nop
 8004f32:	e7fd      	b.n	8004f30 <UsageFault_Handler+0x4>

08004f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f62:	f001 fb43 	bl	80065ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8004f6e:	2002      	movs	r0, #2
 8004f70:	f002 face 	bl	8007510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f7c:	4802      	ldr	r0, [pc, #8]	@ (8004f88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004f7e:	f003 fff9 	bl	8008f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000300 	.word	0x20000300

08004f8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8004f90:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004f94:	f002 fabc 	bl	8007510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f98:	bf00      	nop
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004fa0:	4802      	ldr	r0, [pc, #8]	@ (8004fac <USART6_IRQHandler+0x10>)
 8004fa2:	f004 ff15 	bl	8009dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000420 	.word	0x20000420

08004fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return 1;
 8004fb4:	2301      	movs	r3, #1
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <_kill>:

int _kill(int pid, int sig)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004fca:	f006 fc59 	bl	800b880 <__errno>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2216      	movs	r2, #22
 8004fd2:	601a      	str	r2, [r3, #0]
  return -1;
 8004fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_exit>:

void _exit (int status)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff ffe7 	bl	8004fc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ff2:	bf00      	nop
 8004ff4:	e7fd      	b.n	8004ff2 <_exit+0x12>

08004ff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	e00a      	b.n	800501e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005008:	f3af 8000 	nop.w
 800500c:	4601      	mov	r1, r0
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	60ba      	str	r2, [r7, #8]
 8005014:	b2ca      	uxtb	r2, r1
 8005016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	3301      	adds	r3, #1
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	dbf0      	blt.n	8005008 <_read+0x12>
  }

  return len;
 8005026:	687b      	ldr	r3, [r7, #4]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e009      	b.n	8005056 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	60ba      	str	r2, [r7, #8]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	3301      	adds	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	dbf1      	blt.n	8005042 <_write+0x12>
  }
  return len;
 800505e:	687b      	ldr	r3, [r7, #4]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <_close>:

int _close(int file)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005090:	605a      	str	r2, [r3, #4]
  return 0;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <_isatty>:

int _isatty(int file)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80050a8:	2301      	movs	r3, #1
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050d8:	4a14      	ldr	r2, [pc, #80]	@ (800512c <_sbrk+0x5c>)
 80050da:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <_sbrk+0x60>)
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050e4:	4b13      	ldr	r3, [pc, #76]	@ (8005134 <_sbrk+0x64>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050ec:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <_sbrk+0x64>)
 80050ee:	4a12      	ldr	r2, [pc, #72]	@ (8005138 <_sbrk+0x68>)
 80050f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050f2:	4b10      	ldr	r3, [pc, #64]	@ (8005134 <_sbrk+0x64>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d207      	bcs.n	8005110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005100:	f006 fbbe 	bl	800b880 <__errno>
 8005104:	4603      	mov	r3, r0
 8005106:	220c      	movs	r2, #12
 8005108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295
 800510e:	e009      	b.n	8005124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005110:	4b08      	ldr	r3, [pc, #32]	@ (8005134 <_sbrk+0x64>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005116:	4b07      	ldr	r3, [pc, #28]	@ (8005134 <_sbrk+0x64>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	4a05      	ldr	r2, [pc, #20]	@ (8005134 <_sbrk+0x64>)
 8005120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005122:	68fb      	ldr	r3, [r7, #12]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20020000 	.word	0x20020000
 8005130:	00000400 	.word	0x00000400
 8005134:	20001314 	.word	0x20001314
 8005138:	200014b0 	.word	0x200014b0

0800513c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005140:	4b06      	ldr	r3, [pc, #24]	@ (800515c <SystemInit+0x20>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005146:	4a05      	ldr	r2, [pc, #20]	@ (800515c <SystemInit+0x20>)
 8005148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800514c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005150:	bf00      	nop
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	e000ed00 	.word	0xe000ed00

08005160 <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	460a      	mov	r2, r1
 800516a:	71fb      	strb	r3, [r7, #7]
 800516c:	4613      	mov	r3, r2
 800516e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf14      	ite	ne
 8005176:	2301      	movne	r3, #1
 8005178:	2300      	moveq	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	2110      	movs	r1, #16
 8005180:	4808      	ldr	r0, [pc, #32]	@ (80051a4 <led_status+0x44>)
 8005182:	f002 f991 	bl	80074a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005186:	79bb      	ldrb	r3, [r7, #6]
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	2120      	movs	r1, #32
 8005196:	4803      	ldr	r0, [pc, #12]	@ (80051a4 <led_status+0x44>)
 8005198:	f002 f986 	bl	80074a8 <HAL_GPIO_WritePin>
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40020400 	.word	0x40020400

080051a8 <led_sequence_startup>:

/**
 * @brief LED sequence for different states
 */
void led_sequence_startup(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 80051ae:	2300      	movs	r3, #0
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	e010      	b.n	80051d6 <led_sequence_startup+0x2e>
        led_status(1, 0);
 80051b4:	2100      	movs	r1, #0
 80051b6:	2001      	movs	r0, #1
 80051b8:	f7ff ffd2 	bl	8005160 <led_status>
        HAL_Delay(150);
 80051bc:	2096      	movs	r0, #150	@ 0x96
 80051be:	f001 fa35 	bl	800662c <HAL_Delay>
        led_status(0, 1);
 80051c2:	2101      	movs	r1, #1
 80051c4:	2000      	movs	r0, #0
 80051c6:	f7ff ffcb 	bl	8005160 <led_status>
        HAL_Delay(150);
 80051ca:	2096      	movs	r0, #150	@ 0x96
 80051cc:	f001 fa2e 	bl	800662c <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3301      	adds	r3, #1
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	ddeb      	ble.n	80051b4 <led_sequence_startup+0xc>
    }
    led_status(0, 0);
 80051dc:	2100      	movs	r1, #0
 80051de:	2000      	movs	r0, #0
 80051e0:	f7ff ffbe 	bl	8005160 <led_status>
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <led_sequence_exploring>:

/**
 * @brief LED sequence for exploration
 */
void led_sequence_exploring(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
    led_status(1, 0); // Left LED on during exploration
 80051f0:	2100      	movs	r1, #0
 80051f2:	2001      	movs	r0, #1
 80051f4:	f7ff ffb4 	bl	8005160 <led_status>
}
 80051f8:	bf00      	nop
 80051fa:	bd80      	pop	{r7, pc}

080051fc <led_sequence_returning>:

/**
 * @brief LED sequence for returning
 */
void led_sequence_returning(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
    led_status(0, 1); // Right LED on during return
 8005200:	2101      	movs	r1, #1
 8005202:	2000      	movs	r0, #0
 8005204:	f7ff ffac 	bl	8005160 <led_status>
}
 8005208:	bf00      	nop
 800520a:	bd80      	pop	{r7, pc}

0800520c <led_sequence_complete>:

/**
 * @brief LED sequence for completion
 */
void led_sequence_complete(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	e010      	b.n	800523a <led_sequence_complete+0x2e>
        led_status(1, 1);
 8005218:	2101      	movs	r1, #1
 800521a:	2001      	movs	r0, #1
 800521c:	f7ff ffa0 	bl	8005160 <led_status>
        HAL_Delay(200);
 8005220:	20c8      	movs	r0, #200	@ 0xc8
 8005222:	f001 fa03 	bl	800662c <HAL_Delay>
        led_status(0, 0);
 8005226:	2100      	movs	r1, #0
 8005228:	2000      	movs	r0, #0
 800522a:	f7ff ff99 	bl	8005160 <led_status>
        HAL_Delay(200);
 800522e:	20c8      	movs	r0, #200	@ 0xc8
 8005230:	f001 f9fc 	bl	800662c <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3301      	adds	r3, #1
 8005238:	607b      	str	r3, [r7, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b04      	cmp	r3, #4
 800523e:	ddeb      	ble.n	8005218 <led_sequence_complete+0xc>
    }
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <led_sequence_error>:

/**
 * @brief LED sequence for error
 */
void led_sequence_error(void)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {
 8005250:	2300      	movs	r3, #0
 8005252:	607b      	str	r3, [r7, #4]
 8005254:	e010      	b.n	8005278 <led_sequence_error+0x2e>
        led_status(1, 1);
 8005256:	2101      	movs	r1, #1
 8005258:	2001      	movs	r0, #1
 800525a:	f7ff ff81 	bl	8005160 <led_status>
        HAL_Delay(50);
 800525e:	2032      	movs	r0, #50	@ 0x32
 8005260:	f001 f9e4 	bl	800662c <HAL_Delay>
        led_status(0, 0);
 8005264:	2100      	movs	r1, #0
 8005266:	2000      	movs	r0, #0
 8005268:	f7ff ff7a 	bl	8005160 <led_status>
        HAL_Delay(50);
 800526c:	2032      	movs	r0, #50	@ 0x32
 800526e:	f001 f9dd 	bl	800662c <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3301      	adds	r3, #1
 8005276:	607b      	str	r3, [r7, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b09      	cmp	r3, #9
 800527c:	ddeb      	ble.n	8005256 <led_sequence_error+0xc>
    }
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <get_direction_name>:

/**
 * @brief Get direction name as string
 */
const char* get_direction_name(int direction)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
    switch (direction) {
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b03      	cmp	r3, #3
 8005294:	d812      	bhi.n	80052bc <get_direction_name+0x34>
 8005296:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <get_direction_name+0x14>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052ad 	.word	0x080052ad
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052b9 	.word	0x080052b9
        case NORTH: return "NORTH";
 80052ac:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <get_direction_name+0x44>)
 80052ae:	e006      	b.n	80052be <get_direction_name+0x36>
        case EAST:  return "EAST";
 80052b0:	4b07      	ldr	r3, [pc, #28]	@ (80052d0 <get_direction_name+0x48>)
 80052b2:	e004      	b.n	80052be <get_direction_name+0x36>
        case SOUTH: return "SOUTH";
 80052b4:	4b07      	ldr	r3, [pc, #28]	@ (80052d4 <get_direction_name+0x4c>)
 80052b6:	e002      	b.n	80052be <get_direction_name+0x36>
        case WEST:  return "WEST";
 80052b8:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <get_direction_name+0x50>)
 80052ba:	e000      	b.n	80052be <get_direction_name+0x36>
        default:    return "UNKNOWN";
 80052bc:	4b07      	ldr	r3, [pc, #28]	@ (80052dc <get_direction_name+0x54>)
    }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	0800f634 	.word	0x0800f634
 80052d0:	0800f63c 	.word	0x0800f63c
 80052d4:	0800f644 	.word	0x0800f644
 80052d8:	0800f64c 	.word	0x0800f64c
 80052dc:	0800f654 	.word	0x0800f654

080052e0 <system_health_check>:

/**
 * @brief System health check
 */
bool system_health_check(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
    bool health_ok = true;
 80052e6:	2301      	movs	r3, #1
 80052e8:	71fb      	strb	r3, [r7, #7]

    // Check battery voltage
    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 80052ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005354 <system_health_check+0x74>)
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d806      	bhi.n	8005304 <system_health_check+0x24>
        send_bluetooth_message("WARNING: Low battery detected!\r\n");
 80052f6:	4818      	ldr	r0, [pc, #96]	@ (8005358 <system_health_check+0x78>)
 80052f8:	f7fb ff32 	bl	8001160 <send_bluetooth_message>
        play_battery_warning();
 80052fc:	f7fb ff15 	bl	800112a <play_battery_warning>
        health_ok = false;
 8005300:	2300      	movs	r3, #0
 8005302:	71fb      	strb	r3, [r7, #7]
    }

    // Check sensor readings
    if (sensors.front_left == 0 && sensors.front_right == 0 &&
 8005304:	4b13      	ldr	r3, [pc, #76]	@ (8005354 <system_health_check+0x74>)
 8005306:	891b      	ldrh	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d110      	bne.n	800532e <system_health_check+0x4e>
 800530c:	4b11      	ldr	r3, [pc, #68]	@ (8005354 <system_health_check+0x74>)
 800530e:	885b      	ldrh	r3, [r3, #2]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10c      	bne.n	800532e <system_health_check+0x4e>
        sensors.side_left == 0 && sensors.side_right == 0) {
 8005314:	4b0f      	ldr	r3, [pc, #60]	@ (8005354 <system_health_check+0x74>)
 8005316:	88db      	ldrh	r3, [r3, #6]
    if (sensors.front_left == 0 && sensors.front_right == 0 &&
 8005318:	2b00      	cmp	r3, #0
 800531a:	d108      	bne.n	800532e <system_health_check+0x4e>
        sensors.side_left == 0 && sensors.side_right == 0) {
 800531c:	4b0d      	ldr	r3, [pc, #52]	@ (8005354 <system_health_check+0x74>)
 800531e:	889b      	ldrh	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d104      	bne.n	800532e <system_health_check+0x4e>
        send_bluetooth_message("WARNING: All sensors reading zero!\r\n");
 8005324:	480d      	ldr	r0, [pc, #52]	@ (800535c <system_health_check+0x7c>)
 8005326:	f7fb ff1b 	bl	8001160 <send_bluetooth_message>
        health_ok = false;
 800532a:	2300      	movs	r3, #0
 800532c:	71fb      	strb	r3, [r7, #7]
    }

    // Check gyroscope communication
    uint8_t gyro_id = mpu9250_read_register(0x75);
 800532e:	2075      	movs	r0, #117	@ 0x75
 8005330:	f7fc f900 	bl	8001534 <mpu9250_read_register>
 8005334:	4603      	mov	r3, r0
 8005336:	71bb      	strb	r3, [r7, #6]
    if (gyro_id != 0x71) {
 8005338:	79bb      	ldrb	r3, [r7, #6]
 800533a:	2b71      	cmp	r3, #113	@ 0x71
 800533c:	d004      	beq.n	8005348 <system_health_check+0x68>
        send_bluetooth_message("WARNING: Gyroscope communication issue!\r\n");
 800533e:	4808      	ldr	r0, [pc, #32]	@ (8005360 <system_health_check+0x80>)
 8005340:	f7fb ff0e 	bl	8001160 <send_bluetooth_message>
        health_ok = false;
 8005344:	2300      	movs	r3, #0
 8005346:	71fb      	strb	r3, [r7, #7]
    }

    return health_ok;
 8005348:	79fb      	ldrb	r3, [r7, #7]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000d7c 	.word	0x20000d7c
 8005358:	0800f65c 	.word	0x0800f65c
 800535c:	0800f680 	.word	0x0800f680
 8005360:	0800f6a8 	.word	0x0800f6a8

08005364 <clampi_local>:
//            return false;
//        }
//    }
//}

static inline int clampi_local(int v, int lo, int hi) {
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
    return (v < lo) ? lo : (v > hi) ? hi : v;
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	db05      	blt.n	8005384 <clampi_local+0x20>
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4293      	cmp	r3, r2
 800537e:	bfa8      	it	ge
 8005380:	4613      	movge	r3, r2
 8005382:	e000      	b.n	8005386 <clampi_local+0x22>
 8005384:	68bb      	ldr	r3, [r7, #8]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <align_front_to_wall>:

#define target_align 80

bool align_front_to_wall(int base_pwm, uint32_t timeout_ms)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b0a0      	sub	sp, #128	@ 0x80
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
    // ---- Your gains (unchanged) ----
    const float Kp_d = 30.0f, Ki_d = 0.3f;   // distance PI
 800539e:	4bb0      	ldr	r3, [pc, #704]	@ (8005660 <align_front_to_wall+0x2cc>)
 80053a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053a2:	4bb0      	ldr	r3, [pc, #704]	@ (8005664 <align_front_to_wall+0x2d0>)
 80053a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float Kp_a = 10.5f, Ki_a = 0.1f;   // angle PI
 80053a6:	4bb0      	ldr	r3, [pc, #704]	@ (8005668 <align_front_to_wall+0x2d4>)
 80053a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053aa:	4bb0      	ldr	r3, [pc, #704]	@ (800566c <align_front_to_wall+0x2d8>)
 80053ac:	657b      	str	r3, [r7, #84]	@ 0x54

    // ---- Small bias to kill steady left drift (counts). Try 0, then -1 or -2 if it still nudges left. ----
    const int   ANG_BIAS = 0;    // negative -> adds a tiny right-turn tendency
 80053ae:	2300      	movs	r3, #0
 80053b0:	653b      	str	r3, [r7, #80]	@ 0x50

    // ---- Finish criteria (unchanged) ----
    const int   DIST_TOL = 10;         // counts
 80053b2:	230a      	movs	r3, #10
 80053b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const int   ANG_TOL  = 12;         // counts
 80053b6:	230c      	movs	r3, #12
 80053b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    const uint32_t STABLE_DWELL_MS = 150;
 80053ba:	2396      	movs	r3, #150	@ 0x96
 80053bc:	647b      	str	r3, [r7, #68]	@ 0x44

    // ---- Output constraints (unchanged idea) ----
    const int PWM_MAX = base_pwm;      // clamp final wheel cmds
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	643b      	str	r3, [r7, #64]	@ 0x40
    const int PWM_MIN_MOVE = 500;      // measured deadzone threshold
 80053c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80053c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Integrators
    float I_d = 0.0f, I_a = 0.0f;
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	67bb      	str	r3, [r7, #120]	@ 0x78

    uint32_t t0 = HAL_GetTick();
 80053d4:	f001 f91e 	bl	8006614 <HAL_GetTick>
 80053d8:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t last_ok = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t last_tick = HAL_GetTick();
 80053de:	f001 f919 	bl	8006614 <HAL_GetTick>
 80053e2:	6738      	str	r0, [r7, #112]	@ 0x70

    // reset motors
    motor_set(0, true, 0);
 80053e4:	2200      	movs	r2, #0
 80053e6:	2101      	movs	r1, #1
 80053e8:	2000      	movs	r0, #0
 80053ea:	f7fe fcef 	bl	8003dcc <motor_set>
    motor_set(1, true, 0);
 80053ee:	2200      	movs	r2, #0
 80053f0:	2101      	movs	r1, #1
 80053f2:	2001      	movs	r0, #1
 80053f4:	f7fe fcea 	bl	8003dcc <motor_set>

    while (1) {
        // --- timing / dt ---
        uint32_t now = HAL_GetTick();
 80053f8:	f001 f90c 	bl	8006614 <HAL_GetTick>
 80053fc:	6378      	str	r0, [r7, #52]	@ 0x34
        float dt = (now - last_tick) / 1000.0f;
 80053fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005400:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800540c:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8005670 <align_front_to_wall+0x2dc>
 8005410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005414:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
        if (dt <= 0) dt = 0.001f;
 8005418:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800541c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005424:	d801      	bhi.n	800542a <align_front_to_wall+0x96>
 8005426:	4b93      	ldr	r3, [pc, #588]	@ (8005674 <align_front_to_wall+0x2e0>)
 8005428:	66fb      	str	r3, [r7, #108]	@ 0x6c
        last_tick = now;
 800542a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542c:	673b      	str	r3, [r7, #112]	@ 0x70

        // --- sensors ---
        update_sensors();
 800542e:	f7ff f961 	bl	80046f4 <update_sensors>
        int FL = (int)sensors.front_left;
 8005432:	4b91      	ldr	r3, [pc, #580]	@ (8005678 <align_front_to_wall+0x2e4>)
 8005434:	891b      	ldrh	r3, [r3, #8]
 8005436:	633b      	str	r3, [r7, #48]	@ 0x30
        int FR = (int)sensors.front_right;
 8005438:	4b8f      	ldr	r3, [pc, #572]	@ (8005678 <align_front_to_wall+0x2e4>)
 800543a:	885b      	ldrh	r3, [r3, #2]
 800543c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // --- errors (raw counts) ---
        int eL = FL - (int)target_align;
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	3b50      	subs	r3, #80	@ 0x50
 8005442:	62bb      	str	r3, [r7, #40]	@ 0x28
        int eR = FR - (int)target_align;
 8005444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005446:	3b50      	subs	r3, #80	@ 0x50
 8005448:	627b      	str	r3, [r7, #36]	@ 0x24

        // distance = average; angle = left-right diff (+ means left closer). Add tiny bias to cancel drift.
        float e_dist = 0.5f * (eL + eR);
 800544a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	4413      	add	r3, r2
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005458:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800545c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005460:	edc7 7a08 	vstr	s15, [r7, #32]
        float e_ang  = (float)(eL - eR + ANG_BIAS);
 8005464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	1ad2      	subs	r2, r2, r3
 800546a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800546c:	4413      	add	r3, r2
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005476:	edc7 7a07 	vstr	s15, [r7, #28]

        // --- PI controllers ---
        I_d += e_dist * dt;
 800547a:	ed97 7a08 	vldr	s14, [r7, #32]
 800547e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8005482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005486:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800548a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800548e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        I_a += e_ang  * dt;
 8005492:	ed97 7a07 	vldr	s14, [r7, #28]
 8005496:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80054a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

        // simple clamps to keep integrators sane
        if (I_d > 100.0f) I_d = 100.0f;
 80054aa:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80054ae:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800567c <align_front_to_wall+0x2e8>
 80054b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ba:	dd01      	ble.n	80054c0 <align_front_to_wall+0x12c>
 80054bc:	4b70      	ldr	r3, [pc, #448]	@ (8005680 <align_front_to_wall+0x2ec>)
 80054be:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (I_d < -100.0f) I_d = -100.0f;
 80054c0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80054c4:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8005684 <align_front_to_wall+0x2f0>
 80054c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d0:	d501      	bpl.n	80054d6 <align_front_to_wall+0x142>
 80054d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005688 <align_front_to_wall+0x2f4>)
 80054d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (I_a > 100.0f) I_a = 100.0f;
 80054d6:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80054da:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800567c <align_front_to_wall+0x2e8>
 80054de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e6:	dd01      	ble.n	80054ec <align_front_to_wall+0x158>
 80054e8:	4b65      	ldr	r3, [pc, #404]	@ (8005680 <align_front_to_wall+0x2ec>)
 80054ea:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (I_a < -100.0f) I_a = -100.0f;
 80054ec:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80054f0:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005684 <align_front_to_wall+0x2f0>
 80054f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fc:	d501      	bpl.n	8005502 <align_front_to_wall+0x16e>
 80054fe:	4b62      	ldr	r3, [pc, #392]	@ (8005688 <align_front_to_wall+0x2f4>)
 8005500:	67bb      	str	r3, [r7, #120]	@ 0x78

        float v = Kp_d * e_dist + Ki_d * I_d;  // forward/back command  (- = back, + = forward)
 8005502:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005506:	edd7 7a08 	vldr	s15, [r7, #32]
 800550a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800550e:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8005512:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8005516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800551a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800551e:	edc7 7a06 	vstr	s15, [r7, #24]
        float w = Kp_a * e_ang  + Ki_a * I_a;  // turn command          (- = turn right, + = left)
 8005522:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8005526:	edd7 7a07 	vldr	s15, [r7, #28]
 800552a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800552e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8005532:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8005536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800553a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800553e:	edc7 7a05 	vstr	s15, [r7, #20]

        // per-wheel raw commands (signed) — keep your mixing/signs
        int cmd_left  = (int)lroundf(-v - w);
 8005542:	edd7 7a06 	vldr	s15, [r7, #24]
 8005546:	eeb1 7a67 	vneg.f32	s14, s15
 800554a:	edd7 7a05 	vldr	s15, [r7, #20]
 800554e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005552:	eeb0 0a67 	vmov.f32	s0, s15
 8005556:	f008 fa67 	bl	800da28 <lroundf>
 800555a:	66b8      	str	r0, [r7, #104]	@ 0x68
        int cmd_right = (int)lroundf(-v + w);
 800555c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005560:	edd7 7a06 	vldr	s15, [r7, #24]
 8005564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005568:	eeb0 0a67 	vmov.f32	s0, s15
 800556c:	f008 fa5c 	bl	800da28 <lroundf>
 8005570:	6678      	str	r0, [r7, #100]	@ 0x64

        // saturate
        cmd_left  = clampi_local(cmd_left,  -PWM_MAX, PWM_MAX);
 8005572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005574:	425b      	negs	r3, r3
 8005576:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005578:	4619      	mov	r1, r3
 800557a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800557c:	f7ff fef2 	bl	8005364 <clampi_local>
 8005580:	66b8      	str	r0, [r7, #104]	@ 0x68
        cmd_right = clampi_local(cmd_right, -PWM_MAX, PWM_MAX);
 8005582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005584:	425b      	negs	r3, r3
 8005586:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005588:	4619      	mov	r1, r3
 800558a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800558c:	f7ff feea 	bl	8005364 <clampi_local>
 8005590:	6678      	str	r0, [r7, #100]	@ 0x64

        // --- convergence check *before* applying min-move ---
        bool dist_ok = (abs((int)lroundf(e_dist)) <= DIST_TOL);
 8005592:	ed97 0a08 	vldr	s0, [r7, #32]
 8005596:	f008 fa47 	bl	800da28 <lroundf>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	bfb8      	it	lt
 80055a0:	425b      	neglt	r3, r3
 80055a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055a4:	429a      	cmp	r2, r3
 80055a6:	bfac      	ite	ge
 80055a8:	2301      	movge	r3, #1
 80055aa:	2300      	movlt	r3, #0
 80055ac:	74fb      	strb	r3, [r7, #19]
        bool ang_ok  = (abs((int)lroundf(e_ang))  <= ANG_TOL);
 80055ae:	ed97 0a07 	vldr	s0, [r7, #28]
 80055b2:	f008 fa39 	bl	800da28 <lroundf>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bfb8      	it	lt
 80055bc:	425b      	neglt	r3, r3
 80055be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055c0:	429a      	cmp	r2, r3
 80055c2:	bfac      	ite	ge
 80055c4:	2301      	movge	r3, #1
 80055c6:	2300      	movlt	r3, #0
 80055c8:	74bb      	strb	r3, [r7, #18]
        bool nearly_done = (dist_ok && ang_ok);
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <align_front_to_wall+0x246>
 80055d0:	7cbb      	ldrb	r3, [r7, #18]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <align_front_to_wall+0x246>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <align_front_to_wall+0x248>
 80055da:	2300      	movs	r3, #0
 80055dc:	747b      	strb	r3, [r7, #17]
 80055de:	7c7b      	ldrb	r3, [r7, #17]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	747b      	strb	r3, [r7, #17]

        // --- stiction handling ---
        // If we're NOT nearly done, enforce a minimum to break deadzone.
        // If we ARE nearly done, DON'T enforce min move — brake instead to avoid creeping.
        if (!nearly_done) {
 80055e6:	7c7b      	ldrb	r3, [r7, #17]
 80055e8:	f083 0301 	eor.w	r3, r3, #1
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d028      	beq.n	8005644 <align_front_to_wall+0x2b0>
            if (cmd_left > 0  && cmd_left  < PWM_MIN_MOVE) cmd_left  = PWM_MIN_MOVE;
 80055f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	dd05      	ble.n	8005604 <align_front_to_wall+0x270>
 80055f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80055fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fc:	429a      	cmp	r2, r3
 80055fe:	da01      	bge.n	8005604 <align_front_to_wall+0x270>
 8005600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005602:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (cmd_left < 0  && -cmd_left < PWM_MIN_MOVE) cmd_left  = -PWM_MIN_MOVE;
 8005604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005606:	2b00      	cmp	r3, #0
 8005608:	da07      	bge.n	800561a <align_front_to_wall+0x286>
 800560a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800560c:	425b      	negs	r3, r3
 800560e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005610:	429a      	cmp	r2, r3
 8005612:	dd02      	ble.n	800561a <align_front_to_wall+0x286>
 8005614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005616:	425b      	negs	r3, r3
 8005618:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (cmd_right > 0 && cmd_right < PWM_MIN_MOVE) cmd_right = PWM_MIN_MOVE;
 800561a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800561c:	2b00      	cmp	r3, #0
 800561e:	dd05      	ble.n	800562c <align_front_to_wall+0x298>
 8005620:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005624:	429a      	cmp	r2, r3
 8005626:	da01      	bge.n	800562c <align_front_to_wall+0x298>
 8005628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800562a:	667b      	str	r3, [r7, #100]	@ 0x64
            if (cmd_right < 0 && -cmd_right < PWM_MIN_MOVE) cmd_right = -PWM_MIN_MOVE;
 800562c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800562e:	2b00      	cmp	r3, #0
 8005630:	da0c      	bge.n	800564c <align_front_to_wall+0x2b8>
 8005632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005634:	425b      	negs	r3, r3
 8005636:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005638:	429a      	cmp	r2, r3
 800563a:	dd07      	ble.n	800564c <align_front_to_wall+0x2b8>
 800563c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563e:	425b      	negs	r3, r3
 8005640:	667b      	str	r3, [r7, #100]	@ 0x64
 8005642:	e003      	b.n	800564c <align_front_to_wall+0x2b8>
        } else {
            // close enough: stop and actively brake so it doesn't coast/creep left
            cmd_left = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	66bb      	str	r3, [r7, #104]	@ 0x68
            cmd_right = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	667b      	str	r3, [r7, #100]	@ 0x64
        }

        // --- drive / brake ---
        if (cmd_left == 0 && cmd_right == 0) {
 800564c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11c      	bne.n	800568c <align_front_to_wall+0x2f8>
 8005652:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005654:	2b00      	cmp	r3, #0
 8005656:	d119      	bne.n	800568c <align_front_to_wall+0x2f8>

            break_motors();  // actively short the motors to kill drift
 8005658:	f7fe fb20 	bl	8003c9c <break_motors>
 800565c:	e034      	b.n	80056c8 <align_front_to_wall+0x334>
 800565e:	bf00      	nop
 8005660:	41f00000 	.word	0x41f00000
 8005664:	3e99999a 	.word	0x3e99999a
 8005668:	41280000 	.word	0x41280000
 800566c:	3dcccccd 	.word	0x3dcccccd
 8005670:	447a0000 	.word	0x447a0000
 8005674:	3a83126f 	.word	0x3a83126f
 8005678:	20000d7c 	.word	0x20000d7c
 800567c:	42c80000 	.word	0x42c80000
 8005680:	42c80000 	.word	0x42c80000
 8005684:	c2c80000 	.word	0xc2c80000
 8005688:	c2c80000 	.word	0xc2c80000
        } else {
            bool lfwd = (cmd_left  >= 0);
 800568c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800568e:	43db      	mvns	r3, r3
 8005690:	0fdb      	lsrs	r3, r3, #31
 8005692:	743b      	strb	r3, [r7, #16]
            bool rfwd = (cmd_right >= 0);
 8005694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005696:	43db      	mvns	r3, r3
 8005698:	0fdb      	lsrs	r3, r3, #31
 800569a:	73fb      	strb	r3, [r7, #15]
            uint16_t lduty = (uint16_t)abs(cmd_left);
 800569c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bfb8      	it	lt
 80056a2:	425b      	neglt	r3, r3
 80056a4:	81bb      	strh	r3, [r7, #12]
            uint16_t rduty = (uint16_t)abs(cmd_right);
 80056a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bfb8      	it	lt
 80056ac:	425b      	neglt	r3, r3
 80056ae:	817b      	strh	r3, [r7, #10]
            motor_set(0, lfwd, lduty);
 80056b0:	89ba      	ldrh	r2, [r7, #12]
 80056b2:	7c3b      	ldrb	r3, [r7, #16]
 80056b4:	4619      	mov	r1, r3
 80056b6:	2000      	movs	r0, #0
 80056b8:	f7fe fb88 	bl	8003dcc <motor_set>
            motor_set(1, rfwd, rduty);
 80056bc:	897a      	ldrh	r2, [r7, #10]
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	4619      	mov	r1, r3
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7fe fb82 	bl	8003dcc <motor_set>

        }

        // --- dwell-based success ---
        if (nearly_done) {
 80056c8:	7c7b      	ldrb	r3, [r7, #17]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00e      	beq.n	80056ec <align_front_to_wall+0x358>
            if (last_ok == 0) last_ok = now;
 80056ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <align_front_to_wall+0x344>
 80056d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d6:	677b      	str	r3, [r7, #116]	@ 0x74
            if ((now - last_ok) >= STABLE_DWELL_MS) {
 80056d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d805      	bhi.n	80056f0 <align_front_to_wall+0x35c>
                break_motors();
 80056e4:	f7fe fada 	bl	8003c9c <break_motors>
                return true;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e00b      	b.n	8005704 <align_front_to_wall+0x370>
            }
        } else {
            last_ok = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        // --- timeout ---
        if ((now - t0) > timeout_ms) {
 80056f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	f4bf ae7d 	bcs.w	80053f8 <align_front_to_wall+0x64>
            break_motors();
 80056fe:	f7fe facd 	bl	8003c9c <break_motors>
            return false;
 8005702:	2300      	movs	r3, #0
        }
    }
}
 8005704:	4618      	mov	r0, r3
 8005706:	3780      	adds	r7, #128	@ 0x80
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <wall_follow_reset_int>:
//void wall_follow_reset_int(int mode, int base_pwm);   // forward decl
//void wall_follow_step(void);                          // forward decl

// Call once before starting wall-follow
void wall_follow_reset_int(int mode, int base_pwm)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
    wf_mode = (mode == 1) ? WF_LEFT : (mode == 2) ? WF_RIGHT : WF_AUTO;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d006      	beq.n	800572a <wall_follow_reset_int+0x1e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d101      	bne.n	8005726 <wall_follow_reset_int+0x1a>
 8005722:	2302      	movs	r3, #2
 8005724:	e002      	b.n	800572c <wall_follow_reset_int+0x20>
 8005726:	2300      	movs	r3, #0
 8005728:	e000      	b.n	800572c <wall_follow_reset_int+0x20>
 800572a:	2301      	movs	r3, #1
 800572c:	4a0f      	ldr	r2, [pc, #60]	@ (800576c <wall_follow_reset_int+0x60>)
 800572e:	7013      	strb	r3, [r2, #0]
    WF_BASE_PWM = base_pwm;
 8005730:	4a0f      	ldr	r2, [pc, #60]	@ (8005770 <wall_follow_reset_int+0x64>)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6013      	str	r3, [r2, #0]

    e_int = 0.0f; e_prev = 0.0f; d_filt = 0.0f;
 8005736:	4b0f      	ldr	r3, [pc, #60]	@ (8005774 <wall_follow_reset_int+0x68>)
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	4b0e      	ldr	r3, [pc, #56]	@ (8005778 <wall_follow_reset_int+0x6c>)
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	4b0d      	ldr	r3, [pc, #52]	@ (800577c <wall_follow_reset_int+0x70>)
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
    wf_last_ms = HAL_GetTick();
 800574e:	f000 ff61 	bl	8006614 <HAL_GetTick>
 8005752:	4603      	mov	r3, r0
 8005754:	4a0a      	ldr	r2, [pc, #40]	@ (8005780 <wall_follow_reset_int+0x74>)
 8005756:	6013      	str	r3, [r2, #0]
    update_sensors();
 8005758:	f7fe ffcc 	bl	80046f4 <update_sensors>
    error_count=0;
 800575c:	4b09      	ldr	r3, [pc, #36]	@ (8005784 <wall_follow_reset_int+0x78>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]


    // bootstrap targets from current readings (prevents initial jump)
    //target_left  = (float)sensors.side_left;
    //target_right = (float)sensors.side_right;
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20001320 	.word	0x20001320
 8005770:	20000030 	.word	0x20000030
 8005774:	20001324 	.word	0x20001324
 8005778:	20001328 	.word	0x20001328
 800577c:	2000132c 	.word	0x2000132c
 8005780:	20001330 	.word	0x20001330
 8005784:	20001334 	.word	0x20001334

08005788 <lut_lookup_lin>:
// --- Gyro rate PID step you already calibrated (we just call it) ---


// ---------- Lookup helpers (reuse your LUTs if you have them) ----------
static float lut_lookup_lin(int raw, const int *adc_table, const float *dist_table, int size)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
    if (raw >= adc_table[0]) return dist_table[0];
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	429a      	cmp	r2, r3
 800579e:	db03      	blt.n	80057a8 <lut_lookup_lin+0x20>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	edd3 7a00 	vldr	s15, [r3]
 80057a6:	e072      	b.n	800588e <lut_lookup_lin+0x106>
    if (raw <= adc_table[size-1]) return dist_table[size-1];
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057ae:	3b01      	subs	r3, #1
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4413      	add	r3, r2
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	dc09      	bgt.n	80057d2 <lut_lookup_lin+0x4a>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057c4:	3b01      	subs	r3, #1
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4413      	add	r3, r2
 80057cc:	edd3 7a00 	vldr	s15, [r3]
 80057d0:	e05d      	b.n	800588e <lut_lookup_lin+0x106>
    for (int i = 0; i < size-1; i++) {
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e050      	b.n	800587a <lut_lookup_lin+0xf2>
        if (raw <= adc_table[i] && raw >= adc_table[i+1]) {
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	4413      	add	r3, r2
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	dc45      	bgt.n	8005874 <lut_lookup_lin+0xec>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	3301      	adds	r3, #1
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	db3c      	blt.n	8005874 <lut_lookup_lin+0xec>
            float t = (float)(raw - adc_table[i+1]) / (float)(adc_table[i] - adc_table[i+1]);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	3301      	adds	r3, #1
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	4413      	add	r3, r2
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	4413      	add	r3, r2
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	3301      	adds	r3, #1
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	440b      	add	r3, r1
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005836:	edc7 7a04 	vstr	s15, [r7, #16]
            return dist_table[i+1] + t * (dist_table[i] - dist_table[i+1]);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	3301      	adds	r3, #1
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4413      	add	r3, r2
 8005844:	ed93 7a00 	vldr	s14, [r3]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	edd3 6a00 	vldr	s13, [r3]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3301      	adds	r3, #1
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4413      	add	r3, r2
 800585e:	edd3 7a00 	vldr	s15, [r3]
 8005862:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005866:	edd7 7a04 	vldr	s15, [r7, #16]
 800586a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800586e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005872:	e00c      	b.n	800588e <lut_lookup_lin+0x106>
    for (int i = 0; i < size-1; i++) {
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	3301      	adds	r3, #1
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	3b01      	subs	r3, #1
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	429a      	cmp	r2, r3
 8005882:	dba9      	blt.n	80057d8 <lut_lookup_lin+0x50>
        }
    }
    return (float)raw;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800588e:	eeb0 0a67 	vmov.f32	s0, s15
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <wall_compute_u>:

// ------- NON-ACTUATING wall correction: compute u_wall only -------
static float wall_compute_u(float dt, int *p_has_left, int *p_has_right, int *p_has_front)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b090      	sub	sp, #64	@ 0x40
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80058a6:	60b8      	str	r0, [r7, #8]
 80058a8:	6079      	str	r1, [r7, #4]
 80058aa:	603a      	str	r2, [r7, #0]
    update_sensors();
 80058ac:	f7fe ff22 	bl	80046f4 <update_sensors>
    const int Lw = sensors.wall_left  ? 1 : 0;
 80058b0:	4b93      	ldr	r3, [pc, #588]	@ (8005b00 <wall_compute_u+0x264>)
 80058b2:	7adb      	ldrb	r3, [r3, #11]
 80058b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    const int Rw = sensors.wall_right ? 1 : 0;
 80058b6:	4b92      	ldr	r3, [pc, #584]	@ (8005b00 <wall_compute_u+0x264>)
 80058b8:	7b1b      	ldrb	r3, [r3, #12]
 80058ba:	637b      	str	r3, [r7, #52]	@ 0x34
    const int Fw = sensors.wall_front ? 1 : 0;
 80058bc:	4b90      	ldr	r3, [pc, #576]	@ (8005b00 <wall_compute_u+0x264>)
 80058be:	7a9b      	ldrb	r3, [r3, #10]
 80058c0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (p_has_left)  *p_has_left  = Lw;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <wall_compute_u+0x32>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058cc:	601a      	str	r2, [r3, #0]
    if (p_has_right) *p_has_right = Rw;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <wall_compute_u+0x3e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058d8:	601a      	str	r2, [r3, #0]
    if (p_has_front) *p_has_front = Fw;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <wall_compute_u+0x4a>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058e4:	601a      	str	r2, [r3, #0]

    // read raw side ADCs
    const int Lraw = sensors.side_left;
 80058e6:	4b86      	ldr	r3, [pc, #536]	@ (8005b00 <wall_compute_u+0x264>)
 80058e8:	88db      	ldrh	r3, [r3, #6]
 80058ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int Rraw = sensors.side_right;
 80058ec:	4b84      	ldr	r3, [pc, #528]	@ (8005b00 <wall_compute_u+0x264>)
 80058ee:	889b      	ldrh	r3, [r3, #4]
 80058f0:	62bb      	str	r3, [r7, #40]	@ 0x28

    // pick your distance model: LUT (preferred) or raw log
    float e = 0.0f;
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (Lw && Rw) {
 80058f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d050      	beq.n	80059a0 <wall_compute_u+0x104>
 80058fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005900:	2b00      	cmp	r3, #0
 8005902:	d04d      	beq.n	80059a0 <wall_compute_u+0x104>
        // both walls → center
        const float L = lut_lookup_lin(Lraw, left_adc,  left_dist,  L_LUT_SIZE);
 8005904:	2320      	movs	r3, #32
 8005906:	4a7f      	ldr	r2, [pc, #508]	@ (8005b04 <wall_compute_u+0x268>)
 8005908:	497f      	ldr	r1, [pc, #508]	@ (8005b08 <wall_compute_u+0x26c>)
 800590a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800590c:	f7ff ff3c 	bl	8005788 <lut_lookup_lin>
 8005910:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        const float R = lut_lookup_lin(Rraw, right_adc, right_dist, R_LUT_SIZE);
 8005914:	2321      	movs	r3, #33	@ 0x21
 8005916:	4a7d      	ldr	r2, [pc, #500]	@ (8005b0c <wall_compute_u+0x270>)
 8005918:	497d      	ldr	r1, [pc, #500]	@ (8005b10 <wall_compute_u+0x274>)
 800591a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800591c:	f7ff ff34 	bl	8005788 <lut_lookup_lin>
 8005920:	ed87 0a08 	vstr	s0, [r7, #32]
        e = WF_BOTH_SCALE * (L - R);  // +e means left closer → slow left / speed right
 8005924:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005928:	edd7 7a08 	vldr	s15, [r7, #32]
 800592c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005930:	4b78      	ldr	r3, [pc, #480]	@ (8005b14 <wall_compute_u+0x278>)
 8005932:	edd3 7a00 	vldr	s15, [r3]
 8005936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        // gently align targets for when a wall disappears
        fus_target_left  = (1.0f - WF_SINGLE_ALPHA)*fus_target_left  + WF_SINGLE_ALPHA*L;
 800593e:	4b76      	ldr	r3, [pc, #472]	@ (8005b18 <wall_compute_u+0x27c>)
 8005940:	edd3 7a00 	vldr	s15, [r3]
 8005944:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800594c:	4b73      	ldr	r3, [pc, #460]	@ (8005b1c <wall_compute_u+0x280>)
 800594e:	edd3 7a00 	vldr	s15, [r3]
 8005952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005956:	4b70      	ldr	r3, [pc, #448]	@ (8005b18 <wall_compute_u+0x27c>)
 8005958:	edd3 6a00 	vldr	s13, [r3]
 800595c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005968:	4b6c      	ldr	r3, [pc, #432]	@ (8005b1c <wall_compute_u+0x280>)
 800596a:	edc3 7a00 	vstr	s15, [r3]
        fus_target_right = (1.0f - WF_SINGLE_ALPHA)*fus_target_right + WF_SINGLE_ALPHA*R;
 800596e:	4b6a      	ldr	r3, [pc, #424]	@ (8005b18 <wall_compute_u+0x27c>)
 8005970:	edd3 7a00 	vldr	s15, [r3]
 8005974:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005978:	ee37 7a67 	vsub.f32	s14, s14, s15
 800597c:	4b68      	ldr	r3, [pc, #416]	@ (8005b20 <wall_compute_u+0x284>)
 800597e:	edd3 7a00 	vldr	s15, [r3]
 8005982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005986:	4b64      	ldr	r3, [pc, #400]	@ (8005b18 <wall_compute_u+0x27c>)
 8005988:	edd3 6a00 	vldr	s13, [r3]
 800598c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005998:	4b61      	ldr	r3, [pc, #388]	@ (8005b20 <wall_compute_u+0x284>)
 800599a:	edc3 7a00 	vstr	s15, [r3]
    if (Lw && Rw) {
 800599e:	e02c      	b.n	80059fa <wall_compute_u+0x15e>
    } else if (Lw) {
 80059a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d011      	beq.n	80059ca <wall_compute_u+0x12e>
        const float L = lut_lookup_lin(Lraw, left_adc, left_dist, L_LUT_SIZE);
 80059a6:	2320      	movs	r3, #32
 80059a8:	4a56      	ldr	r2, [pc, #344]	@ (8005b04 <wall_compute_u+0x268>)
 80059aa:	4957      	ldr	r1, [pc, #348]	@ (8005b08 <wall_compute_u+0x26c>)
 80059ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059ae:	f7ff feeb 	bl	8005788 <lut_lookup_lin>
 80059b2:	ed87 0a06 	vstr	s0, [r7, #24]
        e = L- target_left;      // hold distance to left
 80059b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b24 <wall_compute_u+0x288>)
 80059b8:	edd3 7a00 	vldr	s15, [r3]
 80059bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80059c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059c4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80059c8:	e017      	b.n	80059fa <wall_compute_u+0x15e>
    } else if (Rw) {
 80059ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d011      	beq.n	80059f4 <wall_compute_u+0x158>
        const float R = lut_lookup_lin(Rraw, right_adc, right_dist, R_LUT_SIZE);
 80059d0:	2321      	movs	r3, #33	@ 0x21
 80059d2:	4a4e      	ldr	r2, [pc, #312]	@ (8005b0c <wall_compute_u+0x270>)
 80059d4:	494e      	ldr	r1, [pc, #312]	@ (8005b10 <wall_compute_u+0x274>)
 80059d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059d8:	f7ff fed6 	bl	8005788 <lut_lookup_lin>
 80059dc:	ed87 0a07 	vstr	s0, [r7, #28]
        e = target_right-R;     // hold distance to right
 80059e0:	4b51      	ldr	r3, [pc, #324]	@ (8005b28 <wall_compute_u+0x28c>)
 80059e2:	ed93 7a00 	vldr	s14, [r3]
 80059e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80059ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ee:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80059f2:	e002      	b.n	80059fa <wall_compute_u+0x15e>
    } else {
        e = 0.0f; // no walls → let heading handle it
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // PID on e (reuse your wall PID state/gains)
    wf_e_int += e * dt;
 80059fa:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80059fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a06:	4b49      	ldr	r3, [pc, #292]	@ (8005b2c <wall_compute_u+0x290>)
 8005a08:	edd3 7a00 	vldr	s15, [r3]
 8005a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a10:	4b46      	ldr	r3, [pc, #280]	@ (8005b2c <wall_compute_u+0x290>)
 8005a12:	edc3 7a00 	vstr	s15, [r3]
    if (wf_e_int >  WF_INT_LIMIT) wf_e_int =  WF_INT_LIMIT;
 8005a16:	4b45      	ldr	r3, [pc, #276]	@ (8005b2c <wall_compute_u+0x290>)
 8005a18:	ed93 7a00 	vldr	s14, [r3]
 8005a1c:	4b44      	ldr	r3, [pc, #272]	@ (8005b30 <wall_compute_u+0x294>)
 8005a1e:	edd3 7a00 	vldr	s15, [r3]
 8005a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2a:	dd03      	ble.n	8005a34 <wall_compute_u+0x198>
 8005a2c:	4b40      	ldr	r3, [pc, #256]	@ (8005b30 <wall_compute_u+0x294>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a3e      	ldr	r2, [pc, #248]	@ (8005b2c <wall_compute_u+0x290>)
 8005a32:	6013      	str	r3, [r2, #0]
    if (wf_e_int < -WF_INT_LIMIT) wf_e_int = -WF_INT_LIMIT;
 8005a34:	4b3e      	ldr	r3, [pc, #248]	@ (8005b30 <wall_compute_u+0x294>)
 8005a36:	edd3 7a00 	vldr	s15, [r3]
 8005a3a:	eeb1 7a67 	vneg.f32	s14, s15
 8005a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b2c <wall_compute_u+0x290>)
 8005a40:	edd3 7a00 	vldr	s15, [r3]
 8005a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a4c:	dd07      	ble.n	8005a5e <wall_compute_u+0x1c2>
 8005a4e:	4b38      	ldr	r3, [pc, #224]	@ (8005b30 <wall_compute_u+0x294>)
 8005a50:	edd3 7a00 	vldr	s15, [r3]
 8005a54:	eef1 7a67 	vneg.f32	s15, s15
 8005a58:	4b34      	ldr	r3, [pc, #208]	@ (8005b2c <wall_compute_u+0x290>)
 8005a5a:	edc3 7a00 	vstr	s15, [r3]

    const float d_raw = (e - wf_e_prev) / dt;
 8005a5e:	4b35      	ldr	r3, [pc, #212]	@ (8005b34 <wall_compute_u+0x298>)
 8005a60:	edd3 7a00 	vldr	s15, [r3]
 8005a64:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005a68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005a6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a74:	edc7 7a05 	vstr	s15, [r7, #20]
    wf_d_filt = WF_DERIV_ALPHA*wf_d_filt + (1.0f - WF_DERIV_ALPHA)*d_raw;
 8005a78:	4b2f      	ldr	r3, [pc, #188]	@ (8005b38 <wall_compute_u+0x29c>)
 8005a7a:	ed93 7a00 	vldr	s14, [r3]
 8005a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b3c <wall_compute_u+0x2a0>)
 8005a80:	edd3 7a00 	vldr	s15, [r3]
 8005a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a88:	4b2b      	ldr	r3, [pc, #172]	@ (8005b38 <wall_compute_u+0x29c>)
 8005a8a:	edd3 7a00 	vldr	s15, [r3]
 8005a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a96:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa2:	4b26      	ldr	r3, [pc, #152]	@ (8005b3c <wall_compute_u+0x2a0>)
 8005aa4:	edc3 7a00 	vstr	s15, [r3]
    wf_e_prev = e;
 8005aa8:	4a22      	ldr	r2, [pc, #136]	@ (8005b34 <wall_compute_u+0x298>)
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aac:	6013      	str	r3, [r2, #0]

    const float u_norm = WF_KP*e + WF_KI*wf_e_int + WF_KD*wf_d_filt;
 8005aae:	4b24      	ldr	r3, [pc, #144]	@ (8005b40 <wall_compute_u+0x2a4>)
 8005ab0:	ed93 7a00 	vldr	s14, [r3]
 8005ab4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005ab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005abc:	4b21      	ldr	r3, [pc, #132]	@ (8005b44 <wall_compute_u+0x2a8>)
 8005abe:	edd3 6a00 	vldr	s13, [r3]
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b2c <wall_compute_u+0x290>)
 8005ac4:	edd3 7a00 	vldr	s15, [r3]
 8005ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b48 <wall_compute_u+0x2ac>)
 8005ad2:	edd3 6a00 	vldr	s13, [r3]
 8005ad6:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <wall_compute_u+0x2a0>)
 8005ad8:	edd3 7a00 	vldr	s15, [r3]
 8005adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae4:	edc7 7a04 	vstr	s15, [r7, #16]
    return (WF_U_SCALE * u_norm);   // map to PWM units like your wall_follow_step()
 8005ae8:	4b18      	ldr	r3, [pc, #96]	@ (8005b4c <wall_compute_u+0x2b0>)
 8005aea:	ed93 7a00 	vldr	s14, [r3]
 8005aee:	edd7 7a04 	vldr	s15, [r7, #16]
 8005af2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8005af6:	eeb0 0a67 	vmov.f32	s0, s15
 8005afa:	3740      	adds	r7, #64	@ 0x40
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000d7c 	.word	0x20000d7c
 8005b04:	0800f8ac 	.word	0x0800f8ac
 8005b08:	0800f82c 	.word	0x0800f82c
 8005b0c:	0800f7a8 	.word	0x0800f7a8
 8005b10:	0800f724 	.word	0x0800f724
 8005b14:	2000004c 	.word	0x2000004c
 8005b18:	20000048 	.word	0x20000048
 8005b1c:	2000005c 	.word	0x2000005c
 8005b20:	20000060 	.word	0x20000060
 8005b24:	20000054 	.word	0x20000054
 8005b28:	20000058 	.word	0x20000058
 8005b2c:	20001338 	.word	0x20001338
 8005b30:	20000044 	.word	0x20000044
 8005b34:	2000133c 	.word	0x2000133c
 8005b38:	20000040 	.word	0x20000040
 8005b3c:	20001340 	.word	0x20001340
 8005b40:	2000003c 	.word	0x2000003c
 8005b44:	20001318 	.word	0x20001318
 8005b48:	2000131c 	.word	0x2000131c
 8005b4c:	20000050 	.word	0x20000050

08005b50 <fusion_reset>:

// ---------- Public API ----------
void fusion_reset(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
    // reset wall PID memory
    wf_e_int = 0.0f; wf_e_prev = 0.0f; wf_d_filt = 0.0f;
 8005b54:	4b21      	ldr	r3, [pc, #132]	@ (8005bdc <fusion_reset+0x8c>)
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	4b20      	ldr	r3, [pc, #128]	@ (8005be0 <fusion_reset+0x90>)
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	4b1f      	ldr	r3, [pc, #124]	@ (8005be4 <fusion_reset+0x94>)
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
    wf_last_ms_fus = HAL_GetTick();
 8005b6c:	f000 fd52 	bl	8006614 <HAL_GetTick>
 8005b70:	4603      	mov	r3, r0
 8005b72:	4a1d      	ldr	r2, [pc, #116]	@ (8005be8 <fusion_reset+0x98>)
 8005b74:	6013      	str	r3, [r2, #0]

    // heading & blending
    fus_theta = 0.0f;
 8005b76:	4b1d      	ldr	r3, [pc, #116]	@ (8005bec <fusion_reset+0x9c>)
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
    fus_theta_ref = 0.0f;
 8005b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf0 <fusion_reset+0xa0>)
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
    fus_conf_s = 0.0f;
 8005b86:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf4 <fusion_reset+0xa4>)
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
    fus_u_prev = 0.0f;
 8005b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf8 <fusion_reset+0xa8>)
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
    fus_last_ms = HAL_GetTick();
 8005b96:	f000 fd3d 	bl	8006614 <HAL_GetTick>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4a17      	ldr	r2, [pc, #92]	@ (8005bfc <fusion_reset+0xac>)
 8005b9e:	6013      	str	r3, [r2, #0]

    // init targets from current reading to avoid jumps
    update_sensors();
 8005ba0:	f7fe fda8 	bl	80046f4 <update_sensors>
    fus_target_left  = lut_lookup_lin(sensors.side_left,  left_adc,  left_dist,  L_LUT_SIZE);
 8005ba4:	4b16      	ldr	r3, [pc, #88]	@ (8005c00 <fusion_reset+0xb0>)
 8005ba6:	88db      	ldrh	r3, [r3, #6]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	2320      	movs	r3, #32
 8005bac:	4a15      	ldr	r2, [pc, #84]	@ (8005c04 <fusion_reset+0xb4>)
 8005bae:	4916      	ldr	r1, [pc, #88]	@ (8005c08 <fusion_reset+0xb8>)
 8005bb0:	f7ff fdea 	bl	8005788 <lut_lookup_lin>
 8005bb4:	eef0 7a40 	vmov.f32	s15, s0
 8005bb8:	4b14      	ldr	r3, [pc, #80]	@ (8005c0c <fusion_reset+0xbc>)
 8005bba:	edc3 7a00 	vstr	s15, [r3]
    fus_target_right = lut_lookup_lin(sensors.side_right, right_adc, right_dist, R_LUT_SIZE);
 8005bbe:	4b10      	ldr	r3, [pc, #64]	@ (8005c00 <fusion_reset+0xb0>)
 8005bc0:	889b      	ldrh	r3, [r3, #4]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	2321      	movs	r3, #33	@ 0x21
 8005bc6:	4a12      	ldr	r2, [pc, #72]	@ (8005c10 <fusion_reset+0xc0>)
 8005bc8:	4912      	ldr	r1, [pc, #72]	@ (8005c14 <fusion_reset+0xc4>)
 8005bca:	f7ff fddd 	bl	8005788 <lut_lookup_lin>
 8005bce:	eef0 7a40 	vmov.f32	s15, s0
 8005bd2:	4b11      	ldr	r3, [pc, #68]	@ (8005c18 <fusion_reset+0xc8>)
 8005bd4:	edc3 7a00 	vstr	s15, [r3]
}
 8005bd8:	bf00      	nop
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20001338 	.word	0x20001338
 8005be0:	2000133c 	.word	0x2000133c
 8005be4:	20001340 	.word	0x20001340
 8005be8:	20001344 	.word	0x20001344
 8005bec:	20001348 	.word	0x20001348
 8005bf0:	2000134c 	.word	0x2000134c
 8005bf4:	20001350 	.word	0x20001350
 8005bf8:	20001354 	.word	0x20001354
 8005bfc:	20001358 	.word	0x20001358
 8005c00:	20000d7c 	.word	0x20000d7c
 8005c04:	0800f8ac 	.word	0x0800f8ac
 8005c08:	0800f82c 	.word	0x0800f82c
 8005c0c:	2000005c 	.word	0x2000005c
 8005c10:	0800f7a8 	.word	0x0800f7a8
 8005c14:	0800f724 	.word	0x0800f724
 8005c18:	20000060 	.word	0x20000060

08005c1c <fusion_set_heading_ref_to_current>:

void fusion_set_heading_ref_to_current(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
    // capture current integrated heading as the straight-line lock
    fus_theta_ref = fus_theta;
 8005c20:	4b04      	ldr	r3, [pc, #16]	@ (8005c34 <fusion_set_heading_ref_to_current+0x18>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a04      	ldr	r2, [pc, #16]	@ (8005c38 <fusion_set_heading_ref_to_current+0x1c>)
 8005c26:	6013      	str	r3, [r2, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	20001348 	.word	0x20001348
 8005c38:	2000134c 	.word	0x2000134c

08005c3c <fusion_step>:

// Call at ~200–500 Hz. Pass 0 to use WF_BASE_PWM.
void fusion_step(int base_pwm)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b096      	sub	sp, #88	@ 0x58
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
    // timing
    uint32_t now = HAL_GetTick();
 8005c44:	f000 fce6 	bl	8006614 <HAL_GetTick>
 8005c48:	63b8      	str	r0, [r7, #56]	@ 0x38
    float dt = (now - fus_last_ms) * 0.001f;
 8005c4a:	4b97      	ldr	r3, [pc, #604]	@ (8005ea8 <fusion_step+0x26c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5a:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8005eac <fusion_step+0x270>
 8005c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c62:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    if (dt <= 0.0f) dt = 0.001f;
 8005c66:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005c6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c72:	d801      	bhi.n	8005c78 <fusion_step+0x3c>
 8005c74:	4b8e      	ldr	r3, [pc, #568]	@ (8005eb0 <fusion_step+0x274>)
 8005c76:	657b      	str	r3, [r7, #84]	@ 0x54
    fus_last_ms = now;
 8005c78:	4a8b      	ldr	r2, [pc, #556]	@ (8005ea8 <fusion_step+0x26c>)
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7c:	6013      	str	r3, [r2, #0]

    // gyro
    mpu9250_read_gyro();
 8005c7e:	f7fb fdf7 	bl	8001870 <mpu9250_read_gyro>
    const float gz = mpu9250_get_gyro_z_compensated(); // deg/s
 8005c82:	f7fb fdbb 	bl	80017fc <mpu9250_get_gyro_z_compensated>
 8005c86:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    fus_theta += gz * dt;
 8005c8a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8005c8e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c96:	4b87      	ldr	r3, [pc, #540]	@ (8005eb4 <fusion_step+0x278>)
 8005c98:	edd3 7a00 	vldr	s15, [r3]
 8005c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ca0:	4b84      	ldr	r3, [pc, #528]	@ (8005eb4 <fusion_step+0x278>)
 8005ca2:	edc3 7a00 	vstr	s15, [r3]

    // wall correction
    int hasL=0, hasR=0, hasF=0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
    float u_wall = wall_compute_u(dt, &hasL, &hasR, &hasF);
 8005cb2:	f107 020c 	add.w	r2, r7, #12
 8005cb6:	f107 0110 	add.w	r1, r7, #16
 8005cba:	f107 0314 	add.w	r3, r7, #20
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8005cc4:	f7ff fdea 	bl	800589c <wall_compute_u>
 8005cc8:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

    // heading assist using your rate PID: command 0 deg/s + proportional bias from heading error
    // Map heading error → desired rate (light touch so it won’t fight walls)
    const float e_head = fus_theta_ref - fus_theta;              // deg
 8005ccc:	4b7a      	ldr	r3, [pc, #488]	@ (8005eb8 <fusion_step+0x27c>)
 8005cce:	ed93 7a00 	vldr	s14, [r3]
 8005cd2:	4b78      	ldr	r3, [pc, #480]	@ (8005eb4 <fusion_step+0x278>)
 8005cd4:	edd3 7a00 	vldr	s15, [r3]
 8005cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cdc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    const float k_head2rate = 60.0f;                             // deg/s per deg (small)
 8005ce0:	4b76      	ldr	r3, [pc, #472]	@ (8005ebc <fusion_step+0x280>)
 8005ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float sp_rate = k_head2rate * e_head;                        // desired deg/s
 8005ce4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005ce8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    // soft cap desired rate
    if (sp_rate >  300.0f) sp_rate =  300.0f;
 8005cf4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8005cf8:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8005ec0 <fusion_step+0x284>
 8005cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d04:	dd01      	ble.n	8005d0a <fusion_step+0xce>
 8005d06:	4b6f      	ldr	r3, [pc, #444]	@ (8005ec4 <fusion_step+0x288>)
 8005d08:	653b      	str	r3, [r7, #80]	@ 0x50
    if (sp_rate < -300.0f) sp_rate = -300.0f;
 8005d0a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8005d0e:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8005ec8 <fusion_step+0x28c>
 8005d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1a:	d501      	bpl.n	8005d20 <fusion_step+0xe4>
 8005d1c:	4b6b      	ldr	r3, [pc, #428]	@ (8005ecc <fusion_step+0x290>)
 8005d1e:	653b      	str	r3, [r7, #80]	@ 0x50

    float dummy_dt = dt;
 8005d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d22:	60bb      	str	r3, [r7, #8]
    float u_head = gyro_rate_pid_step(sp_rate, gz, &dummy_dt);  // returns ΔPWM using your tuned K’s
 8005d24:	f107 0308 	add.w	r3, r7, #8
 8005d28:	4618      	mov	r0, r3
 8005d2a:	edd7 0a0d 	vldr	s1, [r7, #52]	@ 0x34
 8005d2e:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8005d32:	f7fe fa2d 	bl	8004190 <gyro_rate_pid_step>
 8005d36:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c

    // blend by wall confidence (0.5 for each side seen)
    float conf = 0.0f; if (hasL) conf += 0.20f; if (hasR) conf += 0.20f; ////////////////////////
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <fusion_step+0x11a>
 8005d46:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005d4a:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8005ed0 <fusion_step+0x294>
 8005d4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d52:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <fusion_step+0x130>
 8005d5c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005d60:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8005ed0 <fusion_step+0x294>
 8005d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d68:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    fus_conf_s = FUS_CONF_EMA*fus_conf_s + (1.0f - FUS_CONF_EMA)*conf;
 8005d6c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8005ed4 <fusion_step+0x298>
 8005d70:	4b59      	ldr	r3, [pc, #356]	@ (8005ed8 <fusion_step+0x29c>)
 8005d72:	edd3 7a00 	vldr	s15, [r3]
 8005d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d7a:	eddf 7a56 	vldr	s15, [pc, #344]	@ 8005ed4 <fusion_step+0x298>
 8005d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d86:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d92:	4b51      	ldr	r3, [pc, #324]	@ (8005ed8 <fusion_step+0x29c>)
 8005d94:	edc3 7a00 	vstr	s15, [r3]

    // cap heading authority to a fraction of base
    const int base_unclamped = (base_pwm > 0) ? base_pwm : WF_BASE_PWM;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	dd01      	ble.n	8005da2 <fusion_step+0x166>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	e001      	b.n	8005da6 <fusion_step+0x16a>
 8005da2:	4b4e      	ldr	r3, [pc, #312]	@ (8005edc <fusion_step+0x2a0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	627b      	str	r3, [r7, #36]	@ 0x24
    //float u_head_capped = u_head;
    float head_cap = FUS_HEAD_CAP_FRAC * (float)base_unclamped;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	ee07 3a90 	vmov	s15, r3
 8005dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005db2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dba:	edc7 7a08 	vstr	s15, [r7, #32]
    if (u_head >  head_cap) u_head =  head_cap;
 8005dbe:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005dc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8005dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dce:	dd01      	ble.n	8005dd4 <fusion_step+0x198>
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (u_head < -head_cap) u_head = -head_cap;
 8005dd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8005dd8:	eef1 7a67 	vneg.f32	s15, s15
 8005ddc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005de0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de8:	d505      	bpl.n	8005df6 <fusion_step+0x1ba>
 8005dea:	edd7 7a08 	vldr	s15, [r7, #32]
 8005dee:	eef1 7a67 	vneg.f32	s15, s15
 8005df2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
//    float wall_cap = FUS_WALL_CAP_FRAC * base_unclamped;
//    if (u_wall >  wall_cap) u_wall =  wall_cap;
//    if (u_wall < -wall_cap) u_wall = -wall_cap;

    // final correction
    if (sensors.side_left>40 || sensors.side_right>40) fus_conf_s=1.0f;
 8005df6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ee0 <fusion_step+0x2a4>)
 8005df8:	88db      	ldrh	r3, [r3, #6]
 8005dfa:	2b28      	cmp	r3, #40	@ 0x28
 8005dfc:	d803      	bhi.n	8005e06 <fusion_step+0x1ca>
 8005dfe:	4b38      	ldr	r3, [pc, #224]	@ (8005ee0 <fusion_step+0x2a4>)
 8005e00:	889b      	ldrh	r3, [r3, #4]
 8005e02:	2b28      	cmp	r3, #40	@ 0x28
 8005e04:	d903      	bls.n	8005e0e <fusion_step+0x1d2>
 8005e06:	4b34      	ldr	r3, [pc, #208]	@ (8005ed8 <fusion_step+0x29c>)
 8005e08:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005e0c:	601a      	str	r2, [r3, #0]
    float u = fus_conf_s * u_wall + (1.0f - fus_conf_s) * u_head;
 8005e0e:	4b32      	ldr	r3, [pc, #200]	@ (8005ed8 <fusion_step+0x29c>)
 8005e10:	ed93 7a00 	vldr	s14, [r3]
 8005e14:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed8 <fusion_step+0x29c>)
 8005e1e:	edd3 7a00 	vldr	s15, [r3]
 8005e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e26:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005e2a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8005e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e36:	edc7 7a07 	vstr	s15, [r7, #28]

    // optional rate limiting on correction to avoid jerk
    float du = u - fus_u_prev;
 8005e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ee4 <fusion_step+0x2a8>)
 8005e3c:	edd3 7a00 	vldr	s15, [r3]
 8005e40:	ed97 7a07 	vldr	s14, [r7, #28]
 8005e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e48:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    if (du >  FUS_DU_RATE_LIMIT) du =  FUS_DU_RATE_LIMIT;
 8005e4c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005ee8 <fusion_step+0x2ac>
 8005e50:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5c:	dd01      	ble.n	8005e62 <fusion_step+0x226>
 8005e5e:	4b23      	ldr	r3, [pc, #140]	@ (8005eec <fusion_step+0x2b0>)
 8005e60:	647b      	str	r3, [r7, #68]	@ 0x44
    if (du < -FUS_DU_RATE_LIMIT) du = -FUS_DU_RATE_LIMIT;
 8005e62:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8005ee8 <fusion_step+0x2ac>
 8005e66:	eef1 7a67 	vneg.f32	s15, s15
 8005e6a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8005e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e76:	d505      	bpl.n	8005e84 <fusion_step+0x248>
 8005e78:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8005ee8 <fusion_step+0x2ac>
 8005e7c:	eef1 7a67 	vneg.f32	s15, s15
 8005e80:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    u = fus_u_prev + du;
 8005e84:	4b17      	ldr	r3, [pc, #92]	@ (8005ee4 <fusion_step+0x2a8>)
 8005e86:	edd3 7a00 	vldr	s15, [r3]
 8005e8a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8005e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
    fus_u_prev = u;
 8005e96:	4a13      	ldr	r2, [pc, #76]	@ (8005ee4 <fusion_step+0x2a8>)
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	6013      	str	r3, [r2, #0]

    // front-wall policy same as your wall code
    int base = (base_pwm > 0) ? base_pwm : WF_BASE_PWM;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	dd26      	ble.n	8005ef0 <fusion_step+0x2b4>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	e026      	b.n	8005ef4 <fusion_step+0x2b8>
 8005ea6:	bf00      	nop
 8005ea8:	20001358 	.word	0x20001358
 8005eac:	3a83126f 	.word	0x3a83126f
 8005eb0:	3a83126f 	.word	0x3a83126f
 8005eb4:	20001348 	.word	0x20001348
 8005eb8:	2000134c 	.word	0x2000134c
 8005ebc:	42700000 	.word	0x42700000
 8005ec0:	43960000 	.word	0x43960000
 8005ec4:	43960000 	.word	0x43960000
 8005ec8:	c3960000 	.word	0xc3960000
 8005ecc:	c3960000 	.word	0xc3960000
 8005ed0:	3e4ccccd 	.word	0x3e4ccccd
 8005ed4:	3f7851ec 	.word	0x3f7851ec
 8005ed8:	20001350 	.word	0x20001350
 8005edc:	20000030 	.word	0x20000030
 8005ee0:	20000d7c 	.word	0x20000d7c
 8005ee4:	20001354 	.word	0x20001354
 8005ee8:	42f00000 	.word	0x42f00000
 8005eec:	42f00000 	.word	0x42f00000
 8005ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8005f9c <fusion_step+0x360>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	61bb      	str	r3, [r7, #24]
//    if (hasF && WF_BRAKE_ON_FRONT) base = WF_SLOW_PWM;

    // right = base + u ; left = base - u   (same sign convention as your code)
    int pwm_right = base + (int)lroundf(u);
 8005ef6:	ed97 0a07 	vldr	s0, [r7, #28]
 8005efa:	f007 fd95 	bl	800da28 <lroundf>
 8005efe:	4602      	mov	r2, r0
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	4413      	add	r3, r2
 8005f04:	643b      	str	r3, [r7, #64]	@ 0x40
    int pwm_left  = base - (int)lroundf(u);
 8005f06:	ed97 0a07 	vldr	s0, [r7, #28]
 8005f0a:	f007 fd8d 	bl	800da28 <lroundf>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (pwm_right < 0) pwm_right = 0; if (pwm_right > WF_PWM_MAX) pwm_right = WF_PWM_MAX;
 8005f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	da01      	bge.n	8005f20 <fusion_step+0x2e4>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f20:	4b1f      	ldr	r3, [pc, #124]	@ (8005fa0 <fusion_step+0x364>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f26:	429a      	cmp	r2, r3
 8005f28:	dd02      	ble.n	8005f30 <fusion_step+0x2f4>
 8005f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa0 <fusion_step+0x364>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (pwm_left  < 0) pwm_left  = 0; if (pwm_left  > WF_PWM_MAX) pwm_left  = WF_PWM_MAX;
 8005f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	da01      	bge.n	8005f3a <fusion_step+0x2fe>
 8005f36:	2300      	movs	r3, #0
 8005f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f3a:	4b19      	ldr	r3, [pc, #100]	@ (8005fa0 <fusion_step+0x364>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f40:	429a      	cmp	r2, r3
 8005f42:	dd02      	ble.n	8005f4a <fusion_step+0x30e>
 8005f44:	4b16      	ldr	r3, [pc, #88]	@ (8005fa0 <fusion_step+0x364>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (pwm_right > 0 && pwm_right < WF_PWM_MIN_MOVE) pwm_right = WF_PWM_MIN_MOVE;
 8005f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dd07      	ble.n	8005f60 <fusion_step+0x324>
 8005f50:	4b14      	ldr	r3, [pc, #80]	@ (8005fa4 <fusion_step+0x368>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f56:	429a      	cmp	r2, r3
 8005f58:	da02      	bge.n	8005f60 <fusion_step+0x324>
 8005f5a:	4b12      	ldr	r3, [pc, #72]	@ (8005fa4 <fusion_step+0x368>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (pwm_left  > 0 && pwm_left  < WF_PWM_MIN_MOVE) pwm_left  = WF_PWM_MIN_MOVE;
 8005f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dd07      	ble.n	8005f76 <fusion_step+0x33a>
 8005f66:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa4 <fusion_step+0x368>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	da02      	bge.n	8005f76 <fusion_step+0x33a>
 8005f70:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <fusion_step+0x368>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	63fb      	str	r3, [r7, #60]	@ 0x3c

    motor_set(0, true, (uint16_t)pwm_left);
 8005f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f7fd ff24 	bl	8003dcc <motor_set>
    motor_set(1, true, (uint16_t)pwm_right);
 8005f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	f7fd ff1d 	bl	8003dcc <motor_set>
}
 8005f92:	bf00      	nop
 8005f94:	3758      	adds	r7, #88	@ 0x58
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000030 	.word	0x20000030
 8005fa0:	20000038 	.word	0x20000038
 8005fa4:	20000034 	.word	0x20000034

08005fa8 <lut_lookup_lin_local>:

static float fus_theta_local = 0.0f;

static float lut_lookup_lin_local(int raw, const int *adc_table, const float *dist_table, int size)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
    if (!adc_table || !dist_table || size <= 1) return (float)raw;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <lut_lookup_lin_local+0x20>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <lut_lookup_lin_local+0x20>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	dc05      	bgt.n	8005fd4 <lut_lookup_lin_local+0x2c>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fd2:	e07f      	b.n	80060d4 <lut_lookup_lin_local+0x12c>
    if (raw >= adc_table[0])      return dist_table[0];
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	db03      	blt.n	8005fe6 <lut_lookup_lin_local+0x3e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	edd3 7a00 	vldr	s15, [r3]
 8005fe4:	e076      	b.n	80060d4 <lut_lookup_lin_local+0x12c>
    if (raw <= adc_table[size-1]) return dist_table[size-1];
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fec:	3b01      	subs	r3, #1
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	dc09      	bgt.n	8006010 <lut_lookup_lin_local+0x68>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006002:	3b01      	subs	r3, #1
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4413      	add	r3, r2
 800600a:	edd3 7a00 	vldr	s15, [r3]
 800600e:	e061      	b.n	80060d4 <lut_lookup_lin_local+0x12c>
    for (int i = 0; i < size-1; i++) {
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	e050      	b.n	80060b8 <lut_lookup_lin_local+0x110>
        if (raw <= adc_table[i] && raw >= adc_table[i+1]) {
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	4413      	add	r3, r2
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	429a      	cmp	r2, r3
 8006024:	dc45      	bgt.n	80060b2 <lut_lookup_lin_local+0x10a>
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	3301      	adds	r3, #1
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	4413      	add	r3, r2
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	429a      	cmp	r2, r3
 8006036:	db3c      	blt.n	80060b2 <lut_lookup_lin_local+0x10a>
            float t = (float)(raw - adc_table[i+1]) / (float)(adc_table[i] - adc_table[i+1]);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	3301      	adds	r3, #1
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	4413      	add	r3, r2
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	4413      	add	r3, r2
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	3301      	adds	r3, #1
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	440b      	add	r3, r1
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006074:	edc7 7a04 	vstr	s15, [r7, #16]
            return dist_table[i+1] + t * (dist_table[i] - dist_table[i+1]);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	3301      	adds	r3, #1
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	4413      	add	r3, r2
 8006082:	ed93 7a00 	vldr	s14, [r3]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	edd3 6a00 	vldr	s13, [r3]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	3301      	adds	r3, #1
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	4413      	add	r3, r2
 800609c:	edd3 7a00 	vldr	s15, [r3]
 80060a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80060a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060b0:	e010      	b.n	80060d4 <lut_lookup_lin_local+0x12c>
    for (int i = 0; i < size-1; i++) {
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	3301      	adds	r3, #1
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	429a      	cmp	r2, r3
 80060c0:	dba9      	blt.n	8006016 <lut_lookup_lin_local+0x6e>
        }
    }
    return dist_table[size-1];
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060c8:	3b01      	subs	r3, #1
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	4413      	add	r3, r2
 80060d0:	edd3 7a00 	vldr	s15, [r3]
}
 80060d4:	eeb0 0a67 	vmov.f32	s0, s15
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	0000      	movs	r0, r0
 80060e4:	0000      	movs	r0, r0
	...

080060e8 <fusion_align_entry>:

}


bool fusion_align_entry(int base_pwm, uint32_t timeout_ms)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b09e      	sub	sp, #120	@ 0x78
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
    // ---- Your gains (unchanged) ----

    const float Kp_a = 10.0f, Ki_a = 0.1f;   // angle PI
 80060f2:	4b9b      	ldr	r3, [pc, #620]	@ (8006360 <fusion_align_entry+0x278>)
 80060f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060f6:	4b9b      	ldr	r3, [pc, #620]	@ (8006364 <fusion_align_entry+0x27c>)
 80060f8:	657b      	str	r3, [r7, #84]	@ 0x54

    // ---- Small bias to kill steady left drift (counts). Try 0, then -1 or -2 if it still nudges left. ----


    // ---- Finish criteria (unchanged) ----
    const int   DIST_TOL = 10;         // counts
 80060fa:	230a      	movs	r3, #10
 80060fc:	653b      	str	r3, [r7, #80]	@ 0x50
    const int   ANG_TOL  = 12;         // counts
 80060fe:	230c      	movs	r3, #12
 8006100:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const uint32_t STABLE_DWELL_MS = 150;
 8006102:	2396      	movs	r3, #150	@ 0x96
 8006104:	64bb      	str	r3, [r7, #72]	@ 0x48

    // ---- Output constraints (unchanged idea) ----
    const int PWM_MAX = base_pwm;      // clamp final wheel cmds
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	647b      	str	r3, [r7, #68]	@ 0x44
    const int PWM_MIN_MOVE = 500;      // measured deadzone threshold
 800610a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800610e:	643b      	str	r3, [r7, #64]	@ 0x40

    // Integrators
    float I_d = 0.0f, I_a = 0.0f;
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	677b      	str	r3, [r7, #116]	@ 0x74

    uint32_t t0 = HAL_GetTick();
 800611c:	f000 fa7a 	bl	8006614 <HAL_GetTick>
 8006120:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t last_ok = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t last_tick = HAL_GetTick();
 8006126:	f000 fa75 	bl	8006614 <HAL_GetTick>
 800612a:	66f8      	str	r0, [r7, #108]	@ 0x6c

    update_sensors();
 800612c:	f7fe fae2 	bl	80046f4 <update_sensors>
            //float target_left_cm  = lut_lookup_lin_local(sensors.side_left,  left_adc,  left_dist,  L_LUT_SIZE);
            //float target_right_cm = lut_lookup_lin_local(sensors.side_right, right_adc, right_dist, R_LUT_SIZE);

	float e_prev = 0.0f, d_filt = 0.0f, u_prev = 0.0f;
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	637b      	str	r3, [r7, #52]	@ 0x34
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	633b      	str	r3, [r7, #48]	@ 0x30
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool Lw = sensors.wall_left;
 8006142:	4b89      	ldr	r3, [pc, #548]	@ (8006368 <fusion_align_entry+0x280>)
 8006144:	7adb      	ldrb	r3, [r3, #11]
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	bool Rw = sensors.wall_right;
 800614a:	4b87      	ldr	r3, [pc, #540]	@ (8006368 <fusion_align_entry+0x280>)
 800614c:	7b1b      	ldrb	r3, [r3, #12]
 800614e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	bool FL= sensors.wall_frontL;
 8006152:	4b85      	ldr	r3, [pc, #532]	@ (8006368 <fusion_align_entry+0x280>)
 8006154:	7b5b      	ldrb	r3, [r3, #13]
 8006156:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	bool FR= sensors.wall_frontR;
 800615a:	4b83      	ldr	r3, [pc, #524]	@ (8006368 <fusion_align_entry+0x280>)
 800615c:	7b9b      	ldrb	r3, [r3, #14]
 800615e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

	if (!Lw && !Rw) { break_motors(); return false; }
 8006162:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006166:	f083 0301 	eor.w	r3, r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <fusion_align_entry+0x9e>
 8006170:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006174:	f083 0301 	eor.w	r3, r3, #1
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <fusion_align_entry+0x9e>
 800617e:	f7fd fd8d 	bl	8003c9c <break_motors>
 8006182:	2300      	movs	r3, #0
 8006184:	e1b2      	b.n	80064ec <fusion_align_entry+0x404>

    // reset motors
    motor_set(0, true, 0);
 8006186:	2200      	movs	r2, #0
 8006188:	2101      	movs	r1, #1
 800618a:	2000      	movs	r0, #0
 800618c:	f7fd fe1e 	bl	8003dcc <motor_set>
    motor_set(1, true, 0);
 8006190:	2200      	movs	r2, #0
 8006192:	2101      	movs	r1, #1
 8006194:	2001      	movs	r0, #1
 8006196:	f7fd fe19 	bl	8003dcc <motor_set>

    while (1) {
        // --- timing / dt ---
        uint32_t now = HAL_GetTick();
 800619a:	f000 fa3b 	bl	8006614 <HAL_GetTick>
 800619e:	6278      	str	r0, [r7, #36]	@ 0x24
        float dt = (now - last_tick) / 1000.0f;
 80061a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800636c <fusion_align_entry+0x284>
 80061b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061b6:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
        if (dt <= 0) dt = 0.001f;
 80061ba:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80061be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c6:	d801      	bhi.n	80061cc <fusion_align_entry+0xe4>
 80061c8:	4b69      	ldr	r3, [pc, #420]	@ (8006370 <fusion_align_entry+0x288>)
 80061ca:	66bb      	str	r3, [r7, #104]	@ 0x68
        last_tick = now;
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	66fb      	str	r3, [r7, #108]	@ 0x6c

        // --- sensors ---
        update_sensors();
 80061d0:	f7fe fa90 	bl	80046f4 <update_sensors>

		bool Lw = sensors.wall_left;
 80061d4:	4b64      	ldr	r3, [pc, #400]	@ (8006368 <fusion_align_entry+0x280>)
 80061d6:	7adb      	ldrb	r3, [r3, #11]
 80061d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		bool Rw = sensors.wall_right;
 80061dc:	4b62      	ldr	r3, [pc, #392]	@ (8006368 <fusion_align_entry+0x280>)
 80061de:	7b1b      	ldrb	r3, [r3, #12]
 80061e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		bool FL= sensors.wall_frontL;
 80061e4:	4b60      	ldr	r3, [pc, #384]	@ (8006368 <fusion_align_entry+0x280>)
 80061e6:	7b5b      	ldrb	r3, [r3, #13]
 80061e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		bool FR= sensors.wall_frontR;
 80061ec:	4b5e      	ldr	r3, [pc, #376]	@ (8006368 <fusion_align_entry+0x280>)
 80061ee:	7b9b      	ldrb	r3, [r3, #14]
 80061f0:	f887 3020 	strb.w	r3, [r7, #32]

		// Maintain requirement: at least one side wall; if both drop, stop
//		if (!Lw && !Rw) { break_motors(); return false; }

		float Lcm = lut_lookup_lin_local(sensors.side_left,  left_adc,  left_dist,  L_LUT_SIZE);
 80061f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006368 <fusion_align_entry+0x280>)
 80061f6:	88db      	ldrh	r3, [r3, #6]
 80061f8:	4618      	mov	r0, r3
 80061fa:	2320      	movs	r3, #32
 80061fc:	4a5d      	ldr	r2, [pc, #372]	@ (8006374 <fusion_align_entry+0x28c>)
 80061fe:	495e      	ldr	r1, [pc, #376]	@ (8006378 <fusion_align_entry+0x290>)
 8006200:	f7ff fed2 	bl	8005fa8 <lut_lookup_lin_local>
 8006204:	ed87 0a07 	vstr	s0, [r7, #28]
		float Rcm = lut_lookup_lin_local(sensors.side_right, right_adc, right_dist, R_LUT_SIZE);
 8006208:	4b57      	ldr	r3, [pc, #348]	@ (8006368 <fusion_align_entry+0x280>)
 800620a:	889b      	ldrh	r3, [r3, #4]
 800620c:	4618      	mov	r0, r3
 800620e:	2321      	movs	r3, #33	@ 0x21
 8006210:	4a5a      	ldr	r2, [pc, #360]	@ (800637c <fusion_align_entry+0x294>)
 8006212:	495b      	ldr	r1, [pc, #364]	@ (8006380 <fusion_align_entry+0x298>)
 8006214:	f7ff fec8 	bl	8005fa8 <lut_lookup_lin_local>
 8006218:	ed87 0a06 	vstr	s0, [r7, #24]


		// Error
		float e_ang;
		if (Lw && Rw) {
 800621c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01d      	beq.n	8006260 <fusion_align_entry+0x178>
 8006224:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006228:	2b00      	cmp	r3, #0
 800622a:	d019      	beq.n	8006260 <fusion_align_entry+0x178>
			//e_ang  = (Rcm - Lcm)*100;      // +e → need to turn right
			e_ang  = (Lcm-2.7)*100;
 800622c:	69f8      	ldr	r0, [r7, #28]
 800622e:	f7fa f993 	bl	8000558 <__aeabi_f2d>
 8006232:	a349      	add	r3, pc, #292	@ (adr r3, 8006358 <fusion_align_entry+0x270>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa f82e 	bl	8000298 <__aeabi_dsub>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4610      	mov	r0, r2
 8006242:	4619      	mov	r1, r3
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	4b4e      	ldr	r3, [pc, #312]	@ (8006384 <fusion_align_entry+0x29c>)
 800624a:	f7fa f9dd 	bl	8000608 <__aeabi_dmul>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4610      	mov	r0, r2
 8006254:	4619      	mov	r1, r3
 8006256:	f7fa fcaf 	bl	8000bb8 <__aeabi_d2f>
 800625a:	4603      	mov	r3, r0
 800625c:	667b      	str	r3, [r7, #100]	@ 0x64
 800625e:	e036      	b.n	80062ce <fusion_align_entry+0x1e6>

		} else if (Lw) {
 8006260:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006264:	2b00      	cmp	r3, #0
 8006266:	d019      	beq.n	800629c <fusion_align_entry+0x1b4>
			//e_ang  = (Lcm-target_left)*100;   // +e if too near left wall
			e_ang  = (Lcm-2.7)*100;
 8006268:	69f8      	ldr	r0, [r7, #28]
 800626a:	f7fa f975 	bl	8000558 <__aeabi_f2d>
 800626e:	a33a      	add	r3, pc, #232	@ (adr r3, 8006358 <fusion_align_entry+0x270>)
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f7fa f810 	bl	8000298 <__aeabi_dsub>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4610      	mov	r0, r2
 800627e:	4619      	mov	r1, r3
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	4b3f      	ldr	r3, [pc, #252]	@ (8006384 <fusion_align_entry+0x29c>)
 8006286:	f7fa f9bf 	bl	8000608 <__aeabi_dmul>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4610      	mov	r0, r2
 8006290:	4619      	mov	r1, r3
 8006292:	f7fa fc91 	bl	8000bb8 <__aeabi_d2f>
 8006296:	4603      	mov	r3, r0
 8006298:	667b      	str	r3, [r7, #100]	@ 0x64
 800629a:	e018      	b.n	80062ce <fusion_align_entry+0x1e6>


		} else { // Rw
			//e_ang  = (Rcm - target_right)*100;  // +e if too far from right wall
			e_ang  = (Rcm - 2.7)*100;
 800629c:	69b8      	ldr	r0, [r7, #24]
 800629e:	f7fa f95b 	bl	8000558 <__aeabi_f2d>
 80062a2:	a32d      	add	r3, pc, #180	@ (adr r3, 8006358 <fusion_align_entry+0x270>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f7f9 fff6 	bl	8000298 <__aeabi_dsub>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4610      	mov	r0, r2
 80062b2:	4619      	mov	r1, r3
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	4b32      	ldr	r3, [pc, #200]	@ (8006384 <fusion_align_entry+0x29c>)
 80062ba:	f7fa f9a5 	bl	8000608 <__aeabi_dmul>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4610      	mov	r0, r2
 80062c4:	4619      	mov	r1, r3
 80062c6:	f7fa fc77 	bl	8000bb8 <__aeabi_d2f>
 80062ca:	4603      	mov	r3, r0
 80062cc:	667b      	str	r3, [r7, #100]	@ 0x64
		}


        // --- PI controllers ---

        I_a += e_ang  * dt;
 80062ce:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80062d2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80062d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062da:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80062de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062e2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

        // simple clamps to keep integrators sane
        if (I_a > 100.0f) I_a = 100.0f;
 80062e6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80062ea:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006388 <fusion_align_entry+0x2a0>
 80062ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f6:	dd01      	ble.n	80062fc <fusion_align_entry+0x214>
 80062f8:	4b24      	ldr	r3, [pc, #144]	@ (800638c <fusion_align_entry+0x2a4>)
 80062fa:	677b      	str	r3, [r7, #116]	@ 0x74
        if (I_a < -100.0f) I_a = -100.0f;
 80062fc:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8006300:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006390 <fusion_align_entry+0x2a8>
 8006304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800630c:	d501      	bpl.n	8006312 <fusion_align_entry+0x22a>
 800630e:	4b21      	ldr	r3, [pc, #132]	@ (8006394 <fusion_align_entry+0x2ac>)
 8006310:	677b      	str	r3, [r7, #116]	@ 0x74

        float w = Kp_a * e_ang  + Ki_a * I_a;  // turn command          (- = turn right, + = left)
 8006312:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8006316:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800631a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800631e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8006322:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8006326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800632a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800632e:	edc7 7a05 	vstr	s15, [r7, #20]
        int cmd_left;
        int cmd_right;

        // per-wheel raw commands (signed) — keep your mixing/signs
        if (Lw){
 8006332:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006336:	2b00      	cmp	r3, #0
 8006338:	d02e      	beq.n	8006398 <fusion_align_entry+0x2b0>
            cmd_left  = (int)lroundf(-w);
 800633a:	edd7 7a05 	vldr	s15, [r7, #20]
 800633e:	eef1 7a67 	vneg.f32	s15, s15
 8006342:	eeb0 0a67 	vmov.f32	s0, s15
 8006346:	f007 fb6f 	bl	800da28 <lroundf>
 800634a:	6638      	str	r0, [r7, #96]	@ 0x60
            cmd_right = (int)lroundf(w);
 800634c:	ed97 0a05 	vldr	s0, [r7, #20]
 8006350:	f007 fb6a 	bl	800da28 <lroundf>
 8006354:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8006356:	e031      	b.n	80063bc <fusion_align_entry+0x2d4>
 8006358:	9999999a 	.word	0x9999999a
 800635c:	40059999 	.word	0x40059999
 8006360:	41200000 	.word	0x41200000
 8006364:	3dcccccd 	.word	0x3dcccccd
 8006368:	20000d7c 	.word	0x20000d7c
 800636c:	447a0000 	.word	0x447a0000
 8006370:	3a83126f 	.word	0x3a83126f
 8006374:	0800f8ac 	.word	0x0800f8ac
 8006378:	0800f82c 	.word	0x0800f82c
 800637c:	0800f7a8 	.word	0x0800f7a8
 8006380:	0800f724 	.word	0x0800f724
 8006384:	40590000 	.word	0x40590000
 8006388:	42c80000 	.word	0x42c80000
 800638c:	42c80000 	.word	0x42c80000
 8006390:	c2c80000 	.word	0xc2c80000
 8006394:	c2c80000 	.word	0xc2c80000
        }else if (Rw){
 8006398:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00d      	beq.n	80063bc <fusion_align_entry+0x2d4>
            cmd_left  = (int)lroundf(w);
 80063a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80063a4:	f007 fb40 	bl	800da28 <lroundf>
 80063a8:	6638      	str	r0, [r7, #96]	@ 0x60
            cmd_right = (int)lroundf(-w);
 80063aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80063ae:	eef1 7a67 	vneg.f32	s15, s15
 80063b2:	eeb0 0a67 	vmov.f32	s0, s15
 80063b6:	f007 fb37 	bl	800da28 <lroundf>
 80063ba:	65f8      	str	r0, [r7, #92]	@ 0x5c
        }


        // saturate
        cmd_left  = clampi_local(cmd_left,  -PWM_MAX, PWM_MAX);
 80063bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063be:	425b      	negs	r3, r3
 80063c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063c2:	4619      	mov	r1, r3
 80063c4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80063c6:	f7fe ffcd 	bl	8005364 <clampi_local>
 80063ca:	6638      	str	r0, [r7, #96]	@ 0x60
        cmd_right = clampi_local(cmd_right, -PWM_MAX, PWM_MAX);
 80063cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ce:	425b      	negs	r3, r3
 80063d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063d2:	4619      	mov	r1, r3
 80063d4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80063d6:	f7fe ffc5 	bl	8005364 <clampi_local>
 80063da:	65f8      	str	r0, [r7, #92]	@ 0x5c

        // --- convergence check *before* applying min-move ---
        bool ang_ok  = (abs((int)lroundf(e_ang))  <= ANG_TOL);
 80063dc:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 80063e0:	f007 fb22 	bl	800da28 <lroundf>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bfb8      	it	lt
 80063ea:	425b      	neglt	r3, r3
 80063ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063ee:	429a      	cmp	r2, r3
 80063f0:	bfac      	ite	ge
 80063f2:	2301      	movge	r3, #1
 80063f4:	2300      	movlt	r3, #0
 80063f6:	74fb      	strb	r3, [r7, #19]
        bool nearly_done = (ang_ok);
 80063f8:	7cfb      	ldrb	r3, [r7, #19]
 80063fa:	74bb      	strb	r3, [r7, #18]

        // --- stiction handling ---
        // If we're NOT nearly done, enforce a minimum to break deadzone.
        // If we ARE nearly done, DON'T enforce min move — brake instead to avoid creeping.
        if (!nearly_done) {
 80063fc:	7cbb      	ldrb	r3, [r7, #18]
 80063fe:	f083 0301 	eor.w	r3, r3, #1
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d028      	beq.n	800645a <fusion_align_entry+0x372>
            if (cmd_left > 0  && cmd_left  < PWM_MIN_MOVE) cmd_left  = PWM_MIN_MOVE;
 8006408:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800640a:	2b00      	cmp	r3, #0
 800640c:	dd05      	ble.n	800641a <fusion_align_entry+0x332>
 800640e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006412:	429a      	cmp	r2, r3
 8006414:	da01      	bge.n	800641a <fusion_align_entry+0x332>
 8006416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006418:	663b      	str	r3, [r7, #96]	@ 0x60
            if (cmd_left < 0  && -cmd_left < PWM_MIN_MOVE) cmd_left  = -PWM_MIN_MOVE;
 800641a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800641c:	2b00      	cmp	r3, #0
 800641e:	da07      	bge.n	8006430 <fusion_align_entry+0x348>
 8006420:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006422:	425b      	negs	r3, r3
 8006424:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006426:	429a      	cmp	r2, r3
 8006428:	dd02      	ble.n	8006430 <fusion_align_entry+0x348>
 800642a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800642c:	425b      	negs	r3, r3
 800642e:	663b      	str	r3, [r7, #96]	@ 0x60
            if (cmd_right > 0 && cmd_right < PWM_MIN_MOVE) cmd_right = PWM_MIN_MOVE;
 8006430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006432:	2b00      	cmp	r3, #0
 8006434:	dd05      	ble.n	8006442 <fusion_align_entry+0x35a>
 8006436:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800643a:	429a      	cmp	r2, r3
 800643c:	da01      	bge.n	8006442 <fusion_align_entry+0x35a>
 800643e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006440:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if (cmd_right < 0 && -cmd_right < PWM_MIN_MOVE) cmd_right = -PWM_MIN_MOVE;
 8006442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006444:	2b00      	cmp	r3, #0
 8006446:	da0c      	bge.n	8006462 <fusion_align_entry+0x37a>
 8006448:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800644a:	425b      	negs	r3, r3
 800644c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800644e:	429a      	cmp	r2, r3
 8006450:	dd07      	ble.n	8006462 <fusion_align_entry+0x37a>
 8006452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006454:	425b      	negs	r3, r3
 8006456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006458:	e003      	b.n	8006462 <fusion_align_entry+0x37a>
        } else {
            // close enough: stop and actively brake so it doesn't coast/creep left
            cmd_left = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	663b      	str	r3, [r7, #96]	@ 0x60
            cmd_right = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // --- drive / brake ---
        if (cmd_left == 0 && cmd_right == 0) {
 8006462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006464:	2b00      	cmp	r3, #0
 8006466:	d105      	bne.n	8006474 <fusion_align_entry+0x38c>
 8006468:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <fusion_align_entry+0x38c>

            break_motors();  // actively short the motors to kill drift
 800646e:	f7fd fc15 	bl	8003c9c <break_motors>
 8006472:	e01d      	b.n	80064b0 <fusion_align_entry+0x3c8>
        } else {
            bool lfwd = (cmd_left  >= 0);
 8006474:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006476:	43db      	mvns	r3, r3
 8006478:	0fdb      	lsrs	r3, r3, #31
 800647a:	747b      	strb	r3, [r7, #17]
            bool rfwd = (cmd_right >= 0);
 800647c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800647e:	43db      	mvns	r3, r3
 8006480:	0fdb      	lsrs	r3, r3, #31
 8006482:	743b      	strb	r3, [r7, #16]
            uint16_t lduty = (uint16_t)abs(cmd_left);
 8006484:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfb8      	it	lt
 800648a:	425b      	neglt	r3, r3
 800648c:	81fb      	strh	r3, [r7, #14]
            uint16_t rduty = (uint16_t)abs(cmd_right);
 800648e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006490:	2b00      	cmp	r3, #0
 8006492:	bfb8      	it	lt
 8006494:	425b      	neglt	r3, r3
 8006496:	81bb      	strh	r3, [r7, #12]
            motor_set(0, lfwd, lduty);
 8006498:	89fa      	ldrh	r2, [r7, #14]
 800649a:	7c7b      	ldrb	r3, [r7, #17]
 800649c:	4619      	mov	r1, r3
 800649e:	2000      	movs	r0, #0
 80064a0:	f7fd fc94 	bl	8003dcc <motor_set>
            motor_set(1, rfwd, rduty);
 80064a4:	89ba      	ldrh	r2, [r7, #12]
 80064a6:	7c3b      	ldrb	r3, [r7, #16]
 80064a8:	4619      	mov	r1, r3
 80064aa:	2001      	movs	r0, #1
 80064ac:	f7fd fc8e 	bl	8003dcc <motor_set>

        }

        // --- dwell-based success ---
        if (nearly_done) {
 80064b0:	7cbb      	ldrb	r3, [r7, #18]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00e      	beq.n	80064d4 <fusion_align_entry+0x3ec>
            if (last_ok == 0) last_ok = now;
 80064b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <fusion_align_entry+0x3d8>
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	673b      	str	r3, [r7, #112]	@ 0x70
            if ((now - last_ok) >= STABLE_DWELL_MS) {
 80064c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d805      	bhi.n	80064d8 <fusion_align_entry+0x3f0>
                break_motors();
 80064cc:	f7fd fbe6 	bl	8003c9c <break_motors>
                return true;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e00b      	b.n	80064ec <fusion_align_entry+0x404>
            }
        } else {
            last_ok = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        // --- timeout ---
        if ((now - t0) > timeout_ms) {
 80064d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	f4bf ae5a 	bcs.w	800619a <fusion_align_entry+0xb2>
            break_motors();
 80064e6:	f7fd fbd9 	bl	8003c9c <break_motors>
            return false;
 80064ea:	2300      	movs	r3, #0
        }
    }
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3778      	adds	r7, #120	@ 0x78
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80064f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800652c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80064f8:	f7fe fe20 	bl	800513c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80064fc:	480c      	ldr	r0, [pc, #48]	@ (8006530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80064fe:	490d      	ldr	r1, [pc, #52]	@ (8006534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006500:	4a0d      	ldr	r2, [pc, #52]	@ (8006538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006504:	e002      	b.n	800650c <LoopCopyDataInit>

08006506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800650a:	3304      	adds	r3, #4

0800650c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800650c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800650e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006510:	d3f9      	bcc.n	8006506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006512:	4a0a      	ldr	r2, [pc, #40]	@ (800653c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006514:	4c0a      	ldr	r4, [pc, #40]	@ (8006540 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006518:	e001      	b.n	800651e <LoopFillZerobss>

0800651a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800651a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800651c:	3204      	adds	r2, #4

0800651e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800651e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006520:	d3fb      	bcc.n	800651a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006522:	f005 f9b3 	bl	800b88c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006526:	f7fb fc05 	bl	8001d34 <main>
  bx  lr    
 800652a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800652c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006534:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8006538:	0800fcb4 	.word	0x0800fcb4
  ldr r2, =_sbss
 800653c:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8006540:	200014ac 	.word	0x200014ac

08006544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006544:	e7fe      	b.n	8006544 <ADC_IRQHandler>
	...

08006548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800654c:	4b0e      	ldr	r3, [pc, #56]	@ (8006588 <HAL_Init+0x40>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a0d      	ldr	r2, [pc, #52]	@ (8006588 <HAL_Init+0x40>)
 8006552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006558:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <HAL_Init+0x40>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <HAL_Init+0x40>)
 800655e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006564:	4b08      	ldr	r3, [pc, #32]	@ (8006588 <HAL_Init+0x40>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a07      	ldr	r2, [pc, #28]	@ (8006588 <HAL_Init+0x40>)
 800656a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800656e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006570:	2003      	movs	r0, #3
 8006572:	f000 fd41 	bl	8006ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006576:	200f      	movs	r0, #15
 8006578:	f000 f808 	bl	800658c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800657c:	f7fe fa6a 	bl	8004a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40023c00 	.word	0x40023c00

0800658c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006594:	4b12      	ldr	r3, [pc, #72]	@ (80065e0 <HAL_InitTick+0x54>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	4b12      	ldr	r3, [pc, #72]	@ (80065e4 <HAL_InitTick+0x58>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	4619      	mov	r1, r3
 800659e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80065a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80065a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fd59 	bl	8007062 <HAL_SYSTICK_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e00e      	b.n	80065d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b0f      	cmp	r3, #15
 80065be:	d80a      	bhi.n	80065d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065c0:	2200      	movs	r2, #0
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	f000 fd21 	bl	800700e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065cc:	4a06      	ldr	r2, [pc, #24]	@ (80065e8 <HAL_InitTick+0x5c>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e000      	b.n	80065d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	2000002c 	.word	0x2000002c
 80065e4:	20000068 	.word	0x20000068
 80065e8:	20000064 	.word	0x20000064

080065ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065f0:	4b06      	ldr	r3, [pc, #24]	@ (800660c <HAL_IncTick+0x20>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <HAL_IncTick+0x24>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4413      	add	r3, r2
 80065fc:	4a04      	ldr	r2, [pc, #16]	@ (8006610 <HAL_IncTick+0x24>)
 80065fe:	6013      	str	r3, [r2, #0]
}
 8006600:	bf00      	nop
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000068 	.word	0x20000068
 8006610:	2000135c 	.word	0x2000135c

08006614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
  return uwTick;
 8006618:	4b03      	ldr	r3, [pc, #12]	@ (8006628 <HAL_GetTick+0x14>)
 800661a:	681b      	ldr	r3, [r3, #0]
}
 800661c:	4618      	mov	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	2000135c 	.word	0x2000135c

0800662c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006634:	f7ff ffee 	bl	8006614 <HAL_GetTick>
 8006638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d005      	beq.n	8006652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006646:	4b0a      	ldr	r3, [pc, #40]	@ (8006670 <HAL_Delay+0x44>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006652:	bf00      	nop
 8006654:	f7ff ffde 	bl	8006614 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	429a      	cmp	r2, r3
 8006662:	d8f7      	bhi.n	8006654 <HAL_Delay+0x28>
  {
  }
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000068 	.word	0x20000068

08006674 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e033      	b.n	80066f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fe fa06 	bl	8004aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	f003 0310 	and.w	r3, r3, #16
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d118      	bne.n	80066e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80066ba:	f023 0302 	bic.w	r3, r3, #2
 80066be:	f043 0202 	orr.w	r2, r3, #2
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 faca 	bl	8006c60 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d6:	f023 0303 	bic.w	r3, r3, #3
 80066da:	f043 0201 	orr.w	r2, r3, #1
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80066e2:	e001      	b.n	80066e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_ADC_Start+0x1a>
 8006712:	2302      	movs	r3, #2
 8006714:	e097      	b.n	8006846 <HAL_ADC_Start+0x14a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b01      	cmp	r3, #1
 800672a:	d018      	beq.n	800675e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800673c:	4b45      	ldr	r3, [pc, #276]	@ (8006854 <HAL_ADC_Start+0x158>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a45      	ldr	r2, [pc, #276]	@ (8006858 <HAL_ADC_Start+0x15c>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	0c9a      	lsrs	r2, r3, #18
 8006748:	4613      	mov	r3, r2
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	4413      	add	r3, r2
 800674e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006750:	e002      	b.n	8006758 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	3b01      	subs	r3, #1
 8006756:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f9      	bne.n	8006752 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b01      	cmp	r3, #1
 800676a:	d15f      	bne.n	800682c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006770:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006796:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067aa:	d106      	bne.n	80067ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b0:	f023 0206 	bic.w	r2, r3, #6
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80067b8:	e002      	b.n	80067c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067c8:	4b24      	ldr	r3, [pc, #144]	@ (800685c <HAL_ADC_Start+0x160>)
 80067ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80067d4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10f      	bne.n	8006802 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d129      	bne.n	8006844 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80067fe:	609a      	str	r2, [r3, #8]
 8006800:	e020      	b.n	8006844 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a16      	ldr	r2, [pc, #88]	@ (8006860 <HAL_ADC_Start+0x164>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d11b      	bne.n	8006844 <HAL_ADC_Start+0x148>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d114      	bne.n	8006844 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006828:	609a      	str	r2, [r3, #8]
 800682a:	e00b      	b.n	8006844 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006830:	f043 0210 	orr.w	r2, r3, #16
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683c:	f043 0201 	orr.w	r2, r3, #1
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	2000002c 	.word	0x2000002c
 8006858:	431bde83 	.word	0x431bde83
 800685c:	40012300 	.word	0x40012300
 8006860:	40012000 	.word	0x40012000

08006864 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_ADC_Stop+0x16>
 8006876:	2302      	movs	r3, #2
 8006878:	e021      	b.n	80068be <HAL_ADC_Stop+0x5a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d109      	bne.n	80068b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	f043 0201 	orr.w	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068e6:	d113      	bne.n	8006910 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80068f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068f6:	d10b      	bne.n	8006910 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fc:	f043 0220 	orr.w	r2, r3, #32
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e063      	b.n	80069d8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8006910:	f7ff fe80 	bl	8006614 <HAL_GetTick>
 8006914:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006916:	e021      	b.n	800695c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691e:	d01d      	beq.n	800695c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d007      	beq.n	8006936 <HAL_ADC_PollForConversion+0x6c>
 8006926:	f7ff fe75 	bl	8006614 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d212      	bcs.n	800695c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b02      	cmp	r3, #2
 8006942:	d00b      	beq.n	800695c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006948:	f043 0204 	orr.w	r2, r3, #4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e03d      	b.n	80069d8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b02      	cmp	r3, #2
 8006968:	d1d6      	bne.n	8006918 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f06f 0212 	mvn.w	r2, #18
 8006972:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006978:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d123      	bne.n	80069d6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006992:	2b00      	cmp	r3, #0
 8006994:	d11f      	bne.n	80069d6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d006      	beq.n	80069b2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d111      	bne.n	80069d6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d105      	bne.n	80069d6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	f043 0201 	orr.w	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
	...

080069fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_ADC_ConfigChannel+0x1c>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e113      	b.n	8006c40 <HAL_ADC_ConfigChannel+0x244>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b09      	cmp	r3, #9
 8006a26:	d925      	bls.n	8006a74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68d9      	ldr	r1, [r3, #12]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	461a      	mov	r2, r3
 8006a36:	4613      	mov	r3, r2
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3b1e      	subs	r3, #30
 8006a3e:	2207      	movs	r2, #7
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	43da      	mvns	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	400a      	ands	r2, r1
 8006a4c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68d9      	ldr	r1, [r3, #12]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	4618      	mov	r0, r3
 8006a60:	4603      	mov	r3, r0
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	4403      	add	r3, r0
 8006a66:	3b1e      	subs	r3, #30
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	60da      	str	r2, [r3, #12]
 8006a72:	e022      	b.n	8006aba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6919      	ldr	r1, [r3, #16]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	4613      	mov	r3, r2
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	4413      	add	r3, r2
 8006a88:	2207      	movs	r2, #7
 8006a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8e:	43da      	mvns	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	400a      	ands	r2, r1
 8006a96:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6919      	ldr	r1, [r3, #16]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	4403      	add	r3, r0
 8006ab0:	409a      	lsls	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b06      	cmp	r3, #6
 8006ac0:	d824      	bhi.n	8006b0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3b05      	subs	r3, #5
 8006ad4:	221f      	movs	r2, #31
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	43da      	mvns	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	400a      	ands	r2, r1
 8006ae2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	4618      	mov	r0, r3
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	3b05      	subs	r3, #5
 8006afe:	fa00 f203 	lsl.w	r2, r0, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b0a:	e04c      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b0c      	cmp	r3, #12
 8006b12:	d824      	bhi.n	8006b5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	3b23      	subs	r3, #35	@ 0x23
 8006b26:	221f      	movs	r2, #31
 8006b28:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2c:	43da      	mvns	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	400a      	ands	r2, r1
 8006b34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	4618      	mov	r0, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	3b23      	subs	r3, #35	@ 0x23
 8006b50:	fa00 f203 	lsl.w	r2, r0, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b5c:	e023      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3b41      	subs	r3, #65	@ 0x41
 8006b70:	221f      	movs	r2, #31
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	43da      	mvns	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	400a      	ands	r2, r1
 8006b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	3b41      	subs	r3, #65	@ 0x41
 8006b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ba6:	4b29      	ldr	r3, [pc, #164]	@ (8006c4c <HAL_ADC_ConfigChannel+0x250>)
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a28      	ldr	r2, [pc, #160]	@ (8006c50 <HAL_ADC_ConfigChannel+0x254>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d10f      	bne.n	8006bd4 <HAL_ADC_ConfigChannel+0x1d8>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b12      	cmp	r3, #18
 8006bba:	d10b      	bne.n	8006bd4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <HAL_ADC_ConfigChannel+0x254>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d12b      	bne.n	8006c36 <HAL_ADC_ConfigChannel+0x23a>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <HAL_ADC_ConfigChannel+0x258>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d003      	beq.n	8006bf0 <HAL_ADC_ConfigChannel+0x1f4>
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b11      	cmp	r3, #17
 8006bee:	d122      	bne.n	8006c36 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a11      	ldr	r2, [pc, #68]	@ (8006c54 <HAL_ADC_ConfigChannel+0x258>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d111      	bne.n	8006c36 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c12:	4b11      	ldr	r3, [pc, #68]	@ (8006c58 <HAL_ADC_ConfigChannel+0x25c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a11      	ldr	r2, [pc, #68]	@ (8006c5c <HAL_ADC_ConfigChannel+0x260>)
 8006c18:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1c:	0c9a      	lsrs	r2, r3, #18
 8006c1e:	4613      	mov	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006c28:	e002      	b.n	8006c30 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f9      	bne.n	8006c2a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	40012300 	.word	0x40012300
 8006c50:	40012000 	.word	0x40012000
 8006c54:	10000012 	.word	0x10000012
 8006c58:	2000002c 	.word	0x2000002c
 8006c5c:	431bde83 	.word	0x431bde83

08006c60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c68:	4b79      	ldr	r3, [pc, #484]	@ (8006e50 <ADC_Init+0x1f0>)
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6859      	ldr	r1, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	021a      	lsls	r2, r3, #8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006cb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6859      	ldr	r1, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6899      	ldr	r1, [r3, #8]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf2:	4a58      	ldr	r2, [pc, #352]	@ (8006e54 <ADC_Init+0x1f4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d022      	beq.n	8006d3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6899      	ldr	r1, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6899      	ldr	r1, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	609a      	str	r2, [r3, #8]
 8006d3c:	e00f      	b.n	8006d5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006d5c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0202 	bic.w	r2, r2, #2
 8006d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6899      	ldr	r1, [r3, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	7e1b      	ldrb	r3, [r3, #24]
 8006d78:	005a      	lsls	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01b      	beq.n	8006dc4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d9a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006daa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6859      	ldr	r1, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db6:	3b01      	subs	r3, #1
 8006db8:	035a      	lsls	r2, r3, #13
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
 8006dc2:	e007      	b.n	8006dd4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dd2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	051a      	lsls	r2, r3, #20
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006e08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6899      	ldr	r1, [r3, #8]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e16:	025a      	lsls	r2, r3, #9
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6899      	ldr	r1, [r3, #8]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	029a      	lsls	r2, r3, #10
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	609a      	str	r2, [r3, #8]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	40012300 	.word	0x40012300
 8006e54:	0f000001 	.word	0x0f000001

08006e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e68:	4b0c      	ldr	r3, [pc, #48]	@ (8006e9c <__NVIC_SetPriorityGrouping+0x44>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006e74:	4013      	ands	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e8a:	4a04      	ldr	r2, [pc, #16]	@ (8006e9c <__NVIC_SetPriorityGrouping+0x44>)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	60d3      	str	r3, [r2, #12]
}
 8006e90:	bf00      	nop
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	e000ed00 	.word	0xe000ed00

08006ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ea4:	4b04      	ldr	r3, [pc, #16]	@ (8006eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	0a1b      	lsrs	r3, r3, #8
 8006eaa:	f003 0307 	and.w	r3, r3, #7
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	e000ed00 	.word	0xe000ed00

08006ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	db0b      	blt.n	8006ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	f003 021f 	and.w	r2, r3, #31
 8006ed4:	4907      	ldr	r1, [pc, #28]	@ (8006ef4 <__NVIC_EnableIRQ+0x38>)
 8006ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eda:	095b      	lsrs	r3, r3, #5
 8006edc:	2001      	movs	r0, #1
 8006ede:	fa00 f202 	lsl.w	r2, r0, r2
 8006ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	e000e100 	.word	0xe000e100

08006ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	6039      	str	r1, [r7, #0]
 8006f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	db0a      	blt.n	8006f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	490c      	ldr	r1, [pc, #48]	@ (8006f44 <__NVIC_SetPriority+0x4c>)
 8006f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f16:	0112      	lsls	r2, r2, #4
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f20:	e00a      	b.n	8006f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	4908      	ldr	r1, [pc, #32]	@ (8006f48 <__NVIC_SetPriority+0x50>)
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	3b04      	subs	r3, #4
 8006f30:	0112      	lsls	r2, r2, #4
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	440b      	add	r3, r1
 8006f36:	761a      	strb	r2, [r3, #24]
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	e000e100 	.word	0xe000e100
 8006f48:	e000ed00 	.word	0xe000ed00

08006f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b089      	sub	sp, #36	@ 0x24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f1c3 0307 	rsb	r3, r3, #7
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	bf28      	it	cs
 8006f6a:	2304      	movcs	r3, #4
 8006f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	3304      	adds	r3, #4
 8006f72:	2b06      	cmp	r3, #6
 8006f74:	d902      	bls.n	8006f7c <NVIC_EncodePriority+0x30>
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	3b03      	subs	r3, #3
 8006f7a:	e000      	b.n	8006f7e <NVIC_EncodePriority+0x32>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	43da      	mvns	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	401a      	ands	r2, r3
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f94:	f04f 31ff 	mov.w	r1, #4294967295
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9e:	43d9      	mvns	r1, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fa4:	4313      	orrs	r3, r2
         );
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3724      	adds	r7, #36	@ 0x24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fc4:	d301      	bcc.n	8006fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e00f      	b.n	8006fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006fca:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff4 <SysTick_Config+0x40>)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fd2:	210f      	movs	r1, #15
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	f7ff ff8e 	bl	8006ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fdc:	4b05      	ldr	r3, [pc, #20]	@ (8006ff4 <SysTick_Config+0x40>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fe2:	4b04      	ldr	r3, [pc, #16]	@ (8006ff4 <SysTick_Config+0x40>)
 8006fe4:	2207      	movs	r2, #7
 8006fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	e000e010 	.word	0xe000e010

08006ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff ff29 	bl	8006e58 <__NVIC_SetPriorityGrouping>
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800700e:	b580      	push	{r7, lr}
 8007010:	b086      	sub	sp, #24
 8007012:	af00      	add	r7, sp, #0
 8007014:	4603      	mov	r3, r0
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007020:	f7ff ff3e 	bl	8006ea0 <__NVIC_GetPriorityGrouping>
 8007024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	6978      	ldr	r0, [r7, #20]
 800702c:	f7ff ff8e 	bl	8006f4c <NVIC_EncodePriority>
 8007030:	4602      	mov	r2, r0
 8007032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff ff5d 	bl	8006ef8 <__NVIC_SetPriority>
}
 800703e:	bf00      	nop
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	4603      	mov	r3, r0
 800704e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff ff31 	bl	8006ebc <__NVIC_EnableIRQ>
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff ffa2 	bl	8006fb4 <SysTick_Config>
 8007070:	4603      	mov	r3, r0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007086:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007088:	f7ff fac4 	bl	8006614 <HAL_GetTick>
 800708c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d008      	beq.n	80070ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2280      	movs	r2, #128	@ 0x80
 800709e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e052      	b.n	8007152 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0216 	bic.w	r2, r2, #22
 80070ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695a      	ldr	r2, [r3, #20]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <HAL_DMA_Abort+0x62>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0208 	bic.w	r2, r2, #8
 80070ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070fc:	e013      	b.n	8007126 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070fe:	f7ff fa89 	bl	8006614 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b05      	cmp	r3, #5
 800710a:	d90c      	bls.n	8007126 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2203      	movs	r2, #3
 8007116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e015      	b.n	8007152 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e4      	bne.n	80070fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007138:	223f      	movs	r2, #63	@ 0x3f
 800713a:	409a      	lsls	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d004      	beq.n	8007178 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2280      	movs	r2, #128	@ 0x80
 8007172:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e00c      	b.n	8007192 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2205      	movs	r2, #5
 800717c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b089      	sub	sp, #36	@ 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
 80071ba:	e159      	b.n	8007470 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80071bc:	2201      	movs	r2, #1
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	fa02 f303 	lsl.w	r3, r2, r3
 80071c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4013      	ands	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	f040 8148 	bne.w	800746a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d005      	beq.n	80071f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d130      	bne.n	8007254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	2203      	movs	r2, #3
 80071fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007202:	43db      	mvns	r3, r3
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	4013      	ands	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	4313      	orrs	r3, r2
 800721a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007228:	2201      	movs	r2, #1
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	fa02 f303 	lsl.w	r3, r2, r3
 8007230:	43db      	mvns	r3, r3
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	4013      	ands	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	091b      	lsrs	r3, r3, #4
 800723e:	f003 0201 	and.w	r2, r3, #1
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	fa02 f303 	lsl.w	r3, r2, r3
 8007248:	69ba      	ldr	r2, [r7, #24]
 800724a:	4313      	orrs	r3, r2
 800724c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	2b03      	cmp	r3, #3
 800725e:	d017      	beq.n	8007290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	2203      	movs	r2, #3
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	43db      	mvns	r3, r3
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	4013      	ands	r3, r2
 8007276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	fa02 f303 	lsl.w	r3, r2, r3
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	4313      	orrs	r3, r2
 8007288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	2b02      	cmp	r3, #2
 800729a:	d123      	bne.n	80072e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	08da      	lsrs	r2, r3, #3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3208      	adds	r2, #8
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	220f      	movs	r2, #15
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	43db      	mvns	r3, r3
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	4013      	ands	r3, r2
 80072be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	08da      	lsrs	r2, r3, #3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3208      	adds	r2, #8
 80072de:	69b9      	ldr	r1, [r7, #24]
 80072e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	2203      	movs	r2, #3
 80072f0:	fa02 f303 	lsl.w	r3, r2, r3
 80072f4:	43db      	mvns	r3, r3
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	4013      	ands	r3, r2
 80072fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f003 0203 	and.w	r2, r3, #3
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	4313      	orrs	r3, r2
 8007310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80a2 	beq.w	800746a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	4b57      	ldr	r3, [pc, #348]	@ (8007488 <HAL_GPIO_Init+0x2e8>)
 800732c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732e:	4a56      	ldr	r2, [pc, #344]	@ (8007488 <HAL_GPIO_Init+0x2e8>)
 8007330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007334:	6453      	str	r3, [r2, #68]	@ 0x44
 8007336:	4b54      	ldr	r3, [pc, #336]	@ (8007488 <HAL_GPIO_Init+0x2e8>)
 8007338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007342:	4a52      	ldr	r2, [pc, #328]	@ (800748c <HAL_GPIO_Init+0x2ec>)
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	089b      	lsrs	r3, r3, #2
 8007348:	3302      	adds	r3, #2
 800734a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800734e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	220f      	movs	r2, #15
 800735a:	fa02 f303 	lsl.w	r3, r2, r3
 800735e:	43db      	mvns	r3, r3
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	4013      	ands	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a49      	ldr	r2, [pc, #292]	@ (8007490 <HAL_GPIO_Init+0x2f0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d019      	beq.n	80073a2 <HAL_GPIO_Init+0x202>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a48      	ldr	r2, [pc, #288]	@ (8007494 <HAL_GPIO_Init+0x2f4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d013      	beq.n	800739e <HAL_GPIO_Init+0x1fe>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a47      	ldr	r2, [pc, #284]	@ (8007498 <HAL_GPIO_Init+0x2f8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00d      	beq.n	800739a <HAL_GPIO_Init+0x1fa>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a46      	ldr	r2, [pc, #280]	@ (800749c <HAL_GPIO_Init+0x2fc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d007      	beq.n	8007396 <HAL_GPIO_Init+0x1f6>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a45      	ldr	r2, [pc, #276]	@ (80074a0 <HAL_GPIO_Init+0x300>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d101      	bne.n	8007392 <HAL_GPIO_Init+0x1f2>
 800738e:	2304      	movs	r3, #4
 8007390:	e008      	b.n	80073a4 <HAL_GPIO_Init+0x204>
 8007392:	2307      	movs	r3, #7
 8007394:	e006      	b.n	80073a4 <HAL_GPIO_Init+0x204>
 8007396:	2303      	movs	r3, #3
 8007398:	e004      	b.n	80073a4 <HAL_GPIO_Init+0x204>
 800739a:	2302      	movs	r3, #2
 800739c:	e002      	b.n	80073a4 <HAL_GPIO_Init+0x204>
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <HAL_GPIO_Init+0x204>
 80073a2:	2300      	movs	r3, #0
 80073a4:	69fa      	ldr	r2, [r7, #28]
 80073a6:	f002 0203 	and.w	r2, r2, #3
 80073aa:	0092      	lsls	r2, r2, #2
 80073ac:	4093      	lsls	r3, r2
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073b4:	4935      	ldr	r1, [pc, #212]	@ (800748c <HAL_GPIO_Init+0x2ec>)
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	089b      	lsrs	r3, r3, #2
 80073ba:	3302      	adds	r3, #2
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073c2:	4b38      	ldr	r3, [pc, #224]	@ (80074a4 <HAL_GPIO_Init+0x304>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	43db      	mvns	r3, r3
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	4013      	ands	r3, r2
 80073d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80073e6:	4a2f      	ldr	r2, [pc, #188]	@ (80074a4 <HAL_GPIO_Init+0x304>)
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80073ec:	4b2d      	ldr	r3, [pc, #180]	@ (80074a4 <HAL_GPIO_Init+0x304>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	43db      	mvns	r3, r3
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	4013      	ands	r3, r2
 80073fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	4313      	orrs	r3, r2
 800740e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007410:	4a24      	ldr	r2, [pc, #144]	@ (80074a4 <HAL_GPIO_Init+0x304>)
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007416:	4b23      	ldr	r3, [pc, #140]	@ (80074a4 <HAL_GPIO_Init+0x304>)
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	43db      	mvns	r3, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	4013      	ands	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800743a:	4a1a      	ldr	r2, [pc, #104]	@ (80074a4 <HAL_GPIO_Init+0x304>)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007440:	4b18      	ldr	r3, [pc, #96]	@ (80074a4 <HAL_GPIO_Init+0x304>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	43db      	mvns	r3, r3
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	4013      	ands	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007464:	4a0f      	ldr	r2, [pc, #60]	@ (80074a4 <HAL_GPIO_Init+0x304>)
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	3301      	adds	r3, #1
 800746e:	61fb      	str	r3, [r7, #28]
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	2b0f      	cmp	r3, #15
 8007474:	f67f aea2 	bls.w	80071bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	3724      	adds	r7, #36	@ 0x24
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40023800 	.word	0x40023800
 800748c:	40013800 	.word	0x40013800
 8007490:	40020000 	.word	0x40020000
 8007494:	40020400 	.word	0x40020400
 8007498:	40020800 	.word	0x40020800
 800749c:	40020c00 	.word	0x40020c00
 80074a0:	40021000 	.word	0x40021000
 80074a4:	40013c00 	.word	0x40013c00

080074a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	807b      	strh	r3, [r7, #2]
 80074b4:	4613      	mov	r3, r2
 80074b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074b8:	787b      	ldrb	r3, [r7, #1]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074be:	887a      	ldrh	r2, [r7, #2]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074c4:	e003      	b.n	80074ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074c6:	887b      	ldrh	r3, [r7, #2]
 80074c8:	041a      	lsls	r2, r3, #16
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	619a      	str	r2, [r3, #24]
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074ec:	887a      	ldrh	r2, [r7, #2]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4013      	ands	r3, r2
 80074f2:	041a      	lsls	r2, r3, #16
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	43d9      	mvns	r1, r3
 80074f8:	887b      	ldrh	r3, [r7, #2]
 80074fa:	400b      	ands	r3, r1
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	619a      	str	r2, [r3, #24]
}
 8007502:	bf00      	nop
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
	...

08007510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800751a:	4b08      	ldr	r3, [pc, #32]	@ (800753c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800751c:	695a      	ldr	r2, [r3, #20]
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	4013      	ands	r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d006      	beq.n	8007534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007526:	4a05      	ldr	r2, [pc, #20]	@ (800753c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	4618      	mov	r0, r3
 8007530:	f7fb f870 	bl	8002614 <HAL_GPIO_EXTI_Callback>
  }
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40013c00 	.word	0x40013c00

08007540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e267      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d075      	beq.n	800764a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800755e:	4b88      	ldr	r3, [pc, #544]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 030c 	and.w	r3, r3, #12
 8007566:	2b04      	cmp	r3, #4
 8007568:	d00c      	beq.n	8007584 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800756a:	4b85      	ldr	r3, [pc, #532]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007572:	2b08      	cmp	r3, #8
 8007574:	d112      	bne.n	800759c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007576:	4b82      	ldr	r3, [pc, #520]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800757e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007582:	d10b      	bne.n	800759c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007584:	4b7e      	ldr	r3, [pc, #504]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d05b      	beq.n	8007648 <HAL_RCC_OscConfig+0x108>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d157      	bne.n	8007648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e242      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075a4:	d106      	bne.n	80075b4 <HAL_RCC_OscConfig+0x74>
 80075a6:	4b76      	ldr	r3, [pc, #472]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a75      	ldr	r2, [pc, #468]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80075ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	e01d      	b.n	80075f0 <HAL_RCC_OscConfig+0xb0>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075bc:	d10c      	bne.n	80075d8 <HAL_RCC_OscConfig+0x98>
 80075be:	4b70      	ldr	r3, [pc, #448]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a6f      	ldr	r2, [pc, #444]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80075c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a6c      	ldr	r2, [pc, #432]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80075d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	e00b      	b.n	80075f0 <HAL_RCC_OscConfig+0xb0>
 80075d8:	4b69      	ldr	r3, [pc, #420]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a68      	ldr	r2, [pc, #416]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80075de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	4b66      	ldr	r3, [pc, #408]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a65      	ldr	r2, [pc, #404]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80075ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d013      	beq.n	8007620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f8:	f7ff f80c 	bl	8006614 <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007600:	f7ff f808 	bl	8006614 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b64      	cmp	r3, #100	@ 0x64
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e207      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007612:	4b5b      	ldr	r3, [pc, #364]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f0      	beq.n	8007600 <HAL_RCC_OscConfig+0xc0>
 800761e:	e014      	b.n	800764a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007620:	f7fe fff8 	bl	8006614 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007628:	f7fe fff4 	bl	8006614 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b64      	cmp	r3, #100	@ 0x64
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e1f3      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763a:	4b51      	ldr	r3, [pc, #324]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0xe8>
 8007646:	e000      	b.n	800764a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d063      	beq.n	800771e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007656:	4b4a      	ldr	r3, [pc, #296]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 030c 	and.w	r3, r3, #12
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007662:	4b47      	ldr	r3, [pc, #284]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800766a:	2b08      	cmp	r3, #8
 800766c:	d11c      	bne.n	80076a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800766e:	4b44      	ldr	r3, [pc, #272]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d116      	bne.n	80076a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800767a:	4b41      	ldr	r3, [pc, #260]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d005      	beq.n	8007692 <HAL_RCC_OscConfig+0x152>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d001      	beq.n	8007692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e1c7      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007692:	4b3b      	ldr	r3, [pc, #236]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	4937      	ldr	r1, [pc, #220]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076a6:	e03a      	b.n	800771e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d020      	beq.n	80076f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076b0:	4b34      	ldr	r3, [pc, #208]	@ (8007784 <HAL_RCC_OscConfig+0x244>)
 80076b2:	2201      	movs	r2, #1
 80076b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b6:	f7fe ffad 	bl	8006614 <HAL_GetTick>
 80076ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076bc:	e008      	b.n	80076d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076be:	f7fe ffa9 	bl	8006614 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e1a8      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d0f0      	beq.n	80076be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076dc:	4b28      	ldr	r3, [pc, #160]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	4925      	ldr	r1, [pc, #148]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	600b      	str	r3, [r1, #0]
 80076f0:	e015      	b.n	800771e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076f2:	4b24      	ldr	r3, [pc, #144]	@ (8007784 <HAL_RCC_OscConfig+0x244>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f8:	f7fe ff8c 	bl	8006614 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007700:	f7fe ff88 	bl	8006614 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e187      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007712:	4b1b      	ldr	r3, [pc, #108]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f0      	bne.n	8007700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d036      	beq.n	8007798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d016      	beq.n	8007760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007732:	4b15      	ldr	r3, [pc, #84]	@ (8007788 <HAL_RCC_OscConfig+0x248>)
 8007734:	2201      	movs	r2, #1
 8007736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007738:	f7fe ff6c 	bl	8006614 <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007740:	f7fe ff68 	bl	8006614 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e167      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007752:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <HAL_RCC_OscConfig+0x240>)
 8007754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0f0      	beq.n	8007740 <HAL_RCC_OscConfig+0x200>
 800775e:	e01b      	b.n	8007798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007760:	4b09      	ldr	r3, [pc, #36]	@ (8007788 <HAL_RCC_OscConfig+0x248>)
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007766:	f7fe ff55 	bl	8006614 <HAL_GetTick>
 800776a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800776c:	e00e      	b.n	800778c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800776e:	f7fe ff51 	bl	8006614 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d907      	bls.n	800778c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e150      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
 8007780:	40023800 	.word	0x40023800
 8007784:	42470000 	.word	0x42470000
 8007788:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800778c:	4b88      	ldr	r3, [pc, #544]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 800778e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1ea      	bne.n	800776e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8097 	beq.w	80078d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077aa:	4b81      	ldr	r3, [pc, #516]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10f      	bne.n	80077d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077b6:	2300      	movs	r3, #0
 80077b8:	60bb      	str	r3, [r7, #8]
 80077ba:	4b7d      	ldr	r3, [pc, #500]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 80077bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077be:	4a7c      	ldr	r2, [pc, #496]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 80077c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80077c6:	4b7a      	ldr	r3, [pc, #488]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ce:	60bb      	str	r3, [r7, #8]
 80077d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077d2:	2301      	movs	r3, #1
 80077d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077d6:	4b77      	ldr	r3, [pc, #476]	@ (80079b4 <HAL_RCC_OscConfig+0x474>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d118      	bne.n	8007814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077e2:	4b74      	ldr	r3, [pc, #464]	@ (80079b4 <HAL_RCC_OscConfig+0x474>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a73      	ldr	r2, [pc, #460]	@ (80079b4 <HAL_RCC_OscConfig+0x474>)
 80077e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077ee:	f7fe ff11 	bl	8006614 <HAL_GetTick>
 80077f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077f4:	e008      	b.n	8007808 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077f6:	f7fe ff0d 	bl	8006614 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b02      	cmp	r3, #2
 8007802:	d901      	bls.n	8007808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e10c      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007808:	4b6a      	ldr	r3, [pc, #424]	@ (80079b4 <HAL_RCC_OscConfig+0x474>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0f0      	beq.n	80077f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d106      	bne.n	800782a <HAL_RCC_OscConfig+0x2ea>
 800781c:	4b64      	ldr	r3, [pc, #400]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 800781e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007820:	4a63      	ldr	r2, [pc, #396]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 8007822:	f043 0301 	orr.w	r3, r3, #1
 8007826:	6713      	str	r3, [r2, #112]	@ 0x70
 8007828:	e01c      	b.n	8007864 <HAL_RCC_OscConfig+0x324>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b05      	cmp	r3, #5
 8007830:	d10c      	bne.n	800784c <HAL_RCC_OscConfig+0x30c>
 8007832:	4b5f      	ldr	r3, [pc, #380]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 8007834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007836:	4a5e      	ldr	r2, [pc, #376]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 8007838:	f043 0304 	orr.w	r3, r3, #4
 800783c:	6713      	str	r3, [r2, #112]	@ 0x70
 800783e:	4b5c      	ldr	r3, [pc, #368]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 8007840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007842:	4a5b      	ldr	r2, [pc, #364]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 8007844:	f043 0301 	orr.w	r3, r3, #1
 8007848:	6713      	str	r3, [r2, #112]	@ 0x70
 800784a:	e00b      	b.n	8007864 <HAL_RCC_OscConfig+0x324>
 800784c:	4b58      	ldr	r3, [pc, #352]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 800784e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007850:	4a57      	ldr	r2, [pc, #348]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	6713      	str	r3, [r2, #112]	@ 0x70
 8007858:	4b55      	ldr	r3, [pc, #340]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 800785a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785c:	4a54      	ldr	r2, [pc, #336]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 800785e:	f023 0304 	bic.w	r3, r3, #4
 8007862:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d015      	beq.n	8007898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800786c:	f7fe fed2 	bl	8006614 <HAL_GetTick>
 8007870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007872:	e00a      	b.n	800788a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007874:	f7fe fece 	bl	8006614 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007882:	4293      	cmp	r3, r2
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e0cb      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800788a:	4b49      	ldr	r3, [pc, #292]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0ee      	beq.n	8007874 <HAL_RCC_OscConfig+0x334>
 8007896:	e014      	b.n	80078c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007898:	f7fe febc 	bl	8006614 <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800789e:	e00a      	b.n	80078b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a0:	f7fe feb8 	bl	8006614 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e0b5      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078b6:	4b3e      	ldr	r3, [pc, #248]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 80078b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1ee      	bne.n	80078a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d105      	bne.n	80078d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078c8:	4b39      	ldr	r3, [pc, #228]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 80078ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078cc:	4a38      	ldr	r2, [pc, #224]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 80078ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 80a1 	beq.w	8007a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078de:	4b34      	ldr	r3, [pc, #208]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 030c 	and.w	r3, r3, #12
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	d05c      	beq.n	80079a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d141      	bne.n	8007976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f2:	4b31      	ldr	r3, [pc, #196]	@ (80079b8 <HAL_RCC_OscConfig+0x478>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f8:	f7fe fe8c 	bl	8006614 <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007900:	f7fe fe88 	bl	8006614 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e087      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007912:	4b27      	ldr	r3, [pc, #156]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1f0      	bne.n	8007900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69da      	ldr	r2, [r3, #28]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792c:	019b      	lsls	r3, r3, #6
 800792e:	431a      	orrs	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007934:	085b      	lsrs	r3, r3, #1
 8007936:	3b01      	subs	r3, #1
 8007938:	041b      	lsls	r3, r3, #16
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007940:	061b      	lsls	r3, r3, #24
 8007942:	491b      	ldr	r1, [pc, #108]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 8007944:	4313      	orrs	r3, r2
 8007946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007948:	4b1b      	ldr	r3, [pc, #108]	@ (80079b8 <HAL_RCC_OscConfig+0x478>)
 800794a:	2201      	movs	r2, #1
 800794c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800794e:	f7fe fe61 	bl	8006614 <HAL_GetTick>
 8007952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007954:	e008      	b.n	8007968 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007956:	f7fe fe5d 	bl	8006614 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d901      	bls.n	8007968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e05c      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007968:	4b11      	ldr	r3, [pc, #68]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0f0      	beq.n	8007956 <HAL_RCC_OscConfig+0x416>
 8007974:	e054      	b.n	8007a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007976:	4b10      	ldr	r3, [pc, #64]	@ (80079b8 <HAL_RCC_OscConfig+0x478>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800797c:	f7fe fe4a 	bl	8006614 <HAL_GetTick>
 8007980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007982:	e008      	b.n	8007996 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007984:	f7fe fe46 	bl	8006614 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e045      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007996:	4b06      	ldr	r3, [pc, #24]	@ (80079b0 <HAL_RCC_OscConfig+0x470>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1f0      	bne.n	8007984 <HAL_RCC_OscConfig+0x444>
 80079a2:	e03d      	b.n	8007a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d107      	bne.n	80079bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e038      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40007000 	.word	0x40007000
 80079b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079bc:	4b1b      	ldr	r3, [pc, #108]	@ (8007a2c <HAL_RCC_OscConfig+0x4ec>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d028      	beq.n	8007a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d121      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d11a      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80079ec:	4013      	ands	r3, r2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80079f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d111      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	3b01      	subs	r3, #1
 8007a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d107      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d001      	beq.n	8007a20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e000      	b.n	8007a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	40023800 	.word	0x40023800

08007a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e0cc      	b.n	8007bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a44:	4b68      	ldr	r3, [pc, #416]	@ (8007be8 <HAL_RCC_ClockConfig+0x1b8>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0307 	and.w	r3, r3, #7
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d90c      	bls.n	8007a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a52:	4b65      	ldr	r3, [pc, #404]	@ (8007be8 <HAL_RCC_ClockConfig+0x1b8>)
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a5a:	4b63      	ldr	r3, [pc, #396]	@ (8007be8 <HAL_RCC_ClockConfig+0x1b8>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d001      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0b8      	b.n	8007bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d020      	beq.n	8007aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a84:	4b59      	ldr	r3, [pc, #356]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	4a58      	ldr	r2, [pc, #352]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007a8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007a8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0308 	and.w	r3, r3, #8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a9c:	4b53      	ldr	r3, [pc, #332]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	4a52      	ldr	r2, [pc, #328]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007aa2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007aa8:	4b50      	ldr	r3, [pc, #320]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	494d      	ldr	r1, [pc, #308]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d044      	beq.n	8007b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d107      	bne.n	8007ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ace:	4b47      	ldr	r3, [pc, #284]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d119      	bne.n	8007b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e07f      	b.n	8007bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d003      	beq.n	8007aee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d107      	bne.n	8007afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aee:	4b3f      	ldr	r3, [pc, #252]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d109      	bne.n	8007b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e06f      	b.n	8007bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007afe:	4b3b      	ldr	r3, [pc, #236]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e067      	b.n	8007bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b0e:	4b37      	ldr	r3, [pc, #220]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f023 0203 	bic.w	r2, r3, #3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	4934      	ldr	r1, [pc, #208]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b20:	f7fe fd78 	bl	8006614 <HAL_GetTick>
 8007b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b26:	e00a      	b.n	8007b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b28:	f7fe fd74 	bl	8006614 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e04f      	b.n	8007bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 020c 	and.w	r2, r3, #12
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d1eb      	bne.n	8007b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b50:	4b25      	ldr	r3, [pc, #148]	@ (8007be8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d20c      	bcs.n	8007b78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b5e:	4b22      	ldr	r3, [pc, #136]	@ (8007be8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	b2d2      	uxtb	r2, r2
 8007b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b66:	4b20      	ldr	r3, [pc, #128]	@ (8007be8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d001      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e032      	b.n	8007bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b84:	4b19      	ldr	r3, [pc, #100]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	4916      	ldr	r1, [pc, #88]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ba2:	4b12      	ldr	r3, [pc, #72]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	490e      	ldr	r1, [pc, #56]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007bb6:	f000 f821 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007bec <HAL_RCC_ClockConfig+0x1bc>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	091b      	lsrs	r3, r3, #4
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	490a      	ldr	r1, [pc, #40]	@ (8007bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8007bc8:	5ccb      	ldrb	r3, [r1, r3]
 8007bca:	fa22 f303 	lsr.w	r3, r2, r3
 8007bce:	4a09      	ldr	r2, [pc, #36]	@ (8007bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007bd2:	4b09      	ldr	r3, [pc, #36]	@ (8007bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fcd8 	bl	800658c <HAL_InitTick>

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	40023c00 	.word	0x40023c00
 8007bec:	40023800 	.word	0x40023800
 8007bf0:	0800f70c 	.word	0x0800f70c
 8007bf4:	2000002c 	.word	0x2000002c
 8007bf8:	20000064 	.word	0x20000064

08007bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c00:	b090      	sub	sp, #64	@ 0x40
 8007c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c14:	4b59      	ldr	r3, [pc, #356]	@ (8007d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f003 030c 	and.w	r3, r3, #12
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d00d      	beq.n	8007c3c <HAL_RCC_GetSysClockFreq+0x40>
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	f200 80a1 	bhi.w	8007d68 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <HAL_RCC_GetSysClockFreq+0x34>
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d003      	beq.n	8007c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c2e:	e09b      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c30:	4b53      	ldr	r3, [pc, #332]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c34:	e09b      	b.n	8007d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c36:	4b53      	ldr	r3, [pc, #332]	@ (8007d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c3a:	e098      	b.n	8007d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8007d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c46:	4b4d      	ldr	r3, [pc, #308]	@ (8007d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d028      	beq.n	8007ca4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c52:	4b4a      	ldr	r3, [pc, #296]	@ (8007d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	099b      	lsrs	r3, r3, #6
 8007c58:	2200      	movs	r2, #0
 8007c5a:	623b      	str	r3, [r7, #32]
 8007c5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007c64:	2100      	movs	r1, #0
 8007c66:	4b47      	ldr	r3, [pc, #284]	@ (8007d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c68:	fb03 f201 	mul.w	r2, r3, r1
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	fb00 f303 	mul.w	r3, r0, r3
 8007c72:	4413      	add	r3, r2
 8007c74:	4a43      	ldr	r2, [pc, #268]	@ (8007d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c76:	fba0 1202 	umull	r1, r2, r0, r2
 8007c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c7c:	460a      	mov	r2, r1
 8007c7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c82:	4413      	add	r3, r2
 8007c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c88:	2200      	movs	r2, #0
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	61fa      	str	r2, [r7, #28]
 8007c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007c96:	f7f8 ffdf 	bl	8000c58 <__aeabi_uldivmod>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ca2:	e053      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ca4:	4b35      	ldr	r3, [pc, #212]	@ (8007d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	099b      	lsrs	r3, r3, #6
 8007caa:	2200      	movs	r2, #0
 8007cac:	613b      	str	r3, [r7, #16]
 8007cae:	617a      	str	r2, [r7, #20]
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007cb6:	f04f 0b00 	mov.w	fp, #0
 8007cba:	4652      	mov	r2, sl
 8007cbc:	465b      	mov	r3, fp
 8007cbe:	f04f 0000 	mov.w	r0, #0
 8007cc2:	f04f 0100 	mov.w	r1, #0
 8007cc6:	0159      	lsls	r1, r3, #5
 8007cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ccc:	0150      	lsls	r0, r2, #5
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	ebb2 080a 	subs.w	r8, r2, sl
 8007cd6:	eb63 090b 	sbc.w	r9, r3, fp
 8007cda:	f04f 0200 	mov.w	r2, #0
 8007cde:	f04f 0300 	mov.w	r3, #0
 8007ce2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007ce6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007cea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007cee:	ebb2 0408 	subs.w	r4, r2, r8
 8007cf2:	eb63 0509 	sbc.w	r5, r3, r9
 8007cf6:	f04f 0200 	mov.w	r2, #0
 8007cfa:	f04f 0300 	mov.w	r3, #0
 8007cfe:	00eb      	lsls	r3, r5, #3
 8007d00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d04:	00e2      	lsls	r2, r4, #3
 8007d06:	4614      	mov	r4, r2
 8007d08:	461d      	mov	r5, r3
 8007d0a:	eb14 030a 	adds.w	r3, r4, sl
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	eb45 030b 	adc.w	r3, r5, fp
 8007d14:	607b      	str	r3, [r7, #4]
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d22:	4629      	mov	r1, r5
 8007d24:	028b      	lsls	r3, r1, #10
 8007d26:	4621      	mov	r1, r4
 8007d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	028a      	lsls	r2, r1, #10
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d36:	2200      	movs	r2, #0
 8007d38:	60bb      	str	r3, [r7, #8]
 8007d3a:	60fa      	str	r2, [r7, #12]
 8007d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d40:	f7f8 ff8a 	bl	8000c58 <__aeabi_uldivmod>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4613      	mov	r3, r2
 8007d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	0c1b      	lsrs	r3, r3, #16
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	3301      	adds	r3, #1
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d66:	e002      	b.n	8007d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d68:	4b05      	ldr	r3, [pc, #20]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3740      	adds	r7, #64	@ 0x40
 8007d74:	46bd      	mov	sp, r7
 8007d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40023800 	.word	0x40023800
 8007d80:	00f42400 	.word	0x00f42400
 8007d84:	017d7840 	.word	0x017d7840

08007d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d8c:	4b03      	ldr	r3, [pc, #12]	@ (8007d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	2000002c 	.word	0x2000002c

08007da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007da4:	f7ff fff0 	bl	8007d88 <HAL_RCC_GetHCLKFreq>
 8007da8:	4602      	mov	r2, r0
 8007daa:	4b05      	ldr	r3, [pc, #20]	@ (8007dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	0a9b      	lsrs	r3, r3, #10
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	4903      	ldr	r1, [pc, #12]	@ (8007dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007db6:	5ccb      	ldrb	r3, [r1, r3]
 8007db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40023800 	.word	0x40023800
 8007dc4:	0800f71c 	.word	0x0800f71c

08007dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007dcc:	f7ff ffdc 	bl	8007d88 <HAL_RCC_GetHCLKFreq>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	4b05      	ldr	r3, [pc, #20]	@ (8007de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	0b5b      	lsrs	r3, r3, #13
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	4903      	ldr	r1, [pc, #12]	@ (8007dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dde:	5ccb      	ldrb	r3, [r1, r3]
 8007de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	40023800 	.word	0x40023800
 8007dec:	0800f71c 	.word	0x0800f71c

08007df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e07b      	b.n	8007efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d108      	bne.n	8007e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e12:	d009      	beq.n	8007e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	61da      	str	r2, [r3, #28]
 8007e1a:	e005      	b.n	8007e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fc fe72 	bl	8004b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eac:	ea42 0103 	orr.w	r1, r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	0c1b      	lsrs	r3, r3, #16
 8007ec6:	f003 0104 	and.w	r1, r3, #4
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ece:	f003 0210 	and.w	r2, r3, #16
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b088      	sub	sp, #32
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	603b      	str	r3, [r7, #0]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f12:	f7fe fb7f 	bl	8006614 <HAL_GetTick>
 8007f16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007f18:	88fb      	ldrh	r3, [r7, #6]
 8007f1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d001      	beq.n	8007f2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e12a      	b.n	8008182 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <HAL_SPI_Transmit+0x36>
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e122      	b.n	8008182 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <HAL_SPI_Transmit+0x48>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e11b      	b.n	8008182 <HAL_SPI_Transmit+0x280>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2203      	movs	r2, #3
 8007f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	88fa      	ldrh	r2, [r7, #6]
 8007f6a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	88fa      	ldrh	r2, [r7, #6]
 8007f70:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f98:	d10f      	bne.n	8007fba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc4:	2b40      	cmp	r3, #64	@ 0x40
 8007fc6:	d007      	beq.n	8007fd8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fe0:	d152      	bne.n	8008088 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_SPI_Transmit+0xee>
 8007fea:	8b7b      	ldrh	r3, [r7, #26]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d145      	bne.n	800807c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff4:	881a      	ldrh	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008000:	1c9a      	adds	r2, r3, #2
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800800a:	b29b      	uxth	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008014:	e032      	b.n	800807c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b02      	cmp	r3, #2
 8008022:	d112      	bne.n	800804a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008028:	881a      	ldrh	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008034:	1c9a      	adds	r2, r3, #2
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800803e:	b29b      	uxth	r3, r3
 8008040:	3b01      	subs	r3, #1
 8008042:	b29a      	uxth	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008048:	e018      	b.n	800807c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800804a:	f7fe fae3 	bl	8006614 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d803      	bhi.n	8008062 <HAL_SPI_Transmit+0x160>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d102      	bne.n	8008068 <HAL_SPI_Transmit+0x166>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d109      	bne.n	800807c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e082      	b.n	8008182 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1c7      	bne.n	8008016 <HAL_SPI_Transmit+0x114>
 8008086:	e053      	b.n	8008130 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <HAL_SPI_Transmit+0x194>
 8008090:	8b7b      	ldrh	r3, [r7, #26]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d147      	bne.n	8008126 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	330c      	adds	r3, #12
 80080a0:	7812      	ldrb	r2, [r2, #0]
 80080a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	3b01      	subs	r3, #1
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080bc:	e033      	b.n	8008126 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d113      	bne.n	80080f4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	330c      	adds	r3, #12
 80080d6:	7812      	ldrb	r2, [r2, #0]
 80080d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80080f2:	e018      	b.n	8008126 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080f4:	f7fe fa8e 	bl	8006614 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d803      	bhi.n	800810c <HAL_SPI_Transmit+0x20a>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810a:	d102      	bne.n	8008112 <HAL_SPI_Transmit+0x210>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e02d      	b.n	8008182 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800812a:	b29b      	uxth	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1c6      	bne.n	80080be <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 fbd9 	bl	80088ec <SPI_EndRxTxTransaction>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2220      	movs	r2, #32
 8008144:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e000      	b.n	8008182 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008180:	2300      	movs	r3, #0
  }
}
 8008182:	4618      	mov	r0, r3
 8008184:	3720      	adds	r7, #32
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b088      	sub	sp, #32
 800818e:	af02      	add	r7, sp, #8
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d001      	beq.n	80081aa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80081a6:	2302      	movs	r3, #2
 80081a8:	e104      	b.n	80083b4 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_SPI_Receive+0x2c>
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e0fc      	b.n	80083b4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081c2:	d112      	bne.n	80081ea <HAL_SPI_Receive+0x60>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10e      	bne.n	80081ea <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2204      	movs	r2, #4
 80081d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	4613      	mov	r3, r2
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f8eb 	bl	80083bc <HAL_SPI_TransmitReceive>
 80081e6:	4603      	mov	r3, r0
 80081e8:	e0e4      	b.n	80083b4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081ea:	f7fe fa13 	bl	8006614 <HAL_GetTick>
 80081ee:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_SPI_Receive+0x74>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e0da      	b.n	80083b4 <HAL_SPI_Receive+0x22a>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2204      	movs	r2, #4
 800820a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	88fa      	ldrh	r2, [r7, #6]
 800821e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	88fa      	ldrh	r2, [r7, #6]
 8008224:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800824c:	d10f      	bne.n	800826e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800825c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800826c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008278:	2b40      	cmp	r3, #64	@ 0x40
 800827a:	d007      	beq.n	800828c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800828a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d170      	bne.n	8008376 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008294:	e035      	b.n	8008302 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d115      	bne.n	80082d0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f103 020c 	add.w	r2, r3, #12
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b0:	7812      	ldrb	r2, [r2, #0]
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80082ce:	e018      	b.n	8008302 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082d0:	f7fe f9a0 	bl	8006614 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d803      	bhi.n	80082e8 <HAL_SPI_Receive+0x15e>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e6:	d102      	bne.n	80082ee <HAL_SPI_Receive+0x164>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d109      	bne.n	8008302 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e058      	b.n	80083b4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008306:	b29b      	uxth	r3, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1c4      	bne.n	8008296 <HAL_SPI_Receive+0x10c>
 800830c:	e038      	b.n	8008380 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b01      	cmp	r3, #1
 800831a:	d113      	bne.n	8008344 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008326:	b292      	uxth	r2, r2
 8008328:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	1c9a      	adds	r2, r3, #2
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008342:	e018      	b.n	8008376 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008344:	f7fe f966 	bl	8006614 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d803      	bhi.n	800835c <HAL_SPI_Receive+0x1d2>
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d102      	bne.n	8008362 <HAL_SPI_Receive+0x1d8>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d109      	bne.n	8008376 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e01e      	b.n	80083b4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800837a:	b29b      	uxth	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1c6      	bne.n	800830e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 fa4b 	bl	8008820 <SPI_EndRxTransaction>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2220      	movs	r2, #32
 8008394:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80083b2:	2300      	movs	r3, #0
  }
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08a      	sub	sp, #40	@ 0x28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083ca:	2301      	movs	r3, #1
 80083cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083ce:	f7fe f921 	bl	8006614 <HAL_GetTick>
 80083d2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083da:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80083e2:	887b      	ldrh	r3, [r7, #2]
 80083e4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083e6:	7ffb      	ldrb	r3, [r7, #31]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d00c      	beq.n	8008406 <HAL_SPI_TransmitReceive+0x4a>
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083f2:	d106      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d102      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x46>
 80083fc:	7ffb      	ldrb	r3, [r7, #31]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d001      	beq.n	8008406 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008402:	2302      	movs	r3, #2
 8008404:	e17f      	b.n	8008706 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <HAL_SPI_TransmitReceive+0x5c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <HAL_SPI_TransmitReceive+0x5c>
 8008412:	887b      	ldrh	r3, [r7, #2]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e174      	b.n	8008706 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_SPI_TransmitReceive+0x6e>
 8008426:	2302      	movs	r3, #2
 8008428:	e16d      	b.n	8008706 <HAL_SPI_TransmitReceive+0x34a>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b04      	cmp	r3, #4
 800843c:	d003      	beq.n	8008446 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2205      	movs	r2, #5
 8008442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	887a      	ldrh	r2, [r7, #2]
 8008456:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	887a      	ldrh	r2, [r7, #2]
 800845c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	887a      	ldrh	r2, [r7, #2]
 8008468:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	887a      	ldrh	r2, [r7, #2]
 800846e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008486:	2b40      	cmp	r3, #64	@ 0x40
 8008488:	d007      	beq.n	800849a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008498:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084a2:	d17e      	bne.n	80085a2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <HAL_SPI_TransmitReceive+0xf6>
 80084ac:	8afb      	ldrh	r3, [r7, #22]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d16c      	bne.n	800858c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b6:	881a      	ldrh	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c2:	1c9a      	adds	r2, r3, #2
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084d6:	e059      	b.n	800858c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d11b      	bne.n	800851e <HAL_SPI_TransmitReceive+0x162>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d016      	beq.n	800851e <HAL_SPI_TransmitReceive+0x162>
 80084f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d113      	bne.n	800851e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fa:	881a      	ldrh	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008506:	1c9a      	adds	r2, r3, #2
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008510:	b29b      	uxth	r3, r3
 8008512:	3b01      	subs	r3, #1
 8008514:	b29a      	uxth	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b01      	cmp	r3, #1
 800852a:	d119      	bne.n	8008560 <HAL_SPI_TransmitReceive+0x1a4>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d014      	beq.n	8008560 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008540:	b292      	uxth	r2, r2
 8008542:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008548:	1c9a      	adds	r2, r3, #2
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800855c:	2301      	movs	r3, #1
 800855e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008560:	f7fe f858 	bl	8006614 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800856c:	429a      	cmp	r2, r3
 800856e:	d80d      	bhi.n	800858c <HAL_SPI_TransmitReceive+0x1d0>
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d009      	beq.n	800858c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e0bc      	b.n	8008706 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008590:	b29b      	uxth	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1a0      	bne.n	80084d8 <HAL_SPI_TransmitReceive+0x11c>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d19b      	bne.n	80084d8 <HAL_SPI_TransmitReceive+0x11c>
 80085a0:	e082      	b.n	80086a8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x1f4>
 80085aa:	8afb      	ldrh	r3, [r7, #22]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d171      	bne.n	8008694 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	330c      	adds	r3, #12
 80085ba:	7812      	ldrb	r2, [r2, #0]
 80085bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085d6:	e05d      	b.n	8008694 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d11c      	bne.n	8008620 <HAL_SPI_TransmitReceive+0x264>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d017      	beq.n	8008620 <HAL_SPI_TransmitReceive+0x264>
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d114      	bne.n	8008620 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	330c      	adds	r3, #12
 8008600:	7812      	ldrb	r2, [r2, #0]
 8008602:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008612:	b29b      	uxth	r3, r3
 8008614:	3b01      	subs	r3, #1
 8008616:	b29a      	uxth	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b01      	cmp	r3, #1
 800862c:	d119      	bne.n	8008662 <HAL_SPI_TransmitReceive+0x2a6>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d014      	beq.n	8008662 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008654:	b29b      	uxth	r3, r3
 8008656:	3b01      	subs	r3, #1
 8008658:	b29a      	uxth	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800865e:	2301      	movs	r3, #1
 8008660:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008662:	f7fd ffd7 	bl	8006614 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800866e:	429a      	cmp	r2, r3
 8008670:	d803      	bhi.n	800867a <HAL_SPI_TransmitReceive+0x2be>
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008678:	d102      	bne.n	8008680 <HAL_SPI_TransmitReceive+0x2c4>
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e038      	b.n	8008706 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008698:	b29b      	uxth	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d19c      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0x21c>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d197      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086a8:	6a3a      	ldr	r2, [r7, #32]
 80086aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f91d 	bl	80088ec <SPI_EndRxTxTransaction>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d008      	beq.n	80086ca <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2220      	movs	r2, #32
 80086bc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e01d      	b.n	8008706 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086d2:	2300      	movs	r3, #0
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	613b      	str	r3, [r7, #16]
 80086e6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e000      	b.n	8008706 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008704:	2300      	movs	r3, #0
  }
}
 8008706:	4618      	mov	r0, r3
 8008708:	3728      	adds	r7, #40	@ 0x28
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	4613      	mov	r3, r2
 800871e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008720:	f7fd ff78 	bl	8006614 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	1a9b      	subs	r3, r3, r2
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	4413      	add	r3, r2
 800872e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008730:	f7fd ff70 	bl	8006614 <HAL_GetTick>
 8008734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008736:	4b39      	ldr	r3, [pc, #228]	@ (800881c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	015b      	lsls	r3, r3, #5
 800873c:	0d1b      	lsrs	r3, r3, #20
 800873e:	69fa      	ldr	r2, [r7, #28]
 8008740:	fb02 f303 	mul.w	r3, r2, r3
 8008744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008746:	e055      	b.n	80087f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874e:	d051      	beq.n	80087f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008750:	f7fd ff60 	bl	8006614 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	429a      	cmp	r2, r3
 800875e:	d902      	bls.n	8008766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d13d      	bne.n	80087e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800877e:	d111      	bne.n	80087a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008788:	d004      	beq.n	8008794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008792:	d107      	bne.n	80087a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ac:	d10f      	bne.n	80087ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e018      	b.n	8008814 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	e002      	b.n	80087f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689a      	ldr	r2, [r3, #8]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	4013      	ands	r3, r2
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	429a      	cmp	r2, r3
 8008802:	bf0c      	ite	eq
 8008804:	2301      	moveq	r3, #1
 8008806:	2300      	movne	r3, #0
 8008808:	b2db      	uxtb	r3, r3
 800880a:	461a      	mov	r2, r3
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	429a      	cmp	r2, r3
 8008810:	d19a      	bne.n	8008748 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3720      	adds	r7, #32
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	2000002c 	.word	0x2000002c

08008820 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af02      	add	r7, sp, #8
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008834:	d111      	bne.n	800885a <SPI_EndRxTransaction+0x3a>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800883e:	d004      	beq.n	800884a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008848:	d107      	bne.n	800885a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008858:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008862:	d12a      	bne.n	80088ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800886c:	d012      	beq.n	8008894 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2200      	movs	r2, #0
 8008876:	2180      	movs	r1, #128	@ 0x80
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7ff ff49 	bl	8008710 <SPI_WaitFlagStateUntilTimeout>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d02d      	beq.n	80088e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008888:	f043 0220 	orr.w	r2, r3, #32
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e026      	b.n	80088e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	2101      	movs	r1, #1
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7ff ff36 	bl	8008710 <SPI_WaitFlagStateUntilTimeout>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d01a      	beq.n	80088e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ae:	f043 0220 	orr.w	r2, r3, #32
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e013      	b.n	80088e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2200      	movs	r2, #0
 80088c2:	2101      	movs	r1, #1
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f7ff ff23 	bl	8008710 <SPI_WaitFlagStateUntilTimeout>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d007      	beq.n	80088e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d4:	f043 0220 	orr.w	r2, r3, #32
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e000      	b.n	80088e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2201      	movs	r2, #1
 8008900:	2102      	movs	r1, #2
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff ff04 	bl	8008710 <SPI_WaitFlagStateUntilTimeout>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d007      	beq.n	800891e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008912:	f043 0220 	orr.w	r2, r3, #32
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e032      	b.n	8008984 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800891e:	4b1b      	ldr	r3, [pc, #108]	@ (800898c <SPI_EndRxTxTransaction+0xa0>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a1b      	ldr	r2, [pc, #108]	@ (8008990 <SPI_EndRxTxTransaction+0xa4>)
 8008924:	fba2 2303 	umull	r2, r3, r2, r3
 8008928:	0d5b      	lsrs	r3, r3, #21
 800892a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800893c:	d112      	bne.n	8008964 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2200      	movs	r2, #0
 8008946:	2180      	movs	r1, #128	@ 0x80
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff fee1 	bl	8008710 <SPI_WaitFlagStateUntilTimeout>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d016      	beq.n	8008982 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008958:	f043 0220 	orr.w	r2, r3, #32
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e00f      	b.n	8008984 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00a      	beq.n	8008980 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	3b01      	subs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897a:	2b80      	cmp	r3, #128	@ 0x80
 800897c:	d0f2      	beq.n	8008964 <SPI_EndRxTxTransaction+0x78>
 800897e:	e000      	b.n	8008982 <SPI_EndRxTxTransaction+0x96>
        break;
 8008980:	bf00      	nop
  }

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	2000002c 	.word	0x2000002c
 8008990:	165e9f81 	.word	0x165e9f81

08008994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e041      	b.n	8008a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d106      	bne.n	80089c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7fc f8fe 	bl	8004bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3304      	adds	r3, #4
 80089d0:	4619      	mov	r1, r3
 80089d2:	4610      	mov	r0, r2
 80089d4:	f000 fd7a 	bl	80094cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e041      	b.n	8008ac8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d106      	bne.n	8008a5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f839 	bl	8008ad0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2202      	movs	r2, #2
 8008a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4610      	mov	r0, r2
 8008a72:	f000 fd2b 	bl	80094cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d109      	bne.n	8008b08 <HAL_TIM_PWM_Start+0x24>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	bf14      	ite	ne
 8008b00:	2301      	movne	r3, #1
 8008b02:	2300      	moveq	r3, #0
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	e022      	b.n	8008b4e <HAL_TIM_PWM_Start+0x6a>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	d109      	bne.n	8008b22 <HAL_TIM_PWM_Start+0x3e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	bf14      	ite	ne
 8008b1a:	2301      	movne	r3, #1
 8008b1c:	2300      	moveq	r3, #0
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	e015      	b.n	8008b4e <HAL_TIM_PWM_Start+0x6a>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d109      	bne.n	8008b3c <HAL_TIM_PWM_Start+0x58>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	bf14      	ite	ne
 8008b34:	2301      	movne	r3, #1
 8008b36:	2300      	moveq	r3, #0
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	e008      	b.n	8008b4e <HAL_TIM_PWM_Start+0x6a>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	bf14      	ite	ne
 8008b48:	2301      	movne	r3, #1
 8008b4a:	2300      	moveq	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e068      	b.n	8008c28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d104      	bne.n	8008b66 <HAL_TIM_PWM_Start+0x82>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b64:	e013      	b.n	8008b8e <HAL_TIM_PWM_Start+0xaa>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	d104      	bne.n	8008b76 <HAL_TIM_PWM_Start+0x92>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b74:	e00b      	b.n	8008b8e <HAL_TIM_PWM_Start+0xaa>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d104      	bne.n	8008b86 <HAL_TIM_PWM_Start+0xa2>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b84:	e003      	b.n	8008b8e <HAL_TIM_PWM_Start+0xaa>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2201      	movs	r2, #1
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 ff44 	bl	8009a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a23      	ldr	r2, [pc, #140]	@ (8008c30 <HAL_TIM_PWM_Start+0x14c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d107      	bne.n	8008bb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a1d      	ldr	r2, [pc, #116]	@ (8008c30 <HAL_TIM_PWM_Start+0x14c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d018      	beq.n	8008bf2 <HAL_TIM_PWM_Start+0x10e>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc8:	d013      	beq.n	8008bf2 <HAL_TIM_PWM_Start+0x10e>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a19      	ldr	r2, [pc, #100]	@ (8008c34 <HAL_TIM_PWM_Start+0x150>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00e      	beq.n	8008bf2 <HAL_TIM_PWM_Start+0x10e>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a17      	ldr	r2, [pc, #92]	@ (8008c38 <HAL_TIM_PWM_Start+0x154>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d009      	beq.n	8008bf2 <HAL_TIM_PWM_Start+0x10e>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a16      	ldr	r2, [pc, #88]	@ (8008c3c <HAL_TIM_PWM_Start+0x158>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d004      	beq.n	8008bf2 <HAL_TIM_PWM_Start+0x10e>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a14      	ldr	r2, [pc, #80]	@ (8008c40 <HAL_TIM_PWM_Start+0x15c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d111      	bne.n	8008c16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f003 0307 	and.w	r3, r3, #7
 8008bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b06      	cmp	r3, #6
 8008c02:	d010      	beq.n	8008c26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f042 0201 	orr.w	r2, r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c14:	e007      	b.n	8008c26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f042 0201 	orr.w	r2, r2, #1
 8008c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	40010000 	.word	0x40010000
 8008c34:	40000400 	.word	0x40000400
 8008c38:	40000800 	.word	0x40000800
 8008c3c:	40000c00 	.word	0x40000c00
 8008c40:	40014000 	.word	0x40014000

08008c44 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2200      	movs	r2, #0
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fee4 	bl	8009a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a29      	ldr	r2, [pc, #164]	@ (8008d08 <HAL_TIM_PWM_Stop+0xc4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d117      	bne.n	8008c96 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6a1a      	ldr	r2, [r3, #32]
 8008c6c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c70:	4013      	ands	r3, r2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10f      	bne.n	8008c96 <HAL_TIM_PWM_Stop+0x52>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6a1a      	ldr	r2, [r3, #32]
 8008c7c:	f240 4344 	movw	r3, #1092	@ 0x444
 8008c80:	4013      	ands	r3, r2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d107      	bne.n	8008c96 <HAL_TIM_PWM_Stop+0x52>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6a1a      	ldr	r2, [r3, #32]
 8008c9c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10f      	bne.n	8008cc6 <HAL_TIM_PWM_Stop+0x82>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6a1a      	ldr	r2, [r3, #32]
 8008cac:	f240 4344 	movw	r3, #1092	@ 0x444
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d107      	bne.n	8008cc6 <HAL_TIM_PWM_Stop+0x82>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 0201 	bic.w	r2, r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d104      	bne.n	8008cd6 <HAL_TIM_PWM_Stop+0x92>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cd4:	e013      	b.n	8008cfe <HAL_TIM_PWM_Stop+0xba>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d104      	bne.n	8008ce6 <HAL_TIM_PWM_Stop+0xa2>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ce4:	e00b      	b.n	8008cfe <HAL_TIM_PWM_Stop+0xba>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d104      	bne.n	8008cf6 <HAL_TIM_PWM_Stop+0xb2>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cf4:	e003      	b.n	8008cfe <HAL_TIM_PWM_Stop+0xba>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40010000 	.word	0x40010000

08008d0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e097      	b.n	8008e50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d106      	bne.n	8008d3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7fb ff7f 	bl	8004c38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6812      	ldr	r2, [r2, #0]
 8008d4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d50:	f023 0307 	bic.w	r3, r3, #7
 8008d54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f000 fbb3 	bl	80094cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d8e:	f023 0303 	bic.w	r3, r3, #3
 8008d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	021b      	lsls	r3, r3, #8
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008dac:	f023 030c 	bic.w	r3, r3, #12
 8008db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008db8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	021b      	lsls	r3, r3, #8
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	011a      	lsls	r2, r3, #4
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	031b      	lsls	r3, r3, #12
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008dea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008df2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	011b      	lsls	r3, r3, #4
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d110      	bne.n	8008eaa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d102      	bne.n	8008e94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e8e:	7b7b      	ldrb	r3, [r7, #13]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d001      	beq.n	8008e98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e069      	b.n	8008f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ea8:	e031      	b.n	8008f0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d110      	bne.n	8008ed2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d102      	bne.n	8008ebc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008eb6:	7b3b      	ldrb	r3, [r7, #12]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d001      	beq.n	8008ec0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e055      	b.n	8008f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ed0:	e01d      	b.n	8008f0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d108      	bne.n	8008eea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d105      	bne.n	8008eea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ede:	7b7b      	ldrb	r3, [r7, #13]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d102      	bne.n	8008eea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ee4:	7b3b      	ldrb	r3, [r7, #12]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d001      	beq.n	8008eee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e03e      	b.n	8008f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2202      	movs	r2, #2
 8008efa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2202      	movs	r2, #2
 8008f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <HAL_TIM_Encoder_Start+0xc4>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d008      	beq.n	8008f2c <HAL_TIM_Encoder_Start+0xd4>
 8008f1a:	e00f      	b.n	8008f3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2201      	movs	r2, #1
 8008f22:	2100      	movs	r1, #0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fd7d 	bl	8009a24 <TIM_CCxChannelCmd>
      break;
 8008f2a:	e016      	b.n	8008f5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2201      	movs	r2, #1
 8008f32:	2104      	movs	r1, #4
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fd75 	bl	8009a24 <TIM_CCxChannelCmd>
      break;
 8008f3a:	e00e      	b.n	8008f5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2201      	movs	r2, #1
 8008f42:	2100      	movs	r1, #0
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fd6d 	bl	8009a24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	2104      	movs	r1, #4
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 fd66 	bl	8009a24 <TIM_CCxChannelCmd>
      break;
 8008f58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0201 	orr.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f003 0302 	and.w	r3, r3, #2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d020      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d01b      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f06f 0202 	mvn.w	r2, #2
 8008fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f003 0303 	and.w	r3, r3, #3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fa65 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 8008fc4:	e005      	b.n	8008fd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa57 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fa68 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f003 0304 	and.w	r3, r3, #4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d020      	beq.n	8009024 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01b      	beq.n	8009024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0204 	mvn.w	r2, #4
 8008ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fa3f 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 8009010:	e005      	b.n	800901e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fa31 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa42 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d020      	beq.n	8009070 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f003 0308 	and.w	r3, r3, #8
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01b      	beq.n	8009070 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f06f 0208 	mvn.w	r2, #8
 8009040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2204      	movs	r2, #4
 8009046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	f003 0303 	and.w	r3, r3, #3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa19 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 800905c:	e005      	b.n	800906a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa0b 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fa1c 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f003 0310 	and.w	r3, r3, #16
 8009076:	2b00      	cmp	r3, #0
 8009078:	d020      	beq.n	80090bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01b      	beq.n	80090bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0210 	mvn.w	r2, #16
 800908c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2208      	movs	r2, #8
 8009092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f9f3 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 80090a8:	e005      	b.n	80090b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f9e5 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f9f6 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00c      	beq.n	80090e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d007      	beq.n	80090e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0201 	mvn.w	r2, #1
 80090d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f9c3 	bl	8009466 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00c      	beq.n	8009104 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80090fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fd80 	bl	8009c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00c      	beq.n	8009128 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009114:	2b00      	cmp	r3, #0
 8009116:	d007      	beq.n	8009128 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f9c7 	bl	80094b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00c      	beq.n	800914c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b00      	cmp	r3, #0
 800913a:	d007      	beq.n	800914c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0220 	mvn.w	r2, #32
 8009144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fd52 	bl	8009bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800914c:	bf00      	nop
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800916e:	2302      	movs	r3, #2
 8009170:	e0ae      	b.n	80092d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b0c      	cmp	r3, #12
 800917e:	f200 809f 	bhi.w	80092c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009182:	a201      	add	r2, pc, #4	@ (adr r2, 8009188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091bd 	.word	0x080091bd
 800918c:	080092c1 	.word	0x080092c1
 8009190:	080092c1 	.word	0x080092c1
 8009194:	080092c1 	.word	0x080092c1
 8009198:	080091fd 	.word	0x080091fd
 800919c:	080092c1 	.word	0x080092c1
 80091a0:	080092c1 	.word	0x080092c1
 80091a4:	080092c1 	.word	0x080092c1
 80091a8:	0800923f 	.word	0x0800923f
 80091ac:	080092c1 	.word	0x080092c1
 80091b0:	080092c1 	.word	0x080092c1
 80091b4:	080092c1 	.word	0x080092c1
 80091b8:	0800927f 	.word	0x0800927f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fa08 	bl	80095d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699a      	ldr	r2, [r3, #24]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f042 0208 	orr.w	r2, r2, #8
 80091d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	699a      	ldr	r2, [r3, #24]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f022 0204 	bic.w	r2, r2, #4
 80091e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6999      	ldr	r1, [r3, #24]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	691a      	ldr	r2, [r3, #16]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	619a      	str	r2, [r3, #24]
      break;
 80091fa:	e064      	b.n	80092c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68b9      	ldr	r1, [r7, #8]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fa4e 	bl	80096a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	699a      	ldr	r2, [r3, #24]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6999      	ldr	r1, [r3, #24]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	021a      	lsls	r2, r3, #8
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	619a      	str	r2, [r3, #24]
      break;
 800923c:	e043      	b.n	80092c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68b9      	ldr	r1, [r7, #8]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 fa99 	bl	800977c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69da      	ldr	r2, [r3, #28]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0208 	orr.w	r2, r2, #8
 8009258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	69da      	ldr	r2, [r3, #28]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0204 	bic.w	r2, r2, #4
 8009268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69d9      	ldr	r1, [r3, #28]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	691a      	ldr	r2, [r3, #16]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	430a      	orrs	r2, r1
 800927a:	61da      	str	r2, [r3, #28]
      break;
 800927c:	e023      	b.n	80092c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68b9      	ldr	r1, [r7, #8]
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fae3 	bl	8009850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	69da      	ldr	r2, [r3, #28]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69da      	ldr	r2, [r3, #28]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69d9      	ldr	r1, [r3, #28]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	021a      	lsls	r2, r3, #8
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	61da      	str	r2, [r3, #28]
      break;
 80092be:	e002      	b.n	80092c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	75fb      	strb	r3, [r7, #23]
      break;
 80092c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d101      	bne.n	80092f4 <HAL_TIM_ConfigClockSource+0x1c>
 80092f0:	2302      	movs	r3, #2
 80092f2:	e0b4      	b.n	800945e <HAL_TIM_ConfigClockSource+0x186>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800931a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800932c:	d03e      	beq.n	80093ac <HAL_TIM_ConfigClockSource+0xd4>
 800932e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009332:	f200 8087 	bhi.w	8009444 <HAL_TIM_ConfigClockSource+0x16c>
 8009336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800933a:	f000 8086 	beq.w	800944a <HAL_TIM_ConfigClockSource+0x172>
 800933e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009342:	d87f      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x16c>
 8009344:	2b70      	cmp	r3, #112	@ 0x70
 8009346:	d01a      	beq.n	800937e <HAL_TIM_ConfigClockSource+0xa6>
 8009348:	2b70      	cmp	r3, #112	@ 0x70
 800934a:	d87b      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x16c>
 800934c:	2b60      	cmp	r3, #96	@ 0x60
 800934e:	d050      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x11a>
 8009350:	2b60      	cmp	r3, #96	@ 0x60
 8009352:	d877      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x16c>
 8009354:	2b50      	cmp	r3, #80	@ 0x50
 8009356:	d03c      	beq.n	80093d2 <HAL_TIM_ConfigClockSource+0xfa>
 8009358:	2b50      	cmp	r3, #80	@ 0x50
 800935a:	d873      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x16c>
 800935c:	2b40      	cmp	r3, #64	@ 0x40
 800935e:	d058      	beq.n	8009412 <HAL_TIM_ConfigClockSource+0x13a>
 8009360:	2b40      	cmp	r3, #64	@ 0x40
 8009362:	d86f      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x16c>
 8009364:	2b30      	cmp	r3, #48	@ 0x30
 8009366:	d064      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x15a>
 8009368:	2b30      	cmp	r3, #48	@ 0x30
 800936a:	d86b      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x16c>
 800936c:	2b20      	cmp	r3, #32
 800936e:	d060      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x15a>
 8009370:	2b20      	cmp	r3, #32
 8009372:	d867      	bhi.n	8009444 <HAL_TIM_ConfigClockSource+0x16c>
 8009374:	2b00      	cmp	r3, #0
 8009376:	d05c      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x15a>
 8009378:	2b10      	cmp	r3, #16
 800937a:	d05a      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x15a>
 800937c:	e062      	b.n	8009444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800938e:	f000 fb29 	bl	80099e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80093a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	609a      	str	r2, [r3, #8]
      break;
 80093aa:	e04f      	b.n	800944c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80093bc:	f000 fb12 	bl	80099e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093ce:	609a      	str	r2, [r3, #8]
      break;
 80093d0:	e03c      	b.n	800944c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093de:	461a      	mov	r2, r3
 80093e0:	f000 fa86 	bl	80098f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2150      	movs	r1, #80	@ 0x50
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fadf 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 80093f0:	e02c      	b.n	800944c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093fe:	461a      	mov	r2, r3
 8009400:	f000 faa5 	bl	800994e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2160      	movs	r1, #96	@ 0x60
 800940a:	4618      	mov	r0, r3
 800940c:	f000 facf 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 8009410:	e01c      	b.n	800944c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800941e:	461a      	mov	r2, r3
 8009420:	f000 fa66 	bl	80098f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2140      	movs	r1, #64	@ 0x40
 800942a:	4618      	mov	r0, r3
 800942c:	f000 fabf 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 8009430:	e00c      	b.n	800944c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4619      	mov	r1, r3
 800943c:	4610      	mov	r0, r2
 800943e:	f000 fab6 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 8009442:	e003      	b.n	800944c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	73fb      	strb	r3, [r7, #15]
      break;
 8009448:	e000      	b.n	800944c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800944a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009496:	bf00      	nop
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094aa:	bf00      	nop
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094be:	bf00      	nop
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
	...

080094cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a37      	ldr	r2, [pc, #220]	@ (80095bc <TIM_Base_SetConfig+0xf0>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00f      	beq.n	8009504 <TIM_Base_SetConfig+0x38>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ea:	d00b      	beq.n	8009504 <TIM_Base_SetConfig+0x38>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a34      	ldr	r2, [pc, #208]	@ (80095c0 <TIM_Base_SetConfig+0xf4>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d007      	beq.n	8009504 <TIM_Base_SetConfig+0x38>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a33      	ldr	r2, [pc, #204]	@ (80095c4 <TIM_Base_SetConfig+0xf8>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d003      	beq.n	8009504 <TIM_Base_SetConfig+0x38>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a32      	ldr	r2, [pc, #200]	@ (80095c8 <TIM_Base_SetConfig+0xfc>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d108      	bne.n	8009516 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800950a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a28      	ldr	r2, [pc, #160]	@ (80095bc <TIM_Base_SetConfig+0xf0>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d01b      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009524:	d017      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a25      	ldr	r2, [pc, #148]	@ (80095c0 <TIM_Base_SetConfig+0xf4>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d013      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a24      	ldr	r2, [pc, #144]	@ (80095c4 <TIM_Base_SetConfig+0xf8>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d00f      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a23      	ldr	r2, [pc, #140]	@ (80095c8 <TIM_Base_SetConfig+0xfc>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d00b      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a22      	ldr	r2, [pc, #136]	@ (80095cc <TIM_Base_SetConfig+0x100>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d007      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a21      	ldr	r2, [pc, #132]	@ (80095d0 <TIM_Base_SetConfig+0x104>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d003      	beq.n	8009556 <TIM_Base_SetConfig+0x8a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a20      	ldr	r2, [pc, #128]	@ (80095d4 <TIM_Base_SetConfig+0x108>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d108      	bne.n	8009568 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800955c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	4313      	orrs	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a0c      	ldr	r2, [pc, #48]	@ (80095bc <TIM_Base_SetConfig+0xf0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d103      	bne.n	8009596 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	691a      	ldr	r2, [r3, #16]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f043 0204 	orr.w	r2, r3, #4
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	601a      	str	r2, [r3, #0]
}
 80095ae:	bf00      	nop
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	40010000 	.word	0x40010000
 80095c0:	40000400 	.word	0x40000400
 80095c4:	40000800 	.word	0x40000800
 80095c8:	40000c00 	.word	0x40000c00
 80095cc:	40014000 	.word	0x40014000
 80095d0:	40014400 	.word	0x40014400
 80095d4:	40014800 	.word	0x40014800

080095d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	f023 0201 	bic.w	r2, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0303 	bic.w	r3, r3, #3
 800960e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f023 0302 	bic.w	r3, r3, #2
 8009620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	4313      	orrs	r3, r2
 800962a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a1c      	ldr	r2, [pc, #112]	@ (80096a0 <TIM_OC1_SetConfig+0xc8>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d10c      	bne.n	800964e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f023 0308 	bic.w	r3, r3, #8
 800963a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	4313      	orrs	r3, r2
 8009644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f023 0304 	bic.w	r3, r3, #4
 800964c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a13      	ldr	r2, [pc, #76]	@ (80096a0 <TIM_OC1_SetConfig+0xc8>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d111      	bne.n	800967a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800965c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4313      	orrs	r3, r2
 800966e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	4313      	orrs	r3, r2
 8009678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	685a      	ldr	r2, [r3, #4]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	621a      	str	r2, [r3, #32]
}
 8009694:	bf00      	nop
 8009696:	371c      	adds	r7, #28
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	40010000 	.word	0x40010000

080096a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	f023 0210 	bic.w	r2, r3, #16
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	021b      	lsls	r3, r3, #8
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f023 0320 	bic.w	r3, r3, #32
 80096ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	011b      	lsls	r3, r3, #4
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009778 <TIM_OC2_SetConfig+0xd4>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d10d      	bne.n	8009720 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800970a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	011b      	lsls	r3, r3, #4
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800971e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a15      	ldr	r2, [pc, #84]	@ (8009778 <TIM_OC2_SetConfig+0xd4>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d113      	bne.n	8009750 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800972e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	4313      	orrs	r3, r2
 8009742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	4313      	orrs	r3, r2
 800974e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	621a      	str	r2, [r3, #32]
}
 800976a:	bf00      	nop
 800976c:	371c      	adds	r7, #28
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	40010000 	.word	0x40010000

0800977c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 0303 	bic.w	r3, r3, #3
 80097b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	021b      	lsls	r3, r3, #8
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a1d      	ldr	r2, [pc, #116]	@ (800984c <TIM_OC3_SetConfig+0xd0>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d10d      	bne.n	80097f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	021b      	lsls	r3, r3, #8
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a14      	ldr	r2, [pc, #80]	@ (800984c <TIM_OC3_SetConfig+0xd0>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d113      	bne.n	8009826 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800980c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	4313      	orrs	r3, r2
 8009818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	011b      	lsls	r3, r3, #4
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	685a      	ldr	r2, [r3, #4]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	621a      	str	r2, [r3, #32]
}
 8009840:	bf00      	nop
 8009842:	371c      	adds	r7, #28
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	40010000 	.word	0x40010000

08009850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a1b      	ldr	r3, [r3, #32]
 8009864:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800987e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	021b      	lsls	r3, r3, #8
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	4313      	orrs	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800989a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	031b      	lsls	r3, r3, #12
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a10      	ldr	r2, [pc, #64]	@ (80098ec <TIM_OC4_SetConfig+0x9c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d109      	bne.n	80098c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	019b      	lsls	r3, r3, #6
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	621a      	str	r2, [r3, #32]
}
 80098de:	bf00      	nop
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	40010000 	.word	0x40010000

080098f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f023 0201 	bic.w	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800991a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	4313      	orrs	r3, r2
 8009924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f023 030a 	bic.w	r3, r3, #10
 800992c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	4313      	orrs	r3, r2
 8009934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	621a      	str	r2, [r3, #32]
}
 8009942:	bf00      	nop
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800994e:	b480      	push	{r7}
 8009950:	b087      	sub	sp, #28
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	f023 0210 	bic.w	r2, r3, #16
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009978:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	031b      	lsls	r3, r3, #12
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	4313      	orrs	r3, r2
 8009982:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800998a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	4313      	orrs	r3, r2
 8009994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	621a      	str	r2, [r3, #32]
}
 80099a2:	bf00      	nop
 80099a4:	371c      	adds	r7, #28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	f043 0307 	orr.w	r3, r3, #7
 80099d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	609a      	str	r2, [r3, #8]
}
 80099d8:	bf00      	nop
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	021a      	lsls	r2, r3, #8
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	431a      	orrs	r2, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	609a      	str	r2, [r3, #8]
}
 8009a18:	bf00      	nop
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f003 031f 	and.w	r3, r3, #31
 8009a36:	2201      	movs	r2, #1
 8009a38:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6a1a      	ldr	r2, [r3, #32]
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	43db      	mvns	r3, r3
 8009a46:	401a      	ands	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a1a      	ldr	r2, [r3, #32]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f003 031f 	and.w	r3, r3, #31
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5c:	431a      	orrs	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	621a      	str	r2, [r3, #32]
}
 8009a62:	bf00      	nop
 8009a64:	371c      	adds	r7, #28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
	...

08009a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e050      	b.n	8009b2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8009b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d018      	beq.n	8009afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad4:	d013      	beq.n	8009afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a18      	ldr	r2, [pc, #96]	@ (8009b3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d00e      	beq.n	8009afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a16      	ldr	r2, [pc, #88]	@ (8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d009      	beq.n	8009afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a15      	ldr	r2, [pc, #84]	@ (8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d004      	beq.n	8009afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a13      	ldr	r2, [pc, #76]	@ (8009b48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d10c      	bne.n	8009b18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	40010000 	.word	0x40010000
 8009b3c:	40000400 	.word	0x40000400
 8009b40:	40000800 	.word	0x40000800
 8009b44:	40000c00 	.word	0x40000c00
 8009b48:	40014000 	.word	0x40014000

08009b4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d101      	bne.n	8009b68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e03d      	b.n	8009be4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e042      	b.n	8009cb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d106      	bne.n	8009c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7fb f914 	bl	8004e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2224      	movs	r2, #36	@ 0x24
 8009c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68da      	ldr	r2, [r3, #12]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fd7f 	bl	800a760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	691a      	ldr	r2, [r3, #16]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	695a      	ldr	r2, [r3, #20]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68da      	ldr	r2, [r3, #12]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08a      	sub	sp, #40	@ 0x28
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b20      	cmp	r3, #32
 8009cd6:	d175      	bne.n	8009dc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <HAL_UART_Transmit+0x2c>
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e06e      	b.n	8009dc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2221      	movs	r2, #33	@ 0x21
 8009cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cf6:	f7fc fc8d 	bl	8006614 <HAL_GetTick>
 8009cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	88fa      	ldrh	r2, [r7, #6]
 8009d00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	88fa      	ldrh	r2, [r7, #6]
 8009d06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d10:	d108      	bne.n	8009d24 <HAL_UART_Transmit+0x6c>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d104      	bne.n	8009d24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	61bb      	str	r3, [r7, #24]
 8009d22:	e003      	b.n	8009d2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d2c:	e02e      	b.n	8009d8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2200      	movs	r2, #0
 8009d36:	2180      	movs	r1, #128	@ 0x80
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 fb1d 	bl	800a378 <UART_WaitOnFlagUntilTimeout>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2220      	movs	r2, #32
 8009d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e03a      	b.n	8009dc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10b      	bne.n	8009d6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	881b      	ldrh	r3, [r3, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	3302      	adds	r3, #2
 8009d6a:	61bb      	str	r3, [r7, #24]
 8009d6c:	e007      	b.n	8009d7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	781a      	ldrb	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1cb      	bne.n	8009d2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2140      	movs	r1, #64	@ 0x40
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fae9 	bl	800a378 <UART_WaitOnFlagUntilTimeout>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d005      	beq.n	8009db8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e006      	b.n	8009dc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	e000      	b.n	8009dc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009dc4:	2302      	movs	r3, #2
  }
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3720      	adds	r7, #32
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b0ba      	sub	sp, #232	@ 0xe8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e06:	f003 030f 	and.w	r3, r3, #15
 8009e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10f      	bne.n	8009e36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <HAL_UART_IRQHandler+0x66>
 8009e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e26:	f003 0320 	and.w	r3, r3, #32
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fbd7 	bl	800a5e2 <UART_Receive_IT>
      return;
 8009e34:	e273      	b.n	800a31e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 80de 	beq.w	8009ffc <HAL_UART_IRQHandler+0x22c>
 8009e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d106      	bne.n	8009e5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 80d1 	beq.w	8009ffc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <HAL_UART_IRQHandler+0xae>
 8009e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e76:	f043 0201 	orr.w	r2, r3, #1
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00b      	beq.n	8009ea2 <HAL_UART_IRQHandler+0xd2>
 8009e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e9a:	f043 0202 	orr.w	r2, r3, #2
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ea6:	f003 0302 	and.w	r3, r3, #2
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xf6>
 8009eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d005      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ebe:	f043 0204 	orr.w	r2, r3, #4
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eca:	f003 0308 	and.w	r3, r3, #8
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d011      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x126>
 8009ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ed6:	f003 0320 	and.w	r3, r3, #32
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d105      	bne.n	8009eea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eee:	f043 0208 	orr.w	r2, r3, #8
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 820a 	beq.w	800a314 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d008      	beq.n	8009f1e <HAL_UART_IRQHandler+0x14e>
 8009f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f10:	f003 0320 	and.w	r3, r3, #32
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d002      	beq.n	8009f1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fb62 	bl	800a5e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f28:	2b40      	cmp	r3, #64	@ 0x40
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2301      	moveq	r3, #1
 8009f2e:	2300      	movne	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f3a:	f003 0308 	and.w	r3, r3, #8
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d103      	bne.n	8009f4a <HAL_UART_IRQHandler+0x17a>
 8009f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d04f      	beq.n	8009fea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fa6d 	bl	800a42a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f5a:	2b40      	cmp	r3, #64	@ 0x40
 8009f5c:	d141      	bne.n	8009fe2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3314      	adds	r3, #20
 8009f64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f6c:	e853 3f00 	ldrex	r3, [r3]
 8009f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3314      	adds	r3, #20
 8009f86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009f8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009f96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009f9a:	e841 2300 	strex	r3, r2, [r1]
 8009f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1d9      	bne.n	8009f5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d013      	beq.n	8009fda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fb6:	4a8a      	ldr	r2, [pc, #552]	@ (800a1e0 <HAL_UART_IRQHandler+0x410>)
 8009fb8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fd f8cb 	bl	800715a <HAL_DMA_Abort_IT>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d016      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd8:	e00e      	b.n	8009ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f9b6 	bl	800a34c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe0:	e00a      	b.n	8009ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f9b2 	bl	800a34c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe8:	e006      	b.n	8009ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f9ae 	bl	800a34c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009ff6:	e18d      	b.n	800a314 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff8:	bf00      	nop
    return;
 8009ffa:	e18b      	b.n	800a314 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a000:	2b01      	cmp	r3, #1
 800a002:	f040 8167 	bne.w	800a2d4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a00a:	f003 0310 	and.w	r3, r3, #16
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 8160 	beq.w	800a2d4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a018:	f003 0310 	and.w	r3, r3, #16
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 8159 	beq.w	800a2d4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a022:	2300      	movs	r3, #0
 800a024:	60bb      	str	r3, [r7, #8]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	60bb      	str	r3, [r7, #8]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	60bb      	str	r3, [r7, #8]
 800a036:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a042:	2b40      	cmp	r3, #64	@ 0x40
 800a044:	f040 80ce 	bne.w	800a1e4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 80a9 	beq.w	800a1b0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a066:	429a      	cmp	r2, r3
 800a068:	f080 80a2 	bcs.w	800a1b0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a072:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a07e:	f000 8088 	beq.w	800a192 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	330c      	adds	r3, #12
 800a088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a098:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a09c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	330c      	adds	r3, #12
 800a0aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a0ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a0b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a0ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a0c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1d9      	bne.n	800a082 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	3314      	adds	r3, #20
 800a0d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0d8:	e853 3f00 	ldrex	r3, [r3]
 800a0dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a0de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0e0:	f023 0301 	bic.w	r3, r3, #1
 800a0e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3314      	adds	r3, #20
 800a0ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a0f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a0f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a0fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a0fe:	e841 2300 	strex	r3, r2, [r1]
 800a102:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1e1      	bne.n	800a0ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3314      	adds	r3, #20
 800a110:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a11a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a11c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3314      	adds	r3, #20
 800a12a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a12e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a130:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a134:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a13c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e3      	bne.n	800a10a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	330c      	adds	r3, #12
 800a156:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a15a:	e853 3f00 	ldrex	r3, [r3]
 800a15e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a162:	f023 0310 	bic.w	r3, r3, #16
 800a166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	330c      	adds	r3, #12
 800a170:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a174:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a176:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a178:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a17a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a17c:	e841 2300 	strex	r3, r2, [r1]
 800a180:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1e3      	bne.n	800a150 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fc ff74 	bl	800707a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2202      	movs	r2, #2
 800a196:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f8d9 	bl	800a360 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a1ae:	e0b3      	b.n	800a318 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a1b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	f040 80ad 	bne.w	800a318 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1c8:	f040 80a6 	bne.w	800a318 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f8c1 	bl	800a360 <HAL_UARTEx_RxEventCallback>
      return;
 800a1de:	e09b      	b.n	800a318 <HAL_UART_IRQHandler+0x548>
 800a1e0:	0800a4f1 	.word	0x0800a4f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 808e 	beq.w	800a31c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 8089 	beq.w	800a31c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	330c      	adds	r3, #12
 800a210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	e853 3f00 	ldrex	r3, [r3]
 800a218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a21c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	330c      	adds	r3, #12
 800a22a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a22e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e3      	bne.n	800a20a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3314      	adds	r3, #20
 800a248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24c:	e853 3f00 	ldrex	r3, [r3]
 800a250:	623b      	str	r3, [r7, #32]
   return(result);
 800a252:	6a3b      	ldr	r3, [r7, #32]
 800a254:	f023 0301 	bic.w	r3, r3, #1
 800a258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3314      	adds	r3, #20
 800a262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a266:	633a      	str	r2, [r7, #48]	@ 0x30
 800a268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a26c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a26e:	e841 2300 	strex	r3, r2, [r1]
 800a272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1e3      	bne.n	800a242 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2220      	movs	r2, #32
 800a27e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	330c      	adds	r3, #12
 800a28e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	e853 3f00 	ldrex	r3, [r3]
 800a296:	60fb      	str	r3, [r7, #12]
   return(result);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f023 0310 	bic.w	r3, r3, #16
 800a29e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	330c      	adds	r3, #12
 800a2a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a2ac:	61fa      	str	r2, [r7, #28]
 800a2ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b0:	69b9      	ldr	r1, [r7, #24]
 800a2b2:	69fa      	ldr	r2, [r7, #28]
 800a2b4:	e841 2300 	strex	r3, r2, [r1]
 800a2b8:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1e3      	bne.n	800a288 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f847 	bl	800a360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2d2:	e023      	b.n	800a31c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d009      	beq.n	800a2f4 <HAL_UART_IRQHandler+0x524>
 800a2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f910 	bl	800a512 <UART_Transmit_IT>
    return;
 800a2f2:	e014      	b.n	800a31e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00e      	beq.n	800a31e <HAL_UART_IRQHandler+0x54e>
 800a300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f950 	bl	800a5b2 <UART_EndTransmit_IT>
    return;
 800a312:	e004      	b.n	800a31e <HAL_UART_IRQHandler+0x54e>
    return;
 800a314:	bf00      	nop
 800a316:	e002      	b.n	800a31e <HAL_UART_IRQHandler+0x54e>
      return;
 800a318:	bf00      	nop
 800a31a:	e000      	b.n	800a31e <HAL_UART_IRQHandler+0x54e>
      return;
 800a31c:	bf00      	nop
  }
}
 800a31e:	37e8      	adds	r7, #232	@ 0xe8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	603b      	str	r3, [r7, #0]
 800a384:	4613      	mov	r3, r2
 800a386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a388:	e03b      	b.n	800a402 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a390:	d037      	beq.n	800a402 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a392:	f7fc f93f 	bl	8006614 <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	6a3a      	ldr	r2, [r7, #32]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d302      	bcc.n	800a3a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e03a      	b.n	800a422 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	f003 0304 	and.w	r3, r3, #4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d023      	beq.n	800a402 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2b80      	cmp	r3, #128	@ 0x80
 800a3be:	d020      	beq.n	800a402 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2b40      	cmp	r3, #64	@ 0x40
 800a3c4:	d01d      	beq.n	800a402 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 0308 	and.w	r3, r3, #8
 800a3d0:	2b08      	cmp	r3, #8
 800a3d2:	d116      	bne.n	800a402 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	617b      	str	r3, [r7, #20]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	617b      	str	r3, [r7, #20]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 f81d 	bl	800a42a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2208      	movs	r2, #8
 800a3f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e00f      	b.n	800a422 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	4013      	ands	r3, r2
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	429a      	cmp	r2, r3
 800a410:	bf0c      	ite	eq
 800a412:	2301      	moveq	r3, #1
 800a414:	2300      	movne	r3, #0
 800a416:	b2db      	uxtb	r3, r3
 800a418:	461a      	mov	r2, r3
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d0b4      	beq.n	800a38a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b095      	sub	sp, #84	@ 0x54
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	330c      	adds	r3, #12
 800a438:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a43c:	e853 3f00 	ldrex	r3, [r3]
 800a440:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	330c      	adds	r3, #12
 800a450:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a452:	643a      	str	r2, [r7, #64]	@ 0x40
 800a454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a456:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a45a:	e841 2300 	strex	r3, r2, [r1]
 800a45e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1e5      	bne.n	800a432 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3314      	adds	r3, #20
 800a46c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	e853 3f00 	ldrex	r3, [r3]
 800a474:	61fb      	str	r3, [r7, #28]
   return(result);
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	f023 0301 	bic.w	r3, r3, #1
 800a47c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3314      	adds	r3, #20
 800a484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a488:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a48c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a48e:	e841 2300 	strex	r3, r2, [r1]
 800a492:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1e5      	bne.n	800a466 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d119      	bne.n	800a4d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	330c      	adds	r3, #12
 800a4a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	e853 3f00 	ldrex	r3, [r3]
 800a4b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	f023 0310 	bic.w	r3, r3, #16
 800a4b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	330c      	adds	r3, #12
 800a4c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4c2:	61ba      	str	r2, [r7, #24]
 800a4c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c6:	6979      	ldr	r1, [r7, #20]
 800a4c8:	69ba      	ldr	r2, [r7, #24]
 800a4ca:	e841 2300 	strex	r3, r2, [r1]
 800a4ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1e5      	bne.n	800a4a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2220      	movs	r2, #32
 800a4da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a4e4:	bf00      	nop
 800a4e6:	3754      	adds	r7, #84	@ 0x54
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f7ff ff21 	bl	800a34c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a50a:	bf00      	nop
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a512:	b480      	push	{r7}
 800a514:	b085      	sub	sp, #20
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b21      	cmp	r3, #33	@ 0x21
 800a524:	d13e      	bne.n	800a5a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a52e:	d114      	bne.n	800a55a <UART_Transmit_IT+0x48>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d110      	bne.n	800a55a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a54c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	1c9a      	adds	r2, r3, #2
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	621a      	str	r2, [r3, #32]
 800a558:	e008      	b.n	800a56c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	1c59      	adds	r1, r3, #1
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	6211      	str	r1, [r2, #32]
 800a564:	781a      	ldrb	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a570:	b29b      	uxth	r3, r3
 800a572:	3b01      	subs	r3, #1
 800a574:	b29b      	uxth	r3, r3
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	4619      	mov	r1, r3
 800a57a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10f      	bne.n	800a5a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68da      	ldr	r2, [r3, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a58e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68da      	ldr	r2, [r3, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a59e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	e000      	b.n	800a5a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5a4:	2302      	movs	r3, #2
  }
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68da      	ldr	r2, [r3, #12]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a5c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2220      	movs	r2, #32
 800a5ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff fea6 	bl	800a324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b08c      	sub	sp, #48	@ 0x30
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b22      	cmp	r3, #34	@ 0x22
 800a5fc:	f040 80aa 	bne.w	800a754 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a608:	d115      	bne.n	800a636 <UART_Receive_IT+0x54>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d111      	bne.n	800a636 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a616:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	b29b      	uxth	r3, r3
 800a620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a624:	b29a      	uxth	r2, r3
 800a626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a628:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62e:	1c9a      	adds	r2, r3, #2
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	629a      	str	r2, [r3, #40]	@ 0x28
 800a634:	e024      	b.n	800a680 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a644:	d007      	beq.n	800a656 <UART_Receive_IT+0x74>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10a      	bne.n	800a664 <UART_Receive_IT+0x82>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d106      	bne.n	800a664 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	e008      	b.n	800a676 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a670:	b2da      	uxtb	r2, r3
 800a672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a674:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a684:	b29b      	uxth	r3, r3
 800a686:	3b01      	subs	r3, #1
 800a688:	b29b      	uxth	r3, r3
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	4619      	mov	r1, r3
 800a68e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a690:	2b00      	cmp	r3, #0
 800a692:	d15d      	bne.n	800a750 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68da      	ldr	r2, [r3, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f022 0220 	bic.w	r2, r2, #32
 800a6a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68da      	ldr	r2, [r3, #12]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a6b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	695a      	ldr	r2, [r3, #20]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f022 0201 	bic.w	r2, r2, #1
 800a6c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d135      	bne.n	800a746 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	330c      	adds	r3, #12
 800a6e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	e853 3f00 	ldrex	r3, [r3]
 800a6ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	f023 0310 	bic.w	r3, r3, #16
 800a6f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	330c      	adds	r3, #12
 800a6fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a700:	623a      	str	r2, [r7, #32]
 800a702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a704:	69f9      	ldr	r1, [r7, #28]
 800a706:	6a3a      	ldr	r2, [r7, #32]
 800a708:	e841 2300 	strex	r3, r2, [r1]
 800a70c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1e5      	bne.n	800a6e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0310 	and.w	r3, r3, #16
 800a71e:	2b10      	cmp	r3, #16
 800a720:	d10a      	bne.n	800a738 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a722:	2300      	movs	r3, #0
 800a724:	60fb      	str	r3, [r7, #12]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	60fb      	str	r3, [r7, #12]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a73c:	4619      	mov	r1, r3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fe0e 	bl	800a360 <HAL_UARTEx_RxEventCallback>
 800a744:	e002      	b.n	800a74c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7ff fdf6 	bl	800a338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	e002      	b.n	800a756 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a750:	2300      	movs	r3, #0
 800a752:	e000      	b.n	800a756 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a754:	2302      	movs	r3, #2
  }
}
 800a756:	4618      	mov	r0, r3
 800a758:	3730      	adds	r7, #48	@ 0x30
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
	...

0800a760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a764:	b0c0      	sub	sp, #256	@ 0x100
 800a766:	af00      	add	r7, sp, #0
 800a768:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a77c:	68d9      	ldr	r1, [r3, #12]
 800a77e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	ea40 0301 	orr.w	r3, r0, r1
 800a788:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a78a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	431a      	orrs	r2, r3
 800a798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	431a      	orrs	r2, r3
 800a7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a7b8:	f021 010c 	bic.w	r1, r1, #12
 800a7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a7c6:	430b      	orrs	r3, r1
 800a7c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a7d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7da:	6999      	ldr	r1, [r3, #24]
 800a7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	ea40 0301 	orr.w	r3, r0, r1
 800a7e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	4b8f      	ldr	r3, [pc, #572]	@ (800aa2c <UART_SetConfig+0x2cc>)
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d005      	beq.n	800a800 <UART_SetConfig+0xa0>
 800a7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	4b8d      	ldr	r3, [pc, #564]	@ (800aa30 <UART_SetConfig+0x2d0>)
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d104      	bne.n	800a80a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a800:	f7fd fae2 	bl	8007dc8 <HAL_RCC_GetPCLK2Freq>
 800a804:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a808:	e003      	b.n	800a812 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a80a:	f7fd fac9 	bl	8007da0 <HAL_RCC_GetPCLK1Freq>
 800a80e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a81c:	f040 810c 	bne.w	800aa38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a824:	2200      	movs	r2, #0
 800a826:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a82a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a82e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a832:	4622      	mov	r2, r4
 800a834:	462b      	mov	r3, r5
 800a836:	1891      	adds	r1, r2, r2
 800a838:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a83a:	415b      	adcs	r3, r3
 800a83c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a83e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a842:	4621      	mov	r1, r4
 800a844:	eb12 0801 	adds.w	r8, r2, r1
 800a848:	4629      	mov	r1, r5
 800a84a:	eb43 0901 	adc.w	r9, r3, r1
 800a84e:	f04f 0200 	mov.w	r2, #0
 800a852:	f04f 0300 	mov.w	r3, #0
 800a856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a85a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a85e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a862:	4690      	mov	r8, r2
 800a864:	4699      	mov	r9, r3
 800a866:	4623      	mov	r3, r4
 800a868:	eb18 0303 	adds.w	r3, r8, r3
 800a86c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a870:	462b      	mov	r3, r5
 800a872:	eb49 0303 	adc.w	r3, r9, r3
 800a876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a87a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a886:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a88a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a88e:	460b      	mov	r3, r1
 800a890:	18db      	adds	r3, r3, r3
 800a892:	653b      	str	r3, [r7, #80]	@ 0x50
 800a894:	4613      	mov	r3, r2
 800a896:	eb42 0303 	adc.w	r3, r2, r3
 800a89a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a89c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a8a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a8a4:	f7f6 f9d8 	bl	8000c58 <__aeabi_uldivmod>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4b61      	ldr	r3, [pc, #388]	@ (800aa34 <UART_SetConfig+0x2d4>)
 800a8ae:	fba3 2302 	umull	r2, r3, r3, r2
 800a8b2:	095b      	lsrs	r3, r3, #5
 800a8b4:	011c      	lsls	r4, r3, #4
 800a8b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a8c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a8c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	1891      	adds	r1, r2, r2
 800a8ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a8d0:	415b      	adcs	r3, r3
 800a8d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a8d8:	4641      	mov	r1, r8
 800a8da:	eb12 0a01 	adds.w	sl, r2, r1
 800a8de:	4649      	mov	r1, r9
 800a8e0:	eb43 0b01 	adc.w	fp, r3, r1
 800a8e4:	f04f 0200 	mov.w	r2, #0
 800a8e8:	f04f 0300 	mov.w	r3, #0
 800a8ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a8f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a8f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8f8:	4692      	mov	sl, r2
 800a8fa:	469b      	mov	fp, r3
 800a8fc:	4643      	mov	r3, r8
 800a8fe:	eb1a 0303 	adds.w	r3, sl, r3
 800a902:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a906:	464b      	mov	r3, r9
 800a908:	eb4b 0303 	adc.w	r3, fp, r3
 800a90c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a91c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a920:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a924:	460b      	mov	r3, r1
 800a926:	18db      	adds	r3, r3, r3
 800a928:	643b      	str	r3, [r7, #64]	@ 0x40
 800a92a:	4613      	mov	r3, r2
 800a92c:	eb42 0303 	adc.w	r3, r2, r3
 800a930:	647b      	str	r3, [r7, #68]	@ 0x44
 800a932:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a936:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a93a:	f7f6 f98d 	bl	8000c58 <__aeabi_uldivmod>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4611      	mov	r1, r2
 800a944:	4b3b      	ldr	r3, [pc, #236]	@ (800aa34 <UART_SetConfig+0x2d4>)
 800a946:	fba3 2301 	umull	r2, r3, r3, r1
 800a94a:	095b      	lsrs	r3, r3, #5
 800a94c:	2264      	movs	r2, #100	@ 0x64
 800a94e:	fb02 f303 	mul.w	r3, r2, r3
 800a952:	1acb      	subs	r3, r1, r3
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a95a:	4b36      	ldr	r3, [pc, #216]	@ (800aa34 <UART_SetConfig+0x2d4>)
 800a95c:	fba3 2302 	umull	r2, r3, r3, r2
 800a960:	095b      	lsrs	r3, r3, #5
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a968:	441c      	add	r4, r3
 800a96a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a974:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a978:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a97c:	4642      	mov	r2, r8
 800a97e:	464b      	mov	r3, r9
 800a980:	1891      	adds	r1, r2, r2
 800a982:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a984:	415b      	adcs	r3, r3
 800a986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a98c:	4641      	mov	r1, r8
 800a98e:	1851      	adds	r1, r2, r1
 800a990:	6339      	str	r1, [r7, #48]	@ 0x30
 800a992:	4649      	mov	r1, r9
 800a994:	414b      	adcs	r3, r1
 800a996:	637b      	str	r3, [r7, #52]	@ 0x34
 800a998:	f04f 0200 	mov.w	r2, #0
 800a99c:	f04f 0300 	mov.w	r3, #0
 800a9a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a9a4:	4659      	mov	r1, fp
 800a9a6:	00cb      	lsls	r3, r1, #3
 800a9a8:	4651      	mov	r1, sl
 800a9aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9ae:	4651      	mov	r1, sl
 800a9b0:	00ca      	lsls	r2, r1, #3
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	4642      	mov	r2, r8
 800a9ba:	189b      	adds	r3, r3, r2
 800a9bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a9c0:	464b      	mov	r3, r9
 800a9c2:	460a      	mov	r2, r1
 800a9c4:	eb42 0303 	adc.w	r3, r2, r3
 800a9c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a9cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a9d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a9dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	18db      	adds	r3, r3, r3
 800a9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	eb42 0303 	adc.w	r3, r2, r3
 800a9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a9f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a9f6:	f7f6 f92f 	bl	8000c58 <__aeabi_uldivmod>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800aa34 <UART_SetConfig+0x2d4>)
 800aa00:	fba3 1302 	umull	r1, r3, r3, r2
 800aa04:	095b      	lsrs	r3, r3, #5
 800aa06:	2164      	movs	r1, #100	@ 0x64
 800aa08:	fb01 f303 	mul.w	r3, r1, r3
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	3332      	adds	r3, #50	@ 0x32
 800aa12:	4a08      	ldr	r2, [pc, #32]	@ (800aa34 <UART_SetConfig+0x2d4>)
 800aa14:	fba2 2303 	umull	r2, r3, r2, r3
 800aa18:	095b      	lsrs	r3, r3, #5
 800aa1a:	f003 0207 	and.w	r2, r3, #7
 800aa1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4422      	add	r2, r4
 800aa26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa28:	e106      	b.n	800ac38 <UART_SetConfig+0x4d8>
 800aa2a:	bf00      	nop
 800aa2c:	40011000 	.word	0x40011000
 800aa30:	40011400 	.word	0x40011400
 800aa34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aa42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800aa46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800aa4a:	4642      	mov	r2, r8
 800aa4c:	464b      	mov	r3, r9
 800aa4e:	1891      	adds	r1, r2, r2
 800aa50:	6239      	str	r1, [r7, #32]
 800aa52:	415b      	adcs	r3, r3
 800aa54:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa5a:	4641      	mov	r1, r8
 800aa5c:	1854      	adds	r4, r2, r1
 800aa5e:	4649      	mov	r1, r9
 800aa60:	eb43 0501 	adc.w	r5, r3, r1
 800aa64:	f04f 0200 	mov.w	r2, #0
 800aa68:	f04f 0300 	mov.w	r3, #0
 800aa6c:	00eb      	lsls	r3, r5, #3
 800aa6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa72:	00e2      	lsls	r2, r4, #3
 800aa74:	4614      	mov	r4, r2
 800aa76:	461d      	mov	r5, r3
 800aa78:	4643      	mov	r3, r8
 800aa7a:	18e3      	adds	r3, r4, r3
 800aa7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa80:	464b      	mov	r3, r9
 800aa82:	eb45 0303 	adc.w	r3, r5, r3
 800aa86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aa8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aa9a:	f04f 0200 	mov.w	r2, #0
 800aa9e:	f04f 0300 	mov.w	r3, #0
 800aaa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	008b      	lsls	r3, r1, #2
 800aaaa:	4621      	mov	r1, r4
 800aaac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aab0:	4621      	mov	r1, r4
 800aab2:	008a      	lsls	r2, r1, #2
 800aab4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800aab8:	f7f6 f8ce 	bl	8000c58 <__aeabi_uldivmod>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4b60      	ldr	r3, [pc, #384]	@ (800ac44 <UART_SetConfig+0x4e4>)
 800aac2:	fba3 2302 	umull	r2, r3, r3, r2
 800aac6:	095b      	lsrs	r3, r3, #5
 800aac8:	011c      	lsls	r4, r3, #4
 800aaca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aace:	2200      	movs	r2, #0
 800aad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aad4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800aad8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800aadc:	4642      	mov	r2, r8
 800aade:	464b      	mov	r3, r9
 800aae0:	1891      	adds	r1, r2, r2
 800aae2:	61b9      	str	r1, [r7, #24]
 800aae4:	415b      	adcs	r3, r3
 800aae6:	61fb      	str	r3, [r7, #28]
 800aae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aaec:	4641      	mov	r1, r8
 800aaee:	1851      	adds	r1, r2, r1
 800aaf0:	6139      	str	r1, [r7, #16]
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	414b      	adcs	r3, r1
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	f04f 0200 	mov.w	r2, #0
 800aafc:	f04f 0300 	mov.w	r3, #0
 800ab00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab04:	4659      	mov	r1, fp
 800ab06:	00cb      	lsls	r3, r1, #3
 800ab08:	4651      	mov	r1, sl
 800ab0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab0e:	4651      	mov	r1, sl
 800ab10:	00ca      	lsls	r2, r1, #3
 800ab12:	4610      	mov	r0, r2
 800ab14:	4619      	mov	r1, r3
 800ab16:	4603      	mov	r3, r0
 800ab18:	4642      	mov	r2, r8
 800ab1a:	189b      	adds	r3, r3, r2
 800ab1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab20:	464b      	mov	r3, r9
 800ab22:	460a      	mov	r2, r1
 800ab24:	eb42 0303 	adc.w	r3, r2, r3
 800ab28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ab38:	f04f 0200 	mov.w	r2, #0
 800ab3c:	f04f 0300 	mov.w	r3, #0
 800ab40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ab44:	4649      	mov	r1, r9
 800ab46:	008b      	lsls	r3, r1, #2
 800ab48:	4641      	mov	r1, r8
 800ab4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab4e:	4641      	mov	r1, r8
 800ab50:	008a      	lsls	r2, r1, #2
 800ab52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ab56:	f7f6 f87f 	bl	8000c58 <__aeabi_uldivmod>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	4611      	mov	r1, r2
 800ab60:	4b38      	ldr	r3, [pc, #224]	@ (800ac44 <UART_SetConfig+0x4e4>)
 800ab62:	fba3 2301 	umull	r2, r3, r3, r1
 800ab66:	095b      	lsrs	r3, r3, #5
 800ab68:	2264      	movs	r2, #100	@ 0x64
 800ab6a:	fb02 f303 	mul.w	r3, r2, r3
 800ab6e:	1acb      	subs	r3, r1, r3
 800ab70:	011b      	lsls	r3, r3, #4
 800ab72:	3332      	adds	r3, #50	@ 0x32
 800ab74:	4a33      	ldr	r2, [pc, #204]	@ (800ac44 <UART_SetConfig+0x4e4>)
 800ab76:	fba2 2303 	umull	r2, r3, r2, r3
 800ab7a:	095b      	lsrs	r3, r3, #5
 800ab7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab80:	441c      	add	r4, r3
 800ab82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab86:	2200      	movs	r2, #0
 800ab88:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab8a:	677a      	str	r2, [r7, #116]	@ 0x74
 800ab8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ab90:	4642      	mov	r2, r8
 800ab92:	464b      	mov	r3, r9
 800ab94:	1891      	adds	r1, r2, r2
 800ab96:	60b9      	str	r1, [r7, #8]
 800ab98:	415b      	adcs	r3, r3
 800ab9a:	60fb      	str	r3, [r7, #12]
 800ab9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aba0:	4641      	mov	r1, r8
 800aba2:	1851      	adds	r1, r2, r1
 800aba4:	6039      	str	r1, [r7, #0]
 800aba6:	4649      	mov	r1, r9
 800aba8:	414b      	adcs	r3, r1
 800abaa:	607b      	str	r3, [r7, #4]
 800abac:	f04f 0200 	mov.w	r2, #0
 800abb0:	f04f 0300 	mov.w	r3, #0
 800abb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800abb8:	4659      	mov	r1, fp
 800abba:	00cb      	lsls	r3, r1, #3
 800abbc:	4651      	mov	r1, sl
 800abbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abc2:	4651      	mov	r1, sl
 800abc4:	00ca      	lsls	r2, r1, #3
 800abc6:	4610      	mov	r0, r2
 800abc8:	4619      	mov	r1, r3
 800abca:	4603      	mov	r3, r0
 800abcc:	4642      	mov	r2, r8
 800abce:	189b      	adds	r3, r3, r2
 800abd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800abd2:	464b      	mov	r3, r9
 800abd4:	460a      	mov	r2, r1
 800abd6:	eb42 0303 	adc.w	r3, r2, r3
 800abda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800abdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	663b      	str	r3, [r7, #96]	@ 0x60
 800abe6:	667a      	str	r2, [r7, #100]	@ 0x64
 800abe8:	f04f 0200 	mov.w	r2, #0
 800abec:	f04f 0300 	mov.w	r3, #0
 800abf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800abf4:	4649      	mov	r1, r9
 800abf6:	008b      	lsls	r3, r1, #2
 800abf8:	4641      	mov	r1, r8
 800abfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abfe:	4641      	mov	r1, r8
 800ac00:	008a      	lsls	r2, r1, #2
 800ac02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ac06:	f7f6 f827 	bl	8000c58 <__aeabi_uldivmod>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac44 <UART_SetConfig+0x4e4>)
 800ac10:	fba3 1302 	umull	r1, r3, r3, r2
 800ac14:	095b      	lsrs	r3, r3, #5
 800ac16:	2164      	movs	r1, #100	@ 0x64
 800ac18:	fb01 f303 	mul.w	r3, r1, r3
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	011b      	lsls	r3, r3, #4
 800ac20:	3332      	adds	r3, #50	@ 0x32
 800ac22:	4a08      	ldr	r2, [pc, #32]	@ (800ac44 <UART_SetConfig+0x4e4>)
 800ac24:	fba2 2303 	umull	r2, r3, r2, r3
 800ac28:	095b      	lsrs	r3, r3, #5
 800ac2a:	f003 020f 	and.w	r2, r3, #15
 800ac2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4422      	add	r2, r4
 800ac36:	609a      	str	r2, [r3, #8]
}
 800ac38:	bf00      	nop
 800ac3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac44:	51eb851f 	.word	0x51eb851f

0800ac48 <__cvt>:
 800ac48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac4c:	ec57 6b10 	vmov	r6, r7, d0
 800ac50:	2f00      	cmp	r7, #0
 800ac52:	460c      	mov	r4, r1
 800ac54:	4619      	mov	r1, r3
 800ac56:	463b      	mov	r3, r7
 800ac58:	bfbb      	ittet	lt
 800ac5a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ac5e:	461f      	movlt	r7, r3
 800ac60:	2300      	movge	r3, #0
 800ac62:	232d      	movlt	r3, #45	@ 0x2d
 800ac64:	700b      	strb	r3, [r1, #0]
 800ac66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ac6c:	4691      	mov	r9, r2
 800ac6e:	f023 0820 	bic.w	r8, r3, #32
 800ac72:	bfbc      	itt	lt
 800ac74:	4632      	movlt	r2, r6
 800ac76:	4616      	movlt	r6, r2
 800ac78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac7c:	d005      	beq.n	800ac8a <__cvt+0x42>
 800ac7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ac82:	d100      	bne.n	800ac86 <__cvt+0x3e>
 800ac84:	3401      	adds	r4, #1
 800ac86:	2102      	movs	r1, #2
 800ac88:	e000      	b.n	800ac8c <__cvt+0x44>
 800ac8a:	2103      	movs	r1, #3
 800ac8c:	ab03      	add	r3, sp, #12
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	ab02      	add	r3, sp, #8
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	ec47 6b10 	vmov	d0, r6, r7
 800ac98:	4653      	mov	r3, sl
 800ac9a:	4622      	mov	r2, r4
 800ac9c:	f000 fea8 	bl	800b9f0 <_dtoa_r>
 800aca0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aca4:	4605      	mov	r5, r0
 800aca6:	d119      	bne.n	800acdc <__cvt+0x94>
 800aca8:	f019 0f01 	tst.w	r9, #1
 800acac:	d00e      	beq.n	800accc <__cvt+0x84>
 800acae:	eb00 0904 	add.w	r9, r0, r4
 800acb2:	2200      	movs	r2, #0
 800acb4:	2300      	movs	r3, #0
 800acb6:	4630      	mov	r0, r6
 800acb8:	4639      	mov	r1, r7
 800acba:	f7f5 ff0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800acbe:	b108      	cbz	r0, 800acc4 <__cvt+0x7c>
 800acc0:	f8cd 900c 	str.w	r9, [sp, #12]
 800acc4:	2230      	movs	r2, #48	@ 0x30
 800acc6:	9b03      	ldr	r3, [sp, #12]
 800acc8:	454b      	cmp	r3, r9
 800acca:	d31e      	bcc.n	800ad0a <__cvt+0xc2>
 800accc:	9b03      	ldr	r3, [sp, #12]
 800acce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acd0:	1b5b      	subs	r3, r3, r5
 800acd2:	4628      	mov	r0, r5
 800acd4:	6013      	str	r3, [r2, #0]
 800acd6:	b004      	add	sp, #16
 800acd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acdc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ace0:	eb00 0904 	add.w	r9, r0, r4
 800ace4:	d1e5      	bne.n	800acb2 <__cvt+0x6a>
 800ace6:	7803      	ldrb	r3, [r0, #0]
 800ace8:	2b30      	cmp	r3, #48	@ 0x30
 800acea:	d10a      	bne.n	800ad02 <__cvt+0xba>
 800acec:	2200      	movs	r2, #0
 800acee:	2300      	movs	r3, #0
 800acf0:	4630      	mov	r0, r6
 800acf2:	4639      	mov	r1, r7
 800acf4:	f7f5 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 800acf8:	b918      	cbnz	r0, 800ad02 <__cvt+0xba>
 800acfa:	f1c4 0401 	rsb	r4, r4, #1
 800acfe:	f8ca 4000 	str.w	r4, [sl]
 800ad02:	f8da 3000 	ldr.w	r3, [sl]
 800ad06:	4499      	add	r9, r3
 800ad08:	e7d3      	b.n	800acb2 <__cvt+0x6a>
 800ad0a:	1c59      	adds	r1, r3, #1
 800ad0c:	9103      	str	r1, [sp, #12]
 800ad0e:	701a      	strb	r2, [r3, #0]
 800ad10:	e7d9      	b.n	800acc6 <__cvt+0x7e>

0800ad12 <__exponent>:
 800ad12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad14:	2900      	cmp	r1, #0
 800ad16:	bfba      	itte	lt
 800ad18:	4249      	neglt	r1, r1
 800ad1a:	232d      	movlt	r3, #45	@ 0x2d
 800ad1c:	232b      	movge	r3, #43	@ 0x2b
 800ad1e:	2909      	cmp	r1, #9
 800ad20:	7002      	strb	r2, [r0, #0]
 800ad22:	7043      	strb	r3, [r0, #1]
 800ad24:	dd29      	ble.n	800ad7a <__exponent+0x68>
 800ad26:	f10d 0307 	add.w	r3, sp, #7
 800ad2a:	461d      	mov	r5, r3
 800ad2c:	270a      	movs	r7, #10
 800ad2e:	461a      	mov	r2, r3
 800ad30:	fbb1 f6f7 	udiv	r6, r1, r7
 800ad34:	fb07 1416 	mls	r4, r7, r6, r1
 800ad38:	3430      	adds	r4, #48	@ 0x30
 800ad3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ad3e:	460c      	mov	r4, r1
 800ad40:	2c63      	cmp	r4, #99	@ 0x63
 800ad42:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad46:	4631      	mov	r1, r6
 800ad48:	dcf1      	bgt.n	800ad2e <__exponent+0x1c>
 800ad4a:	3130      	adds	r1, #48	@ 0x30
 800ad4c:	1e94      	subs	r4, r2, #2
 800ad4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad52:	1c41      	adds	r1, r0, #1
 800ad54:	4623      	mov	r3, r4
 800ad56:	42ab      	cmp	r3, r5
 800ad58:	d30a      	bcc.n	800ad70 <__exponent+0x5e>
 800ad5a:	f10d 0309 	add.w	r3, sp, #9
 800ad5e:	1a9b      	subs	r3, r3, r2
 800ad60:	42ac      	cmp	r4, r5
 800ad62:	bf88      	it	hi
 800ad64:	2300      	movhi	r3, #0
 800ad66:	3302      	adds	r3, #2
 800ad68:	4403      	add	r3, r0
 800ad6a:	1a18      	subs	r0, r3, r0
 800ad6c:	b003      	add	sp, #12
 800ad6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad70:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ad74:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ad78:	e7ed      	b.n	800ad56 <__exponent+0x44>
 800ad7a:	2330      	movs	r3, #48	@ 0x30
 800ad7c:	3130      	adds	r1, #48	@ 0x30
 800ad7e:	7083      	strb	r3, [r0, #2]
 800ad80:	70c1      	strb	r1, [r0, #3]
 800ad82:	1d03      	adds	r3, r0, #4
 800ad84:	e7f1      	b.n	800ad6a <__exponent+0x58>
	...

0800ad88 <_printf_float>:
 800ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	b08d      	sub	sp, #52	@ 0x34
 800ad8e:	460c      	mov	r4, r1
 800ad90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ad94:	4616      	mov	r6, r2
 800ad96:	461f      	mov	r7, r3
 800ad98:	4605      	mov	r5, r0
 800ad9a:	f000 fd27 	bl	800b7ec <_localeconv_r>
 800ad9e:	6803      	ldr	r3, [r0, #0]
 800ada0:	9304      	str	r3, [sp, #16]
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7f5 fa6c 	bl	8000280 <strlen>
 800ada8:	2300      	movs	r3, #0
 800adaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800adac:	f8d8 3000 	ldr.w	r3, [r8]
 800adb0:	9005      	str	r0, [sp, #20]
 800adb2:	3307      	adds	r3, #7
 800adb4:	f023 0307 	bic.w	r3, r3, #7
 800adb8:	f103 0208 	add.w	r2, r3, #8
 800adbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800adc0:	f8d4 b000 	ldr.w	fp, [r4]
 800adc4:	f8c8 2000 	str.w	r2, [r8]
 800adc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800adcc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800add0:	9307      	str	r3, [sp, #28]
 800add2:	f8cd 8018 	str.w	r8, [sp, #24]
 800add6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800adda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adde:	4b9c      	ldr	r3, [pc, #624]	@ (800b050 <_printf_float+0x2c8>)
 800ade0:	f04f 32ff 	mov.w	r2, #4294967295
 800ade4:	f7f5 feaa 	bl	8000b3c <__aeabi_dcmpun>
 800ade8:	bb70      	cbnz	r0, 800ae48 <_printf_float+0xc0>
 800adea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adee:	4b98      	ldr	r3, [pc, #608]	@ (800b050 <_printf_float+0x2c8>)
 800adf0:	f04f 32ff 	mov.w	r2, #4294967295
 800adf4:	f7f5 fe84 	bl	8000b00 <__aeabi_dcmple>
 800adf8:	bb30      	cbnz	r0, 800ae48 <_printf_float+0xc0>
 800adfa:	2200      	movs	r2, #0
 800adfc:	2300      	movs	r3, #0
 800adfe:	4640      	mov	r0, r8
 800ae00:	4649      	mov	r1, r9
 800ae02:	f7f5 fe73 	bl	8000aec <__aeabi_dcmplt>
 800ae06:	b110      	cbz	r0, 800ae0e <_printf_float+0x86>
 800ae08:	232d      	movs	r3, #45	@ 0x2d
 800ae0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae0e:	4a91      	ldr	r2, [pc, #580]	@ (800b054 <_printf_float+0x2cc>)
 800ae10:	4b91      	ldr	r3, [pc, #580]	@ (800b058 <_printf_float+0x2d0>)
 800ae12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae16:	bf8c      	ite	hi
 800ae18:	4690      	movhi	r8, r2
 800ae1a:	4698      	movls	r8, r3
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	6123      	str	r3, [r4, #16]
 800ae20:	f02b 0304 	bic.w	r3, fp, #4
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	f04f 0900 	mov.w	r9, #0
 800ae2a:	9700      	str	r7, [sp, #0]
 800ae2c:	4633      	mov	r3, r6
 800ae2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ae30:	4621      	mov	r1, r4
 800ae32:	4628      	mov	r0, r5
 800ae34:	f000 f9d2 	bl	800b1dc <_printf_common>
 800ae38:	3001      	adds	r0, #1
 800ae3a:	f040 808d 	bne.w	800af58 <_printf_float+0x1d0>
 800ae3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae42:	b00d      	add	sp, #52	@ 0x34
 800ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae48:	4642      	mov	r2, r8
 800ae4a:	464b      	mov	r3, r9
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	4649      	mov	r1, r9
 800ae50:	f7f5 fe74 	bl	8000b3c <__aeabi_dcmpun>
 800ae54:	b140      	cbz	r0, 800ae68 <_printf_float+0xe0>
 800ae56:	464b      	mov	r3, r9
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	bfbc      	itt	lt
 800ae5c:	232d      	movlt	r3, #45	@ 0x2d
 800ae5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ae62:	4a7e      	ldr	r2, [pc, #504]	@ (800b05c <_printf_float+0x2d4>)
 800ae64:	4b7e      	ldr	r3, [pc, #504]	@ (800b060 <_printf_float+0x2d8>)
 800ae66:	e7d4      	b.n	800ae12 <_printf_float+0x8a>
 800ae68:	6863      	ldr	r3, [r4, #4]
 800ae6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ae6e:	9206      	str	r2, [sp, #24]
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	d13b      	bne.n	800aeec <_printf_float+0x164>
 800ae74:	2306      	movs	r3, #6
 800ae76:	6063      	str	r3, [r4, #4]
 800ae78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	6022      	str	r2, [r4, #0]
 800ae80:	9303      	str	r3, [sp, #12]
 800ae82:	ab0a      	add	r3, sp, #40	@ 0x28
 800ae84:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ae88:	ab09      	add	r3, sp, #36	@ 0x24
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	6861      	ldr	r1, [r4, #4]
 800ae8e:	ec49 8b10 	vmov	d0, r8, r9
 800ae92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ae96:	4628      	mov	r0, r5
 800ae98:	f7ff fed6 	bl	800ac48 <__cvt>
 800ae9c:	9b06      	ldr	r3, [sp, #24]
 800ae9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aea0:	2b47      	cmp	r3, #71	@ 0x47
 800aea2:	4680      	mov	r8, r0
 800aea4:	d129      	bne.n	800aefa <_printf_float+0x172>
 800aea6:	1cc8      	adds	r0, r1, #3
 800aea8:	db02      	blt.n	800aeb0 <_printf_float+0x128>
 800aeaa:	6863      	ldr	r3, [r4, #4]
 800aeac:	4299      	cmp	r1, r3
 800aeae:	dd41      	ble.n	800af34 <_printf_float+0x1ac>
 800aeb0:	f1aa 0a02 	sub.w	sl, sl, #2
 800aeb4:	fa5f fa8a 	uxtb.w	sl, sl
 800aeb8:	3901      	subs	r1, #1
 800aeba:	4652      	mov	r2, sl
 800aebc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aec0:	9109      	str	r1, [sp, #36]	@ 0x24
 800aec2:	f7ff ff26 	bl	800ad12 <__exponent>
 800aec6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aec8:	1813      	adds	r3, r2, r0
 800aeca:	2a01      	cmp	r2, #1
 800aecc:	4681      	mov	r9, r0
 800aece:	6123      	str	r3, [r4, #16]
 800aed0:	dc02      	bgt.n	800aed8 <_printf_float+0x150>
 800aed2:	6822      	ldr	r2, [r4, #0]
 800aed4:	07d2      	lsls	r2, r2, #31
 800aed6:	d501      	bpl.n	800aedc <_printf_float+0x154>
 800aed8:	3301      	adds	r3, #1
 800aeda:	6123      	str	r3, [r4, #16]
 800aedc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0a2      	beq.n	800ae2a <_printf_float+0xa2>
 800aee4:	232d      	movs	r3, #45	@ 0x2d
 800aee6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aeea:	e79e      	b.n	800ae2a <_printf_float+0xa2>
 800aeec:	9a06      	ldr	r2, [sp, #24]
 800aeee:	2a47      	cmp	r2, #71	@ 0x47
 800aef0:	d1c2      	bne.n	800ae78 <_printf_float+0xf0>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1c0      	bne.n	800ae78 <_printf_float+0xf0>
 800aef6:	2301      	movs	r3, #1
 800aef8:	e7bd      	b.n	800ae76 <_printf_float+0xee>
 800aefa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aefe:	d9db      	bls.n	800aeb8 <_printf_float+0x130>
 800af00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800af04:	d118      	bne.n	800af38 <_printf_float+0x1b0>
 800af06:	2900      	cmp	r1, #0
 800af08:	6863      	ldr	r3, [r4, #4]
 800af0a:	dd0b      	ble.n	800af24 <_printf_float+0x19c>
 800af0c:	6121      	str	r1, [r4, #16]
 800af0e:	b913      	cbnz	r3, 800af16 <_printf_float+0x18e>
 800af10:	6822      	ldr	r2, [r4, #0]
 800af12:	07d0      	lsls	r0, r2, #31
 800af14:	d502      	bpl.n	800af1c <_printf_float+0x194>
 800af16:	3301      	adds	r3, #1
 800af18:	440b      	add	r3, r1
 800af1a:	6123      	str	r3, [r4, #16]
 800af1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af1e:	f04f 0900 	mov.w	r9, #0
 800af22:	e7db      	b.n	800aedc <_printf_float+0x154>
 800af24:	b913      	cbnz	r3, 800af2c <_printf_float+0x1a4>
 800af26:	6822      	ldr	r2, [r4, #0]
 800af28:	07d2      	lsls	r2, r2, #31
 800af2a:	d501      	bpl.n	800af30 <_printf_float+0x1a8>
 800af2c:	3302      	adds	r3, #2
 800af2e:	e7f4      	b.n	800af1a <_printf_float+0x192>
 800af30:	2301      	movs	r3, #1
 800af32:	e7f2      	b.n	800af1a <_printf_float+0x192>
 800af34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800af38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af3a:	4299      	cmp	r1, r3
 800af3c:	db05      	blt.n	800af4a <_printf_float+0x1c2>
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	6121      	str	r1, [r4, #16]
 800af42:	07d8      	lsls	r0, r3, #31
 800af44:	d5ea      	bpl.n	800af1c <_printf_float+0x194>
 800af46:	1c4b      	adds	r3, r1, #1
 800af48:	e7e7      	b.n	800af1a <_printf_float+0x192>
 800af4a:	2900      	cmp	r1, #0
 800af4c:	bfd4      	ite	le
 800af4e:	f1c1 0202 	rsble	r2, r1, #2
 800af52:	2201      	movgt	r2, #1
 800af54:	4413      	add	r3, r2
 800af56:	e7e0      	b.n	800af1a <_printf_float+0x192>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	055a      	lsls	r2, r3, #21
 800af5c:	d407      	bmi.n	800af6e <_printf_float+0x1e6>
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	4642      	mov	r2, r8
 800af62:	4631      	mov	r1, r6
 800af64:	4628      	mov	r0, r5
 800af66:	47b8      	blx	r7
 800af68:	3001      	adds	r0, #1
 800af6a:	d12b      	bne.n	800afc4 <_printf_float+0x23c>
 800af6c:	e767      	b.n	800ae3e <_printf_float+0xb6>
 800af6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af72:	f240 80dd 	bls.w	800b130 <_printf_float+0x3a8>
 800af76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af7a:	2200      	movs	r2, #0
 800af7c:	2300      	movs	r3, #0
 800af7e:	f7f5 fdab 	bl	8000ad8 <__aeabi_dcmpeq>
 800af82:	2800      	cmp	r0, #0
 800af84:	d033      	beq.n	800afee <_printf_float+0x266>
 800af86:	4a37      	ldr	r2, [pc, #220]	@ (800b064 <_printf_float+0x2dc>)
 800af88:	2301      	movs	r3, #1
 800af8a:	4631      	mov	r1, r6
 800af8c:	4628      	mov	r0, r5
 800af8e:	47b8      	blx	r7
 800af90:	3001      	adds	r0, #1
 800af92:	f43f af54 	beq.w	800ae3e <_printf_float+0xb6>
 800af96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800af9a:	4543      	cmp	r3, r8
 800af9c:	db02      	blt.n	800afa4 <_printf_float+0x21c>
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	07d8      	lsls	r0, r3, #31
 800afa2:	d50f      	bpl.n	800afc4 <_printf_float+0x23c>
 800afa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afa8:	4631      	mov	r1, r6
 800afaa:	4628      	mov	r0, r5
 800afac:	47b8      	blx	r7
 800afae:	3001      	adds	r0, #1
 800afb0:	f43f af45 	beq.w	800ae3e <_printf_float+0xb6>
 800afb4:	f04f 0900 	mov.w	r9, #0
 800afb8:	f108 38ff 	add.w	r8, r8, #4294967295
 800afbc:	f104 0a1a 	add.w	sl, r4, #26
 800afc0:	45c8      	cmp	r8, r9
 800afc2:	dc09      	bgt.n	800afd8 <_printf_float+0x250>
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	079b      	lsls	r3, r3, #30
 800afc8:	f100 8103 	bmi.w	800b1d2 <_printf_float+0x44a>
 800afcc:	68e0      	ldr	r0, [r4, #12]
 800afce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afd0:	4298      	cmp	r0, r3
 800afd2:	bfb8      	it	lt
 800afd4:	4618      	movlt	r0, r3
 800afd6:	e734      	b.n	800ae42 <_printf_float+0xba>
 800afd8:	2301      	movs	r3, #1
 800afda:	4652      	mov	r2, sl
 800afdc:	4631      	mov	r1, r6
 800afde:	4628      	mov	r0, r5
 800afe0:	47b8      	blx	r7
 800afe2:	3001      	adds	r0, #1
 800afe4:	f43f af2b 	beq.w	800ae3e <_printf_float+0xb6>
 800afe8:	f109 0901 	add.w	r9, r9, #1
 800afec:	e7e8      	b.n	800afc0 <_printf_float+0x238>
 800afee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	dc39      	bgt.n	800b068 <_printf_float+0x2e0>
 800aff4:	4a1b      	ldr	r2, [pc, #108]	@ (800b064 <_printf_float+0x2dc>)
 800aff6:	2301      	movs	r3, #1
 800aff8:	4631      	mov	r1, r6
 800affa:	4628      	mov	r0, r5
 800affc:	47b8      	blx	r7
 800affe:	3001      	adds	r0, #1
 800b000:	f43f af1d 	beq.w	800ae3e <_printf_float+0xb6>
 800b004:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b008:	ea59 0303 	orrs.w	r3, r9, r3
 800b00c:	d102      	bne.n	800b014 <_printf_float+0x28c>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	07d9      	lsls	r1, r3, #31
 800b012:	d5d7      	bpl.n	800afc4 <_printf_float+0x23c>
 800b014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b018:	4631      	mov	r1, r6
 800b01a:	4628      	mov	r0, r5
 800b01c:	47b8      	blx	r7
 800b01e:	3001      	adds	r0, #1
 800b020:	f43f af0d 	beq.w	800ae3e <_printf_float+0xb6>
 800b024:	f04f 0a00 	mov.w	sl, #0
 800b028:	f104 0b1a 	add.w	fp, r4, #26
 800b02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02e:	425b      	negs	r3, r3
 800b030:	4553      	cmp	r3, sl
 800b032:	dc01      	bgt.n	800b038 <_printf_float+0x2b0>
 800b034:	464b      	mov	r3, r9
 800b036:	e793      	b.n	800af60 <_printf_float+0x1d8>
 800b038:	2301      	movs	r3, #1
 800b03a:	465a      	mov	r2, fp
 800b03c:	4631      	mov	r1, r6
 800b03e:	4628      	mov	r0, r5
 800b040:	47b8      	blx	r7
 800b042:	3001      	adds	r0, #1
 800b044:	f43f aefb 	beq.w	800ae3e <_printf_float+0xb6>
 800b048:	f10a 0a01 	add.w	sl, sl, #1
 800b04c:	e7ee      	b.n	800b02c <_printf_float+0x2a4>
 800b04e:	bf00      	nop
 800b050:	7fefffff 	.word	0x7fefffff
 800b054:	0800f930 	.word	0x0800f930
 800b058:	0800f92c 	.word	0x0800f92c
 800b05c:	0800f938 	.word	0x0800f938
 800b060:	0800f934 	.word	0x0800f934
 800b064:	0800f93c 	.word	0x0800f93c
 800b068:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b06a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b06e:	4553      	cmp	r3, sl
 800b070:	bfa8      	it	ge
 800b072:	4653      	movge	r3, sl
 800b074:	2b00      	cmp	r3, #0
 800b076:	4699      	mov	r9, r3
 800b078:	dc36      	bgt.n	800b0e8 <_printf_float+0x360>
 800b07a:	f04f 0b00 	mov.w	fp, #0
 800b07e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b082:	f104 021a 	add.w	r2, r4, #26
 800b086:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b088:	9306      	str	r3, [sp, #24]
 800b08a:	eba3 0309 	sub.w	r3, r3, r9
 800b08e:	455b      	cmp	r3, fp
 800b090:	dc31      	bgt.n	800b0f6 <_printf_float+0x36e>
 800b092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b094:	459a      	cmp	sl, r3
 800b096:	dc3a      	bgt.n	800b10e <_printf_float+0x386>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	07da      	lsls	r2, r3, #31
 800b09c:	d437      	bmi.n	800b10e <_printf_float+0x386>
 800b09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a0:	ebaa 0903 	sub.w	r9, sl, r3
 800b0a4:	9b06      	ldr	r3, [sp, #24]
 800b0a6:	ebaa 0303 	sub.w	r3, sl, r3
 800b0aa:	4599      	cmp	r9, r3
 800b0ac:	bfa8      	it	ge
 800b0ae:	4699      	movge	r9, r3
 800b0b0:	f1b9 0f00 	cmp.w	r9, #0
 800b0b4:	dc33      	bgt.n	800b11e <_printf_float+0x396>
 800b0b6:	f04f 0800 	mov.w	r8, #0
 800b0ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0be:	f104 0b1a 	add.w	fp, r4, #26
 800b0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c4:	ebaa 0303 	sub.w	r3, sl, r3
 800b0c8:	eba3 0309 	sub.w	r3, r3, r9
 800b0cc:	4543      	cmp	r3, r8
 800b0ce:	f77f af79 	ble.w	800afc4 <_printf_float+0x23c>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	465a      	mov	r2, fp
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	4628      	mov	r0, r5
 800b0da:	47b8      	blx	r7
 800b0dc:	3001      	adds	r0, #1
 800b0de:	f43f aeae 	beq.w	800ae3e <_printf_float+0xb6>
 800b0e2:	f108 0801 	add.w	r8, r8, #1
 800b0e6:	e7ec      	b.n	800b0c2 <_printf_float+0x33a>
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	47b8      	blx	r7
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d1c2      	bne.n	800b07a <_printf_float+0x2f2>
 800b0f4:	e6a3      	b.n	800ae3e <_printf_float+0xb6>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	9206      	str	r2, [sp, #24]
 800b0fe:	47b8      	blx	r7
 800b100:	3001      	adds	r0, #1
 800b102:	f43f ae9c 	beq.w	800ae3e <_printf_float+0xb6>
 800b106:	9a06      	ldr	r2, [sp, #24]
 800b108:	f10b 0b01 	add.w	fp, fp, #1
 800b10c:	e7bb      	b.n	800b086 <_printf_float+0x2fe>
 800b10e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b112:	4631      	mov	r1, r6
 800b114:	4628      	mov	r0, r5
 800b116:	47b8      	blx	r7
 800b118:	3001      	adds	r0, #1
 800b11a:	d1c0      	bne.n	800b09e <_printf_float+0x316>
 800b11c:	e68f      	b.n	800ae3e <_printf_float+0xb6>
 800b11e:	9a06      	ldr	r2, [sp, #24]
 800b120:	464b      	mov	r3, r9
 800b122:	4442      	add	r2, r8
 800b124:	4631      	mov	r1, r6
 800b126:	4628      	mov	r0, r5
 800b128:	47b8      	blx	r7
 800b12a:	3001      	adds	r0, #1
 800b12c:	d1c3      	bne.n	800b0b6 <_printf_float+0x32e>
 800b12e:	e686      	b.n	800ae3e <_printf_float+0xb6>
 800b130:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b134:	f1ba 0f01 	cmp.w	sl, #1
 800b138:	dc01      	bgt.n	800b13e <_printf_float+0x3b6>
 800b13a:	07db      	lsls	r3, r3, #31
 800b13c:	d536      	bpl.n	800b1ac <_printf_float+0x424>
 800b13e:	2301      	movs	r3, #1
 800b140:	4642      	mov	r2, r8
 800b142:	4631      	mov	r1, r6
 800b144:	4628      	mov	r0, r5
 800b146:	47b8      	blx	r7
 800b148:	3001      	adds	r0, #1
 800b14a:	f43f ae78 	beq.w	800ae3e <_printf_float+0xb6>
 800b14e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b152:	4631      	mov	r1, r6
 800b154:	4628      	mov	r0, r5
 800b156:	47b8      	blx	r7
 800b158:	3001      	adds	r0, #1
 800b15a:	f43f ae70 	beq.w	800ae3e <_printf_float+0xb6>
 800b15e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b162:	2200      	movs	r2, #0
 800b164:	2300      	movs	r3, #0
 800b166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b16a:	f7f5 fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b16e:	b9c0      	cbnz	r0, 800b1a2 <_printf_float+0x41a>
 800b170:	4653      	mov	r3, sl
 800b172:	f108 0201 	add.w	r2, r8, #1
 800b176:	4631      	mov	r1, r6
 800b178:	4628      	mov	r0, r5
 800b17a:	47b8      	blx	r7
 800b17c:	3001      	adds	r0, #1
 800b17e:	d10c      	bne.n	800b19a <_printf_float+0x412>
 800b180:	e65d      	b.n	800ae3e <_printf_float+0xb6>
 800b182:	2301      	movs	r3, #1
 800b184:	465a      	mov	r2, fp
 800b186:	4631      	mov	r1, r6
 800b188:	4628      	mov	r0, r5
 800b18a:	47b8      	blx	r7
 800b18c:	3001      	adds	r0, #1
 800b18e:	f43f ae56 	beq.w	800ae3e <_printf_float+0xb6>
 800b192:	f108 0801 	add.w	r8, r8, #1
 800b196:	45d0      	cmp	r8, sl
 800b198:	dbf3      	blt.n	800b182 <_printf_float+0x3fa>
 800b19a:	464b      	mov	r3, r9
 800b19c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b1a0:	e6df      	b.n	800af62 <_printf_float+0x1da>
 800b1a2:	f04f 0800 	mov.w	r8, #0
 800b1a6:	f104 0b1a 	add.w	fp, r4, #26
 800b1aa:	e7f4      	b.n	800b196 <_printf_float+0x40e>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	4642      	mov	r2, r8
 800b1b0:	e7e1      	b.n	800b176 <_printf_float+0x3ee>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	464a      	mov	r2, r9
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b8      	blx	r7
 800b1bc:	3001      	adds	r0, #1
 800b1be:	f43f ae3e 	beq.w	800ae3e <_printf_float+0xb6>
 800b1c2:	f108 0801 	add.w	r8, r8, #1
 800b1c6:	68e3      	ldr	r3, [r4, #12]
 800b1c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1ca:	1a5b      	subs	r3, r3, r1
 800b1cc:	4543      	cmp	r3, r8
 800b1ce:	dcf0      	bgt.n	800b1b2 <_printf_float+0x42a>
 800b1d0:	e6fc      	b.n	800afcc <_printf_float+0x244>
 800b1d2:	f04f 0800 	mov.w	r8, #0
 800b1d6:	f104 0919 	add.w	r9, r4, #25
 800b1da:	e7f4      	b.n	800b1c6 <_printf_float+0x43e>

0800b1dc <_printf_common>:
 800b1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e0:	4616      	mov	r6, r2
 800b1e2:	4698      	mov	r8, r3
 800b1e4:	688a      	ldr	r2, [r1, #8]
 800b1e6:	690b      	ldr	r3, [r1, #16]
 800b1e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	bfb8      	it	lt
 800b1f0:	4613      	movlt	r3, r2
 800b1f2:	6033      	str	r3, [r6, #0]
 800b1f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b1f8:	4607      	mov	r7, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	b10a      	cbz	r2, 800b202 <_printf_common+0x26>
 800b1fe:	3301      	adds	r3, #1
 800b200:	6033      	str	r3, [r6, #0]
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	0699      	lsls	r1, r3, #26
 800b206:	bf42      	ittt	mi
 800b208:	6833      	ldrmi	r3, [r6, #0]
 800b20a:	3302      	addmi	r3, #2
 800b20c:	6033      	strmi	r3, [r6, #0]
 800b20e:	6825      	ldr	r5, [r4, #0]
 800b210:	f015 0506 	ands.w	r5, r5, #6
 800b214:	d106      	bne.n	800b224 <_printf_common+0x48>
 800b216:	f104 0a19 	add.w	sl, r4, #25
 800b21a:	68e3      	ldr	r3, [r4, #12]
 800b21c:	6832      	ldr	r2, [r6, #0]
 800b21e:	1a9b      	subs	r3, r3, r2
 800b220:	42ab      	cmp	r3, r5
 800b222:	dc26      	bgt.n	800b272 <_printf_common+0x96>
 800b224:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b228:	6822      	ldr	r2, [r4, #0]
 800b22a:	3b00      	subs	r3, #0
 800b22c:	bf18      	it	ne
 800b22e:	2301      	movne	r3, #1
 800b230:	0692      	lsls	r2, r2, #26
 800b232:	d42b      	bmi.n	800b28c <_printf_common+0xb0>
 800b234:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b238:	4641      	mov	r1, r8
 800b23a:	4638      	mov	r0, r7
 800b23c:	47c8      	blx	r9
 800b23e:	3001      	adds	r0, #1
 800b240:	d01e      	beq.n	800b280 <_printf_common+0xa4>
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	6922      	ldr	r2, [r4, #16]
 800b246:	f003 0306 	and.w	r3, r3, #6
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	bf02      	ittt	eq
 800b24e:	68e5      	ldreq	r5, [r4, #12]
 800b250:	6833      	ldreq	r3, [r6, #0]
 800b252:	1aed      	subeq	r5, r5, r3
 800b254:	68a3      	ldr	r3, [r4, #8]
 800b256:	bf0c      	ite	eq
 800b258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b25c:	2500      	movne	r5, #0
 800b25e:	4293      	cmp	r3, r2
 800b260:	bfc4      	itt	gt
 800b262:	1a9b      	subgt	r3, r3, r2
 800b264:	18ed      	addgt	r5, r5, r3
 800b266:	2600      	movs	r6, #0
 800b268:	341a      	adds	r4, #26
 800b26a:	42b5      	cmp	r5, r6
 800b26c:	d11a      	bne.n	800b2a4 <_printf_common+0xc8>
 800b26e:	2000      	movs	r0, #0
 800b270:	e008      	b.n	800b284 <_printf_common+0xa8>
 800b272:	2301      	movs	r3, #1
 800b274:	4652      	mov	r2, sl
 800b276:	4641      	mov	r1, r8
 800b278:	4638      	mov	r0, r7
 800b27a:	47c8      	blx	r9
 800b27c:	3001      	adds	r0, #1
 800b27e:	d103      	bne.n	800b288 <_printf_common+0xac>
 800b280:	f04f 30ff 	mov.w	r0, #4294967295
 800b284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b288:	3501      	adds	r5, #1
 800b28a:	e7c6      	b.n	800b21a <_printf_common+0x3e>
 800b28c:	18e1      	adds	r1, r4, r3
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	2030      	movs	r0, #48	@ 0x30
 800b292:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b296:	4422      	add	r2, r4
 800b298:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b29c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2a0:	3302      	adds	r3, #2
 800b2a2:	e7c7      	b.n	800b234 <_printf_common+0x58>
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	4641      	mov	r1, r8
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	47c8      	blx	r9
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	d0e6      	beq.n	800b280 <_printf_common+0xa4>
 800b2b2:	3601      	adds	r6, #1
 800b2b4:	e7d9      	b.n	800b26a <_printf_common+0x8e>
	...

0800b2b8 <_printf_i>:
 800b2b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2bc:	7e0f      	ldrb	r7, [r1, #24]
 800b2be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2c0:	2f78      	cmp	r7, #120	@ 0x78
 800b2c2:	4691      	mov	r9, r2
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	469a      	mov	sl, r3
 800b2ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b2ce:	d807      	bhi.n	800b2e0 <_printf_i+0x28>
 800b2d0:	2f62      	cmp	r7, #98	@ 0x62
 800b2d2:	d80a      	bhi.n	800b2ea <_printf_i+0x32>
 800b2d4:	2f00      	cmp	r7, #0
 800b2d6:	f000 80d1 	beq.w	800b47c <_printf_i+0x1c4>
 800b2da:	2f58      	cmp	r7, #88	@ 0x58
 800b2dc:	f000 80b8 	beq.w	800b450 <_printf_i+0x198>
 800b2e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b2e8:	e03a      	b.n	800b360 <_printf_i+0xa8>
 800b2ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b2ee:	2b15      	cmp	r3, #21
 800b2f0:	d8f6      	bhi.n	800b2e0 <_printf_i+0x28>
 800b2f2:	a101      	add	r1, pc, #4	@ (adr r1, 800b2f8 <_printf_i+0x40>)
 800b2f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2f8:	0800b351 	.word	0x0800b351
 800b2fc:	0800b365 	.word	0x0800b365
 800b300:	0800b2e1 	.word	0x0800b2e1
 800b304:	0800b2e1 	.word	0x0800b2e1
 800b308:	0800b2e1 	.word	0x0800b2e1
 800b30c:	0800b2e1 	.word	0x0800b2e1
 800b310:	0800b365 	.word	0x0800b365
 800b314:	0800b2e1 	.word	0x0800b2e1
 800b318:	0800b2e1 	.word	0x0800b2e1
 800b31c:	0800b2e1 	.word	0x0800b2e1
 800b320:	0800b2e1 	.word	0x0800b2e1
 800b324:	0800b463 	.word	0x0800b463
 800b328:	0800b38f 	.word	0x0800b38f
 800b32c:	0800b41d 	.word	0x0800b41d
 800b330:	0800b2e1 	.word	0x0800b2e1
 800b334:	0800b2e1 	.word	0x0800b2e1
 800b338:	0800b485 	.word	0x0800b485
 800b33c:	0800b2e1 	.word	0x0800b2e1
 800b340:	0800b38f 	.word	0x0800b38f
 800b344:	0800b2e1 	.word	0x0800b2e1
 800b348:	0800b2e1 	.word	0x0800b2e1
 800b34c:	0800b425 	.word	0x0800b425
 800b350:	6833      	ldr	r3, [r6, #0]
 800b352:	1d1a      	adds	r2, r3, #4
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6032      	str	r2, [r6, #0]
 800b358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b35c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b360:	2301      	movs	r3, #1
 800b362:	e09c      	b.n	800b49e <_printf_i+0x1e6>
 800b364:	6833      	ldr	r3, [r6, #0]
 800b366:	6820      	ldr	r0, [r4, #0]
 800b368:	1d19      	adds	r1, r3, #4
 800b36a:	6031      	str	r1, [r6, #0]
 800b36c:	0606      	lsls	r6, r0, #24
 800b36e:	d501      	bpl.n	800b374 <_printf_i+0xbc>
 800b370:	681d      	ldr	r5, [r3, #0]
 800b372:	e003      	b.n	800b37c <_printf_i+0xc4>
 800b374:	0645      	lsls	r5, r0, #25
 800b376:	d5fb      	bpl.n	800b370 <_printf_i+0xb8>
 800b378:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b37c:	2d00      	cmp	r5, #0
 800b37e:	da03      	bge.n	800b388 <_printf_i+0xd0>
 800b380:	232d      	movs	r3, #45	@ 0x2d
 800b382:	426d      	negs	r5, r5
 800b384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b388:	4858      	ldr	r0, [pc, #352]	@ (800b4ec <_printf_i+0x234>)
 800b38a:	230a      	movs	r3, #10
 800b38c:	e011      	b.n	800b3b2 <_printf_i+0xfa>
 800b38e:	6821      	ldr	r1, [r4, #0]
 800b390:	6833      	ldr	r3, [r6, #0]
 800b392:	0608      	lsls	r0, r1, #24
 800b394:	f853 5b04 	ldr.w	r5, [r3], #4
 800b398:	d402      	bmi.n	800b3a0 <_printf_i+0xe8>
 800b39a:	0649      	lsls	r1, r1, #25
 800b39c:	bf48      	it	mi
 800b39e:	b2ad      	uxthmi	r5, r5
 800b3a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3a2:	4852      	ldr	r0, [pc, #328]	@ (800b4ec <_printf_i+0x234>)
 800b3a4:	6033      	str	r3, [r6, #0]
 800b3a6:	bf14      	ite	ne
 800b3a8:	230a      	movne	r3, #10
 800b3aa:	2308      	moveq	r3, #8
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3b2:	6866      	ldr	r6, [r4, #4]
 800b3b4:	60a6      	str	r6, [r4, #8]
 800b3b6:	2e00      	cmp	r6, #0
 800b3b8:	db05      	blt.n	800b3c6 <_printf_i+0x10e>
 800b3ba:	6821      	ldr	r1, [r4, #0]
 800b3bc:	432e      	orrs	r6, r5
 800b3be:	f021 0104 	bic.w	r1, r1, #4
 800b3c2:	6021      	str	r1, [r4, #0]
 800b3c4:	d04b      	beq.n	800b45e <_printf_i+0x1a6>
 800b3c6:	4616      	mov	r6, r2
 800b3c8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3cc:	fb03 5711 	mls	r7, r3, r1, r5
 800b3d0:	5dc7      	ldrb	r7, [r0, r7]
 800b3d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3d6:	462f      	mov	r7, r5
 800b3d8:	42bb      	cmp	r3, r7
 800b3da:	460d      	mov	r5, r1
 800b3dc:	d9f4      	bls.n	800b3c8 <_printf_i+0x110>
 800b3de:	2b08      	cmp	r3, #8
 800b3e0:	d10b      	bne.n	800b3fa <_printf_i+0x142>
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	07df      	lsls	r7, r3, #31
 800b3e6:	d508      	bpl.n	800b3fa <_printf_i+0x142>
 800b3e8:	6923      	ldr	r3, [r4, #16]
 800b3ea:	6861      	ldr	r1, [r4, #4]
 800b3ec:	4299      	cmp	r1, r3
 800b3ee:	bfde      	ittt	le
 800b3f0:	2330      	movle	r3, #48	@ 0x30
 800b3f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3fa:	1b92      	subs	r2, r2, r6
 800b3fc:	6122      	str	r2, [r4, #16]
 800b3fe:	f8cd a000 	str.w	sl, [sp]
 800b402:	464b      	mov	r3, r9
 800b404:	aa03      	add	r2, sp, #12
 800b406:	4621      	mov	r1, r4
 800b408:	4640      	mov	r0, r8
 800b40a:	f7ff fee7 	bl	800b1dc <_printf_common>
 800b40e:	3001      	adds	r0, #1
 800b410:	d14a      	bne.n	800b4a8 <_printf_i+0x1f0>
 800b412:	f04f 30ff 	mov.w	r0, #4294967295
 800b416:	b004      	add	sp, #16
 800b418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	f043 0320 	orr.w	r3, r3, #32
 800b422:	6023      	str	r3, [r4, #0]
 800b424:	4832      	ldr	r0, [pc, #200]	@ (800b4f0 <_printf_i+0x238>)
 800b426:	2778      	movs	r7, #120	@ 0x78
 800b428:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	6831      	ldr	r1, [r6, #0]
 800b430:	061f      	lsls	r7, r3, #24
 800b432:	f851 5b04 	ldr.w	r5, [r1], #4
 800b436:	d402      	bmi.n	800b43e <_printf_i+0x186>
 800b438:	065f      	lsls	r7, r3, #25
 800b43a:	bf48      	it	mi
 800b43c:	b2ad      	uxthmi	r5, r5
 800b43e:	6031      	str	r1, [r6, #0]
 800b440:	07d9      	lsls	r1, r3, #31
 800b442:	bf44      	itt	mi
 800b444:	f043 0320 	orrmi.w	r3, r3, #32
 800b448:	6023      	strmi	r3, [r4, #0]
 800b44a:	b11d      	cbz	r5, 800b454 <_printf_i+0x19c>
 800b44c:	2310      	movs	r3, #16
 800b44e:	e7ad      	b.n	800b3ac <_printf_i+0xf4>
 800b450:	4826      	ldr	r0, [pc, #152]	@ (800b4ec <_printf_i+0x234>)
 800b452:	e7e9      	b.n	800b428 <_printf_i+0x170>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	f023 0320 	bic.w	r3, r3, #32
 800b45a:	6023      	str	r3, [r4, #0]
 800b45c:	e7f6      	b.n	800b44c <_printf_i+0x194>
 800b45e:	4616      	mov	r6, r2
 800b460:	e7bd      	b.n	800b3de <_printf_i+0x126>
 800b462:	6833      	ldr	r3, [r6, #0]
 800b464:	6825      	ldr	r5, [r4, #0]
 800b466:	6961      	ldr	r1, [r4, #20]
 800b468:	1d18      	adds	r0, r3, #4
 800b46a:	6030      	str	r0, [r6, #0]
 800b46c:	062e      	lsls	r6, r5, #24
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	d501      	bpl.n	800b476 <_printf_i+0x1be>
 800b472:	6019      	str	r1, [r3, #0]
 800b474:	e002      	b.n	800b47c <_printf_i+0x1c4>
 800b476:	0668      	lsls	r0, r5, #25
 800b478:	d5fb      	bpl.n	800b472 <_printf_i+0x1ba>
 800b47a:	8019      	strh	r1, [r3, #0]
 800b47c:	2300      	movs	r3, #0
 800b47e:	6123      	str	r3, [r4, #16]
 800b480:	4616      	mov	r6, r2
 800b482:	e7bc      	b.n	800b3fe <_printf_i+0x146>
 800b484:	6833      	ldr	r3, [r6, #0]
 800b486:	1d1a      	adds	r2, r3, #4
 800b488:	6032      	str	r2, [r6, #0]
 800b48a:	681e      	ldr	r6, [r3, #0]
 800b48c:	6862      	ldr	r2, [r4, #4]
 800b48e:	2100      	movs	r1, #0
 800b490:	4630      	mov	r0, r6
 800b492:	f7f4 fea5 	bl	80001e0 <memchr>
 800b496:	b108      	cbz	r0, 800b49c <_printf_i+0x1e4>
 800b498:	1b80      	subs	r0, r0, r6
 800b49a:	6060      	str	r0, [r4, #4]
 800b49c:	6863      	ldr	r3, [r4, #4]
 800b49e:	6123      	str	r3, [r4, #16]
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4a6:	e7aa      	b.n	800b3fe <_printf_i+0x146>
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	4632      	mov	r2, r6
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	47d0      	blx	sl
 800b4b2:	3001      	adds	r0, #1
 800b4b4:	d0ad      	beq.n	800b412 <_printf_i+0x15a>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	079b      	lsls	r3, r3, #30
 800b4ba:	d413      	bmi.n	800b4e4 <_printf_i+0x22c>
 800b4bc:	68e0      	ldr	r0, [r4, #12]
 800b4be:	9b03      	ldr	r3, [sp, #12]
 800b4c0:	4298      	cmp	r0, r3
 800b4c2:	bfb8      	it	lt
 800b4c4:	4618      	movlt	r0, r3
 800b4c6:	e7a6      	b.n	800b416 <_printf_i+0x15e>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	4632      	mov	r2, r6
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	47d0      	blx	sl
 800b4d2:	3001      	adds	r0, #1
 800b4d4:	d09d      	beq.n	800b412 <_printf_i+0x15a>
 800b4d6:	3501      	adds	r5, #1
 800b4d8:	68e3      	ldr	r3, [r4, #12]
 800b4da:	9903      	ldr	r1, [sp, #12]
 800b4dc:	1a5b      	subs	r3, r3, r1
 800b4de:	42ab      	cmp	r3, r5
 800b4e0:	dcf2      	bgt.n	800b4c8 <_printf_i+0x210>
 800b4e2:	e7eb      	b.n	800b4bc <_printf_i+0x204>
 800b4e4:	2500      	movs	r5, #0
 800b4e6:	f104 0619 	add.w	r6, r4, #25
 800b4ea:	e7f5      	b.n	800b4d8 <_printf_i+0x220>
 800b4ec:	0800f93e 	.word	0x0800f93e
 800b4f0:	0800f94f 	.word	0x0800f94f

0800b4f4 <std>:
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	b510      	push	{r4, lr}
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b4fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b502:	6083      	str	r3, [r0, #8]
 800b504:	8181      	strh	r1, [r0, #12]
 800b506:	6643      	str	r3, [r0, #100]	@ 0x64
 800b508:	81c2      	strh	r2, [r0, #14]
 800b50a:	6183      	str	r3, [r0, #24]
 800b50c:	4619      	mov	r1, r3
 800b50e:	2208      	movs	r2, #8
 800b510:	305c      	adds	r0, #92	@ 0x5c
 800b512:	f000 f953 	bl	800b7bc <memset>
 800b516:	4b0d      	ldr	r3, [pc, #52]	@ (800b54c <std+0x58>)
 800b518:	6263      	str	r3, [r4, #36]	@ 0x24
 800b51a:	4b0d      	ldr	r3, [pc, #52]	@ (800b550 <std+0x5c>)
 800b51c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b51e:	4b0d      	ldr	r3, [pc, #52]	@ (800b554 <std+0x60>)
 800b520:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b522:	4b0d      	ldr	r3, [pc, #52]	@ (800b558 <std+0x64>)
 800b524:	6323      	str	r3, [r4, #48]	@ 0x30
 800b526:	4b0d      	ldr	r3, [pc, #52]	@ (800b55c <std+0x68>)
 800b528:	6224      	str	r4, [r4, #32]
 800b52a:	429c      	cmp	r4, r3
 800b52c:	d006      	beq.n	800b53c <std+0x48>
 800b52e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b532:	4294      	cmp	r4, r2
 800b534:	d002      	beq.n	800b53c <std+0x48>
 800b536:	33d0      	adds	r3, #208	@ 0xd0
 800b538:	429c      	cmp	r4, r3
 800b53a:	d105      	bne.n	800b548 <std+0x54>
 800b53c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b544:	f000 b9c6 	b.w	800b8d4 <__retarget_lock_init_recursive>
 800b548:	bd10      	pop	{r4, pc}
 800b54a:	bf00      	nop
 800b54c:	0800b6bd 	.word	0x0800b6bd
 800b550:	0800b6df 	.word	0x0800b6df
 800b554:	0800b717 	.word	0x0800b717
 800b558:	0800b73b 	.word	0x0800b73b
 800b55c:	20001360 	.word	0x20001360

0800b560 <stdio_exit_handler>:
 800b560:	4a02      	ldr	r2, [pc, #8]	@ (800b56c <stdio_exit_handler+0xc>)
 800b562:	4903      	ldr	r1, [pc, #12]	@ (800b570 <stdio_exit_handler+0x10>)
 800b564:	4803      	ldr	r0, [pc, #12]	@ (800b574 <stdio_exit_handler+0x14>)
 800b566:	f000 b869 	b.w	800b63c <_fwalk_sglue>
 800b56a:	bf00      	nop
 800b56c:	2000006c 	.word	0x2000006c
 800b570:	0800d23d 	.word	0x0800d23d
 800b574:	2000007c 	.word	0x2000007c

0800b578 <cleanup_stdio>:
 800b578:	6841      	ldr	r1, [r0, #4]
 800b57a:	4b0c      	ldr	r3, [pc, #48]	@ (800b5ac <cleanup_stdio+0x34>)
 800b57c:	4299      	cmp	r1, r3
 800b57e:	b510      	push	{r4, lr}
 800b580:	4604      	mov	r4, r0
 800b582:	d001      	beq.n	800b588 <cleanup_stdio+0x10>
 800b584:	f001 fe5a 	bl	800d23c <_fflush_r>
 800b588:	68a1      	ldr	r1, [r4, #8]
 800b58a:	4b09      	ldr	r3, [pc, #36]	@ (800b5b0 <cleanup_stdio+0x38>)
 800b58c:	4299      	cmp	r1, r3
 800b58e:	d002      	beq.n	800b596 <cleanup_stdio+0x1e>
 800b590:	4620      	mov	r0, r4
 800b592:	f001 fe53 	bl	800d23c <_fflush_r>
 800b596:	68e1      	ldr	r1, [r4, #12]
 800b598:	4b06      	ldr	r3, [pc, #24]	@ (800b5b4 <cleanup_stdio+0x3c>)
 800b59a:	4299      	cmp	r1, r3
 800b59c:	d004      	beq.n	800b5a8 <cleanup_stdio+0x30>
 800b59e:	4620      	mov	r0, r4
 800b5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a4:	f001 be4a 	b.w	800d23c <_fflush_r>
 800b5a8:	bd10      	pop	{r4, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20001360 	.word	0x20001360
 800b5b0:	200013c8 	.word	0x200013c8
 800b5b4:	20001430 	.word	0x20001430

0800b5b8 <global_stdio_init.part.0>:
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e8 <global_stdio_init.part.0+0x30>)
 800b5bc:	4c0b      	ldr	r4, [pc, #44]	@ (800b5ec <global_stdio_init.part.0+0x34>)
 800b5be:	4a0c      	ldr	r2, [pc, #48]	@ (800b5f0 <global_stdio_init.part.0+0x38>)
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2104      	movs	r1, #4
 800b5c8:	f7ff ff94 	bl	800b4f4 <std>
 800b5cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	2109      	movs	r1, #9
 800b5d4:	f7ff ff8e 	bl	800b4f4 <std>
 800b5d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b5dc:	2202      	movs	r2, #2
 800b5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5e2:	2112      	movs	r1, #18
 800b5e4:	f7ff bf86 	b.w	800b4f4 <std>
 800b5e8:	20001498 	.word	0x20001498
 800b5ec:	20001360 	.word	0x20001360
 800b5f0:	0800b561 	.word	0x0800b561

0800b5f4 <__sfp_lock_acquire>:
 800b5f4:	4801      	ldr	r0, [pc, #4]	@ (800b5fc <__sfp_lock_acquire+0x8>)
 800b5f6:	f000 b96e 	b.w	800b8d6 <__retarget_lock_acquire_recursive>
 800b5fa:	bf00      	nop
 800b5fc:	200014a1 	.word	0x200014a1

0800b600 <__sfp_lock_release>:
 800b600:	4801      	ldr	r0, [pc, #4]	@ (800b608 <__sfp_lock_release+0x8>)
 800b602:	f000 b969 	b.w	800b8d8 <__retarget_lock_release_recursive>
 800b606:	bf00      	nop
 800b608:	200014a1 	.word	0x200014a1

0800b60c <__sinit>:
 800b60c:	b510      	push	{r4, lr}
 800b60e:	4604      	mov	r4, r0
 800b610:	f7ff fff0 	bl	800b5f4 <__sfp_lock_acquire>
 800b614:	6a23      	ldr	r3, [r4, #32]
 800b616:	b11b      	cbz	r3, 800b620 <__sinit+0x14>
 800b618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b61c:	f7ff bff0 	b.w	800b600 <__sfp_lock_release>
 800b620:	4b04      	ldr	r3, [pc, #16]	@ (800b634 <__sinit+0x28>)
 800b622:	6223      	str	r3, [r4, #32]
 800b624:	4b04      	ldr	r3, [pc, #16]	@ (800b638 <__sinit+0x2c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1f5      	bne.n	800b618 <__sinit+0xc>
 800b62c:	f7ff ffc4 	bl	800b5b8 <global_stdio_init.part.0>
 800b630:	e7f2      	b.n	800b618 <__sinit+0xc>
 800b632:	bf00      	nop
 800b634:	0800b579 	.word	0x0800b579
 800b638:	20001498 	.word	0x20001498

0800b63c <_fwalk_sglue>:
 800b63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b640:	4607      	mov	r7, r0
 800b642:	4688      	mov	r8, r1
 800b644:	4614      	mov	r4, r2
 800b646:	2600      	movs	r6, #0
 800b648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b64c:	f1b9 0901 	subs.w	r9, r9, #1
 800b650:	d505      	bpl.n	800b65e <_fwalk_sglue+0x22>
 800b652:	6824      	ldr	r4, [r4, #0]
 800b654:	2c00      	cmp	r4, #0
 800b656:	d1f7      	bne.n	800b648 <_fwalk_sglue+0xc>
 800b658:	4630      	mov	r0, r6
 800b65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b65e:	89ab      	ldrh	r3, [r5, #12]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d907      	bls.n	800b674 <_fwalk_sglue+0x38>
 800b664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b668:	3301      	adds	r3, #1
 800b66a:	d003      	beq.n	800b674 <_fwalk_sglue+0x38>
 800b66c:	4629      	mov	r1, r5
 800b66e:	4638      	mov	r0, r7
 800b670:	47c0      	blx	r8
 800b672:	4306      	orrs	r6, r0
 800b674:	3568      	adds	r5, #104	@ 0x68
 800b676:	e7e9      	b.n	800b64c <_fwalk_sglue+0x10>

0800b678 <siprintf>:
 800b678:	b40e      	push	{r1, r2, r3}
 800b67a:	b510      	push	{r4, lr}
 800b67c:	b09d      	sub	sp, #116	@ 0x74
 800b67e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b680:	9002      	str	r0, [sp, #8]
 800b682:	9006      	str	r0, [sp, #24]
 800b684:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b688:	480a      	ldr	r0, [pc, #40]	@ (800b6b4 <siprintf+0x3c>)
 800b68a:	9107      	str	r1, [sp, #28]
 800b68c:	9104      	str	r1, [sp, #16]
 800b68e:	490a      	ldr	r1, [pc, #40]	@ (800b6b8 <siprintf+0x40>)
 800b690:	f853 2b04 	ldr.w	r2, [r3], #4
 800b694:	9105      	str	r1, [sp, #20]
 800b696:	2400      	movs	r4, #0
 800b698:	a902      	add	r1, sp, #8
 800b69a:	6800      	ldr	r0, [r0, #0]
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b6a0:	f001 fc4c 	bl	800cf3c <_svfiprintf_r>
 800b6a4:	9b02      	ldr	r3, [sp, #8]
 800b6a6:	701c      	strb	r4, [r3, #0]
 800b6a8:	b01d      	add	sp, #116	@ 0x74
 800b6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6ae:	b003      	add	sp, #12
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	20000078 	.word	0x20000078
 800b6b8:	ffff0208 	.word	0xffff0208

0800b6bc <__sread>:
 800b6bc:	b510      	push	{r4, lr}
 800b6be:	460c      	mov	r4, r1
 800b6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c4:	f000 f8b8 	bl	800b838 <_read_r>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	bfab      	itete	ge
 800b6cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b6ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b6d0:	181b      	addge	r3, r3, r0
 800b6d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b6d6:	bfac      	ite	ge
 800b6d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b6da:	81a3      	strhlt	r3, [r4, #12]
 800b6dc:	bd10      	pop	{r4, pc}

0800b6de <__swrite>:
 800b6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e2:	461f      	mov	r7, r3
 800b6e4:	898b      	ldrh	r3, [r1, #12]
 800b6e6:	05db      	lsls	r3, r3, #23
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	4616      	mov	r6, r2
 800b6ee:	d505      	bpl.n	800b6fc <__swrite+0x1e>
 800b6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f000 f88c 	bl	800b814 <_lseek_r>
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b702:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b706:	81a3      	strh	r3, [r4, #12]
 800b708:	4632      	mov	r2, r6
 800b70a:	463b      	mov	r3, r7
 800b70c:	4628      	mov	r0, r5
 800b70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b712:	f000 b8a3 	b.w	800b85c <_write_r>

0800b716 <__sseek>:
 800b716:	b510      	push	{r4, lr}
 800b718:	460c      	mov	r4, r1
 800b71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71e:	f000 f879 	bl	800b814 <_lseek_r>
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	bf15      	itete	ne
 800b728:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b72a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b72e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b732:	81a3      	strheq	r3, [r4, #12]
 800b734:	bf18      	it	ne
 800b736:	81a3      	strhne	r3, [r4, #12]
 800b738:	bd10      	pop	{r4, pc}

0800b73a <__sclose>:
 800b73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b73e:	f000 b859 	b.w	800b7f4 <_close_r>

0800b742 <_vsniprintf_r>:
 800b742:	b530      	push	{r4, r5, lr}
 800b744:	4614      	mov	r4, r2
 800b746:	2c00      	cmp	r4, #0
 800b748:	b09b      	sub	sp, #108	@ 0x6c
 800b74a:	4605      	mov	r5, r0
 800b74c:	461a      	mov	r2, r3
 800b74e:	da05      	bge.n	800b75c <_vsniprintf_r+0x1a>
 800b750:	238b      	movs	r3, #139	@ 0x8b
 800b752:	6003      	str	r3, [r0, #0]
 800b754:	f04f 30ff 	mov.w	r0, #4294967295
 800b758:	b01b      	add	sp, #108	@ 0x6c
 800b75a:	bd30      	pop	{r4, r5, pc}
 800b75c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b760:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b764:	f04f 0300 	mov.w	r3, #0
 800b768:	9319      	str	r3, [sp, #100]	@ 0x64
 800b76a:	bf14      	ite	ne
 800b76c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b770:	4623      	moveq	r3, r4
 800b772:	9302      	str	r3, [sp, #8]
 800b774:	9305      	str	r3, [sp, #20]
 800b776:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b77a:	9100      	str	r1, [sp, #0]
 800b77c:	9104      	str	r1, [sp, #16]
 800b77e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b782:	4669      	mov	r1, sp
 800b784:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b786:	f001 fbd9 	bl	800cf3c <_svfiprintf_r>
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	bfbc      	itt	lt
 800b78e:	238b      	movlt	r3, #139	@ 0x8b
 800b790:	602b      	strlt	r3, [r5, #0]
 800b792:	2c00      	cmp	r4, #0
 800b794:	d0e0      	beq.n	800b758 <_vsniprintf_r+0x16>
 800b796:	9b00      	ldr	r3, [sp, #0]
 800b798:	2200      	movs	r2, #0
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	e7dc      	b.n	800b758 <_vsniprintf_r+0x16>
	...

0800b7a0 <vsniprintf>:
 800b7a0:	b507      	push	{r0, r1, r2, lr}
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	460a      	mov	r2, r1
 800b7a8:	4601      	mov	r1, r0
 800b7aa:	4803      	ldr	r0, [pc, #12]	@ (800b7b8 <vsniprintf+0x18>)
 800b7ac:	6800      	ldr	r0, [r0, #0]
 800b7ae:	f7ff ffc8 	bl	800b742 <_vsniprintf_r>
 800b7b2:	b003      	add	sp, #12
 800b7b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7b8:	20000078 	.word	0x20000078

0800b7bc <memset>:
 800b7bc:	4402      	add	r2, r0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d100      	bne.n	800b7c6 <memset+0xa>
 800b7c4:	4770      	bx	lr
 800b7c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b7ca:	e7f9      	b.n	800b7c0 <memset+0x4>

0800b7cc <strcat>:
 800b7cc:	b510      	push	{r4, lr}
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	7814      	ldrb	r4, [r2, #0]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	3201      	adds	r2, #1
 800b7d6:	2c00      	cmp	r4, #0
 800b7d8:	d1fa      	bne.n	800b7d0 <strcat+0x4>
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7e4:	2a00      	cmp	r2, #0
 800b7e6:	d1f9      	bne.n	800b7dc <strcat+0x10>
 800b7e8:	bd10      	pop	{r4, pc}
	...

0800b7ec <_localeconv_r>:
 800b7ec:	4800      	ldr	r0, [pc, #0]	@ (800b7f0 <_localeconv_r+0x4>)
 800b7ee:	4770      	bx	lr
 800b7f0:	200001b8 	.word	0x200001b8

0800b7f4 <_close_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d06      	ldr	r5, [pc, #24]	@ (800b810 <_close_r+0x1c>)
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	4608      	mov	r0, r1
 800b7fe:	602b      	str	r3, [r5, #0]
 800b800:	f7f9 fc32 	bl	8005068 <_close>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_close_r+0x1a>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_close_r+0x1a>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	2000149c 	.word	0x2000149c

0800b814 <_lseek_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	@ (800b834 <_lseek_r+0x20>)
 800b818:	4604      	mov	r4, r0
 800b81a:	4608      	mov	r0, r1
 800b81c:	4611      	mov	r1, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	602a      	str	r2, [r5, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	f7f9 fc47 	bl	80050b6 <_lseek>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_lseek_r+0x1e>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_lseek_r+0x1e>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	2000149c 	.word	0x2000149c

0800b838 <_read_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d07      	ldr	r5, [pc, #28]	@ (800b858 <_read_r+0x20>)
 800b83c:	4604      	mov	r4, r0
 800b83e:	4608      	mov	r0, r1
 800b840:	4611      	mov	r1, r2
 800b842:	2200      	movs	r2, #0
 800b844:	602a      	str	r2, [r5, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	f7f9 fbd5 	bl	8004ff6 <_read>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d102      	bne.n	800b856 <_read_r+0x1e>
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	b103      	cbz	r3, 800b856 <_read_r+0x1e>
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	2000149c 	.word	0x2000149c

0800b85c <_write_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d07      	ldr	r5, [pc, #28]	@ (800b87c <_write_r+0x20>)
 800b860:	4604      	mov	r4, r0
 800b862:	4608      	mov	r0, r1
 800b864:	4611      	mov	r1, r2
 800b866:	2200      	movs	r2, #0
 800b868:	602a      	str	r2, [r5, #0]
 800b86a:	461a      	mov	r2, r3
 800b86c:	f7f9 fbe0 	bl	8005030 <_write>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_write_r+0x1e>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_write_r+0x1e>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	2000149c 	.word	0x2000149c

0800b880 <__errno>:
 800b880:	4b01      	ldr	r3, [pc, #4]	@ (800b888 <__errno+0x8>)
 800b882:	6818      	ldr	r0, [r3, #0]
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	20000078 	.word	0x20000078

0800b88c <__libc_init_array>:
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	4d0d      	ldr	r5, [pc, #52]	@ (800b8c4 <__libc_init_array+0x38>)
 800b890:	4c0d      	ldr	r4, [pc, #52]	@ (800b8c8 <__libc_init_array+0x3c>)
 800b892:	1b64      	subs	r4, r4, r5
 800b894:	10a4      	asrs	r4, r4, #2
 800b896:	2600      	movs	r6, #0
 800b898:	42a6      	cmp	r6, r4
 800b89a:	d109      	bne.n	800b8b0 <__libc_init_array+0x24>
 800b89c:	4d0b      	ldr	r5, [pc, #44]	@ (800b8cc <__libc_init_array+0x40>)
 800b89e:	4c0c      	ldr	r4, [pc, #48]	@ (800b8d0 <__libc_init_array+0x44>)
 800b8a0:	f002 f916 	bl	800dad0 <_init>
 800b8a4:	1b64      	subs	r4, r4, r5
 800b8a6:	10a4      	asrs	r4, r4, #2
 800b8a8:	2600      	movs	r6, #0
 800b8aa:	42a6      	cmp	r6, r4
 800b8ac:	d105      	bne.n	800b8ba <__libc_init_array+0x2e>
 800b8ae:	bd70      	pop	{r4, r5, r6, pc}
 800b8b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8b4:	4798      	blx	r3
 800b8b6:	3601      	adds	r6, #1
 800b8b8:	e7ee      	b.n	800b898 <__libc_init_array+0xc>
 800b8ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8be:	4798      	blx	r3
 800b8c0:	3601      	adds	r6, #1
 800b8c2:	e7f2      	b.n	800b8aa <__libc_init_array+0x1e>
 800b8c4:	0800fcac 	.word	0x0800fcac
 800b8c8:	0800fcac 	.word	0x0800fcac
 800b8cc:	0800fcac 	.word	0x0800fcac
 800b8d0:	0800fcb0 	.word	0x0800fcb0

0800b8d4 <__retarget_lock_init_recursive>:
 800b8d4:	4770      	bx	lr

0800b8d6 <__retarget_lock_acquire_recursive>:
 800b8d6:	4770      	bx	lr

0800b8d8 <__retarget_lock_release_recursive>:
 800b8d8:	4770      	bx	lr

0800b8da <quorem>:
 800b8da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8de:	6903      	ldr	r3, [r0, #16]
 800b8e0:	690c      	ldr	r4, [r1, #16]
 800b8e2:	42a3      	cmp	r3, r4
 800b8e4:	4607      	mov	r7, r0
 800b8e6:	db7e      	blt.n	800b9e6 <quorem+0x10c>
 800b8e8:	3c01      	subs	r4, #1
 800b8ea:	f101 0814 	add.w	r8, r1, #20
 800b8ee:	00a3      	lsls	r3, r4, #2
 800b8f0:	f100 0514 	add.w	r5, r0, #20
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8fa:	9301      	str	r3, [sp, #4]
 800b8fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b904:	3301      	adds	r3, #1
 800b906:	429a      	cmp	r2, r3
 800b908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b90c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b910:	d32e      	bcc.n	800b970 <quorem+0x96>
 800b912:	f04f 0a00 	mov.w	sl, #0
 800b916:	46c4      	mov	ip, r8
 800b918:	46ae      	mov	lr, r5
 800b91a:	46d3      	mov	fp, sl
 800b91c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b920:	b298      	uxth	r0, r3
 800b922:	fb06 a000 	mla	r0, r6, r0, sl
 800b926:	0c02      	lsrs	r2, r0, #16
 800b928:	0c1b      	lsrs	r3, r3, #16
 800b92a:	fb06 2303 	mla	r3, r6, r3, r2
 800b92e:	f8de 2000 	ldr.w	r2, [lr]
 800b932:	b280      	uxth	r0, r0
 800b934:	b292      	uxth	r2, r2
 800b936:	1a12      	subs	r2, r2, r0
 800b938:	445a      	add	r2, fp
 800b93a:	f8de 0000 	ldr.w	r0, [lr]
 800b93e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b942:	b29b      	uxth	r3, r3
 800b944:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b948:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b94c:	b292      	uxth	r2, r2
 800b94e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b952:	45e1      	cmp	r9, ip
 800b954:	f84e 2b04 	str.w	r2, [lr], #4
 800b958:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b95c:	d2de      	bcs.n	800b91c <quorem+0x42>
 800b95e:	9b00      	ldr	r3, [sp, #0]
 800b960:	58eb      	ldr	r3, [r5, r3]
 800b962:	b92b      	cbnz	r3, 800b970 <quorem+0x96>
 800b964:	9b01      	ldr	r3, [sp, #4]
 800b966:	3b04      	subs	r3, #4
 800b968:	429d      	cmp	r5, r3
 800b96a:	461a      	mov	r2, r3
 800b96c:	d32f      	bcc.n	800b9ce <quorem+0xf4>
 800b96e:	613c      	str	r4, [r7, #16]
 800b970:	4638      	mov	r0, r7
 800b972:	f001 f97f 	bl	800cc74 <__mcmp>
 800b976:	2800      	cmp	r0, #0
 800b978:	db25      	blt.n	800b9c6 <quorem+0xec>
 800b97a:	4629      	mov	r1, r5
 800b97c:	2000      	movs	r0, #0
 800b97e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b982:	f8d1 c000 	ldr.w	ip, [r1]
 800b986:	fa1f fe82 	uxth.w	lr, r2
 800b98a:	fa1f f38c 	uxth.w	r3, ip
 800b98e:	eba3 030e 	sub.w	r3, r3, lr
 800b992:	4403      	add	r3, r0
 800b994:	0c12      	lsrs	r2, r2, #16
 800b996:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b99a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9a4:	45c1      	cmp	r9, r8
 800b9a6:	f841 3b04 	str.w	r3, [r1], #4
 800b9aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b9ae:	d2e6      	bcs.n	800b97e <quorem+0xa4>
 800b9b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9b8:	b922      	cbnz	r2, 800b9c4 <quorem+0xea>
 800b9ba:	3b04      	subs	r3, #4
 800b9bc:	429d      	cmp	r5, r3
 800b9be:	461a      	mov	r2, r3
 800b9c0:	d30b      	bcc.n	800b9da <quorem+0x100>
 800b9c2:	613c      	str	r4, [r7, #16]
 800b9c4:	3601      	adds	r6, #1
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	b003      	add	sp, #12
 800b9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ce:	6812      	ldr	r2, [r2, #0]
 800b9d0:	3b04      	subs	r3, #4
 800b9d2:	2a00      	cmp	r2, #0
 800b9d4:	d1cb      	bne.n	800b96e <quorem+0x94>
 800b9d6:	3c01      	subs	r4, #1
 800b9d8:	e7c6      	b.n	800b968 <quorem+0x8e>
 800b9da:	6812      	ldr	r2, [r2, #0]
 800b9dc:	3b04      	subs	r3, #4
 800b9de:	2a00      	cmp	r2, #0
 800b9e0:	d1ef      	bne.n	800b9c2 <quorem+0xe8>
 800b9e2:	3c01      	subs	r4, #1
 800b9e4:	e7ea      	b.n	800b9bc <quorem+0xe2>
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	e7ee      	b.n	800b9c8 <quorem+0xee>
 800b9ea:	0000      	movs	r0, r0
 800b9ec:	0000      	movs	r0, r0
	...

0800b9f0 <_dtoa_r>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	69c7      	ldr	r7, [r0, #28]
 800b9f6:	b097      	sub	sp, #92	@ 0x5c
 800b9f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b9fc:	ec55 4b10 	vmov	r4, r5, d0
 800ba00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ba02:	9107      	str	r1, [sp, #28]
 800ba04:	4681      	mov	r9, r0
 800ba06:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba08:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba0a:	b97f      	cbnz	r7, 800ba2c <_dtoa_r+0x3c>
 800ba0c:	2010      	movs	r0, #16
 800ba0e:	f000 fe09 	bl	800c624 <malloc>
 800ba12:	4602      	mov	r2, r0
 800ba14:	f8c9 001c 	str.w	r0, [r9, #28]
 800ba18:	b920      	cbnz	r0, 800ba24 <_dtoa_r+0x34>
 800ba1a:	4ba9      	ldr	r3, [pc, #676]	@ (800bcc0 <_dtoa_r+0x2d0>)
 800ba1c:	21ef      	movs	r1, #239	@ 0xef
 800ba1e:	48a9      	ldr	r0, [pc, #676]	@ (800bcc4 <_dtoa_r+0x2d4>)
 800ba20:	f001 fc6c 	bl	800d2fc <__assert_func>
 800ba24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba28:	6007      	str	r7, [r0, #0]
 800ba2a:	60c7      	str	r7, [r0, #12]
 800ba2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba30:	6819      	ldr	r1, [r3, #0]
 800ba32:	b159      	cbz	r1, 800ba4c <_dtoa_r+0x5c>
 800ba34:	685a      	ldr	r2, [r3, #4]
 800ba36:	604a      	str	r2, [r1, #4]
 800ba38:	2301      	movs	r3, #1
 800ba3a:	4093      	lsls	r3, r2
 800ba3c:	608b      	str	r3, [r1, #8]
 800ba3e:	4648      	mov	r0, r9
 800ba40:	f000 fee6 	bl	800c810 <_Bfree>
 800ba44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	601a      	str	r2, [r3, #0]
 800ba4c:	1e2b      	subs	r3, r5, #0
 800ba4e:	bfb9      	ittee	lt
 800ba50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba54:	9305      	strlt	r3, [sp, #20]
 800ba56:	2300      	movge	r3, #0
 800ba58:	6033      	strge	r3, [r6, #0]
 800ba5a:	9f05      	ldr	r7, [sp, #20]
 800ba5c:	4b9a      	ldr	r3, [pc, #616]	@ (800bcc8 <_dtoa_r+0x2d8>)
 800ba5e:	bfbc      	itt	lt
 800ba60:	2201      	movlt	r2, #1
 800ba62:	6032      	strlt	r2, [r6, #0]
 800ba64:	43bb      	bics	r3, r7
 800ba66:	d112      	bne.n	800ba8e <_dtoa_r+0x9e>
 800ba68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ba6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba6e:	6013      	str	r3, [r2, #0]
 800ba70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba74:	4323      	orrs	r3, r4
 800ba76:	f000 855a 	beq.w	800c52e <_dtoa_r+0xb3e>
 800ba7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba7c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bcdc <_dtoa_r+0x2ec>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 855c 	beq.w	800c53e <_dtoa_r+0xb4e>
 800ba86:	f10a 0303 	add.w	r3, sl, #3
 800ba8a:	f000 bd56 	b.w	800c53a <_dtoa_r+0xb4a>
 800ba8e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ba92:	2200      	movs	r2, #0
 800ba94:	ec51 0b17 	vmov	r0, r1, d7
 800ba98:	2300      	movs	r3, #0
 800ba9a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ba9e:	f7f5 f81b 	bl	8000ad8 <__aeabi_dcmpeq>
 800baa2:	4680      	mov	r8, r0
 800baa4:	b158      	cbz	r0, 800babe <_dtoa_r+0xce>
 800baa6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800baa8:	2301      	movs	r3, #1
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800baae:	b113      	cbz	r3, 800bab6 <_dtoa_r+0xc6>
 800bab0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bab2:	4b86      	ldr	r3, [pc, #536]	@ (800bccc <_dtoa_r+0x2dc>)
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bce0 <_dtoa_r+0x2f0>
 800baba:	f000 bd40 	b.w	800c53e <_dtoa_r+0xb4e>
 800babe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bac2:	aa14      	add	r2, sp, #80	@ 0x50
 800bac4:	a915      	add	r1, sp, #84	@ 0x54
 800bac6:	4648      	mov	r0, r9
 800bac8:	f001 f984 	bl	800cdd4 <__d2b>
 800bacc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bad0:	9002      	str	r0, [sp, #8]
 800bad2:	2e00      	cmp	r6, #0
 800bad4:	d078      	beq.n	800bbc8 <_dtoa_r+0x1d8>
 800bad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bad8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800badc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bae0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bae4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bae8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800baec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800baf0:	4619      	mov	r1, r3
 800baf2:	2200      	movs	r2, #0
 800baf4:	4b76      	ldr	r3, [pc, #472]	@ (800bcd0 <_dtoa_r+0x2e0>)
 800baf6:	f7f4 fbcf 	bl	8000298 <__aeabi_dsub>
 800bafa:	a36b      	add	r3, pc, #428	@ (adr r3, 800bca8 <_dtoa_r+0x2b8>)
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	f7f4 fd82 	bl	8000608 <__aeabi_dmul>
 800bb04:	a36a      	add	r3, pc, #424	@ (adr r3, 800bcb0 <_dtoa_r+0x2c0>)
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	f7f4 fbc7 	bl	800029c <__adddf3>
 800bb0e:	4604      	mov	r4, r0
 800bb10:	4630      	mov	r0, r6
 800bb12:	460d      	mov	r5, r1
 800bb14:	f7f4 fd0e 	bl	8000534 <__aeabi_i2d>
 800bb18:	a367      	add	r3, pc, #412	@ (adr r3, 800bcb8 <_dtoa_r+0x2c8>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	f7f4 fd73 	bl	8000608 <__aeabi_dmul>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	4620      	mov	r0, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	f7f4 fbb7 	bl	800029c <__adddf3>
 800bb2e:	4604      	mov	r4, r0
 800bb30:	460d      	mov	r5, r1
 800bb32:	f7f5 f819 	bl	8000b68 <__aeabi_d2iz>
 800bb36:	2200      	movs	r2, #0
 800bb38:	4607      	mov	r7, r0
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	4629      	mov	r1, r5
 800bb40:	f7f4 ffd4 	bl	8000aec <__aeabi_dcmplt>
 800bb44:	b140      	cbz	r0, 800bb58 <_dtoa_r+0x168>
 800bb46:	4638      	mov	r0, r7
 800bb48:	f7f4 fcf4 	bl	8000534 <__aeabi_i2d>
 800bb4c:	4622      	mov	r2, r4
 800bb4e:	462b      	mov	r3, r5
 800bb50:	f7f4 ffc2 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb54:	b900      	cbnz	r0, 800bb58 <_dtoa_r+0x168>
 800bb56:	3f01      	subs	r7, #1
 800bb58:	2f16      	cmp	r7, #22
 800bb5a:	d852      	bhi.n	800bc02 <_dtoa_r+0x212>
 800bb5c:	4b5d      	ldr	r3, [pc, #372]	@ (800bcd4 <_dtoa_r+0x2e4>)
 800bb5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bb6a:	f7f4 ffbf 	bl	8000aec <__aeabi_dcmplt>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d049      	beq.n	800bc06 <_dtoa_r+0x216>
 800bb72:	3f01      	subs	r7, #1
 800bb74:	2300      	movs	r3, #0
 800bb76:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb7a:	1b9b      	subs	r3, r3, r6
 800bb7c:	1e5a      	subs	r2, r3, #1
 800bb7e:	bf45      	ittet	mi
 800bb80:	f1c3 0301 	rsbmi	r3, r3, #1
 800bb84:	9300      	strmi	r3, [sp, #0]
 800bb86:	2300      	movpl	r3, #0
 800bb88:	2300      	movmi	r3, #0
 800bb8a:	9206      	str	r2, [sp, #24]
 800bb8c:	bf54      	ite	pl
 800bb8e:	9300      	strpl	r3, [sp, #0]
 800bb90:	9306      	strmi	r3, [sp, #24]
 800bb92:	2f00      	cmp	r7, #0
 800bb94:	db39      	blt.n	800bc0a <_dtoa_r+0x21a>
 800bb96:	9b06      	ldr	r3, [sp, #24]
 800bb98:	970d      	str	r7, [sp, #52]	@ 0x34
 800bb9a:	443b      	add	r3, r7
 800bb9c:	9306      	str	r3, [sp, #24]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	9308      	str	r3, [sp, #32]
 800bba2:	9b07      	ldr	r3, [sp, #28]
 800bba4:	2b09      	cmp	r3, #9
 800bba6:	d863      	bhi.n	800bc70 <_dtoa_r+0x280>
 800bba8:	2b05      	cmp	r3, #5
 800bbaa:	bfc4      	itt	gt
 800bbac:	3b04      	subgt	r3, #4
 800bbae:	9307      	strgt	r3, [sp, #28]
 800bbb0:	9b07      	ldr	r3, [sp, #28]
 800bbb2:	f1a3 0302 	sub.w	r3, r3, #2
 800bbb6:	bfcc      	ite	gt
 800bbb8:	2400      	movgt	r4, #0
 800bbba:	2401      	movle	r4, #1
 800bbbc:	2b03      	cmp	r3, #3
 800bbbe:	d863      	bhi.n	800bc88 <_dtoa_r+0x298>
 800bbc0:	e8df f003 	tbb	[pc, r3]
 800bbc4:	2b375452 	.word	0x2b375452
 800bbc8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bbcc:	441e      	add	r6, r3
 800bbce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bbd2:	2b20      	cmp	r3, #32
 800bbd4:	bfc1      	itttt	gt
 800bbd6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bbda:	409f      	lslgt	r7, r3
 800bbdc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bbe0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bbe4:	bfd6      	itet	le
 800bbe6:	f1c3 0320 	rsble	r3, r3, #32
 800bbea:	ea47 0003 	orrgt.w	r0, r7, r3
 800bbee:	fa04 f003 	lslle.w	r0, r4, r3
 800bbf2:	f7f4 fc8f 	bl	8000514 <__aeabi_ui2d>
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bbfc:	3e01      	subs	r6, #1
 800bbfe:	9212      	str	r2, [sp, #72]	@ 0x48
 800bc00:	e776      	b.n	800baf0 <_dtoa_r+0x100>
 800bc02:	2301      	movs	r3, #1
 800bc04:	e7b7      	b.n	800bb76 <_dtoa_r+0x186>
 800bc06:	9010      	str	r0, [sp, #64]	@ 0x40
 800bc08:	e7b6      	b.n	800bb78 <_dtoa_r+0x188>
 800bc0a:	9b00      	ldr	r3, [sp, #0]
 800bc0c:	1bdb      	subs	r3, r3, r7
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	427b      	negs	r3, r7
 800bc12:	9308      	str	r3, [sp, #32]
 800bc14:	2300      	movs	r3, #0
 800bc16:	930d      	str	r3, [sp, #52]	@ 0x34
 800bc18:	e7c3      	b.n	800bba2 <_dtoa_r+0x1b2>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc20:	eb07 0b03 	add.w	fp, r7, r3
 800bc24:	f10b 0301 	add.w	r3, fp, #1
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	9303      	str	r3, [sp, #12]
 800bc2c:	bfb8      	it	lt
 800bc2e:	2301      	movlt	r3, #1
 800bc30:	e006      	b.n	800bc40 <_dtoa_r+0x250>
 800bc32:	2301      	movs	r3, #1
 800bc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	dd28      	ble.n	800bc8e <_dtoa_r+0x29e>
 800bc3c:	469b      	mov	fp, r3
 800bc3e:	9303      	str	r3, [sp, #12]
 800bc40:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bc44:	2100      	movs	r1, #0
 800bc46:	2204      	movs	r2, #4
 800bc48:	f102 0514 	add.w	r5, r2, #20
 800bc4c:	429d      	cmp	r5, r3
 800bc4e:	d926      	bls.n	800bc9e <_dtoa_r+0x2ae>
 800bc50:	6041      	str	r1, [r0, #4]
 800bc52:	4648      	mov	r0, r9
 800bc54:	f000 fd9c 	bl	800c790 <_Balloc>
 800bc58:	4682      	mov	sl, r0
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d142      	bne.n	800bce4 <_dtoa_r+0x2f4>
 800bc5e:	4b1e      	ldr	r3, [pc, #120]	@ (800bcd8 <_dtoa_r+0x2e8>)
 800bc60:	4602      	mov	r2, r0
 800bc62:	f240 11af 	movw	r1, #431	@ 0x1af
 800bc66:	e6da      	b.n	800ba1e <_dtoa_r+0x2e>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	e7e3      	b.n	800bc34 <_dtoa_r+0x244>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e7d5      	b.n	800bc1c <_dtoa_r+0x22c>
 800bc70:	2401      	movs	r4, #1
 800bc72:	2300      	movs	r3, #0
 800bc74:	9307      	str	r3, [sp, #28]
 800bc76:	9409      	str	r4, [sp, #36]	@ 0x24
 800bc78:	f04f 3bff 	mov.w	fp, #4294967295
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f8cd b00c 	str.w	fp, [sp, #12]
 800bc82:	2312      	movs	r3, #18
 800bc84:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc86:	e7db      	b.n	800bc40 <_dtoa_r+0x250>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc8c:	e7f4      	b.n	800bc78 <_dtoa_r+0x288>
 800bc8e:	f04f 0b01 	mov.w	fp, #1
 800bc92:	f8cd b00c 	str.w	fp, [sp, #12]
 800bc96:	465b      	mov	r3, fp
 800bc98:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bc9c:	e7d0      	b.n	800bc40 <_dtoa_r+0x250>
 800bc9e:	3101      	adds	r1, #1
 800bca0:	0052      	lsls	r2, r2, #1
 800bca2:	e7d1      	b.n	800bc48 <_dtoa_r+0x258>
 800bca4:	f3af 8000 	nop.w
 800bca8:	636f4361 	.word	0x636f4361
 800bcac:	3fd287a7 	.word	0x3fd287a7
 800bcb0:	8b60c8b3 	.word	0x8b60c8b3
 800bcb4:	3fc68a28 	.word	0x3fc68a28
 800bcb8:	509f79fb 	.word	0x509f79fb
 800bcbc:	3fd34413 	.word	0x3fd34413
 800bcc0:	0800f96d 	.word	0x0800f96d
 800bcc4:	0800f984 	.word	0x0800f984
 800bcc8:	7ff00000 	.word	0x7ff00000
 800bccc:	0800f93d 	.word	0x0800f93d
 800bcd0:	3ff80000 	.word	0x3ff80000
 800bcd4:	0800fad8 	.word	0x0800fad8
 800bcd8:	0800f9dc 	.word	0x0800f9dc
 800bcdc:	0800f969 	.word	0x0800f969
 800bce0:	0800f93c 	.word	0x0800f93c
 800bce4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bce8:	6018      	str	r0, [r3, #0]
 800bcea:	9b03      	ldr	r3, [sp, #12]
 800bcec:	2b0e      	cmp	r3, #14
 800bcee:	f200 80a1 	bhi.w	800be34 <_dtoa_r+0x444>
 800bcf2:	2c00      	cmp	r4, #0
 800bcf4:	f000 809e 	beq.w	800be34 <_dtoa_r+0x444>
 800bcf8:	2f00      	cmp	r7, #0
 800bcfa:	dd33      	ble.n	800bd64 <_dtoa_r+0x374>
 800bcfc:	4b9c      	ldr	r3, [pc, #624]	@ (800bf70 <_dtoa_r+0x580>)
 800bcfe:	f007 020f 	and.w	r2, r7, #15
 800bd02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd06:	ed93 7b00 	vldr	d7, [r3]
 800bd0a:	05f8      	lsls	r0, r7, #23
 800bd0c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bd10:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bd14:	d516      	bpl.n	800bd44 <_dtoa_r+0x354>
 800bd16:	4b97      	ldr	r3, [pc, #604]	@ (800bf74 <_dtoa_r+0x584>)
 800bd18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd20:	f7f4 fd9c 	bl	800085c <__aeabi_ddiv>
 800bd24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd28:	f004 040f 	and.w	r4, r4, #15
 800bd2c:	2603      	movs	r6, #3
 800bd2e:	4d91      	ldr	r5, [pc, #580]	@ (800bf74 <_dtoa_r+0x584>)
 800bd30:	b954      	cbnz	r4, 800bd48 <_dtoa_r+0x358>
 800bd32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd3a:	f7f4 fd8f 	bl	800085c <__aeabi_ddiv>
 800bd3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd42:	e028      	b.n	800bd96 <_dtoa_r+0x3a6>
 800bd44:	2602      	movs	r6, #2
 800bd46:	e7f2      	b.n	800bd2e <_dtoa_r+0x33e>
 800bd48:	07e1      	lsls	r1, r4, #31
 800bd4a:	d508      	bpl.n	800bd5e <_dtoa_r+0x36e>
 800bd4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bd50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd54:	f7f4 fc58 	bl	8000608 <__aeabi_dmul>
 800bd58:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bd5c:	3601      	adds	r6, #1
 800bd5e:	1064      	asrs	r4, r4, #1
 800bd60:	3508      	adds	r5, #8
 800bd62:	e7e5      	b.n	800bd30 <_dtoa_r+0x340>
 800bd64:	f000 80af 	beq.w	800bec6 <_dtoa_r+0x4d6>
 800bd68:	427c      	negs	r4, r7
 800bd6a:	4b81      	ldr	r3, [pc, #516]	@ (800bf70 <_dtoa_r+0x580>)
 800bd6c:	4d81      	ldr	r5, [pc, #516]	@ (800bf74 <_dtoa_r+0x584>)
 800bd6e:	f004 020f 	and.w	r2, r4, #15
 800bd72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd7e:	f7f4 fc43 	bl	8000608 <__aeabi_dmul>
 800bd82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd86:	1124      	asrs	r4, r4, #4
 800bd88:	2300      	movs	r3, #0
 800bd8a:	2602      	movs	r6, #2
 800bd8c:	2c00      	cmp	r4, #0
 800bd8e:	f040 808f 	bne.w	800beb0 <_dtoa_r+0x4c0>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1d3      	bne.n	800bd3e <_dtoa_r+0x34e>
 800bd96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd98:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f000 8094 	beq.w	800beca <_dtoa_r+0x4da>
 800bda2:	4b75      	ldr	r3, [pc, #468]	@ (800bf78 <_dtoa_r+0x588>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	4620      	mov	r0, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	f7f4 fe9f 	bl	8000aec <__aeabi_dcmplt>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f000 808b 	beq.w	800beca <_dtoa_r+0x4da>
 800bdb4:	9b03      	ldr	r3, [sp, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 8087 	beq.w	800beca <_dtoa_r+0x4da>
 800bdbc:	f1bb 0f00 	cmp.w	fp, #0
 800bdc0:	dd34      	ble.n	800be2c <_dtoa_r+0x43c>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	4b6d      	ldr	r3, [pc, #436]	@ (800bf7c <_dtoa_r+0x58c>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	4629      	mov	r1, r5
 800bdca:	f7f4 fc1d 	bl	8000608 <__aeabi_dmul>
 800bdce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdd2:	f107 38ff 	add.w	r8, r7, #4294967295
 800bdd6:	3601      	adds	r6, #1
 800bdd8:	465c      	mov	r4, fp
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7f4 fbaa 	bl	8000534 <__aeabi_i2d>
 800bde0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bde4:	f7f4 fc10 	bl	8000608 <__aeabi_dmul>
 800bde8:	4b65      	ldr	r3, [pc, #404]	@ (800bf80 <_dtoa_r+0x590>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	f7f4 fa56 	bl	800029c <__adddf3>
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bdf6:	2c00      	cmp	r4, #0
 800bdf8:	d16a      	bne.n	800bed0 <_dtoa_r+0x4e0>
 800bdfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdfe:	4b61      	ldr	r3, [pc, #388]	@ (800bf84 <_dtoa_r+0x594>)
 800be00:	2200      	movs	r2, #0
 800be02:	f7f4 fa49 	bl	8000298 <__aeabi_dsub>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be0e:	462a      	mov	r2, r5
 800be10:	4633      	mov	r3, r6
 800be12:	f7f4 fe89 	bl	8000b28 <__aeabi_dcmpgt>
 800be16:	2800      	cmp	r0, #0
 800be18:	f040 8298 	bne.w	800c34c <_dtoa_r+0x95c>
 800be1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be20:	462a      	mov	r2, r5
 800be22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be26:	f7f4 fe61 	bl	8000aec <__aeabi_dcmplt>
 800be2a:	bb38      	cbnz	r0, 800be7c <_dtoa_r+0x48c>
 800be2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800be30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800be34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800be36:	2b00      	cmp	r3, #0
 800be38:	f2c0 8157 	blt.w	800c0ea <_dtoa_r+0x6fa>
 800be3c:	2f0e      	cmp	r7, #14
 800be3e:	f300 8154 	bgt.w	800c0ea <_dtoa_r+0x6fa>
 800be42:	4b4b      	ldr	r3, [pc, #300]	@ (800bf70 <_dtoa_r+0x580>)
 800be44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be48:	ed93 7b00 	vldr	d7, [r3]
 800be4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be4e:	2b00      	cmp	r3, #0
 800be50:	ed8d 7b00 	vstr	d7, [sp]
 800be54:	f280 80e5 	bge.w	800c022 <_dtoa_r+0x632>
 800be58:	9b03      	ldr	r3, [sp, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f300 80e1 	bgt.w	800c022 <_dtoa_r+0x632>
 800be60:	d10c      	bne.n	800be7c <_dtoa_r+0x48c>
 800be62:	4b48      	ldr	r3, [pc, #288]	@ (800bf84 <_dtoa_r+0x594>)
 800be64:	2200      	movs	r2, #0
 800be66:	ec51 0b17 	vmov	r0, r1, d7
 800be6a:	f7f4 fbcd 	bl	8000608 <__aeabi_dmul>
 800be6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be72:	f7f4 fe4f 	bl	8000b14 <__aeabi_dcmpge>
 800be76:	2800      	cmp	r0, #0
 800be78:	f000 8266 	beq.w	800c348 <_dtoa_r+0x958>
 800be7c:	2400      	movs	r4, #0
 800be7e:	4625      	mov	r5, r4
 800be80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be82:	4656      	mov	r6, sl
 800be84:	ea6f 0803 	mvn.w	r8, r3
 800be88:	2700      	movs	r7, #0
 800be8a:	4621      	mov	r1, r4
 800be8c:	4648      	mov	r0, r9
 800be8e:	f000 fcbf 	bl	800c810 <_Bfree>
 800be92:	2d00      	cmp	r5, #0
 800be94:	f000 80bd 	beq.w	800c012 <_dtoa_r+0x622>
 800be98:	b12f      	cbz	r7, 800bea6 <_dtoa_r+0x4b6>
 800be9a:	42af      	cmp	r7, r5
 800be9c:	d003      	beq.n	800bea6 <_dtoa_r+0x4b6>
 800be9e:	4639      	mov	r1, r7
 800bea0:	4648      	mov	r0, r9
 800bea2:	f000 fcb5 	bl	800c810 <_Bfree>
 800bea6:	4629      	mov	r1, r5
 800bea8:	4648      	mov	r0, r9
 800beaa:	f000 fcb1 	bl	800c810 <_Bfree>
 800beae:	e0b0      	b.n	800c012 <_dtoa_r+0x622>
 800beb0:	07e2      	lsls	r2, r4, #31
 800beb2:	d505      	bpl.n	800bec0 <_dtoa_r+0x4d0>
 800beb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800beb8:	f7f4 fba6 	bl	8000608 <__aeabi_dmul>
 800bebc:	3601      	adds	r6, #1
 800bebe:	2301      	movs	r3, #1
 800bec0:	1064      	asrs	r4, r4, #1
 800bec2:	3508      	adds	r5, #8
 800bec4:	e762      	b.n	800bd8c <_dtoa_r+0x39c>
 800bec6:	2602      	movs	r6, #2
 800bec8:	e765      	b.n	800bd96 <_dtoa_r+0x3a6>
 800beca:	9c03      	ldr	r4, [sp, #12]
 800becc:	46b8      	mov	r8, r7
 800bece:	e784      	b.n	800bdda <_dtoa_r+0x3ea>
 800bed0:	4b27      	ldr	r3, [pc, #156]	@ (800bf70 <_dtoa_r+0x580>)
 800bed2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bed4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bed8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bedc:	4454      	add	r4, sl
 800bede:	2900      	cmp	r1, #0
 800bee0:	d054      	beq.n	800bf8c <_dtoa_r+0x59c>
 800bee2:	4929      	ldr	r1, [pc, #164]	@ (800bf88 <_dtoa_r+0x598>)
 800bee4:	2000      	movs	r0, #0
 800bee6:	f7f4 fcb9 	bl	800085c <__aeabi_ddiv>
 800beea:	4633      	mov	r3, r6
 800beec:	462a      	mov	r2, r5
 800beee:	f7f4 f9d3 	bl	8000298 <__aeabi_dsub>
 800bef2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bef6:	4656      	mov	r6, sl
 800bef8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800befc:	f7f4 fe34 	bl	8000b68 <__aeabi_d2iz>
 800bf00:	4605      	mov	r5, r0
 800bf02:	f7f4 fb17 	bl	8000534 <__aeabi_i2d>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf0e:	f7f4 f9c3 	bl	8000298 <__aeabi_dsub>
 800bf12:	3530      	adds	r5, #48	@ 0x30
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf1c:	f806 5b01 	strb.w	r5, [r6], #1
 800bf20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf24:	f7f4 fde2 	bl	8000aec <__aeabi_dcmplt>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d172      	bne.n	800c012 <_dtoa_r+0x622>
 800bf2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf30:	4911      	ldr	r1, [pc, #68]	@ (800bf78 <_dtoa_r+0x588>)
 800bf32:	2000      	movs	r0, #0
 800bf34:	f7f4 f9b0 	bl	8000298 <__aeabi_dsub>
 800bf38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf3c:	f7f4 fdd6 	bl	8000aec <__aeabi_dcmplt>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	f040 80b4 	bne.w	800c0ae <_dtoa_r+0x6be>
 800bf46:	42a6      	cmp	r6, r4
 800bf48:	f43f af70 	beq.w	800be2c <_dtoa_r+0x43c>
 800bf4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bf50:	4b0a      	ldr	r3, [pc, #40]	@ (800bf7c <_dtoa_r+0x58c>)
 800bf52:	2200      	movs	r2, #0
 800bf54:	f7f4 fb58 	bl	8000608 <__aeabi_dmul>
 800bf58:	4b08      	ldr	r3, [pc, #32]	@ (800bf7c <_dtoa_r+0x58c>)
 800bf5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf5e:	2200      	movs	r2, #0
 800bf60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf64:	f7f4 fb50 	bl	8000608 <__aeabi_dmul>
 800bf68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf6c:	e7c4      	b.n	800bef8 <_dtoa_r+0x508>
 800bf6e:	bf00      	nop
 800bf70:	0800fad8 	.word	0x0800fad8
 800bf74:	0800fab0 	.word	0x0800fab0
 800bf78:	3ff00000 	.word	0x3ff00000
 800bf7c:	40240000 	.word	0x40240000
 800bf80:	401c0000 	.word	0x401c0000
 800bf84:	40140000 	.word	0x40140000
 800bf88:	3fe00000 	.word	0x3fe00000
 800bf8c:	4631      	mov	r1, r6
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f7f4 fb3a 	bl	8000608 <__aeabi_dmul>
 800bf94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf98:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bf9a:	4656      	mov	r6, sl
 800bf9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfa0:	f7f4 fde2 	bl	8000b68 <__aeabi_d2iz>
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	f7f4 fac5 	bl	8000534 <__aeabi_i2d>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfb2:	f7f4 f971 	bl	8000298 <__aeabi_dsub>
 800bfb6:	3530      	adds	r5, #48	@ 0x30
 800bfb8:	f806 5b01 	strb.w	r5, [r6], #1
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	42a6      	cmp	r6, r4
 800bfc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bfc6:	f04f 0200 	mov.w	r2, #0
 800bfca:	d124      	bne.n	800c016 <_dtoa_r+0x626>
 800bfcc:	4baf      	ldr	r3, [pc, #700]	@ (800c28c <_dtoa_r+0x89c>)
 800bfce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bfd2:	f7f4 f963 	bl	800029c <__adddf3>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfde:	f7f4 fda3 	bl	8000b28 <__aeabi_dcmpgt>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d163      	bne.n	800c0ae <_dtoa_r+0x6be>
 800bfe6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bfea:	49a8      	ldr	r1, [pc, #672]	@ (800c28c <_dtoa_r+0x89c>)
 800bfec:	2000      	movs	r0, #0
 800bfee:	f7f4 f953 	bl	8000298 <__aeabi_dsub>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bffa:	f7f4 fd77 	bl	8000aec <__aeabi_dcmplt>
 800bffe:	2800      	cmp	r0, #0
 800c000:	f43f af14 	beq.w	800be2c <_dtoa_r+0x43c>
 800c004:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c006:	1e73      	subs	r3, r6, #1
 800c008:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c00a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c00e:	2b30      	cmp	r3, #48	@ 0x30
 800c010:	d0f8      	beq.n	800c004 <_dtoa_r+0x614>
 800c012:	4647      	mov	r7, r8
 800c014:	e03b      	b.n	800c08e <_dtoa_r+0x69e>
 800c016:	4b9e      	ldr	r3, [pc, #632]	@ (800c290 <_dtoa_r+0x8a0>)
 800c018:	f7f4 faf6 	bl	8000608 <__aeabi_dmul>
 800c01c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c020:	e7bc      	b.n	800bf9c <_dtoa_r+0x5ac>
 800c022:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c026:	4656      	mov	r6, sl
 800c028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c02c:	4620      	mov	r0, r4
 800c02e:	4629      	mov	r1, r5
 800c030:	f7f4 fc14 	bl	800085c <__aeabi_ddiv>
 800c034:	f7f4 fd98 	bl	8000b68 <__aeabi_d2iz>
 800c038:	4680      	mov	r8, r0
 800c03a:	f7f4 fa7b 	bl	8000534 <__aeabi_i2d>
 800c03e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c042:	f7f4 fae1 	bl	8000608 <__aeabi_dmul>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4620      	mov	r0, r4
 800c04c:	4629      	mov	r1, r5
 800c04e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c052:	f7f4 f921 	bl	8000298 <__aeabi_dsub>
 800c056:	f806 4b01 	strb.w	r4, [r6], #1
 800c05a:	9d03      	ldr	r5, [sp, #12]
 800c05c:	eba6 040a 	sub.w	r4, r6, sl
 800c060:	42a5      	cmp	r5, r4
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	d133      	bne.n	800c0d0 <_dtoa_r+0x6e0>
 800c068:	f7f4 f918 	bl	800029c <__adddf3>
 800c06c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c070:	4604      	mov	r4, r0
 800c072:	460d      	mov	r5, r1
 800c074:	f7f4 fd58 	bl	8000b28 <__aeabi_dcmpgt>
 800c078:	b9c0      	cbnz	r0, 800c0ac <_dtoa_r+0x6bc>
 800c07a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c07e:	4620      	mov	r0, r4
 800c080:	4629      	mov	r1, r5
 800c082:	f7f4 fd29 	bl	8000ad8 <__aeabi_dcmpeq>
 800c086:	b110      	cbz	r0, 800c08e <_dtoa_r+0x69e>
 800c088:	f018 0f01 	tst.w	r8, #1
 800c08c:	d10e      	bne.n	800c0ac <_dtoa_r+0x6bc>
 800c08e:	9902      	ldr	r1, [sp, #8]
 800c090:	4648      	mov	r0, r9
 800c092:	f000 fbbd 	bl	800c810 <_Bfree>
 800c096:	2300      	movs	r3, #0
 800c098:	7033      	strb	r3, [r6, #0]
 800c09a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c09c:	3701      	adds	r7, #1
 800c09e:	601f      	str	r7, [r3, #0]
 800c0a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f000 824b 	beq.w	800c53e <_dtoa_r+0xb4e>
 800c0a8:	601e      	str	r6, [r3, #0]
 800c0aa:	e248      	b.n	800c53e <_dtoa_r+0xb4e>
 800c0ac:	46b8      	mov	r8, r7
 800c0ae:	4633      	mov	r3, r6
 800c0b0:	461e      	mov	r6, r3
 800c0b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0b6:	2a39      	cmp	r2, #57	@ 0x39
 800c0b8:	d106      	bne.n	800c0c8 <_dtoa_r+0x6d8>
 800c0ba:	459a      	cmp	sl, r3
 800c0bc:	d1f8      	bne.n	800c0b0 <_dtoa_r+0x6c0>
 800c0be:	2230      	movs	r2, #48	@ 0x30
 800c0c0:	f108 0801 	add.w	r8, r8, #1
 800c0c4:	f88a 2000 	strb.w	r2, [sl]
 800c0c8:	781a      	ldrb	r2, [r3, #0]
 800c0ca:	3201      	adds	r2, #1
 800c0cc:	701a      	strb	r2, [r3, #0]
 800c0ce:	e7a0      	b.n	800c012 <_dtoa_r+0x622>
 800c0d0:	4b6f      	ldr	r3, [pc, #444]	@ (800c290 <_dtoa_r+0x8a0>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f7f4 fa98 	bl	8000608 <__aeabi_dmul>
 800c0d8:	2200      	movs	r2, #0
 800c0da:	2300      	movs	r3, #0
 800c0dc:	4604      	mov	r4, r0
 800c0de:	460d      	mov	r5, r1
 800c0e0:	f7f4 fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d09f      	beq.n	800c028 <_dtoa_r+0x638>
 800c0e8:	e7d1      	b.n	800c08e <_dtoa_r+0x69e>
 800c0ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0ec:	2a00      	cmp	r2, #0
 800c0ee:	f000 80ea 	beq.w	800c2c6 <_dtoa_r+0x8d6>
 800c0f2:	9a07      	ldr	r2, [sp, #28]
 800c0f4:	2a01      	cmp	r2, #1
 800c0f6:	f300 80cd 	bgt.w	800c294 <_dtoa_r+0x8a4>
 800c0fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c0fc:	2a00      	cmp	r2, #0
 800c0fe:	f000 80c1 	beq.w	800c284 <_dtoa_r+0x894>
 800c102:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c106:	9c08      	ldr	r4, [sp, #32]
 800c108:	9e00      	ldr	r6, [sp, #0]
 800c10a:	9a00      	ldr	r2, [sp, #0]
 800c10c:	441a      	add	r2, r3
 800c10e:	9200      	str	r2, [sp, #0]
 800c110:	9a06      	ldr	r2, [sp, #24]
 800c112:	2101      	movs	r1, #1
 800c114:	441a      	add	r2, r3
 800c116:	4648      	mov	r0, r9
 800c118:	9206      	str	r2, [sp, #24]
 800c11a:	f000 fc2d 	bl	800c978 <__i2b>
 800c11e:	4605      	mov	r5, r0
 800c120:	b166      	cbz	r6, 800c13c <_dtoa_r+0x74c>
 800c122:	9b06      	ldr	r3, [sp, #24]
 800c124:	2b00      	cmp	r3, #0
 800c126:	dd09      	ble.n	800c13c <_dtoa_r+0x74c>
 800c128:	42b3      	cmp	r3, r6
 800c12a:	9a00      	ldr	r2, [sp, #0]
 800c12c:	bfa8      	it	ge
 800c12e:	4633      	movge	r3, r6
 800c130:	1ad2      	subs	r2, r2, r3
 800c132:	9200      	str	r2, [sp, #0]
 800c134:	9a06      	ldr	r2, [sp, #24]
 800c136:	1af6      	subs	r6, r6, r3
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	9306      	str	r3, [sp, #24]
 800c13c:	9b08      	ldr	r3, [sp, #32]
 800c13e:	b30b      	cbz	r3, 800c184 <_dtoa_r+0x794>
 800c140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c142:	2b00      	cmp	r3, #0
 800c144:	f000 80c6 	beq.w	800c2d4 <_dtoa_r+0x8e4>
 800c148:	2c00      	cmp	r4, #0
 800c14a:	f000 80c0 	beq.w	800c2ce <_dtoa_r+0x8de>
 800c14e:	4629      	mov	r1, r5
 800c150:	4622      	mov	r2, r4
 800c152:	4648      	mov	r0, r9
 800c154:	f000 fcc8 	bl	800cae8 <__pow5mult>
 800c158:	9a02      	ldr	r2, [sp, #8]
 800c15a:	4601      	mov	r1, r0
 800c15c:	4605      	mov	r5, r0
 800c15e:	4648      	mov	r0, r9
 800c160:	f000 fc20 	bl	800c9a4 <__multiply>
 800c164:	9902      	ldr	r1, [sp, #8]
 800c166:	4680      	mov	r8, r0
 800c168:	4648      	mov	r0, r9
 800c16a:	f000 fb51 	bl	800c810 <_Bfree>
 800c16e:	9b08      	ldr	r3, [sp, #32]
 800c170:	1b1b      	subs	r3, r3, r4
 800c172:	9308      	str	r3, [sp, #32]
 800c174:	f000 80b1 	beq.w	800c2da <_dtoa_r+0x8ea>
 800c178:	9a08      	ldr	r2, [sp, #32]
 800c17a:	4641      	mov	r1, r8
 800c17c:	4648      	mov	r0, r9
 800c17e:	f000 fcb3 	bl	800cae8 <__pow5mult>
 800c182:	9002      	str	r0, [sp, #8]
 800c184:	2101      	movs	r1, #1
 800c186:	4648      	mov	r0, r9
 800c188:	f000 fbf6 	bl	800c978 <__i2b>
 800c18c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c18e:	4604      	mov	r4, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 81d8 	beq.w	800c546 <_dtoa_r+0xb56>
 800c196:	461a      	mov	r2, r3
 800c198:	4601      	mov	r1, r0
 800c19a:	4648      	mov	r0, r9
 800c19c:	f000 fca4 	bl	800cae8 <__pow5mult>
 800c1a0:	9b07      	ldr	r3, [sp, #28]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	f300 809f 	bgt.w	800c2e8 <_dtoa_r+0x8f8>
 800c1aa:	9b04      	ldr	r3, [sp, #16]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f040 8097 	bne.w	800c2e0 <_dtoa_r+0x8f0>
 800c1b2:	9b05      	ldr	r3, [sp, #20]
 800c1b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f040 8093 	bne.w	800c2e4 <_dtoa_r+0x8f4>
 800c1be:	9b05      	ldr	r3, [sp, #20]
 800c1c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c1c4:	0d1b      	lsrs	r3, r3, #20
 800c1c6:	051b      	lsls	r3, r3, #20
 800c1c8:	b133      	cbz	r3, 800c1d8 <_dtoa_r+0x7e8>
 800c1ca:	9b00      	ldr	r3, [sp, #0]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	9b06      	ldr	r3, [sp, #24]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	9306      	str	r3, [sp, #24]
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	9308      	str	r3, [sp, #32]
 800c1da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 81b8 	beq.w	800c552 <_dtoa_r+0xb62>
 800c1e2:	6923      	ldr	r3, [r4, #16]
 800c1e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1e8:	6918      	ldr	r0, [r3, #16]
 800c1ea:	f000 fb79 	bl	800c8e0 <__hi0bits>
 800c1ee:	f1c0 0020 	rsb	r0, r0, #32
 800c1f2:	9b06      	ldr	r3, [sp, #24]
 800c1f4:	4418      	add	r0, r3
 800c1f6:	f010 001f 	ands.w	r0, r0, #31
 800c1fa:	f000 8082 	beq.w	800c302 <_dtoa_r+0x912>
 800c1fe:	f1c0 0320 	rsb	r3, r0, #32
 800c202:	2b04      	cmp	r3, #4
 800c204:	dd73      	ble.n	800c2ee <_dtoa_r+0x8fe>
 800c206:	9b00      	ldr	r3, [sp, #0]
 800c208:	f1c0 001c 	rsb	r0, r0, #28
 800c20c:	4403      	add	r3, r0
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	9b06      	ldr	r3, [sp, #24]
 800c212:	4403      	add	r3, r0
 800c214:	4406      	add	r6, r0
 800c216:	9306      	str	r3, [sp, #24]
 800c218:	9b00      	ldr	r3, [sp, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	dd05      	ble.n	800c22a <_dtoa_r+0x83a>
 800c21e:	9902      	ldr	r1, [sp, #8]
 800c220:	461a      	mov	r2, r3
 800c222:	4648      	mov	r0, r9
 800c224:	f000 fcba 	bl	800cb9c <__lshift>
 800c228:	9002      	str	r0, [sp, #8]
 800c22a:	9b06      	ldr	r3, [sp, #24]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	dd05      	ble.n	800c23c <_dtoa_r+0x84c>
 800c230:	4621      	mov	r1, r4
 800c232:	461a      	mov	r2, r3
 800c234:	4648      	mov	r0, r9
 800c236:	f000 fcb1 	bl	800cb9c <__lshift>
 800c23a:	4604      	mov	r4, r0
 800c23c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d061      	beq.n	800c306 <_dtoa_r+0x916>
 800c242:	9802      	ldr	r0, [sp, #8]
 800c244:	4621      	mov	r1, r4
 800c246:	f000 fd15 	bl	800cc74 <__mcmp>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	da5b      	bge.n	800c306 <_dtoa_r+0x916>
 800c24e:	2300      	movs	r3, #0
 800c250:	9902      	ldr	r1, [sp, #8]
 800c252:	220a      	movs	r2, #10
 800c254:	4648      	mov	r0, r9
 800c256:	f000 fafd 	bl	800c854 <__multadd>
 800c25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c25c:	9002      	str	r0, [sp, #8]
 800c25e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 8177 	beq.w	800c556 <_dtoa_r+0xb66>
 800c268:	4629      	mov	r1, r5
 800c26a:	2300      	movs	r3, #0
 800c26c:	220a      	movs	r2, #10
 800c26e:	4648      	mov	r0, r9
 800c270:	f000 faf0 	bl	800c854 <__multadd>
 800c274:	f1bb 0f00 	cmp.w	fp, #0
 800c278:	4605      	mov	r5, r0
 800c27a:	dc6f      	bgt.n	800c35c <_dtoa_r+0x96c>
 800c27c:	9b07      	ldr	r3, [sp, #28]
 800c27e:	2b02      	cmp	r3, #2
 800c280:	dc49      	bgt.n	800c316 <_dtoa_r+0x926>
 800c282:	e06b      	b.n	800c35c <_dtoa_r+0x96c>
 800c284:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c286:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c28a:	e73c      	b.n	800c106 <_dtoa_r+0x716>
 800c28c:	3fe00000 	.word	0x3fe00000
 800c290:	40240000 	.word	0x40240000
 800c294:	9b03      	ldr	r3, [sp, #12]
 800c296:	1e5c      	subs	r4, r3, #1
 800c298:	9b08      	ldr	r3, [sp, #32]
 800c29a:	42a3      	cmp	r3, r4
 800c29c:	db09      	blt.n	800c2b2 <_dtoa_r+0x8c2>
 800c29e:	1b1c      	subs	r4, r3, r4
 800c2a0:	9b03      	ldr	r3, [sp, #12]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f6bf af30 	bge.w	800c108 <_dtoa_r+0x718>
 800c2a8:	9b00      	ldr	r3, [sp, #0]
 800c2aa:	9a03      	ldr	r2, [sp, #12]
 800c2ac:	1a9e      	subs	r6, r3, r2
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e72b      	b.n	800c10a <_dtoa_r+0x71a>
 800c2b2:	9b08      	ldr	r3, [sp, #32]
 800c2b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2b6:	9408      	str	r4, [sp, #32]
 800c2b8:	1ae3      	subs	r3, r4, r3
 800c2ba:	441a      	add	r2, r3
 800c2bc:	9e00      	ldr	r6, [sp, #0]
 800c2be:	9b03      	ldr	r3, [sp, #12]
 800c2c0:	920d      	str	r2, [sp, #52]	@ 0x34
 800c2c2:	2400      	movs	r4, #0
 800c2c4:	e721      	b.n	800c10a <_dtoa_r+0x71a>
 800c2c6:	9c08      	ldr	r4, [sp, #32]
 800c2c8:	9e00      	ldr	r6, [sp, #0]
 800c2ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c2cc:	e728      	b.n	800c120 <_dtoa_r+0x730>
 800c2ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c2d2:	e751      	b.n	800c178 <_dtoa_r+0x788>
 800c2d4:	9a08      	ldr	r2, [sp, #32]
 800c2d6:	9902      	ldr	r1, [sp, #8]
 800c2d8:	e750      	b.n	800c17c <_dtoa_r+0x78c>
 800c2da:	f8cd 8008 	str.w	r8, [sp, #8]
 800c2de:	e751      	b.n	800c184 <_dtoa_r+0x794>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	e779      	b.n	800c1d8 <_dtoa_r+0x7e8>
 800c2e4:	9b04      	ldr	r3, [sp, #16]
 800c2e6:	e777      	b.n	800c1d8 <_dtoa_r+0x7e8>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	9308      	str	r3, [sp, #32]
 800c2ec:	e779      	b.n	800c1e2 <_dtoa_r+0x7f2>
 800c2ee:	d093      	beq.n	800c218 <_dtoa_r+0x828>
 800c2f0:	9a00      	ldr	r2, [sp, #0]
 800c2f2:	331c      	adds	r3, #28
 800c2f4:	441a      	add	r2, r3
 800c2f6:	9200      	str	r2, [sp, #0]
 800c2f8:	9a06      	ldr	r2, [sp, #24]
 800c2fa:	441a      	add	r2, r3
 800c2fc:	441e      	add	r6, r3
 800c2fe:	9206      	str	r2, [sp, #24]
 800c300:	e78a      	b.n	800c218 <_dtoa_r+0x828>
 800c302:	4603      	mov	r3, r0
 800c304:	e7f4      	b.n	800c2f0 <_dtoa_r+0x900>
 800c306:	9b03      	ldr	r3, [sp, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	46b8      	mov	r8, r7
 800c30c:	dc20      	bgt.n	800c350 <_dtoa_r+0x960>
 800c30e:	469b      	mov	fp, r3
 800c310:	9b07      	ldr	r3, [sp, #28]
 800c312:	2b02      	cmp	r3, #2
 800c314:	dd1e      	ble.n	800c354 <_dtoa_r+0x964>
 800c316:	f1bb 0f00 	cmp.w	fp, #0
 800c31a:	f47f adb1 	bne.w	800be80 <_dtoa_r+0x490>
 800c31e:	4621      	mov	r1, r4
 800c320:	465b      	mov	r3, fp
 800c322:	2205      	movs	r2, #5
 800c324:	4648      	mov	r0, r9
 800c326:	f000 fa95 	bl	800c854 <__multadd>
 800c32a:	4601      	mov	r1, r0
 800c32c:	4604      	mov	r4, r0
 800c32e:	9802      	ldr	r0, [sp, #8]
 800c330:	f000 fca0 	bl	800cc74 <__mcmp>
 800c334:	2800      	cmp	r0, #0
 800c336:	f77f ada3 	ble.w	800be80 <_dtoa_r+0x490>
 800c33a:	4656      	mov	r6, sl
 800c33c:	2331      	movs	r3, #49	@ 0x31
 800c33e:	f806 3b01 	strb.w	r3, [r6], #1
 800c342:	f108 0801 	add.w	r8, r8, #1
 800c346:	e59f      	b.n	800be88 <_dtoa_r+0x498>
 800c348:	9c03      	ldr	r4, [sp, #12]
 800c34a:	46b8      	mov	r8, r7
 800c34c:	4625      	mov	r5, r4
 800c34e:	e7f4      	b.n	800c33a <_dtoa_r+0x94a>
 800c350:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c356:	2b00      	cmp	r3, #0
 800c358:	f000 8101 	beq.w	800c55e <_dtoa_r+0xb6e>
 800c35c:	2e00      	cmp	r6, #0
 800c35e:	dd05      	ble.n	800c36c <_dtoa_r+0x97c>
 800c360:	4629      	mov	r1, r5
 800c362:	4632      	mov	r2, r6
 800c364:	4648      	mov	r0, r9
 800c366:	f000 fc19 	bl	800cb9c <__lshift>
 800c36a:	4605      	mov	r5, r0
 800c36c:	9b08      	ldr	r3, [sp, #32]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d05c      	beq.n	800c42c <_dtoa_r+0xa3c>
 800c372:	6869      	ldr	r1, [r5, #4]
 800c374:	4648      	mov	r0, r9
 800c376:	f000 fa0b 	bl	800c790 <_Balloc>
 800c37a:	4606      	mov	r6, r0
 800c37c:	b928      	cbnz	r0, 800c38a <_dtoa_r+0x99a>
 800c37e:	4b82      	ldr	r3, [pc, #520]	@ (800c588 <_dtoa_r+0xb98>)
 800c380:	4602      	mov	r2, r0
 800c382:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c386:	f7ff bb4a 	b.w	800ba1e <_dtoa_r+0x2e>
 800c38a:	692a      	ldr	r2, [r5, #16]
 800c38c:	3202      	adds	r2, #2
 800c38e:	0092      	lsls	r2, r2, #2
 800c390:	f105 010c 	add.w	r1, r5, #12
 800c394:	300c      	adds	r0, #12
 800c396:	f000 ffa3 	bl	800d2e0 <memcpy>
 800c39a:	2201      	movs	r2, #1
 800c39c:	4631      	mov	r1, r6
 800c39e:	4648      	mov	r0, r9
 800c3a0:	f000 fbfc 	bl	800cb9c <__lshift>
 800c3a4:	f10a 0301 	add.w	r3, sl, #1
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	eb0a 030b 	add.w	r3, sl, fp
 800c3ae:	9308      	str	r3, [sp, #32]
 800c3b0:	9b04      	ldr	r3, [sp, #16]
 800c3b2:	f003 0301 	and.w	r3, r3, #1
 800c3b6:	462f      	mov	r7, r5
 800c3b8:	9306      	str	r3, [sp, #24]
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	9b00      	ldr	r3, [sp, #0]
 800c3be:	9802      	ldr	r0, [sp, #8]
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	f103 3bff 	add.w	fp, r3, #4294967295
 800c3c6:	f7ff fa88 	bl	800b8da <quorem>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	3330      	adds	r3, #48	@ 0x30
 800c3ce:	9003      	str	r0, [sp, #12]
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	9802      	ldr	r0, [sp, #8]
 800c3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3d6:	f000 fc4d 	bl	800cc74 <__mcmp>
 800c3da:	462a      	mov	r2, r5
 800c3dc:	9004      	str	r0, [sp, #16]
 800c3de:	4621      	mov	r1, r4
 800c3e0:	4648      	mov	r0, r9
 800c3e2:	f000 fc63 	bl	800ccac <__mdiff>
 800c3e6:	68c2      	ldr	r2, [r0, #12]
 800c3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	bb02      	cbnz	r2, 800c430 <_dtoa_r+0xa40>
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	9802      	ldr	r0, [sp, #8]
 800c3f2:	f000 fc3f 	bl	800cc74 <__mcmp>
 800c3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	4631      	mov	r1, r6
 800c3fc:	4648      	mov	r0, r9
 800c3fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800c400:	9309      	str	r3, [sp, #36]	@ 0x24
 800c402:	f000 fa05 	bl	800c810 <_Bfree>
 800c406:	9b07      	ldr	r3, [sp, #28]
 800c408:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c40a:	9e00      	ldr	r6, [sp, #0]
 800c40c:	ea42 0103 	orr.w	r1, r2, r3
 800c410:	9b06      	ldr	r3, [sp, #24]
 800c412:	4319      	orrs	r1, r3
 800c414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c416:	d10d      	bne.n	800c434 <_dtoa_r+0xa44>
 800c418:	2b39      	cmp	r3, #57	@ 0x39
 800c41a:	d027      	beq.n	800c46c <_dtoa_r+0xa7c>
 800c41c:	9a04      	ldr	r2, [sp, #16]
 800c41e:	2a00      	cmp	r2, #0
 800c420:	dd01      	ble.n	800c426 <_dtoa_r+0xa36>
 800c422:	9b03      	ldr	r3, [sp, #12]
 800c424:	3331      	adds	r3, #49	@ 0x31
 800c426:	f88b 3000 	strb.w	r3, [fp]
 800c42a:	e52e      	b.n	800be8a <_dtoa_r+0x49a>
 800c42c:	4628      	mov	r0, r5
 800c42e:	e7b9      	b.n	800c3a4 <_dtoa_r+0x9b4>
 800c430:	2201      	movs	r2, #1
 800c432:	e7e2      	b.n	800c3fa <_dtoa_r+0xa0a>
 800c434:	9904      	ldr	r1, [sp, #16]
 800c436:	2900      	cmp	r1, #0
 800c438:	db04      	blt.n	800c444 <_dtoa_r+0xa54>
 800c43a:	9807      	ldr	r0, [sp, #28]
 800c43c:	4301      	orrs	r1, r0
 800c43e:	9806      	ldr	r0, [sp, #24]
 800c440:	4301      	orrs	r1, r0
 800c442:	d120      	bne.n	800c486 <_dtoa_r+0xa96>
 800c444:	2a00      	cmp	r2, #0
 800c446:	ddee      	ble.n	800c426 <_dtoa_r+0xa36>
 800c448:	9902      	ldr	r1, [sp, #8]
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	2201      	movs	r2, #1
 800c44e:	4648      	mov	r0, r9
 800c450:	f000 fba4 	bl	800cb9c <__lshift>
 800c454:	4621      	mov	r1, r4
 800c456:	9002      	str	r0, [sp, #8]
 800c458:	f000 fc0c 	bl	800cc74 <__mcmp>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	9b00      	ldr	r3, [sp, #0]
 800c460:	dc02      	bgt.n	800c468 <_dtoa_r+0xa78>
 800c462:	d1e0      	bne.n	800c426 <_dtoa_r+0xa36>
 800c464:	07da      	lsls	r2, r3, #31
 800c466:	d5de      	bpl.n	800c426 <_dtoa_r+0xa36>
 800c468:	2b39      	cmp	r3, #57	@ 0x39
 800c46a:	d1da      	bne.n	800c422 <_dtoa_r+0xa32>
 800c46c:	2339      	movs	r3, #57	@ 0x39
 800c46e:	f88b 3000 	strb.w	r3, [fp]
 800c472:	4633      	mov	r3, r6
 800c474:	461e      	mov	r6, r3
 800c476:	3b01      	subs	r3, #1
 800c478:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c47c:	2a39      	cmp	r2, #57	@ 0x39
 800c47e:	d04e      	beq.n	800c51e <_dtoa_r+0xb2e>
 800c480:	3201      	adds	r2, #1
 800c482:	701a      	strb	r2, [r3, #0]
 800c484:	e501      	b.n	800be8a <_dtoa_r+0x49a>
 800c486:	2a00      	cmp	r2, #0
 800c488:	dd03      	ble.n	800c492 <_dtoa_r+0xaa2>
 800c48a:	2b39      	cmp	r3, #57	@ 0x39
 800c48c:	d0ee      	beq.n	800c46c <_dtoa_r+0xa7c>
 800c48e:	3301      	adds	r3, #1
 800c490:	e7c9      	b.n	800c426 <_dtoa_r+0xa36>
 800c492:	9a00      	ldr	r2, [sp, #0]
 800c494:	9908      	ldr	r1, [sp, #32]
 800c496:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c49a:	428a      	cmp	r2, r1
 800c49c:	d028      	beq.n	800c4f0 <_dtoa_r+0xb00>
 800c49e:	9902      	ldr	r1, [sp, #8]
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	220a      	movs	r2, #10
 800c4a4:	4648      	mov	r0, r9
 800c4a6:	f000 f9d5 	bl	800c854 <__multadd>
 800c4aa:	42af      	cmp	r7, r5
 800c4ac:	9002      	str	r0, [sp, #8]
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	f04f 020a 	mov.w	r2, #10
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	4648      	mov	r0, r9
 800c4ba:	d107      	bne.n	800c4cc <_dtoa_r+0xadc>
 800c4bc:	f000 f9ca 	bl	800c854 <__multadd>
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	9b00      	ldr	r3, [sp, #0]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	e777      	b.n	800c3bc <_dtoa_r+0x9cc>
 800c4cc:	f000 f9c2 	bl	800c854 <__multadd>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4607      	mov	r7, r0
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	220a      	movs	r2, #10
 800c4d8:	4648      	mov	r0, r9
 800c4da:	f000 f9bb 	bl	800c854 <__multadd>
 800c4de:	4605      	mov	r5, r0
 800c4e0:	e7f0      	b.n	800c4c4 <_dtoa_r+0xad4>
 800c4e2:	f1bb 0f00 	cmp.w	fp, #0
 800c4e6:	bfcc      	ite	gt
 800c4e8:	465e      	movgt	r6, fp
 800c4ea:	2601      	movle	r6, #1
 800c4ec:	4456      	add	r6, sl
 800c4ee:	2700      	movs	r7, #0
 800c4f0:	9902      	ldr	r1, [sp, #8]
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	4648      	mov	r0, r9
 800c4f8:	f000 fb50 	bl	800cb9c <__lshift>
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	9002      	str	r0, [sp, #8]
 800c500:	f000 fbb8 	bl	800cc74 <__mcmp>
 800c504:	2800      	cmp	r0, #0
 800c506:	dcb4      	bgt.n	800c472 <_dtoa_r+0xa82>
 800c508:	d102      	bne.n	800c510 <_dtoa_r+0xb20>
 800c50a:	9b00      	ldr	r3, [sp, #0]
 800c50c:	07db      	lsls	r3, r3, #31
 800c50e:	d4b0      	bmi.n	800c472 <_dtoa_r+0xa82>
 800c510:	4633      	mov	r3, r6
 800c512:	461e      	mov	r6, r3
 800c514:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c518:	2a30      	cmp	r2, #48	@ 0x30
 800c51a:	d0fa      	beq.n	800c512 <_dtoa_r+0xb22>
 800c51c:	e4b5      	b.n	800be8a <_dtoa_r+0x49a>
 800c51e:	459a      	cmp	sl, r3
 800c520:	d1a8      	bne.n	800c474 <_dtoa_r+0xa84>
 800c522:	2331      	movs	r3, #49	@ 0x31
 800c524:	f108 0801 	add.w	r8, r8, #1
 800c528:	f88a 3000 	strb.w	r3, [sl]
 800c52c:	e4ad      	b.n	800be8a <_dtoa_r+0x49a>
 800c52e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c530:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c58c <_dtoa_r+0xb9c>
 800c534:	b11b      	cbz	r3, 800c53e <_dtoa_r+0xb4e>
 800c536:	f10a 0308 	add.w	r3, sl, #8
 800c53a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	4650      	mov	r0, sl
 800c540:	b017      	add	sp, #92	@ 0x5c
 800c542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c546:	9b07      	ldr	r3, [sp, #28]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	f77f ae2e 	ble.w	800c1aa <_dtoa_r+0x7ba>
 800c54e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c550:	9308      	str	r3, [sp, #32]
 800c552:	2001      	movs	r0, #1
 800c554:	e64d      	b.n	800c1f2 <_dtoa_r+0x802>
 800c556:	f1bb 0f00 	cmp.w	fp, #0
 800c55a:	f77f aed9 	ble.w	800c310 <_dtoa_r+0x920>
 800c55e:	4656      	mov	r6, sl
 800c560:	9802      	ldr	r0, [sp, #8]
 800c562:	4621      	mov	r1, r4
 800c564:	f7ff f9b9 	bl	800b8da <quorem>
 800c568:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c56c:	f806 3b01 	strb.w	r3, [r6], #1
 800c570:	eba6 020a 	sub.w	r2, r6, sl
 800c574:	4593      	cmp	fp, r2
 800c576:	ddb4      	ble.n	800c4e2 <_dtoa_r+0xaf2>
 800c578:	9902      	ldr	r1, [sp, #8]
 800c57a:	2300      	movs	r3, #0
 800c57c:	220a      	movs	r2, #10
 800c57e:	4648      	mov	r0, r9
 800c580:	f000 f968 	bl	800c854 <__multadd>
 800c584:	9002      	str	r0, [sp, #8]
 800c586:	e7eb      	b.n	800c560 <_dtoa_r+0xb70>
 800c588:	0800f9dc 	.word	0x0800f9dc
 800c58c:	0800f960 	.word	0x0800f960

0800c590 <_free_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4605      	mov	r5, r0
 800c594:	2900      	cmp	r1, #0
 800c596:	d041      	beq.n	800c61c <_free_r+0x8c>
 800c598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c59c:	1f0c      	subs	r4, r1, #4
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	bfb8      	it	lt
 800c5a2:	18e4      	addlt	r4, r4, r3
 800c5a4:	f000 f8e8 	bl	800c778 <__malloc_lock>
 800c5a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c620 <_free_r+0x90>)
 800c5aa:	6813      	ldr	r3, [r2, #0]
 800c5ac:	b933      	cbnz	r3, 800c5bc <_free_r+0x2c>
 800c5ae:	6063      	str	r3, [r4, #4]
 800c5b0:	6014      	str	r4, [r2, #0]
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5b8:	f000 b8e4 	b.w	800c784 <__malloc_unlock>
 800c5bc:	42a3      	cmp	r3, r4
 800c5be:	d908      	bls.n	800c5d2 <_free_r+0x42>
 800c5c0:	6820      	ldr	r0, [r4, #0]
 800c5c2:	1821      	adds	r1, r4, r0
 800c5c4:	428b      	cmp	r3, r1
 800c5c6:	bf01      	itttt	eq
 800c5c8:	6819      	ldreq	r1, [r3, #0]
 800c5ca:	685b      	ldreq	r3, [r3, #4]
 800c5cc:	1809      	addeq	r1, r1, r0
 800c5ce:	6021      	streq	r1, [r4, #0]
 800c5d0:	e7ed      	b.n	800c5ae <_free_r+0x1e>
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	b10b      	cbz	r3, 800c5dc <_free_r+0x4c>
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	d9fa      	bls.n	800c5d2 <_free_r+0x42>
 800c5dc:	6811      	ldr	r1, [r2, #0]
 800c5de:	1850      	adds	r0, r2, r1
 800c5e0:	42a0      	cmp	r0, r4
 800c5e2:	d10b      	bne.n	800c5fc <_free_r+0x6c>
 800c5e4:	6820      	ldr	r0, [r4, #0]
 800c5e6:	4401      	add	r1, r0
 800c5e8:	1850      	adds	r0, r2, r1
 800c5ea:	4283      	cmp	r3, r0
 800c5ec:	6011      	str	r1, [r2, #0]
 800c5ee:	d1e0      	bne.n	800c5b2 <_free_r+0x22>
 800c5f0:	6818      	ldr	r0, [r3, #0]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	6053      	str	r3, [r2, #4]
 800c5f6:	4408      	add	r0, r1
 800c5f8:	6010      	str	r0, [r2, #0]
 800c5fa:	e7da      	b.n	800c5b2 <_free_r+0x22>
 800c5fc:	d902      	bls.n	800c604 <_free_r+0x74>
 800c5fe:	230c      	movs	r3, #12
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	e7d6      	b.n	800c5b2 <_free_r+0x22>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	1821      	adds	r1, r4, r0
 800c608:	428b      	cmp	r3, r1
 800c60a:	bf04      	itt	eq
 800c60c:	6819      	ldreq	r1, [r3, #0]
 800c60e:	685b      	ldreq	r3, [r3, #4]
 800c610:	6063      	str	r3, [r4, #4]
 800c612:	bf04      	itt	eq
 800c614:	1809      	addeq	r1, r1, r0
 800c616:	6021      	streq	r1, [r4, #0]
 800c618:	6054      	str	r4, [r2, #4]
 800c61a:	e7ca      	b.n	800c5b2 <_free_r+0x22>
 800c61c:	bd38      	pop	{r3, r4, r5, pc}
 800c61e:	bf00      	nop
 800c620:	200014a8 	.word	0x200014a8

0800c624 <malloc>:
 800c624:	4b02      	ldr	r3, [pc, #8]	@ (800c630 <malloc+0xc>)
 800c626:	4601      	mov	r1, r0
 800c628:	6818      	ldr	r0, [r3, #0]
 800c62a:	f000 b825 	b.w	800c678 <_malloc_r>
 800c62e:	bf00      	nop
 800c630:	20000078 	.word	0x20000078

0800c634 <sbrk_aligned>:
 800c634:	b570      	push	{r4, r5, r6, lr}
 800c636:	4e0f      	ldr	r6, [pc, #60]	@ (800c674 <sbrk_aligned+0x40>)
 800c638:	460c      	mov	r4, r1
 800c63a:	6831      	ldr	r1, [r6, #0]
 800c63c:	4605      	mov	r5, r0
 800c63e:	b911      	cbnz	r1, 800c646 <sbrk_aligned+0x12>
 800c640:	f000 fe3e 	bl	800d2c0 <_sbrk_r>
 800c644:	6030      	str	r0, [r6, #0]
 800c646:	4621      	mov	r1, r4
 800c648:	4628      	mov	r0, r5
 800c64a:	f000 fe39 	bl	800d2c0 <_sbrk_r>
 800c64e:	1c43      	adds	r3, r0, #1
 800c650:	d103      	bne.n	800c65a <sbrk_aligned+0x26>
 800c652:	f04f 34ff 	mov.w	r4, #4294967295
 800c656:	4620      	mov	r0, r4
 800c658:	bd70      	pop	{r4, r5, r6, pc}
 800c65a:	1cc4      	adds	r4, r0, #3
 800c65c:	f024 0403 	bic.w	r4, r4, #3
 800c660:	42a0      	cmp	r0, r4
 800c662:	d0f8      	beq.n	800c656 <sbrk_aligned+0x22>
 800c664:	1a21      	subs	r1, r4, r0
 800c666:	4628      	mov	r0, r5
 800c668:	f000 fe2a 	bl	800d2c0 <_sbrk_r>
 800c66c:	3001      	adds	r0, #1
 800c66e:	d1f2      	bne.n	800c656 <sbrk_aligned+0x22>
 800c670:	e7ef      	b.n	800c652 <sbrk_aligned+0x1e>
 800c672:	bf00      	nop
 800c674:	200014a4 	.word	0x200014a4

0800c678 <_malloc_r>:
 800c678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c67c:	1ccd      	adds	r5, r1, #3
 800c67e:	f025 0503 	bic.w	r5, r5, #3
 800c682:	3508      	adds	r5, #8
 800c684:	2d0c      	cmp	r5, #12
 800c686:	bf38      	it	cc
 800c688:	250c      	movcc	r5, #12
 800c68a:	2d00      	cmp	r5, #0
 800c68c:	4606      	mov	r6, r0
 800c68e:	db01      	blt.n	800c694 <_malloc_r+0x1c>
 800c690:	42a9      	cmp	r1, r5
 800c692:	d904      	bls.n	800c69e <_malloc_r+0x26>
 800c694:	230c      	movs	r3, #12
 800c696:	6033      	str	r3, [r6, #0]
 800c698:	2000      	movs	r0, #0
 800c69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c774 <_malloc_r+0xfc>
 800c6a2:	f000 f869 	bl	800c778 <__malloc_lock>
 800c6a6:	f8d8 3000 	ldr.w	r3, [r8]
 800c6aa:	461c      	mov	r4, r3
 800c6ac:	bb44      	cbnz	r4, 800c700 <_malloc_r+0x88>
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	f7ff ffbf 	bl	800c634 <sbrk_aligned>
 800c6b6:	1c43      	adds	r3, r0, #1
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	d158      	bne.n	800c76e <_malloc_r+0xf6>
 800c6bc:	f8d8 4000 	ldr.w	r4, [r8]
 800c6c0:	4627      	mov	r7, r4
 800c6c2:	2f00      	cmp	r7, #0
 800c6c4:	d143      	bne.n	800c74e <_malloc_r+0xd6>
 800c6c6:	2c00      	cmp	r4, #0
 800c6c8:	d04b      	beq.n	800c762 <_malloc_r+0xea>
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	4639      	mov	r1, r7
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	eb04 0903 	add.w	r9, r4, r3
 800c6d4:	f000 fdf4 	bl	800d2c0 <_sbrk_r>
 800c6d8:	4581      	cmp	r9, r0
 800c6da:	d142      	bne.n	800c762 <_malloc_r+0xea>
 800c6dc:	6821      	ldr	r1, [r4, #0]
 800c6de:	1a6d      	subs	r5, r5, r1
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	f7ff ffa6 	bl	800c634 <sbrk_aligned>
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	d03a      	beq.n	800c762 <_malloc_r+0xea>
 800c6ec:	6823      	ldr	r3, [r4, #0]
 800c6ee:	442b      	add	r3, r5
 800c6f0:	6023      	str	r3, [r4, #0]
 800c6f2:	f8d8 3000 	ldr.w	r3, [r8]
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	bb62      	cbnz	r2, 800c754 <_malloc_r+0xdc>
 800c6fa:	f8c8 7000 	str.w	r7, [r8]
 800c6fe:	e00f      	b.n	800c720 <_malloc_r+0xa8>
 800c700:	6822      	ldr	r2, [r4, #0]
 800c702:	1b52      	subs	r2, r2, r5
 800c704:	d420      	bmi.n	800c748 <_malloc_r+0xd0>
 800c706:	2a0b      	cmp	r2, #11
 800c708:	d917      	bls.n	800c73a <_malloc_r+0xc2>
 800c70a:	1961      	adds	r1, r4, r5
 800c70c:	42a3      	cmp	r3, r4
 800c70e:	6025      	str	r5, [r4, #0]
 800c710:	bf18      	it	ne
 800c712:	6059      	strne	r1, [r3, #4]
 800c714:	6863      	ldr	r3, [r4, #4]
 800c716:	bf08      	it	eq
 800c718:	f8c8 1000 	streq.w	r1, [r8]
 800c71c:	5162      	str	r2, [r4, r5]
 800c71e:	604b      	str	r3, [r1, #4]
 800c720:	4630      	mov	r0, r6
 800c722:	f000 f82f 	bl	800c784 <__malloc_unlock>
 800c726:	f104 000b 	add.w	r0, r4, #11
 800c72a:	1d23      	adds	r3, r4, #4
 800c72c:	f020 0007 	bic.w	r0, r0, #7
 800c730:	1ac2      	subs	r2, r0, r3
 800c732:	bf1c      	itt	ne
 800c734:	1a1b      	subne	r3, r3, r0
 800c736:	50a3      	strne	r3, [r4, r2]
 800c738:	e7af      	b.n	800c69a <_malloc_r+0x22>
 800c73a:	6862      	ldr	r2, [r4, #4]
 800c73c:	42a3      	cmp	r3, r4
 800c73e:	bf0c      	ite	eq
 800c740:	f8c8 2000 	streq.w	r2, [r8]
 800c744:	605a      	strne	r2, [r3, #4]
 800c746:	e7eb      	b.n	800c720 <_malloc_r+0xa8>
 800c748:	4623      	mov	r3, r4
 800c74a:	6864      	ldr	r4, [r4, #4]
 800c74c:	e7ae      	b.n	800c6ac <_malloc_r+0x34>
 800c74e:	463c      	mov	r4, r7
 800c750:	687f      	ldr	r7, [r7, #4]
 800c752:	e7b6      	b.n	800c6c2 <_malloc_r+0x4a>
 800c754:	461a      	mov	r2, r3
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	42a3      	cmp	r3, r4
 800c75a:	d1fb      	bne.n	800c754 <_malloc_r+0xdc>
 800c75c:	2300      	movs	r3, #0
 800c75e:	6053      	str	r3, [r2, #4]
 800c760:	e7de      	b.n	800c720 <_malloc_r+0xa8>
 800c762:	230c      	movs	r3, #12
 800c764:	6033      	str	r3, [r6, #0]
 800c766:	4630      	mov	r0, r6
 800c768:	f000 f80c 	bl	800c784 <__malloc_unlock>
 800c76c:	e794      	b.n	800c698 <_malloc_r+0x20>
 800c76e:	6005      	str	r5, [r0, #0]
 800c770:	e7d6      	b.n	800c720 <_malloc_r+0xa8>
 800c772:	bf00      	nop
 800c774:	200014a8 	.word	0x200014a8

0800c778 <__malloc_lock>:
 800c778:	4801      	ldr	r0, [pc, #4]	@ (800c780 <__malloc_lock+0x8>)
 800c77a:	f7ff b8ac 	b.w	800b8d6 <__retarget_lock_acquire_recursive>
 800c77e:	bf00      	nop
 800c780:	200014a0 	.word	0x200014a0

0800c784 <__malloc_unlock>:
 800c784:	4801      	ldr	r0, [pc, #4]	@ (800c78c <__malloc_unlock+0x8>)
 800c786:	f7ff b8a7 	b.w	800b8d8 <__retarget_lock_release_recursive>
 800c78a:	bf00      	nop
 800c78c:	200014a0 	.word	0x200014a0

0800c790 <_Balloc>:
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	69c6      	ldr	r6, [r0, #28]
 800c794:	4604      	mov	r4, r0
 800c796:	460d      	mov	r5, r1
 800c798:	b976      	cbnz	r6, 800c7b8 <_Balloc+0x28>
 800c79a:	2010      	movs	r0, #16
 800c79c:	f7ff ff42 	bl	800c624 <malloc>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	61e0      	str	r0, [r4, #28]
 800c7a4:	b920      	cbnz	r0, 800c7b0 <_Balloc+0x20>
 800c7a6:	4b18      	ldr	r3, [pc, #96]	@ (800c808 <_Balloc+0x78>)
 800c7a8:	4818      	ldr	r0, [pc, #96]	@ (800c80c <_Balloc+0x7c>)
 800c7aa:	216b      	movs	r1, #107	@ 0x6b
 800c7ac:	f000 fda6 	bl	800d2fc <__assert_func>
 800c7b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7b4:	6006      	str	r6, [r0, #0]
 800c7b6:	60c6      	str	r6, [r0, #12]
 800c7b8:	69e6      	ldr	r6, [r4, #28]
 800c7ba:	68f3      	ldr	r3, [r6, #12]
 800c7bc:	b183      	cbz	r3, 800c7e0 <_Balloc+0x50>
 800c7be:	69e3      	ldr	r3, [r4, #28]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7c6:	b9b8      	cbnz	r0, 800c7f8 <_Balloc+0x68>
 800c7c8:	2101      	movs	r1, #1
 800c7ca:	fa01 f605 	lsl.w	r6, r1, r5
 800c7ce:	1d72      	adds	r2, r6, #5
 800c7d0:	0092      	lsls	r2, r2, #2
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f000 fdb0 	bl	800d338 <_calloc_r>
 800c7d8:	b160      	cbz	r0, 800c7f4 <_Balloc+0x64>
 800c7da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7de:	e00e      	b.n	800c7fe <_Balloc+0x6e>
 800c7e0:	2221      	movs	r2, #33	@ 0x21
 800c7e2:	2104      	movs	r1, #4
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f000 fda7 	bl	800d338 <_calloc_r>
 800c7ea:	69e3      	ldr	r3, [r4, #28]
 800c7ec:	60f0      	str	r0, [r6, #12]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1e4      	bne.n	800c7be <_Balloc+0x2e>
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}
 800c7f8:	6802      	ldr	r2, [r0, #0]
 800c7fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7fe:	2300      	movs	r3, #0
 800c800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c804:	e7f7      	b.n	800c7f6 <_Balloc+0x66>
 800c806:	bf00      	nop
 800c808:	0800f96d 	.word	0x0800f96d
 800c80c:	0800f9ed 	.word	0x0800f9ed

0800c810 <_Bfree>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	69c6      	ldr	r6, [r0, #28]
 800c814:	4605      	mov	r5, r0
 800c816:	460c      	mov	r4, r1
 800c818:	b976      	cbnz	r6, 800c838 <_Bfree+0x28>
 800c81a:	2010      	movs	r0, #16
 800c81c:	f7ff ff02 	bl	800c624 <malloc>
 800c820:	4602      	mov	r2, r0
 800c822:	61e8      	str	r0, [r5, #28]
 800c824:	b920      	cbnz	r0, 800c830 <_Bfree+0x20>
 800c826:	4b09      	ldr	r3, [pc, #36]	@ (800c84c <_Bfree+0x3c>)
 800c828:	4809      	ldr	r0, [pc, #36]	@ (800c850 <_Bfree+0x40>)
 800c82a:	218f      	movs	r1, #143	@ 0x8f
 800c82c:	f000 fd66 	bl	800d2fc <__assert_func>
 800c830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c834:	6006      	str	r6, [r0, #0]
 800c836:	60c6      	str	r6, [r0, #12]
 800c838:	b13c      	cbz	r4, 800c84a <_Bfree+0x3a>
 800c83a:	69eb      	ldr	r3, [r5, #28]
 800c83c:	6862      	ldr	r2, [r4, #4]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c844:	6021      	str	r1, [r4, #0]
 800c846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	0800f96d 	.word	0x0800f96d
 800c850:	0800f9ed 	.word	0x0800f9ed

0800c854 <__multadd>:
 800c854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c858:	690d      	ldr	r5, [r1, #16]
 800c85a:	4607      	mov	r7, r0
 800c85c:	460c      	mov	r4, r1
 800c85e:	461e      	mov	r6, r3
 800c860:	f101 0c14 	add.w	ip, r1, #20
 800c864:	2000      	movs	r0, #0
 800c866:	f8dc 3000 	ldr.w	r3, [ip]
 800c86a:	b299      	uxth	r1, r3
 800c86c:	fb02 6101 	mla	r1, r2, r1, r6
 800c870:	0c1e      	lsrs	r6, r3, #16
 800c872:	0c0b      	lsrs	r3, r1, #16
 800c874:	fb02 3306 	mla	r3, r2, r6, r3
 800c878:	b289      	uxth	r1, r1
 800c87a:	3001      	adds	r0, #1
 800c87c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c880:	4285      	cmp	r5, r0
 800c882:	f84c 1b04 	str.w	r1, [ip], #4
 800c886:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c88a:	dcec      	bgt.n	800c866 <__multadd+0x12>
 800c88c:	b30e      	cbz	r6, 800c8d2 <__multadd+0x7e>
 800c88e:	68a3      	ldr	r3, [r4, #8]
 800c890:	42ab      	cmp	r3, r5
 800c892:	dc19      	bgt.n	800c8c8 <__multadd+0x74>
 800c894:	6861      	ldr	r1, [r4, #4]
 800c896:	4638      	mov	r0, r7
 800c898:	3101      	adds	r1, #1
 800c89a:	f7ff ff79 	bl	800c790 <_Balloc>
 800c89e:	4680      	mov	r8, r0
 800c8a0:	b928      	cbnz	r0, 800c8ae <__multadd+0x5a>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c8d8 <__multadd+0x84>)
 800c8a6:	480d      	ldr	r0, [pc, #52]	@ (800c8dc <__multadd+0x88>)
 800c8a8:	21ba      	movs	r1, #186	@ 0xba
 800c8aa:	f000 fd27 	bl	800d2fc <__assert_func>
 800c8ae:	6922      	ldr	r2, [r4, #16]
 800c8b0:	3202      	adds	r2, #2
 800c8b2:	f104 010c 	add.w	r1, r4, #12
 800c8b6:	0092      	lsls	r2, r2, #2
 800c8b8:	300c      	adds	r0, #12
 800c8ba:	f000 fd11 	bl	800d2e0 <memcpy>
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	f7ff ffa5 	bl	800c810 <_Bfree>
 800c8c6:	4644      	mov	r4, r8
 800c8c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	615e      	str	r6, [r3, #20]
 800c8d0:	6125      	str	r5, [r4, #16]
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d8:	0800f9dc 	.word	0x0800f9dc
 800c8dc:	0800f9ed 	.word	0x0800f9ed

0800c8e0 <__hi0bits>:
 800c8e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	bf36      	itet	cc
 800c8e8:	0403      	lslcc	r3, r0, #16
 800c8ea:	2000      	movcs	r0, #0
 800c8ec:	2010      	movcc	r0, #16
 800c8ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8f2:	bf3c      	itt	cc
 800c8f4:	021b      	lslcc	r3, r3, #8
 800c8f6:	3008      	addcc	r0, #8
 800c8f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8fc:	bf3c      	itt	cc
 800c8fe:	011b      	lslcc	r3, r3, #4
 800c900:	3004      	addcc	r0, #4
 800c902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c906:	bf3c      	itt	cc
 800c908:	009b      	lslcc	r3, r3, #2
 800c90a:	3002      	addcc	r0, #2
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	db05      	blt.n	800c91c <__hi0bits+0x3c>
 800c910:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c914:	f100 0001 	add.w	r0, r0, #1
 800c918:	bf08      	it	eq
 800c91a:	2020      	moveq	r0, #32
 800c91c:	4770      	bx	lr

0800c91e <__lo0bits>:
 800c91e:	6803      	ldr	r3, [r0, #0]
 800c920:	4602      	mov	r2, r0
 800c922:	f013 0007 	ands.w	r0, r3, #7
 800c926:	d00b      	beq.n	800c940 <__lo0bits+0x22>
 800c928:	07d9      	lsls	r1, r3, #31
 800c92a:	d421      	bmi.n	800c970 <__lo0bits+0x52>
 800c92c:	0798      	lsls	r0, r3, #30
 800c92e:	bf49      	itett	mi
 800c930:	085b      	lsrmi	r3, r3, #1
 800c932:	089b      	lsrpl	r3, r3, #2
 800c934:	2001      	movmi	r0, #1
 800c936:	6013      	strmi	r3, [r2, #0]
 800c938:	bf5c      	itt	pl
 800c93a:	6013      	strpl	r3, [r2, #0]
 800c93c:	2002      	movpl	r0, #2
 800c93e:	4770      	bx	lr
 800c940:	b299      	uxth	r1, r3
 800c942:	b909      	cbnz	r1, 800c948 <__lo0bits+0x2a>
 800c944:	0c1b      	lsrs	r3, r3, #16
 800c946:	2010      	movs	r0, #16
 800c948:	b2d9      	uxtb	r1, r3
 800c94a:	b909      	cbnz	r1, 800c950 <__lo0bits+0x32>
 800c94c:	3008      	adds	r0, #8
 800c94e:	0a1b      	lsrs	r3, r3, #8
 800c950:	0719      	lsls	r1, r3, #28
 800c952:	bf04      	itt	eq
 800c954:	091b      	lsreq	r3, r3, #4
 800c956:	3004      	addeq	r0, #4
 800c958:	0799      	lsls	r1, r3, #30
 800c95a:	bf04      	itt	eq
 800c95c:	089b      	lsreq	r3, r3, #2
 800c95e:	3002      	addeq	r0, #2
 800c960:	07d9      	lsls	r1, r3, #31
 800c962:	d403      	bmi.n	800c96c <__lo0bits+0x4e>
 800c964:	085b      	lsrs	r3, r3, #1
 800c966:	f100 0001 	add.w	r0, r0, #1
 800c96a:	d003      	beq.n	800c974 <__lo0bits+0x56>
 800c96c:	6013      	str	r3, [r2, #0]
 800c96e:	4770      	bx	lr
 800c970:	2000      	movs	r0, #0
 800c972:	4770      	bx	lr
 800c974:	2020      	movs	r0, #32
 800c976:	4770      	bx	lr

0800c978 <__i2b>:
 800c978:	b510      	push	{r4, lr}
 800c97a:	460c      	mov	r4, r1
 800c97c:	2101      	movs	r1, #1
 800c97e:	f7ff ff07 	bl	800c790 <_Balloc>
 800c982:	4602      	mov	r2, r0
 800c984:	b928      	cbnz	r0, 800c992 <__i2b+0x1a>
 800c986:	4b05      	ldr	r3, [pc, #20]	@ (800c99c <__i2b+0x24>)
 800c988:	4805      	ldr	r0, [pc, #20]	@ (800c9a0 <__i2b+0x28>)
 800c98a:	f240 1145 	movw	r1, #325	@ 0x145
 800c98e:	f000 fcb5 	bl	800d2fc <__assert_func>
 800c992:	2301      	movs	r3, #1
 800c994:	6144      	str	r4, [r0, #20]
 800c996:	6103      	str	r3, [r0, #16]
 800c998:	bd10      	pop	{r4, pc}
 800c99a:	bf00      	nop
 800c99c:	0800f9dc 	.word	0x0800f9dc
 800c9a0:	0800f9ed 	.word	0x0800f9ed

0800c9a4 <__multiply>:
 800c9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a8:	4617      	mov	r7, r2
 800c9aa:	690a      	ldr	r2, [r1, #16]
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	bfa8      	it	ge
 800c9b2:	463b      	movge	r3, r7
 800c9b4:	4689      	mov	r9, r1
 800c9b6:	bfa4      	itt	ge
 800c9b8:	460f      	movge	r7, r1
 800c9ba:	4699      	movge	r9, r3
 800c9bc:	693d      	ldr	r5, [r7, #16]
 800c9be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	6879      	ldr	r1, [r7, #4]
 800c9c6:	eb05 060a 	add.w	r6, r5, sl
 800c9ca:	42b3      	cmp	r3, r6
 800c9cc:	b085      	sub	sp, #20
 800c9ce:	bfb8      	it	lt
 800c9d0:	3101      	addlt	r1, #1
 800c9d2:	f7ff fedd 	bl	800c790 <_Balloc>
 800c9d6:	b930      	cbnz	r0, 800c9e6 <__multiply+0x42>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	4b41      	ldr	r3, [pc, #260]	@ (800cae0 <__multiply+0x13c>)
 800c9dc:	4841      	ldr	r0, [pc, #260]	@ (800cae4 <__multiply+0x140>)
 800c9de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c9e2:	f000 fc8b 	bl	800d2fc <__assert_func>
 800c9e6:	f100 0414 	add.w	r4, r0, #20
 800c9ea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c9ee:	4623      	mov	r3, r4
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	4573      	cmp	r3, lr
 800c9f4:	d320      	bcc.n	800ca38 <__multiply+0x94>
 800c9f6:	f107 0814 	add.w	r8, r7, #20
 800c9fa:	f109 0114 	add.w	r1, r9, #20
 800c9fe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ca02:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ca06:	9302      	str	r3, [sp, #8]
 800ca08:	1beb      	subs	r3, r5, r7
 800ca0a:	3b15      	subs	r3, #21
 800ca0c:	f023 0303 	bic.w	r3, r3, #3
 800ca10:	3304      	adds	r3, #4
 800ca12:	3715      	adds	r7, #21
 800ca14:	42bd      	cmp	r5, r7
 800ca16:	bf38      	it	cc
 800ca18:	2304      	movcc	r3, #4
 800ca1a:	9301      	str	r3, [sp, #4]
 800ca1c:	9b02      	ldr	r3, [sp, #8]
 800ca1e:	9103      	str	r1, [sp, #12]
 800ca20:	428b      	cmp	r3, r1
 800ca22:	d80c      	bhi.n	800ca3e <__multiply+0x9a>
 800ca24:	2e00      	cmp	r6, #0
 800ca26:	dd03      	ble.n	800ca30 <__multiply+0x8c>
 800ca28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d055      	beq.n	800cadc <__multiply+0x138>
 800ca30:	6106      	str	r6, [r0, #16]
 800ca32:	b005      	add	sp, #20
 800ca34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca38:	f843 2b04 	str.w	r2, [r3], #4
 800ca3c:	e7d9      	b.n	800c9f2 <__multiply+0x4e>
 800ca3e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ca42:	f1ba 0f00 	cmp.w	sl, #0
 800ca46:	d01f      	beq.n	800ca88 <__multiply+0xe4>
 800ca48:	46c4      	mov	ip, r8
 800ca4a:	46a1      	mov	r9, r4
 800ca4c:	2700      	movs	r7, #0
 800ca4e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca52:	f8d9 3000 	ldr.w	r3, [r9]
 800ca56:	fa1f fb82 	uxth.w	fp, r2
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca60:	443b      	add	r3, r7
 800ca62:	f8d9 7000 	ldr.w	r7, [r9]
 800ca66:	0c12      	lsrs	r2, r2, #16
 800ca68:	0c3f      	lsrs	r7, r7, #16
 800ca6a:	fb0a 7202 	mla	r2, sl, r2, r7
 800ca6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca78:	4565      	cmp	r5, ip
 800ca7a:	f849 3b04 	str.w	r3, [r9], #4
 800ca7e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ca82:	d8e4      	bhi.n	800ca4e <__multiply+0xaa>
 800ca84:	9b01      	ldr	r3, [sp, #4]
 800ca86:	50e7      	str	r7, [r4, r3]
 800ca88:	9b03      	ldr	r3, [sp, #12]
 800ca8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca8e:	3104      	adds	r1, #4
 800ca90:	f1b9 0f00 	cmp.w	r9, #0
 800ca94:	d020      	beq.n	800cad8 <__multiply+0x134>
 800ca96:	6823      	ldr	r3, [r4, #0]
 800ca98:	4647      	mov	r7, r8
 800ca9a:	46a4      	mov	ip, r4
 800ca9c:	f04f 0a00 	mov.w	sl, #0
 800caa0:	f8b7 b000 	ldrh.w	fp, [r7]
 800caa4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800caa8:	fb09 220b 	mla	r2, r9, fp, r2
 800caac:	4452      	add	r2, sl
 800caae:	b29b      	uxth	r3, r3
 800cab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cab4:	f84c 3b04 	str.w	r3, [ip], #4
 800cab8:	f857 3b04 	ldr.w	r3, [r7], #4
 800cabc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cac0:	f8bc 3000 	ldrh.w	r3, [ip]
 800cac4:	fb09 330a 	mla	r3, r9, sl, r3
 800cac8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cacc:	42bd      	cmp	r5, r7
 800cace:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cad2:	d8e5      	bhi.n	800caa0 <__multiply+0xfc>
 800cad4:	9a01      	ldr	r2, [sp, #4]
 800cad6:	50a3      	str	r3, [r4, r2]
 800cad8:	3404      	adds	r4, #4
 800cada:	e79f      	b.n	800ca1c <__multiply+0x78>
 800cadc:	3e01      	subs	r6, #1
 800cade:	e7a1      	b.n	800ca24 <__multiply+0x80>
 800cae0:	0800f9dc 	.word	0x0800f9dc
 800cae4:	0800f9ed 	.word	0x0800f9ed

0800cae8 <__pow5mult>:
 800cae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caec:	4615      	mov	r5, r2
 800caee:	f012 0203 	ands.w	r2, r2, #3
 800caf2:	4607      	mov	r7, r0
 800caf4:	460e      	mov	r6, r1
 800caf6:	d007      	beq.n	800cb08 <__pow5mult+0x20>
 800caf8:	4c25      	ldr	r4, [pc, #148]	@ (800cb90 <__pow5mult+0xa8>)
 800cafa:	3a01      	subs	r2, #1
 800cafc:	2300      	movs	r3, #0
 800cafe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb02:	f7ff fea7 	bl	800c854 <__multadd>
 800cb06:	4606      	mov	r6, r0
 800cb08:	10ad      	asrs	r5, r5, #2
 800cb0a:	d03d      	beq.n	800cb88 <__pow5mult+0xa0>
 800cb0c:	69fc      	ldr	r4, [r7, #28]
 800cb0e:	b97c      	cbnz	r4, 800cb30 <__pow5mult+0x48>
 800cb10:	2010      	movs	r0, #16
 800cb12:	f7ff fd87 	bl	800c624 <malloc>
 800cb16:	4602      	mov	r2, r0
 800cb18:	61f8      	str	r0, [r7, #28]
 800cb1a:	b928      	cbnz	r0, 800cb28 <__pow5mult+0x40>
 800cb1c:	4b1d      	ldr	r3, [pc, #116]	@ (800cb94 <__pow5mult+0xac>)
 800cb1e:	481e      	ldr	r0, [pc, #120]	@ (800cb98 <__pow5mult+0xb0>)
 800cb20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cb24:	f000 fbea 	bl	800d2fc <__assert_func>
 800cb28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb2c:	6004      	str	r4, [r0, #0]
 800cb2e:	60c4      	str	r4, [r0, #12]
 800cb30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cb34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb38:	b94c      	cbnz	r4, 800cb4e <__pow5mult+0x66>
 800cb3a:	f240 2171 	movw	r1, #625	@ 0x271
 800cb3e:	4638      	mov	r0, r7
 800cb40:	f7ff ff1a 	bl	800c978 <__i2b>
 800cb44:	2300      	movs	r3, #0
 800cb46:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	6003      	str	r3, [r0, #0]
 800cb4e:	f04f 0900 	mov.w	r9, #0
 800cb52:	07eb      	lsls	r3, r5, #31
 800cb54:	d50a      	bpl.n	800cb6c <__pow5mult+0x84>
 800cb56:	4631      	mov	r1, r6
 800cb58:	4622      	mov	r2, r4
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	f7ff ff22 	bl	800c9a4 <__multiply>
 800cb60:	4631      	mov	r1, r6
 800cb62:	4680      	mov	r8, r0
 800cb64:	4638      	mov	r0, r7
 800cb66:	f7ff fe53 	bl	800c810 <_Bfree>
 800cb6a:	4646      	mov	r6, r8
 800cb6c:	106d      	asrs	r5, r5, #1
 800cb6e:	d00b      	beq.n	800cb88 <__pow5mult+0xa0>
 800cb70:	6820      	ldr	r0, [r4, #0]
 800cb72:	b938      	cbnz	r0, 800cb84 <__pow5mult+0x9c>
 800cb74:	4622      	mov	r2, r4
 800cb76:	4621      	mov	r1, r4
 800cb78:	4638      	mov	r0, r7
 800cb7a:	f7ff ff13 	bl	800c9a4 <__multiply>
 800cb7e:	6020      	str	r0, [r4, #0]
 800cb80:	f8c0 9000 	str.w	r9, [r0]
 800cb84:	4604      	mov	r4, r0
 800cb86:	e7e4      	b.n	800cb52 <__pow5mult+0x6a>
 800cb88:	4630      	mov	r0, r6
 800cb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb8e:	bf00      	nop
 800cb90:	0800faa0 	.word	0x0800faa0
 800cb94:	0800f96d 	.word	0x0800f96d
 800cb98:	0800f9ed 	.word	0x0800f9ed

0800cb9c <__lshift>:
 800cb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba0:	460c      	mov	r4, r1
 800cba2:	6849      	ldr	r1, [r1, #4]
 800cba4:	6923      	ldr	r3, [r4, #16]
 800cba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbaa:	68a3      	ldr	r3, [r4, #8]
 800cbac:	4607      	mov	r7, r0
 800cbae:	4691      	mov	r9, r2
 800cbb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbb4:	f108 0601 	add.w	r6, r8, #1
 800cbb8:	42b3      	cmp	r3, r6
 800cbba:	db0b      	blt.n	800cbd4 <__lshift+0x38>
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	f7ff fde7 	bl	800c790 <_Balloc>
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	b948      	cbnz	r0, 800cbda <__lshift+0x3e>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	4b28      	ldr	r3, [pc, #160]	@ (800cc6c <__lshift+0xd0>)
 800cbca:	4829      	ldr	r0, [pc, #164]	@ (800cc70 <__lshift+0xd4>)
 800cbcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cbd0:	f000 fb94 	bl	800d2fc <__assert_func>
 800cbd4:	3101      	adds	r1, #1
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	e7ee      	b.n	800cbb8 <__lshift+0x1c>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f100 0114 	add.w	r1, r0, #20
 800cbe0:	f100 0210 	add.w	r2, r0, #16
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	4553      	cmp	r3, sl
 800cbe8:	db33      	blt.n	800cc52 <__lshift+0xb6>
 800cbea:	6920      	ldr	r0, [r4, #16]
 800cbec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbf0:	f104 0314 	add.w	r3, r4, #20
 800cbf4:	f019 091f 	ands.w	r9, r9, #31
 800cbf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc00:	d02b      	beq.n	800cc5a <__lshift+0xbe>
 800cc02:	f1c9 0e20 	rsb	lr, r9, #32
 800cc06:	468a      	mov	sl, r1
 800cc08:	2200      	movs	r2, #0
 800cc0a:	6818      	ldr	r0, [r3, #0]
 800cc0c:	fa00 f009 	lsl.w	r0, r0, r9
 800cc10:	4310      	orrs	r0, r2
 800cc12:	f84a 0b04 	str.w	r0, [sl], #4
 800cc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc1a:	459c      	cmp	ip, r3
 800cc1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc20:	d8f3      	bhi.n	800cc0a <__lshift+0x6e>
 800cc22:	ebac 0304 	sub.w	r3, ip, r4
 800cc26:	3b15      	subs	r3, #21
 800cc28:	f023 0303 	bic.w	r3, r3, #3
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	f104 0015 	add.w	r0, r4, #21
 800cc32:	4560      	cmp	r0, ip
 800cc34:	bf88      	it	hi
 800cc36:	2304      	movhi	r3, #4
 800cc38:	50ca      	str	r2, [r1, r3]
 800cc3a:	b10a      	cbz	r2, 800cc40 <__lshift+0xa4>
 800cc3c:	f108 0602 	add.w	r6, r8, #2
 800cc40:	3e01      	subs	r6, #1
 800cc42:	4638      	mov	r0, r7
 800cc44:	612e      	str	r6, [r5, #16]
 800cc46:	4621      	mov	r1, r4
 800cc48:	f7ff fde2 	bl	800c810 <_Bfree>
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc52:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc56:	3301      	adds	r3, #1
 800cc58:	e7c5      	b.n	800cbe6 <__lshift+0x4a>
 800cc5a:	3904      	subs	r1, #4
 800cc5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc60:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc64:	459c      	cmp	ip, r3
 800cc66:	d8f9      	bhi.n	800cc5c <__lshift+0xc0>
 800cc68:	e7ea      	b.n	800cc40 <__lshift+0xa4>
 800cc6a:	bf00      	nop
 800cc6c:	0800f9dc 	.word	0x0800f9dc
 800cc70:	0800f9ed 	.word	0x0800f9ed

0800cc74 <__mcmp>:
 800cc74:	690a      	ldr	r2, [r1, #16]
 800cc76:	4603      	mov	r3, r0
 800cc78:	6900      	ldr	r0, [r0, #16]
 800cc7a:	1a80      	subs	r0, r0, r2
 800cc7c:	b530      	push	{r4, r5, lr}
 800cc7e:	d10e      	bne.n	800cc9e <__mcmp+0x2a>
 800cc80:	3314      	adds	r3, #20
 800cc82:	3114      	adds	r1, #20
 800cc84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc94:	4295      	cmp	r5, r2
 800cc96:	d003      	beq.n	800cca0 <__mcmp+0x2c>
 800cc98:	d205      	bcs.n	800cca6 <__mcmp+0x32>
 800cc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9e:	bd30      	pop	{r4, r5, pc}
 800cca0:	42a3      	cmp	r3, r4
 800cca2:	d3f3      	bcc.n	800cc8c <__mcmp+0x18>
 800cca4:	e7fb      	b.n	800cc9e <__mcmp+0x2a>
 800cca6:	2001      	movs	r0, #1
 800cca8:	e7f9      	b.n	800cc9e <__mcmp+0x2a>
	...

0800ccac <__mdiff>:
 800ccac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb0:	4689      	mov	r9, r1
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4648      	mov	r0, r9
 800ccb8:	4614      	mov	r4, r2
 800ccba:	f7ff ffdb 	bl	800cc74 <__mcmp>
 800ccbe:	1e05      	subs	r5, r0, #0
 800ccc0:	d112      	bne.n	800cce8 <__mdiff+0x3c>
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	f7ff fd63 	bl	800c790 <_Balloc>
 800ccca:	4602      	mov	r2, r0
 800cccc:	b928      	cbnz	r0, 800ccda <__mdiff+0x2e>
 800ccce:	4b3f      	ldr	r3, [pc, #252]	@ (800cdcc <__mdiff+0x120>)
 800ccd0:	f240 2137 	movw	r1, #567	@ 0x237
 800ccd4:	483e      	ldr	r0, [pc, #248]	@ (800cdd0 <__mdiff+0x124>)
 800ccd6:	f000 fb11 	bl	800d2fc <__assert_func>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cce0:	4610      	mov	r0, r2
 800cce2:	b003      	add	sp, #12
 800cce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce8:	bfbc      	itt	lt
 800ccea:	464b      	movlt	r3, r9
 800ccec:	46a1      	movlt	r9, r4
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ccf4:	bfba      	itte	lt
 800ccf6:	461c      	movlt	r4, r3
 800ccf8:	2501      	movlt	r5, #1
 800ccfa:	2500      	movge	r5, #0
 800ccfc:	f7ff fd48 	bl	800c790 <_Balloc>
 800cd00:	4602      	mov	r2, r0
 800cd02:	b918      	cbnz	r0, 800cd0c <__mdiff+0x60>
 800cd04:	4b31      	ldr	r3, [pc, #196]	@ (800cdcc <__mdiff+0x120>)
 800cd06:	f240 2145 	movw	r1, #581	@ 0x245
 800cd0a:	e7e3      	b.n	800ccd4 <__mdiff+0x28>
 800cd0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cd10:	6926      	ldr	r6, [r4, #16]
 800cd12:	60c5      	str	r5, [r0, #12]
 800cd14:	f109 0310 	add.w	r3, r9, #16
 800cd18:	f109 0514 	add.w	r5, r9, #20
 800cd1c:	f104 0e14 	add.w	lr, r4, #20
 800cd20:	f100 0b14 	add.w	fp, r0, #20
 800cd24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cd28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cd2c:	9301      	str	r3, [sp, #4]
 800cd2e:	46d9      	mov	r9, fp
 800cd30:	f04f 0c00 	mov.w	ip, #0
 800cd34:	9b01      	ldr	r3, [sp, #4]
 800cd36:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cd3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cd3e:	9301      	str	r3, [sp, #4]
 800cd40:	fa1f f38a 	uxth.w	r3, sl
 800cd44:	4619      	mov	r1, r3
 800cd46:	b283      	uxth	r3, r0
 800cd48:	1acb      	subs	r3, r1, r3
 800cd4a:	0c00      	lsrs	r0, r0, #16
 800cd4c:	4463      	add	r3, ip
 800cd4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cd52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd5c:	4576      	cmp	r6, lr
 800cd5e:	f849 3b04 	str.w	r3, [r9], #4
 800cd62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd66:	d8e5      	bhi.n	800cd34 <__mdiff+0x88>
 800cd68:	1b33      	subs	r3, r6, r4
 800cd6a:	3b15      	subs	r3, #21
 800cd6c:	f023 0303 	bic.w	r3, r3, #3
 800cd70:	3415      	adds	r4, #21
 800cd72:	3304      	adds	r3, #4
 800cd74:	42a6      	cmp	r6, r4
 800cd76:	bf38      	it	cc
 800cd78:	2304      	movcc	r3, #4
 800cd7a:	441d      	add	r5, r3
 800cd7c:	445b      	add	r3, fp
 800cd7e:	461e      	mov	r6, r3
 800cd80:	462c      	mov	r4, r5
 800cd82:	4544      	cmp	r4, r8
 800cd84:	d30e      	bcc.n	800cda4 <__mdiff+0xf8>
 800cd86:	f108 0103 	add.w	r1, r8, #3
 800cd8a:	1b49      	subs	r1, r1, r5
 800cd8c:	f021 0103 	bic.w	r1, r1, #3
 800cd90:	3d03      	subs	r5, #3
 800cd92:	45a8      	cmp	r8, r5
 800cd94:	bf38      	it	cc
 800cd96:	2100      	movcc	r1, #0
 800cd98:	440b      	add	r3, r1
 800cd9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd9e:	b191      	cbz	r1, 800cdc6 <__mdiff+0x11a>
 800cda0:	6117      	str	r7, [r2, #16]
 800cda2:	e79d      	b.n	800cce0 <__mdiff+0x34>
 800cda4:	f854 1b04 	ldr.w	r1, [r4], #4
 800cda8:	46e6      	mov	lr, ip
 800cdaa:	0c08      	lsrs	r0, r1, #16
 800cdac:	fa1c fc81 	uxtah	ip, ip, r1
 800cdb0:	4471      	add	r1, lr
 800cdb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cdb6:	b289      	uxth	r1, r1
 800cdb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cdbc:	f846 1b04 	str.w	r1, [r6], #4
 800cdc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cdc4:	e7dd      	b.n	800cd82 <__mdiff+0xd6>
 800cdc6:	3f01      	subs	r7, #1
 800cdc8:	e7e7      	b.n	800cd9a <__mdiff+0xee>
 800cdca:	bf00      	nop
 800cdcc:	0800f9dc 	.word	0x0800f9dc
 800cdd0:	0800f9ed 	.word	0x0800f9ed

0800cdd4 <__d2b>:
 800cdd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdd8:	460f      	mov	r7, r1
 800cdda:	2101      	movs	r1, #1
 800cddc:	ec59 8b10 	vmov	r8, r9, d0
 800cde0:	4616      	mov	r6, r2
 800cde2:	f7ff fcd5 	bl	800c790 <_Balloc>
 800cde6:	4604      	mov	r4, r0
 800cde8:	b930      	cbnz	r0, 800cdf8 <__d2b+0x24>
 800cdea:	4602      	mov	r2, r0
 800cdec:	4b23      	ldr	r3, [pc, #140]	@ (800ce7c <__d2b+0xa8>)
 800cdee:	4824      	ldr	r0, [pc, #144]	@ (800ce80 <__d2b+0xac>)
 800cdf0:	f240 310f 	movw	r1, #783	@ 0x30f
 800cdf4:	f000 fa82 	bl	800d2fc <__assert_func>
 800cdf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cdfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce00:	b10d      	cbz	r5, 800ce06 <__d2b+0x32>
 800ce02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce06:	9301      	str	r3, [sp, #4]
 800ce08:	f1b8 0300 	subs.w	r3, r8, #0
 800ce0c:	d023      	beq.n	800ce56 <__d2b+0x82>
 800ce0e:	4668      	mov	r0, sp
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	f7ff fd84 	bl	800c91e <__lo0bits>
 800ce16:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce1a:	b1d0      	cbz	r0, 800ce52 <__d2b+0x7e>
 800ce1c:	f1c0 0320 	rsb	r3, r0, #32
 800ce20:	fa02 f303 	lsl.w	r3, r2, r3
 800ce24:	430b      	orrs	r3, r1
 800ce26:	40c2      	lsrs	r2, r0
 800ce28:	6163      	str	r3, [r4, #20]
 800ce2a:	9201      	str	r2, [sp, #4]
 800ce2c:	9b01      	ldr	r3, [sp, #4]
 800ce2e:	61a3      	str	r3, [r4, #24]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bf0c      	ite	eq
 800ce34:	2201      	moveq	r2, #1
 800ce36:	2202      	movne	r2, #2
 800ce38:	6122      	str	r2, [r4, #16]
 800ce3a:	b1a5      	cbz	r5, 800ce66 <__d2b+0x92>
 800ce3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ce40:	4405      	add	r5, r0
 800ce42:	603d      	str	r5, [r7, #0]
 800ce44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ce48:	6030      	str	r0, [r6, #0]
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	b003      	add	sp, #12
 800ce4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce52:	6161      	str	r1, [r4, #20]
 800ce54:	e7ea      	b.n	800ce2c <__d2b+0x58>
 800ce56:	a801      	add	r0, sp, #4
 800ce58:	f7ff fd61 	bl	800c91e <__lo0bits>
 800ce5c:	9b01      	ldr	r3, [sp, #4]
 800ce5e:	6163      	str	r3, [r4, #20]
 800ce60:	3020      	adds	r0, #32
 800ce62:	2201      	movs	r2, #1
 800ce64:	e7e8      	b.n	800ce38 <__d2b+0x64>
 800ce66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ce6e:	6038      	str	r0, [r7, #0]
 800ce70:	6918      	ldr	r0, [r3, #16]
 800ce72:	f7ff fd35 	bl	800c8e0 <__hi0bits>
 800ce76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce7a:	e7e5      	b.n	800ce48 <__d2b+0x74>
 800ce7c:	0800f9dc 	.word	0x0800f9dc
 800ce80:	0800f9ed 	.word	0x0800f9ed

0800ce84 <__ssputs_r>:
 800ce84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce88:	688e      	ldr	r6, [r1, #8]
 800ce8a:	461f      	mov	r7, r3
 800ce8c:	42be      	cmp	r6, r7
 800ce8e:	680b      	ldr	r3, [r1, #0]
 800ce90:	4682      	mov	sl, r0
 800ce92:	460c      	mov	r4, r1
 800ce94:	4690      	mov	r8, r2
 800ce96:	d82d      	bhi.n	800cef4 <__ssputs_r+0x70>
 800ce98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cea0:	d026      	beq.n	800cef0 <__ssputs_r+0x6c>
 800cea2:	6965      	ldr	r5, [r4, #20]
 800cea4:	6909      	ldr	r1, [r1, #16]
 800cea6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ceaa:	eba3 0901 	sub.w	r9, r3, r1
 800ceae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ceb2:	1c7b      	adds	r3, r7, #1
 800ceb4:	444b      	add	r3, r9
 800ceb6:	106d      	asrs	r5, r5, #1
 800ceb8:	429d      	cmp	r5, r3
 800ceba:	bf38      	it	cc
 800cebc:	461d      	movcc	r5, r3
 800cebe:	0553      	lsls	r3, r2, #21
 800cec0:	d527      	bpl.n	800cf12 <__ssputs_r+0x8e>
 800cec2:	4629      	mov	r1, r5
 800cec4:	f7ff fbd8 	bl	800c678 <_malloc_r>
 800cec8:	4606      	mov	r6, r0
 800ceca:	b360      	cbz	r0, 800cf26 <__ssputs_r+0xa2>
 800cecc:	6921      	ldr	r1, [r4, #16]
 800cece:	464a      	mov	r2, r9
 800ced0:	f000 fa06 	bl	800d2e0 <memcpy>
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ceda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cede:	81a3      	strh	r3, [r4, #12]
 800cee0:	6126      	str	r6, [r4, #16]
 800cee2:	6165      	str	r5, [r4, #20]
 800cee4:	444e      	add	r6, r9
 800cee6:	eba5 0509 	sub.w	r5, r5, r9
 800ceea:	6026      	str	r6, [r4, #0]
 800ceec:	60a5      	str	r5, [r4, #8]
 800ceee:	463e      	mov	r6, r7
 800cef0:	42be      	cmp	r6, r7
 800cef2:	d900      	bls.n	800cef6 <__ssputs_r+0x72>
 800cef4:	463e      	mov	r6, r7
 800cef6:	6820      	ldr	r0, [r4, #0]
 800cef8:	4632      	mov	r2, r6
 800cefa:	4641      	mov	r1, r8
 800cefc:	f000 f9c6 	bl	800d28c <memmove>
 800cf00:	68a3      	ldr	r3, [r4, #8]
 800cf02:	1b9b      	subs	r3, r3, r6
 800cf04:	60a3      	str	r3, [r4, #8]
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	4433      	add	r3, r6
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf12:	462a      	mov	r2, r5
 800cf14:	f000 fa36 	bl	800d384 <_realloc_r>
 800cf18:	4606      	mov	r6, r0
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d1e0      	bne.n	800cee0 <__ssputs_r+0x5c>
 800cf1e:	6921      	ldr	r1, [r4, #16]
 800cf20:	4650      	mov	r0, sl
 800cf22:	f7ff fb35 	bl	800c590 <_free_r>
 800cf26:	230c      	movs	r3, #12
 800cf28:	f8ca 3000 	str.w	r3, [sl]
 800cf2c:	89a3      	ldrh	r3, [r4, #12]
 800cf2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf32:	81a3      	strh	r3, [r4, #12]
 800cf34:	f04f 30ff 	mov.w	r0, #4294967295
 800cf38:	e7e9      	b.n	800cf0e <__ssputs_r+0x8a>
	...

0800cf3c <_svfiprintf_r>:
 800cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	4698      	mov	r8, r3
 800cf42:	898b      	ldrh	r3, [r1, #12]
 800cf44:	061b      	lsls	r3, r3, #24
 800cf46:	b09d      	sub	sp, #116	@ 0x74
 800cf48:	4607      	mov	r7, r0
 800cf4a:	460d      	mov	r5, r1
 800cf4c:	4614      	mov	r4, r2
 800cf4e:	d510      	bpl.n	800cf72 <_svfiprintf_r+0x36>
 800cf50:	690b      	ldr	r3, [r1, #16]
 800cf52:	b973      	cbnz	r3, 800cf72 <_svfiprintf_r+0x36>
 800cf54:	2140      	movs	r1, #64	@ 0x40
 800cf56:	f7ff fb8f 	bl	800c678 <_malloc_r>
 800cf5a:	6028      	str	r0, [r5, #0]
 800cf5c:	6128      	str	r0, [r5, #16]
 800cf5e:	b930      	cbnz	r0, 800cf6e <_svfiprintf_r+0x32>
 800cf60:	230c      	movs	r3, #12
 800cf62:	603b      	str	r3, [r7, #0]
 800cf64:	f04f 30ff 	mov.w	r0, #4294967295
 800cf68:	b01d      	add	sp, #116	@ 0x74
 800cf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6e:	2340      	movs	r3, #64	@ 0x40
 800cf70:	616b      	str	r3, [r5, #20]
 800cf72:	2300      	movs	r3, #0
 800cf74:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf76:	2320      	movs	r3, #32
 800cf78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf80:	2330      	movs	r3, #48	@ 0x30
 800cf82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d120 <_svfiprintf_r+0x1e4>
 800cf86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf8a:	f04f 0901 	mov.w	r9, #1
 800cf8e:	4623      	mov	r3, r4
 800cf90:	469a      	mov	sl, r3
 800cf92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf96:	b10a      	cbz	r2, 800cf9c <_svfiprintf_r+0x60>
 800cf98:	2a25      	cmp	r2, #37	@ 0x25
 800cf9a:	d1f9      	bne.n	800cf90 <_svfiprintf_r+0x54>
 800cf9c:	ebba 0b04 	subs.w	fp, sl, r4
 800cfa0:	d00b      	beq.n	800cfba <_svfiprintf_r+0x7e>
 800cfa2:	465b      	mov	r3, fp
 800cfa4:	4622      	mov	r2, r4
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	f7ff ff6b 	bl	800ce84 <__ssputs_r>
 800cfae:	3001      	adds	r0, #1
 800cfb0:	f000 80a7 	beq.w	800d102 <_svfiprintf_r+0x1c6>
 800cfb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfb6:	445a      	add	r2, fp
 800cfb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfba:	f89a 3000 	ldrb.w	r3, [sl]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f000 809f 	beq.w	800d102 <_svfiprintf_r+0x1c6>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfce:	f10a 0a01 	add.w	sl, sl, #1
 800cfd2:	9304      	str	r3, [sp, #16]
 800cfd4:	9307      	str	r3, [sp, #28]
 800cfd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cfda:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfdc:	4654      	mov	r4, sl
 800cfde:	2205      	movs	r2, #5
 800cfe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe4:	484e      	ldr	r0, [pc, #312]	@ (800d120 <_svfiprintf_r+0x1e4>)
 800cfe6:	f7f3 f8fb 	bl	80001e0 <memchr>
 800cfea:	9a04      	ldr	r2, [sp, #16]
 800cfec:	b9d8      	cbnz	r0, 800d026 <_svfiprintf_r+0xea>
 800cfee:	06d0      	lsls	r0, r2, #27
 800cff0:	bf44      	itt	mi
 800cff2:	2320      	movmi	r3, #32
 800cff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cff8:	0711      	lsls	r1, r2, #28
 800cffa:	bf44      	itt	mi
 800cffc:	232b      	movmi	r3, #43	@ 0x2b
 800cffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d002:	f89a 3000 	ldrb.w	r3, [sl]
 800d006:	2b2a      	cmp	r3, #42	@ 0x2a
 800d008:	d015      	beq.n	800d036 <_svfiprintf_r+0xfa>
 800d00a:	9a07      	ldr	r2, [sp, #28]
 800d00c:	4654      	mov	r4, sl
 800d00e:	2000      	movs	r0, #0
 800d010:	f04f 0c0a 	mov.w	ip, #10
 800d014:	4621      	mov	r1, r4
 800d016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d01a:	3b30      	subs	r3, #48	@ 0x30
 800d01c:	2b09      	cmp	r3, #9
 800d01e:	d94b      	bls.n	800d0b8 <_svfiprintf_r+0x17c>
 800d020:	b1b0      	cbz	r0, 800d050 <_svfiprintf_r+0x114>
 800d022:	9207      	str	r2, [sp, #28]
 800d024:	e014      	b.n	800d050 <_svfiprintf_r+0x114>
 800d026:	eba0 0308 	sub.w	r3, r0, r8
 800d02a:	fa09 f303 	lsl.w	r3, r9, r3
 800d02e:	4313      	orrs	r3, r2
 800d030:	9304      	str	r3, [sp, #16]
 800d032:	46a2      	mov	sl, r4
 800d034:	e7d2      	b.n	800cfdc <_svfiprintf_r+0xa0>
 800d036:	9b03      	ldr	r3, [sp, #12]
 800d038:	1d19      	adds	r1, r3, #4
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	9103      	str	r1, [sp, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	bfbb      	ittet	lt
 800d042:	425b      	neglt	r3, r3
 800d044:	f042 0202 	orrlt.w	r2, r2, #2
 800d048:	9307      	strge	r3, [sp, #28]
 800d04a:	9307      	strlt	r3, [sp, #28]
 800d04c:	bfb8      	it	lt
 800d04e:	9204      	strlt	r2, [sp, #16]
 800d050:	7823      	ldrb	r3, [r4, #0]
 800d052:	2b2e      	cmp	r3, #46	@ 0x2e
 800d054:	d10a      	bne.n	800d06c <_svfiprintf_r+0x130>
 800d056:	7863      	ldrb	r3, [r4, #1]
 800d058:	2b2a      	cmp	r3, #42	@ 0x2a
 800d05a:	d132      	bne.n	800d0c2 <_svfiprintf_r+0x186>
 800d05c:	9b03      	ldr	r3, [sp, #12]
 800d05e:	1d1a      	adds	r2, r3, #4
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	9203      	str	r2, [sp, #12]
 800d064:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d068:	3402      	adds	r4, #2
 800d06a:	9305      	str	r3, [sp, #20]
 800d06c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d130 <_svfiprintf_r+0x1f4>
 800d070:	7821      	ldrb	r1, [r4, #0]
 800d072:	2203      	movs	r2, #3
 800d074:	4650      	mov	r0, sl
 800d076:	f7f3 f8b3 	bl	80001e0 <memchr>
 800d07a:	b138      	cbz	r0, 800d08c <_svfiprintf_r+0x150>
 800d07c:	9b04      	ldr	r3, [sp, #16]
 800d07e:	eba0 000a 	sub.w	r0, r0, sl
 800d082:	2240      	movs	r2, #64	@ 0x40
 800d084:	4082      	lsls	r2, r0
 800d086:	4313      	orrs	r3, r2
 800d088:	3401      	adds	r4, #1
 800d08a:	9304      	str	r3, [sp, #16]
 800d08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d090:	4824      	ldr	r0, [pc, #144]	@ (800d124 <_svfiprintf_r+0x1e8>)
 800d092:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d096:	2206      	movs	r2, #6
 800d098:	f7f3 f8a2 	bl	80001e0 <memchr>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d036      	beq.n	800d10e <_svfiprintf_r+0x1d2>
 800d0a0:	4b21      	ldr	r3, [pc, #132]	@ (800d128 <_svfiprintf_r+0x1ec>)
 800d0a2:	bb1b      	cbnz	r3, 800d0ec <_svfiprintf_r+0x1b0>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	3307      	adds	r3, #7
 800d0a8:	f023 0307 	bic.w	r3, r3, #7
 800d0ac:	3308      	adds	r3, #8
 800d0ae:	9303      	str	r3, [sp, #12]
 800d0b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0b2:	4433      	add	r3, r6
 800d0b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0b6:	e76a      	b.n	800cf8e <_svfiprintf_r+0x52>
 800d0b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0bc:	460c      	mov	r4, r1
 800d0be:	2001      	movs	r0, #1
 800d0c0:	e7a8      	b.n	800d014 <_svfiprintf_r+0xd8>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	3401      	adds	r4, #1
 800d0c6:	9305      	str	r3, [sp, #20]
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	f04f 0c0a 	mov.w	ip, #10
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0d4:	3a30      	subs	r2, #48	@ 0x30
 800d0d6:	2a09      	cmp	r2, #9
 800d0d8:	d903      	bls.n	800d0e2 <_svfiprintf_r+0x1a6>
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d0c6      	beq.n	800d06c <_svfiprintf_r+0x130>
 800d0de:	9105      	str	r1, [sp, #20]
 800d0e0:	e7c4      	b.n	800d06c <_svfiprintf_r+0x130>
 800d0e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e7f0      	b.n	800d0ce <_svfiprintf_r+0x192>
 800d0ec:	ab03      	add	r3, sp, #12
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	462a      	mov	r2, r5
 800d0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d12c <_svfiprintf_r+0x1f0>)
 800d0f4:	a904      	add	r1, sp, #16
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	f7fd fe46 	bl	800ad88 <_printf_float>
 800d0fc:	1c42      	adds	r2, r0, #1
 800d0fe:	4606      	mov	r6, r0
 800d100:	d1d6      	bne.n	800d0b0 <_svfiprintf_r+0x174>
 800d102:	89ab      	ldrh	r3, [r5, #12]
 800d104:	065b      	lsls	r3, r3, #25
 800d106:	f53f af2d 	bmi.w	800cf64 <_svfiprintf_r+0x28>
 800d10a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d10c:	e72c      	b.n	800cf68 <_svfiprintf_r+0x2c>
 800d10e:	ab03      	add	r3, sp, #12
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	462a      	mov	r2, r5
 800d114:	4b05      	ldr	r3, [pc, #20]	@ (800d12c <_svfiprintf_r+0x1f0>)
 800d116:	a904      	add	r1, sp, #16
 800d118:	4638      	mov	r0, r7
 800d11a:	f7fe f8cd 	bl	800b2b8 <_printf_i>
 800d11e:	e7ed      	b.n	800d0fc <_svfiprintf_r+0x1c0>
 800d120:	0800fa46 	.word	0x0800fa46
 800d124:	0800fa50 	.word	0x0800fa50
 800d128:	0800ad89 	.word	0x0800ad89
 800d12c:	0800ce85 	.word	0x0800ce85
 800d130:	0800fa4c 	.word	0x0800fa4c

0800d134 <__sflush_r>:
 800d134:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d13c:	0716      	lsls	r6, r2, #28
 800d13e:	4605      	mov	r5, r0
 800d140:	460c      	mov	r4, r1
 800d142:	d454      	bmi.n	800d1ee <__sflush_r+0xba>
 800d144:	684b      	ldr	r3, [r1, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	dc02      	bgt.n	800d150 <__sflush_r+0x1c>
 800d14a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	dd48      	ble.n	800d1e2 <__sflush_r+0xae>
 800d150:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d152:	2e00      	cmp	r6, #0
 800d154:	d045      	beq.n	800d1e2 <__sflush_r+0xae>
 800d156:	2300      	movs	r3, #0
 800d158:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d15c:	682f      	ldr	r7, [r5, #0]
 800d15e:	6a21      	ldr	r1, [r4, #32]
 800d160:	602b      	str	r3, [r5, #0]
 800d162:	d030      	beq.n	800d1c6 <__sflush_r+0x92>
 800d164:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d166:	89a3      	ldrh	r3, [r4, #12]
 800d168:	0759      	lsls	r1, r3, #29
 800d16a:	d505      	bpl.n	800d178 <__sflush_r+0x44>
 800d16c:	6863      	ldr	r3, [r4, #4]
 800d16e:	1ad2      	subs	r2, r2, r3
 800d170:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d172:	b10b      	cbz	r3, 800d178 <__sflush_r+0x44>
 800d174:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d176:	1ad2      	subs	r2, r2, r3
 800d178:	2300      	movs	r3, #0
 800d17a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d17c:	6a21      	ldr	r1, [r4, #32]
 800d17e:	4628      	mov	r0, r5
 800d180:	47b0      	blx	r6
 800d182:	1c43      	adds	r3, r0, #1
 800d184:	89a3      	ldrh	r3, [r4, #12]
 800d186:	d106      	bne.n	800d196 <__sflush_r+0x62>
 800d188:	6829      	ldr	r1, [r5, #0]
 800d18a:	291d      	cmp	r1, #29
 800d18c:	d82b      	bhi.n	800d1e6 <__sflush_r+0xb2>
 800d18e:	4a2a      	ldr	r2, [pc, #168]	@ (800d238 <__sflush_r+0x104>)
 800d190:	40ca      	lsrs	r2, r1
 800d192:	07d6      	lsls	r6, r2, #31
 800d194:	d527      	bpl.n	800d1e6 <__sflush_r+0xb2>
 800d196:	2200      	movs	r2, #0
 800d198:	6062      	str	r2, [r4, #4]
 800d19a:	04d9      	lsls	r1, r3, #19
 800d19c:	6922      	ldr	r2, [r4, #16]
 800d19e:	6022      	str	r2, [r4, #0]
 800d1a0:	d504      	bpl.n	800d1ac <__sflush_r+0x78>
 800d1a2:	1c42      	adds	r2, r0, #1
 800d1a4:	d101      	bne.n	800d1aa <__sflush_r+0x76>
 800d1a6:	682b      	ldr	r3, [r5, #0]
 800d1a8:	b903      	cbnz	r3, 800d1ac <__sflush_r+0x78>
 800d1aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1ae:	602f      	str	r7, [r5, #0]
 800d1b0:	b1b9      	cbz	r1, 800d1e2 <__sflush_r+0xae>
 800d1b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1b6:	4299      	cmp	r1, r3
 800d1b8:	d002      	beq.n	800d1c0 <__sflush_r+0x8c>
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	f7ff f9e8 	bl	800c590 <_free_r>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1c4:	e00d      	b.n	800d1e2 <__sflush_r+0xae>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	47b0      	blx	r6
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	1c50      	adds	r0, r2, #1
 800d1d0:	d1c9      	bne.n	800d166 <__sflush_r+0x32>
 800d1d2:	682b      	ldr	r3, [r5, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d0c6      	beq.n	800d166 <__sflush_r+0x32>
 800d1d8:	2b1d      	cmp	r3, #29
 800d1da:	d001      	beq.n	800d1e0 <__sflush_r+0xac>
 800d1dc:	2b16      	cmp	r3, #22
 800d1de:	d11e      	bne.n	800d21e <__sflush_r+0xea>
 800d1e0:	602f      	str	r7, [r5, #0]
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	e022      	b.n	800d22c <__sflush_r+0xf8>
 800d1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1ea:	b21b      	sxth	r3, r3
 800d1ec:	e01b      	b.n	800d226 <__sflush_r+0xf2>
 800d1ee:	690f      	ldr	r7, [r1, #16]
 800d1f0:	2f00      	cmp	r7, #0
 800d1f2:	d0f6      	beq.n	800d1e2 <__sflush_r+0xae>
 800d1f4:	0793      	lsls	r3, r2, #30
 800d1f6:	680e      	ldr	r6, [r1, #0]
 800d1f8:	bf08      	it	eq
 800d1fa:	694b      	ldreq	r3, [r1, #20]
 800d1fc:	600f      	str	r7, [r1, #0]
 800d1fe:	bf18      	it	ne
 800d200:	2300      	movne	r3, #0
 800d202:	eba6 0807 	sub.w	r8, r6, r7
 800d206:	608b      	str	r3, [r1, #8]
 800d208:	f1b8 0f00 	cmp.w	r8, #0
 800d20c:	dde9      	ble.n	800d1e2 <__sflush_r+0xae>
 800d20e:	6a21      	ldr	r1, [r4, #32]
 800d210:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d212:	4643      	mov	r3, r8
 800d214:	463a      	mov	r2, r7
 800d216:	4628      	mov	r0, r5
 800d218:	47b0      	blx	r6
 800d21a:	2800      	cmp	r0, #0
 800d21c:	dc08      	bgt.n	800d230 <__sflush_r+0xfc>
 800d21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d226:	81a3      	strh	r3, [r4, #12]
 800d228:	f04f 30ff 	mov.w	r0, #4294967295
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d230:	4407      	add	r7, r0
 800d232:	eba8 0800 	sub.w	r8, r8, r0
 800d236:	e7e7      	b.n	800d208 <__sflush_r+0xd4>
 800d238:	20400001 	.word	0x20400001

0800d23c <_fflush_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	690b      	ldr	r3, [r1, #16]
 800d240:	4605      	mov	r5, r0
 800d242:	460c      	mov	r4, r1
 800d244:	b913      	cbnz	r3, 800d24c <_fflush_r+0x10>
 800d246:	2500      	movs	r5, #0
 800d248:	4628      	mov	r0, r5
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	b118      	cbz	r0, 800d256 <_fflush_r+0x1a>
 800d24e:	6a03      	ldr	r3, [r0, #32]
 800d250:	b90b      	cbnz	r3, 800d256 <_fflush_r+0x1a>
 800d252:	f7fe f9db 	bl	800b60c <__sinit>
 800d256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d0f3      	beq.n	800d246 <_fflush_r+0xa>
 800d25e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d260:	07d0      	lsls	r0, r2, #31
 800d262:	d404      	bmi.n	800d26e <_fflush_r+0x32>
 800d264:	0599      	lsls	r1, r3, #22
 800d266:	d402      	bmi.n	800d26e <_fflush_r+0x32>
 800d268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d26a:	f7fe fb34 	bl	800b8d6 <__retarget_lock_acquire_recursive>
 800d26e:	4628      	mov	r0, r5
 800d270:	4621      	mov	r1, r4
 800d272:	f7ff ff5f 	bl	800d134 <__sflush_r>
 800d276:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d278:	07da      	lsls	r2, r3, #31
 800d27a:	4605      	mov	r5, r0
 800d27c:	d4e4      	bmi.n	800d248 <_fflush_r+0xc>
 800d27e:	89a3      	ldrh	r3, [r4, #12]
 800d280:	059b      	lsls	r3, r3, #22
 800d282:	d4e1      	bmi.n	800d248 <_fflush_r+0xc>
 800d284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d286:	f7fe fb27 	bl	800b8d8 <__retarget_lock_release_recursive>
 800d28a:	e7dd      	b.n	800d248 <_fflush_r+0xc>

0800d28c <memmove>:
 800d28c:	4288      	cmp	r0, r1
 800d28e:	b510      	push	{r4, lr}
 800d290:	eb01 0402 	add.w	r4, r1, r2
 800d294:	d902      	bls.n	800d29c <memmove+0x10>
 800d296:	4284      	cmp	r4, r0
 800d298:	4623      	mov	r3, r4
 800d29a:	d807      	bhi.n	800d2ac <memmove+0x20>
 800d29c:	1e43      	subs	r3, r0, #1
 800d29e:	42a1      	cmp	r1, r4
 800d2a0:	d008      	beq.n	800d2b4 <memmove+0x28>
 800d2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2aa:	e7f8      	b.n	800d29e <memmove+0x12>
 800d2ac:	4402      	add	r2, r0
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	428a      	cmp	r2, r1
 800d2b2:	d100      	bne.n	800d2b6 <memmove+0x2a>
 800d2b4:	bd10      	pop	{r4, pc}
 800d2b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2be:	e7f7      	b.n	800d2b0 <memmove+0x24>

0800d2c0 <_sbrk_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4d06      	ldr	r5, [pc, #24]	@ (800d2dc <_sbrk_r+0x1c>)
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	4608      	mov	r0, r1
 800d2ca:	602b      	str	r3, [r5, #0]
 800d2cc:	f7f7 ff00 	bl	80050d0 <_sbrk>
 800d2d0:	1c43      	adds	r3, r0, #1
 800d2d2:	d102      	bne.n	800d2da <_sbrk_r+0x1a>
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	b103      	cbz	r3, 800d2da <_sbrk_r+0x1a>
 800d2d8:	6023      	str	r3, [r4, #0]
 800d2da:	bd38      	pop	{r3, r4, r5, pc}
 800d2dc:	2000149c 	.word	0x2000149c

0800d2e0 <memcpy>:
 800d2e0:	440a      	add	r2, r1
 800d2e2:	4291      	cmp	r1, r2
 800d2e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2e8:	d100      	bne.n	800d2ec <memcpy+0xc>
 800d2ea:	4770      	bx	lr
 800d2ec:	b510      	push	{r4, lr}
 800d2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2f6:	4291      	cmp	r1, r2
 800d2f8:	d1f9      	bne.n	800d2ee <memcpy+0xe>
 800d2fa:	bd10      	pop	{r4, pc}

0800d2fc <__assert_func>:
 800d2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2fe:	4614      	mov	r4, r2
 800d300:	461a      	mov	r2, r3
 800d302:	4b09      	ldr	r3, [pc, #36]	@ (800d328 <__assert_func+0x2c>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4605      	mov	r5, r0
 800d308:	68d8      	ldr	r0, [r3, #12]
 800d30a:	b14c      	cbz	r4, 800d320 <__assert_func+0x24>
 800d30c:	4b07      	ldr	r3, [pc, #28]	@ (800d32c <__assert_func+0x30>)
 800d30e:	9100      	str	r1, [sp, #0]
 800d310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d314:	4906      	ldr	r1, [pc, #24]	@ (800d330 <__assert_func+0x34>)
 800d316:	462b      	mov	r3, r5
 800d318:	f000 f870 	bl	800d3fc <fiprintf>
 800d31c:	f000 f880 	bl	800d420 <abort>
 800d320:	4b04      	ldr	r3, [pc, #16]	@ (800d334 <__assert_func+0x38>)
 800d322:	461c      	mov	r4, r3
 800d324:	e7f3      	b.n	800d30e <__assert_func+0x12>
 800d326:	bf00      	nop
 800d328:	20000078 	.word	0x20000078
 800d32c:	0800fa61 	.word	0x0800fa61
 800d330:	0800fa6e 	.word	0x0800fa6e
 800d334:	0800fa9c 	.word	0x0800fa9c

0800d338 <_calloc_r>:
 800d338:	b570      	push	{r4, r5, r6, lr}
 800d33a:	fba1 5402 	umull	r5, r4, r1, r2
 800d33e:	b934      	cbnz	r4, 800d34e <_calloc_r+0x16>
 800d340:	4629      	mov	r1, r5
 800d342:	f7ff f999 	bl	800c678 <_malloc_r>
 800d346:	4606      	mov	r6, r0
 800d348:	b928      	cbnz	r0, 800d356 <_calloc_r+0x1e>
 800d34a:	4630      	mov	r0, r6
 800d34c:	bd70      	pop	{r4, r5, r6, pc}
 800d34e:	220c      	movs	r2, #12
 800d350:	6002      	str	r2, [r0, #0]
 800d352:	2600      	movs	r6, #0
 800d354:	e7f9      	b.n	800d34a <_calloc_r+0x12>
 800d356:	462a      	mov	r2, r5
 800d358:	4621      	mov	r1, r4
 800d35a:	f7fe fa2f 	bl	800b7bc <memset>
 800d35e:	e7f4      	b.n	800d34a <_calloc_r+0x12>

0800d360 <__ascii_mbtowc>:
 800d360:	b082      	sub	sp, #8
 800d362:	b901      	cbnz	r1, 800d366 <__ascii_mbtowc+0x6>
 800d364:	a901      	add	r1, sp, #4
 800d366:	b142      	cbz	r2, 800d37a <__ascii_mbtowc+0x1a>
 800d368:	b14b      	cbz	r3, 800d37e <__ascii_mbtowc+0x1e>
 800d36a:	7813      	ldrb	r3, [r2, #0]
 800d36c:	600b      	str	r3, [r1, #0]
 800d36e:	7812      	ldrb	r2, [r2, #0]
 800d370:	1e10      	subs	r0, r2, #0
 800d372:	bf18      	it	ne
 800d374:	2001      	movne	r0, #1
 800d376:	b002      	add	sp, #8
 800d378:	4770      	bx	lr
 800d37a:	4610      	mov	r0, r2
 800d37c:	e7fb      	b.n	800d376 <__ascii_mbtowc+0x16>
 800d37e:	f06f 0001 	mvn.w	r0, #1
 800d382:	e7f8      	b.n	800d376 <__ascii_mbtowc+0x16>

0800d384 <_realloc_r>:
 800d384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d388:	4607      	mov	r7, r0
 800d38a:	4614      	mov	r4, r2
 800d38c:	460d      	mov	r5, r1
 800d38e:	b921      	cbnz	r1, 800d39a <_realloc_r+0x16>
 800d390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d394:	4611      	mov	r1, r2
 800d396:	f7ff b96f 	b.w	800c678 <_malloc_r>
 800d39a:	b92a      	cbnz	r2, 800d3a8 <_realloc_r+0x24>
 800d39c:	f7ff f8f8 	bl	800c590 <_free_r>
 800d3a0:	4625      	mov	r5, r4
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a8:	f000 f841 	bl	800d42e <_malloc_usable_size_r>
 800d3ac:	4284      	cmp	r4, r0
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	d802      	bhi.n	800d3b8 <_realloc_r+0x34>
 800d3b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3b6:	d8f4      	bhi.n	800d3a2 <_realloc_r+0x1e>
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	f7ff f95c 	bl	800c678 <_malloc_r>
 800d3c0:	4680      	mov	r8, r0
 800d3c2:	b908      	cbnz	r0, 800d3c8 <_realloc_r+0x44>
 800d3c4:	4645      	mov	r5, r8
 800d3c6:	e7ec      	b.n	800d3a2 <_realloc_r+0x1e>
 800d3c8:	42b4      	cmp	r4, r6
 800d3ca:	4622      	mov	r2, r4
 800d3cc:	4629      	mov	r1, r5
 800d3ce:	bf28      	it	cs
 800d3d0:	4632      	movcs	r2, r6
 800d3d2:	f7ff ff85 	bl	800d2e0 <memcpy>
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	4638      	mov	r0, r7
 800d3da:	f7ff f8d9 	bl	800c590 <_free_r>
 800d3de:	e7f1      	b.n	800d3c4 <_realloc_r+0x40>

0800d3e0 <__ascii_wctomb>:
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	4608      	mov	r0, r1
 800d3e4:	b141      	cbz	r1, 800d3f8 <__ascii_wctomb+0x18>
 800d3e6:	2aff      	cmp	r2, #255	@ 0xff
 800d3e8:	d904      	bls.n	800d3f4 <__ascii_wctomb+0x14>
 800d3ea:	228a      	movs	r2, #138	@ 0x8a
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f2:	4770      	bx	lr
 800d3f4:	700a      	strb	r2, [r1, #0]
 800d3f6:	2001      	movs	r0, #1
 800d3f8:	4770      	bx	lr
	...

0800d3fc <fiprintf>:
 800d3fc:	b40e      	push	{r1, r2, r3}
 800d3fe:	b503      	push	{r0, r1, lr}
 800d400:	4601      	mov	r1, r0
 800d402:	ab03      	add	r3, sp, #12
 800d404:	4805      	ldr	r0, [pc, #20]	@ (800d41c <fiprintf+0x20>)
 800d406:	f853 2b04 	ldr.w	r2, [r3], #4
 800d40a:	6800      	ldr	r0, [r0, #0]
 800d40c:	9301      	str	r3, [sp, #4]
 800d40e:	f000 f83f 	bl	800d490 <_vfiprintf_r>
 800d412:	b002      	add	sp, #8
 800d414:	f85d eb04 	ldr.w	lr, [sp], #4
 800d418:	b003      	add	sp, #12
 800d41a:	4770      	bx	lr
 800d41c:	20000078 	.word	0x20000078

0800d420 <abort>:
 800d420:	b508      	push	{r3, lr}
 800d422:	2006      	movs	r0, #6
 800d424:	f000 fa08 	bl	800d838 <raise>
 800d428:	2001      	movs	r0, #1
 800d42a:	f7f7 fdd9 	bl	8004fe0 <_exit>

0800d42e <_malloc_usable_size_r>:
 800d42e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d432:	1f18      	subs	r0, r3, #4
 800d434:	2b00      	cmp	r3, #0
 800d436:	bfbc      	itt	lt
 800d438:	580b      	ldrlt	r3, [r1, r0]
 800d43a:	18c0      	addlt	r0, r0, r3
 800d43c:	4770      	bx	lr

0800d43e <__sfputc_r>:
 800d43e:	6893      	ldr	r3, [r2, #8]
 800d440:	3b01      	subs	r3, #1
 800d442:	2b00      	cmp	r3, #0
 800d444:	b410      	push	{r4}
 800d446:	6093      	str	r3, [r2, #8]
 800d448:	da08      	bge.n	800d45c <__sfputc_r+0x1e>
 800d44a:	6994      	ldr	r4, [r2, #24]
 800d44c:	42a3      	cmp	r3, r4
 800d44e:	db01      	blt.n	800d454 <__sfputc_r+0x16>
 800d450:	290a      	cmp	r1, #10
 800d452:	d103      	bne.n	800d45c <__sfputc_r+0x1e>
 800d454:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d458:	f000 b932 	b.w	800d6c0 <__swbuf_r>
 800d45c:	6813      	ldr	r3, [r2, #0]
 800d45e:	1c58      	adds	r0, r3, #1
 800d460:	6010      	str	r0, [r2, #0]
 800d462:	7019      	strb	r1, [r3, #0]
 800d464:	4608      	mov	r0, r1
 800d466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <__sfputs_r>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	4606      	mov	r6, r0
 800d470:	460f      	mov	r7, r1
 800d472:	4614      	mov	r4, r2
 800d474:	18d5      	adds	r5, r2, r3
 800d476:	42ac      	cmp	r4, r5
 800d478:	d101      	bne.n	800d47e <__sfputs_r+0x12>
 800d47a:	2000      	movs	r0, #0
 800d47c:	e007      	b.n	800d48e <__sfputs_r+0x22>
 800d47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d482:	463a      	mov	r2, r7
 800d484:	4630      	mov	r0, r6
 800d486:	f7ff ffda 	bl	800d43e <__sfputc_r>
 800d48a:	1c43      	adds	r3, r0, #1
 800d48c:	d1f3      	bne.n	800d476 <__sfputs_r+0xa>
 800d48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d490 <_vfiprintf_r>:
 800d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d494:	460d      	mov	r5, r1
 800d496:	b09d      	sub	sp, #116	@ 0x74
 800d498:	4614      	mov	r4, r2
 800d49a:	4698      	mov	r8, r3
 800d49c:	4606      	mov	r6, r0
 800d49e:	b118      	cbz	r0, 800d4a8 <_vfiprintf_r+0x18>
 800d4a0:	6a03      	ldr	r3, [r0, #32]
 800d4a2:	b90b      	cbnz	r3, 800d4a8 <_vfiprintf_r+0x18>
 800d4a4:	f7fe f8b2 	bl	800b60c <__sinit>
 800d4a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4aa:	07d9      	lsls	r1, r3, #31
 800d4ac:	d405      	bmi.n	800d4ba <_vfiprintf_r+0x2a>
 800d4ae:	89ab      	ldrh	r3, [r5, #12]
 800d4b0:	059a      	lsls	r2, r3, #22
 800d4b2:	d402      	bmi.n	800d4ba <_vfiprintf_r+0x2a>
 800d4b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4b6:	f7fe fa0e 	bl	800b8d6 <__retarget_lock_acquire_recursive>
 800d4ba:	89ab      	ldrh	r3, [r5, #12]
 800d4bc:	071b      	lsls	r3, r3, #28
 800d4be:	d501      	bpl.n	800d4c4 <_vfiprintf_r+0x34>
 800d4c0:	692b      	ldr	r3, [r5, #16]
 800d4c2:	b99b      	cbnz	r3, 800d4ec <_vfiprintf_r+0x5c>
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	f000 f938 	bl	800d73c <__swsetup_r>
 800d4cc:	b170      	cbz	r0, 800d4ec <_vfiprintf_r+0x5c>
 800d4ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4d0:	07dc      	lsls	r4, r3, #31
 800d4d2:	d504      	bpl.n	800d4de <_vfiprintf_r+0x4e>
 800d4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d8:	b01d      	add	sp, #116	@ 0x74
 800d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4de:	89ab      	ldrh	r3, [r5, #12]
 800d4e0:	0598      	lsls	r0, r3, #22
 800d4e2:	d4f7      	bmi.n	800d4d4 <_vfiprintf_r+0x44>
 800d4e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4e6:	f7fe f9f7 	bl	800b8d8 <__retarget_lock_release_recursive>
 800d4ea:	e7f3      	b.n	800d4d4 <_vfiprintf_r+0x44>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4f0:	2320      	movs	r3, #32
 800d4f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4fa:	2330      	movs	r3, #48	@ 0x30
 800d4fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d6ac <_vfiprintf_r+0x21c>
 800d500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d504:	f04f 0901 	mov.w	r9, #1
 800d508:	4623      	mov	r3, r4
 800d50a:	469a      	mov	sl, r3
 800d50c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d510:	b10a      	cbz	r2, 800d516 <_vfiprintf_r+0x86>
 800d512:	2a25      	cmp	r2, #37	@ 0x25
 800d514:	d1f9      	bne.n	800d50a <_vfiprintf_r+0x7a>
 800d516:	ebba 0b04 	subs.w	fp, sl, r4
 800d51a:	d00b      	beq.n	800d534 <_vfiprintf_r+0xa4>
 800d51c:	465b      	mov	r3, fp
 800d51e:	4622      	mov	r2, r4
 800d520:	4629      	mov	r1, r5
 800d522:	4630      	mov	r0, r6
 800d524:	f7ff ffa2 	bl	800d46c <__sfputs_r>
 800d528:	3001      	adds	r0, #1
 800d52a:	f000 80a7 	beq.w	800d67c <_vfiprintf_r+0x1ec>
 800d52e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d530:	445a      	add	r2, fp
 800d532:	9209      	str	r2, [sp, #36]	@ 0x24
 800d534:	f89a 3000 	ldrb.w	r3, [sl]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f000 809f 	beq.w	800d67c <_vfiprintf_r+0x1ec>
 800d53e:	2300      	movs	r3, #0
 800d540:	f04f 32ff 	mov.w	r2, #4294967295
 800d544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d548:	f10a 0a01 	add.w	sl, sl, #1
 800d54c:	9304      	str	r3, [sp, #16]
 800d54e:	9307      	str	r3, [sp, #28]
 800d550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d554:	931a      	str	r3, [sp, #104]	@ 0x68
 800d556:	4654      	mov	r4, sl
 800d558:	2205      	movs	r2, #5
 800d55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55e:	4853      	ldr	r0, [pc, #332]	@ (800d6ac <_vfiprintf_r+0x21c>)
 800d560:	f7f2 fe3e 	bl	80001e0 <memchr>
 800d564:	9a04      	ldr	r2, [sp, #16]
 800d566:	b9d8      	cbnz	r0, 800d5a0 <_vfiprintf_r+0x110>
 800d568:	06d1      	lsls	r1, r2, #27
 800d56a:	bf44      	itt	mi
 800d56c:	2320      	movmi	r3, #32
 800d56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d572:	0713      	lsls	r3, r2, #28
 800d574:	bf44      	itt	mi
 800d576:	232b      	movmi	r3, #43	@ 0x2b
 800d578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d57c:	f89a 3000 	ldrb.w	r3, [sl]
 800d580:	2b2a      	cmp	r3, #42	@ 0x2a
 800d582:	d015      	beq.n	800d5b0 <_vfiprintf_r+0x120>
 800d584:	9a07      	ldr	r2, [sp, #28]
 800d586:	4654      	mov	r4, sl
 800d588:	2000      	movs	r0, #0
 800d58a:	f04f 0c0a 	mov.w	ip, #10
 800d58e:	4621      	mov	r1, r4
 800d590:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d594:	3b30      	subs	r3, #48	@ 0x30
 800d596:	2b09      	cmp	r3, #9
 800d598:	d94b      	bls.n	800d632 <_vfiprintf_r+0x1a2>
 800d59a:	b1b0      	cbz	r0, 800d5ca <_vfiprintf_r+0x13a>
 800d59c:	9207      	str	r2, [sp, #28]
 800d59e:	e014      	b.n	800d5ca <_vfiprintf_r+0x13a>
 800d5a0:	eba0 0308 	sub.w	r3, r0, r8
 800d5a4:	fa09 f303 	lsl.w	r3, r9, r3
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	9304      	str	r3, [sp, #16]
 800d5ac:	46a2      	mov	sl, r4
 800d5ae:	e7d2      	b.n	800d556 <_vfiprintf_r+0xc6>
 800d5b0:	9b03      	ldr	r3, [sp, #12]
 800d5b2:	1d19      	adds	r1, r3, #4
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	9103      	str	r1, [sp, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	bfbb      	ittet	lt
 800d5bc:	425b      	neglt	r3, r3
 800d5be:	f042 0202 	orrlt.w	r2, r2, #2
 800d5c2:	9307      	strge	r3, [sp, #28]
 800d5c4:	9307      	strlt	r3, [sp, #28]
 800d5c6:	bfb8      	it	lt
 800d5c8:	9204      	strlt	r2, [sp, #16]
 800d5ca:	7823      	ldrb	r3, [r4, #0]
 800d5cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5ce:	d10a      	bne.n	800d5e6 <_vfiprintf_r+0x156>
 800d5d0:	7863      	ldrb	r3, [r4, #1]
 800d5d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5d4:	d132      	bne.n	800d63c <_vfiprintf_r+0x1ac>
 800d5d6:	9b03      	ldr	r3, [sp, #12]
 800d5d8:	1d1a      	adds	r2, r3, #4
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	9203      	str	r2, [sp, #12]
 800d5de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5e2:	3402      	adds	r4, #2
 800d5e4:	9305      	str	r3, [sp, #20]
 800d5e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d6bc <_vfiprintf_r+0x22c>
 800d5ea:	7821      	ldrb	r1, [r4, #0]
 800d5ec:	2203      	movs	r2, #3
 800d5ee:	4650      	mov	r0, sl
 800d5f0:	f7f2 fdf6 	bl	80001e0 <memchr>
 800d5f4:	b138      	cbz	r0, 800d606 <_vfiprintf_r+0x176>
 800d5f6:	9b04      	ldr	r3, [sp, #16]
 800d5f8:	eba0 000a 	sub.w	r0, r0, sl
 800d5fc:	2240      	movs	r2, #64	@ 0x40
 800d5fe:	4082      	lsls	r2, r0
 800d600:	4313      	orrs	r3, r2
 800d602:	3401      	adds	r4, #1
 800d604:	9304      	str	r3, [sp, #16]
 800d606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d60a:	4829      	ldr	r0, [pc, #164]	@ (800d6b0 <_vfiprintf_r+0x220>)
 800d60c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d610:	2206      	movs	r2, #6
 800d612:	f7f2 fde5 	bl	80001e0 <memchr>
 800d616:	2800      	cmp	r0, #0
 800d618:	d03f      	beq.n	800d69a <_vfiprintf_r+0x20a>
 800d61a:	4b26      	ldr	r3, [pc, #152]	@ (800d6b4 <_vfiprintf_r+0x224>)
 800d61c:	bb1b      	cbnz	r3, 800d666 <_vfiprintf_r+0x1d6>
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	3307      	adds	r3, #7
 800d622:	f023 0307 	bic.w	r3, r3, #7
 800d626:	3308      	adds	r3, #8
 800d628:	9303      	str	r3, [sp, #12]
 800d62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d62c:	443b      	add	r3, r7
 800d62e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d630:	e76a      	b.n	800d508 <_vfiprintf_r+0x78>
 800d632:	fb0c 3202 	mla	r2, ip, r2, r3
 800d636:	460c      	mov	r4, r1
 800d638:	2001      	movs	r0, #1
 800d63a:	e7a8      	b.n	800d58e <_vfiprintf_r+0xfe>
 800d63c:	2300      	movs	r3, #0
 800d63e:	3401      	adds	r4, #1
 800d640:	9305      	str	r3, [sp, #20]
 800d642:	4619      	mov	r1, r3
 800d644:	f04f 0c0a 	mov.w	ip, #10
 800d648:	4620      	mov	r0, r4
 800d64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d64e:	3a30      	subs	r2, #48	@ 0x30
 800d650:	2a09      	cmp	r2, #9
 800d652:	d903      	bls.n	800d65c <_vfiprintf_r+0x1cc>
 800d654:	2b00      	cmp	r3, #0
 800d656:	d0c6      	beq.n	800d5e6 <_vfiprintf_r+0x156>
 800d658:	9105      	str	r1, [sp, #20]
 800d65a:	e7c4      	b.n	800d5e6 <_vfiprintf_r+0x156>
 800d65c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d660:	4604      	mov	r4, r0
 800d662:	2301      	movs	r3, #1
 800d664:	e7f0      	b.n	800d648 <_vfiprintf_r+0x1b8>
 800d666:	ab03      	add	r3, sp, #12
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	462a      	mov	r2, r5
 800d66c:	4b12      	ldr	r3, [pc, #72]	@ (800d6b8 <_vfiprintf_r+0x228>)
 800d66e:	a904      	add	r1, sp, #16
 800d670:	4630      	mov	r0, r6
 800d672:	f7fd fb89 	bl	800ad88 <_printf_float>
 800d676:	4607      	mov	r7, r0
 800d678:	1c78      	adds	r0, r7, #1
 800d67a:	d1d6      	bne.n	800d62a <_vfiprintf_r+0x19a>
 800d67c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d67e:	07d9      	lsls	r1, r3, #31
 800d680:	d405      	bmi.n	800d68e <_vfiprintf_r+0x1fe>
 800d682:	89ab      	ldrh	r3, [r5, #12]
 800d684:	059a      	lsls	r2, r3, #22
 800d686:	d402      	bmi.n	800d68e <_vfiprintf_r+0x1fe>
 800d688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d68a:	f7fe f925 	bl	800b8d8 <__retarget_lock_release_recursive>
 800d68e:	89ab      	ldrh	r3, [r5, #12]
 800d690:	065b      	lsls	r3, r3, #25
 800d692:	f53f af1f 	bmi.w	800d4d4 <_vfiprintf_r+0x44>
 800d696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d698:	e71e      	b.n	800d4d8 <_vfiprintf_r+0x48>
 800d69a:	ab03      	add	r3, sp, #12
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	462a      	mov	r2, r5
 800d6a0:	4b05      	ldr	r3, [pc, #20]	@ (800d6b8 <_vfiprintf_r+0x228>)
 800d6a2:	a904      	add	r1, sp, #16
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f7fd fe07 	bl	800b2b8 <_printf_i>
 800d6aa:	e7e4      	b.n	800d676 <_vfiprintf_r+0x1e6>
 800d6ac:	0800fa46 	.word	0x0800fa46
 800d6b0:	0800fa50 	.word	0x0800fa50
 800d6b4:	0800ad89 	.word	0x0800ad89
 800d6b8:	0800d46d 	.word	0x0800d46d
 800d6bc:	0800fa4c 	.word	0x0800fa4c

0800d6c0 <__swbuf_r>:
 800d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c2:	460e      	mov	r6, r1
 800d6c4:	4614      	mov	r4, r2
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	b118      	cbz	r0, 800d6d2 <__swbuf_r+0x12>
 800d6ca:	6a03      	ldr	r3, [r0, #32]
 800d6cc:	b90b      	cbnz	r3, 800d6d2 <__swbuf_r+0x12>
 800d6ce:	f7fd ff9d 	bl	800b60c <__sinit>
 800d6d2:	69a3      	ldr	r3, [r4, #24]
 800d6d4:	60a3      	str	r3, [r4, #8]
 800d6d6:	89a3      	ldrh	r3, [r4, #12]
 800d6d8:	071a      	lsls	r2, r3, #28
 800d6da:	d501      	bpl.n	800d6e0 <__swbuf_r+0x20>
 800d6dc:	6923      	ldr	r3, [r4, #16]
 800d6de:	b943      	cbnz	r3, 800d6f2 <__swbuf_r+0x32>
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	f000 f82a 	bl	800d73c <__swsetup_r>
 800d6e8:	b118      	cbz	r0, 800d6f2 <__swbuf_r+0x32>
 800d6ea:	f04f 37ff 	mov.w	r7, #4294967295
 800d6ee:	4638      	mov	r0, r7
 800d6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6f2:	6823      	ldr	r3, [r4, #0]
 800d6f4:	6922      	ldr	r2, [r4, #16]
 800d6f6:	1a98      	subs	r0, r3, r2
 800d6f8:	6963      	ldr	r3, [r4, #20]
 800d6fa:	b2f6      	uxtb	r6, r6
 800d6fc:	4283      	cmp	r3, r0
 800d6fe:	4637      	mov	r7, r6
 800d700:	dc05      	bgt.n	800d70e <__swbuf_r+0x4e>
 800d702:	4621      	mov	r1, r4
 800d704:	4628      	mov	r0, r5
 800d706:	f7ff fd99 	bl	800d23c <_fflush_r>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	d1ed      	bne.n	800d6ea <__swbuf_r+0x2a>
 800d70e:	68a3      	ldr	r3, [r4, #8]
 800d710:	3b01      	subs	r3, #1
 800d712:	60a3      	str	r3, [r4, #8]
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	1c5a      	adds	r2, r3, #1
 800d718:	6022      	str	r2, [r4, #0]
 800d71a:	701e      	strb	r6, [r3, #0]
 800d71c:	6962      	ldr	r2, [r4, #20]
 800d71e:	1c43      	adds	r3, r0, #1
 800d720:	429a      	cmp	r2, r3
 800d722:	d004      	beq.n	800d72e <__swbuf_r+0x6e>
 800d724:	89a3      	ldrh	r3, [r4, #12]
 800d726:	07db      	lsls	r3, r3, #31
 800d728:	d5e1      	bpl.n	800d6ee <__swbuf_r+0x2e>
 800d72a:	2e0a      	cmp	r6, #10
 800d72c:	d1df      	bne.n	800d6ee <__swbuf_r+0x2e>
 800d72e:	4621      	mov	r1, r4
 800d730:	4628      	mov	r0, r5
 800d732:	f7ff fd83 	bl	800d23c <_fflush_r>
 800d736:	2800      	cmp	r0, #0
 800d738:	d0d9      	beq.n	800d6ee <__swbuf_r+0x2e>
 800d73a:	e7d6      	b.n	800d6ea <__swbuf_r+0x2a>

0800d73c <__swsetup_r>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	4b29      	ldr	r3, [pc, #164]	@ (800d7e4 <__swsetup_r+0xa8>)
 800d740:	4605      	mov	r5, r0
 800d742:	6818      	ldr	r0, [r3, #0]
 800d744:	460c      	mov	r4, r1
 800d746:	b118      	cbz	r0, 800d750 <__swsetup_r+0x14>
 800d748:	6a03      	ldr	r3, [r0, #32]
 800d74a:	b90b      	cbnz	r3, 800d750 <__swsetup_r+0x14>
 800d74c:	f7fd ff5e 	bl	800b60c <__sinit>
 800d750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d754:	0719      	lsls	r1, r3, #28
 800d756:	d422      	bmi.n	800d79e <__swsetup_r+0x62>
 800d758:	06da      	lsls	r2, r3, #27
 800d75a:	d407      	bmi.n	800d76c <__swsetup_r+0x30>
 800d75c:	2209      	movs	r2, #9
 800d75e:	602a      	str	r2, [r5, #0]
 800d760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d764:	81a3      	strh	r3, [r4, #12]
 800d766:	f04f 30ff 	mov.w	r0, #4294967295
 800d76a:	e033      	b.n	800d7d4 <__swsetup_r+0x98>
 800d76c:	0758      	lsls	r0, r3, #29
 800d76e:	d512      	bpl.n	800d796 <__swsetup_r+0x5a>
 800d770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d772:	b141      	cbz	r1, 800d786 <__swsetup_r+0x4a>
 800d774:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d778:	4299      	cmp	r1, r3
 800d77a:	d002      	beq.n	800d782 <__swsetup_r+0x46>
 800d77c:	4628      	mov	r0, r5
 800d77e:	f7fe ff07 	bl	800c590 <_free_r>
 800d782:	2300      	movs	r3, #0
 800d784:	6363      	str	r3, [r4, #52]	@ 0x34
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d78c:	81a3      	strh	r3, [r4, #12]
 800d78e:	2300      	movs	r3, #0
 800d790:	6063      	str	r3, [r4, #4]
 800d792:	6923      	ldr	r3, [r4, #16]
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	89a3      	ldrh	r3, [r4, #12]
 800d798:	f043 0308 	orr.w	r3, r3, #8
 800d79c:	81a3      	strh	r3, [r4, #12]
 800d79e:	6923      	ldr	r3, [r4, #16]
 800d7a0:	b94b      	cbnz	r3, 800d7b6 <__swsetup_r+0x7a>
 800d7a2:	89a3      	ldrh	r3, [r4, #12]
 800d7a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d7a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7ac:	d003      	beq.n	800d7b6 <__swsetup_r+0x7a>
 800d7ae:	4621      	mov	r1, r4
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	f000 f883 	bl	800d8bc <__smakebuf_r>
 800d7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ba:	f013 0201 	ands.w	r2, r3, #1
 800d7be:	d00a      	beq.n	800d7d6 <__swsetup_r+0x9a>
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	60a2      	str	r2, [r4, #8]
 800d7c4:	6962      	ldr	r2, [r4, #20]
 800d7c6:	4252      	negs	r2, r2
 800d7c8:	61a2      	str	r2, [r4, #24]
 800d7ca:	6922      	ldr	r2, [r4, #16]
 800d7cc:	b942      	cbnz	r2, 800d7e0 <__swsetup_r+0xa4>
 800d7ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d7d2:	d1c5      	bne.n	800d760 <__swsetup_r+0x24>
 800d7d4:	bd38      	pop	{r3, r4, r5, pc}
 800d7d6:	0799      	lsls	r1, r3, #30
 800d7d8:	bf58      	it	pl
 800d7da:	6962      	ldrpl	r2, [r4, #20]
 800d7dc:	60a2      	str	r2, [r4, #8]
 800d7de:	e7f4      	b.n	800d7ca <__swsetup_r+0x8e>
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	e7f7      	b.n	800d7d4 <__swsetup_r+0x98>
 800d7e4:	20000078 	.word	0x20000078

0800d7e8 <_raise_r>:
 800d7e8:	291f      	cmp	r1, #31
 800d7ea:	b538      	push	{r3, r4, r5, lr}
 800d7ec:	4605      	mov	r5, r0
 800d7ee:	460c      	mov	r4, r1
 800d7f0:	d904      	bls.n	800d7fc <_raise_r+0x14>
 800d7f2:	2316      	movs	r3, #22
 800d7f4:	6003      	str	r3, [r0, #0]
 800d7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fa:	bd38      	pop	{r3, r4, r5, pc}
 800d7fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d7fe:	b112      	cbz	r2, 800d806 <_raise_r+0x1e>
 800d800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d804:	b94b      	cbnz	r3, 800d81a <_raise_r+0x32>
 800d806:	4628      	mov	r0, r5
 800d808:	f000 f830 	bl	800d86c <_getpid_r>
 800d80c:	4622      	mov	r2, r4
 800d80e:	4601      	mov	r1, r0
 800d810:	4628      	mov	r0, r5
 800d812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d816:	f000 b817 	b.w	800d848 <_kill_r>
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d00a      	beq.n	800d834 <_raise_r+0x4c>
 800d81e:	1c59      	adds	r1, r3, #1
 800d820:	d103      	bne.n	800d82a <_raise_r+0x42>
 800d822:	2316      	movs	r3, #22
 800d824:	6003      	str	r3, [r0, #0]
 800d826:	2001      	movs	r0, #1
 800d828:	e7e7      	b.n	800d7fa <_raise_r+0x12>
 800d82a:	2100      	movs	r1, #0
 800d82c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d830:	4620      	mov	r0, r4
 800d832:	4798      	blx	r3
 800d834:	2000      	movs	r0, #0
 800d836:	e7e0      	b.n	800d7fa <_raise_r+0x12>

0800d838 <raise>:
 800d838:	4b02      	ldr	r3, [pc, #8]	@ (800d844 <raise+0xc>)
 800d83a:	4601      	mov	r1, r0
 800d83c:	6818      	ldr	r0, [r3, #0]
 800d83e:	f7ff bfd3 	b.w	800d7e8 <_raise_r>
 800d842:	bf00      	nop
 800d844:	20000078 	.word	0x20000078

0800d848 <_kill_r>:
 800d848:	b538      	push	{r3, r4, r5, lr}
 800d84a:	4d07      	ldr	r5, [pc, #28]	@ (800d868 <_kill_r+0x20>)
 800d84c:	2300      	movs	r3, #0
 800d84e:	4604      	mov	r4, r0
 800d850:	4608      	mov	r0, r1
 800d852:	4611      	mov	r1, r2
 800d854:	602b      	str	r3, [r5, #0]
 800d856:	f7f7 fbb3 	bl	8004fc0 <_kill>
 800d85a:	1c43      	adds	r3, r0, #1
 800d85c:	d102      	bne.n	800d864 <_kill_r+0x1c>
 800d85e:	682b      	ldr	r3, [r5, #0]
 800d860:	b103      	cbz	r3, 800d864 <_kill_r+0x1c>
 800d862:	6023      	str	r3, [r4, #0]
 800d864:	bd38      	pop	{r3, r4, r5, pc}
 800d866:	bf00      	nop
 800d868:	2000149c 	.word	0x2000149c

0800d86c <_getpid_r>:
 800d86c:	f7f7 bba0 	b.w	8004fb0 <_getpid>

0800d870 <__swhatbuf_r>:
 800d870:	b570      	push	{r4, r5, r6, lr}
 800d872:	460c      	mov	r4, r1
 800d874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d878:	2900      	cmp	r1, #0
 800d87a:	b096      	sub	sp, #88	@ 0x58
 800d87c:	4615      	mov	r5, r2
 800d87e:	461e      	mov	r6, r3
 800d880:	da0d      	bge.n	800d89e <__swhatbuf_r+0x2e>
 800d882:	89a3      	ldrh	r3, [r4, #12]
 800d884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d888:	f04f 0100 	mov.w	r1, #0
 800d88c:	bf14      	ite	ne
 800d88e:	2340      	movne	r3, #64	@ 0x40
 800d890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d894:	2000      	movs	r0, #0
 800d896:	6031      	str	r1, [r6, #0]
 800d898:	602b      	str	r3, [r5, #0]
 800d89a:	b016      	add	sp, #88	@ 0x58
 800d89c:	bd70      	pop	{r4, r5, r6, pc}
 800d89e:	466a      	mov	r2, sp
 800d8a0:	f000 f848 	bl	800d934 <_fstat_r>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	dbec      	blt.n	800d882 <__swhatbuf_r+0x12>
 800d8a8:	9901      	ldr	r1, [sp, #4]
 800d8aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d8ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d8b2:	4259      	negs	r1, r3
 800d8b4:	4159      	adcs	r1, r3
 800d8b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8ba:	e7eb      	b.n	800d894 <__swhatbuf_r+0x24>

0800d8bc <__smakebuf_r>:
 800d8bc:	898b      	ldrh	r3, [r1, #12]
 800d8be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8c0:	079d      	lsls	r5, r3, #30
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	460c      	mov	r4, r1
 800d8c6:	d507      	bpl.n	800d8d8 <__smakebuf_r+0x1c>
 800d8c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d8cc:	6023      	str	r3, [r4, #0]
 800d8ce:	6123      	str	r3, [r4, #16]
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	6163      	str	r3, [r4, #20]
 800d8d4:	b003      	add	sp, #12
 800d8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8d8:	ab01      	add	r3, sp, #4
 800d8da:	466a      	mov	r2, sp
 800d8dc:	f7ff ffc8 	bl	800d870 <__swhatbuf_r>
 800d8e0:	9f00      	ldr	r7, [sp, #0]
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	4639      	mov	r1, r7
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f7fe fec6 	bl	800c678 <_malloc_r>
 800d8ec:	b948      	cbnz	r0, 800d902 <__smakebuf_r+0x46>
 800d8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8f2:	059a      	lsls	r2, r3, #22
 800d8f4:	d4ee      	bmi.n	800d8d4 <__smakebuf_r+0x18>
 800d8f6:	f023 0303 	bic.w	r3, r3, #3
 800d8fa:	f043 0302 	orr.w	r3, r3, #2
 800d8fe:	81a3      	strh	r3, [r4, #12]
 800d900:	e7e2      	b.n	800d8c8 <__smakebuf_r+0xc>
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	6020      	str	r0, [r4, #0]
 800d906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d90a:	81a3      	strh	r3, [r4, #12]
 800d90c:	9b01      	ldr	r3, [sp, #4]
 800d90e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d912:	b15b      	cbz	r3, 800d92c <__smakebuf_r+0x70>
 800d914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d918:	4630      	mov	r0, r6
 800d91a:	f000 f81d 	bl	800d958 <_isatty_r>
 800d91e:	b128      	cbz	r0, 800d92c <__smakebuf_r+0x70>
 800d920:	89a3      	ldrh	r3, [r4, #12]
 800d922:	f023 0303 	bic.w	r3, r3, #3
 800d926:	f043 0301 	orr.w	r3, r3, #1
 800d92a:	81a3      	strh	r3, [r4, #12]
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	431d      	orrs	r5, r3
 800d930:	81a5      	strh	r5, [r4, #12]
 800d932:	e7cf      	b.n	800d8d4 <__smakebuf_r+0x18>

0800d934 <_fstat_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4d07      	ldr	r5, [pc, #28]	@ (800d954 <_fstat_r+0x20>)
 800d938:	2300      	movs	r3, #0
 800d93a:	4604      	mov	r4, r0
 800d93c:	4608      	mov	r0, r1
 800d93e:	4611      	mov	r1, r2
 800d940:	602b      	str	r3, [r5, #0]
 800d942:	f7f7 fb9d 	bl	8005080 <_fstat>
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	d102      	bne.n	800d950 <_fstat_r+0x1c>
 800d94a:	682b      	ldr	r3, [r5, #0]
 800d94c:	b103      	cbz	r3, 800d950 <_fstat_r+0x1c>
 800d94e:	6023      	str	r3, [r4, #0]
 800d950:	bd38      	pop	{r3, r4, r5, pc}
 800d952:	bf00      	nop
 800d954:	2000149c 	.word	0x2000149c

0800d958 <_isatty_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4d06      	ldr	r5, [pc, #24]	@ (800d974 <_isatty_r+0x1c>)
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	4608      	mov	r0, r1
 800d962:	602b      	str	r3, [r5, #0]
 800d964:	f7f7 fb9c 	bl	80050a0 <_isatty>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	d102      	bne.n	800d972 <_isatty_r+0x1a>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	b103      	cbz	r3, 800d972 <_isatty_r+0x1a>
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	2000149c 	.word	0x2000149c

0800d978 <sqrtf>:
 800d978:	b508      	push	{r3, lr}
 800d97a:	ed2d 8b02 	vpush	{d8}
 800d97e:	eeb0 8a40 	vmov.f32	s16, s0
 800d982:	f000 f87e 	bl	800da82 <__ieee754_sqrtf>
 800d986:	eeb4 8a48 	vcmp.f32	s16, s16
 800d98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d98e:	d60c      	bvs.n	800d9aa <sqrtf+0x32>
 800d990:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d9b0 <sqrtf+0x38>
 800d994:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d99c:	d505      	bpl.n	800d9aa <sqrtf+0x32>
 800d99e:	f7fd ff6f 	bl	800b880 <__errno>
 800d9a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d9a6:	2321      	movs	r3, #33	@ 0x21
 800d9a8:	6003      	str	r3, [r0, #0]
 800d9aa:	ecbd 8b02 	vpop	{d8}
 800d9ae:	bd08      	pop	{r3, pc}
 800d9b0:	00000000 	.word	0x00000000

0800d9b4 <fmaxf>:
 800d9b4:	b508      	push	{r3, lr}
 800d9b6:	ed2d 8b02 	vpush	{d8}
 800d9ba:	eeb0 8a40 	vmov.f32	s16, s0
 800d9be:	eef0 8a60 	vmov.f32	s17, s1
 800d9c2:	f000 f815 	bl	800d9f0 <__fpclassifyf>
 800d9c6:	b930      	cbnz	r0, 800d9d6 <fmaxf+0x22>
 800d9c8:	eeb0 8a68 	vmov.f32	s16, s17
 800d9cc:	eeb0 0a48 	vmov.f32	s0, s16
 800d9d0:	ecbd 8b02 	vpop	{d8}
 800d9d4:	bd08      	pop	{r3, pc}
 800d9d6:	eeb0 0a68 	vmov.f32	s0, s17
 800d9da:	f000 f809 	bl	800d9f0 <__fpclassifyf>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d0f4      	beq.n	800d9cc <fmaxf+0x18>
 800d9e2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ea:	dded      	ble.n	800d9c8 <fmaxf+0x14>
 800d9ec:	e7ee      	b.n	800d9cc <fmaxf+0x18>
	...

0800d9f0 <__fpclassifyf>:
 800d9f0:	ee10 3a10 	vmov	r3, s0
 800d9f4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800d9f8:	d00d      	beq.n	800da16 <__fpclassifyf+0x26>
 800d9fa:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800d9fe:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800da02:	d30a      	bcc.n	800da1a <__fpclassifyf+0x2a>
 800da04:	4b07      	ldr	r3, [pc, #28]	@ (800da24 <__fpclassifyf+0x34>)
 800da06:	1e42      	subs	r2, r0, #1
 800da08:	429a      	cmp	r2, r3
 800da0a:	d908      	bls.n	800da1e <__fpclassifyf+0x2e>
 800da0c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800da10:	4258      	negs	r0, r3
 800da12:	4158      	adcs	r0, r3
 800da14:	4770      	bx	lr
 800da16:	2002      	movs	r0, #2
 800da18:	4770      	bx	lr
 800da1a:	2004      	movs	r0, #4
 800da1c:	4770      	bx	lr
 800da1e:	2003      	movs	r0, #3
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	007ffffe 	.word	0x007ffffe

0800da28 <lroundf>:
 800da28:	ee10 1a10 	vmov	r1, s0
 800da2c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800da30:	2900      	cmp	r1, #0
 800da32:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 800da36:	bfac      	ite	ge
 800da38:	2001      	movge	r0, #1
 800da3a:	f04f 30ff 	movlt.w	r0, #4294967295
 800da3e:	2a1e      	cmp	r2, #30
 800da40:	dc1a      	bgt.n	800da78 <lroundf+0x50>
 800da42:	2a00      	cmp	r2, #0
 800da44:	da03      	bge.n	800da4e <lroundf+0x26>
 800da46:	3201      	adds	r2, #1
 800da48:	bf18      	it	ne
 800da4a:	2000      	movne	r0, #0
 800da4c:	4770      	bx	lr
 800da4e:	2a16      	cmp	r2, #22
 800da50:	bfd8      	it	le
 800da52:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 800da56:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800da5a:	bfd8      	it	le
 800da5c:	4113      	asrle	r3, r2
 800da5e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800da62:	bfcd      	iteet	gt
 800da64:	3b96      	subgt	r3, #150	@ 0x96
 800da66:	185b      	addle	r3, r3, r1
 800da68:	f1c2 0217 	rsble	r2, r2, #23
 800da6c:	fa01 f303 	lslgt.w	r3, r1, r3
 800da70:	bfd8      	it	le
 800da72:	40d3      	lsrle	r3, r2
 800da74:	4358      	muls	r0, r3
 800da76:	4770      	bx	lr
 800da78:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800da7c:	ee17 0a90 	vmov	r0, s15
 800da80:	4770      	bx	lr

0800da82 <__ieee754_sqrtf>:
 800da82:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800da86:	4770      	bx	lr

0800da88 <roundf>:
 800da88:	ee10 0a10 	vmov	r0, s0
 800da8c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800da90:	3a7f      	subs	r2, #127	@ 0x7f
 800da92:	2a16      	cmp	r2, #22
 800da94:	dc15      	bgt.n	800dac2 <roundf+0x3a>
 800da96:	2a00      	cmp	r2, #0
 800da98:	da08      	bge.n	800daac <roundf+0x24>
 800da9a:	3201      	adds	r2, #1
 800da9c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800daa0:	d101      	bne.n	800daa6 <roundf+0x1e>
 800daa2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800daa6:	ee00 3a10 	vmov	s0, r3
 800daaa:	4770      	bx	lr
 800daac:	4907      	ldr	r1, [pc, #28]	@ (800dacc <roundf+0x44>)
 800daae:	4111      	asrs	r1, r2
 800dab0:	4201      	tst	r1, r0
 800dab2:	d0fa      	beq.n	800daaa <roundf+0x22>
 800dab4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800dab8:	4113      	asrs	r3, r2
 800daba:	4403      	add	r3, r0
 800dabc:	ea23 0301 	bic.w	r3, r3, r1
 800dac0:	e7f1      	b.n	800daa6 <roundf+0x1e>
 800dac2:	2a80      	cmp	r2, #128	@ 0x80
 800dac4:	d1f1      	bne.n	800daaa <roundf+0x22>
 800dac6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800daca:	4770      	bx	lr
 800dacc:	007fffff 	.word	0x007fffff

0800dad0 <_init>:
 800dad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad2:	bf00      	nop
 800dad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dad6:	bc08      	pop	{r3}
 800dad8:	469e      	mov	lr, r3
 800dada:	4770      	bx	lr

0800dadc <_fini>:
 800dadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dade:	bf00      	nop
 800dae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dae2:	bc08      	pop	{r3}
 800dae4:	469e      	mov	lr, r3
 800dae6:	4770      	bx	lr
