
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000209c  0800c598  0800c598  0000d598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e634  0800e634  000101f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e634  0800e634  0000f634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e63c  0800e63c  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e63c  0800e63c  0000f63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e640  0800e640  0000f640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800e644  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  200001f8  0800e83c  000101f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee0  0800e83c  00010ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166ec  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c8  00000000  00000000  00026914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00029ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fda  00000000  00000000  0002b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6cc  00000000  00000000  0002c2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184b8  00000000  00000000  00046996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a025d  00000000  00000000  0005ee4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff0ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006628  00000000  00000000  000ff0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00105718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c580 	.word	0x0800c580

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800c580 	.word	0x0800c580

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 f919 	bl	8005138 <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f006 fb51 	bl	80075f0 <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 f8f1 	bl	8005138 <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f006 fbf9 	bl	8007750 <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	200002cc 	.word	0x200002cc

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f006 fbec 	bl	8007750 <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002cc 	.word	0x200002cc

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <play_confirmation_tone>:

/**
 * @brief Play confirmation tone
 */
void play_confirmation_tone(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    play_tone(784, 150);  // G5
 8000fbc:	2196      	movs	r1, #150	@ 0x96
 8000fbe:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fc2:	f7ff ff8f 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fc6:	2132      	movs	r1, #50	@ 0x32
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff8b 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000fce:	21c8      	movs	r1, #200	@ 0xc8
 8000fd0:	f240 4017 	movw	r0, #1047	@ 0x417
 8000fd4:	f7ff ff86 	bl	8000ee4 <play_tone>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <play_success_tone>:

/**
 * @brief Play success tone sequence
 */
void play_success_tone(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    play_tone(523, 100);  // C5
 8000fe0:	2164      	movs	r1, #100	@ 0x64
 8000fe2:	f240 200b 	movw	r0, #523	@ 0x20b
 8000fe6:	f7ff ff7d 	bl	8000ee4 <play_tone>
    play_tone(659, 100);  // E5
 8000fea:	2164      	movs	r1, #100	@ 0x64
 8000fec:	f240 2093 	movw	r0, #659	@ 0x293
 8000ff0:	f7ff ff78 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 8000ff4:	2164      	movs	r1, #100	@ 0x64
 8000ff6:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000ffa:	f7ff ff73 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000ffe:	21c8      	movs	r1, #200	@ 0xc8
 8001000:	f240 4017 	movw	r0, #1047	@ 0x417
 8001004:	f7ff ff6e 	bl	8000ee4 <play_tone>
    play_tone(0, 100);    // Pause
 8001008:	2164      	movs	r1, #100	@ 0x64
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ff6a 	bl	8000ee4 <play_tone>
    play_tone(1047, 100); // C6
 8001010:	2164      	movs	r1, #100	@ 0x64
 8001012:	f240 4017 	movw	r0, #1047	@ 0x417
 8001016:	f7ff ff65 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 800101a:	2164      	movs	r1, #100	@ 0x64
 800101c:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001020:	f7ff ff60 	bl	8000ee4 <play_tone>
    play_tone(1047, 300); // C6
 8001024:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001028:	f240 4017 	movw	r0, #1047	@ 0x417
 800102c:	f7ff ff5a 	bl	8000ee4 <play_tone>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <play_error_tone>:

/**
 * @brief Play error tone sequence
 */
void play_error_tone(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e00a      	b.n	8001056 <play_error_tone+0x22>
        play_tone(220, 200);  // A3
 8001040:	21c8      	movs	r1, #200	@ 0xc8
 8001042:	20dc      	movs	r0, #220	@ 0xdc
 8001044:	f7ff ff4e 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 8001048:	2164      	movs	r1, #100	@ 0x64
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff4a 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 3; i++) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	ddf1      	ble.n	8001040 <play_error_tone+0xc>
    }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <play_wall_beep>:

/**
 * @brief Play wall detection beep
 */
void play_wall_beep(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
    play_tone(1000, 50);
 800106a:	2132      	movs	r1, #50	@ 0x32
 800106c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001070:	f7ff ff38 	bl	8000ee4 <play_tone>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <play_turn_beep>:

/**
 * @brief Play turn signal beep
 */
void play_turn_beep(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    play_tone(800, 30);
 800107c:	211e      	movs	r1, #30
 800107e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001082:	f7ff ff2f 	bl	8000ee4 <play_tone>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <play_battery_warning>:

/**
 * @brief Play battery low warning
 */
void play_battery_warning(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	e00b      	b.n	80010ae <play_battery_warning+0x24>
        play_tone(440, 100);  // A4
 8001096:	2164      	movs	r1, #100	@ 0x64
 8001098:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 800109c:	f7ff ff22 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 80010a0:	2164      	movs	r1, #100	@ 0x64
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff ff1e 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 5; i++) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	ddf0      	ble.n	8001096 <play_battery_warning+0xc>
    }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff f8d9 	bl	8000280 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <send_bluetooth_message+0x28>)
 80010da:	f007 fb73 	bl	80087c4 <HAL_UART_Transmit>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200003ec 	.word	0x200003ec

080010ec <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 80010ec:	b40f      	push	{r0, r1, r2, r3}
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b0c2      	sub	sp, #264	@ 0x108
 80010f2:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 80010f4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80010f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001100:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800110a:	f107 0008 	add.w	r0, r7, #8
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001114:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001118:	f009 f8c8 	bl	800a2ac <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffcd 	bl	80010c0 <send_bluetooth_message>
}
 8001126:	bf00      	nop
 8001128:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800112c:	46bd      	mov	sp, r7
 800112e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001132:	b004      	add	sp, #16
 8001134:	4770      	bx	lr
	...

08001138 <send_maze_state>:

/**
 * @brief Send current maze state
 */
void send_maze_state(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	@ 0x50
 800113c:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== MAZE STATE ===\r\n");
 800113e:	4844      	ldr	r0, [pc, #272]	@ (8001250 <send_maze_state+0x118>)
 8001140:	f7ff ffbe 	bl	80010c0 <send_bluetooth_message>

    // Send maze in ASCII format
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 8001144:	230f      	movs	r3, #15
 8001146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001148:	e058      	b.n	80011fc <send_maze_state+0xc4>
        char line[64] = "";
 800114a:	463b      	mov	r3, r7
 800114c:	2240      	movs	r2, #64	@ 0x40
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f009 f8b9 	bl	800a2c8 <memset>
        for (int x = 0; x < MAZE_SIZE; x++) {
 8001156:	2300      	movs	r3, #0
 8001158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800115a:	e038      	b.n	80011ce <send_maze_state+0x96>
            char cell[8];
            if (maze[x][y].visited) {
 800115c:	493d      	ldr	r1, [pc, #244]	@ (8001254 <send_maze_state+0x11c>)
 800115e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001160:	011a      	lsls	r2, r3, #4
 8001162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001164:	4413      	add	r3, r2
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	440b      	add	r3, r1
 800116a:	3304      	adds	r3, #4
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d01d      	beq.n	80011ae <send_maze_state+0x76>
                sprintf(cell, "%3d ", maze[x][y].distance < MAX_DISTANCE ? maze[x][y].distance : 999);
 8001172:	4938      	ldr	r1, [pc, #224]	@ (8001254 <send_maze_state+0x11c>)
 8001174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001176:	011a      	lsls	r2, r3, #4
 8001178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800117a:	4413      	add	r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001186:	4293      	cmp	r3, r2
 8001188:	dc08      	bgt.n	800119c <send_maze_state+0x64>
 800118a:	4932      	ldr	r1, [pc, #200]	@ (8001254 <send_maze_state+0x11c>)
 800118c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800118e:	011a      	lsls	r2, r3, #4
 8001190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001192:	4413      	add	r3, r2
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	440b      	add	r3, r1
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	e001      	b.n	80011a0 <send_maze_state+0x68>
 800119c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80011a0:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80011a4:	461a      	mov	r2, r3
 80011a6:	492c      	ldr	r1, [pc, #176]	@ (8001258 <send_maze_state+0x120>)
 80011a8:	f008 ffec 	bl	800a184 <siprintf>
 80011ac:	e005      	b.n	80011ba <send_maze_state+0x82>
            } else {
                sprintf(cell, " -- ");
 80011ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011b2:	492a      	ldr	r1, [pc, #168]	@ (800125c <send_maze_state+0x124>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f008 ffe5 	bl	800a184 <siprintf>
            }
            strcat(line, cell);
 80011ba:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80011be:	463b      	mov	r3, r7
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f009 f888 	bl	800a2d8 <strcat>
        for (int x = 0; x < MAZE_SIZE; x++) {
 80011c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011ca:	3301      	adds	r3, #1
 80011cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	ddc3      	ble.n	800115c <send_maze_state+0x24>
        }
        strcat(line, "\r\n");
 80011d4:	463b      	mov	r3, r7
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f852 	bl	8000280 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	463b      	mov	r3, r7
 80011e2:	4413      	add	r3, r2
 80011e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001260 <send_maze_state+0x128>)
 80011e6:	8811      	ldrh	r1, [r2, #0]
 80011e8:	7892      	ldrb	r2, [r2, #2]
 80011ea:	8019      	strh	r1, [r3, #0]
 80011ec:	709a      	strb	r2, [r3, #2]
        send_bluetooth_message(line);
 80011ee:	463b      	mov	r3, r7
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff65 	bl	80010c0 <send_bluetooth_message>
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 80011f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011f8:	3b01      	subs	r3, #1
 80011fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011fe:	2b00      	cmp	r3, #0
 8001200:	daa3      	bge.n	800114a <send_maze_state+0x12>
    }

    send_bluetooth_printf("Robot Position: (%d,%d) Direction: %d\r\n",
 8001202:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <send_maze_state+0x12c>)
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <send_maze_state+0x12c>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <send_maze_state+0x12c>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	4816      	ldr	r0, [pc, #88]	@ (8001268 <send_maze_state+0x130>)
 8001210:	f7ff ff6c 	bl	80010ec <send_bluetooth_printf>
                         robot.x, robot.y, robot.direction);
    send_bluetooth_printf("Center Reached: %s\r\n", robot.center_reached ? "YES" : "NO");
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <send_maze_state+0x12c>)
 8001216:	7b1b      	ldrb	r3, [r3, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <send_maze_state+0xe8>
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <send_maze_state+0x134>)
 800121e:	e000      	b.n	8001222 <send_maze_state+0xea>
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <send_maze_state+0x138>)
 8001222:	4619      	mov	r1, r3
 8001224:	4813      	ldr	r0, [pc, #76]	@ (8001274 <send_maze_state+0x13c>)
 8001226:	f7ff ff61 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Returned to Start: %s\r\n", robot.returned_to_start ? "YES" : "NO");
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <send_maze_state+0x12c>)
 800122c:	7b5b      	ldrb	r3, [r3, #13]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <send_maze_state+0xfe>
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <send_maze_state+0x134>)
 8001234:	e000      	b.n	8001238 <send_maze_state+0x100>
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <send_maze_state+0x138>)
 8001238:	4619      	mov	r1, r3
 800123a:	480f      	ldr	r0, [pc, #60]	@ (8001278 <send_maze_state+0x140>)
 800123c:	f7ff ff56 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_message("==================\r\n");
 8001240:	480e      	ldr	r0, [pc, #56]	@ (800127c <send_maze_state+0x144>)
 8001242:	f7ff ff3d 	bl	80010c0 <send_bluetooth_message>
}
 8001246:	bf00      	nop
 8001248:	3750      	adds	r7, #80	@ 0x50
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	0800c598 	.word	0x0800c598
 8001254:	20000434 	.word	0x20000434
 8001258:	0800c5b0 	.word	0x0800c5b0
 800125c:	0800c5b8 	.word	0x0800c5b8
 8001260:	0800c5c0 	.word	0x0800c5c0
 8001264:	20001434 	.word	0x20001434
 8001268:	0800c5c4 	.word	0x0800c5c4
 800126c:	0800c5ec 	.word	0x0800c5ec
 8001270:	0800c5f0 	.word	0x0800c5f0
 8001274:	0800c5f4 	.word	0x0800c5f4
 8001278:	0800c60c 	.word	0x0800c60c
 800127c:	0800c624 	.word	0x0800c624

08001280 <send_sensor_data>:

/**
 * @brief Send current sensor data
 */
void send_sensor_data(void)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af06      	add	r7, sp, #24
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001286:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <send_sensor_data+0x54>)
 8001288:	881b      	ldrh	r3, [r3, #0]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800128a:	461d      	mov	r5, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <send_sensor_data+0x54>)
 800128e:	891b      	ldrh	r3, [r3, #8]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001290:	461e      	mov	r6, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <send_sensor_data+0x54>)
 8001294:	885b      	ldrh	r3, [r3, #2]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001296:	469c      	mov	ip, r3
                         sensors.side_left, sensors.side_right,
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <send_sensor_data+0x54>)
 800129a:	88db      	ldrh	r3, [r3, #6]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800129c:	461a      	mov	r2, r3
                         sensors.side_left, sensors.side_right,
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <send_sensor_data+0x54>)
 80012a0:	889b      	ldrh	r3, [r3, #4]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012a2:	4619      	mov	r1, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <send_sensor_data+0x54>)
 80012a6:	7a9b      	ldrb	r3, [r3, #10]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012a8:	4618      	mov	r0, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <send_sensor_data+0x54>)
 80012ac:	7adb      	ldrb	r3, [r3, #11]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012ae:	461c      	mov	r4, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <send_sensor_data+0x54>)
 80012b2:	7b1b      	ldrb	r3, [r3, #12]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012b4:	9304      	str	r3, [sp, #16]
 80012b6:	9403      	str	r4, [sp, #12]
 80012b8:	9002      	str	r0, [sp, #8]
 80012ba:	9101      	str	r1, [sp, #4]
 80012bc:	9200      	str	r2, [sp, #0]
 80012be:	4663      	mov	r3, ip
 80012c0:	4632      	mov	r2, r6
 80012c2:	4629      	mov	r1, r5
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <send_sensor_data+0x58>)
 80012c6:	f7ff ff11 	bl	80010ec <send_bluetooth_printf>
}
 80012ca:	bf00      	nop
 80012cc:	3704      	adds	r7, #4
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20001448 	.word	0x20001448
 80012d8:	0800c63c 	.word	0x0800c63c

080012dc <send_position_data>:

/**
 * @brief Send current position and encoder data
 */
void send_position_data(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af02      	add	r7, sp, #8
    int32_t left_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <send_position_data+0x44>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80012ec:	607b      	str	r3, [r7, #4]
    int32_t right_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim4) - 32768;
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <send_position_data+0x48>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80012f8:	603b      	str	r3, [r7, #0]

    send_bluetooth_printf("POSITION - X:%d Y:%d Dir:%d EncL:%ld EncR:%ld\r\n",
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <send_position_data+0x4c>)
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <send_position_data+0x4c>)
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <send_position_data+0x4c>)
 8001304:	6898      	ldr	r0, [r3, #8]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4603      	mov	r3, r0
 8001310:	4806      	ldr	r0, [pc, #24]	@ (800132c <send_position_data+0x50>)
 8001312:	f7ff feeb 	bl	80010ec <send_bluetooth_printf>
                         robot.x, robot.y, robot.direction, left_count, right_count);
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000314 	.word	0x20000314
 8001324:	200003a4 	.word	0x200003a4
 8001328:	20001434 	.word	0x20001434
 800132c:	0800c680 	.word	0x0800c680

08001330 <send_performance_metrics>:

/**
 * @brief Send performance metrics
 */
void send_performance_metrics(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
    float efficiency = get_exploration_efficiency();  // make functions
 8001336:	f002 f955 	bl	80035e4 <get_exploration_efficiency>
 800133a:	ed87 0a01 	vstr	s0, [r7, #4]
    int optimal_distance = get_optimal_distance();		// make functions
 800133e:	f002 f9a1 	bl	8003684 <get_optimal_distance>
 8001342:	6038      	str	r0, [r7, #0]

    send_bluetooth_message("\r\n=== PERFORMANCE METRICS ===\r\n");
 8001344:	4824      	ldr	r0, [pc, #144]	@ (80013d8 <send_performance_metrics+0xa8>)
 8001346:	f7ff febb 	bl	80010c0 <send_bluetooth_message>
    send_bluetooth_printf("Exploration Steps: %d\r\n", robot.exploration_steps);
 800134a:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <send_performance_metrics+0xac>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4619      	mov	r1, r3
 8001350:	4823      	ldr	r0, [pc, #140]	@ (80013e0 <send_performance_metrics+0xb0>)
 8001352:	f7ff fecb 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Exploration Efficiency: %.1f%%\r\n", efficiency);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff f8fe 	bl	8000558 <__aeabi_f2d>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4820      	ldr	r0, [pc, #128]	@ (80013e4 <send_performance_metrics+0xb4>)
 8001362:	f7ff fec3 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Optimal Path Distance: %d steps\r\n", optimal_distance);
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	481f      	ldr	r0, [pc, #124]	@ (80013e8 <send_performance_metrics+0xb8>)
 800136a:	f7ff febf 	bl	80010ec <send_bluetooth_printf>

    // Performance rating
    if (efficiency <= 50.0f && optimal_distance > 0) {
 800136e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001372:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80013ec <send_performance_metrics+0xbc>
 8001376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137e:	d806      	bhi.n	800138e <send_performance_metrics+0x5e>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	dd03      	ble.n	800138e <send_performance_metrics+0x5e>
        send_bluetooth_message("Rating: ⭐⭐⭐⭐⭐ LEVEL\r\n");
 8001386:	481a      	ldr	r0, [pc, #104]	@ (80013f0 <send_performance_metrics+0xc0>)
 8001388:	f7ff fe9a 	bl	80010c0 <send_bluetooth_message>
 800138c:	e01c      	b.n	80013c8 <send_performance_metrics+0x98>
    } else if (efficiency <= 65.0f) {
 800138e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001392:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80013f4 <send_performance_metrics+0xc4>
 8001396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	d803      	bhi.n	80013a8 <send_performance_metrics+0x78>
        send_bluetooth_message("Rating: ⭐⭐⭐⭐ COMPETITION READY\r\n");
 80013a0:	4815      	ldr	r0, [pc, #84]	@ (80013f8 <send_performance_metrics+0xc8>)
 80013a2:	f7ff fe8d 	bl	80010c0 <send_bluetooth_message>
 80013a6:	e00f      	b.n	80013c8 <send_performance_metrics+0x98>
    } else if (efficiency <= 80.0f) {
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80013fc <send_performance_metrics+0xcc>
 80013b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	d803      	bhi.n	80013c2 <send_performance_metrics+0x92>
        send_bluetooth_message("Rating: ⭐⭐⭐ GOOD PERFORMANCE\r\n");
 80013ba:	4811      	ldr	r0, [pc, #68]	@ (8001400 <send_performance_metrics+0xd0>)
 80013bc:	f7ff fe80 	bl	80010c0 <send_bluetooth_message>
 80013c0:	e002      	b.n	80013c8 <send_performance_metrics+0x98>
    } else {
        send_bluetooth_message("Rating: ⭐⭐ NEEDS OPTIMIZATION\r\n");
 80013c2:	4810      	ldr	r0, [pc, #64]	@ (8001404 <send_performance_metrics+0xd4>)
 80013c4:	f7ff fe7c 	bl	80010c0 <send_bluetooth_message>
    }
    send_bluetooth_message("===========================\r\n");
 80013c8:	480f      	ldr	r0, [pc, #60]	@ (8001408 <send_performance_metrics+0xd8>)
 80013ca:	f7ff fe79 	bl	80010c0 <send_bluetooth_message>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	0800c6b0 	.word	0x0800c6b0
 80013dc:	20001434 	.word	0x20001434
 80013e0:	0800c6d0 	.word	0x0800c6d0
 80013e4:	0800c6e8 	.word	0x0800c6e8
 80013e8:	0800c70c 	.word	0x0800c70c
 80013ec:	42480000 	.word	0x42480000
 80013f0:	0800c730 	.word	0x0800c730
 80013f4:	42820000 	.word	0x42820000
 80013f8:	0800c750 	.word	0x0800c750
 80013fc:	42a00000 	.word	0x42a00000
 8001400:	0800c77c 	.word	0x0800c77c
 8001404:	0800c7a4 	.word	0x0800c7a4
 8001408:	0800c7c8 	.word	0x0800c7c8

0800140c <send_battery_status>:

/**
 * @brief Send battery status
 */
void send_battery_status(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
    // Convert ADC reading to voltage (assuming 3.3V reference)
    float voltage = (sensors.battery * 3.3f) / 4096.0f;
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <send_battery_status+0x60>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001470 <send_battery_status+0x64>
 8001422:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001426:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001474 <send_battery_status+0x68>
 800142a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142e:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_printf("Battery: %.2fV (ADC:%d)", voltage, sensors.battery);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff f890 	bl	8000558 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	490b      	ldr	r1, [pc, #44]	@ (800146c <send_battery_status+0x60>)
 800143e:	8809      	ldrh	r1, [r1, #0]
 8001440:	9100      	str	r1, [sp, #0]
 8001442:	480d      	ldr	r0, [pc, #52]	@ (8001478 <send_battery_status+0x6c>)
 8001444:	f7ff fe52 	bl	80010ec <send_bluetooth_printf>

    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <send_battery_status+0x60>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001450:	4293      	cmp	r3, r2
 8001452:	d803      	bhi.n	800145c <send_battery_status+0x50>
        send_bluetooth_message(" - LOW BATTERY WARNING!\r\n");
 8001454:	4809      	ldr	r0, [pc, #36]	@ (800147c <send_battery_status+0x70>)
 8001456:	f7ff fe33 	bl	80010c0 <send_bluetooth_message>
    } else {
        send_bluetooth_message(" - OK\r\n");
    }
}
 800145a:	e002      	b.n	8001462 <send_battery_status+0x56>
        send_bluetooth_message(" - OK\r\n");
 800145c:	4808      	ldr	r0, [pc, #32]	@ (8001480 <send_battery_status+0x74>)
 800145e:	f7ff fe2f 	bl	80010c0 <send_bluetooth_message>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20001448 	.word	0x20001448
 8001470:	40533333 	.word	0x40533333
 8001474:	45800000 	.word	0x45800000
 8001478:	0800c7e8 	.word	0x0800c7e8
 800147c:	0800c800 	.word	0x0800c800
 8001480:	0800c81c 	.word	0x0800c81c

08001484 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001494:	b2db      	uxtb	r3, r3
 8001496:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014a2:	4817      	ldr	r0, [pc, #92]	@ (8001500 <mpu9250_read_register+0x7c>)
 80014a4:	f004 fd86 	bl	8005fb4 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 80014a8:	f107 010d 	add.w	r1, r7, #13
 80014ac:	2364      	movs	r3, #100	@ 0x64
 80014ae:	2201      	movs	r2, #1
 80014b0:	4814      	ldr	r0, [pc, #80]	@ (8001504 <mpu9250_read_register+0x80>)
 80014b2:	f005 faac 	bl	8006a0e <HAL_SPI_Transmit>
 80014b6:	4603      	mov	r3, r0
 80014b8:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 80014ba:	f107 010c 	add.w	r1, r7, #12
 80014be:	2364      	movs	r3, #100	@ 0x64
 80014c0:	2201      	movs	r2, #1
 80014c2:	4810      	ldr	r0, [pc, #64]	@ (8001504 <mpu9250_read_register+0x80>)
 80014c4:	f005 fbe7 	bl	8006c96 <HAL_SPI_Receive>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d2:	480b      	ldr	r0, [pc, #44]	@ (8001500 <mpu9250_read_register+0x7c>)
 80014d4:	f004 fd6e 	bl	8005fb4 <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <mpu9250_read_register+0x60>
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 80014e4:	4808      	ldr	r0, [pc, #32]	@ (8001508 <mpu9250_read_register+0x84>)
 80014e6:	f7ff fdeb 	bl	80010c0 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <mpu9250_read_register+0x88>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 80014f0:	23ff      	movs	r3, #255	@ 0xff
 80014f2:	e000      	b.n	80014f6 <mpu9250_read_register+0x72>
    }

    return rx_data;
 80014f4:	7b3b      	ldrb	r3, [r7, #12]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020400 	.word	0x40020400
 8001504:	20000274 	.word	0x20000274
 8001508:	0800c93c 	.word	0x0800c93c
 800150c:	20000214 	.word	0x20000214

08001510 <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	460a      	mov	r2, r1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	733b      	strb	r3, [r7, #12]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800152e:	4811      	ldr	r0, [pc, #68]	@ (8001574 <mpu9250_write_register+0x64>)
 8001530:	f004 fd40 	bl	8005fb4 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 8001534:	f107 010c 	add.w	r1, r7, #12
 8001538:	2364      	movs	r3, #100	@ 0x64
 800153a:	2202      	movs	r2, #2
 800153c:	480e      	ldr	r0, [pc, #56]	@ (8001578 <mpu9250_write_register+0x68>)
 800153e:	f005 fa66 	bl	8006a0e <HAL_SPI_Transmit>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800154c:	4809      	ldr	r0, [pc, #36]	@ (8001574 <mpu9250_write_register+0x64>)
 800154e:	f004 fd31 	bl	8005fb4 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 8001558:	4808      	ldr	r0, [pc, #32]	@ (800157c <mpu9250_write_register+0x6c>)
 800155a:	f7ff fdb1 	bl	80010c0 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <mpu9250_write_register+0x70>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8001564:	2001      	movs	r0, #1
 8001566:	f003 fde7 	bl	8005138 <HAL_Delay>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40020400 	.word	0x40020400
 8001578:	20000274 	.word	0x20000274
 800157c:	0800c960 	.word	0x0800c960
 8001580:	20000214 	.word	0x20000214

08001584 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 800158a:	483c      	ldr	r0, [pc, #240]	@ (800167c <mpu9250_init+0xf8>)
 800158c:	f7ff fd98 	bl	80010c0 <send_bluetooth_message>
    HAL_Delay(200);
 8001590:	20c8      	movs	r0, #200	@ 0xc8
 8001592:	f003 fdd1 	bl	8005138 <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 8001596:	2180      	movs	r1, #128	@ 0x80
 8001598:	206b      	movs	r0, #107	@ 0x6b
 800159a:	f7ff ffb9 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 800159e:	20fa      	movs	r0, #250	@ 0xfa
 80015a0:	f003 fdca 	bl	8005138 <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 80015a4:	2100      	movs	r1, #0
 80015a6:	206b      	movs	r0, #107	@ 0x6b
 80015a8:	f7ff ffb2 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(50);
 80015ac:	2032      	movs	r0, #50	@ 0x32
 80015ae:	f003 fdc3 	bl	8005138 <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 80015b2:	2101      	movs	r1, #1
 80015b4:	206b      	movs	r0, #107	@ 0x6b
 80015b6:	f7ff ffab 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(50);
 80015ba:	2032      	movs	r0, #50	@ 0x32
 80015bc:	f003 fdbc 	bl	8005138 <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 80015c0:	2100      	movs	r1, #0
 80015c2:	206c      	movs	r0, #108	@ 0x6c
 80015c4:	f7ff ffa4 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 80015c8:	200a      	movs	r0, #10
 80015ca:	f003 fdb5 	bl	8005138 <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 80015ce:	206a      	movs	r0, #106	@ 0x6a
 80015d0:	f7ff ff58 	bl	8001484 <mpu9250_read_register>
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4619      	mov	r1, r3
 80015e4:	206a      	movs	r0, #106	@ 0x6a
 80015e6:	f7ff ff93 	bl	8001510 <mpu9250_write_register>
     HAL_Delay(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f003 fda4 	bl	8005138 <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 80015f0:	2104      	movs	r1, #4
 80015f2:	2019      	movs	r0, #25
 80015f4:	f7ff ff8c 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 80015f8:	200a      	movs	r0, #10
 80015fa:	f003 fd9d 	bl	8005138 <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 80015fe:	2102      	movs	r1, #2
 8001600:	201a      	movs	r0, #26
 8001602:	f7ff ff85 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 8001606:	200a      	movs	r0, #10
 8001608:	f003 fd96 	bl	8005138 <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 800160c:	2108      	movs	r1, #8
 800160e:	201b      	movs	r0, #27
 8001610:	f7ff ff7e 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 8001614:	200a      	movs	r0, #10
 8001616:	f003 fd8f 	bl	8005138 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 800161a:	2108      	movs	r1, #8
 800161c:	201c      	movs	r0, #28
 800161e:	f7ff ff77 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 8001622:	200a      	movs	r0, #10
 8001624:	f003 fd88 	bl	8005138 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 8001628:	2102      	movs	r1, #2
 800162a:	201d      	movs	r0, #29
 800162c:	f7ff ff70 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 8001630:	200a      	movs	r0, #10
 8001632:	f003 fd81 	bl	8005138 <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001636:	2075      	movs	r0, #117	@ 0x75
 8001638:	f7ff ff24 	bl	8001484 <mpu9250_read_register>
 800163c:	4603      	mov	r3, r0
 800163e:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	4619      	mov	r1, r3
 8001644:	480e      	ldr	r0, [pc, #56]	@ (8001680 <mpu9250_init+0xfc>)
 8001646:	f7ff fd51 	bl	80010ec <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	2b70      	cmp	r3, #112	@ 0x70
 800164e:	d009      	beq.n	8001664 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	4619      	mov	r1, r3
 8001654:	480b      	ldr	r0, [pc, #44]	@ (8001684 <mpu9250_init+0x100>)
 8001656:	f7ff fd49 	bl	80010ec <send_bluetooth_printf>
        mpu9250_initialized=false;
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <mpu9250_init+0x104>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
        return false;
 8001660:	2300      	movs	r3, #0
 8001662:	e006      	b.n	8001672 <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8001664:	4809      	ldr	r0, [pc, #36]	@ (800168c <mpu9250_init+0x108>)
 8001666:	f7ff fd2b 	bl	80010c0 <send_bluetooth_message>
    mpu9250_initialized=true;
 800166a:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <mpu9250_init+0x104>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
    return true;
 8001670:	2301      	movs	r3, #1
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	0800c988 	.word	0x0800c988
 8001680:	0800c9b4 	.word	0x0800c9b4
 8001684:	0800c9c8 	.word	0x0800c9c8
 8001688:	20000214 	.word	0x20000214
 800168c:	0800c9f0 	.word	0x0800c9f0

08001690 <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 8001690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001694:	b088      	sub	sp, #32
 8001696:	af04      	add	r7, sp, #16
    if (!mpu9250_initialized) {
 8001698:	4b4e      	ldr	r3, [pc, #312]	@ (80017d4 <mpu9250_calibrate_bias+0x144>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	f083 0301 	eor.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <mpu9250_calibrate_bias+0x1e>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 80016a6:	484c      	ldr	r0, [pc, #304]	@ (80017d8 <mpu9250_calibrate_bias+0x148>)
 80016a8:	f7ff fd0a 	bl	80010c0 <send_bluetooth_message>
        return;
 80016ac:	e08e      	b.n	80017cc <mpu9250_calibrate_bias+0x13c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 80016ae:	484b      	ldr	r0, [pc, #300]	@ (80017dc <mpu9250_calibrate_bias+0x14c>)
 80016b0:	f7ff fd06 	bl	80010c0 <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 1000;
 80016b4:	4b4a      	ldr	r3, [pc, #296]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 80016b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016ba:	611a      	str	r2, [r3, #16]
    float sum_x = 0, sum_y = 0, sum_z = 0;
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	e02e      	b.n	8001732 <mpu9250_calibrate_bias+0xa2>
        mpu9250_read_gyro();
 80016d4:	f000 f8c4 	bl	8001860 <mpu9250_read_gyro>
        sum_x += gyro.gyro_x;
 80016d8:	4b42      	ldr	r3, [pc, #264]	@ (80017e4 <mpu9250_calibrate_bias+0x154>)
 80016da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_y += gyro.gyro_y;
 80016f2:	4b3c      	ldr	r3, [pc, #240]	@ (80017e4 <mpu9250_calibrate_bias+0x154>)
 80016f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001700:	ed97 7a02 	vldr	s14, [r7, #8]
 8001704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001708:	edc7 7a02 	vstr	s15, [r7, #8]
        sum_z += gyro.gyro_z;
 800170c:	4b35      	ldr	r3, [pc, #212]	@ (80017e4 <mpu9250_calibrate_bias+0x154>)
 800170e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	ed97 7a01 	vldr	s14, [r7, #4]
 800171e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001722:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 8001726:	2003      	movs	r0, #3
 8001728:	f003 fd06 	bl	8005138 <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	4b2b      	ldr	r3, [pc, #172]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8cb      	bhi.n	80016d4 <mpu9250_calibrate_bias+0x44>
    }

    enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
 800173c:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001748:	edd7 6a03 	vldr	s13, [r7, #12]
 800174c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 8001752:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
 8001756:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001762:	edd7 6a02 	vldr	s13, [r7, #8]
 8001766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 800176c:	edc3 7a01 	vstr	s15, [r3, #4]
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800177c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001784:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 8001786:	edc3 7a02 	vstr	s15, [r3, #8]
    enhanced_gyro.calibrated = true;
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 800178c:	2201      	movs	r2, #1
 800178e:	731a      	strb	r2, [r3, #12]

    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 8001792:	681b      	ldr	r3, [r3, #0]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fedf 	bl	8000558 <__aeabi_f2d>
 800179a:	4680      	mov	r8, r0
 800179c:	4689      	mov	r9, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 80017a0:	685b      	ldr	r3, [r3, #4]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fed8 	bl	8000558 <__aeabi_f2d>
 80017a8:	4604      	mov	r4, r0
 80017aa:	460d      	mov	r5, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <mpu9250_calibrate_bias+0x150>)
 80017ae:	689b      	ldr	r3, [r3, #8]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fed1 	bl	8000558 <__aeabi_f2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017be:	e9cd 4500 	strd	r4, r5, [sp]
 80017c2:	4642      	mov	r2, r8
 80017c4:	464b      	mov	r3, r9
 80017c6:	4808      	ldr	r0, [pc, #32]	@ (80017e8 <mpu9250_calibrate_bias+0x158>)
 80017c8:	f7ff fc90 	bl	80010ec <send_bluetooth_printf>
}
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017d4:	20000214 	.word	0x20000214
 80017d8:	0800ca04 	.word	0x0800ca04
 80017dc:	0800ca30 	.word	0x0800ca30
 80017e0:	20000218 	.word	0x20000218
 80017e4:	20001458 	.word	0x20001458
 80017e8:	0800ca64 	.word	0x0800ca64

080017ec <mpu9250_get_gyro_z_compensated>:

/**
 * @brief Get bias-compensated gyro Z value in degrees per second
 */
float mpu9250_get_gyro_z_compensated(void) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
    if (!enhanced_gyro.calibrated) {
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <mpu9250_get_gyro_z_compensated+0x50>)
 80017f4:	7b1b      	ldrb	r3, [r3, #12]
 80017f6:	f083 0301 	eor.w	r3, r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <mpu9250_get_gyro_z_compensated+0x1e>
        return mpu9250_get_gyro_z_dps(); // Fall back to uncompensated
 8001800:	f000 f916 	bl	8001a30 <mpu9250_get_gyro_z_dps>
 8001804:	eef0 7a40 	vmov.f32	s15, s0
 8001808:	e013      	b.n	8001832 <mpu9250_get_gyro_z_compensated+0x46>
    }

    float raw_z_dps = (float)(gyro.gyro_z - enhanced_gyro.gyro_bias_z) / 65.5f;
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <mpu9250_get_gyro_z_compensated+0x54>)
 800180c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <mpu9250_get_gyro_z_compensated+0x50>)
 800181a:	edd3 7a02 	vldr	s15, [r3, #8]
 800181e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001822:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001844 <mpu9250_get_gyro_z_compensated+0x58>
 8001826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182a:	edc7 7a01 	vstr	s15, [r7, #4]
    return raw_z_dps;
 800182e:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8001832:	eeb0 0a67 	vmov.f32	s0, s15
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000218 	.word	0x20000218
 8001840:	20001458 	.word	0x20001458
 8001844:	42830000 	.word	0x42830000

08001848 <mpu9250_is_initialized>:

/**
 * @brief Check if MPU9250 is initialized - NEW FUNCTION
 */
bool mpu9250_is_initialized(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
    return mpu9250_initialized;
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <mpu9250_is_initialized+0x14>)
 800184e:	781b      	ldrb	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000214 	.word	0x20000214

08001860 <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 8001866:	4b2f      	ldr	r3, [pc, #188]	@ (8001924 <mpu9250_read_gyro+0xc4>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	f083 0301 	eor.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 8001874:	482c      	ldr	r0, [pc, #176]	@ (8001928 <mpu9250_read_gyro+0xc8>)
 8001876:	f7ff fc23 	bl	80010c0 <send_bluetooth_message>
        return;
 800187a:	e050      	b.n	800191e <mpu9250_read_gyro+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 800187c:	23c3      	movs	r3, #195	@ 0xc3
 800187e:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001886:	4829      	ldr	r0, [pc, #164]	@ (800192c <mpu9250_read_gyro+0xcc>)
 8001888:	f004 fb94 	bl	8005fb4 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 800188c:	1df9      	adds	r1, r7, #7
 800188e:	2364      	movs	r3, #100	@ 0x64
 8001890:	2201      	movs	r2, #1
 8001892:	4827      	ldr	r0, [pc, #156]	@ (8001930 <mpu9250_read_gyro+0xd0>)
 8001894:	f005 f8bb 	bl	8006a0e <HAL_SPI_Transmit>
 8001898:	4603      	mov	r3, r0
 800189a:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80018a2:	2201      	movs	r2, #1
 80018a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018a8:	4820      	ldr	r0, [pc, #128]	@ (800192c <mpu9250_read_gyro+0xcc>)
 80018aa:	f004 fb83 	bl	8005fb4 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 80018ae:	4821      	ldr	r0, [pc, #132]	@ (8001934 <mpu9250_read_gyro+0xd4>)
 80018b0:	f7ff fc06 	bl	80010c0 <send_bluetooth_message>
        return;
 80018b4:	e033      	b.n	800191e <mpu9250_read_gyro+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 80018b6:	f107 0108 	add.w	r1, r7, #8
 80018ba:	2364      	movs	r3, #100	@ 0x64
 80018bc:	2206      	movs	r2, #6
 80018be:	481c      	ldr	r0, [pc, #112]	@ (8001930 <mpu9250_read_gyro+0xd0>)
 80018c0:	f005 f9e9 	bl	8006c96 <HAL_SPI_Receive>
 80018c4:	4603      	mov	r3, r0
 80018c6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ce:	4817      	ldr	r0, [pc, #92]	@ (800192c <mpu9250_read_gyro+0xcc>)
 80018d0:	f004 fb70 	bl	8005fb4 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 80018da:	4817      	ldr	r0, [pc, #92]	@ (8001938 <mpu9250_read_gyro+0xd8>)
 80018dc:	f7ff fbf0 	bl	80010c0 <send_bluetooth_message>
        return;
 80018e0:	e01d      	b.n	800191e <mpu9250_read_gyro+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 80018e2:	7a3b      	ldrb	r3, [r7, #8]
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	7a7b      	ldrb	r3, [r7, #9]
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	4313      	orrs	r3, r2
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	4b12      	ldr	r3, [pc, #72]	@ (800193c <mpu9250_read_gyro+0xdc>)
 80018f4:	801a      	strh	r2, [r3, #0]
    gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 80018f6:	7abb      	ldrb	r3, [r7, #10]
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	7afb      	ldrb	r3, [r7, #11]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b21a      	sxth	r2, r3
 8001906:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <mpu9250_read_gyro+0xdc>)
 8001908:	805a      	strh	r2, [r3, #2]
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 800190a:	7b3b      	ldrb	r3, [r7, #12]
 800190c:	b21b      	sxth	r3, r3
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21a      	sxth	r2, r3
 8001912:	7b7b      	ldrb	r3, [r7, #13]
 8001914:	b21b      	sxth	r3, r3
 8001916:	4313      	orrs	r3, r2
 8001918:	b21a      	sxth	r2, r3
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <mpu9250_read_gyro+0xdc>)
 800191c:	809a      	strh	r2, [r3, #4]
}
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000214 	.word	0x20000214
 8001928:	0800ca94 	.word	0x0800ca94
 800192c:	40020400 	.word	0x40020400
 8001930:	20000274 	.word	0x20000274
 8001934:	0800cac8 	.word	0x0800cac8
 8001938:	0800caec 	.word	0x0800caec
 800193c:	20001458 	.word	0x20001458

08001940 <mpu9250_read_accel>:

/**
 * @brief Read raw accelerometer data - FIXED with error checking
 */
void mpu9250_read_accel(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 8001946:	4b2f      	ldr	r3, [pc, #188]	@ (8001a04 <mpu9250_read_accel+0xc4>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	f083 0301 	eor.w	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <mpu9250_read_accel+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read accel\r\n");
 8001954:	482c      	ldr	r0, [pc, #176]	@ (8001a08 <mpu9250_read_accel+0xc8>)
 8001956:	f7ff fbb3 	bl	80010c0 <send_bluetooth_message>
        return;
 800195a:	e050      	b.n	80019fe <mpu9250_read_accel+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_ACCEL_XOUT_H | 0x80; // Set read bit
 800195c:	23bb      	movs	r3, #187	@ 0xbb
 800195e:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001966:	4829      	ldr	r0, [pc, #164]	@ (8001a0c <mpu9250_read_accel+0xcc>)
 8001968:	f004 fb24 	bl	8005fb4 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 800196c:	1df9      	adds	r1, r7, #7
 800196e:	2364      	movs	r3, #100	@ 0x64
 8001970:	2201      	movs	r2, #1
 8001972:	4827      	ldr	r0, [pc, #156]	@ (8001a10 <mpu9250_read_accel+0xd0>)
 8001974:	f005 f84b 	bl	8006a0e <HAL_SPI_Transmit>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <mpu9250_read_accel+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001988:	4820      	ldr	r0, [pc, #128]	@ (8001a0c <mpu9250_read_accel+0xcc>)
 800198a:	f004 fb13 	bl	8005fb4 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in accel read\r\n");
 800198e:	4821      	ldr	r0, [pc, #132]	@ (8001a14 <mpu9250_read_accel+0xd4>)
 8001990:	f7ff fb96 	bl	80010c0 <send_bluetooth_message>
        return;
 8001994:	e033      	b.n	80019fe <mpu9250_read_accel+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 8001996:	f107 0108 	add.w	r1, r7, #8
 800199a:	2364      	movs	r3, #100	@ 0x64
 800199c:	2206      	movs	r2, #6
 800199e:	481c      	ldr	r0, [pc, #112]	@ (8001a10 <mpu9250_read_accel+0xd0>)
 80019a0:	f005 f979 	bl	8006c96 <HAL_SPI_Receive>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ae:	4817      	ldr	r0, [pc, #92]	@ (8001a0c <mpu9250_read_accel+0xcc>)
 80019b0:	f004 fb00 	bl	8005fb4 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <mpu9250_read_accel+0x82>
        send_bluetooth_message("SPI receive error in accel read\r\n");
 80019ba:	4817      	ldr	r0, [pc, #92]	@ (8001a18 <mpu9250_read_accel+0xd8>)
 80019bc:	f7ff fb80 	bl	80010c0 <send_bluetooth_message>
        return;
 80019c0:	e01d      	b.n	80019fe <mpu9250_read_accel+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.accel_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 80019c2:	7a3b      	ldrb	r3, [r7, #8]
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	7a7b      	ldrb	r3, [r7, #9]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <mpu9250_read_accel+0xdc>)
 80019d4:	80da      	strh	r2, [r3, #6]
    gyro.accel_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 80019d6:	7abb      	ldrb	r3, [r7, #10]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b21a      	sxth	r2, r3
 80019de:	7afb      	ldrb	r3, [r7, #11]
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b21a      	sxth	r2, r3
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <mpu9250_read_accel+0xdc>)
 80019e8:	811a      	strh	r2, [r3, #8]
    gyro.accel_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 80019ea:	7b3b      	ldrb	r3, [r7, #12]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	7b7b      	ldrb	r3, [r7, #13]
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	4313      	orrs	r3, r2
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <mpu9250_read_accel+0xdc>)
 80019fc:	815a      	strh	r2, [r3, #10]
}
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000214 	.word	0x20000214
 8001a08:	0800cb10 	.word	0x0800cb10
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	20000274 	.word	0x20000274
 8001a14:	0800cb48 	.word	0x0800cb48
 8001a18:	0800cb6c 	.word	0x0800cb6c
 8001a1c:	20001458 	.word	0x20001458

08001a20 <mpu9250_read_all>:

/**
 * @brief Read all IMU data
 */
void mpu9250_read_all(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
    mpu9250_read_accel();
 8001a24:	f7ff ff8c 	bl	8001940 <mpu9250_read_accel>
    mpu9250_read_gyro();
 8001a28:	f7ff ff1a 	bl	8001860 <mpu9250_read_gyro>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <mpu9250_get_gyro_z_dps>:

/**
 * @brief Get gyro Z-axis in degrees per second
 */
float mpu9250_get_gyro_z_dps(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
    // ±500 dps range, 16-bit resolution
    // Sensitivity: 65.5 LSB/(dps)

    return (float)gyro.gyro_z / 65.5f;
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <mpu9250_get_gyro_z_dps+0x2c>)
 8001a36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a42:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001a60 <mpu9250_get_gyro_z_dps+0x30>
 8001a46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a4a:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20001458 	.word	0x20001458
 8001a60:	42830000 	.word	0x42830000

08001a64 <mpu9250_send_status>:

/**
 * @brief Get MPU9250 status for debugging - NEW FUNCTION
 */
void mpu9250_send_status(void)
{
 8001a64:	b5b0      	push	{r4, r5, r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af02      	add	r7, sp, #8
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
                         mpu9250_initialized ? "OK" : "FAILED");
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <mpu9250_send_status+0xc0>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <mpu9250_send_status+0x12>
 8001a72:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <mpu9250_send_status+0xc4>)
 8001a74:	e000      	b.n	8001a78 <mpu9250_send_status+0x14>
 8001a76:	4b2d      	ldr	r3, [pc, #180]	@ (8001b2c <mpu9250_send_status+0xc8>)
 8001a78:	4619      	mov	r1, r3
 8001a7a:	482d      	ldr	r0, [pc, #180]	@ (8001b30 <mpu9250_send_status+0xcc>)
 8001a7c:	f7ff fb36 	bl	80010ec <send_bluetooth_printf>

    if (mpu9250_initialized) {
 8001a80:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <mpu9250_send_status+0xc0>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d048      	beq.n	8001b1a <mpu9250_send_status+0xb6>
        uint8_t who_am_i = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001a88:	2075      	movs	r0, #117	@ 0x75
 8001a8a:	f7ff fcfb 	bl	8001484 <mpu9250_read_register>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
        uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 8001a92:	206a      	movs	r0, #106	@ 0x6a
 8001a94:	f7ff fcf6 	bl	8001484 <mpu9250_read_register>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71bb      	strb	r3, [r7, #6]
        uint8_t pwr_mgmt = mpu9250_read_register(MPU9250_PWR_MGMT_1);
 8001a9c:	206b      	movs	r0, #107	@ 0x6b
 8001a9e:	f7ff fcf1 	bl	8001484 <mpu9250_read_register>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	717b      	strb	r3, [r7, #5]

        send_bluetooth_printf("WHO_AM_I:0x%02X USER_CTRL:0x%02X PWR_MGMT:0x%02X\r\n",
 8001aa6:	79f9      	ldrb	r1, [r7, #7]
 8001aa8:	79ba      	ldrb	r2, [r7, #6]
 8001aaa:	797b      	ldrb	r3, [r7, #5]
 8001aac:	4821      	ldr	r0, [pc, #132]	@ (8001b34 <mpu9250_send_status+0xd0>)
 8001aae:	f7ff fb1d 	bl	80010ec <send_bluetooth_printf>
                             who_am_i, user_ctrl, pwr_mgmt);

        if (user_ctrl & 0x10) {
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <mpu9250_send_status+0x60>
            send_bluetooth_message("I2C disabled: ✅\r\n");
 8001abc:	481e      	ldr	r0, [pc, #120]	@ (8001b38 <mpu9250_send_status+0xd4>)
 8001abe:	f7ff faff 	bl	80010c0 <send_bluetooth_message>
 8001ac2:	e002      	b.n	8001aca <mpu9250_send_status+0x66>
        } else {
            send_bluetooth_message("I2C disabled: ❌\r\n");
 8001ac4:	481d      	ldr	r0, [pc, #116]	@ (8001b3c <mpu9250_send_status+0xd8>)
 8001ac6:	f7ff fafb 	bl	80010c0 <send_bluetooth_message>
        }

        // Read current sensor values
        mpu9250_read_all();
 8001aca:	f7ff ffa9 	bl	8001a20 <mpu9250_read_all>
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 8001ace:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <mpu9250_send_status+0xdc>)
 8001ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 8001ad4:	461c      	mov	r4, r3
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <mpu9250_send_status+0xdc>)
 8001ad8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 8001adc:	461d      	mov	r5, r3
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 8001ade:	f7ff ffa7 	bl	8001a30 <mpu9250_get_gyro_z_dps>
 8001ae2:	ee10 3a10 	vmov	r3, s0
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd36 	bl	8000558 <__aeabi_f2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	e9cd 2300 	strd	r2, r3, [sp]
 8001af4:	462a      	mov	r2, r5
 8001af6:	4621      	mov	r1, r4
 8001af8:	4812      	ldr	r0, [pc, #72]	@ (8001b44 <mpu9250_send_status+0xe0>)
 8001afa:	f7ff faf7 	bl	80010ec <send_bluetooth_printf>
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <mpu9250_send_status+0xdc>)
 8001b00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001b04:	4619      	mov	r1, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <mpu9250_send_status+0xdc>)
 8001b08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001b0c:	461a      	mov	r2, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <mpu9250_send_status+0xdc>)
 8001b10:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001b14:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <mpu9250_send_status+0xe4>)
 8001b16:	f7ff fae9 	bl	80010ec <send_bluetooth_printf>
    }
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bdb0      	pop	{r4, r5, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000214 	.word	0x20000214
 8001b28:	0800cb90 	.word	0x0800cb90
 8001b2c:	0800cb94 	.word	0x0800cb94
 8001b30:	0800cb9c 	.word	0x0800cb9c
 8001b34:	0800cbb8 	.word	0x0800cbb8
 8001b38:	0800cbec 	.word	0x0800cbec
 8001b3c:	0800cc00 	.word	0x0800cc00
 8001b40:	20001458 	.word	0x20001458
 8001b44:	0800cc14 	.word	0x0800cc14
 8001b48:	0800cc30 	.word	0x0800cc30

08001b4c <initialize_hardware_systems>:
/* USER CODE BEGIN 0 */

/**
 * @brief Initialize all hardware systems and perform diagnostics
 */
static void initialize_hardware_systems(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
    //send_bluetooth_message("\r\n" "="*60 "\r\n");
    send_bluetooth_message("🤖 CHAMPIONSHIP MICROMOUSE INITIALIZATION 🤖\r\n");
 8001b50:	4828      	ldr	r0, [pc, #160]	@ (8001bf4 <initialize_hardware_systems+0xa8>)
 8001b52:	f7ff fab5 	bl	80010c0 <send_bluetooth_message>
    //send_bluetooth_message("="*60 "\r\n");

    // Initialize PWM for motors
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6 (MOTOR_IN1)
 8001b56:	2100      	movs	r1, #0
 8001b58:	4827      	ldr	r0, [pc, #156]	@ (8001bf8 <initialize_hardware_systems+0xac>)
 8001b5a:	f005 fd49 	bl	80075f0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // PA7 (MOTOR_IN2)
 8001b5e:	2104      	movs	r1, #4
 8001b60:	4825      	ldr	r0, [pc, #148]	@ (8001bf8 <initialize_hardware_systems+0xac>)
 8001b62:	f005 fd45 	bl	80075f0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // PB0 (MOTOR_IN3)
 8001b66:	2108      	movs	r1, #8
 8001b68:	4823      	ldr	r0, [pc, #140]	@ (8001bf8 <initialize_hardware_systems+0xac>)
 8001b6a:	f005 fd41 	bl	80075f0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PB1 (MOTOR_IN4)
 8001b6e:	210c      	movs	r1, #12
 8001b70:	4821      	ldr	r0, [pc, #132]	@ (8001bf8 <initialize_hardware_systems+0xac>)
 8001b72:	f005 fd3d 	bl	80075f0 <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET); // Enable DRV8833
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b7c:	481f      	ldr	r0, [pc, #124]	@ (8001bfc <initialize_hardware_systems+0xb0>)
 8001b7e:	f004 fa19 	bl	8005fb4 <HAL_GPIO_WritePin>

    // Verify ADC GPIO configuration
    verify_adc_gpio_configuration();
 8001b82:	f000 fdc7 	bl	8002714 <verify_adc_gpio_configuration>
    adc_system_diagnostics();
 8001b86:	f002 fcd5 	bl	8004534 <adc_system_diagnostics>

    // Initialize and test MPU9250 gyroscope
    if (mpu9250_init()) {
 8001b8a:	f7ff fcfb 	bl	8001584 <mpu9250_init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <initialize_hardware_systems+0x68>
        send_bluetooth_message("✅ MPU9250 gyroscope initialized successfully\r\n");
 8001b94:	481a      	ldr	r0, [pc, #104]	@ (8001c00 <initialize_hardware_systems+0xb4>)
 8001b96:	f7ff fa93 	bl	80010c0 <send_bluetooth_message>
        send_bluetooth_message("⚠️ KEEP ROBOT STATIONARY during gyro calibration!\r\n");
 8001b9a:	481a      	ldr	r0, [pc, #104]	@ (8001c04 <initialize_hardware_systems+0xb8>)
 8001b9c:	f7ff fa90 	bl	80010c0 <send_bluetooth_message>
        HAL_Delay(2000);
 8001ba0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ba4:	f003 fac8 	bl	8005138 <HAL_Delay>
        mpu9250_calibrate_bias();
 8001ba8:	f7ff fd72 	bl	8001690 <mpu9250_calibrate_bias>
        send_bluetooth_message("✅ Gyro calibration complete\r\n");
 8001bac:	4816      	ldr	r0, [pc, #88]	@ (8001c08 <initialize_hardware_systems+0xbc>)
 8001bae:	f7ff fa87 	bl	80010c0 <send_bluetooth_message>
 8001bb2:	e002      	b.n	8001bba <initialize_hardware_systems+0x6e>
    } else {
        send_bluetooth_message("⚠️ Gyro initialization failed - using basic movement\r\n");
 8001bb4:	4815      	ldr	r0, [pc, #84]	@ (8001c0c <initialize_hardware_systems+0xc0>)
 8001bb6:	f7ff fa83 	bl	80010c0 <send_bluetooth_message>
    }

    // Initialize encoders
    start_encoders();
 8001bba:	f001 fdeb 	bl	8003794 <start_encoders>
    HAL_Delay(100);
 8001bbe:	2064      	movs	r0, #100	@ 0x64
 8001bc0:	f003 faba 	bl	8005138 <HAL_Delay>

    // Test encoder functionality
    if (get_left_encoder_total() == 0 && get_right_encoder_total() == 0) {
 8001bc4:	f001 fdac 	bl	8003720 <get_left_encoder_total>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d108      	bne.n	8001be0 <initialize_hardware_systems+0x94>
 8001bce:	f001 fdb1 	bl	8003734 <get_right_encoder_total>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d103      	bne.n	8001be0 <initialize_hardware_systems+0x94>
        send_bluetooth_message("⚠️ WARNING: Encoders may not be working properly\r\n");
 8001bd8:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <initialize_hardware_systems+0xc4>)
 8001bda:	f7ff fa71 	bl	80010c0 <send_bluetooth_message>
 8001bde:	e002      	b.n	8001be6 <initialize_hardware_systems+0x9a>
    } else {
        send_bluetooth_message("✅ Encoders initialized and responding\r\n");
 8001be0:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <initialize_hardware_systems+0xc8>)
 8001be2:	f7ff fa6d 	bl	80010c0 <send_bluetooth_message>
    }

    // Initialize maze exploration system
    initialize_maze_exploration();
 8001be6:	f000 fe4b 	bl	8002880 <initialize_maze_exploration>

    send_bluetooth_message("✅ All systems initialized successfully!\r\n");
 8001bea:	480b      	ldr	r0, [pc, #44]	@ (8001c18 <initialize_hardware_systems+0xcc>)
 8001bec:	f7ff fa68 	bl	80010c0 <send_bluetooth_message>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	0800cc48 	.word	0x0800cc48
 8001bf8:	2000035c 	.word	0x2000035c
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	0800cc7c 	.word	0x0800cc7c
 8001c04:	0800ccb0 	.word	0x0800ccb0
 8001c08:	0800cce8 	.word	0x0800cce8
 8001c0c:	0800cd08 	.word	0x0800cd08
 8001c10:	0800cd44 	.word	0x0800cd44
 8001c14:	0800cd7c 	.word	0x0800cd7c
 8001c18:	0800cda8 	.word	0x0800cda8

08001c1c <run_system_diagnostics>:

/**
 * @brief Run comprehensive system diagnostics
 */
static void run_system_diagnostics(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🔧 SYSTEM DIAGNOSTICS 🔧\r\n");
 8001c20:	4821      	ldr	r0, [pc, #132]	@ (8001ca8 <run_system_diagnostics+0x8c>)
 8001c22:	f7ff fa4d 	bl	80010c0 <send_bluetooth_message>

    // Test sensors
    update_sensors();
 8001c26:	f002 fb31 	bl	800428c <update_sensors>
    if (sensors.battery == 0 && sensors.front_left == 0 &&
 8001c2a:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <run_system_diagnostics+0x90>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d113      	bne.n	8001c5a <run_system_diagnostics+0x3e>
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <run_system_diagnostics+0x90>)
 8001c34:	891b      	ldrh	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10f      	bne.n	8001c5a <run_system_diagnostics+0x3e>
        sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <run_system_diagnostics+0x90>)
 8001c3c:	885b      	ldrh	r3, [r3, #2]
    if (sensors.battery == 0 && sensors.front_left == 0 &&
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10b      	bne.n	8001c5a <run_system_diagnostics+0x3e>
        sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <run_system_diagnostics+0x90>)
 8001c44:	88db      	ldrh	r3, [r3, #6]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <run_system_diagnostics+0x3e>
 8001c4a:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <run_system_diagnostics+0x90>)
 8001c4c:	889b      	ldrh	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <run_system_diagnostics+0x3e>
        send_bluetooth_message("❌ CRITICAL: All sensors reading zero - check connections!\r\n");
 8001c52:	4817      	ldr	r0, [pc, #92]	@ (8001cb0 <run_system_diagnostics+0x94>)
 8001c54:	f7ff fa34 	bl	80010c0 <send_bluetooth_message>
 8001c58:	e004      	b.n	8001c64 <run_system_diagnostics+0x48>
    } else {
        send_bluetooth_message("✅ Sensors responding normally\r\n");
 8001c5a:	4816      	ldr	r0, [pc, #88]	@ (8001cb4 <run_system_diagnostics+0x98>)
 8001c5c:	f7ff fa30 	bl	80010c0 <send_bluetooth_message>
        send_sensor_data();
 8001c60:	f7ff fb0e 	bl	8001280 <send_sensor_data>
    }

    // Test battery
    send_battery_status();
 8001c64:	f7ff fbd2 	bl	800140c <send_battery_status>

    // Test gyro if available
    if (mpu9250_is_initialized()) {
 8001c68:	f7ff fdee 	bl	8001848 <mpu9250_is_initialized>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <run_system_diagnostics+0x5a>
        mpu9250_send_status();
 8001c72:	f7ff fef7 	bl	8001a64 <mpu9250_send_status>
    }

    // Test encoders
    send_encoder_status();
 8001c76:	f001 fecf 	bl	8003a18 <send_encoder_status>

    // System health check
    if (system_health_check()) {
 8001c7a:	f003 f97f 	bl	8004f7c <system_health_check>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <run_system_diagnostics+0x76>
        send_bluetooth_message("✅ System health check PASSED\r\n");
 8001c84:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <run_system_diagnostics+0x9c>)
 8001c86:	f7ff fa1b 	bl	80010c0 <send_bluetooth_message>
        system_ready = true;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <run_system_diagnostics+0xa0>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	e005      	b.n	8001c9e <run_system_diagnostics+0x82>
    } else {
        send_bluetooth_message("⚠️ System health check FAILED - check warnings above\r\n");
 8001c92:	480b      	ldr	r0, [pc, #44]	@ (8001cc0 <run_system_diagnostics+0xa4>)
 8001c94:	f7ff fa14 	bl	80010c0 <send_bluetooth_message>
        system_ready = false;
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <run_system_diagnostics+0xa0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
    }

    send_bluetooth_message("🔧 Diagnostics complete!\r\n");
 8001c9e:	4809      	ldr	r0, [pc, #36]	@ (8001cc4 <run_system_diagnostics+0xa8>)
 8001ca0:	f7ff fa0e 	bl	80010c0 <send_bluetooth_message>
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	0800cdd4 	.word	0x0800cdd4
 8001cac:	20001448 	.word	0x20001448
 8001cb0:	0800cdf8 	.word	0x0800cdf8
 8001cb4:	0800ce38 	.word	0x0800ce38
 8001cb8:	0800ce5c 	.word	0x0800ce5c
 8001cbc:	2000147e 	.word	0x2000147e
 8001cc0:	0800ce80 	.word	0x0800ce80
 8001cc4:	0800cebc 	.word	0x0800cebc

08001cc8 <send_periodic_status>:


/**
 * @brief Send periodic status updates
 */
static void send_periodic_status(void) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8001cce:	f003 fa27 	bl	8005120 <HAL_GetTick>
 8001cd2:	6078      	str	r0, [r7, #4]

    // Send status every 10 seconds when not exploring
    if (current_time - last_status_time > 10000 && !exploration_started) {
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <send_periodic_status+0x80>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d916      	bls.n	8001d12 <send_periodic_status+0x4a>
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <send_periodic_status+0x84>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	f083 0301 	eor.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00f      	beq.n	8001d12 <send_periodic_status+0x4a>
        send_battery_status();
 8001cf2:	f7ff fb8b 	bl	800140c <send_battery_status>

        if (system_ready) {
 8001cf6:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <send_periodic_status+0x88>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <send_periodic_status+0x3e>
            send_bluetooth_message("💚 System ready - Press LEFT button to start exploration\r\n");
 8001cfe:	4815      	ldr	r0, [pc, #84]	@ (8001d54 <send_periodic_status+0x8c>)
 8001d00:	f7ff f9de 	bl	80010c0 <send_bluetooth_message>
 8001d04:	e002      	b.n	8001d0c <send_periodic_status+0x44>
        } else {
            send_bluetooth_message("🔴 System not ready - Check diagnostics\r\n");
 8001d06:	4814      	ldr	r0, [pc, #80]	@ (8001d58 <send_periodic_status+0x90>)
 8001d08:	f7ff f9da 	bl	80010c0 <send_bluetooth_message>
        }

        last_status_time = current_time;
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <send_periodic_status+0x80>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
    }

    // Blink LED to show system is alive
    if (current_time - last_blink_time > 2000) {
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <send_periodic_status+0x94>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d1e:	d90f      	bls.n	8001d40 <send_periodic_status+0x78>
        if (system_ready) {
 8001d20:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <send_periodic_status+0x88>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <send_periodic_status+0x6a>
            HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8001d28:	2110      	movs	r1, #16
 8001d2a:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <send_periodic_status+0x98>)
 8001d2c:	f004 f95b 	bl	8005fe6 <HAL_GPIO_TogglePin>
 8001d30:	e003      	b.n	8001d3a <send_periodic_status+0x72>
        } else {
            // Fast blink if system not ready
            HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8001d32:	2120      	movs	r1, #32
 8001d34:	480a      	ldr	r0, [pc, #40]	@ (8001d60 <send_periodic_status+0x98>)
 8001d36:	f004 f956 	bl	8005fe6 <HAL_GPIO_TogglePin>
        }
        last_blink_time = current_time;
 8001d3a:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <send_periodic_status+0x94>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6013      	str	r3, [r2, #0]
    }
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20001480 	.word	0x20001480
 8001d4c:	2000147f 	.word	0x2000147f
 8001d50:	2000147e 	.word	0x2000147e
 8001d54:	0800cedc 	.word	0x0800cedc
 8001d58:	0800cf1c 	.word	0x0800cf1c
 8001d5c:	20001484 	.word	0x20001484
 8001d60:	40020400 	.word	0x40020400

08001d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d68:	f003 f974 	bl	8005054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6c:	f000 f8be 	bl	8001eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d70:	f000 fbee 	bl	8002550 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d74:	f000 f922 	bl	8001fbc <MX_ADC1_Init>
  MX_SPI2_Init();
 8001d78:	f000 f9aa 	bl	80020d0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001d7c:	f000 f9de 	bl	800213c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d80:	f000 fa7c 	bl	800227c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001d84:	f000 fb66 	bl	8002454 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001d88:	f000 fbb8 	bl	80024fc <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001d8c:	f000 faca 	bl	8002324 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Initialize all hardware systems
  initialize_hardware_systems();
 8001d90:	f7ff fedc 	bl	8001b4c <initialize_hardware_systems>

  // Run system diagnostics
  run_system_diagnostics();
 8001d94:	f7ff ff42 	bl	8001c1c <run_system_diagnostics>

  // Play startup sequence
  play_startup_tone();
 8001d98:	f7ff f8f2 	bl	8000f80 <play_startup_tone>
  led_sequence_startup();
 8001d9c:	f003 f852 	bl	8004e44 <led_sequence_startup>

  // Send startup message
  send_bluetooth_message("\r\n🎮 MICROMOUSE CONTROL READY 🎮\r\n");
 8001da0:	4844      	ldr	r0, [pc, #272]	@ (8001eb4 <main+0x150>)
 8001da2:	f7ff f98d 	bl	80010c0 <send_bluetooth_message>
  send_bluetooth_message("LEFT button: Start exploration\r\n");
 8001da6:	4844      	ldr	r0, [pc, #272]	@ (8001eb8 <main+0x154>)
 8001da8:	f7ff f98a 	bl	80010c0 <send_bluetooth_message>
  send_bluetooth_message("RIGHT button: Status/Emergency stop\r\n");
 8001dac:	4843      	ldr	r0, [pc, #268]	@ (8001ebc <main+0x158>)
 8001dae:	f7ff f987 	bl	80010c0 <send_bluetooth_message>
  send_bluetooth_message("Waiting for user input...\r\n");
 8001db2:	4843      	ldr	r0, [pc, #268]	@ (8001ec0 <main+0x15c>)
 8001db4:	f7ff f984 	bl	80010c0 <send_bluetooth_message>

    // Initial status
  last_status_time = HAL_GetTick();
 8001db8:	f003 f9b2 	bl	8005120 <HAL_GetTick>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a41      	ldr	r2, [pc, #260]	@ (8001ec4 <main+0x160>)
 8001dc0:	6013      	str	r3, [r2, #0]
  last_blink_time = HAL_GetTick();
 8001dc2:	f003 f9ad 	bl	8005120 <HAL_GetTick>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ec8 <main+0x164>)
 8001dca:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Handle button events
	if (button_pressed == 1) {
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ecc <main+0x168>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d133      	bne.n	8001e3e <main+0xda>
		button_pressed = 0;
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ecc <main+0x168>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]

		if (!exploration_started && system_ready) {
 8001ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ed0 <main+0x16c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	f083 0301 	eor.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d012      	beq.n	8001e10 <main+0xac>
 8001dea:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed4 <main+0x170>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00e      	beq.n	8001e10 <main+0xac>
			send_bluetooth_message("\r\n🚀 STARTING MAZE EXPLORATION! 🚀\r\n");
 8001df2:	4839      	ldr	r0, [pc, #228]	@ (8001ed8 <main+0x174>)
 8001df4:	f7ff f964 	bl	80010c0 <send_bluetooth_message>
			play_confirmation_tone();
 8001df8:	f7ff f8de 	bl	8000fb8 <play_confirmation_tone>
			HAL_Delay(1000);
 8001dfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e00:	f003 f99a 	bl	8005138 <HAL_Delay>

			exploration_started = true;
 8001e04:	4b32      	ldr	r3, [pc, #200]	@ (8001ed0 <main+0x16c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
			run_maze_exploration_sequence();
 8001e0a:	f001 fb47 	bl	800349c <run_maze_exploration_sequence>
 8001e0e:	e016      	b.n	8001e3e <main+0xda>

		} else if (is_exploration_complete()) {
 8001e10:	f001 fbd8 	bl	80035c4 <is_exploration_complete>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <main+0xc2>
			send_bluetooth_message("\r\n🏁 EXPLORATION COMPLETE - Ready for speed run! 🏁\r\n");
 8001e1a:	4830      	ldr	r0, [pc, #192]	@ (8001edc <main+0x178>)
 8001e1c:	f7ff f950 	bl	80010c0 <send_bluetooth_message>
			send_performance_metrics();
 8001e20:	f7ff fa86 	bl	8001330 <send_performance_metrics>
 8001e24:	e00b      	b.n	8001e3e <main+0xda>

		} else if (!system_ready) {
 8001e26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <main+0x170>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f083 0301 	eor.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <main+0xda>
			send_bluetooth_message("⚠️ System not ready - check diagnostics!\r\n");
 8001e34:	482a      	ldr	r0, [pc, #168]	@ (8001ee0 <main+0x17c>)
 8001e36:	f7ff f943 	bl	80010c0 <send_bluetooth_message>
			play_error_tone();
 8001e3a:	f7ff f8fb 	bl	8001034 <play_error_tone>
		}
	}

	if (button_pressed == 2) {
 8001e3e:	4b23      	ldr	r3, [pc, #140]	@ (8001ecc <main+0x168>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d128      	bne.n	8001e9a <main+0x136>
		button_pressed = 0;
 8001e48:	4b20      	ldr	r3, [pc, #128]	@ (8001ecc <main+0x168>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]

		// Right button - emergency stop or reset
		if (exploration_started && !is_exploration_complete()) {
 8001e4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <main+0x16c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d012      	beq.n	8001e7c <main+0x118>
 8001e56:	f001 fbb5 	bl	80035c4 <is_exploration_complete>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f083 0301 	eor.w	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <main+0x118>
			send_bluetooth_message("🛑 EMERGENCY STOP!\r\n");
 8001e66:	481f      	ldr	r0, [pc, #124]	@ (8001ee4 <main+0x180>)
 8001e68:	f7ff f92a 	bl	80010c0 <send_bluetooth_message>
			stop_motors();
 8001e6c:	f001 fd0e 	bl	800388c <stop_motors>
			play_error_tone();
 8001e70:	f7ff f8e0 	bl	8001034 <play_error_tone>
			exploration_started = false;
 8001e74:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <main+0x16c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e00e      	b.n	8001e9a <main+0x136>
		} else {
			// Send detailed status
			send_bluetooth_message("\r\n📊 DETAILED STATUS REPORT 📊\r\n");
 8001e7c:	481a      	ldr	r0, [pc, #104]	@ (8001ee8 <main+0x184>)
 8001e7e:	f7ff f91f 	bl	80010c0 <send_bluetooth_message>
			send_maze_state();
 8001e82:	f7ff f959 	bl	8001138 <send_maze_state>
			send_sensor_data();
 8001e86:	f7ff f9fb 	bl	8001280 <send_sensor_data>
			send_position_data();
 8001e8a:	f7ff fa27 	bl	80012dc <send_position_data>
			if (exploration_started) {
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <main+0x16c>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <main+0x136>
				send_performance_metrics();
 8001e96:	f7ff fa4b 	bl	8001330 <send_performance_metrics>
			}
		}
	}

	// Send periodic status updates
	send_periodic_status();
 8001e9a:	f7ff ff15 	bl	8001cc8 <send_periodic_status>

	// If exploration is running, let it continue
	if (exploration_started && !is_exploration_complete()) {
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <main+0x16c>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <main+0x146>
 8001ea6:	f001 fb8d 	bl	80035c4 <is_exploration_complete>
		// The exploration runs in run_maze_exploration_sequence()
		// and handles its own loop until complete
	}

	// Small delay to prevent overwhelming the system
	HAL_Delay(50);
 8001eaa:	2032      	movs	r0, #50	@ 0x32
 8001eac:	f003 f944 	bl	8005138 <HAL_Delay>
	if (button_pressed == 1) {
 8001eb0:	e78c      	b.n	8001dcc <main+0x68>
 8001eb2:	bf00      	nop
 8001eb4:	0800cf48 	.word	0x0800cf48
 8001eb8:	0800cf70 	.word	0x0800cf70
 8001ebc:	0800cf94 	.word	0x0800cf94
 8001ec0:	0800cfbc 	.word	0x0800cfbc
 8001ec4:	20001480 	.word	0x20001480
 8001ec8:	20001484 	.word	0x20001484
 8001ecc:	2000147c 	.word	0x2000147c
 8001ed0:	2000147f 	.word	0x2000147f
 8001ed4:	2000147e 	.word	0x2000147e
 8001ed8:	0800cfd8 	.word	0x0800cfd8
 8001edc:	0800d004 	.word	0x0800d004
 8001ee0:	0800d040 	.word	0x0800d040
 8001ee4:	0800d070 	.word	0x0800d070
 8001ee8:	0800d088 	.word	0x0800d088

08001eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b094      	sub	sp, #80	@ 0x50
 8001ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	2230      	movs	r2, #48	@ 0x30
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f008 f9e4 	bl	800a2c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	4b27      	ldr	r3, [pc, #156]	@ (8001fb4 <SystemClock_Config+0xc8>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	4a26      	ldr	r2, [pc, #152]	@ (8001fb4 <SystemClock_Config+0xc8>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f20:	4b24      	ldr	r3, [pc, #144]	@ (8001fb4 <SystemClock_Config+0xc8>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	4b21      	ldr	r3, [pc, #132]	@ (8001fb8 <SystemClock_Config+0xcc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a20      	ldr	r2, [pc, #128]	@ (8001fb8 <SystemClock_Config+0xcc>)
 8001f36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <SystemClock_Config+0xcc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f50:	2310      	movs	r3, #16
 8001f52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f54:	2302      	movs	r3, #2
 8001f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f60:	23a8      	movs	r3, #168	@ 0xa8
 8001f62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	f107 0320 	add.w	r3, r7, #32
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 f86b 	bl	800604c <HAL_RCC_OscConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f7c:	f000 fc06 	bl	800278c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f80:	230f      	movs	r3, #15
 8001f82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f84:	2302      	movs	r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 facd 	bl	800653c <HAL_RCC_ClockConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fa8:	f000 fbf0 	bl	800278c <Error_Handler>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3750      	adds	r7, #80	@ 0x50
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000

08001fbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fce:	4b3d      	ldr	r3, [pc, #244]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8001fd0:	4a3d      	ldr	r2, [pc, #244]	@ (80020c8 <MX_ADC1_Init+0x10c>)
 8001fd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8001fd6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fdc:	4b39      	ldr	r3, [pc, #228]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001fe2:	4b38      	ldr	r3, [pc, #224]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fe8:	4b36      	ldr	r3, [pc, #216]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fee:	4b35      	ldr	r3, [pc, #212]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ff6:	4b33      	ldr	r3, [pc, #204]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ffc:	4b31      	ldr	r3, [pc, #196]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8001ffe:	4a33      	ldr	r2, [pc, #204]	@ (80020cc <MX_ADC1_Init+0x110>)
 8002000:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002002:	4b30      	ldr	r3, [pc, #192]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8002008:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <MX_ADC1_Init+0x108>)
 800200a:	2205      	movs	r2, #5
 800200c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800200e:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002016:	4b2b      	ldr	r3, [pc, #172]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8002018:	2201      	movs	r2, #1
 800201a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800201c:	4829      	ldr	r0, [pc, #164]	@ (80020c4 <MX_ADC1_Init+0x108>)
 800201e:	f003 f8af 	bl	8005180 <HAL_ADC_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002028:	f000 fbb0 	bl	800278c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800202c:	2300      	movs	r3, #0
 800202e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002030:	2301      	movs	r3, #1
 8002032:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002034:	2303      	movs	r3, #3
 8002036:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002038:	463b      	mov	r3, r7
 800203a:	4619      	mov	r1, r3
 800203c:	4821      	ldr	r0, [pc, #132]	@ (80020c4 <MX_ADC1_Init+0x108>)
 800203e:	f003 fa63 	bl	8005508 <HAL_ADC_ConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002048:	f000 fba0 	bl	800278c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800204c:	2302      	movs	r3, #2
 800204e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002050:	2302      	movs	r3, #2
 8002052:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002054:	463b      	mov	r3, r7
 8002056:	4619      	mov	r1, r3
 8002058:	481a      	ldr	r0, [pc, #104]	@ (80020c4 <MX_ADC1_Init+0x108>)
 800205a:	f003 fa55 	bl	8005508 <HAL_ADC_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002064:	f000 fb92 	bl	800278c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002068:	2303      	movs	r3, #3
 800206a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800206c:	2303      	movs	r3, #3
 800206e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002070:	463b      	mov	r3, r7
 8002072:	4619      	mov	r1, r3
 8002074:	4813      	ldr	r0, [pc, #76]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8002076:	f003 fa47 	bl	8005508 <HAL_ADC_ConfigChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002080:	f000 fb84 	bl	800278c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002084:	2304      	movs	r3, #4
 8002086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002088:	2304      	movs	r3, #4
 800208a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	4619      	mov	r1, r3
 8002090:	480c      	ldr	r0, [pc, #48]	@ (80020c4 <MX_ADC1_Init+0x108>)
 8002092:	f003 fa39 	bl	8005508 <HAL_ADC_ConfigChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800209c:	f000 fb76 	bl	800278c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020a0:	2305      	movs	r3, #5
 80020a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80020a4:	2305      	movs	r3, #5
 80020a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a8:	463b      	mov	r3, r7
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <MX_ADC1_Init+0x108>)
 80020ae:	f003 fa2b 	bl	8005508 <HAL_ADC_ConfigChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80020b8:	f000 fb68 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000022c 	.word	0x2000022c
 80020c8:	40012000 	.word	0x40012000
 80020cc:	0f000001 	.word	0x0f000001

080020d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020d4:	4b17      	ldr	r3, [pc, #92]	@ (8002134 <MX_SPI2_Init+0x64>)
 80020d6:	4a18      	ldr	r2, [pc, #96]	@ (8002138 <MX_SPI2_Init+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020da:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <MX_SPI2_Init+0x64>)
 80020dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020e2:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <MX_SPI2_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e8:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <MX_SPI2_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ee:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <MX_SPI2_Init+0x64>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002134 <MX_SPI2_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <MX_SPI2_Init+0x64>)
 80020fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002100:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002102:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <MX_SPI2_Init+0x64>)
 8002104:	2230      	movs	r2, #48	@ 0x30
 8002106:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002108:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <MX_SPI2_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <MX_SPI2_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002114:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <MX_SPI2_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <MX_SPI2_Init+0x64>)
 800211c:	220a      	movs	r2, #10
 800211e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	@ (8002134 <MX_SPI2_Init+0x64>)
 8002122:	f004 fbeb 	bl	80068fc <HAL_SPI_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800212c:	f000 fb2e 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000274 	.word	0x20000274
 8002138:	40003800 	.word	0x40003800

0800213c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b096      	sub	sp, #88	@ 0x58
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800215a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]
 800216a:	615a      	str	r2, [r3, #20]
 800216c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2220      	movs	r2, #32
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f008 f8a7 	bl	800a2c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800217a:	4b3e      	ldr	r3, [pc, #248]	@ (8002274 <MX_TIM1_Init+0x138>)
 800217c:	4a3e      	ldr	r2, [pc, #248]	@ (8002278 <MX_TIM1_Init+0x13c>)
 800217e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8002180:	4b3c      	ldr	r3, [pc, #240]	@ (8002274 <MX_TIM1_Init+0x138>)
 8002182:	2214      	movs	r2, #20
 8002184:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002186:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <MX_TIM1_Init+0x138>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 800218c:	4b39      	ldr	r3, [pc, #228]	@ (8002274 <MX_TIM1_Init+0x138>)
 800218e:	22c8      	movs	r2, #200	@ 0xc8
 8002190:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b38      	ldr	r3, [pc, #224]	@ (8002274 <MX_TIM1_Init+0x138>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002198:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <MX_TIM1_Init+0x138>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800219e:	4b35      	ldr	r3, [pc, #212]	@ (8002274 <MX_TIM1_Init+0x138>)
 80021a0:	2280      	movs	r2, #128	@ 0x80
 80021a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021a4:	4833      	ldr	r0, [pc, #204]	@ (8002274 <MX_TIM1_Init+0x138>)
 80021a6:	f005 f97b 	bl	80074a0 <HAL_TIM_Base_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80021b0:	f000 faec 	bl	800278c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021be:	4619      	mov	r1, r3
 80021c0:	482c      	ldr	r0, [pc, #176]	@ (8002274 <MX_TIM1_Init+0x138>)
 80021c2:	f005 fe0f 	bl	8007de4 <HAL_TIM_ConfigClockSource>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80021cc:	f000 fade 	bl	800278c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021d0:	4828      	ldr	r0, [pc, #160]	@ (8002274 <MX_TIM1_Init+0x138>)
 80021d2:	f005 f9b4 	bl	800753e <HAL_TIM_PWM_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80021dc:	f000 fad6 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021ec:	4619      	mov	r1, r3
 80021ee:	4821      	ldr	r0, [pc, #132]	@ (8002274 <MX_TIM1_Init+0x138>)
 80021f0:	f006 f9c4 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80021fa:	f000 fac7 	bl	800278c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fe:	2360      	movs	r3, #96	@ 0x60
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 8002202:	2364      	movs	r3, #100	@ 0x64
 8002204:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800220a:	2300      	movs	r3, #0
 800220c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800221a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800221e:	2208      	movs	r2, #8
 8002220:	4619      	mov	r1, r3
 8002222:	4814      	ldr	r0, [pc, #80]	@ (8002274 <MX_TIM1_Init+0x138>)
 8002224:	f005 fd1c 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800222e:	f000 faad 	bl	800278c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800224a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	4619      	mov	r1, r3
 8002254:	4807      	ldr	r0, [pc, #28]	@ (8002274 <MX_TIM1_Init+0x138>)
 8002256:	f006 f9ff 	bl	8008658 <HAL_TIMEx_ConfigBreakDeadTime>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002260:	f000 fa94 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002264:	4803      	ldr	r0, [pc, #12]	@ (8002274 <MX_TIM1_Init+0x138>)
 8002266:	f002 fbcf 	bl	8004a08 <HAL_TIM_MspPostInit>

}
 800226a:	bf00      	nop
 800226c:	3758      	adds	r7, #88	@ 0x58
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200002cc 	.word	0x200002cc
 8002278:	40010000 	.word	0x40010000

0800227c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	@ 0x30
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	2224      	movs	r2, #36	@ 0x24
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f008 f81c 	bl	800a2c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002298:	4b21      	ldr	r3, [pc, #132]	@ (8002320 <MX_TIM2_Init+0xa4>)
 800229a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800229e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <MX_TIM2_Init+0xa4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <MX_TIM2_Init+0xa4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80022ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <MX_TIM2_Init+0xa4>)
 80022ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <MX_TIM2_Init+0xa4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ba:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <MX_TIM2_Init+0xa4>)
 80022bc:	2280      	movs	r2, #128	@ 0x80
 80022be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022c0:	2303      	movs	r3, #3
 80022c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022c8:	2301      	movs	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022d8:	2301      	movs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	480d      	ldr	r0, [pc, #52]	@ (8002320 <MX_TIM2_Init+0xa4>)
 80022ec:	f005 fa94 	bl	8007818 <HAL_TIM_Encoder_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022f6:	f000 fa49 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4806      	ldr	r0, [pc, #24]	@ (8002320 <MX_TIM2_Init+0xa4>)
 8002308:	f006 f938 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002312:	f000 fa3b 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	3730      	adds	r7, #48	@ 0x30
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000314 	.word	0x20000314

08002324 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	@ 0x38
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
 8002350:	615a      	str	r2, [r3, #20]
 8002352:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002354:	4b3d      	ldr	r3, [pc, #244]	@ (800244c <MX_TIM3_Init+0x128>)
 8002356:	4a3e      	ldr	r2, [pc, #248]	@ (8002450 <MX_TIM3_Init+0x12c>)
 8002358:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 800235a:	4b3c      	ldr	r3, [pc, #240]	@ (800244c <MX_TIM3_Init+0x128>)
 800235c:	2204      	movs	r2, #4
 800235e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002360:	4b3a      	ldr	r3, [pc, #232]	@ (800244c <MX_TIM3_Init+0x128>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 8002366:	4b39      	ldr	r3, [pc, #228]	@ (800244c <MX_TIM3_Init+0x128>)
 8002368:	f240 3246 	movw	r2, #838	@ 0x346
 800236c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236e:	4b37      	ldr	r3, [pc, #220]	@ (800244c <MX_TIM3_Init+0x128>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002374:	4b35      	ldr	r3, [pc, #212]	@ (800244c <MX_TIM3_Init+0x128>)
 8002376:	2280      	movs	r2, #128	@ 0x80
 8002378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800237a:	4834      	ldr	r0, [pc, #208]	@ (800244c <MX_TIM3_Init+0x128>)
 800237c:	f005 f890 	bl	80074a0 <HAL_TIM_Base_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002386:	f000 fa01 	bl	800278c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800238e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002390:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002394:	4619      	mov	r1, r3
 8002396:	482d      	ldr	r0, [pc, #180]	@ (800244c <MX_TIM3_Init+0x128>)
 8002398:	f005 fd24 	bl	8007de4 <HAL_TIM_ConfigClockSource>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80023a2:	f000 f9f3 	bl	800278c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023a6:	4829      	ldr	r0, [pc, #164]	@ (800244c <MX_TIM3_Init+0x128>)
 80023a8:	f005 f8c9 	bl	800753e <HAL_TIM_PWM_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80023b2:	f000 f9eb 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023be:	f107 0320 	add.w	r3, r7, #32
 80023c2:	4619      	mov	r1, r3
 80023c4:	4821      	ldr	r0, [pc, #132]	@ (800244c <MX_TIM3_Init+0x128>)
 80023c6:	f006 f8d9 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80023d0:	f000 f9dc 	bl	800278c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d4:	2360      	movs	r3, #96	@ 0x60
 80023d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2200      	movs	r2, #0
 80023e8:	4619      	mov	r1, r3
 80023ea:	4818      	ldr	r0, [pc, #96]	@ (800244c <MX_TIM3_Init+0x128>)
 80023ec:	f005 fc38 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80023f6:	f000 f9c9 	bl	800278c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	2204      	movs	r2, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4812      	ldr	r0, [pc, #72]	@ (800244c <MX_TIM3_Init+0x128>)
 8002402:	f005 fc2d 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800240c:	f000 f9be 	bl	800278c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	2208      	movs	r2, #8
 8002414:	4619      	mov	r1, r3
 8002416:	480d      	ldr	r0, [pc, #52]	@ (800244c <MX_TIM3_Init+0x128>)
 8002418:	f005 fc22 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002422:	f000 f9b3 	bl	800278c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	220c      	movs	r2, #12
 800242a:	4619      	mov	r1, r3
 800242c:	4807      	ldr	r0, [pc, #28]	@ (800244c <MX_TIM3_Init+0x128>)
 800242e:	f005 fc17 	bl	8007c60 <HAL_TIM_PWM_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002438:	f000 f9a8 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800243c:	4803      	ldr	r0, [pc, #12]	@ (800244c <MX_TIM3_Init+0x128>)
 800243e:	f002 fae3 	bl	8004a08 <HAL_TIM_MspPostInit>

}
 8002442:	bf00      	nop
 8002444:	3738      	adds	r7, #56	@ 0x38
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	2000035c 	.word	0x2000035c
 8002450:	40000400 	.word	0x40000400

08002454 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	@ 0x30
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	2224      	movs	r2, #36	@ 0x24
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f007 ff30 	bl	800a2c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002470:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <MX_TIM4_Init+0xa0>)
 8002472:	4a21      	ldr	r2, [pc, #132]	@ (80024f8 <MX_TIM4_Init+0xa4>)
 8002474:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002476:	4b1f      	ldr	r3, [pc, #124]	@ (80024f4 <MX_TIM4_Init+0xa0>)
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247c:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <MX_TIM4_Init+0xa0>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002482:	4b1c      	ldr	r3, [pc, #112]	@ (80024f4 <MX_TIM4_Init+0xa0>)
 8002484:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002488:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248a:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <MX_TIM4_Init+0xa0>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002490:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <MX_TIM4_Init+0xa0>)
 8002492:	2280      	movs	r2, #128	@ 0x80
 8002494:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002496:	2303      	movs	r3, #3
 8002498:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800249e:	2301      	movs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ae:	2301      	movs	r3, #1
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	4619      	mov	r1, r3
 80024c0:	480c      	ldr	r0, [pc, #48]	@ (80024f4 <MX_TIM4_Init+0xa0>)
 80024c2:	f005 f9a9 	bl	8007818 <HAL_TIM_Encoder_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80024cc:	f000 f95e 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	4805      	ldr	r0, [pc, #20]	@ (80024f4 <MX_TIM4_Init+0xa0>)
 80024de:	f006 f84d 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80024e8:	f000 f950 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024ec:	bf00      	nop
 80024ee:	3730      	adds	r7, #48	@ 0x30
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200003a4 	.word	0x200003a4
 80024f8:	40000800 	.word	0x40000800

080024fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002500:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <MX_USART6_UART_Init+0x4c>)
 8002502:	4a12      	ldr	r2, [pc, #72]	@ (800254c <MX_USART6_UART_Init+0x50>)
 8002504:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <MX_USART6_UART_Init+0x4c>)
 8002508:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800250c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800250e:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <MX_USART6_UART_Init+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <MX_USART6_UART_Init+0x4c>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800251a:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <MX_USART6_UART_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <MX_USART6_UART_Init+0x4c>)
 8002522:	220c      	movs	r2, #12
 8002524:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002526:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <MX_USART6_UART_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <MX_USART6_UART_Init+0x4c>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002532:	4805      	ldr	r0, [pc, #20]	@ (8002548 <MX_USART6_UART_Init+0x4c>)
 8002534:	f006 f8f6 	bl	8008724 <HAL_UART_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800253e:	f000 f925 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200003ec 	.word	0x200003ec
 800254c:	40011400 	.word	0x40011400

08002550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	4b4b      	ldr	r3, [pc, #300]	@ (8002698 <MX_GPIO_Init+0x148>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	4a4a      	ldr	r2, [pc, #296]	@ (8002698 <MX_GPIO_Init+0x148>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6313      	str	r3, [r2, #48]	@ 0x30
 8002576:	4b48      	ldr	r3, [pc, #288]	@ (8002698 <MX_GPIO_Init+0x148>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	4b44      	ldr	r3, [pc, #272]	@ (8002698 <MX_GPIO_Init+0x148>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	4a43      	ldr	r2, [pc, #268]	@ (8002698 <MX_GPIO_Init+0x148>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6313      	str	r3, [r2, #48]	@ 0x30
 8002592:	4b41      	ldr	r3, [pc, #260]	@ (8002698 <MX_GPIO_Init+0x148>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002698 <MX_GPIO_Init+0x148>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002698 <MX_GPIO_Init+0x148>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002698 <MX_GPIO_Init+0x148>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 80025ba:	2200      	movs	r2, #0
 80025bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025c0:	4836      	ldr	r0, [pc, #216]	@ (800269c <MX_GPIO_Init+0x14c>)
 80025c2:	f003 fcf7 	bl	8005fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 80025c6:	2200      	movs	r2, #0
 80025c8:	f241 3130 	movw	r1, #4912	@ 0x1330
 80025cc:	4834      	ldr	r0, [pc, #208]	@ (80026a0 <MX_GPIO_Init+0x150>)
 80025ce:	f003 fcf1 	bl	8005fb4 <HAL_GPIO_WritePin>
                          |EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80025d8:	4832      	ldr	r0, [pc, #200]	@ (80026a4 <MX_GPIO_Init+0x154>)
 80025da:	f003 fceb 	bl	8005fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 80025de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4619      	mov	r1, r3
 80025f6:	4829      	ldr	r0, [pc, #164]	@ (800269c <MX_GPIO_Init+0x14c>)
 80025f8:	f003 fb58 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 80025fc:	2302      	movs	r3, #2
 80025fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002600:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	4619      	mov	r1, r3
 8002610:	4824      	ldr	r0, [pc, #144]	@ (80026a4 <MX_GPIO_Init+0x154>)
 8002612:	f003 fb4b 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 8002616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800261a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800261c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4619      	mov	r1, r3
 800262c:	481c      	ldr	r0, [pc, #112]	@ (80026a0 <MX_GPIO_Init+0x150>)
 800262e:	f003 fb3d 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_LEFT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 8002632:	f241 3330 	movw	r3, #4912	@ 0x1330
 8002636:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	2301      	movs	r3, #1
 800263a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	4619      	mov	r1, r3
 800264a:	4815      	ldr	r0, [pc, #84]	@ (80026a0 <MX_GPIO_Init+0x150>)
 800264c:	f003 fb2e 	bl	8005cac <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_RIGHT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin;
 8002650:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	4619      	mov	r1, r3
 8002668:	480e      	ldr	r0, [pc, #56]	@ (80026a4 <MX_GPIO_Init+0x154>)
 800266a:	f003 fb1f 	bl	8005cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800266e:	2200      	movs	r2, #0
 8002670:	2105      	movs	r1, #5
 8002672:	2007      	movs	r0, #7
 8002674:	f003 fa51 	bl	8005b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002678:	2007      	movs	r0, #7
 800267a:	f003 fa6a 	bl	8005b52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2105      	movs	r1, #5
 8002682:	2028      	movs	r0, #40	@ 0x28
 8002684:	f003 fa49 	bl	8005b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002688:	2028      	movs	r0, #40	@ 0x28
 800268a:	f003 fa62 	bl	8005b52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800268e:	bf00      	nop
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020400 	.word	0x40020400
 80026a4:	40020000 	.word	0x40020000

080026a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 80026b2:	f002 fd35 	bl	8005120 <HAL_GetTick>
 80026b6:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 80026b8:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <HAL_GPIO_EXTI_Callback+0x58>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2bc8      	cmp	r3, #200	@ 0xc8
 80026c2:	d919      	bls.n	80026f8 <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d109      	bne.n	80026de <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <HAL_GPIO_EXTI_Callback+0x5c>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 80026d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <HAL_GPIO_EXTI_Callback+0x60>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 80026d6:	480d      	ldr	r0, [pc, #52]	@ (800270c <HAL_GPIO_EXTI_Callback+0x64>)
 80026d8:	f7fe fcf2 	bl	80010c0 <send_bluetooth_message>
 80026dc:	e009      	b.n	80026f2 <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e4:	d105      	bne.n	80026f2 <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 80026e6:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <HAL_GPIO_EXTI_Callback+0x5c>)
 80026e8:	2202      	movs	r2, #2
 80026ea:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 80026ec:	4808      	ldr	r0, [pc, #32]	@ (8002710 <HAL_GPIO_EXTI_Callback+0x68>)
 80026ee:	f7fe fce7 	bl	80010c0 <send_bluetooth_message>
        }
        last_press = current_time;
 80026f2:	4a03      	ldr	r2, [pc, #12]	@ (8002700 <HAL_GPIO_EXTI_Callback+0x58>)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6013      	str	r3, [r2, #0]
    }
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20001488 	.word	0x20001488
 8002704:	2000147c 	.word	0x2000147c
 8002708:	2000147d 	.word	0x2000147d
 800270c:	0800d0b0 	.word	0x0800d0b0
 8002710:	0800d0c8 	.word	0x0800d0c8

08002714 <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002728:	2301      	movs	r3, #1
 800272a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800272c:	2303      	movs	r3, #3
 800272e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	4619      	mov	r1, r3
 8002738:	4812      	ldr	r0, [pc, #72]	@ (8002784 <verify_adc_gpio_configuration+0x70>)
 800273a:	f003 fab7 	bl	8005cac <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800273e:	2304      	movs	r3, #4
 8002740:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	4619      	mov	r1, r3
 8002746:	480f      	ldr	r0, [pc, #60]	@ (8002784 <verify_adc_gpio_configuration+0x70>)
 8002748:	f003 fab0 	bl	8005cac <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800274c:	2308      	movs	r3, #8
 800274e:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	4619      	mov	r1, r3
 8002754:	480b      	ldr	r0, [pc, #44]	@ (8002784 <verify_adc_gpio_configuration+0x70>)
 8002756:	f003 faa9 	bl	8005cac <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800275a:	2310      	movs	r3, #16
 800275c:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275e:	1d3b      	adds	r3, r7, #4
 8002760:	4619      	mov	r1, r3
 8002762:	4808      	ldr	r0, [pc, #32]	@ (8002784 <verify_adc_gpio_configuration+0x70>)
 8002764:	f003 faa2 	bl	8005cac <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002768:	2320      	movs	r3, #32
 800276a:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	4619      	mov	r1, r3
 8002770:	4804      	ldr	r0, [pc, #16]	@ (8002784 <verify_adc_gpio_configuration+0x70>)
 8002772:	f003 fa9b 	bl	8005cac <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 8002776:	4804      	ldr	r0, [pc, #16]	@ (8002788 <verify_adc_gpio_configuration+0x74>)
 8002778:	f7fe fca2 	bl	80010c0 <send_bluetooth_message>
}
 800277c:	bf00      	nop
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40020000 	.word	0x40020000
 8002788:	0800d0e0 	.word	0x0800d0e0

0800278c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002794:	2110      	movs	r1, #16
 8002796:	4806      	ldr	r0, [pc, #24]	@ (80027b0 <Error_Handler+0x24>)
 8002798:	f003 fc25 	bl	8005fe6 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 800279c:	2120      	movs	r1, #32
 800279e:	4804      	ldr	r0, [pc, #16]	@ (80027b0 <Error_Handler+0x24>)
 80027a0:	f003 fc21 	bl	8005fe6 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 80027a4:	2064      	movs	r0, #100	@ 0x64
 80027a6:	f002 fcc7 	bl	8005138 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 80027aa:	bf00      	nop
 80027ac:	e7f2      	b.n	8002794 <Error_Handler+0x8>
 80027ae:	bf00      	nop
 80027b0:	40020400 	.word	0x40020400

080027b4 <queue_init>:
} BFSQueue;

static BFSQueue bfs_queue;

/* Queue Operations */
static void queue_init(BFSQueue* q) {
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    q->head = q->tail = 0;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <queue_empty>:

static int queue_empty(BFSQueue* q) {
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
    return q->head == q->tail;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 2880 	ldr.w	r2, [r3, #2176]	@ 0x880
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
 80027f0:	429a      	cmp	r2, r3
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <queue_push>:

static void queue_push(BFSQueue* q, Position pos) {
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	e883 0006 	stmia.w	r3, {r1, r2}
    if (q->tail < QUEUE_MAX_SIZE) {
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
 800281a:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 800281e:	da0e      	bge.n	800283e <queue_push+0x38>
        q->queue[q->tail++] = pos;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
 8002826:	1c59      	adds	r1, r3, #1
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	f8c2 1884 	str.w	r1, [r2, #2180]	@ 0x884
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	1d3a      	adds	r2, r7, #4
 8002836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800283a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <queue_pop>:

static Position queue_pop(BFSQueue* q) {
 800284a:	b490      	push	{r4, r7}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
    return q->queue[q->head++];
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	f8c2 1880 	str.w	r1, [r2, #2176]	@ 0x880
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	460c      	mov	r4, r1
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002870:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bc90      	pop	{r4, r7}
 800287c:	4770      	bx	lr
	...

08002880 <initialize_maze_exploration>:

/**
 * @brief Initialize maze for exploration
 */
void initialize_maze_exploration(void) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n=== INITIALIZING MAZE EXPLORATION ===\r\n");
 8002886:	485a      	ldr	r0, [pc, #360]	@ (80029f0 <initialize_maze_exploration+0x170>)
 8002888:	f7fe fc1a 	bl	80010c0 <send_bluetooth_message>

    // Initialize maze structure
    for (int x = 0; x < MAZE_SIZE; x++) {
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e03e      	b.n	8002910 <initialize_maze_exploration+0x90>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	e035      	b.n	8002904 <initialize_maze_exploration+0x84>
            maze[x][y].distance = MAX_DISTANCE;
 8002898:	4956      	ldr	r1, [pc, #344]	@ (80029f4 <initialize_maze_exploration+0x174>)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	011a      	lsls	r2, r3, #4
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4413      	add	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	440b      	add	r3, r1
 80028a6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80028aa:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 80028ac:	4951      	ldr	r1, [pc, #324]	@ (80029f4 <initialize_maze_exploration+0x174>)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	011a      	lsls	r2, r3, #4
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4413      	add	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	440b      	add	r3, r1
 80028ba:	3304      	adds	r3, #4
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 80028c0:	494c      	ldr	r1, [pc, #304]	@ (80029f4 <initialize_maze_exploration+0x174>)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	011a      	lsls	r2, r3, #4
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4413      	add	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	440b      	add	r3, r1
 80028ce:	330c      	adds	r3, #12
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

            // Initialize all walls as unknown (false)
            for (int dir = 0; dir < 4; dir++) {
 80028d4:	2300      	movs	r3, #0
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	e00e      	b.n	80028f8 <initialize_maze_exploration+0x78>
                maze[x][y].walls[dir] = false;
 80028da:	4946      	ldr	r1, [pc, #280]	@ (80029f4 <initialize_maze_exploration+0x174>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	011a      	lsls	r2, r3, #4
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4413      	add	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	18ca      	adds	r2, r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	3305      	adds	r3, #5
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
            for (int dir = 0; dir < 4; dir++) {
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3301      	adds	r3, #1
 80028f6:	607b      	str	r3, [r7, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	dded      	ble.n	80028da <initialize_maze_exploration+0x5a>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3301      	adds	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	ddc6      	ble.n	8002898 <initialize_maze_exploration+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3301      	adds	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b0f      	cmp	r3, #15
 8002914:	ddbd      	ble.n	8002892 <initialize_maze_exploration+0x12>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	e01f      	b.n	800295c <initialize_maze_exploration+0xdc>
        maze[i][0].walls[SOUTH] = true;                    // Bottom boundary
 800291c:	4a35      	ldr	r2, [pc, #212]	@ (80029f4 <initialize_maze_exploration+0x174>)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	4413      	add	r3, r2
 8002924:	3307      	adds	r3, #7
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true;          // Top boundary
 800292a:	4a32      	ldr	r2, [pc, #200]	@ (80029f4 <initialize_maze_exploration+0x174>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	4413      	add	r3, r2
 8002932:	33f5      	adds	r3, #245	@ 0xf5
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;                     // Left boundary
 8002938:	4a2e      	ldr	r2, [pc, #184]	@ (80029f4 <initialize_maze_exploration+0x174>)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	3308      	adds	r3, #8
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;           // Right boundary
 8002946:	4a2b      	ldr	r2, [pc, #172]	@ (80029f4 <initialize_maze_exploration+0x174>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	4413      	add	r3, r2
 800294e:	f603 7306 	addw	r3, r3, #3846	@ 0xf06
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b0f      	cmp	r3, #15
 8002960:	dddc      	ble.n	800291c <initialize_maze_exploration+0x9c>
    }

    // Set maze center coordinates
    maze_center_x1 = MAZE_SIZE / 2 - 1;
 8002962:	4b25      	ldr	r3, [pc, #148]	@ (80029f8 <initialize_maze_exploration+0x178>)
 8002964:	2207      	movs	r2, #7
 8002966:	601a      	str	r2, [r3, #0]
    maze_center_y1 = MAZE_SIZE / 2 - 1;
 8002968:	4b24      	ldr	r3, [pc, #144]	@ (80029fc <initialize_maze_exploration+0x17c>)
 800296a:	2207      	movs	r2, #7
 800296c:	601a      	str	r2, [r3, #0]
    maze_center_x2 = MAZE_SIZE / 2;
 800296e:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <initialize_maze_exploration+0x180>)
 8002970:	2208      	movs	r2, #8
 8002972:	601a      	str	r2, [r3, #0]
    maze_center_y2 = MAZE_SIZE / 2;
 8002974:	4b23      	ldr	r3, [pc, #140]	@ (8002a04 <initialize_maze_exploration+0x184>)
 8002976:	2208      	movs	r2, #8
 8002978:	601a      	str	r2, [r3, #0]

    // Initialize robot state
    robot.x = 0;
 800297a:	4b23      	ldr	r3, [pc, #140]	@ (8002a08 <initialize_maze_exploration+0x188>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8002980:	4b21      	ldr	r3, [pc, #132]	@ (8002a08 <initialize_maze_exploration+0x188>)
 8002982:	2200      	movs	r2, #0
 8002984:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 8002986:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <initialize_maze_exploration+0x188>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 800298c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <initialize_maze_exploration+0x188>)
 800298e:	2200      	movs	r2, #0
 8002990:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 8002992:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <initialize_maze_exploration+0x188>)
 8002994:	2200      	movs	r2, #0
 8002996:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 8002998:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <initialize_maze_exploration+0x188>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]

    // Mark starting position
    maze[0][0].visited = true;
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <initialize_maze_exploration+0x174>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 80029a4:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <initialize_maze_exploration+0x174>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	60da      	str	r2, [r3, #12]

    // Reset exploration flags
    exploration_completed = 0;
 80029aa:	4b18      	ldr	r3, [pc, #96]	@ (8002a0c <initialize_maze_exploration+0x18c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
    optimal_path_calculated = 0;
 80029b0:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <initialize_maze_exploration+0x190>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]

    send_bluetooth_printf("Maze Size: %dx%d\r\n", MAZE_SIZE, MAZE_SIZE);
 80029b6:	2210      	movs	r2, #16
 80029b8:	2110      	movs	r1, #16
 80029ba:	4816      	ldr	r0, [pc, #88]	@ (8002a14 <initialize_maze_exploration+0x194>)
 80029bc:	f7fe fb96 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Center: (%d,%d) to (%d,%d)\r\n",
 80029c0:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <initialize_maze_exploration+0x178>)
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <initialize_maze_exploration+0x17c>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <initialize_maze_exploration+0x180>)
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <initialize_maze_exploration+0x184>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	4603      	mov	r3, r0
 80029d4:	4810      	ldr	r0, [pc, #64]	@ (8002a18 <initialize_maze_exploration+0x198>)
 80029d6:	f7fe fb89 	bl	80010ec <send_bluetooth_printf>
                         maze_center_x1, maze_center_y1, maze_center_x2, maze_center_y2);
    send_bluetooth_message("Maze exploration initialized successfully!\r\n");
 80029da:	4810      	ldr	r0, [pc, #64]	@ (8002a1c <initialize_maze_exploration+0x19c>)
 80029dc:	f7fe fb70 	bl	80010c0 <send_bluetooth_message>
    send_bluetooth_message("==========================================\r\n");
 80029e0:	480f      	ldr	r0, [pc, #60]	@ (8002a20 <initialize_maze_exploration+0x1a0>)
 80029e2:	f7fe fb6d 	bl	80010c0 <send_bluetooth_message>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	0800d108 	.word	0x0800d108
 80029f4:	20000434 	.word	0x20000434
 80029f8:	2000148c 	.word	0x2000148c
 80029fc:	20001490 	.word	0x20001490
 8002a00:	20001494 	.word	0x20001494
 8002a04:	20001498 	.word	0x20001498
 8002a08:	20001434 	.word	0x20001434
 8002a0c:	2000149c 	.word	0x2000149c
 8002a10:	200014a0 	.word	0x200014a0
 8002a14:	0800d134 	.word	0x0800d134
 8002a18:	0800d148 	.word	0x0800d148
 8002a1c:	0800d168 	.word	0x0800d168
 8002a20:	0800d198 	.word	0x0800d198

08002a24 <flood_fill_algorithm>:

/**
 * @brief Flood fill algorithm implementation
 */
void flood_fill_algorithm(void) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b098      	sub	sp, #96	@ 0x60
 8002a28:	af00      	add	r7, sp, #0
    // Initialize all distances to MAX_DISTANCE
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a2e:	e015      	b.n	8002a5c <flood_fill_algorithm+0x38>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002a30:	2300      	movs	r3, #0
 8002a32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a34:	e00c      	b.n	8002a50 <flood_fill_algorithm+0x2c>
            maze[x][y].distance = MAX_DISTANCE;
 8002a36:	4984      	ldr	r1, [pc, #528]	@ (8002c48 <flood_fill_algorithm+0x224>)
 8002a38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a3a:	011a      	lsls	r2, r3, #4
 8002a3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a3e:	4413      	add	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	440b      	add	r3, r1
 8002a44:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002a48:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	ddef      	ble.n	8002a36 <flood_fill_algorithm+0x12>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a58:	3301      	adds	r3, #1
 8002a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	dde6      	ble.n	8002a30 <flood_fill_algorithm+0xc>
        }
    }

    // Initialize queue
    queue_init(&bfs_queue);
 8002a62:	487a      	ldr	r0, [pc, #488]	@ (8002c4c <flood_fill_algorithm+0x228>)
 8002a64:	f7ff fea6 	bl	80027b4 <queue_init>

    // Set goal distances and add to queue
    if (!robot.center_reached) {
 8002a68:	4b79      	ldr	r3, [pc, #484]	@ (8002c50 <flood_fill_algorithm+0x22c>)
 8002a6a:	7b1b      	ldrb	r3, [r3, #12]
 8002a6c:	f083 0301 	eor.w	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d060      	beq.n	8002b38 <flood_fill_algorithm+0x114>
        // Heading to center
        maze[maze_center_x1][maze_center_y1].distance = 0;
 8002a76:	4b77      	ldr	r3, [pc, #476]	@ (8002c54 <flood_fill_algorithm+0x230>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b77      	ldr	r3, [pc, #476]	@ (8002c58 <flood_fill_algorithm+0x234>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4972      	ldr	r1, [pc, #456]	@ (8002c48 <flood_fill_algorithm+0x224>)
 8002a80:	0112      	lsls	r2, r2, #4
 8002a82:	4413      	add	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	440b      	add	r3, r1
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
        maze[maze_center_x2][maze_center_y1].distance = 0;
 8002a8c:	4b73      	ldr	r3, [pc, #460]	@ (8002c5c <flood_fill_algorithm+0x238>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b71      	ldr	r3, [pc, #452]	@ (8002c58 <flood_fill_algorithm+0x234>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	496c      	ldr	r1, [pc, #432]	@ (8002c48 <flood_fill_algorithm+0x224>)
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	440b      	add	r3, r1
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
        maze[maze_center_x1][maze_center_y2].distance = 0;
 8002aa2:	4b6c      	ldr	r3, [pc, #432]	@ (8002c54 <flood_fill_algorithm+0x230>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c60 <flood_fill_algorithm+0x23c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4967      	ldr	r1, [pc, #412]	@ (8002c48 <flood_fill_algorithm+0x224>)
 8002aac:	0112      	lsls	r2, r2, #4
 8002aae:	4413      	add	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	440b      	add	r3, r1
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
        maze[maze_center_x2][maze_center_y2].distance = 0;
 8002ab8:	4b68      	ldr	r3, [pc, #416]	@ (8002c5c <flood_fill_algorithm+0x238>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b68      	ldr	r3, [pc, #416]	@ (8002c60 <flood_fill_algorithm+0x23c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4961      	ldr	r1, [pc, #388]	@ (8002c48 <flood_fill_algorithm+0x224>)
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	4413      	add	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	440b      	add	r3, r1
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

        queue_push(&bfs_queue, (Position){maze_center_x1, maze_center_y1});
 8002ace:	4b61      	ldr	r3, [pc, #388]	@ (8002c54 <flood_fill_algorithm+0x230>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ad4:	4b60      	ldr	r3, [pc, #384]	@ (8002c58 <flood_fill_algorithm+0x234>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ada:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ade:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ae2:	485a      	ldr	r0, [pc, #360]	@ (8002c4c <flood_fill_algorithm+0x228>)
 8002ae4:	f7ff fe8f 	bl	8002806 <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x2, maze_center_y1});
 8002ae8:	4b5c      	ldr	r3, [pc, #368]	@ (8002c5c <flood_fill_algorithm+0x238>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aee:	4b5a      	ldr	r3, [pc, #360]	@ (8002c58 <flood_fill_algorithm+0x234>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002af4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002af8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002afc:	4853      	ldr	r0, [pc, #332]	@ (8002c4c <flood_fill_algorithm+0x228>)
 8002afe:	f7ff fe82 	bl	8002806 <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x1, maze_center_y2});
 8002b02:	4b54      	ldr	r3, [pc, #336]	@ (8002c54 <flood_fill_algorithm+0x230>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b08:	4b55      	ldr	r3, [pc, #340]	@ (8002c60 <flood_fill_algorithm+0x23c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b12:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b16:	484d      	ldr	r0, [pc, #308]	@ (8002c4c <flood_fill_algorithm+0x228>)
 8002b18:	f7ff fe75 	bl	8002806 <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x2, maze_center_y2});
 8002b1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c5c <flood_fill_algorithm+0x238>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	4b4f      	ldr	r3, [pc, #316]	@ (8002c60 <flood_fill_algorithm+0x23c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	623b      	str	r3, [r7, #32]
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b30:	4846      	ldr	r0, [pc, #280]	@ (8002c4c <flood_fill_algorithm+0x228>)
 8002b32:	f7ff fe68 	bl	8002806 <queue_push>
 8002b36:	e00d      	b.n	8002b54 <flood_fill_algorithm+0x130>
    } else {
        // Returning to start
        maze[0][0].distance = 0;
 8002b38:	4b43      	ldr	r3, [pc, #268]	@ (8002c48 <flood_fill_algorithm+0x224>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
        queue_push(&bfs_queue, (Position){0, 0});
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b4e:	483f      	ldr	r0, [pc, #252]	@ (8002c4c <flood_fill_algorithm+0x228>)
 8002b50:	f7ff fe59 	bl	8002806 <queue_push>
    }

    // Flood fill propagation
    int updates = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	657b      	str	r3, [r7, #84]	@ 0x54
    while (!queue_empty(&bfs_queue)) {
 8002b58:	e068      	b.n	8002c2c <flood_fill_algorithm+0x208>
        Position current = queue_pop(&bfs_queue);
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	493b      	ldr	r1, [pc, #236]	@ (8002c4c <flood_fill_algorithm+0x228>)
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fe72 	bl	800284a <queue_pop>
        int x = current.x;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
        int y = current.y;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Check all four directions
        for (int dir = 0; dir < 4; dir++) {
 8002b6e:	2300      	movs	r3, #0
 8002b70:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b72:	e058      	b.n	8002c26 <flood_fill_algorithm+0x202>
            if (maze[x][y].walls[dir]) continue; // Wall blocks this direction
 8002b74:	4934      	ldr	r1, [pc, #208]	@ (8002c48 <flood_fill_algorithm+0x224>)
 8002b76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b78:	011a      	lsls	r2, r3, #4
 8002b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b7c:	4413      	add	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	18ca      	adds	r2, r1, r3
 8002b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b84:	4413      	add	r3, r2
 8002b86:	3305      	adds	r3, #5
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d145      	bne.n	8002c1a <flood_fill_algorithm+0x1f6>

            int nx = x + dx[dir];
 8002b8e:	4a35      	ldr	r2, [pc, #212]	@ (8002c64 <flood_fill_algorithm+0x240>)
 8002b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b98:	4413      	add	r3, r2
 8002b9a:	647b      	str	r3, [r7, #68]	@ 0x44
            int ny = y + dy[dir];
 8002b9c:	4a32      	ldr	r2, [pc, #200]	@ (8002c68 <flood_fill_algorithm+0x244>)
 8002b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ba6:	4413      	add	r3, r2
 8002ba8:	643b      	str	r3, [r7, #64]	@ 0x40

            // Check bounds
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db36      	blt.n	8002c1e <flood_fill_algorithm+0x1fa>
 8002bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb2:	2b0f      	cmp	r3, #15
 8002bb4:	dc33      	bgt.n	8002c1e <flood_fill_algorithm+0x1fa>
 8002bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	db30      	blt.n	8002c1e <flood_fill_algorithm+0x1fa>
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	dc2d      	bgt.n	8002c1e <flood_fill_algorithm+0x1fa>

            int new_distance = maze[x][y].distance + 1;
 8002bc2:	4921      	ldr	r1, [pc, #132]	@ (8002c48 <flood_fill_algorithm+0x224>)
 8002bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bc6:	011a      	lsls	r2, r3, #4
 8002bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bca:	4413      	add	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	440b      	add	r3, r1
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (new_distance < maze[nx][ny].distance) {
 8002bd6:	491c      	ldr	r1, [pc, #112]	@ (8002c48 <flood_fill_algorithm+0x224>)
 8002bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bda:	011a      	lsls	r2, r3, #4
 8002bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bde:	4413      	add	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	440b      	add	r3, r1
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002be8:	429a      	cmp	r2, r3
 8002bea:	da19      	bge.n	8002c20 <flood_fill_algorithm+0x1fc>
                maze[nx][ny].distance = new_distance;
 8002bec:	4916      	ldr	r1, [pc, #88]	@ (8002c48 <flood_fill_algorithm+0x224>)
 8002bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf0:	011a      	lsls	r2, r3, #4
 8002bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf4:	4413      	add	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	440b      	add	r3, r1
 8002bfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bfc:	601a      	str	r2, [r3, #0]
                queue_push(&bfs_queue, (Position){nx, ny});
 8002bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c0c:	480f      	ldr	r0, [pc, #60]	@ (8002c4c <flood_fill_algorithm+0x228>)
 8002c0e:	f7ff fdfa 	bl	8002806 <queue_push>
                updates++;
 8002c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c14:	3301      	adds	r3, #1
 8002c16:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c18:	e002      	b.n	8002c20 <flood_fill_algorithm+0x1fc>
            if (maze[x][y].walls[dir]) continue; // Wall blocks this direction
 8002c1a:	bf00      	nop
 8002c1c:	e000      	b.n	8002c20 <flood_fill_algorithm+0x1fc>
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002c1e:	bf00      	nop
        for (int dir = 0; dir < 4; dir++) {
 8002c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c22:	3301      	adds	r3, #1
 8002c24:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	dda3      	ble.n	8002b74 <flood_fill_algorithm+0x150>
    while (!queue_empty(&bfs_queue)) {
 8002c2c:	4807      	ldr	r0, [pc, #28]	@ (8002c4c <flood_fill_algorithm+0x228>)
 8002c2e:	f7ff fdd5 	bl	80027dc <queue_empty>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d090      	beq.n	8002b5a <flood_fill_algorithm+0x136>
            }
        }
    }

    send_bluetooth_printf("Flood fill complete: %d updates\r\n", updates);
 8002c38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c3a:	480c      	ldr	r0, [pc, #48]	@ (8002c6c <flood_fill_algorithm+0x248>)
 8002c3c:	f7fe fa56 	bl	80010ec <send_bluetooth_printf>
}
 8002c40:	bf00      	nop
 8002c42:	3760      	adds	r7, #96	@ 0x60
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000434 	.word	0x20000434
 8002c4c:	200014a4 	.word	0x200014a4
 8002c50:	20001434 	.word	0x20001434
 8002c54:	2000148c 	.word	0x2000148c
 8002c58:	20001490 	.word	0x20001490
 8002c5c:	20001494 	.word	0x20001494
 8002c60:	20001498 	.word	0x20001498
 8002c64:	0800e288 	.word	0x0800e288
 8002c68:	0800e298 	.word	0x0800e298
 8002c6c:	0800d1c8 	.word	0x0800d1c8

08002c70 <get_best_direction>:

/**
 * @brief Get best direction to move based on flood fill values
 */
int get_best_direction(void) {
 8002c70:	b480      	push	{r7}
 8002c72:	b093      	sub	sp, #76	@ 0x4c
 8002c74:	af00      	add	r7, sp, #0
    int best_dir = robot.direction;
 8002c76:	4b89      	ldr	r3, [pc, #548]	@ (8002e9c <get_best_direction+0x22c>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	647b      	str	r3, [r7, #68]	@ 0x44
    int min_distance = MAX_DISTANCE;
 8002c7c:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002c80:	643b      	str	r3, [r7, #64]	@ 0x40
    int min_visits = 999;
 8002c82:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    bool found_unvisited = false;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Direction priority: forward, right, left, backward
    int priority[4];
    priority[0] = robot.direction;                    // Forward
 8002c8e:	4b83      	ldr	r3, [pc, #524]	@ (8002e9c <get_best_direction+0x22c>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	603b      	str	r3, [r7, #0]
    priority[1] = (robot.direction + 1) % 4;         // Right
 8002c94:	4b81      	ldr	r3, [pc, #516]	@ (8002e9c <get_best_direction+0x22c>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	425a      	negs	r2, r3
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	f002 0203 	and.w	r2, r2, #3
 8002ca4:	bf58      	it	pl
 8002ca6:	4253      	negpl	r3, r2
 8002ca8:	607b      	str	r3, [r7, #4]
    priority[2] = (robot.direction + 3) % 4;         // Left
 8002caa:	4b7c      	ldr	r3, [pc, #496]	@ (8002e9c <get_best_direction+0x22c>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	3303      	adds	r3, #3
 8002cb0:	425a      	negs	r2, r3
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	f002 0203 	and.w	r2, r2, #3
 8002cba:	bf58      	it	pl
 8002cbc:	4253      	negpl	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
    priority[3] = (robot.direction + 2) % 4;         // Backward
 8002cc0:	4b76      	ldr	r3, [pc, #472]	@ (8002e9c <get_best_direction+0x22c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	425a      	negs	r2, r3
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	f002 0203 	and.w	r2, r2, #3
 8002cd0:	bf58      	it	pl
 8002cd2:	4253      	negpl	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

    // First pass: prioritize unvisited cells
    for (int p = 0; p < 4; p++) {
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cda:	e05c      	b.n	8002d96 <get_best_direction+0x126>
        int dir = priority[p];
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	3348      	adds	r3, #72	@ 0x48
 8002ce2:	443b      	add	r3, r7
 8002ce4:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002ce8:	61bb      	str	r3, [r7, #24]

        // Check if there's a wall in this direction
        if (maze[robot.x][robot.y].walls[dir]) continue;
 8002cea:	4b6c      	ldr	r3, [pc, #432]	@ (8002e9c <get_best_direction+0x22c>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b6b      	ldr	r3, [pc, #428]	@ (8002e9c <get_best_direction+0x22c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	496b      	ldr	r1, [pc, #428]	@ (8002ea0 <get_best_direction+0x230>)
 8002cf4:	0112      	lsls	r2, r2, #4
 8002cf6:	4413      	add	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	18ca      	adds	r2, r1, r3
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	3305      	adds	r3, #5
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d140      	bne.n	8002d8a <get_best_direction+0x11a>

        int nx = robot.x + dx[dir];
 8002d08:	4b64      	ldr	r3, [pc, #400]	@ (8002e9c <get_best_direction+0x22c>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4965      	ldr	r1, [pc, #404]	@ (8002ea4 <get_best_direction+0x234>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d14:	4413      	add	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
        int ny = robot.y + dy[dir];
 8002d18:	4b60      	ldr	r3, [pc, #384]	@ (8002e9c <get_best_direction+0x22c>)
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	4962      	ldr	r1, [pc, #392]	@ (8002ea8 <get_best_direction+0x238>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d24:	4413      	add	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

        // Check bounds
        if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	db2f      	blt.n	8002d8e <get_best_direction+0x11e>
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b0f      	cmp	r3, #15
 8002d32:	dc2c      	bgt.n	8002d8e <get_best_direction+0x11e>
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db29      	blt.n	8002d8e <get_best_direction+0x11e>
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	dc26      	bgt.n	8002d8e <get_best_direction+0x11e>

        // Prioritize unvisited cells
        if (maze[nx][ny].visit_count == 0) {
 8002d40:	4957      	ldr	r1, [pc, #348]	@ (8002ea0 <get_best_direction+0x230>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	011a      	lsls	r2, r3, #4
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	440b      	add	r3, r1
 8002d4e:	330c      	adds	r3, #12
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11c      	bne.n	8002d90 <get_best_direction+0x120>
            found_unvisited = true;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            if (maze[nx][ny].distance < min_distance) {
 8002d5c:	4950      	ldr	r1, [pc, #320]	@ (8002ea0 <get_best_direction+0x230>)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	011a      	lsls	r2, r3, #4
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	440b      	add	r3, r1
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	dd0e      	ble.n	8002d90 <get_best_direction+0x120>
                min_distance = maze[nx][ny].distance;
 8002d72:	494b      	ldr	r1, [pc, #300]	@ (8002ea0 <get_best_direction+0x230>)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	011a      	lsls	r2, r3, #4
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	440b      	add	r3, r1
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	643b      	str	r3, [r7, #64]	@ 0x40
                best_dir = dir;
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d88:	e002      	b.n	8002d90 <get_best_direction+0x120>
        if (maze[robot.x][robot.y].walls[dir]) continue;
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <get_best_direction+0x120>
        if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002d8e:	bf00      	nop
    for (int p = 0; p < 4; p++) {
 8002d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d92:	3301      	adds	r3, #1
 8002d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	dd9f      	ble.n	8002cdc <get_best_direction+0x6c>
            }
        }
    }

    // Second pass: if no unvisited cells, choose based on distance and visit count
    if (!found_unvisited) {
 8002d9c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002da0:	f083 0301 	eor.w	r3, r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d070      	beq.n	8002e8c <get_best_direction+0x21c>
        for (int p = 0; p < 4; p++) {
 8002daa:	2300      	movs	r3, #0
 8002dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dae:	e06a      	b.n	8002e86 <get_best_direction+0x216>
            int dir = priority[p];
 8002db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	3348      	adds	r3, #72	@ 0x48
 8002db6:	443b      	add	r3, r7
 8002db8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (maze[robot.x][robot.y].walls[dir]) continue;
 8002dbe:	4b37      	ldr	r3, [pc, #220]	@ (8002e9c <get_best_direction+0x22c>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b36      	ldr	r3, [pc, #216]	@ (8002e9c <get_best_direction+0x22c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4936      	ldr	r1, [pc, #216]	@ (8002ea0 <get_best_direction+0x230>)
 8002dc8:	0112      	lsls	r2, r2, #4
 8002dca:	4413      	add	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	18ca      	adds	r2, r1, r3
 8002dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3305      	adds	r3, #5
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d14e      	bne.n	8002e7a <get_best_direction+0x20a>

            int nx = robot.x + dx[dir];
 8002ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8002e9c <get_best_direction+0x22c>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4930      	ldr	r1, [pc, #192]	@ (8002ea4 <get_best_direction+0x234>)
 8002de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002de8:	4413      	add	r3, r2
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
            int ny = robot.y + dy[dir];
 8002dec:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <get_best_direction+0x22c>)
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	492d      	ldr	r1, [pc, #180]	@ (8002ea8 <get_best_direction+0x238>)
 8002df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002df8:	4413      	add	r3, r2
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24

            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db3d      	blt.n	8002e7e <get_best_direction+0x20e>
 8002e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e04:	2b0f      	cmp	r3, #15
 8002e06:	dc3a      	bgt.n	8002e7e <get_best_direction+0x20e>
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	db37      	blt.n	8002e7e <get_best_direction+0x20e>
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	dc34      	bgt.n	8002e7e <get_best_direction+0x20e>

            int nd = maze[nx][ny].distance;
 8002e14:	4922      	ldr	r1, [pc, #136]	@ (8002ea0 <get_best_direction+0x230>)
 8002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e18:	011a      	lsls	r2, r3, #4
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	4413      	add	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	440b      	add	r3, r1
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	623b      	str	r3, [r7, #32]
            int nv = maze[nx][ny].visit_count;
 8002e26:	491e      	ldr	r1, [pc, #120]	@ (8002ea0 <get_best_direction+0x230>)
 8002e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2a:	011a      	lsls	r2, r3, #4
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	4413      	add	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	440b      	add	r3, r1
 8002e34:	330c      	adds	r3, #12
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	61fb      	str	r3, [r7, #28]

            // Choose cell with minimum distance, then minimum visits, then prefer forward
            if (nd < min_distance ||
 8002e3a:	6a3a      	ldr	r2, [r7, #32]
 8002e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	db14      	blt.n	8002e6c <get_best_direction+0x1fc>
 8002e42:	6a3a      	ldr	r2, [r7, #32]
 8002e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d103      	bne.n	8002e52 <get_best_direction+0x1e2>
                (nd == min_distance && nv < min_visits) ||
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	db0c      	blt.n	8002e6c <get_best_direction+0x1fc>
 8002e52:	6a3a      	ldr	r2, [r7, #32]
 8002e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d112      	bne.n	8002e80 <get_best_direction+0x210>
                (nd == min_distance && nv == min_visits && dir == robot.direction)) {
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d10e      	bne.n	8002e80 <get_best_direction+0x210>
 8002e62:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <get_best_direction+0x22c>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d109      	bne.n	8002e80 <get_best_direction+0x210>
                min_distance = nd;
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	643b      	str	r3, [r7, #64]	@ 0x40
                min_visits = nv;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
                best_dir = dir;
 8002e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e78:	e002      	b.n	8002e80 <get_best_direction+0x210>
            if (maze[robot.x][robot.y].walls[dir]) continue;
 8002e7a:	bf00      	nop
 8002e7c:	e000      	b.n	8002e80 <get_best_direction+0x210>
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002e7e:	bf00      	nop
        for (int p = 0; p < 4; p++) {
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	3301      	adds	r3, #1
 8002e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	dd91      	ble.n	8002db0 <get_best_direction+0x140>
            }
        }
    }

    return best_dir;
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	374c      	adds	r7, #76	@ 0x4c
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20001434 	.word	0x20001434
 8002ea0:	20000434 	.word	0x20000434
 8002ea4:	0800e288 	.word	0x0800e288
 8002ea8:	0800e298 	.word	0x0800e298

08002eac <turn_to_direction>:

/**
 * @brief Turn robot to face the specified direction
 */
void turn_to_direction(int target_direction) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
    int current_dir = robot.direction;
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <turn_to_direction+0x84>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	60fb      	str	r3, [r7, #12]
    int turn_diff = (target_direction - current_dir + 4) % 4;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	425a      	negs	r2, r3
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	f002 0203 	and.w	r2, r2, #3
 8002ecc:	bf58      	it	pl
 8002ece:	4253      	negpl	r3, r2
 8002ed0:	60bb      	str	r3, [r7, #8]

    switch (turn_diff) {
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d823      	bhi.n	8002f20 <turn_to_direction+0x74>
 8002ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee0 <turn_to_direction+0x34>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002f21 	.word	0x08002f21
 8002ee4:	08002ef1 	.word	0x08002ef1
 8002ee8:	08002f01 	.word	0x08002f01
 8002eec:	08002f11 	.word	0x08002f11
        case 0:
            // Already facing correct direction
            break;
        case 1:
            // Turn right (90 degrees clockwise)
            send_bluetooth_message("Turning RIGHT...\r\n");
 8002ef0:	4810      	ldr	r0, [pc, #64]	@ (8002f34 <turn_to_direction+0x88>)
 8002ef2:	f7fe f8e5 	bl	80010c0 <send_bluetooth_message>
            turn_right();
 8002ef6:	f000 fca5 	bl	8003844 <turn_right>
            play_turn_beep();
 8002efa:	f7fe f8bd 	bl	8001078 <play_turn_beep>
            break;
 8002efe:	e00f      	b.n	8002f20 <turn_to_direction+0x74>
        case 2:
            // Turn around (180 degrees)
            send_bluetooth_message("Turning AROUND...\r\n");
 8002f00:	480d      	ldr	r0, [pc, #52]	@ (8002f38 <turn_to_direction+0x8c>)
 8002f02:	f7fe f8dd 	bl	80010c0 <send_bluetooth_message>
            turn_around();
 8002f06:	f000 fcb9 	bl	800387c <turn_around>
            play_turn_beep();
 8002f0a:	f7fe f8b5 	bl	8001078 <play_turn_beep>
            break;
 8002f0e:	e007      	b.n	8002f20 <turn_to_direction+0x74>
        case 3:
            // Turn left (90 degrees counter-clockwise)
            send_bluetooth_message("Turning LEFT...\r\n");
 8002f10:	480a      	ldr	r0, [pc, #40]	@ (8002f3c <turn_to_direction+0x90>)
 8002f12:	f7fe f8d5 	bl	80010c0 <send_bluetooth_message>
            turn_left();
 8002f16:	f000 fc79 	bl	800380c <turn_left>
            play_turn_beep();
 8002f1a:	f7fe f8ad 	bl	8001078 <play_turn_beep>
            break;
 8002f1e:	bf00      	nop
    }

    robot.direction = target_direction;
 8002f20:	4a03      	ldr	r2, [pc, #12]	@ (8002f30 <turn_to_direction+0x84>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6093      	str	r3, [r2, #8]
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20001434 	.word	0x20001434
 8002f34:	0800d1ec 	.word	0x0800d1ec
 8002f38:	0800d200 	.word	0x0800d200
 8002f3c:	0800d214 	.word	0x0800d214

08002f40 <move_forward_one_cell>:

/**
 * @brief Move forward one cell with precise control
 */
bool move_forward_one_cell(void) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
    send_bluetooth_printf("Moving forward from (%d,%d) to ", robot.x, robot.y);
 8002f46:	4b32      	ldr	r3, [pc, #200]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a31      	ldr	r2, [pc, #196]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002f4c:	6852      	ldr	r2, [r2, #4]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4830      	ldr	r0, [pc, #192]	@ (8003014 <move_forward_one_cell+0xd4>)
 8002f52:	f7fe f8cb 	bl	80010ec <send_bluetooth_printf>

    // Calculate new position
    int new_x = robot.x + dx[robot.direction];
 8002f56:	4b2e      	ldr	r3, [pc, #184]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	492e      	ldr	r1, [pc, #184]	@ (8003018 <move_forward_one_cell+0xd8>)
 8002f60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f64:	4413      	add	r3, r2
 8002f66:	607b      	str	r3, [r7, #4]
    int new_y = robot.y + dy[robot.direction];
 8002f68:	4b29      	ldr	r3, [pc, #164]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	4b28      	ldr	r3, [pc, #160]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	492a      	ldr	r1, [pc, #168]	@ (800301c <move_forward_one_cell+0xdc>)
 8002f72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f76:	4413      	add	r3, r2
 8002f78:	603b      	str	r3, [r7, #0]

    // Check bounds
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	db08      	blt.n	8002f92 <move_forward_one_cell+0x52>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b0f      	cmp	r3, #15
 8002f84:	dc05      	bgt.n	8002f92 <move_forward_one_cell+0x52>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db02      	blt.n	8002f92 <move_forward_one_cell+0x52>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	dd04      	ble.n	8002f9c <move_forward_one_cell+0x5c>
        send_bluetooth_message("BLOCKED - Out of bounds!\r\n");
 8002f92:	4823      	ldr	r0, [pc, #140]	@ (8003020 <move_forward_one_cell+0xe0>)
 8002f94:	f7fe f894 	bl	80010c0 <send_bluetooth_message>
        return false;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e035      	b.n	8003008 <move_forward_one_cell+0xc8>
    }

    send_bluetooth_printf("(%d,%d)\r\n", new_x, new_y);
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4820      	ldr	r0, [pc, #128]	@ (8003024 <move_forward_one_cell+0xe4>)
 8002fa2:	f7fe f8a3 	bl	80010ec <send_bluetooth_printf>

    // Reset PID controllers
    moveStraightGyroPID_Reset();
 8002fa6:	f000 fd83 	bl	8003ab0 <moveStraightGyroPID_Reset>

    // Use precise encoder-based movement
    move_forward_distance(ENCODER_COUNTS_PER_CELL);
 8002faa:	f240 50b5 	movw	r0, #1461	@ 0x5b5
 8002fae:	f000 fca7 	bl	8003900 <move_forward_distance>

    // Update robot position
    robot.x = new_x;
 8002fb2:	4a17      	ldr	r2, [pc, #92]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 8002fb8:	4a15      	ldr	r2, [pc, #84]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6053      	str	r3, [r2, #4]
    robot.exploration_steps++;
 8002fbe:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	4a12      	ldr	r2, [pc, #72]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002fc6:	6113      	str	r3, [r2, #16]

    // Mark cell as visited
    maze[robot.x][robot.y].visited = true;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b10      	ldr	r3, [pc, #64]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4915      	ldr	r1, [pc, #84]	@ (8003028 <move_forward_one_cell+0xe8>)
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	4413      	add	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	440b      	add	r3, r1
 8002fda:	3304      	adds	r3, #4
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <move_forward_one_cell+0xd0>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	480f      	ldr	r0, [pc, #60]	@ (8003028 <move_forward_one_cell+0xe8>)
 8002fea:	0111      	lsls	r1, r2, #4
 8002fec:	4419      	add	r1, r3
 8002fee:	0109      	lsls	r1, r1, #4
 8002ff0:	4401      	add	r1, r0
 8002ff2:	310c      	adds	r1, #12
 8002ff4:	6809      	ldr	r1, [r1, #0]
 8002ff6:	3101      	adds	r1, #1
 8002ff8:	480b      	ldr	r0, [pc, #44]	@ (8003028 <move_forward_one_cell+0xe8>)
 8002ffa:	0112      	lsls	r2, r2, #4
 8002ffc:	4413      	add	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	4403      	add	r3, r0
 8003002:	330c      	adds	r3, #12
 8003004:	6019      	str	r1, [r3, #0]

    return true;
 8003006:	2301      	movs	r3, #1
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20001434 	.word	0x20001434
 8003014:	0800d228 	.word	0x0800d228
 8003018:	0800e288 	.word	0x0800e288
 800301c:	0800e298 	.word	0x0800e298
 8003020:	0800d248 	.word	0x0800d248
 8003024:	0800d264 	.word	0x0800d264
 8003028:	20000434 	.word	0x20000434

0800302c <is_at_goal>:

/**
 * @brief Check if robot is at goal position
 */
bool is_at_goal(void) {
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
    if (!robot.center_reached) {
 8003030:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <is_at_goal+0x78>)
 8003032:	7b1b      	ldrb	r3, [r3, #12]
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01e      	beq.n	800307c <is_at_goal+0x50>
        // Check if at center
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 800303e:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <is_at_goal+0x78>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b19      	ldr	r3, [pc, #100]	@ (80030a8 <is_at_goal+0x7c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d005      	beq.n	8003056 <is_at_goal+0x2a>
 800304a:	4b16      	ldr	r3, [pc, #88]	@ (80030a4 <is_at_goal+0x78>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4b17      	ldr	r3, [pc, #92]	@ (80030ac <is_at_goal+0x80>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d10d      	bne.n	8003072 <is_at_goal+0x46>
                (robot.y == maze_center_y1 || robot.y == maze_center_y2));
 8003056:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <is_at_goal+0x78>)
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <is_at_goal+0x84>)
 800305c:	681b      	ldr	r3, [r3, #0]
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 800305e:	429a      	cmp	r2, r3
 8003060:	d005      	beq.n	800306e <is_at_goal+0x42>
                (robot.y == maze_center_y1 || robot.y == maze_center_y2));
 8003062:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <is_at_goal+0x78>)
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4b13      	ldr	r3, [pc, #76]	@ (80030b4 <is_at_goal+0x88>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d101      	bne.n	8003072 <is_at_goal+0x46>
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <is_at_goal+0x48>
 8003072:	2300      	movs	r3, #0
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e00d      	b.n	8003098 <is_at_goal+0x6c>
    } else {
        // Check if returned to start
        return (robot.x == 0 && robot.y == 0);
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <is_at_goal+0x78>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d105      	bne.n	8003090 <is_at_goal+0x64>
 8003084:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <is_at_goal+0x78>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <is_at_goal+0x64>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <is_at_goal+0x66>
 8003090:	2300      	movs	r3, #0
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	b2db      	uxtb	r3, r3
    }
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20001434 	.word	0x20001434
 80030a8:	2000148c 	.word	0x2000148c
 80030ac:	20001494 	.word	0x20001494
 80030b0:	20001490 	.word	0x20001490
 80030b4:	20001498 	.word	0x20001498

080030b8 <update_maze_walls>:

/**
 * @brief Update walls based on sensor readings
 */
void update_maze_walls(void) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
    // Update sensors first
    update_sensors();
 80030be:	f001 f8e5 	bl	800428c <update_sensors>

    // Update wall information based on current direction and sensor readings
    if (sensors.wall_front) {
 80030c2:	4b85      	ldr	r3, [pc, #532]	@ (80032d8 <update_maze_walls+0x220>)
 80030c4:	7a9b      	ldrb	r3, [r3, #10]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d041      	beq.n	800314e <update_maze_walls+0x96>
        maze[robot.x][robot.y].walls[robot.direction] = true;
 80030ca:	4b84      	ldr	r3, [pc, #528]	@ (80032dc <update_maze_walls+0x224>)
 80030cc:	6819      	ldr	r1, [r3, #0]
 80030ce:	4b83      	ldr	r3, [pc, #524]	@ (80032dc <update_maze_walls+0x224>)
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	4b82      	ldr	r3, [pc, #520]	@ (80032dc <update_maze_walls+0x224>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4882      	ldr	r0, [pc, #520]	@ (80032e0 <update_maze_walls+0x228>)
 80030d8:	0109      	lsls	r1, r1, #4
 80030da:	440a      	add	r2, r1
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	4402      	add	r2, r0
 80030e0:	4413      	add	r3, r2
 80030e2:	3305      	adds	r3, #5
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]

        // Update opposite wall in neighbor cell
        int nx = robot.x + dx[robot.direction];
 80030e8:	4b7c      	ldr	r3, [pc, #496]	@ (80032dc <update_maze_walls+0x224>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b7b      	ldr	r3, [pc, #492]	@ (80032dc <update_maze_walls+0x224>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	497c      	ldr	r1, [pc, #496]	@ (80032e4 <update_maze_walls+0x22c>)
 80030f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030f6:	4413      	add	r3, r2
 80030f8:	61fb      	str	r3, [r7, #28]
        int ny = robot.y + dy[robot.direction];
 80030fa:	4b78      	ldr	r3, [pc, #480]	@ (80032dc <update_maze_walls+0x224>)
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	4b77      	ldr	r3, [pc, #476]	@ (80032dc <update_maze_walls+0x224>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4979      	ldr	r1, [pc, #484]	@ (80032e8 <update_maze_walls+0x230>)
 8003104:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003108:	4413      	add	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b00      	cmp	r3, #0
 8003110:	db1d      	blt.n	800314e <update_maze_walls+0x96>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	dc1a      	bgt.n	800314e <update_maze_walls+0x96>
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db17      	blt.n	800314e <update_maze_walls+0x96>
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	dc14      	bgt.n	800314e <update_maze_walls+0x96>
            maze[nx][ny].walls[(robot.direction + 2) % 4] = true;
 8003124:	4b6d      	ldr	r3, [pc, #436]	@ (80032dc <update_maze_walls+0x224>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	3302      	adds	r3, #2
 800312a:	425a      	negs	r2, r3
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	f002 0203 	and.w	r2, r2, #3
 8003134:	bf58      	it	pl
 8003136:	4253      	negpl	r3, r2
 8003138:	4869      	ldr	r0, [pc, #420]	@ (80032e0 <update_maze_walls+0x228>)
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	0111      	lsls	r1, r2, #4
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	440a      	add	r2, r1
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	4402      	add	r2, r0
 8003146:	4413      	add	r3, r2
 8003148:	3305      	adds	r3, #5
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_left) {
 800314e:	4b62      	ldr	r3, [pc, #392]	@ (80032d8 <update_maze_walls+0x220>)
 8003150:	7adb      	ldrb	r3, [r3, #11]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d048      	beq.n	80031e8 <update_maze_walls+0x130>
        int left_dir = (robot.direction + 3) % 4;
 8003156:	4b61      	ldr	r3, [pc, #388]	@ (80032dc <update_maze_walls+0x224>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	3303      	adds	r3, #3
 800315c:	425a      	negs	r2, r3
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	f002 0203 	and.w	r2, r2, #3
 8003166:	bf58      	it	pl
 8003168:	4253      	negpl	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
        maze[robot.x][robot.y].walls[left_dir] = true;
 800316c:	4b5b      	ldr	r3, [pc, #364]	@ (80032dc <update_maze_walls+0x224>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b5a      	ldr	r3, [pc, #360]	@ (80032dc <update_maze_walls+0x224>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	495a      	ldr	r1, [pc, #360]	@ (80032e0 <update_maze_walls+0x228>)
 8003176:	0112      	lsls	r2, r2, #4
 8003178:	4413      	add	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	18ca      	adds	r2, r1, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	4413      	add	r3, r2
 8003182:	3305      	adds	r3, #5
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]

        int nx = robot.x + dx[left_dir];
 8003188:	4b54      	ldr	r3, [pc, #336]	@ (80032dc <update_maze_walls+0x224>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4955      	ldr	r1, [pc, #340]	@ (80032e4 <update_maze_walls+0x22c>)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003194:	4413      	add	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        int ny = robot.y + dy[left_dir];
 8003198:	4b50      	ldr	r3, [pc, #320]	@ (80032dc <update_maze_walls+0x224>)
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4952      	ldr	r1, [pc, #328]	@ (80032e8 <update_maze_walls+0x230>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031a4:	4413      	add	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db1c      	blt.n	80031e8 <update_maze_walls+0x130>
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b0f      	cmp	r3, #15
 80031b2:	dc19      	bgt.n	80031e8 <update_maze_walls+0x130>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	db16      	blt.n	80031e8 <update_maze_walls+0x130>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b0f      	cmp	r3, #15
 80031be:	dc13      	bgt.n	80031e8 <update_maze_walls+0x130>
            maze[nx][ny].walls[(left_dir + 2) % 4] = true;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3302      	adds	r3, #2
 80031c4:	425a      	negs	r2, r3
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	f002 0203 	and.w	r2, r2, #3
 80031ce:	bf58      	it	pl
 80031d0:	4253      	negpl	r3, r2
 80031d2:	4843      	ldr	r0, [pc, #268]	@ (80032e0 <update_maze_walls+0x228>)
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	0111      	lsls	r1, r2, #4
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	440a      	add	r2, r1
 80031dc:	0112      	lsls	r2, r2, #4
 80031de:	4402      	add	r2, r0
 80031e0:	4413      	add	r3, r2
 80031e2:	3305      	adds	r3, #5
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_right) {
 80031e8:	4b3b      	ldr	r3, [pc, #236]	@ (80032d8 <update_maze_walls+0x220>)
 80031ea:	7b1b      	ldrb	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d048      	beq.n	8003282 <update_maze_walls+0x1ca>
        int right_dir = (robot.direction + 1) % 4;
 80031f0:	4b3a      	ldr	r3, [pc, #232]	@ (80032dc <update_maze_walls+0x224>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	3301      	adds	r3, #1
 80031f6:	425a      	negs	r2, r3
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	f002 0203 	and.w	r2, r2, #3
 8003200:	bf58      	it	pl
 8003202:	4253      	negpl	r3, r2
 8003204:	60bb      	str	r3, [r7, #8]
        maze[robot.x][robot.y].walls[right_dir] = true;
 8003206:	4b35      	ldr	r3, [pc, #212]	@ (80032dc <update_maze_walls+0x224>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b34      	ldr	r3, [pc, #208]	@ (80032dc <update_maze_walls+0x224>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4934      	ldr	r1, [pc, #208]	@ (80032e0 <update_maze_walls+0x228>)
 8003210:	0112      	lsls	r2, r2, #4
 8003212:	4413      	add	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	18ca      	adds	r2, r1, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4413      	add	r3, r2
 800321c:	3305      	adds	r3, #5
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]

        int nx = robot.x + dx[right_dir];
 8003222:	4b2e      	ldr	r3, [pc, #184]	@ (80032dc <update_maze_walls+0x224>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	492f      	ldr	r1, [pc, #188]	@ (80032e4 <update_maze_walls+0x22c>)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800322e:	4413      	add	r3, r2
 8003230:	607b      	str	r3, [r7, #4]
        int ny = robot.y + dy[right_dir];
 8003232:	4b2a      	ldr	r3, [pc, #168]	@ (80032dc <update_maze_walls+0x224>)
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	492c      	ldr	r1, [pc, #176]	@ (80032e8 <update_maze_walls+0x230>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800323e:	4413      	add	r3, r2
 8003240:	603b      	str	r3, [r7, #0]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	db1c      	blt.n	8003282 <update_maze_walls+0x1ca>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b0f      	cmp	r3, #15
 800324c:	dc19      	bgt.n	8003282 <update_maze_walls+0x1ca>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db16      	blt.n	8003282 <update_maze_walls+0x1ca>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	dc13      	bgt.n	8003282 <update_maze_walls+0x1ca>
            maze[nx][ny].walls[(right_dir + 2) % 4] = true;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3302      	adds	r3, #2
 800325e:	425a      	negs	r2, r3
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	f002 0203 	and.w	r2, r2, #3
 8003268:	bf58      	it	pl
 800326a:	4253      	negpl	r3, r2
 800326c:	481c      	ldr	r0, [pc, #112]	@ (80032e0 <update_maze_walls+0x228>)
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	0111      	lsls	r1, r2, #4
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	440a      	add	r2, r1
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	4402      	add	r2, r0
 800327a:	4413      	add	r3, r2
 800327c:	3305      	adds	r3, #5
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
        }
    }

    // Send wall detection feedback
    if (sensors.wall_front || sensors.wall_left || sensors.wall_right) {
 8003282:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <update_maze_walls+0x220>)
 8003284:	7a9b      	ldrb	r3, [r3, #10]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d107      	bne.n	800329a <update_maze_walls+0x1e2>
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <update_maze_walls+0x220>)
 800328c:	7adb      	ldrb	r3, [r3, #11]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <update_maze_walls+0x1e2>
 8003292:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <update_maze_walls+0x220>)
 8003294:	7b1b      	ldrb	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d019      	beq.n	80032ce <update_maze_walls+0x216>
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s\r\n",
                             sensors.wall_front ? "Y" : "N",
 800329a:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <update_maze_walls+0x220>)
 800329c:	7a9b      	ldrb	r3, [r3, #10]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s\r\n",
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <update_maze_walls+0x1ee>
 80032a2:	4912      	ldr	r1, [pc, #72]	@ (80032ec <update_maze_walls+0x234>)
 80032a4:	e000      	b.n	80032a8 <update_maze_walls+0x1f0>
 80032a6:	4912      	ldr	r1, [pc, #72]	@ (80032f0 <update_maze_walls+0x238>)
                             sensors.wall_left ? "Y" : "N",
 80032a8:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <update_maze_walls+0x220>)
 80032aa:	7adb      	ldrb	r3, [r3, #11]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s\r\n",
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <update_maze_walls+0x1fc>
 80032b0:	4a0e      	ldr	r2, [pc, #56]	@ (80032ec <update_maze_walls+0x234>)
 80032b2:	e000      	b.n	80032b6 <update_maze_walls+0x1fe>
 80032b4:	4a0e      	ldr	r2, [pc, #56]	@ (80032f0 <update_maze_walls+0x238>)
                             sensors.wall_right ? "Y" : "N");
 80032b6:	4b08      	ldr	r3, [pc, #32]	@ (80032d8 <update_maze_walls+0x220>)
 80032b8:	7b1b      	ldrb	r3, [r3, #12]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s\r\n",
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <update_maze_walls+0x20a>
 80032be:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <update_maze_walls+0x234>)
 80032c0:	e000      	b.n	80032c4 <update_maze_walls+0x20c>
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <update_maze_walls+0x238>)
 80032c4:	480b      	ldr	r0, [pc, #44]	@ (80032f4 <update_maze_walls+0x23c>)
 80032c6:	f7fd ff11 	bl	80010ec <send_bluetooth_printf>
        play_wall_beep();
 80032ca:	f7fd fecc 	bl	8001066 <play_wall_beep>
    }
}
 80032ce:	bf00      	nop
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20001448 	.word	0x20001448
 80032dc:	20001434 	.word	0x20001434
 80032e0:	20000434 	.word	0x20000434
 80032e4:	0800e288 	.word	0x0800e288
 80032e8:	0800e298 	.word	0x0800e298
 80032ec:	0800d270 	.word	0x0800d270
 80032f0:	0800d274 	.word	0x0800d274
 80032f4:	0800d278 	.word	0x0800d278

080032f8 <explore_maze>:

/**
 * @brief Main maze exploration function
 */
void explore_maze(void) {
 80032f8:	b5b0      	push	{r4, r5, r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n🚀 STARTING MAZE EXPLORATION 🚀\r\n");
 80032fe:	485b      	ldr	r0, [pc, #364]	@ (800346c <explore_maze+0x174>)
 8003300:	f7fd fede 	bl	80010c0 <send_bluetooth_message>

    int max_steps = MAZE_SIZE * MAZE_SIZE * 3; // Safety limit
 8003304:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003308:	607b      	str	r3, [r7, #4]
    int steps = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]

    while (!is_at_goal() && steps < max_steps) {
 800330e:	e063      	b.n	80033d8 <explore_maze+0xe0>
        // Update wall information
        update_maze_walls();
 8003310:	f7ff fed2 	bl	80030b8 <update_maze_walls>

        // Run flood fill algorithm
        flood_fill_algorithm();
 8003314:	f7ff fb86 	bl	8002a24 <flood_fill_algorithm>

        // Get best direction to move
        int best_direction = get_best_direction();
 8003318:	f7ff fcaa 	bl	8002c70 <get_best_direction>
 800331c:	6038      	str	r0, [r7, #0]

        // Turn to face best direction
        turn_to_direction(best_direction);
 800331e:	6838      	ldr	r0, [r7, #0]
 8003320:	f7ff fdc4 	bl	8002eac <turn_to_direction>

        // Move forward if possible
        if (!move_forward_one_cell()) {
 8003324:	f7ff fe0c 	bl	8002f40 <move_forward_one_cell>
 8003328:	4603      	mov	r3, r0
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02b      	beq.n	800338c <explore_maze+0x94>
            send_bluetooth_message("❌ Movement failed! Trying alternative...\r\n");
 8003334:	484e      	ldr	r0, [pc, #312]	@ (8003470 <explore_maze+0x178>)
 8003336:	f7fd fec3 	bl	80010c0 <send_bluetooth_message>

            // Try alternative directions
            for (int alt_dir = 0; alt_dir < 4; alt_dir++) {
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	e020      	b.n	8003382 <explore_maze+0x8a>
                if (alt_dir != best_direction &&
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d019      	beq.n	800337c <explore_maze+0x84>
                    !maze[robot.x][robot.y].walls[alt_dir]) {
 8003348:	4b4a      	ldr	r3, [pc, #296]	@ (8003474 <explore_maze+0x17c>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b49      	ldr	r3, [pc, #292]	@ (8003474 <explore_maze+0x17c>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4949      	ldr	r1, [pc, #292]	@ (8003478 <explore_maze+0x180>)
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	4413      	add	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	18ca      	adds	r2, r1, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4413      	add	r3, r2
 800335e:	3305      	adds	r3, #5
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	f083 0301 	eor.w	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
                if (alt_dir != best_direction &&
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <explore_maze+0x84>

                    turn_to_direction(alt_dir);
 800336c:	68b8      	ldr	r0, [r7, #8]
 800336e:	f7ff fd9d 	bl	8002eac <turn_to_direction>
                    if (move_forward_one_cell()) {
 8003372:	f7ff fde5 	bl	8002f40 <move_forward_one_cell>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <explore_maze+0x92>
            for (int alt_dir = 0; alt_dir < 4; alt_dir++) {
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	3301      	adds	r3, #1
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b03      	cmp	r3, #3
 8003386:	dddb      	ble.n	8003340 <explore_maze+0x48>
 8003388:	e000      	b.n	800338c <explore_maze+0x94>
                        break;
 800338a:	bf00      	nop
                }
            }
        }

        // Send periodic status updates
        if (steps % 5 == 0) {
 800338c:	68f9      	ldr	r1, [r7, #12]
 800338e:	4b3b      	ldr	r3, [pc, #236]	@ (800347c <explore_maze+0x184>)
 8003390:	fb83 2301 	smull	r2, r3, r3, r1
 8003394:	105a      	asrs	r2, r3, #1
 8003396:	17cb      	asrs	r3, r1, #31
 8003398:	1ad2      	subs	r2, r2, r3
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	1aca      	subs	r2, r1, r3
 80033a2:	2a00      	cmp	r2, #0
 80033a4:	d112      	bne.n	80033cc <explore_maze+0xd4>
            send_bluetooth_printf("Step %d: Position (%d,%d), Direction: %s\r\n",
 80033a6:	4b33      	ldr	r3, [pc, #204]	@ (8003474 <explore_maze+0x17c>)
 80033a8:	681c      	ldr	r4, [r3, #0]
 80033aa:	4b32      	ldr	r3, [pc, #200]	@ (8003474 <explore_maze+0x17c>)
 80033ac:	685d      	ldr	r5, [r3, #4]
 80033ae:	4b31      	ldr	r3, [pc, #196]	@ (8003474 <explore_maze+0x17c>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 fdb6 	bl	8004f24 <get_direction_name>
 80033b8:	4603      	mov	r3, r0
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	462b      	mov	r3, r5
 80033be:	4622      	mov	r2, r4
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	482f      	ldr	r0, [pc, #188]	@ (8003480 <explore_maze+0x188>)
 80033c4:	f7fd fe92 	bl	80010ec <send_bluetooth_printf>
                                 steps, robot.x, robot.y, get_direction_name(robot.direction));
            send_maze_state();
 80033c8:	f7fd feb6 	bl	8001138 <send_maze_state>
        }

        steps++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]

        // Brief delay for stability
        HAL_Delay(100);
 80033d2:	2064      	movs	r0, #100	@ 0x64
 80033d4:	f001 feb0 	bl	8005138 <HAL_Delay>
    while (!is_at_goal() && steps < max_steps) {
 80033d8:	f7ff fe28 	bl	800302c <is_at_goal>
 80033dc:	4603      	mov	r3, r0
 80033de:	f083 0301 	eor.w	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <explore_maze+0xf8>
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	db8f      	blt.n	8003310 <explore_maze+0x18>
    }

    if (is_at_goal()) {
 80033f0:	f7ff fe1c 	bl	800302c <is_at_goal>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d026      	beq.n	8003448 <explore_maze+0x150>
        if (!robot.center_reached) {
 80033fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003474 <explore_maze+0x17c>)
 80033fc:	7b1b      	ldrb	r3, [r3, #12]
 80033fe:	f083 0301 	eor.w	r3, r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d011      	beq.n	800342c <explore_maze+0x134>
            robot.center_reached = true;
 8003408:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <explore_maze+0x17c>)
 800340a:	2201      	movs	r2, #1
 800340c:	731a      	strb	r2, [r3, #12]
            send_bluetooth_message("🎯 CENTER REACHED! 🎯\r\n");
 800340e:	481d      	ldr	r0, [pc, #116]	@ (8003484 <explore_maze+0x18c>)
 8003410:	f7fd fe56 	bl	80010c0 <send_bluetooth_message>
            play_success_tone();
 8003414:	f7fd fde2 	bl	8000fdc <play_success_tone>

            // Brief celebration
            led_sequence_complete();
 8003418:	f001 fd46 	bl	8004ea8 <led_sequence_complete>
            HAL_Delay(2000);
 800341c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003420:	f001 fe8a 	bl	8005138 <HAL_Delay>

            send_bluetooth_message("Now returning to start...\r\n");
 8003424:	4818      	ldr	r0, [pc, #96]	@ (8003488 <explore_maze+0x190>)
 8003426:	f7fd fe4b 	bl	80010c0 <send_bluetooth_message>
 800342a:	e015      	b.n	8003458 <explore_maze+0x160>
        } else {
            robot.returned_to_start = true;
 800342c:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <explore_maze+0x17c>)
 800342e:	2201      	movs	r2, #1
 8003430:	735a      	strb	r2, [r3, #13]
            send_bluetooth_message("🏁 RETURNED TO START! 🏁\r\n");
 8003432:	4816      	ldr	r0, [pc, #88]	@ (800348c <explore_maze+0x194>)
 8003434:	f7fd fe44 	bl	80010c0 <send_bluetooth_message>
            play_success_tone();
 8003438:	f7fd fdd0 	bl	8000fdc <play_success_tone>
            led_sequence_complete();
 800343c:	f001 fd34 	bl	8004ea8 <led_sequence_complete>
            exploration_completed = 1;
 8003440:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <explore_maze+0x198>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e007      	b.n	8003458 <explore_maze+0x160>
        }
    } else {
        send_bluetooth_printf("❌ Exploration incomplete after %d steps\r\n", max_steps);
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4812      	ldr	r0, [pc, #72]	@ (8003494 <explore_maze+0x19c>)
 800344c:	f7fd fe4e 	bl	80010ec <send_bluetooth_printf>
        play_error_tone();
 8003450:	f7fd fdf0 	bl	8001034 <play_error_tone>
        led_sequence_error();
 8003454:	f001 fd47 	bl	8004ee6 <led_sequence_error>
    }

    send_bluetooth_printf("Total exploration steps: %d\r\n", robot.exploration_steps);
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <explore_maze+0x17c>)
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	4619      	mov	r1, r3
 800345e:	480e      	ldr	r0, [pc, #56]	@ (8003498 <explore_maze+0x1a0>)
 8003460:	f7fd fe44 	bl	80010ec <send_bluetooth_printf>
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bdb0      	pop	{r4, r5, r7, pc}
 800346c:	0800d29c 	.word	0x0800d29c
 8003470:	0800d2c4 	.word	0x0800d2c4
 8003474:	20001434 	.word	0x20001434
 8003478:	20000434 	.word	0x20000434
 800347c:	66666667 	.word	0x66666667
 8003480:	0800d2f4 	.word	0x0800d2f4
 8003484:	0800d320 	.word	0x0800d320
 8003488:	0800d33c 	.word	0x0800d33c
 800348c:	0800d358 	.word	0x0800d358
 8003490:	2000149c 	.word	0x2000149c
 8003494:	0800d378 	.word	0x0800d378
 8003498:	0800d3a4 	.word	0x0800d3a4

0800349c <run_maze_exploration_sequence>:

/**
 * @brief Run complete maze exploration sequence
 */
void run_maze_exploration_sequence(void) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
    //send_bluetooth_message("\r\n" "=" * 50 "\r\n");
    send_bluetooth_message("🐭 MICROMOUSE MAZE EXPLORATION 🐭\r\n");
 80034a2:	483e      	ldr	r0, [pc, #248]	@ (800359c <run_maze_exploration_sequence+0x100>)
 80034a4:	f7fd fe0c 	bl	80010c0 <send_bluetooth_message>
    //send_bluetooth_message("=" * 50 "\r\n");

    // Phase 1: Exploration to center
    if (!robot.center_reached) {
 80034a8:	4b3d      	ldr	r3, [pc, #244]	@ (80035a0 <run_maze_exploration_sequence+0x104>)
 80034aa:	7b1b      	ldrb	r3, [r3, #12]
 80034ac:	f083 0301 	eor.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <run_maze_exploration_sequence+0x28>
        send_bluetooth_message("Phase 1: Exploring to center...\r\n");
 80034b6:	483b      	ldr	r0, [pc, #236]	@ (80035a4 <run_maze_exploration_sequence+0x108>)
 80034b8:	f7fd fe02 	bl	80010c0 <send_bluetooth_message>
        led_sequence_exploring();
 80034bc:	f001 fce4 	bl	8004e88 <led_sequence_exploring>
        explore_maze();
 80034c0:	f7ff ff1a 	bl	80032f8 <explore_maze>
    }

    // Phase 2: Return to start
    if (robot.center_reached && !robot.returned_to_start) {
 80034c4:	4b36      	ldr	r3, [pc, #216]	@ (80035a0 <run_maze_exploration_sequence+0x104>)
 80034c6:	7b1b      	ldrb	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d011      	beq.n	80034f0 <run_maze_exploration_sequence+0x54>
 80034cc:	4b34      	ldr	r3, [pc, #208]	@ (80035a0 <run_maze_exploration_sequence+0x104>)
 80034ce:	7b5b      	ldrb	r3, [r3, #13]
 80034d0:	f083 0301 	eor.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <run_maze_exploration_sequence+0x54>
        send_bluetooth_message("Phase 2: Returning to start...\r\n");
 80034da:	4833      	ldr	r0, [pc, #204]	@ (80035a8 <run_maze_exploration_sequence+0x10c>)
 80034dc:	f7fd fdf0 	bl	80010c0 <send_bluetooth_message>
        led_sequence_returning();
 80034e0:	f001 fcda 	bl	8004e98 <led_sequence_returning>
        HAL_Delay(1000);
 80034e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034e8:	f001 fe26 	bl	8005138 <HAL_Delay>
        explore_maze();
 80034ec:	f7ff ff04 	bl	80032f8 <explore_maze>
    }

    // Phase 3: Report results
    if (robot.returned_to_start) {
 80034f0:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <run_maze_exploration_sequence+0x104>)
 80034f2:	7b5b      	ldrb	r3, [r3, #13]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d04d      	beq.n	8003594 <run_maze_exploration_sequence+0xf8>
        send_bluetooth_message("\r\n" "🏆 EXPLORATION COMPLETE! 🏆" "\r\n");
 80034f8:	482c      	ldr	r0, [pc, #176]	@ (80035ac <run_maze_exploration_sequence+0x110>)
 80034fa:	f7fd fde1 	bl	80010c0 <send_bluetooth_message>
        send_performance_metrics();
 80034fe:	f7fd ff17 	bl	8001330 <send_performance_metrics>

        // Calculate exploration efficiency
        int total_cells = MAZE_SIZE * MAZE_SIZE;
 8003502:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003506:	60bb      	str	r3, [r7, #8]
        int visited_cells = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
        for (int x = 0; x < MAZE_SIZE; x++) {
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	e019      	b.n	8003546 <run_maze_exploration_sequence+0xaa>
            for (int y = 0; y < MAZE_SIZE; y++) {
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e010      	b.n	800353a <run_maze_exploration_sequence+0x9e>
                if (maze[x][y].visited) visited_cells++;
 8003518:	4925      	ldr	r1, [pc, #148]	@ (80035b0 <run_maze_exploration_sequence+0x114>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	011a      	lsls	r2, r3, #4
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4413      	add	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	440b      	add	r3, r1
 8003526:	3304      	adds	r3, #4
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <run_maze_exploration_sequence+0x98>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3301      	adds	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
            for (int y = 0; y < MAZE_SIZE; y++) {
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b0f      	cmp	r3, #15
 800353e:	ddeb      	ble.n	8003518 <run_maze_exploration_sequence+0x7c>
        for (int x = 0; x < MAZE_SIZE; x++) {
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	3301      	adds	r3, #1
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b0f      	cmp	r3, #15
 800354a:	dde2      	ble.n	8003512 <run_maze_exploration_sequence+0x76>
            }
        }

        float exploration_percentage = (float)visited_cells / total_cells * 100.0f;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003564:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80035b4 <run_maze_exploration_sequence+0x118>
 8003568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800356c:	edc7 7a01 	vstr	s15, [r7, #4]
        send_bluetooth_printf("Exploration Coverage: %d/%d cells (%.1f%%)\r\n",
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fc fff1 	bl	8000558 <__aeabi_f2d>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	e9cd 2300 	strd	r2, r3, [sp]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	6979      	ldr	r1, [r7, #20]
 8003582:	480d      	ldr	r0, [pc, #52]	@ (80035b8 <run_maze_exploration_sequence+0x11c>)
 8003584:	f7fd fdb2 	bl	80010ec <send_bluetooth_printf>
                             visited_cells, total_cells, exploration_percentage);

        // Ready for speed run (future implementation)
        send_bluetooth_message("🚀 Ready for speed run optimization! 🚀\r\n");
 8003588:	480c      	ldr	r0, [pc, #48]	@ (80035bc <run_maze_exploration_sequence+0x120>)
 800358a:	f7fd fd99 	bl	80010c0 <send_bluetooth_message>

        exploration_completed = 1;
 800358e:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <run_maze_exploration_sequence+0x124>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]
    }
}
 8003594:	bf00      	nop
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	0800d3c4 	.word	0x0800d3c4
 80035a0:	20001434 	.word	0x20001434
 80035a4:	0800d3ec 	.word	0x0800d3ec
 80035a8:	0800d410 	.word	0x0800d410
 80035ac:	0800d434 	.word	0x0800d434
 80035b0:	20000434 	.word	0x20000434
 80035b4:	42c80000 	.word	0x42c80000
 80035b8:	0800d458 	.word	0x0800d458
 80035bc:	0800d488 	.word	0x0800d488
 80035c0:	2000149c 	.word	0x2000149c

080035c4 <is_exploration_complete>:

/**
 * @brief Check if exploration is complete
 */
bool is_exploration_complete(void) {
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
    return exploration_completed;
 80035c8:	4b05      	ldr	r3, [pc, #20]	@ (80035e0 <is_exploration_complete+0x1c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	2000149c 	.word	0x2000149c

080035e4 <get_exploration_efficiency>:

/**
 * @brief Get exploration efficiency
 */
float get_exploration_efficiency(void) {
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
    if (robot.exploration_steps == 0) return 0.0f;
 80035ea:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <get_exploration_efficiency+0x8c>)
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <get_exploration_efficiency+0x14>
 80035f2:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8003674 <get_exploration_efficiency+0x90>
 80035f6:	e034      	b.n	8003662 <get_exploration_efficiency+0x7e>

    // Calculate theoretical minimum (Manhattan distance)
    int min_to_center = abs(maze_center_x1) + abs(maze_center_y1);
 80035f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003678 <get_exploration_efficiency+0x94>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003600:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003604:	4b1d      	ldr	r3, [pc, #116]	@ (800367c <get_exploration_efficiency+0x98>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	bfb8      	it	lt
 800360c:	425b      	neglt	r3, r3
 800360e:	4413      	add	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
    int min_to_start = abs(maze_center_x1 - 0) + abs(maze_center_y1 - 0);
 8003612:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <get_exploration_efficiency+0x94>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800361a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800361e:	4b17      	ldr	r3, [pc, #92]	@ (800367c <get_exploration_efficiency+0x98>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	bfb8      	it	lt
 8003626:	425b      	neglt	r3, r3
 8003628:	4413      	add	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]
    int theoretical_min = min_to_center + min_to_start;
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4413      	add	r3, r2
 8003632:	607b      	str	r3, [r7, #4]

    if (theoretical_min == 0) return 100.0f;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <get_exploration_efficiency+0x5c>
 800363a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8003680 <get_exploration_efficiency+0x9c>
 800363e:	e010      	b.n	8003662 <get_exploration_efficiency+0x7e>

    return ((float)theoretical_min / robot.exploration_steps) * 100.0f;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <get_exploration_efficiency+0x8c>)
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003680 <get_exploration_efficiency+0x9c>
 800365e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003662:	eeb0 0a67 	vmov.f32	s0, s15
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	20001434 	.word	0x20001434
 8003674:	00000000 	.word	0x00000000
 8003678:	2000148c 	.word	0x2000148c
 800367c:	20001490 	.word	0x20001490
 8003680:	42c80000 	.word	0x42c80000

08003684 <get_optimal_distance>:

/**
 * @brief Get optimal distance for current maze knowledge
 */
int get_optimal_distance(void) {
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
    // This would implement A* or similar for optimal path calculation
    // For now, return the flood fill distance to center
    return maze[0][0].distance;
 8003688:	4b03      	ldr	r3, [pc, #12]	@ (8003698 <get_optimal_distance+0x14>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000434 	.word	0x20000434

0800369c <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 80036a2:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <update_encoder_totals+0x6c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 80036aa:	4b18      	ldr	r3, [pc, #96]	@ (800370c <update_encoder_totals+0x70>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 80036b2:	4b17      	ldr	r3, [pc, #92]	@ (8003710 <update_encoder_totals+0x74>)
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <update_encoder_totals+0x78>)
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	88ba      	ldrh	r2, [r7, #4]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    right_diff = -right_diff;  // Make left encoder positive for forward movement
 80036ca:	883b      	ldrh	r3, [r7, #0]
 80036cc:	425b      	negs	r3, r3
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	803b      	strh	r3, [r7, #0]

    // Update totals
    left_total += left_diff;
 80036d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80036d6:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <update_encoder_totals+0x7c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003718 <update_encoder_totals+0x7c>)
 80036de:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 80036e0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80036e4:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <update_encoder_totals+0x80>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	4a0c      	ldr	r2, [pc, #48]	@ (800371c <update_encoder_totals+0x80>)
 80036ec:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 80036ee:	4a08      	ldr	r2, [pc, #32]	@ (8003710 <update_encoder_totals+0x74>)
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 80036f4:	4a07      	ldr	r2, [pc, #28]	@ (8003714 <update_encoder_totals+0x78>)
 80036f6:	88bb      	ldrh	r3, [r7, #4]
 80036f8:	8013      	strh	r3, [r2, #0]
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000314 	.word	0x20000314
 800370c:	200003a4 	.word	0x200003a4
 8003710:	20000000 	.word	0x20000000
 8003714:	20000002 	.word	0x20000002
 8003718:	20001d2c 	.word	0x20001d2c
 800371c:	20001d30 	.word	0x20001d30

08003720 <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8003724:	f7ff ffba 	bl	800369c <update_encoder_totals>
    return left_total;
 8003728:	4b01      	ldr	r3, [pc, #4]	@ (8003730 <get_left_encoder_total+0x10>)
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20001d2c 	.word	0x20001d2c

08003734 <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8003738:	f7ff ffb0 	bl	800369c <update_encoder_totals>
    return right_total;
 800373c:	4b01      	ldr	r3, [pc, #4]	@ (8003744 <get_right_encoder_total+0x10>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20001d30 	.word	0x20001d30

08003748 <reset_encoder_totals>:

/**
 * @brief Reset encoder totals - NEW FUNCTION
 */
void reset_encoder_totals(void) {
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
    left_total = 0;
 800374c:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <reset_encoder_totals+0x34>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8003752:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <reset_encoder_totals+0x38>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    last_left_count = __HAL_TIM_GET_COUNTER(&htim2);
 8003758:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <reset_encoder_totals+0x3c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	b29a      	uxth	r2, r3
 8003760:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <reset_encoder_totals+0x40>)
 8003762:	801a      	strh	r2, [r3, #0]
    last_right_count = __HAL_TIM_GET_COUNTER(&htim4);
 8003764:	4b09      	ldr	r3, [pc, #36]	@ (800378c <reset_encoder_totals+0x44>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	b29a      	uxth	r2, r3
 800376c:	4b08      	ldr	r3, [pc, #32]	@ (8003790 <reset_encoder_totals+0x48>)
 800376e:	801a      	strh	r2, [r3, #0]
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20001d2c 	.word	0x20001d2c
 8003780:	20001d30 	.word	0x20001d30
 8003784:	20000314 	.word	0x20000314
 8003788:	20000000 	.word	0x20000000
 800378c:	200003a4 	.word	0x200003a4
 8003790:	20000002 	.word	0x20000002

08003794 <start_encoders>:

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 8003798:	213c      	movs	r1, #60	@ 0x3c
 800379a:	4815      	ldr	r0, [pc, #84]	@ (80037f0 <start_encoders+0x5c>)
 800379c:	f004 f8e2 	bl	8007964 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 80037a0:	213c      	movs	r1, #60	@ 0x3c
 80037a2:	4814      	ldr	r0, [pc, #80]	@ (80037f4 <start_encoders+0x60>)
 80037a4:	f004 f8de 	bl	8007964 <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 80037a8:	4b11      	ldr	r3, [pc, #68]	@ (80037f0 <start_encoders+0x5c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037b0:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 80037b2:	4b10      	ldr	r3, [pc, #64]	@ (80037f4 <start_encoders+0x60>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037ba:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 80037bc:	2001      	movs	r0, #1
 80037be:	f001 fcbb 	bl	8005138 <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <start_encoders+0x64>)
 80037c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037c8:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 80037ca:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <start_encoders+0x68>)
 80037cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037d0:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <start_encoders+0x6c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
    right_total = 0;
 80037d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <start_encoders+0x70>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 80037de:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <start_encoders+0x74>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 80037e4:	4b08      	ldr	r3, [pc, #32]	@ (8003808 <start_encoders+0x74>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	200003a4 	.word	0x200003a4
 80037f4:	20000314 	.word	0x20000314
 80037f8:	20000000 	.word	0x20000000
 80037fc:	20000002 	.word	0x20000002
 8003800:	20001d2c 	.word	0x20001d2c
 8003804:	20001d30 	.word	0x20001d30
 8003808:	2000146c 	.word	0x2000146c

0800380c <turn_left>:




void turn_left(void) {
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
    // turn 90 degrees left using gyro PID, 1200 ms timeout for safety
    turn_in_place_gyro(+90.0f, 520, 1200);
 8003810:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003814:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003818:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800383c <turn_left+0x30>
 800381c:	f000 fb54 	bl	8003ec8 <turn_in_place_gyro>
    robot.direction = (robot.direction + 3) % 4;
 8003820:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <turn_left+0x34>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	3303      	adds	r3, #3
 8003826:	425a      	negs	r2, r3
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	f002 0203 	and.w	r2, r2, #3
 8003830:	bf58      	it	pl
 8003832:	4253      	negpl	r3, r2
 8003834:	4a02      	ldr	r2, [pc, #8]	@ (8003840 <turn_left+0x34>)
 8003836:	6093      	str	r3, [r2, #8]
}
 8003838:	bf00      	nop
 800383a:	bd80      	pop	{r7, pc}
 800383c:	42b40000 	.word	0x42b40000
 8003840:	20001434 	.word	0x20001434

08003844 <turn_right>:

void turn_right(void) {
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
    turn_in_place_gyro(-90.0f, 520, 1200);
 8003848:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 800384c:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003850:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003874 <turn_right+0x30>
 8003854:	f000 fb38 	bl	8003ec8 <turn_in_place_gyro>
    robot.direction = (robot.direction + 1) % 4;
 8003858:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <turn_right+0x34>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	3301      	adds	r3, #1
 800385e:	425a      	negs	r2, r3
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	f002 0203 	and.w	r2, r2, #3
 8003868:	bf58      	it	pl
 800386a:	4253      	negpl	r3, r2
 800386c:	4a02      	ldr	r2, [pc, #8]	@ (8003878 <turn_right+0x34>)
 800386e:	6093      	str	r3, [r2, #8]
}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}
 8003874:	c2b40000 	.word	0xc2b40000
 8003878:	20001434 	.word	0x20001434

0800387c <turn_around>:

/**
 * @brief Turn around 180 degrees
 */
void turn_around(void) {
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
    turn_right();
 8003880:	f7ff ffe0 	bl	8003844 <turn_right>
    turn_right();
 8003884:	f7ff ffde 	bl	8003844 <turn_right>
}
 8003888:	bf00      	nop
 800388a:	bd80      	pop	{r7, pc}

0800388c <stop_motors>:

/**
 * @brief Stop both motors
 */
void stop_motors(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // Left motor PWM = 0
 8003890:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <stop_motors+0x30>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2200      	movs	r2, #0
 8003896:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // Left motor direction = 0
 8003898:	4b08      	ldr	r3, [pc, #32]	@ (80038bc <stop_motors+0x30>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2200      	movs	r2, #0
 800389e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);  // Right motor PWM = 0
 80038a0:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <stop_motors+0x30>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2200      	movs	r2, #0
 80038a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);  // Right motor direction = 0
 80038a8:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <stop_motors+0x30>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	2000035c 	.word	0x2000035c

080038c0 <break_motors>:
void break_motors(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
    // Apply active braking by setting both inputs HIGH for each motor
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);  // Left IN1 = HIGH
 80038c4:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <break_motors+0x3c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038cc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);  // Left IN2 = HIGH
 80038ce:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <break_motors+0x3c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038d6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);  // Right IN3 = HIGH
 80038d8:	4b08      	ldr	r3, [pc, #32]	@ (80038fc <break_motors+0x3c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038e0:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);  // Right IN4 = HIGH
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <break_motors+0x3c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038ea:	641a      	str	r2, [r3, #64]	@ 0x40

    HAL_Delay(200);  // Hold brake briefly
 80038ec:	20c8      	movs	r0, #200	@ 0xc8
 80038ee:	f001 fc23 	bl	8005138 <HAL_Delay>
    stop_motors();   // Then coast
 80038f2:	f7ff ffcb 	bl	800388c <stop_motors>
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	2000035c 	.word	0x2000035c

08003900 <move_forward_distance>:


/**
 * @brief Move forward a specific distance - FIXED VERSION
 */
void move_forward_distance(int target_counts) {		// CHECK////////////////////////////////////////
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	@ 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

    // FIXED: Use safe encoder reading
	reset_encoder_totals();
 8003908:	f7ff ff1e 	bl	8003748 <reset_encoder_totals>
    int32_t start_left = get_left_encoder_total();
 800390c:	f7ff ff08 	bl	8003720 <get_left_encoder_total>
 8003910:	6278      	str	r0, [r7, #36]	@ 0x24
    int32_t start_right = get_right_encoder_total();
 8003912:	f7ff ff0f 	bl	8003734 <get_right_encoder_total>
 8003916:	6238      	str	r0, [r7, #32]


    while (1) {
    	mpu9250_read_gyro();
 8003918:	f7fd ffa2 	bl	8001860 <mpu9250_read_gyro>
    	moveStraightGyroPID();
 800391c:	f000 f8e6 	bl	8003aec <moveStraightGyroPID>


        int32_t current_left = get_left_encoder_total();
 8003920:	f7ff fefe 	bl	8003720 <get_left_encoder_total>
 8003924:	61f8      	str	r0, [r7, #28]
        int32_t current_right = get_right_encoder_total();
 8003926:	f7ff ff05 	bl	8003734 <get_right_encoder_total>
 800392a:	61b8      	str	r0, [r7, #24]
        int32_t left_traveled = current_left - start_left;
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	617b      	str	r3, [r7, #20]
        int32_t right_traveled = current_right - start_right;
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	613b      	str	r3, [r7, #16]
        int32_t avg_traveled = (left_traveled + right_traveled) / 2;
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	0fda      	lsrs	r2, r3, #31
 8003944:	4413      	add	r3, r2
 8003946:	105b      	asrs	r3, r3, #1
 8003948:	60fb      	str	r3, [r7, #12]

        send_bluetooth_printf("L:%ld R:%ld\r\n",current_left,current_right);
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	69f9      	ldr	r1, [r7, #28]
 800394e:	4809      	ldr	r0, [pc, #36]	@ (8003974 <move_forward_distance+0x74>)
 8003950:	f7fd fbcc 	bl	80010ec <send_bluetooth_printf>

        if (avg_traveled >= target_counts) {
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	da03      	bge.n	8003964 <move_forward_distance+0x64>
            break;
        }
        HAL_Delay(1);
 800395c:	2001      	movs	r0, #1
 800395e:	f001 fbeb 	bl	8005138 <HAL_Delay>
    while (1) {
 8003962:	e7d9      	b.n	8003918 <move_forward_distance+0x18>
            break;
 8003964:	bf00      	nop
    }

    break_motors();		// use a S-curve to apply break/////////////////////
 8003966:	f7ff ffab 	bl	80038c0 <break_motors>
}
 800396a:	bf00      	nop
 800396c:	3728      	adds	r7, #40	@ 0x28
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	0800d4b8 	.word	0x0800d4b8

08003978 <motor_set>:



// helper to set speed (0–1000 = 0–100%)
// Fixed motor_set function for DRV8833
void motor_set(uint8_t motor, bool forward, uint16_t duty) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
 8003982:	460b      	mov	r3, r1
 8003984:	71bb      	strb	r3, [r7, #6]
 8003986:	4613      	mov	r3, r2
 8003988:	80bb      	strh	r3, [r7, #4]
    if (motor == 0) { // Left motor
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d115      	bne.n	80039bc <motor_set+0x44>
        if (forward) {
 8003990:	79bb      	ldrb	r3, [r7, #6]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <motor_set+0x32>
			// Left reverse: IN1=LOW, IN2=PWM
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty); // PA7 = PWM
 8003996:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <motor_set+0x94>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	88ba      	ldrh	r2, [r7, #4]
 800399c:	639a      	str	r2, [r3, #56]	@ 0x38
        	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET); // PA6 = LOW
 800399e:	2200      	movs	r2, #0
 80039a0:	2140      	movs	r1, #64	@ 0x40
 80039a2:	481b      	ldr	r0, [pc, #108]	@ (8003a10 <motor_set+0x98>)
 80039a4:	f002 fb06 	bl	8005fb4 <HAL_GPIO_WritePin>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM

        }
    }
}
 80039a8:	e02b      	b.n	8003a02 <motor_set+0x8a>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty); // PA6 = PWM
 80039aa:	4b18      	ldr	r3, [pc, #96]	@ (8003a0c <motor_set+0x94>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	88ba      	ldrh	r2, [r7, #4]
 80039b0:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // PA7 = LOW
 80039b2:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <motor_set+0x94>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2200      	movs	r2, #0
 80039b8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80039ba:	e022      	b.n	8003a02 <motor_set+0x8a>
    	bool actual_forward = !forward;  // invert direction
 80039bc:	79bb      	ldrb	r3, [r7, #6]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bf14      	ite	ne
 80039c2:	2301      	movne	r3, #1
 80039c4:	2300      	moveq	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f083 0301 	eor.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	73fb      	strb	r3, [r7, #15]
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
        if (actual_forward) {
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <motor_set+0x7a>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty); // PB1 = PWM
 80039de:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <motor_set+0x94>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	88ba      	ldrh	r2, [r7, #4]
 80039e4:	641a      	str	r2, [r3, #64]	@ 0x40
        	HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_RESET); // PB0 = LOW
 80039e6:	2200      	movs	r2, #0
 80039e8:	2101      	movs	r1, #1
 80039ea:	480a      	ldr	r0, [pc, #40]	@ (8003a14 <motor_set+0x9c>)
 80039ec:	f002 fae2 	bl	8005fb4 <HAL_GPIO_WritePin>
}
 80039f0:	e007      	b.n	8003a02 <motor_set+0x8a>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
 80039f2:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <motor_set+0x94>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM
 80039fa:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <motor_set+0x94>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	88ba      	ldrh	r2, [r7, #4]
 8003a00:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2000035c 	.word	0x2000035c
 8003a10:	40020000 	.word	0x40020000
 8003a14:	40020400 	.word	0x40020400

08003a18 <send_encoder_status>:


/**
 * @brief Get encoder status for debugging - NEW FUNCTION
 */
void send_encoder_status(void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af02      	add	r7, sp, #8
    update_encoder_totals();
 8003a1e:	f7ff fe3d 	bl	800369c <update_encoder_totals>
    send_bluetooth_printf("Encoders - Left:%ld Right:%ld Raw_L:%d Raw_R:%d\r\n",
 8003a22:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <send_encoder_status+0x30>)
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <send_encoder_status+0x34>)
 8003a28:	681a      	ldr	r2, [r3, #0]
                         left_total, right_total,
                         __HAL_TIM_GET_COUNTER(&htim2), __HAL_TIM_GET_COUNTER(&htim4));
 8003a2a:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <send_encoder_status+0x38>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003a30:	4b08      	ldr	r3, [pc, #32]	@ (8003a54 <send_encoder_status+0x3c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    send_bluetooth_printf("Encoders - Left:%ld Right:%ld Raw_L:%d Raw_R:%d\r\n",
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4807      	ldr	r0, [pc, #28]	@ (8003a58 <send_encoder_status+0x40>)
 8003a3c:	f7fd fb56 	bl	80010ec <send_bluetooth_printf>
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20001d2c 	.word	0x20001d2c
 8003a4c:	20001d30 	.word	0x20001d30
 8003a50:	20000314 	.word	0x20000314
 8003a54:	200003a4 	.word	0x200003a4
 8003a58:	0800d56c 	.word	0x0800d56c

08003a5c <clampf_local>:
static const int PWM_MIN = 0;
static const int PWM_MAX = 700;
static const int PWM_MIN_MOVE = 40;                // optional min to overcome stiction

/* Helper clamp */
static inline float clampf_local(float v, float lo, float hi) {
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a66:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a6a:	ed87 1a01 	vstr	s2, [r7, #4]
    return (v < lo) ? lo : (v > hi) ? hi : v;
 8003a6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	d501      	bpl.n	8003a84 <clampf_local+0x28>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	e00b      	b.n	8003a9c <clampf_local+0x40>
 8003a84:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	dd01      	ble.n	8003a9a <clampf_local+0x3e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	e000      	b.n	8003a9c <clampf_local+0x40>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	ee07 3a90 	vmov	s15, r3
}
 8003aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <moveStraightGyroPID_Reset>:




/* Call this once immediately before starting a straight movement */
void moveStraightGyroPID_Reset(void) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
    pid_error_prev = 0.0f;
 8003ab4:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <moveStraightGyroPID_Reset+0x2c>)
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
    pid_integral = 0.0f;
 8003abc:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <moveStraightGyroPID_Reset+0x30>)
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
    pid_deriv_filt = 0.0f;
 8003ac4:	4b07      	ldr	r3, [pc, #28]	@ (8003ae4 <moveStraightGyroPID_Reset+0x34>)
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
    pid_last_ms = HAL_GetTick();
 8003acc:	f001 fb28 	bl	8005120 <HAL_GetTick>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4a05      	ldr	r2, [pc, #20]	@ (8003ae8 <moveStraightGyroPID_Reset+0x38>)
 8003ad4:	6013      	str	r3, [r2, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20001d3c 	.word	0x20001d3c
 8003ae0:	20001d40 	.word	0x20001d40
 8003ae4:	20001d44 	.word	0x20001d44
 8003ae8:	20001d34 	.word	0x20001d34

08003aec <moveStraightGyroPID>:

void moveStraightGyroPID(void) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8003af2:	f001 fb15 	bl	8005120 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]
    float dt = (now - pid_last_ms) / 1000.0f;
 8003af8:	4b6c      	ldr	r3, [pc, #432]	@ (8003cac <moveStraightGyroPID+0x1c0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	ee07 3a90 	vmov	s15, r3
 8003b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b08:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8003cb0 <moveStraightGyroPID+0x1c4>
 8003b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b10:	edc7 7a07 	vstr	s15, [r7, #28]
    if (dt <= 0.0f) dt = 0.001f; // safety small dt if HAL tick didn't advance
 8003b14:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b20:	d801      	bhi.n	8003b26 <moveStraightGyroPID+0x3a>
 8003b22:	4b64      	ldr	r3, [pc, #400]	@ (8003cb4 <moveStraightGyroPID+0x1c8>)
 8003b24:	61fb      	str	r3, [r7, #28]
    pid_last_ms = now;
 8003b26:	4a61      	ldr	r2, [pc, #388]	@ (8003cac <moveStraightGyroPID+0x1c0>)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	6013      	str	r3, [r2, #0]

    /* READ: your gyro rate (deg/s). Keep original sign convention:
       original code used error_g = mpu9250_get_gyro_z_compensated();
       and motor1 = base - correction; motor2 = base + correction;
       so we preserve that mapping for compatibility. */
    float error = mpu9250_get_gyro_z_compensated();
 8003b2c:	f7fd fe5e 	bl	80017ec <mpu9250_get_gyro_z_compensated>
 8003b30:	ed87 0a03 	vstr	s0, [r7, #12]

    /* Integral (with dt) + anti-windup clamp */
    pid_integral += error * dt;
 8003b34:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b38:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b40:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb8 <moveStraightGyroPID+0x1cc>)
 8003b42:	edd3 7a00 	vldr	s15, [r3]
 8003b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cb8 <moveStraightGyroPID+0x1cc>)
 8003b4c:	edc3 7a00 	vstr	s15, [r3]
    pid_integral = clampf_local(pid_integral, -INTEGRAL_LIMIT, INTEGRAL_LIMIT);
 8003b50:	4b59      	ldr	r3, [pc, #356]	@ (8003cb8 <moveStraightGyroPID+0x1cc>)
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003cbc <moveStraightGyroPID+0x1d0>
 8003b5a:	eeb1 7a47 	vneg.f32	s14, s14
 8003b5e:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8003cbc <moveStraightGyroPID+0x1d0>
 8003b62:	eeb0 1a66 	vmov.f32	s2, s13
 8003b66:	eef0 0a47 	vmov.f32	s1, s14
 8003b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6e:	f7ff ff75 	bl	8003a5c <clampf_local>
 8003b72:	eef0 7a40 	vmov.f32	s15, s0
 8003b76:	4b50      	ldr	r3, [pc, #320]	@ (8003cb8 <moveStraightGyroPID+0x1cc>)
 8003b78:	edc3 7a00 	vstr	s15, [r3]

    /* Derivative (on error) and low-pass filter */
    float deriv_raw = (error - pid_error_prev) / dt;    // d(error)/dt
 8003b7c:	4b50      	ldr	r3, [pc, #320]	@ (8003cc0 <moveStraightGyroPID+0x1d4>)
 8003b7e:	edd3 7a00 	vldr	s15, [r3]
 8003b82:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b92:	edc7 7a02 	vstr	s15, [r7, #8]
    pid_deriv_filt = DERIV_FILTER_ALPHA * pid_deriv_filt + (1.0f - DERIV_FILTER_ALPHA) * deriv_raw;
 8003b96:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003cc4 <moveStraightGyroPID+0x1d8>
 8003b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003cc8 <moveStraightGyroPID+0x1dc>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8003cc4 <moveStraightGyroPID+0x1d8>
 8003ba8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003bb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bbc:	4b42      	ldr	r3, [pc, #264]	@ (8003cc8 <moveStraightGyroPID+0x1dc>)
 8003bbe:	edc3 7a00 	vstr	s15, [r3]

    /* PID output (correction) */
    float correction = (Kp_g * error) + (Ki_g * pid_integral) + (Kd_g * pid_deriv_filt);
 8003bc2:	4b42      	ldr	r3, [pc, #264]	@ (8003ccc <moveStraightGyroPID+0x1e0>)
 8003bc4:	ed93 7a00 	vldr	s14, [r3]
 8003bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd0 <moveStraightGyroPID+0x1e4>)
 8003bd2:	edd3 6a00 	vldr	s13, [r3]
 8003bd6:	4b38      	ldr	r3, [pc, #224]	@ (8003cb8 <moveStraightGyroPID+0x1cc>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be4:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd4 <moveStraightGyroPID+0x1e8>)
 8003be6:	edd3 6a00 	vldr	s13, [r3]
 8003bea:	4b37      	ldr	r3, [pc, #220]	@ (8003cc8 <moveStraightGyroPID+0x1dc>)
 8003bec:	edd3 7a00 	vldr	s15, [r3]
 8003bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf8:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Base PWM for forward motion (adjust to your nominal cruising PWM) */
    const int base_pwm = 700;
 8003bfc:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8003c00:	603b      	str	r3, [r7, #0]

    int motor1Speed = (int)roundf((float)base_pwm - correction); // right wheel in your mapping
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	ee07 3a90 	vmov	s15, r3
 8003c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c14:	eeb0 0a67 	vmov.f32	s0, s15
 8003c18:	f008 fc8e 	bl	800c538 <roundf>
 8003c1c:	eef0 7a40 	vmov.f32	s15, s0
 8003c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c24:	ee17 3a90 	vmov	r3, s15
 8003c28:	61bb      	str	r3, [r7, #24]
    int motor2Speed = (int)roundf((float)base_pwm + correction); // left wheel
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c40:	f008 fc7a 	bl	800c538 <roundf>
 8003c44:	eef0 7a40 	vmov.f32	s15, s0
 8003c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c4c:	ee17 3a90 	vmov	r3, s15
 8003c50:	617b      	str	r3, [r7, #20]

    /* Clamp PWM outputs (and provide a safe top, not full 1000 if you prefer) */
    if (motor1Speed > 800) motor1Speed = 800;
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003c58:	dd02      	ble.n	8003c60 <moveStraightGyroPID+0x174>
 8003c5a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003c5e:	61bb      	str	r3, [r7, #24]
    if (motor2Speed > 800) motor2Speed = 800;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003c66:	dd02      	ble.n	8003c6e <moveStraightGyroPID+0x182>
 8003c68:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003c6c:	617b      	str	r3, [r7, #20]
    if (motor1Speed < 0) motor1Speed = 0;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	da01      	bge.n	8003c78 <moveStraightGyroPID+0x18c>
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
    if (motor2Speed < 0) motor2Speed = 0;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da01      	bge.n	8003c82 <moveStraightGyroPID+0x196>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]



    /* Set motors: adjust direction flags if your wiring uses opposite logic */
    motor_set(0, true, motor2Speed); // Left
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	2101      	movs	r1, #1
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f7ff fe74 	bl	8003978 <motor_set>
    motor_set(1, true, motor1Speed); // Right
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	2101      	movs	r1, #1
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f7ff fe6d 	bl	8003978 <motor_set>

    /* store previous error for next derivative computation */
    pid_error_prev = error;
 8003c9e:	4a08      	ldr	r2, [pc, #32]	@ (8003cc0 <moveStraightGyroPID+0x1d4>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20001d34 	.word	0x20001d34
 8003cb0:	447a0000 	.word	0x447a0000
 8003cb4:	3a83126f 	.word	0x3a83126f
 8003cb8:	20001d40 	.word	0x20001d40
 8003cbc:	44fa0000 	.word	0x44fa0000
 8003cc0:	20001d3c 	.word	0x20001d3c
 8003cc4:	3f59999a 	.word	0x3f59999a
 8003cc8:	20001d44 	.word	0x20001d44
 8003ccc:	20000004 	.word	0x20000004
 8003cd0:	20000008 	.word	0x20000008
 8003cd4:	20001d38 	.word	0x20001d38

08003cd8 <signf>:
static const float INTEGRAL_CLAMP = 1000.0f;

// --- PID state ---
static float pid_int = 0.0f, pid_prev_err = 0.0f, pid_deriv_f = 0.0f;

static inline float signf(float x) { return (x >= 0.0f) ? 1.0f : -1.0f; }
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cee:	db02      	blt.n	8003cf6 <signf+0x1e>
 8003cf0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003cf4:	e000      	b.n	8003cf8 <signf+0x20>
 8003cf6:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <signf+0x34>)
 8003cf8:	ee07 3a90 	vmov	s15, r3
 8003cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	bf800000 	.word	0xbf800000

08003d10 <gyro_turn_reset>:

static void gyro_turn_reset(void) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
    pid_int = 0.0f;
 8003d14:	4b09      	ldr	r3, [pc, #36]	@ (8003d3c <gyro_turn_reset+0x2c>)
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
    pid_prev_err = 0.0f;
 8003d1c:	4b08      	ldr	r3, [pc, #32]	@ (8003d40 <gyro_turn_reset+0x30>)
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
    pid_deriv_f = 0.0f;
 8003d24:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <gyro_turn_reset+0x34>)
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
    pid_last_ms = HAL_GetTick();
 8003d2c:	f001 f9f8 	bl	8005120 <HAL_GetTick>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4a05      	ldr	r2, [pc, #20]	@ (8003d48 <gyro_turn_reset+0x38>)
 8003d34:	6013      	str	r3, [r2, #0]
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20001d48 	.word	0x20001d48
 8003d40:	20001d4c 	.word	0x20001d4c
 8003d44:	20001d50 	.word	0x20001d50
 8003d48:	20001d34 	.word	0x20001d34

08003d4c <gyro_rate_pid_step>:

static float gyro_rate_pid_step(float sp_dps, float meas_dps, float *p_dt) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d56:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d5a:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8003d5c:	f001 f9e0 	bl	8005120 <HAL_GetTick>
 8003d60:	61b8      	str	r0, [r7, #24]
    float dt = (now - pid_last_ms) / 1000.0f;
 8003d62:	4b4e      	ldr	r3, [pc, #312]	@ (8003e9c <gyro_rate_pid_step+0x150>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d72:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003ea0 <gyro_rate_pid_step+0x154>
 8003d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d7a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (dt <= 0.0f) dt = 0.002f;
 8003d7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8a:	d801      	bhi.n	8003d90 <gyro_rate_pid_step+0x44>
 8003d8c:	4b45      	ldr	r3, [pc, #276]	@ (8003ea4 <gyro_rate_pid_step+0x158>)
 8003d8e:	61fb      	str	r3, [r7, #28]
    pid_last_ms = now;
 8003d90:	4a42      	ldr	r2, [pc, #264]	@ (8003e9c <gyro_rate_pid_step+0x150>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	6013      	str	r3, [r2, #0]
    if (p_dt) *p_dt = dt;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <gyro_rate_pid_step+0x56>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	601a      	str	r2, [r3, #0]

    float err = sp_dps - meas_dps;
 8003da2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003da6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dae:	edc7 7a05 	vstr	s15, [r7, #20]

    // integral (anti-windup)
    pid_int += err * dt;
 8003db2:	ed97 7a05 	vldr	s14, [r7, #20]
 8003db6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea8 <gyro_rate_pid_step+0x15c>)
 8003dc0:	edd3 7a00 	vldr	s15, [r3]
 8003dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc8:	4b37      	ldr	r3, [pc, #220]	@ (8003ea8 <gyro_rate_pid_step+0x15c>)
 8003dca:	edc3 7a00 	vstr	s15, [r3]
    if (pid_int >  INTEGRAL_CLAMP) pid_int =  INTEGRAL_CLAMP;
 8003dce:	4b36      	ldr	r3, [pc, #216]	@ (8003ea8 <gyro_rate_pid_step+0x15c>)
 8003dd0:	edd3 7a00 	vldr	s15, [r3]
 8003dd4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003ea0 <gyro_rate_pid_step+0x154>
 8003dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de0:	dd02      	ble.n	8003de8 <gyro_rate_pid_step+0x9c>
 8003de2:	4a32      	ldr	r2, [pc, #200]	@ (8003eac <gyro_rate_pid_step+0x160>)
 8003de4:	4b30      	ldr	r3, [pc, #192]	@ (8003ea8 <gyro_rate_pid_step+0x15c>)
 8003de6:	601a      	str	r2, [r3, #0]
    if (pid_int < -INTEGRAL_CLAMP) pid_int = -INTEGRAL_CLAMP;
 8003de8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8003ea0 <gyro_rate_pid_step+0x154>
 8003dec:	eeb1 7a67 	vneg.f32	s14, s15
 8003df0:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea8 <gyro_rate_pid_step+0x15c>)
 8003df2:	edd3 7a00 	vldr	s15, [r3]
 8003df6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	dd06      	ble.n	8003e0e <gyro_rate_pid_step+0xc2>
 8003e00:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8003ea0 <gyro_rate_pid_step+0x154>
 8003e04:	eef1 7a67 	vneg.f32	s15, s15
 8003e08:	4b27      	ldr	r3, [pc, #156]	@ (8003ea8 <gyro_rate_pid_step+0x15c>)
 8003e0a:	edc3 7a00 	vstr	s15, [r3]

    // derivative (filtered)
    float d_raw = (err - pid_prev_err) / dt;
 8003e0e:	4b28      	ldr	r3, [pc, #160]	@ (8003eb0 <gyro_rate_pid_step+0x164>)
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e18:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e24:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_deriv_f = DERIV_ALPHA * pid_deriv_f + (1.0f - DERIV_ALPHA) * d_raw;
 8003e28:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003eb4 <gyro_rate_pid_step+0x168>
 8003e2c:	4b22      	ldr	r3, [pc, #136]	@ (8003eb8 <gyro_rate_pid_step+0x16c>)
 8003e2e:	edd3 7a00 	vldr	s15, [r3]
 8003e32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e36:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003eb4 <gyro_rate_pid_step+0x168>
 8003e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e3e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e42:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb8 <gyro_rate_pid_step+0x16c>)
 8003e50:	edc3 7a00 	vstr	s15, [r3]
    pid_prev_err = err;
 8003e54:	4a16      	ldr	r2, [pc, #88]	@ (8003eb0 <gyro_rate_pid_step+0x164>)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6013      	str	r3, [r2, #0]

    // PID → ΔPWM (right - left)
    return Kp_g*err + Ki_g*pid_int + Kd_g*pid_deriv_f;
 8003e5a:	4b18      	ldr	r3, [pc, #96]	@ (8003ebc <gyro_rate_pid_step+0x170>)
 8003e5c:	ed93 7a00 	vldr	s14, [r3]
 8003e60:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e68:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <gyro_rate_pid_step+0x174>)
 8003e6a:	edd3 6a00 	vldr	s13, [r3]
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea8 <gyro_rate_pid_step+0x15c>)
 8003e70:	edd3 7a00 	vldr	s15, [r3]
 8003e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <gyro_rate_pid_step+0x178>)
 8003e7e:	edd3 6a00 	vldr	s13, [r3]
 8003e82:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb8 <gyro_rate_pid_step+0x16c>)
 8003e84:	edd3 7a00 	vldr	s15, [r3]
 8003e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003e90:	eeb0 0a67 	vmov.f32	s0, s15
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20001d34 	.word	0x20001d34
 8003ea0:	447a0000 	.word	0x447a0000
 8003ea4:	3b03126f 	.word	0x3b03126f
 8003ea8:	20001d48 	.word	0x20001d48
 8003eac:	447a0000 	.word	0x447a0000
 8003eb0:	20001d4c 	.word	0x20001d4c
 8003eb4:	3f666666 	.word	0x3f666666
 8003eb8:	20001d50 	.word	0x20001d50
 8003ebc:	20000004 	.word	0x20000004
 8003ec0:	20000008 	.word	0x20000008
 8003ec4:	20001d38 	.word	0x20001d38

08003ec8 <turn_in_place_gyro>:
/**
 * In-place turn by angle (deg). +angle = CCW/left, -angle = CW/right.
 * base_pwm = 80..250 is typical. timeout_ms is safety.
 */
void turn_in_place_gyro(float angle_deg, int base_pwm, uint32_t timeout_ms)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	ed2d 8b02 	vpush	{d8}
 8003ece:	b098      	sub	sp, #96	@ 0x60
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ed6:	60b8      	str	r0, [r7, #8]
 8003ed8:	6079      	str	r1, [r7, #4]
    if (base_pwm < 60)  base_pwm = 60;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b3b      	cmp	r3, #59	@ 0x3b
 8003ede:	dc01      	bgt.n	8003ee4 <turn_in_place_gyro+0x1c>
 8003ee0:	233c      	movs	r3, #60	@ 0x3c
 8003ee2:	60bb      	str	r3, [r7, #8]
    if (base_pwm > 400) base_pwm = 400;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003eea:	dd02      	ble.n	8003ef2 <turn_in_place_gyro+0x2a>
 8003eec:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003ef0:	60bb      	str	r3, [r7, #8]

    gyro_turn_reset();
 8003ef2:	f7ff ff0d 	bl	8003d10 <gyro_turn_reset>

    float yaw = 0.0f;                  // integrated heading (deg)
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float target = angle_deg;    // signed target
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t t0 = HAL_GetTick();
 8003f00:	f001 f90e 	bl	8005120 <HAL_GetTick>
 8003f04:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t settle_start = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	65bb      	str	r3, [r7, #88]	@ 0x58

    // last timestamp for yaw integration
    uint32_t last_ms = HAL_GetTick();
 8003f0a:	f001 f909 	bl	8005120 <HAL_GetTick>
 8003f0e:	6578      	str	r0, [r7, #84]	@ 0x54

    while (1) {
        // --- timing ---
        uint32_t now = HAL_GetTick();
 8003f10:	f001 f906 	bl	8005120 <HAL_GetTick>
 8003f14:	6378      	str	r0, [r7, #52]	@ 0x34
        float dt = (now - last_ms) / 1000.0f;
 8003f16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	ee07 3a90 	vmov	s15, r3
 8003f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f24:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80041c4 <turn_in_place_gyro+0x2fc>
 8003f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f2c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        if (dt <= 0.0f) dt = 0.001f;
 8003f30:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003f34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3c:	d801      	bhi.n	8003f42 <turn_in_place_gyro+0x7a>
 8003f3e:	4ba2      	ldr	r3, [pc, #648]	@ (80041c8 <turn_in_place_gyro+0x300>)
 8003f40:	653b      	str	r3, [r7, #80]	@ 0x50
        last_ms = now;
 8003f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f44:	657b      	str	r3, [r7, #84]	@ 0x54
        mpu9250_read_gyro();
 8003f46:	f7fd fc8b 	bl	8001860 <mpu9250_read_gyro>
        // --- sensors ---
        float gz = mpu9250_get_gyro_z_compensated();  // deg/s
 8003f4a:	f7fd fc4f 	bl	80017ec <mpu9250_get_gyro_z_compensated>
 8003f4e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

        // --- integrate heading (keep sign!) ---
        yaw += gz * dt;
 8003f52:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003f56:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f66:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

        // signed angle error (THIS FIXES THE MAIN BUG)
        float ang_err = target - yaw;
 8003f6a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003f6e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f76:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        // desired rate with braking law (changes sign if you overshoot)
        float omega_brake = sqrtf(fmaxf(0.0f, 2.0f * ALPHA_MAX_DPS2 * fabsf(ang_err)));
 8003f7a:	4b94      	ldr	r3, [pc, #592]	@ (80041cc <turn_in_place_gyro+0x304>)
 8003f7c:	edd3 7a00 	vldr	s15, [r3]
 8003f80:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003f84:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f88:	eef0 7ae7 	vabs.f32	s15, s15
 8003f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f90:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 80041d0 <turn_in_place_gyro+0x308>
 8003f94:	eeb0 0a67 	vmov.f32	s0, s15
 8003f98:	f008 fa90 	bl	800c4bc <fmaxf>
 8003f9c:	eef0 7a40 	vmov.f32	s15, s0
 8003fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa4:	f008 fa6c 	bl	800c480 <sqrtf>
 8003fa8:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        float omega_des = clampf_local(omega_brake, 0.0f, OMEGA_MAX_DPS) * signf(ang_err);
 8003fac:	4b89      	ldr	r3, [pc, #548]	@ (80041d4 <turn_in_place_gyro+0x30c>)
 8003fae:	edd3 7a00 	vldr	s15, [r3]
 8003fb2:	eeb0 1a67 	vmov.f32	s2, s15
 8003fb6:	eddf 0a86 	vldr	s1, [pc, #536]	@ 80041d0 <turn_in_place_gyro+0x308>
 8003fba:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8003fbe:	f7ff fd4d 	bl	8003a5c <clampf_local>
 8003fc2:	eeb0 8a40 	vmov.f32	s16, s0
 8003fc6:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8003fca:	f7ff fe85 	bl	8003cd8 <signf>
 8003fce:	eef0 7a40 	vmov.f32	s15, s0
 8003fd2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003fd6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

        // small deadband on command (avoid micro twitch)
        if (fabsf(omega_des) < OMEGA_CMD_DEADBAND) omega_des = 0.0f;
 8003fda:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003fde:	eeb0 7ae7 	vabs.f32	s14, s15
 8003fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80041d8 <turn_in_place_gyro+0x310>)
 8003fe4:	edd3 7a00 	vldr	s15, [r3]
 8003fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff0:	d502      	bpl.n	8003ff8 <turn_in_place_gyro+0x130>
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c

        // --- inner rate loop ---
        float pid_dt = 0.0f;
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
        float dPWM_pid = gyro_rate_pid_step(omega_des, gz, &pid_dt);  // ΔPWM from PID
 8003ffe:	f107 0310 	add.w	r3, r7, #16
 8004002:	4618      	mov	r0, r3
 8004004:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 8004008:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 800400c:	f7ff fe9e 	bl	8003d4c <gyro_rate_pid_step>
 8004010:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        float dPWM_ff  = (fabsf(omega_des) > 0.0f) ? (omega_des / GYRO_K_DPS_PER_DPWM) : 0.0f;
 8004014:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004018:	eef0 7ae7 	vabs.f32	s15, s15
 800401c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004024:	dd06      	ble.n	8004034 <turn_in_place_gyro+0x16c>
 8004026:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800402a:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 80041dc <turn_in_place_gyro+0x314>
 800402e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004032:	e001      	b.n	8004038 <turn_in_place_gyro+0x170>
 8004034:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80041d0 <turn_in_place_gyro+0x308>
 8004038:	edc7 7a08 	vstr	s15, [r7, #32]
        float dPWM     = dPWM_ff + dPWM_pid;   // total ΔPWM (right - left), signed
 800403c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004040:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004048:	edc7 7a07 	vstr	s15, [r7, #28]

        // split ΔPWM around base so both sides get torque
        float right_mag = (float)base_pwm + 0.5f * fabsf(dPWM);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004056:	edd7 7a07 	vldr	s15, [r7, #28]
 800405a:	eef0 7ae7 	vabs.f32	s15, s15
 800405e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004062:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800406a:	edc7 7a06 	vstr	s15, [r7, #24]
        float left_mag  = (float)base_pwm + 0.5f * fabsf(dPWM);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004078:	edd7 7a07 	vldr	s15, [r7, #28]
 800407c:	eef0 7ae7 	vabs.f32	s15, s15
 8004080:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004084:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800408c:	edc7 7a05 	vstr	s15, [r7, #20]

        // decide directions from CURRENT command sign (not the initial turn dir)
        bool left_forward, right_forward;
        if (dPWM >= 0.0f) {
 8004090:	edd7 7a07 	vldr	s15, [r7, #28]
 8004094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409c:	db06      	blt.n	80040ac <turn_in_place_gyro+0x1e4>
            // turn left: left backward, right forward
            left_forward  = false;
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            right_forward = true;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80040aa:	e005      	b.n	80040b8 <turn_in_place_gyro+0x1f0>
        } else {
            // turn right: left forward, right backward
            left_forward  = true;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            right_forward = false;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        }

        // if command very small AND rate small, cut power to stop cleanly
        if (fabsf(ang_err) <= ANGLE_TOL_DEG && fabsf(gz) <= RATE_TOL_DPS) {
 80040b8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80040bc:	eeb0 7ae7 	vabs.f32	s14, s15
 80040c0:	4b47      	ldr	r3, [pc, #284]	@ (80041e0 <turn_in_place_gyro+0x318>)
 80040c2:	edd3 7a00 	vldr	s15, [r3]
 80040c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ce:	d822      	bhi.n	8004116 <turn_in_place_gyro+0x24e>
 80040d0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80040d4:	eeb0 7ae7 	vabs.f32	s14, s15
 80040d8:	4b42      	ldr	r3, [pc, #264]	@ (80041e4 <turn_in_place_gyro+0x31c>)
 80040da:	edd3 7a00 	vldr	s15, [r3]
 80040de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e6:	d816      	bhi.n	8004116 <turn_in_place_gyro+0x24e>
            motor_set(0, true, 0);
 80040e8:	2200      	movs	r2, #0
 80040ea:	2101      	movs	r1, #1
 80040ec:	2000      	movs	r0, #0
 80040ee:	f7ff fc43 	bl	8003978 <motor_set>
            motor_set(1, true, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2101      	movs	r1, #1
 80040f6:	2001      	movs	r0, #1
 80040f8:	f7ff fc3e 	bl	8003978 <motor_set>
            if (settle_start == 0) settle_start = now;
 80040fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <turn_in_place_gyro+0x23e>
 8004102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004104:	65bb      	str	r3, [r7, #88]	@ 0x58
            if ((now - settle_start) >= SETTLE_MS) break;
 8004106:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	4b36      	ldr	r3, [pc, #216]	@ (80041e8 <turn_in_place_gyro+0x320>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d340      	bcc.n	8004196 <turn_in_place_gyro+0x2ce>
 8004114:	e04a      	b.n	80041ac <turn_in_place_gyro+0x2e4>
        } else {
            settle_start = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	65bb      	str	r3, [r7, #88]	@ 0x58

            // Apply PWM (no fake “min move” offsets here—let control truly go to 0 near stop)
            int pwmL = (int)roundf(left_mag);
 800411a:	ed97 0a05 	vldr	s0, [r7, #20]
 800411e:	f008 fa0b 	bl	800c538 <roundf>
 8004122:	eef0 7a40 	vmov.f32	s15, s0
 8004126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800412a:	ee17 3a90 	vmov	r3, s15
 800412e:	647b      	str	r3, [r7, #68]	@ 0x44
            int pwmR = (int)roundf(right_mag);
 8004130:	ed97 0a06 	vldr	s0, [r7, #24]
 8004134:	f008 fa00 	bl	800c538 <roundf>
 8004138:	eef0 7a40 	vmov.f32	s15, s0
 800413c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004140:	ee17 3a90 	vmov	r3, s15
 8004144:	643b      	str	r3, [r7, #64]	@ 0x40
            if (pwmL < 0) pwmL = 0;
 8004146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004148:	2b00      	cmp	r3, #0
 800414a:	da01      	bge.n	8004150 <turn_in_place_gyro+0x288>
 800414c:	2300      	movs	r3, #0
 800414e:	647b      	str	r3, [r7, #68]	@ 0x44
            if (pwmL > 1000) pwmL = 1000;
 8004150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004152:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004156:	dd02      	ble.n	800415e <turn_in_place_gyro+0x296>
 8004158:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800415c:	647b      	str	r3, [r7, #68]	@ 0x44
            if (pwmR < 0) pwmR = 0;
 800415e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	da01      	bge.n	8004168 <turn_in_place_gyro+0x2a0>
 8004164:	2300      	movs	r3, #0
 8004166:	643b      	str	r3, [r7, #64]	@ 0x40
            if (pwmR > 1000) pwmR = 1000;
 8004168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800416e:	dd02      	ble.n	8004176 <turn_in_place_gyro+0x2ae>
 8004170:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004174:	643b      	str	r3, [r7, #64]	@ 0x40

            motor_set(0, left_forward,  (uint16_t)pwmL);
 8004176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004178:	b29a      	uxth	r2, r3
 800417a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800417e:	4619      	mov	r1, r3
 8004180:	2000      	movs	r0, #0
 8004182:	f7ff fbf9 	bl	8003978 <motor_set>
            motor_set(1, right_forward, (uint16_t)pwmR);
 8004186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004188:	b29a      	uxth	r2, r3
 800418a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800418e:	4619      	mov	r1, r3
 8004190:	2001      	movs	r0, #1
 8004192:	f7ff fbf1 	bl	8003978 <motor_set>
        }

        if ((now - t0) > timeout_ms) break;
 8004196:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d303      	bcc.n	80041aa <turn_in_place_gyro+0x2e2>

        HAL_Delay(2); // ~500 Hz outer loop
 80041a2:	2002      	movs	r0, #2
 80041a4:	f000 ffc8 	bl	8005138 <HAL_Delay>
    while (1) {
 80041a8:	e6b2      	b.n	8003f10 <turn_in_place_gyro+0x48>
        if ((now - t0) > timeout_ms) break;
 80041aa:	bf00      	nop
    }

    stop_motors();
 80041ac:	f7ff fb6e 	bl	800388c <stop_motors>
    HAL_Delay(60);
 80041b0:	203c      	movs	r0, #60	@ 0x3c
 80041b2:	f000 ffc1 	bl	8005138 <HAL_Delay>
}
 80041b6:	bf00      	nop
 80041b8:	3760      	adds	r7, #96	@ 0x60
 80041ba:	46bd      	mov	sp, r7
 80041bc:	ecbd 8b02 	vpop	{d8}
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	447a0000 	.word	0x447a0000
 80041c8:	3a83126f 	.word	0x3a83126f
 80041cc:	20000010 	.word	0x20000010
 80041d0:	00000000 	.word	0x00000000
 80041d4:	2000000c 	.word	0x2000000c
 80041d8:	20000020 	.word	0x20000020
 80041dc:	3fb0ff97 	.word	0x3fb0ff97
 80041e0:	20000014 	.word	0x20000014
 80041e4:	20000018 	.word	0x20000018
 80041e8:	2000001c 	.word	0x2000001c

080041ec <read_adc_channel>:
}

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80041f4:	f107 030c 	add.w	r3, r7, #12
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	60da      	str	r2, [r3, #12]
    uint16_t adc_value = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	83fb      	strh	r3, [r7, #30]

    // Configure the channel
    sConfig.Channel = channel;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 800420a:	2301      	movs	r3, #1
 800420c:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES; // Longer sampling time
 800420e:	2304      	movs	r3, #4
 8004210:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004212:	f107 030c 	add.w	r3, r7, #12
 8004216:	4619      	mov	r1, r3
 8004218:	4818      	ldr	r0, [pc, #96]	@ (800427c <read_adc_channel+0x90>)
 800421a:	f001 f975 	bl	8005508 <HAL_ADC_ConfigChannel>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <read_adc_channel+0x42>
        send_bluetooth_message("❌ ADC channel config failed\r\n");
 8004224:	4816      	ldr	r0, [pc, #88]	@ (8004280 <read_adc_channel+0x94>)
 8004226:	f7fc ff4b 	bl	80010c0 <send_bluetooth_message>
        return 0;
 800422a:	2300      	movs	r3, #0
 800422c:	e022      	b.n	8004274 <read_adc_channel+0x88>
    }

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800422e:	4813      	ldr	r0, [pc, #76]	@ (800427c <read_adc_channel+0x90>)
 8004230:	f000 ffea 	bl	8005208 <HAL_ADC_Start>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <read_adc_channel+0x58>
        send_bluetooth_message("❌ ADC start failed\r\n");
 800423a:	4812      	ldr	r0, [pc, #72]	@ (8004284 <read_adc_channel+0x98>)
 800423c:	f7fc ff40 	bl	80010c0 <send_bluetooth_message>
        return 0;
 8004240:	2300      	movs	r3, #0
 8004242:	e017      	b.n	8004274 <read_adc_channel+0x88>
    }

    // Wait for conversion with longer timeout
    if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
 8004244:	2164      	movs	r1, #100	@ 0x64
 8004246:	480d      	ldr	r0, [pc, #52]	@ (800427c <read_adc_channel+0x90>)
 8004248:	f001 f8c5 	bl	80053d6 <HAL_ADC_PollForConversion>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <read_adc_channel+0x76>
        send_bluetooth_message("❌ ADC conversion timeout\r\n");
 8004252:	480d      	ldr	r0, [pc, #52]	@ (8004288 <read_adc_channel+0x9c>)
 8004254:	f7fc ff34 	bl	80010c0 <send_bluetooth_message>
        HAL_ADC_Stop(&hadc1);
 8004258:	4808      	ldr	r0, [pc, #32]	@ (800427c <read_adc_channel+0x90>)
 800425a:	f001 f889 	bl	8005370 <HAL_ADC_Stop>
        return 0;
 800425e:	2300      	movs	r3, #0
 8004260:	e008      	b.n	8004274 <read_adc_channel+0x88>
    }

    // Get the converted value
    adc_value = HAL_ADC_GetValue(&hadc1);
 8004262:	4806      	ldr	r0, [pc, #24]	@ (800427c <read_adc_channel+0x90>)
 8004264:	f001 f942 	bl	80054ec <HAL_ADC_GetValue>
 8004268:	4603      	mov	r3, r0
 800426a:	83fb      	strh	r3, [r7, #30]

    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 800426c:	4803      	ldr	r0, [pc, #12]	@ (800427c <read_adc_channel+0x90>)
 800426e:	f001 f87f 	bl	8005370 <HAL_ADC_Stop>

    return adc_value;
 8004272:	8bfb      	ldrh	r3, [r7, #30]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	2000022c 	.word	0x2000022c
 8004280:	0800d7a8 	.word	0x0800d7a8
 8004284:	0800d7c8 	.word	0x0800d7c8
 8004288:	0800d7e0 	.word	0x0800d7e0

0800428c <update_sensors>:

/**
 * @brief Enhanced update_sensors with calibrated thresholds
 */
void update_sensors(void)
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b091      	sub	sp, #68	@ 0x44
 8004290:	af00      	add	r7, sp, #0
//    sensors.front_left = read_adc_channel(ADC_CHANNEL_5) - ambient_front_left;
//
//    // Turn off emitters to save power
//    turn_off_emitters();

	uint32_t channels[] = {ADC_CHANNEL_5, ADC_CHANNEL_2, ADC_CHANNEL_4, ADC_CHANNEL_3};
 8004292:	4ba2      	ldr	r3, [pc, #648]	@ (800451c <update_sensors+0x290>)
 8004294:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8004298:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800429a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	GPIO_TypeDef* emit_ports[] = {EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_RIGHT_GPIO_Port,
 800429e:	4ba0      	ldr	r3, [pc, #640]	@ (8004520 <update_sensors+0x294>)
 80042a0:	f107 0414 	add.w	r4, r7, #20
 80042a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								  EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_RIGHT_GPIO_Port};
	uint16_t emit_pins[] = {EMIT_FRONT_LEFT_Pin, EMIT_FRONT_RIGHT_Pin,
 80042aa:	4a9e      	ldr	r2, [pc, #632]	@ (8004524 <update_sensors+0x298>)
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042b4:	e883 0003 	stmia.w	r3, {r0, r1}
						   EMIT_SIDE_LEFT_Pin, EMIT_SIDE_RIGHT_Pin};

	int16_t difference[4];
	for(int i = 0; i < 4; i++) {
 80042b8:	2300      	movs	r3, #0
 80042ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042bc:	e05c      	b.n	8004378 <update_sensors+0xec>
		// Test with emitter OFF
		HAL_GPIO_WritePin(emit_ports[i], emit_pins[i], GPIO_PIN_RESET);
 80042be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	3340      	adds	r3, #64	@ 0x40
 80042c4:	443b      	add	r3, r7
 80042c6:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 80042ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	3340      	adds	r3, #64	@ 0x40
 80042d0:	443b      	add	r3, r7
 80042d2:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 80042d6:	2200      	movs	r2, #0
 80042d8:	4619      	mov	r1, r3
 80042da:	f001 fe6b 	bl	8005fb4 <HAL_GPIO_WritePin>
		HAL_Delay(2);	//10
 80042de:	2002      	movs	r0, #2
 80042e0:	f000 ff2a 	bl	8005138 <HAL_Delay>
		uint16_t off_reading = read_adc_channel(channels[i]);
 80042e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	3340      	adds	r3, #64	@ 0x40
 80042ea:	443b      	add	r3, r7
 80042ec:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff7b 	bl	80041ec <read_adc_channel>
 80042f6:	4603      	mov	r3, r0
 80042f8:	873b      	strh	r3, [r7, #56]	@ 0x38

		// Test with emitter ON
		HAL_GPIO_WritePin(emit_ports[i], emit_pins[i], GPIO_PIN_SET);
 80042fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	3340      	adds	r3, #64	@ 0x40
 8004300:	443b      	add	r3, r7
 8004302:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8004306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	3340      	adds	r3, #64	@ 0x40
 800430c:	443b      	add	r3, r7
 800430e:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8004312:	2201      	movs	r2, #1
 8004314:	4619      	mov	r1, r3
 8004316:	f001 fe4d 	bl	8005fb4 <HAL_GPIO_WritePin>
		HAL_Delay(2);	//10
 800431a:	2002      	movs	r0, #2
 800431c:	f000 ff0c 	bl	8005138 <HAL_Delay>
		uint16_t on_reading = read_adc_channel(channels[i]);
 8004320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	3340      	adds	r3, #64	@ 0x40
 8004326:	443b      	add	r3, r7
 8004328:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff5d 	bl	80041ec <read_adc_channel>
 8004332:	4603      	mov	r3, r0
 8004334:	86fb      	strh	r3, [r7, #54]	@ 0x36



		// Calculate difference
		difference[i] = on_reading - off_reading;
 8004336:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004338:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	b29b      	uxth	r3, r3
 800433e:	b21a      	sxth	r2, r3
 8004340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	3340      	adds	r3, #64	@ 0x40
 8004346:	443b      	add	r3, r7
 8004348:	f823 2c3c 	strh.w	r2, [r3, #-60]

		// Turn off emitter
		HAL_GPIO_WritePin(emit_ports[i], emit_pins[i], GPIO_PIN_RESET);
 800434c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	3340      	adds	r3, #64	@ 0x40
 8004352:	443b      	add	r3, r7
 8004354:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8004358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	3340      	adds	r3, #64	@ 0x40
 800435e:	443b      	add	r3, r7
 8004360:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8004364:	2200      	movs	r2, #0
 8004366:	4619      	mov	r1, r3
 8004368:	f001 fe24 	bl	8005fb4 <HAL_GPIO_WritePin>
		HAL_Delay(3);	//50
 800436c:	2003      	movs	r0, #3
 800436e:	f000 fee3 	bl	8005138 <HAL_Delay>
	for(int i = 0; i < 4; i++) {
 8004372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004374:	3301      	adds	r3, #1
 8004376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437a:	2b03      	cmp	r3, #3
 800437c:	dd9f      	ble.n	80042be <update_sensors+0x32>
	}
	sensors.battery = read_adc_channel(ADC_CHANNEL_0);
 800437e:	2000      	movs	r0, #0
 8004380:	f7ff ff34 	bl	80041ec <read_adc_channel>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	4b67      	ldr	r3, [pc, #412]	@ (8004528 <update_sensors+0x29c>)
 800438a:	801a      	strh	r2, [r3, #0]
	sensors.front_right = difference[1];
 800438c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004390:	b29a      	uxth	r2, r3
 8004392:	4b65      	ldr	r3, [pc, #404]	@ (8004528 <update_sensors+0x29c>)
 8004394:	805a      	strh	r2, [r3, #2]
	sensors.side_right = difference[3];
 8004396:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800439a:	b29a      	uxth	r2, r3
 800439c:	4b62      	ldr	r3, [pc, #392]	@ (8004528 <update_sensors+0x29c>)
 800439e:	809a      	strh	r2, [r3, #4]
	sensors.side_left = difference[2];
 80043a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	4b60      	ldr	r3, [pc, #384]	@ (8004528 <update_sensors+0x29c>)
 80043a8:	80da      	strh	r2, [r3, #6]
	sensors.front_left = difference[0];
 80043aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	4b5d      	ldr	r3, [pc, #372]	@ (8004528 <update_sensors+0x29c>)
 80043b2:	811a      	strh	r2, [r3, #8]

    // Process wall detection using calibrated thresholds
    if (sensor_cal.calibration_valid) {
 80043b4:	4b5d      	ldr	r3, [pc, #372]	@ (800452c <update_sensors+0x2a0>)
 80043b6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d032      	beq.n	8004424 <update_sensors+0x198>
        // Use dynamic thresholds
        sensors.wall_front = (sensors.front_left > get_calibrated_threshold(0)) ||
 80043be:	4b5a      	ldr	r3, [pc, #360]	@ (8004528 <update_sensors+0x29c>)
 80043c0:	891c      	ldrh	r4, [r3, #8]
 80043c2:	2000      	movs	r0, #0
 80043c4:	f000 f96c 	bl	80046a0 <get_calibrated_threshold>
 80043c8:	4603      	mov	r3, r0
 80043ca:	429c      	cmp	r4, r3
 80043cc:	d807      	bhi.n	80043de <update_sensors+0x152>
                            (sensors.front_right > get_calibrated_threshold(1));
 80043ce:	4b56      	ldr	r3, [pc, #344]	@ (8004528 <update_sensors+0x29c>)
 80043d0:	885c      	ldrh	r4, [r3, #2]
 80043d2:	2001      	movs	r0, #1
 80043d4:	f000 f964 	bl	80046a0 <get_calibrated_threshold>
 80043d8:	4603      	mov	r3, r0
        sensors.wall_front = (sensors.front_left > get_calibrated_threshold(0)) ||
 80043da:	429c      	cmp	r4, r3
 80043dc:	d901      	bls.n	80043e2 <update_sensors+0x156>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <update_sensors+0x158>
 80043e2:	2300      	movs	r3, #0
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004528 <update_sensors+0x29c>)
 80043ec:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > get_calibrated_threshold(2));
 80043ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004528 <update_sensors+0x29c>)
 80043f0:	88dc      	ldrh	r4, [r3, #6]
 80043f2:	2002      	movs	r0, #2
 80043f4:	f000 f954 	bl	80046a0 <get_calibrated_threshold>
 80043f8:	4603      	mov	r3, r0
 80043fa:	429c      	cmp	r4, r3
 80043fc:	bf8c      	ite	hi
 80043fe:	2301      	movhi	r3, #1
 8004400:	2300      	movls	r3, #0
 8004402:	b2da      	uxtb	r2, r3
 8004404:	4b48      	ldr	r3, [pc, #288]	@ (8004528 <update_sensors+0x29c>)
 8004406:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > get_calibrated_threshold(3));
 8004408:	4b47      	ldr	r3, [pc, #284]	@ (8004528 <update_sensors+0x29c>)
 800440a:	889c      	ldrh	r4, [r3, #4]
 800440c:	2003      	movs	r0, #3
 800440e:	f000 f947 	bl	80046a0 <get_calibrated_threshold>
 8004412:	4603      	mov	r3, r0
 8004414:	429c      	cmp	r4, r3
 8004416:	bf8c      	ite	hi
 8004418:	2301      	movhi	r3, #1
 800441a:	2300      	movls	r3, #0
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4b42      	ldr	r3, [pc, #264]	@ (8004528 <update_sensors+0x29c>)
 8004420:	731a      	strb	r2, [r3, #12]
 8004422:	e027      	b.n	8004474 <update_sensors+0x1e8>
    } else {
        // Fallback to static thresholds
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 8004424:	4b40      	ldr	r3, [pc, #256]	@ (8004528 <update_sensors+0x29c>)
 8004426:	891b      	ldrh	r3, [r3, #8]
 8004428:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800442c:	d804      	bhi.n	8004438 <update_sensors+0x1ac>
                            (sensors.front_right > WALL_THRESHOLD_FRONT);
 800442e:	4b3e      	ldr	r3, [pc, #248]	@ (8004528 <update_sensors+0x29c>)
 8004430:	885b      	ldrh	r3, [r3, #2]
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 8004432:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004436:	d901      	bls.n	800443c <update_sensors+0x1b0>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <update_sensors+0x1b2>
 800443c:	2300      	movs	r3, #0
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	4b38      	ldr	r3, [pc, #224]	@ (8004528 <update_sensors+0x29c>)
 8004446:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > WALL_THRESHOLD_SIDE);
 8004448:	4b37      	ldr	r3, [pc, #220]	@ (8004528 <update_sensors+0x29c>)
 800444a:	88db      	ldrh	r3, [r3, #6]
 800444c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004450:	4293      	cmp	r3, r2
 8004452:	bf8c      	ite	hi
 8004454:	2301      	movhi	r3, #1
 8004456:	2300      	movls	r3, #0
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4b33      	ldr	r3, [pc, #204]	@ (8004528 <update_sensors+0x29c>)
 800445c:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > WALL_THRESHOLD_SIDE);
 800445e:	4b32      	ldr	r3, [pc, #200]	@ (8004528 <update_sensors+0x29c>)
 8004460:	889b      	ldrh	r3, [r3, #4]
 8004462:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004466:	4293      	cmp	r3, r2
 8004468:	bf8c      	ite	hi
 800446a:	2301      	movhi	r3, #1
 800446c:	2300      	movls	r3, #0
 800446e:	b2da      	uxtb	r2, r3
 8004470:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <update_sensors+0x29c>)
 8004472:	731a      	strb	r2, [r3, #12]
    }

    // Enhanced sensor health monitoring using calibration data
    static uint8_t sensor_error_count = 0;

    if (sensor_cal.calibration_valid) {
 8004474:	4b2d      	ldr	r3, [pc, #180]	@ (800452c <update_sensors+0x2a0>)
 8004476:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800447a:	2b00      	cmp	r3, #0
 800447c:	d049      	beq.n	8004512 <update_sensors+0x286>
        // Check if readings are within expected ranges based on calibration
        bool current_reading_valid = (sensors.battery > sensor_cal.battery_baseline - 200) &&
 800447e:	4b2b      	ldr	r3, [pc, #172]	@ (800452c <update_sensors+0x2a0>)
 8004480:	8a1b      	ldrh	r3, [r3, #16]
 8004482:	3bc7      	subs	r3, #199	@ 0xc7
 8004484:	4a28      	ldr	r2, [pc, #160]	@ (8004528 <update_sensors+0x29c>)
 8004486:	8812      	ldrh	r2, [r2, #0]
                                   (sensors.battery < sensor_cal.battery_baseline + 500) &&
                                   (sensors.front_left < 3500) &&
                                   (sensors.front_right < 3500) &&
                                   (sensors.side_left < 3500) &&
 8004488:	4293      	cmp	r3, r2
 800448a:	dc21      	bgt.n	80044d0 <update_sensors+0x244>
                                   (sensors.battery < sensor_cal.battery_baseline + 500) &&
 800448c:	4b27      	ldr	r3, [pc, #156]	@ (800452c <update_sensors+0x2a0>)
 800448e:	8a1b      	ldrh	r3, [r3, #16]
 8004490:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8004494:	4a24      	ldr	r2, [pc, #144]	@ (8004528 <update_sensors+0x29c>)
 8004496:	8812      	ldrh	r2, [r2, #0]
        bool current_reading_valid = (sensors.battery > sensor_cal.battery_baseline - 200) &&
 8004498:	4293      	cmp	r3, r2
 800449a:	db19      	blt.n	80044d0 <update_sensors+0x244>
                                   (sensors.front_left < 3500) &&
 800449c:	4b22      	ldr	r3, [pc, #136]	@ (8004528 <update_sensors+0x29c>)
 800449e:	891b      	ldrh	r3, [r3, #8]
                                   (sensors.battery < sensor_cal.battery_baseline + 500) &&
 80044a0:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d813      	bhi.n	80044d0 <update_sensors+0x244>
                                   (sensors.front_right < 3500) &&
 80044a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004528 <update_sensors+0x29c>)
 80044aa:	885b      	ldrh	r3, [r3, #2]
                                   (sensors.front_left < 3500) &&
 80044ac:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d80d      	bhi.n	80044d0 <update_sensors+0x244>
                                   (sensors.side_left < 3500) &&
 80044b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004528 <update_sensors+0x29c>)
 80044b6:	88db      	ldrh	r3, [r3, #6]
                                   (sensors.front_right < 3500) &&
 80044b8:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80044bc:	4293      	cmp	r3, r2
 80044be:	d807      	bhi.n	80044d0 <update_sensors+0x244>
                                   (sensors.side_right < 3500);
 80044c0:	4b19      	ldr	r3, [pc, #100]	@ (8004528 <update_sensors+0x29c>)
 80044c2:	889b      	ldrh	r3, [r3, #4]
                                   (sensors.side_left < 3500) &&
 80044c4:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d801      	bhi.n	80044d0 <update_sensors+0x244>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <update_sensors+0x246>
 80044d0:	2300      	movs	r3, #0
        bool current_reading_valid = (sensors.battery > sensor_cal.battery_baseline - 200) &&
 80044d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80044d6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        if (!current_reading_valid) {
 80044e2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80044e6:	f083 0301 	eor.w	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d006      	beq.n	80044fe <update_sensors+0x272>
            sensor_error_count++;
 80044f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004530 <update_sensors+0x2a4>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004530 <update_sensors+0x2a4>)
 80044fa:	701a      	strb	r2, [r3, #0]

        } else {
            if (sensor_error_count > 0) sensor_error_count--; // Recover slowly
        }
    }
}
 80044fc:	e009      	b.n	8004512 <update_sensors+0x286>
            if (sensor_error_count > 0) sensor_error_count--; // Recover slowly
 80044fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <update_sensors+0x2a4>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <update_sensors+0x286>
 8004506:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <update_sensors+0x2a4>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	3b01      	subs	r3, #1
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4b08      	ldr	r3, [pc, #32]	@ (8004530 <update_sensors+0x2a4>)
 8004510:	701a      	strb	r2, [r3, #0]
}
 8004512:	bf00      	nop
 8004514:	3744      	adds	r7, #68	@ 0x44
 8004516:	46bd      	mov	sp, r7
 8004518:	bd90      	pop	{r4, r7, pc}
 800451a:	bf00      	nop
 800451c:	0800d800 	.word	0x0800d800
 8004520:	0800d810 	.word	0x0800d810
 8004524:	0800d820 	.word	0x0800d820
 8004528:	20001448 	.word	0x20001448
 800452c:	20001d54 	.word	0x20001d54
 8004530:	20001d88 	.word	0x20001d88

08004534 <adc_system_diagnostics>:

    send_bluetooth_message("===============================\r\n");
}


void adc_system_diagnostics(void) {
 8004534:	b5b0      	push	{r4, r5, r7, lr}
 8004536:	b08e      	sub	sp, #56	@ 0x38
 8004538:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 800453a:	484b      	ldr	r0, [pc, #300]	@ (8004668 <adc_system_diagnostics+0x134>)
 800453c:	f7fc fdc0 	bl	80010c0 <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 8004540:	4b4a      	ldr	r3, [pc, #296]	@ (800466c <adc_system_diagnostics+0x138>)
 8004542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 800454c:	4848      	ldr	r0, [pc, #288]	@ (8004670 <adc_system_diagnostics+0x13c>)
 800454e:	f7fc fdb7 	bl	80010c0 <send_bluetooth_message>
 8004552:	e002      	b.n	800455a <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 8004554:	4847      	ldr	r0, [pc, #284]	@ (8004674 <adc_system_diagnostics+0x140>)
 8004556:	f7fc fdb3 	bl	80010c0 <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 800455a:	4b44      	ldr	r3, [pc, #272]	@ (800466c <adc_system_diagnostics+0x138>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 8004566:	4844      	ldr	r0, [pc, #272]	@ (8004678 <adc_system_diagnostics+0x144>)
 8004568:	f7fc fdaa 	bl	80010c0 <send_bluetooth_message>
 800456c:	e002      	b.n	8004574 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 800456e:	4843      	ldr	r0, [pc, #268]	@ (800467c <adc_system_diagnostics+0x148>)
 8004570:	f7fc fda6 	bl	80010c0 <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 8004574:	4b42      	ldr	r3, [pc, #264]	@ (8004680 <adc_system_diagnostics+0x14c>)
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	2b01      	cmp	r3, #1
 800457a:	d103      	bne.n	8004584 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 800457c:	4841      	ldr	r0, [pc, #260]	@ (8004684 <adc_system_diagnostics+0x150>)
 800457e:	f7fc fd9f 	bl	80010c0 <send_bluetooth_message>
 8004582:	e005      	b.n	8004590 <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 8004584:	4b3e      	ldr	r3, [pc, #248]	@ (8004680 <adc_system_diagnostics+0x14c>)
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	4619      	mov	r1, r3
 800458a:	483f      	ldr	r0, [pc, #252]	@ (8004688 <adc_system_diagnostics+0x154>)
 800458c:	f7fc fdae 	bl	80010ec <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 8004590:	483e      	ldr	r0, [pc, #248]	@ (800468c <adc_system_diagnostics+0x158>)
 8004592:	f7fc fd95 	bl	80010c0 <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 8004596:	4b3e      	ldr	r3, [pc, #248]	@ (8004690 <adc_system_diagnostics+0x15c>)
 8004598:	f107 0420 	add.w	r4, r7, #32
 800459c:	461d      	mov	r5, r3
 800459e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045a2:	682b      	ldr	r3, [r5, #0]
 80045a4:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 80045a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004694 <adc_system_diagnostics+0x160>)
 80045a8:	f107 040c 	add.w	r4, r7, #12
 80045ac:	461d      	mov	r5, r3
 80045ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045b2:	682b      	ldr	r3, [r5, #0]
 80045b4:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 80045b6:	2300      	movs	r3, #0
 80045b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ba:	e04b      	b.n	8004654 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 80045bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	3338      	adds	r3, #56	@ 0x38
 80045c2:	443b      	add	r3, r7
 80045c4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fe0f 	bl	80041ec <read_adc_channel>
 80045ce:	4603      	mov	r3, r0
 80045d0:	461a      	mov	r2, r3
 80045d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	3338      	adds	r3, #56	@ 0x38
 80045d8:	443b      	add	r3, r7
 80045da:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80045de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	3338      	adds	r3, #56	@ 0x38
 80045e4:	443b      	add	r3, r7
 80045e6:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 80045ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	3338      	adds	r3, #56	@ 0x38
 80045f0:	443b      	add	r3, r7
 80045f2:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01f      	beq.n	800463a <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80045fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	3338      	adds	r3, #56	@ 0x38
 8004600:	443b      	add	r3, r7
 8004602:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d015      	beq.n	8004636 <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 800460a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	3338      	adds	r3, #56	@ 0x38
 8004610:	443b      	add	r3, r7
 8004612:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004616:	2b03      	cmp	r3, #3
 8004618:	d00b      	beq.n	8004632 <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 800461a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	3338      	adds	r3, #56	@ 0x38
 8004620:	443b      	add	r3, r7
 8004622:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004626:	2b04      	cmp	r3, #4
 8004628:	d101      	bne.n	800462e <adc_system_diagnostics+0xfa>
 800462a:	2204      	movs	r2, #4
 800462c:	e006      	b.n	800463c <adc_system_diagnostics+0x108>
 800462e:	2205      	movs	r2, #5
 8004630:	e004      	b.n	800463c <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 8004632:	2203      	movs	r2, #3
 8004634:	e002      	b.n	800463c <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 8004636:	2202      	movs	r2, #2
 8004638:	e000      	b.n	800463c <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 800463a:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 800463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	3338      	adds	r3, #56	@ 0x38
 8004642:	443b      	add	r3, r7
 8004644:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004648:	4813      	ldr	r0, [pc, #76]	@ (8004698 <adc_system_diagnostics+0x164>)
 800464a:	f7fc fd4f 	bl	80010ec <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 800464e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004650:	3301      	adds	r3, #1
 8004652:	637b      	str	r3, [r7, #52]	@ 0x34
 8004654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004656:	2b04      	cmp	r3, #4
 8004658:	ddb0      	ble.n	80045bc <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 800465a:	4810      	ldr	r0, [pc, #64]	@ (800469c <adc_system_diagnostics+0x168>)
 800465c:	f7fc fd30 	bl	80010c0 <send_bluetooth_message>
}
 8004660:	bf00      	nop
 8004662:	3738      	adds	r7, #56	@ 0x38
 8004664:	46bd      	mov	sp, r7
 8004666:	bdb0      	pop	{r4, r5, r7, pc}
 8004668:	0800da30 	.word	0x0800da30
 800466c:	40023800 	.word	0x40023800
 8004670:	0800da54 	.word	0x0800da54
 8004674:	0800da70 	.word	0x0800da70
 8004678:	0800da8c 	.word	0x0800da8c
 800467c:	0800daa8 	.word	0x0800daa8
 8004680:	2000022c 	.word	0x2000022c
 8004684:	0800dac4 	.word	0x0800dac4
 8004688:	0800dadc 	.word	0x0800dadc
 800468c:	0800daf4 	.word	0x0800daf4
 8004690:	0800db24 	.word	0x0800db24
 8004694:	0800db70 	.word	0x0800db70
 8004698:	0800db14 	.word	0x0800db14
 800469c:	0800da0c 	.word	0x0800da0c

080046a0 <get_calibrated_threshold>:
 * @brief Get calibrated wall threshold for specific sensor
 * @param sensor_index: 0=Front_Left, 1=Front_Right, 2=Side_Left, 3=Side_Right
 * @return Calibrated threshold value
 */
uint16_t get_calibrated_threshold(int sensor_index)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
    if (sensor_index < 0 || sensor_index > 3 || !sensor_cal.calibration_valid) {
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	db0a      	blt.n	80046c4 <get_calibrated_threshold+0x24>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	dc07      	bgt.n	80046c4 <get_calibrated_threshold+0x24>
 80046b4:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <get_calibrated_threshold+0x4c>)
 80046b6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80046ba:	f083 0301 	eor.w	r3, r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <get_calibrated_threshold+0x36>
        // Return default thresholds if calibration failed
        return (sensor_index < 2) ? WALL_THRESHOLD_FRONT : WALL_THRESHOLD_SIDE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	dc02      	bgt.n	80046d0 <get_calibrated_threshold+0x30>
 80046ca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80046ce:	e007      	b.n	80046e0 <get_calibrated_threshold+0x40>
 80046d0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80046d4:	e004      	b.n	80046e0 <get_calibrated_threshold+0x40>
    }

    return sensor_cal.wall_thresholds[sensor_index];
 80046d6:	4a05      	ldr	r2, [pc, #20]	@ (80046ec <get_calibrated_threshold+0x4c>)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3304      	adds	r3, #4
 80046dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20001d54 	.word	0x20001d54

080046f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	4b10      	ldr	r3, [pc, #64]	@ (800473c <HAL_MspInit+0x4c>)
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	4a0f      	ldr	r2, [pc, #60]	@ (800473c <HAL_MspInit+0x4c>)
 8004700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004704:	6453      	str	r3, [r2, #68]	@ 0x44
 8004706:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <HAL_MspInit+0x4c>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	4b09      	ldr	r3, [pc, #36]	@ (800473c <HAL_MspInit+0x4c>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	4a08      	ldr	r2, [pc, #32]	@ (800473c <HAL_MspInit+0x4c>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004720:	6413      	str	r3, [r2, #64]	@ 0x40
 8004722:	4b06      	ldr	r3, [pc, #24]	@ (800473c <HAL_MspInit+0x4c>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800

08004740 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	@ 0x28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004748:	f107 0314 	add.w	r3, r7, #20
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	609a      	str	r2, [r3, #8]
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a17      	ldr	r2, [pc, #92]	@ (80047bc <HAL_ADC_MspInit+0x7c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d127      	bne.n	80047b2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	4b16      	ldr	r3, [pc, #88]	@ (80047c0 <HAL_ADC_MspInit+0x80>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	4a15      	ldr	r2, [pc, #84]	@ (80047c0 <HAL_ADC_MspInit+0x80>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004770:	6453      	str	r3, [r2, #68]	@ 0x44
 8004772:	4b13      	ldr	r3, [pc, #76]	@ (80047c0 <HAL_ADC_MspInit+0x80>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	4b0f      	ldr	r3, [pc, #60]	@ (80047c0 <HAL_ADC_MspInit+0x80>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	4a0e      	ldr	r2, [pc, #56]	@ (80047c0 <HAL_ADC_MspInit+0x80>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	6313      	str	r3, [r2, #48]	@ 0x30
 800478e:	4b0c      	ldr	r3, [pc, #48]	@ (80047c0 <HAL_ADC_MspInit+0x80>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 800479a:	233d      	movs	r3, #61	@ 0x3d
 800479c:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800479e:	2303      	movs	r3, #3
 80047a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a6:	f107 0314 	add.w	r3, r7, #20
 80047aa:	4619      	mov	r1, r3
 80047ac:	4805      	ldr	r0, [pc, #20]	@ (80047c4 <HAL_ADC_MspInit+0x84>)
 80047ae:	f001 fa7d 	bl	8005cac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80047b2:	bf00      	nop
 80047b4:	3728      	adds	r7, #40	@ 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40012000 	.word	0x40012000
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40020000 	.word	0x40020000

080047c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	@ 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d0:	f107 0314 	add.w	r3, r7, #20
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a19      	ldr	r2, [pc, #100]	@ (800484c <HAL_SPI_MspInit+0x84>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d12c      	bne.n	8004844 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	4b18      	ldr	r3, [pc, #96]	@ (8004850 <HAL_SPI_MspInit+0x88>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	4a17      	ldr	r2, [pc, #92]	@ (8004850 <HAL_SPI_MspInit+0x88>)
 80047f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047fa:	4b15      	ldr	r3, [pc, #84]	@ (8004850 <HAL_SPI_MspInit+0x88>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	4b11      	ldr	r3, [pc, #68]	@ (8004850 <HAL_SPI_MspInit+0x88>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480e:	4a10      	ldr	r2, [pc, #64]	@ (8004850 <HAL_SPI_MspInit+0x88>)
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	6313      	str	r3, [r2, #48]	@ 0x30
 8004816:	4b0e      	ldr	r3, [pc, #56]	@ (8004850 <HAL_SPI_MspInit+0x88>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 8004822:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004828:	2302      	movs	r3, #2
 800482a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	2300      	movs	r3, #0
 800482e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004830:	2303      	movs	r3, #3
 8004832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004834:	2305      	movs	r3, #5
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004838:	f107 0314 	add.w	r3, r7, #20
 800483c:	4619      	mov	r1, r3
 800483e:	4805      	ldr	r0, [pc, #20]	@ (8004854 <HAL_SPI_MspInit+0x8c>)
 8004840:	f001 fa34 	bl	8005cac <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004844:	bf00      	nop
 8004846:	3728      	adds	r7, #40	@ 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40003800 	.word	0x40003800
 8004850:	40023800 	.word	0x40023800
 8004854:	40020400 	.word	0x40020400

08004858 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a18      	ldr	r2, [pc, #96]	@ (80048c8 <HAL_TIM_Base_MspInit+0x70>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d116      	bne.n	8004898 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	4b17      	ldr	r3, [pc, #92]	@ (80048cc <HAL_TIM_Base_MspInit+0x74>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004872:	4a16      	ldr	r2, [pc, #88]	@ (80048cc <HAL_TIM_Base_MspInit+0x74>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6453      	str	r3, [r2, #68]	@ 0x44
 800487a:	4b14      	ldr	r3, [pc, #80]	@ (80048cc <HAL_TIM_Base_MspInit+0x74>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	2107      	movs	r1, #7
 800488a:	2019      	movs	r0, #25
 800488c:	f001 f945 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004890:	2019      	movs	r0, #25
 8004892:	f001 f95e 	bl	8005b52 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004896:	e012      	b.n	80048be <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0c      	ldr	r2, [pc, #48]	@ (80048d0 <HAL_TIM_Base_MspInit+0x78>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10d      	bne.n	80048be <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	4b09      	ldr	r3, [pc, #36]	@ (80048cc <HAL_TIM_Base_MspInit+0x74>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	4a08      	ldr	r2, [pc, #32]	@ (80048cc <HAL_TIM_Base_MspInit+0x74>)
 80048ac:	f043 0302 	orr.w	r3, r3, #2
 80048b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_TIM_Base_MspInit+0x74>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40000400 	.word	0x40000400

080048d4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08c      	sub	sp, #48	@ 0x30
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048dc:	f107 031c 	add.w	r3, r7, #28
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f4:	d14b      	bne.n	800498e <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	4b3f      	ldr	r3, [pc, #252]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	4a3e      	ldr	r2, [pc, #248]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6413      	str	r3, [r2, #64]	@ 0x40
 8004906:	4b3c      	ldr	r3, [pc, #240]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	4b38      	ldr	r3, [pc, #224]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491a:	4a37      	ldr	r2, [pc, #220]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6313      	str	r3, [r2, #48]	@ 0x30
 8004922:	4b35      	ldr	r3, [pc, #212]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	4b31      	ldr	r3, [pc, #196]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	4a30      	ldr	r2, [pc, #192]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004938:	f043 0302 	orr.w	r3, r3, #2
 800493c:	6313      	str	r3, [r2, #48]	@ 0x30
 800493e:	4b2e      	ldr	r3, [pc, #184]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 800494a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800494e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004950:	2302      	movs	r3, #2
 8004952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004958:	2300      	movs	r3, #0
 800495a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800495c:	2301      	movs	r3, #1
 800495e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 8004960:	f107 031c 	add.w	r3, r7, #28
 8004964:	4619      	mov	r1, r3
 8004966:	4825      	ldr	r0, [pc, #148]	@ (80049fc <HAL_TIM_Encoder_MspInit+0x128>)
 8004968:	f001 f9a0 	bl	8005cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 800496c:	2308      	movs	r3, #8
 800496e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004970:	2302      	movs	r3, #2
 8004972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004974:	2300      	movs	r3, #0
 8004976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004978:	2300      	movs	r3, #0
 800497a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800497c:	2301      	movs	r3, #1
 800497e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 8004980:	f107 031c 	add.w	r3, r7, #28
 8004984:	4619      	mov	r1, r3
 8004986:	481e      	ldr	r0, [pc, #120]	@ (8004a00 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004988:	f001 f990 	bl	8005cac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800498c:	e030      	b.n	80049f0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1c      	ldr	r2, [pc, #112]	@ (8004a04 <HAL_TIM_Encoder_MspInit+0x130>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d12b      	bne.n	80049f0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	4b16      	ldr	r3, [pc, #88]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 800499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a0:	4a15      	ldr	r2, [pc, #84]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 80049a2:	f043 0304 	orr.w	r3, r3, #4
 80049a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80049a8:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b4:	2300      	movs	r3, #0
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	4b0f      	ldr	r3, [pc, #60]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 80049ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049bc:	4a0e      	ldr	r2, [pc, #56]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 80049be:	f043 0302 	orr.w	r3, r3, #2
 80049c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80049c4:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <HAL_TIM_Encoder_MspInit+0x124>)
 80049c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 80049d0:	23c0      	movs	r3, #192	@ 0xc0
 80049d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d4:	2302      	movs	r3, #2
 80049d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049dc:	2300      	movs	r3, #0
 80049de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80049e0:	2302      	movs	r3, #2
 80049e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e4:	f107 031c 	add.w	r3, r7, #28
 80049e8:	4619      	mov	r1, r3
 80049ea:	4805      	ldr	r0, [pc, #20]	@ (8004a00 <HAL_TIM_Encoder_MspInit+0x12c>)
 80049ec:	f001 f95e 	bl	8005cac <HAL_GPIO_Init>
}
 80049f0:	bf00      	nop
 80049f2:	3730      	adds	r7, #48	@ 0x30
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40020000 	.word	0x40020000
 8004a00:	40020400 	.word	0x40020400
 8004a04:	40000800 	.word	0x40000800

08004a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	@ 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a10:	f107 0314 	add.w	r3, r7, #20
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a33      	ldr	r2, [pc, #204]	@ (8004af4 <HAL_TIM_MspPostInit+0xec>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d11f      	bne.n	8004a6a <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	4b32      	ldr	r3, [pc, #200]	@ (8004af8 <HAL_TIM_MspPostInit+0xf0>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a32:	4a31      	ldr	r2, [pc, #196]	@ (8004af8 <HAL_TIM_MspPostInit+0xf0>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004af8 <HAL_TIM_MspPostInit+0xf0>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 8004a46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a54:	2300      	movs	r3, #0
 8004a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 8004a5c:	f107 0314 	add.w	r3, r7, #20
 8004a60:	4619      	mov	r1, r3
 8004a62:	4826      	ldr	r0, [pc, #152]	@ (8004afc <HAL_TIM_MspPostInit+0xf4>)
 8004a64:	f001 f922 	bl	8005cac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004a68:	e040      	b.n	8004aec <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a24      	ldr	r2, [pc, #144]	@ (8004b00 <HAL_TIM_MspPostInit+0xf8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d13b      	bne.n	8004aec <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	4b1f      	ldr	r3, [pc, #124]	@ (8004af8 <HAL_TIM_MspPostInit+0xf0>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004af8 <HAL_TIM_MspPostInit+0xf0>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a84:	4b1c      	ldr	r3, [pc, #112]	@ (8004af8 <HAL_TIM_MspPostInit+0xf0>)
 8004a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	4b18      	ldr	r3, [pc, #96]	@ (8004af8 <HAL_TIM_MspPostInit+0xf0>)
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	4a17      	ldr	r2, [pc, #92]	@ (8004af8 <HAL_TIM_MspPostInit+0xf0>)
 8004a9a:	f043 0302 	orr.w	r3, r3, #2
 8004a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aa0:	4b15      	ldr	r3, [pc, #84]	@ (8004af8 <HAL_TIM_MspPostInit+0xf0>)
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8004aac:	23c0      	movs	r3, #192	@ 0xc0
 8004aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004abc:	2302      	movs	r3, #2
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	480d      	ldr	r0, [pc, #52]	@ (8004afc <HAL_TIM_MspPostInit+0xf4>)
 8004ac8:	f001 f8f0 	bl	8005cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 8004acc:	2303      	movs	r3, #3
 8004ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004adc:	2302      	movs	r3, #2
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4807      	ldr	r0, [pc, #28]	@ (8004b04 <HAL_TIM_MspPostInit+0xfc>)
 8004ae8:	f001 f8e0 	bl	8005cac <HAL_GPIO_Init>
}
 8004aec:	bf00      	nop
 8004aee:	3728      	adds	r7, #40	@ 0x28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40020000 	.word	0x40020000
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40020400 	.word	0x40020400

08004b08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	@ 0x28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b10:	f107 0314 	add.w	r3, r7, #20
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1d      	ldr	r2, [pc, #116]	@ (8004b9c <HAL_UART_MspInit+0x94>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d134      	bne.n	8004b94 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba0 <HAL_UART_MspInit+0x98>)
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba0 <HAL_UART_MspInit+0x98>)
 8004b34:	f043 0320 	orr.w	r3, r3, #32
 8004b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b3a:	4b19      	ldr	r3, [pc, #100]	@ (8004ba0 <HAL_UART_MspInit+0x98>)
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <HAL_UART_MspInit+0x98>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ba0 <HAL_UART_MspInit+0x98>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b56:	4b12      	ldr	r3, [pc, #72]	@ (8004ba0 <HAL_UART_MspInit+0x98>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8004b62:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b70:	2303      	movs	r3, #3
 8004b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004b74:	2308      	movs	r3, #8
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b78:	f107 0314 	add.w	r3, r7, #20
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4809      	ldr	r0, [pc, #36]	@ (8004ba4 <HAL_UART_MspInit+0x9c>)
 8004b80:	f001 f894 	bl	8005cac <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8004b84:	2200      	movs	r2, #0
 8004b86:	2106      	movs	r1, #6
 8004b88:	2047      	movs	r0, #71	@ 0x47
 8004b8a:	f000 ffc6 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004b8e:	2047      	movs	r0, #71	@ 0x47
 8004b90:	f000 ffdf 	bl	8005b52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8004b94:	bf00      	nop
 8004b96:	3728      	adds	r7, #40	@ 0x28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40011400 	.word	0x40011400
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	40020000 	.word	0x40020000

08004ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <NMI_Handler+0x4>

08004bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <HardFault_Handler+0x4>

08004bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bbc:	bf00      	nop
 8004bbe:	e7fd      	b.n	8004bbc <MemManage_Handler+0x4>

08004bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bc4:	bf00      	nop
 8004bc6:	e7fd      	b.n	8004bc4 <BusFault_Handler+0x4>

08004bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bcc:	bf00      	nop
 8004bce:	e7fd      	b.n	8004bcc <UsageFault_Handler+0x4>

08004bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bfe:	f000 fa7b 	bl	80050f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8004c0a:	2002      	movs	r0, #2
 8004c0c:	f001 fa06 	bl	800601c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004c10:	bf00      	nop
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c18:	4802      	ldr	r0, [pc, #8]	@ (8004c24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004c1a:	f002 ff31 	bl	8007a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200002cc 	.word	0x200002cc

08004c28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8004c2c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004c30:	f001 f9f4 	bl	800601c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c34:	bf00      	nop
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004c3c:	4802      	ldr	r0, [pc, #8]	@ (8004c48 <USART6_IRQHandler+0x10>)
 8004c3e:	f003 fe4d 	bl	80088dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004c42:	bf00      	nop
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200003ec 	.word	0x200003ec

08004c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return 1;
 8004c50:	2301      	movs	r3, #1
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <_kill>:

int _kill(int pid, int sig)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c66:	f005 fb91 	bl	800a38c <__errno>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2216      	movs	r2, #22
 8004c6e:	601a      	str	r2, [r3, #0]
  return -1;
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <_exit>:

void _exit (int status)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c84:	f04f 31ff 	mov.w	r1, #4294967295
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ffe7 	bl	8004c5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c8e:	bf00      	nop
 8004c90:	e7fd      	b.n	8004c8e <_exit+0x12>

08004c92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b086      	sub	sp, #24
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	e00a      	b.n	8004cba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ca4:	f3af 8000 	nop.w
 8004ca8:	4601      	mov	r1, r0
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	60ba      	str	r2, [r7, #8]
 8004cb0:	b2ca      	uxtb	r2, r1
 8004cb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	dbf0      	blt.n	8004ca4 <_read+0x12>
  }

  return len;
 8004cc2:	687b      	ldr	r3, [r7, #4]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	e009      	b.n	8004cf2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	60ba      	str	r2, [r7, #8]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	dbf1      	blt.n	8004cde <_write+0x12>
  }
  return len;
 8004cfa:	687b      	ldr	r3, [r7, #4]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <_close>:

int _close(int file)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d2c:	605a      	str	r2, [r3, #4]
  return 0;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <_isatty>:

int _isatty(int file)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d44:	2301      	movs	r3, #1
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d74:	4a14      	ldr	r2, [pc, #80]	@ (8004dc8 <_sbrk+0x5c>)
 8004d76:	4b15      	ldr	r3, [pc, #84]	@ (8004dcc <_sbrk+0x60>)
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d80:	4b13      	ldr	r3, [pc, #76]	@ (8004dd0 <_sbrk+0x64>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d88:	4b11      	ldr	r3, [pc, #68]	@ (8004dd0 <_sbrk+0x64>)
 8004d8a:	4a12      	ldr	r2, [pc, #72]	@ (8004dd4 <_sbrk+0x68>)
 8004d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d8e:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <_sbrk+0x64>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d207      	bcs.n	8004dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d9c:	f005 faf6 	bl	800a38c <__errno>
 8004da0:	4603      	mov	r3, r0
 8004da2:	220c      	movs	r2, #12
 8004da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004da6:	f04f 33ff 	mov.w	r3, #4294967295
 8004daa:	e009      	b.n	8004dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dac:	4b08      	ldr	r3, [pc, #32]	@ (8004dd0 <_sbrk+0x64>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004db2:	4b07      	ldr	r3, [pc, #28]	@ (8004dd0 <_sbrk+0x64>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	4a05      	ldr	r2, [pc, #20]	@ (8004dd0 <_sbrk+0x64>)
 8004dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20020000 	.word	0x20020000
 8004dcc:	00000400 	.word	0x00000400
 8004dd0:	20001d8c 	.word	0x20001d8c
 8004dd4:	20001ee0 	.word	0x20001ee0

08004dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ddc:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <SystemInit+0x20>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de2:	4a05      	ldr	r2, [pc, #20]	@ (8004df8 <SystemInit+0x20>)
 8004de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	460a      	mov	r2, r1
 8004e06:	71fb      	strb	r3, [r7, #7]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bf14      	ite	ne
 8004e12:	2301      	movne	r3, #1
 8004e14:	2300      	moveq	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	2110      	movs	r1, #16
 8004e1c:	4808      	ldr	r0, [pc, #32]	@ (8004e40 <led_status+0x44>)
 8004e1e:	f001 f8c9 	bl	8005fb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004e22:	79bb      	ldrb	r3, [r7, #6]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2120      	movs	r1, #32
 8004e32:	4803      	ldr	r0, [pc, #12]	@ (8004e40 <led_status+0x44>)
 8004e34:	f001 f8be 	bl	8005fb4 <HAL_GPIO_WritePin>
}
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40020400 	.word	0x40020400

08004e44 <led_sequence_startup>:

/**
 * @brief LED sequence for different states
 */
void led_sequence_startup(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	e010      	b.n	8004e72 <led_sequence_startup+0x2e>
        led_status(1, 0);
 8004e50:	2100      	movs	r1, #0
 8004e52:	2001      	movs	r0, #1
 8004e54:	f7ff ffd2 	bl	8004dfc <led_status>
        HAL_Delay(150);
 8004e58:	2096      	movs	r0, #150	@ 0x96
 8004e5a:	f000 f96d 	bl	8005138 <HAL_Delay>
        led_status(0, 1);
 8004e5e:	2101      	movs	r1, #1
 8004e60:	2000      	movs	r0, #0
 8004e62:	f7ff ffcb 	bl	8004dfc <led_status>
        HAL_Delay(150);
 8004e66:	2096      	movs	r0, #150	@ 0x96
 8004e68:	f000 f966 	bl	8005138 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	ddeb      	ble.n	8004e50 <led_sequence_startup+0xc>
    }
    led_status(0, 0);
 8004e78:	2100      	movs	r1, #0
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7ff ffbe 	bl	8004dfc <led_status>
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <led_sequence_exploring>:

/**
 * @brief LED sequence for exploration
 */
void led_sequence_exploring(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
    led_status(1, 0); // Left LED on during exploration
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	2001      	movs	r0, #1
 8004e90:	f7ff ffb4 	bl	8004dfc <led_status>
}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <led_sequence_returning>:

/**
 * @brief LED sequence for returning
 */
void led_sequence_returning(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
    led_status(0, 1); // Right LED on during return
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	f7ff ffac 	bl	8004dfc <led_status>
}
 8004ea4:	bf00      	nop
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <led_sequence_complete>:

/**
 * @brief LED sequence for completion
 */
void led_sequence_complete(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 8004eae:	2300      	movs	r3, #0
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	e010      	b.n	8004ed6 <led_sequence_complete+0x2e>
        led_status(1, 1);
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f7ff ffa0 	bl	8004dfc <led_status>
        HAL_Delay(200);
 8004ebc:	20c8      	movs	r0, #200	@ 0xc8
 8004ebe:	f000 f93b 	bl	8005138 <HAL_Delay>
        led_status(0, 0);
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f7ff ff99 	bl	8004dfc <led_status>
        HAL_Delay(200);
 8004eca:	20c8      	movs	r0, #200	@ 0xc8
 8004ecc:	f000 f934 	bl	8005138 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	ddeb      	ble.n	8004eb4 <led_sequence_complete+0xc>
    }
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <led_sequence_error>:

/**
 * @brief LED sequence for error
 */
void led_sequence_error(void)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {
 8004eec:	2300      	movs	r3, #0
 8004eee:	607b      	str	r3, [r7, #4]
 8004ef0:	e010      	b.n	8004f14 <led_sequence_error+0x2e>
        led_status(1, 1);
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	f7ff ff81 	bl	8004dfc <led_status>
        HAL_Delay(50);
 8004efa:	2032      	movs	r0, #50	@ 0x32
 8004efc:	f000 f91c 	bl	8005138 <HAL_Delay>
        led_status(0, 0);
 8004f00:	2100      	movs	r1, #0
 8004f02:	2000      	movs	r0, #0
 8004f04:	f7ff ff7a 	bl	8004dfc <led_status>
        HAL_Delay(50);
 8004f08:	2032      	movs	r0, #50	@ 0x32
 8004f0a:	f000 f915 	bl	8005138 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3301      	adds	r3, #1
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b09      	cmp	r3, #9
 8004f18:	ddeb      	ble.n	8004ef2 <led_sequence_error+0xc>
    }
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <get_direction_name>:

/**
 * @brief Get direction name as string
 */
const char* get_direction_name(int direction)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
    switch (direction) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d812      	bhi.n	8004f58 <get_direction_name+0x34>
 8004f32:	a201      	add	r2, pc, #4	@ (adr r2, 8004f38 <get_direction_name+0x14>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f55 	.word	0x08004f55
        case NORTH: return "NORTH";
 8004f48:	4b07      	ldr	r3, [pc, #28]	@ (8004f68 <get_direction_name+0x44>)
 8004f4a:	e006      	b.n	8004f5a <get_direction_name+0x36>
        case EAST:  return "EAST";
 8004f4c:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <get_direction_name+0x48>)
 8004f4e:	e004      	b.n	8004f5a <get_direction_name+0x36>
        case SOUTH: return "SOUTH";
 8004f50:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <get_direction_name+0x4c>)
 8004f52:	e002      	b.n	8004f5a <get_direction_name+0x36>
        case WEST:  return "WEST";
 8004f54:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <get_direction_name+0x50>)
 8004f56:	e000      	b.n	8004f5a <get_direction_name+0x36>
        default:    return "UNKNOWN";
 8004f58:	4b07      	ldr	r3, [pc, #28]	@ (8004f78 <get_direction_name+0x54>)
    }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	0800e1d0 	.word	0x0800e1d0
 8004f6c:	0800e1d8 	.word	0x0800e1d8
 8004f70:	0800e1e0 	.word	0x0800e1e0
 8004f74:	0800e1e8 	.word	0x0800e1e8
 8004f78:	0800e1f0 	.word	0x0800e1f0

08004f7c <system_health_check>:

/**
 * @brief System health check
 */
bool system_health_check(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
    bool health_ok = true;
 8004f82:	2301      	movs	r3, #1
 8004f84:	71fb      	strb	r3, [r7, #7]

    // Check battery voltage
    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 8004f86:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff0 <system_health_check+0x74>)
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d806      	bhi.n	8004fa0 <system_health_check+0x24>
        send_bluetooth_message("WARNING: Low battery detected!\r\n");
 8004f92:	4818      	ldr	r0, [pc, #96]	@ (8004ff4 <system_health_check+0x78>)
 8004f94:	f7fc f894 	bl	80010c0 <send_bluetooth_message>
        play_battery_warning();
 8004f98:	f7fc f877 	bl	800108a <play_battery_warning>
        health_ok = false;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	71fb      	strb	r3, [r7, #7]
    }

    // Check sensor readings
    if (sensors.front_left == 0 && sensors.front_right == 0 &&
 8004fa0:	4b13      	ldr	r3, [pc, #76]	@ (8004ff0 <system_health_check+0x74>)
 8004fa2:	891b      	ldrh	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d110      	bne.n	8004fca <system_health_check+0x4e>
 8004fa8:	4b11      	ldr	r3, [pc, #68]	@ (8004ff0 <system_health_check+0x74>)
 8004faa:	885b      	ldrh	r3, [r3, #2]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10c      	bne.n	8004fca <system_health_check+0x4e>
        sensors.side_left == 0 && sensors.side_right == 0) {
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff0 <system_health_check+0x74>)
 8004fb2:	88db      	ldrh	r3, [r3, #6]
    if (sensors.front_left == 0 && sensors.front_right == 0 &&
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d108      	bne.n	8004fca <system_health_check+0x4e>
        sensors.side_left == 0 && sensors.side_right == 0) {
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <system_health_check+0x74>)
 8004fba:	889b      	ldrh	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d104      	bne.n	8004fca <system_health_check+0x4e>
        send_bluetooth_message("WARNING: All sensors reading zero!\r\n");
 8004fc0:	480d      	ldr	r0, [pc, #52]	@ (8004ff8 <system_health_check+0x7c>)
 8004fc2:	f7fc f87d 	bl	80010c0 <send_bluetooth_message>
        health_ok = false;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	71fb      	strb	r3, [r7, #7]
    }

    // Check gyroscope communication
    uint8_t gyro_id = mpu9250_read_register(0x75);
 8004fca:	2075      	movs	r0, #117	@ 0x75
 8004fcc:	f7fc fa5a 	bl	8001484 <mpu9250_read_register>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	71bb      	strb	r3, [r7, #6]
    if (gyro_id != 0x71) {
 8004fd4:	79bb      	ldrb	r3, [r7, #6]
 8004fd6:	2b71      	cmp	r3, #113	@ 0x71
 8004fd8:	d004      	beq.n	8004fe4 <system_health_check+0x68>
        send_bluetooth_message("WARNING: Gyroscope communication issue!\r\n");
 8004fda:	4808      	ldr	r0, [pc, #32]	@ (8004ffc <system_health_check+0x80>)
 8004fdc:	f7fc f870 	bl	80010c0 <send_bluetooth_message>
        health_ok = false;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	71fb      	strb	r3, [r7, #7]
    }

    return health_ok;
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20001448 	.word	0x20001448
 8004ff4:	0800e1f8 	.word	0x0800e1f8
 8004ff8:	0800e21c 	.word	0x0800e21c
 8004ffc:	0800e244 	.word	0x0800e244

08005000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005000:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005038 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005004:	f7ff fee8 	bl	8004dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005008:	480c      	ldr	r0, [pc, #48]	@ (800503c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800500a:	490d      	ldr	r1, [pc, #52]	@ (8005040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800500c:	4a0d      	ldr	r2, [pc, #52]	@ (8005044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800500e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005010:	e002      	b.n	8005018 <LoopCopyDataInit>

08005012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005016:	3304      	adds	r3, #4

08005018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800501a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800501c:	d3f9      	bcc.n	8005012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800501e:	4a0a      	ldr	r2, [pc, #40]	@ (8005048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005020:	4c0a      	ldr	r4, [pc, #40]	@ (800504c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005024:	e001      	b.n	800502a <LoopFillZerobss>

08005026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005028:	3204      	adds	r2, #4

0800502a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800502a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800502c:	d3fb      	bcc.n	8005026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800502e:	f005 f9b3 	bl	800a398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005032:	f7fc fe97 	bl	8001d64 <main>
  bx  lr    
 8005036:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800503c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005040:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8005044:	0800e644 	.word	0x0800e644
  ldr r2, =_sbss
 8005048:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800504c:	20001ee0 	.word	0x20001ee0

08005050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005050:	e7fe      	b.n	8005050 <ADC_IRQHandler>
	...

08005054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005058:	4b0e      	ldr	r3, [pc, #56]	@ (8005094 <HAL_Init+0x40>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0d      	ldr	r2, [pc, #52]	@ (8005094 <HAL_Init+0x40>)
 800505e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005064:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <HAL_Init+0x40>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a0a      	ldr	r2, [pc, #40]	@ (8005094 <HAL_Init+0x40>)
 800506a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800506e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005070:	4b08      	ldr	r3, [pc, #32]	@ (8005094 <HAL_Init+0x40>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a07      	ldr	r2, [pc, #28]	@ (8005094 <HAL_Init+0x40>)
 8005076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800507a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800507c:	2003      	movs	r0, #3
 800507e:	f000 fd41 	bl	8005b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005082:	200f      	movs	r0, #15
 8005084:	f000 f808 	bl	8005098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005088:	f7ff fb32 	bl	80046f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40023c00 	.word	0x40023c00

08005098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050a0:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <HAL_InitTick+0x54>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <HAL_InitTick+0x58>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fd59 	bl	8005b6e <HAL_SYSTICK_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e00e      	b.n	80050e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b0f      	cmp	r3, #15
 80050ca:	d80a      	bhi.n	80050e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050cc:	2200      	movs	r2, #0
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295
 80050d4:	f000 fd21 	bl	8005b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050d8:	4a06      	ldr	r2, [pc, #24]	@ (80050f4 <HAL_InitTick+0x5c>)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000024 	.word	0x20000024
 80050f0:	2000002c 	.word	0x2000002c
 80050f4:	20000028 	.word	0x20000028

080050f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <HAL_IncTick+0x20>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <HAL_IncTick+0x24>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4413      	add	r3, r2
 8005108:	4a04      	ldr	r2, [pc, #16]	@ (800511c <HAL_IncTick+0x24>)
 800510a:	6013      	str	r3, [r2, #0]
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	2000002c 	.word	0x2000002c
 800511c:	20001d90 	.word	0x20001d90

08005120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return uwTick;
 8005124:	4b03      	ldr	r3, [pc, #12]	@ (8005134 <HAL_GetTick+0x14>)
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20001d90 	.word	0x20001d90

08005138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005140:	f7ff ffee 	bl	8005120 <HAL_GetTick>
 8005144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d005      	beq.n	800515e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005152:	4b0a      	ldr	r3, [pc, #40]	@ (800517c <HAL_Delay+0x44>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800515e:	bf00      	nop
 8005160:	f7ff ffde 	bl	8005120 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	429a      	cmp	r2, r3
 800516e:	d8f7      	bhi.n	8005160 <HAL_Delay+0x28>
  {
  }
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	2000002c 	.word	0x2000002c

08005180 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e033      	b.n	80051fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff face 	bl	8004740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d118      	bne.n	80051f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80051c6:	f023 0302 	bic.w	r3, r3, #2
 80051ca:	f043 0202 	orr.w	r2, r3, #2
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 faca 	bl	800576c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	f043 0201 	orr.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80051ee:	e001      	b.n	80051f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_ADC_Start+0x1a>
 800521e:	2302      	movs	r3, #2
 8005220:	e097      	b.n	8005352 <HAL_ADC_Start+0x14a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d018      	beq.n	800526a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005248:	4b45      	ldr	r3, [pc, #276]	@ (8005360 <HAL_ADC_Start+0x158>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a45      	ldr	r2, [pc, #276]	@ (8005364 <HAL_ADC_Start+0x15c>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	0c9a      	lsrs	r2, r3, #18
 8005254:	4613      	mov	r3, r2
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	4413      	add	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800525c:	e002      	b.n	8005264 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	3b01      	subs	r3, #1
 8005262:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f9      	bne.n	800525e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d15f      	bne.n	8005338 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80052a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b6:	d106      	bne.n	80052c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052bc:	f023 0206 	bic.w	r2, r3, #6
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80052c4:	e002      	b.n	80052cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052d4:	4b24      	ldr	r3, [pc, #144]	@ (8005368 <HAL_ADC_Start+0x160>)
 80052d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80052e0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 031f 	and.w	r3, r3, #31
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10f      	bne.n	800530e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d129      	bne.n	8005350 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800530a:	609a      	str	r2, [r3, #8]
 800530c:	e020      	b.n	8005350 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a16      	ldr	r2, [pc, #88]	@ (800536c <HAL_ADC_Start+0x164>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d11b      	bne.n	8005350 <HAL_ADC_Start+0x148>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d114      	bne.n	8005350 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005334:	609a      	str	r2, [r3, #8]
 8005336:	e00b      	b.n	8005350 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533c:	f043 0210 	orr.w	r2, r3, #16
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005348:	f043 0201 	orr.w	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000024 	.word	0x20000024
 8005364:	431bde83 	.word	0x431bde83
 8005368:	40012300 	.word	0x40012300
 800536c:	40012000 	.word	0x40012000

08005370 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_ADC_Stop+0x16>
 8005382:	2302      	movs	r3, #2
 8005384:	e021      	b.n	80053ca <HAL_ADC_Stop+0x5a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	f043 0201 	orr.w	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f2:	d113      	bne.n	800541c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80053fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005402:	d10b      	bne.n	800541c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e063      	b.n	80054e4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800541c:	f7ff fe80 	bl	8005120 <HAL_GetTick>
 8005420:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005422:	e021      	b.n	8005468 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d01d      	beq.n	8005468 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_ADC_PollForConversion+0x6c>
 8005432:	f7ff fe75 	bl	8005120 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d212      	bcs.n	8005468 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d00b      	beq.n	8005468 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005454:	f043 0204 	orr.w	r2, r3, #4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e03d      	b.n	80054e4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d1d6      	bne.n	8005424 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f06f 0212 	mvn.w	r2, #18
 800547e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d123      	bne.n	80054e2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d11f      	bne.n	80054e2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d006      	beq.n	80054be <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d111      	bne.n	80054e2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d105      	bne.n	80054e2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x1c>
 8005520:	2302      	movs	r3, #2
 8005522:	e113      	b.n	800574c <HAL_ADC_ConfigChannel+0x244>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b09      	cmp	r3, #9
 8005532:	d925      	bls.n	8005580 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68d9      	ldr	r1, [r3, #12]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	4613      	mov	r3, r2
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	4413      	add	r3, r2
 8005548:	3b1e      	subs	r3, #30
 800554a:	2207      	movs	r2, #7
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	43da      	mvns	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	400a      	ands	r2, r1
 8005558:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68d9      	ldr	r1, [r3, #12]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	4618      	mov	r0, r3
 800556c:	4603      	mov	r3, r0
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	4403      	add	r3, r0
 8005572:	3b1e      	subs	r3, #30
 8005574:	409a      	lsls	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	e022      	b.n	80055c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6919      	ldr	r1, [r3, #16]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	4613      	mov	r3, r2
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	4413      	add	r3, r2
 8005594:	2207      	movs	r2, #7
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43da      	mvns	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	400a      	ands	r2, r1
 80055a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6919      	ldr	r1, [r3, #16]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	4618      	mov	r0, r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	4403      	add	r3, r0
 80055bc:	409a      	lsls	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d824      	bhi.n	8005618 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	3b05      	subs	r3, #5
 80055e0:	221f      	movs	r2, #31
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43da      	mvns	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	400a      	ands	r2, r1
 80055ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4618      	mov	r0, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	3b05      	subs	r3, #5
 800560a:	fa00 f203 	lsl.w	r2, r0, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	635a      	str	r2, [r3, #52]	@ 0x34
 8005616:	e04c      	b.n	80056b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b0c      	cmp	r3, #12
 800561e:	d824      	bhi.n	800566a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	3b23      	subs	r3, #35	@ 0x23
 8005632:	221f      	movs	r2, #31
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43da      	mvns	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	400a      	ands	r2, r1
 8005640:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
 800564e:	4618      	mov	r0, r3
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	3b23      	subs	r3, #35	@ 0x23
 800565c:	fa00 f203 	lsl.w	r2, r0, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	631a      	str	r2, [r3, #48]	@ 0x30
 8005668:	e023      	b.n	80056b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	3b41      	subs	r3, #65	@ 0x41
 800567c:	221f      	movs	r2, #31
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43da      	mvns	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	400a      	ands	r2, r1
 800568a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	4618      	mov	r0, r3
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	3b41      	subs	r3, #65	@ 0x41
 80056a6:	fa00 f203 	lsl.w	r2, r0, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056b2:	4b29      	ldr	r3, [pc, #164]	@ (8005758 <HAL_ADC_ConfigChannel+0x250>)
 80056b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a28      	ldr	r2, [pc, #160]	@ (800575c <HAL_ADC_ConfigChannel+0x254>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10f      	bne.n	80056e0 <HAL_ADC_ConfigChannel+0x1d8>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b12      	cmp	r3, #18
 80056c6:	d10b      	bne.n	80056e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	@ (800575c <HAL_ADC_ConfigChannel+0x254>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d12b      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x23a>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005760 <HAL_ADC_ConfigChannel+0x258>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <HAL_ADC_ConfigChannel+0x1f4>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b11      	cmp	r3, #17
 80056fa:	d122      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a11      	ldr	r2, [pc, #68]	@ (8005760 <HAL_ADC_ConfigChannel+0x258>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d111      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800571e:	4b11      	ldr	r3, [pc, #68]	@ (8005764 <HAL_ADC_ConfigChannel+0x25c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a11      	ldr	r2, [pc, #68]	@ (8005768 <HAL_ADC_ConfigChannel+0x260>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	0c9a      	lsrs	r2, r3, #18
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005734:	e002      	b.n	800573c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3b01      	subs	r3, #1
 800573a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f9      	bne.n	8005736 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40012300 	.word	0x40012300
 800575c:	40012000 	.word	0x40012000
 8005760:	10000012 	.word	0x10000012
 8005764:	20000024 	.word	0x20000024
 8005768:	431bde83 	.word	0x431bde83

0800576c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005774:	4b79      	ldr	r3, [pc, #484]	@ (800595c <ADC_Init+0x1f0>)
 8005776:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	431a      	orrs	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6859      	ldr	r1, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	021a      	lsls	r2, r3, #8
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80057c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6859      	ldr	r1, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6899      	ldr	r1, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fe:	4a58      	ldr	r2, [pc, #352]	@ (8005960 <ADC_Init+0x1f4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d022      	beq.n	800584a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005812:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6899      	ldr	r1, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	e00f      	b.n	800586a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005868:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0202 	bic.w	r2, r2, #2
 8005878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6899      	ldr	r1, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	7e1b      	ldrb	r3, [r3, #24]
 8005884:	005a      	lsls	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01b      	beq.n	80058d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80058b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c2:	3b01      	subs	r3, #1
 80058c4:	035a      	lsls	r2, r3, #13
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	e007      	b.n	80058e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80058ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	051a      	lsls	r2, r3, #20
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6899      	ldr	r1, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005922:	025a      	lsls	r2, r3, #9
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800593a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6899      	ldr	r1, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	029a      	lsls	r2, r3, #10
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40012300 	.word	0x40012300
 8005960:	0f000001 	.word	0x0f000001

08005964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005974:	4b0c      	ldr	r3, [pc, #48]	@ (80059a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005980:	4013      	ands	r3, r2
 8005982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800598c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005996:	4a04      	ldr	r2, [pc, #16]	@ (80059a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	60d3      	str	r3, [r2, #12]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	e000ed00 	.word	0xe000ed00

080059ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059b0:	4b04      	ldr	r3, [pc, #16]	@ (80059c4 <__NVIC_GetPriorityGrouping+0x18>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	f003 0307 	and.w	r3, r3, #7
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	db0b      	blt.n	80059f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	f003 021f 	and.w	r2, r3, #31
 80059e0:	4907      	ldr	r1, [pc, #28]	@ (8005a00 <__NVIC_EnableIRQ+0x38>)
 80059e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	2001      	movs	r0, #1
 80059ea:	fa00 f202 	lsl.w	r2, r0, r2
 80059ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e100 	.word	0xe000e100

08005a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	6039      	str	r1, [r7, #0]
 8005a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	db0a      	blt.n	8005a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	490c      	ldr	r1, [pc, #48]	@ (8005a50 <__NVIC_SetPriority+0x4c>)
 8005a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a22:	0112      	lsls	r2, r2, #4
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	440b      	add	r3, r1
 8005a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a2c:	e00a      	b.n	8005a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	4908      	ldr	r1, [pc, #32]	@ (8005a54 <__NVIC_SetPriority+0x50>)
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	3b04      	subs	r3, #4
 8005a3c:	0112      	lsls	r2, r2, #4
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	440b      	add	r3, r1
 8005a42:	761a      	strb	r2, [r3, #24]
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	e000e100 	.word	0xe000e100
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b089      	sub	sp, #36	@ 0x24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f1c3 0307 	rsb	r3, r3, #7
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	bf28      	it	cs
 8005a76:	2304      	movcs	r3, #4
 8005a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	2b06      	cmp	r3, #6
 8005a80:	d902      	bls.n	8005a88 <NVIC_EncodePriority+0x30>
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3b03      	subs	r3, #3
 8005a86:	e000      	b.n	8005a8a <NVIC_EncodePriority+0x32>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43da      	mvns	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aaa:	43d9      	mvns	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab0:	4313      	orrs	r3, r2
         );
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3724      	adds	r7, #36	@ 0x24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ad0:	d301      	bcc.n	8005ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e00f      	b.n	8005af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8005b00 <SysTick_Config+0x40>)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ade:	210f      	movs	r1, #15
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	f7ff ff8e 	bl	8005a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ae8:	4b05      	ldr	r3, [pc, #20]	@ (8005b00 <SysTick_Config+0x40>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aee:	4b04      	ldr	r3, [pc, #16]	@ (8005b00 <SysTick_Config+0x40>)
 8005af0:	2207      	movs	r2, #7
 8005af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000e010 	.word	0xe000e010

08005b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff ff29 	bl	8005964 <__NVIC_SetPriorityGrouping>
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	4603      	mov	r3, r0
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b2c:	f7ff ff3e 	bl	80059ac <__NVIC_GetPriorityGrouping>
 8005b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	6978      	ldr	r0, [r7, #20]
 8005b38:	f7ff ff8e 	bl	8005a58 <NVIC_EncodePriority>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b42:	4611      	mov	r1, r2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ff5d 	bl	8005a04 <__NVIC_SetPriority>
}
 8005b4a:	bf00      	nop
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	4603      	mov	r3, r0
 8005b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff ff31 	bl	80059c8 <__NVIC_EnableIRQ>
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff ffa2 	bl	8005ac0 <SysTick_Config>
 8005b7c:	4603      	mov	r3, r0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b94:	f7ff fac4 	bl	8005120 <HAL_GetTick>
 8005b98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d008      	beq.n	8005bb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2280      	movs	r2, #128	@ 0x80
 8005baa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e052      	b.n	8005c5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0216 	bic.w	r2, r2, #22
 8005bc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695a      	ldr	r2, [r3, #20]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d103      	bne.n	8005be8 <HAL_DMA_Abort+0x62>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d007      	beq.n	8005bf8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0208 	bic.w	r2, r2, #8
 8005bf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c08:	e013      	b.n	8005c32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c0a:	f7ff fa89 	bl	8005120 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b05      	cmp	r3, #5
 8005c16:	d90c      	bls.n	8005c32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2203      	movs	r2, #3
 8005c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e015      	b.n	8005c5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e4      	bne.n	8005c0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c44:	223f      	movs	r2, #63	@ 0x3f
 8005c46:	409a      	lsls	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d004      	beq.n	8005c84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2280      	movs	r2, #128	@ 0x80
 8005c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e00c      	b.n	8005c9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2205      	movs	r2, #5
 8005c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	@ 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	e159      	b.n	8005f7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cc8:	2201      	movs	r2, #1
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	f040 8148 	bne.w	8005f76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d005      	beq.n	8005cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d130      	bne.n	8005d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	2203      	movs	r2, #3
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d34:	2201      	movs	r2, #1
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4013      	ands	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 0201 	and.w	r2, r3, #1
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d017      	beq.n	8005d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	2203      	movs	r2, #3
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4013      	ands	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d123      	bne.n	8005df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	08da      	lsrs	r2, r3, #3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3208      	adds	r2, #8
 8005db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	220f      	movs	r2, #15
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	08da      	lsrs	r2, r3, #3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3208      	adds	r2, #8
 8005dea:	69b9      	ldr	r1, [r7, #24]
 8005dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	43db      	mvns	r3, r3
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	4013      	ands	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f003 0203 	and.w	r2, r3, #3
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80a2 	beq.w	8005f76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	4b57      	ldr	r3, [pc, #348]	@ (8005f94 <HAL_GPIO_Init+0x2e8>)
 8005e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3a:	4a56      	ldr	r2, [pc, #344]	@ (8005f94 <HAL_GPIO_Init+0x2e8>)
 8005e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e42:	4b54      	ldr	r3, [pc, #336]	@ (8005f94 <HAL_GPIO_Init+0x2e8>)
 8005e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e4e:	4a52      	ldr	r2, [pc, #328]	@ (8005f98 <HAL_GPIO_Init+0x2ec>)
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	089b      	lsrs	r3, r3, #2
 8005e54:	3302      	adds	r3, #2
 8005e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	220f      	movs	r2, #15
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a49      	ldr	r2, [pc, #292]	@ (8005f9c <HAL_GPIO_Init+0x2f0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d019      	beq.n	8005eae <HAL_GPIO_Init+0x202>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a48      	ldr	r2, [pc, #288]	@ (8005fa0 <HAL_GPIO_Init+0x2f4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <HAL_GPIO_Init+0x1fe>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a47      	ldr	r2, [pc, #284]	@ (8005fa4 <HAL_GPIO_Init+0x2f8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00d      	beq.n	8005ea6 <HAL_GPIO_Init+0x1fa>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a46      	ldr	r2, [pc, #280]	@ (8005fa8 <HAL_GPIO_Init+0x2fc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <HAL_GPIO_Init+0x1f6>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a45      	ldr	r2, [pc, #276]	@ (8005fac <HAL_GPIO_Init+0x300>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <HAL_GPIO_Init+0x1f2>
 8005e9a:	2304      	movs	r3, #4
 8005e9c:	e008      	b.n	8005eb0 <HAL_GPIO_Init+0x204>
 8005e9e:	2307      	movs	r3, #7
 8005ea0:	e006      	b.n	8005eb0 <HAL_GPIO_Init+0x204>
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e004      	b.n	8005eb0 <HAL_GPIO_Init+0x204>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e002      	b.n	8005eb0 <HAL_GPIO_Init+0x204>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e000      	b.n	8005eb0 <HAL_GPIO_Init+0x204>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	f002 0203 	and.w	r2, r2, #3
 8005eb6:	0092      	lsls	r2, r2, #2
 8005eb8:	4093      	lsls	r3, r2
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ec0:	4935      	ldr	r1, [pc, #212]	@ (8005f98 <HAL_GPIO_Init+0x2ec>)
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	089b      	lsrs	r3, r3, #2
 8005ec6:	3302      	adds	r3, #2
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ece:	4b38      	ldr	r3, [pc, #224]	@ (8005fb0 <HAL_GPIO_Init+0x304>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4013      	ands	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb0 <HAL_GPIO_Init+0x304>)
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb0 <HAL_GPIO_Init+0x304>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f1c:	4a24      	ldr	r2, [pc, #144]	@ (8005fb0 <HAL_GPIO_Init+0x304>)
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f22:	4b23      	ldr	r3, [pc, #140]	@ (8005fb0 <HAL_GPIO_Init+0x304>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f46:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb0 <HAL_GPIO_Init+0x304>)
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f4c:	4b18      	ldr	r3, [pc, #96]	@ (8005fb0 <HAL_GPIO_Init+0x304>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	43db      	mvns	r3, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f70:	4a0f      	ldr	r2, [pc, #60]	@ (8005fb0 <HAL_GPIO_Init+0x304>)
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	2b0f      	cmp	r3, #15
 8005f80:	f67f aea2 	bls.w	8005cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	3724      	adds	r7, #36	@ 0x24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40023800 	.word	0x40023800
 8005f98:	40013800 	.word	0x40013800
 8005f9c:	40020000 	.word	0x40020000
 8005fa0:	40020400 	.word	0x40020400
 8005fa4:	40020800 	.word	0x40020800
 8005fa8:	40020c00 	.word	0x40020c00
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	40013c00 	.word	0x40013c00

08005fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	807b      	strh	r3, [r7, #2]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fc4:	787b      	ldrb	r3, [r7, #1]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fca:	887a      	ldrh	r2, [r7, #2]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fd0:	e003      	b.n	8005fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fd2:	887b      	ldrh	r3, [r7, #2]
 8005fd4:	041a      	lsls	r2, r3, #16
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	619a      	str	r2, [r3, #24]
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ff8:	887a      	ldrh	r2, [r7, #2]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	041a      	lsls	r2, r3, #16
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	43d9      	mvns	r1, r3
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	400b      	ands	r3, r1
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	619a      	str	r2, [r3, #24]
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006026:	4b08      	ldr	r3, [pc, #32]	@ (8006048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	4013      	ands	r3, r2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d006      	beq.n	8006040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006032:	4a05      	ldr	r2, [pc, #20]	@ (8006048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	4618      	mov	r0, r3
 800603c:	f7fc fb34 	bl	80026a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40013c00 	.word	0x40013c00

0800604c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e267      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d075      	beq.n	8006156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800606a:	4b88      	ldr	r3, [pc, #544]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 030c 	and.w	r3, r3, #12
 8006072:	2b04      	cmp	r3, #4
 8006074:	d00c      	beq.n	8006090 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006076:	4b85      	ldr	r3, [pc, #532]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800607e:	2b08      	cmp	r3, #8
 8006080:	d112      	bne.n	80060a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006082:	4b82      	ldr	r3, [pc, #520]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800608a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800608e:	d10b      	bne.n	80060a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006090:	4b7e      	ldr	r3, [pc, #504]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d05b      	beq.n	8006154 <HAL_RCC_OscConfig+0x108>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d157      	bne.n	8006154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e242      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b0:	d106      	bne.n	80060c0 <HAL_RCC_OscConfig+0x74>
 80060b2:	4b76      	ldr	r3, [pc, #472]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a75      	ldr	r2, [pc, #468]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e01d      	b.n	80060fc <HAL_RCC_OscConfig+0xb0>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060c8:	d10c      	bne.n	80060e4 <HAL_RCC_OscConfig+0x98>
 80060ca:	4b70      	ldr	r3, [pc, #448]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a6f      	ldr	r2, [pc, #444]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	4b6d      	ldr	r3, [pc, #436]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a6c      	ldr	r2, [pc, #432]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	e00b      	b.n	80060fc <HAL_RCC_OscConfig+0xb0>
 80060e4:	4b69      	ldr	r3, [pc, #420]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a68      	ldr	r2, [pc, #416]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4b66      	ldr	r3, [pc, #408]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a65      	ldr	r2, [pc, #404]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d013      	beq.n	800612c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006104:	f7ff f80c 	bl	8005120 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800610c:	f7ff f808 	bl	8005120 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b64      	cmp	r3, #100	@ 0x64
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e207      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800611e:	4b5b      	ldr	r3, [pc, #364]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0f0      	beq.n	800610c <HAL_RCC_OscConfig+0xc0>
 800612a:	e014      	b.n	8006156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612c:	f7fe fff8 	bl	8005120 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006134:	f7fe fff4 	bl	8005120 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b64      	cmp	r3, #100	@ 0x64
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e1f3      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006146:	4b51      	ldr	r3, [pc, #324]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0xe8>
 8006152:	e000      	b.n	8006156 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d063      	beq.n	800622a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006162:	4b4a      	ldr	r3, [pc, #296]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 030c 	and.w	r3, r3, #12
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00b      	beq.n	8006186 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800616e:	4b47      	ldr	r3, [pc, #284]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006176:	2b08      	cmp	r3, #8
 8006178:	d11c      	bne.n	80061b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800617a:	4b44      	ldr	r3, [pc, #272]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d116      	bne.n	80061b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006186:	4b41      	ldr	r3, [pc, #260]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_RCC_OscConfig+0x152>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d001      	beq.n	800619e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e1c7      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619e:	4b3b      	ldr	r3, [pc, #236]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4937      	ldr	r1, [pc, #220]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061b2:	e03a      	b.n	800622a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d020      	beq.n	80061fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061bc:	4b34      	ldr	r3, [pc, #208]	@ (8006290 <HAL_RCC_OscConfig+0x244>)
 80061be:	2201      	movs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c2:	f7fe ffad 	bl	8005120 <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ca:	f7fe ffa9 	bl	8005120 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e1a8      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061dc:	4b2b      	ldr	r3, [pc, #172]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0f0      	beq.n	80061ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e8:	4b28      	ldr	r3, [pc, #160]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4925      	ldr	r1, [pc, #148]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	600b      	str	r3, [r1, #0]
 80061fc:	e015      	b.n	800622a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061fe:	4b24      	ldr	r3, [pc, #144]	@ (8006290 <HAL_RCC_OscConfig+0x244>)
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006204:	f7fe ff8c 	bl	8005120 <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800620c:	f7fe ff88 	bl	8005120 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e187      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800621e:	4b1b      	ldr	r3, [pc, #108]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f0      	bne.n	800620c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d036      	beq.n	80062a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800623e:	4b15      	ldr	r3, [pc, #84]	@ (8006294 <HAL_RCC_OscConfig+0x248>)
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006244:	f7fe ff6c 	bl	8005120 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800624c:	f7fe ff68 	bl	8005120 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e167      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800625e:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f0      	beq.n	800624c <HAL_RCC_OscConfig+0x200>
 800626a:	e01b      	b.n	80062a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800626c:	4b09      	ldr	r3, [pc, #36]	@ (8006294 <HAL_RCC_OscConfig+0x248>)
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006272:	f7fe ff55 	bl	8005120 <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006278:	e00e      	b.n	8006298 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800627a:	f7fe ff51 	bl	8005120 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d907      	bls.n	8006298 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e150      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
 800628c:	40023800 	.word	0x40023800
 8006290:	42470000 	.word	0x42470000
 8006294:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006298:	4b88      	ldr	r3, [pc, #544]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800629a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1ea      	bne.n	800627a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8097 	beq.w	80063e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062b2:	2300      	movs	r3, #0
 80062b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062b6:	4b81      	ldr	r3, [pc, #516]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10f      	bne.n	80062e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	4b7d      	ldr	r3, [pc, #500]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	4a7c      	ldr	r2, [pc, #496]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80062cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062d2:	4b7a      	ldr	r3, [pc, #488]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062da:	60bb      	str	r3, [r7, #8]
 80062dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062de:	2301      	movs	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e2:	4b77      	ldr	r3, [pc, #476]	@ (80064c0 <HAL_RCC_OscConfig+0x474>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d118      	bne.n	8006320 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ee:	4b74      	ldr	r3, [pc, #464]	@ (80064c0 <HAL_RCC_OscConfig+0x474>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a73      	ldr	r2, [pc, #460]	@ (80064c0 <HAL_RCC_OscConfig+0x474>)
 80062f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062fa:	f7fe ff11 	bl	8005120 <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006302:	f7fe ff0d 	bl	8005120 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e10c      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006314:	4b6a      	ldr	r3, [pc, #424]	@ (80064c0 <HAL_RCC_OscConfig+0x474>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d106      	bne.n	8006336 <HAL_RCC_OscConfig+0x2ea>
 8006328:	4b64      	ldr	r3, [pc, #400]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800632a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632c:	4a63      	ldr	r2, [pc, #396]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	6713      	str	r3, [r2, #112]	@ 0x70
 8006334:	e01c      	b.n	8006370 <HAL_RCC_OscConfig+0x324>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b05      	cmp	r3, #5
 800633c:	d10c      	bne.n	8006358 <HAL_RCC_OscConfig+0x30c>
 800633e:	4b5f      	ldr	r3, [pc, #380]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	4a5e      	ldr	r2, [pc, #376]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006344:	f043 0304 	orr.w	r3, r3, #4
 8006348:	6713      	str	r3, [r2, #112]	@ 0x70
 800634a:	4b5c      	ldr	r3, [pc, #368]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634e:	4a5b      	ldr	r2, [pc, #364]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	6713      	str	r3, [r2, #112]	@ 0x70
 8006356:	e00b      	b.n	8006370 <HAL_RCC_OscConfig+0x324>
 8006358:	4b58      	ldr	r3, [pc, #352]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635c:	4a57      	ldr	r2, [pc, #348]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	6713      	str	r3, [r2, #112]	@ 0x70
 8006364:	4b55      	ldr	r3, [pc, #340]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006368:	4a54      	ldr	r2, [pc, #336]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800636a:	f023 0304 	bic.w	r3, r3, #4
 800636e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d015      	beq.n	80063a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fe fed2 	bl	8005120 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800637e:	e00a      	b.n	8006396 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006380:	f7fe fece 	bl	8005120 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e0cb      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006396:	4b49      	ldr	r3, [pc, #292]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0ee      	beq.n	8006380 <HAL_RCC_OscConfig+0x334>
 80063a2:	e014      	b.n	80063ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a4:	f7fe febc 	bl	8005120 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ac:	f7fe feb8 	bl	8005120 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e0b5      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063c2:	4b3e      	ldr	r3, [pc, #248]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80063c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1ee      	bne.n	80063ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d105      	bne.n	80063e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063d4:	4b39      	ldr	r3, [pc, #228]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	4a38      	ldr	r2, [pc, #224]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80063da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80a1 	beq.w	800652c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063ea:	4b34      	ldr	r3, [pc, #208]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 030c 	and.w	r3, r3, #12
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d05c      	beq.n	80064b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d141      	bne.n	8006482 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fe:	4b31      	ldr	r3, [pc, #196]	@ (80064c4 <HAL_RCC_OscConfig+0x478>)
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006404:	f7fe fe8c 	bl	8005120 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640c:	f7fe fe88 	bl	8005120 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e087      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800641e:	4b27      	ldr	r3, [pc, #156]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f0      	bne.n	800640c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69da      	ldr	r2, [r3, #28]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	3b01      	subs	r3, #1
 8006444:	041b      	lsls	r3, r3, #16
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644c:	061b      	lsls	r3, r3, #24
 800644e:	491b      	ldr	r1, [pc, #108]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006450:	4313      	orrs	r3, r2
 8006452:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006454:	4b1b      	ldr	r3, [pc, #108]	@ (80064c4 <HAL_RCC_OscConfig+0x478>)
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645a:	f7fe fe61 	bl	8005120 <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006462:	f7fe fe5d 	bl	8005120 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e05c      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006474:	4b11      	ldr	r3, [pc, #68]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCC_OscConfig+0x416>
 8006480:	e054      	b.n	800652c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006482:	4b10      	ldr	r3, [pc, #64]	@ (80064c4 <HAL_RCC_OscConfig+0x478>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006488:	f7fe fe4a 	bl	8005120 <HAL_GetTick>
 800648c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006490:	f7fe fe46 	bl	8005120 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e045      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064a2:	4b06      	ldr	r3, [pc, #24]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f0      	bne.n	8006490 <HAL_RCC_OscConfig+0x444>
 80064ae:	e03d      	b.n	800652c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d107      	bne.n	80064c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e038      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
 80064bc:	40023800 	.word	0x40023800
 80064c0:	40007000 	.word	0x40007000
 80064c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006538 <HAL_RCC_OscConfig+0x4ec>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d028      	beq.n	8006528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d121      	bne.n	8006528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d11a      	bne.n	8006528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006500:	4293      	cmp	r3, r2
 8006502:	d111      	bne.n	8006528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650e:	085b      	lsrs	r3, r3, #1
 8006510:	3b01      	subs	r3, #1
 8006512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006514:	429a      	cmp	r2, r3
 8006516:	d107      	bne.n	8006528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40023800 	.word	0x40023800

0800653c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0cc      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006550:	4b68      	ldr	r3, [pc, #416]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d90c      	bls.n	8006578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655e:	4b65      	ldr	r3, [pc, #404]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006566:	4b63      	ldr	r3, [pc, #396]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0b8      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d020      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006590:	4b59      	ldr	r3, [pc, #356]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	4a58      	ldr	r2, [pc, #352]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800659a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065a8:	4b53      	ldr	r3, [pc, #332]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	4a52      	ldr	r2, [pc, #328]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b4:	4b50      	ldr	r3, [pc, #320]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	494d      	ldr	r1, [pc, #308]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d044      	beq.n	800665c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d107      	bne.n	80065ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065da:	4b47      	ldr	r3, [pc, #284]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d119      	bne.n	800661a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e07f      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d003      	beq.n	80065fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d107      	bne.n	800660a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065fa:	4b3f      	ldr	r3, [pc, #252]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e06f      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800660a:	4b3b      	ldr	r3, [pc, #236]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e067      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800661a:	4b37      	ldr	r3, [pc, #220]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f023 0203 	bic.w	r2, r3, #3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	4934      	ldr	r1, [pc, #208]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006628:	4313      	orrs	r3, r2
 800662a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800662c:	f7fe fd78 	bl	8005120 <HAL_GetTick>
 8006630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006632:	e00a      	b.n	800664a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006634:	f7fe fd74 	bl	8005120 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006642:	4293      	cmp	r3, r2
 8006644:	d901      	bls.n	800664a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e04f      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800664a:	4b2b      	ldr	r3, [pc, #172]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 020c 	and.w	r2, r3, #12
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	429a      	cmp	r2, r3
 800665a:	d1eb      	bne.n	8006634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800665c:	4b25      	ldr	r3, [pc, #148]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d20c      	bcs.n	8006684 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800666a:	4b22      	ldr	r3, [pc, #136]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006672:	4b20      	ldr	r3, [pc, #128]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d001      	beq.n	8006684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e032      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006690:	4b19      	ldr	r3, [pc, #100]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4916      	ldr	r1, [pc, #88]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066ae:	4b12      	ldr	r3, [pc, #72]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	490e      	ldr	r1, [pc, #56]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066c2:	f000 f821 	bl	8006708 <HAL_RCC_GetSysClockFreq>
 80066c6:	4602      	mov	r2, r0
 80066c8:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	490a      	ldr	r1, [pc, #40]	@ (80066fc <HAL_RCC_ClockConfig+0x1c0>)
 80066d4:	5ccb      	ldrb	r3, [r1, r3]
 80066d6:	fa22 f303 	lsr.w	r3, r2, r3
 80066da:	4a09      	ldr	r2, [pc, #36]	@ (8006700 <HAL_RCC_ClockConfig+0x1c4>)
 80066dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80066de:	4b09      	ldr	r3, [pc, #36]	@ (8006704 <HAL_RCC_ClockConfig+0x1c8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fe fcd8 	bl	8005098 <HAL_InitTick>

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40023c00 	.word	0x40023c00
 80066f8:	40023800 	.word	0x40023800
 80066fc:	0800e2a8 	.word	0x0800e2a8
 8006700:	20000024 	.word	0x20000024
 8006704:	20000028 	.word	0x20000028

08006708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800670c:	b090      	sub	sp, #64	@ 0x40
 800670e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006720:	4b59      	ldr	r3, [pc, #356]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x180>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 030c 	and.w	r3, r3, #12
 8006728:	2b08      	cmp	r3, #8
 800672a:	d00d      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0x40>
 800672c:	2b08      	cmp	r3, #8
 800672e:	f200 80a1 	bhi.w	8006874 <HAL_RCC_GetSysClockFreq+0x16c>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0x34>
 8006736:	2b04      	cmp	r3, #4
 8006738:	d003      	beq.n	8006742 <HAL_RCC_GetSysClockFreq+0x3a>
 800673a:	e09b      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800673c:	4b53      	ldr	r3, [pc, #332]	@ (800688c <HAL_RCC_GetSysClockFreq+0x184>)
 800673e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006740:	e09b      	b.n	800687a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006742:	4b53      	ldr	r3, [pc, #332]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x188>)
 8006744:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006746:	e098      	b.n	800687a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006748:	4b4f      	ldr	r3, [pc, #316]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x180>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006750:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006752:	4b4d      	ldr	r3, [pc, #308]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x180>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d028      	beq.n	80067b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800675e:	4b4a      	ldr	r3, [pc, #296]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x180>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	099b      	lsrs	r3, r3, #6
 8006764:	2200      	movs	r2, #0
 8006766:	623b      	str	r3, [r7, #32]
 8006768:	627a      	str	r2, [r7, #36]	@ 0x24
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006770:	2100      	movs	r1, #0
 8006772:	4b47      	ldr	r3, [pc, #284]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x188>)
 8006774:	fb03 f201 	mul.w	r2, r3, r1
 8006778:	2300      	movs	r3, #0
 800677a:	fb00 f303 	mul.w	r3, r0, r3
 800677e:	4413      	add	r3, r2
 8006780:	4a43      	ldr	r2, [pc, #268]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x188>)
 8006782:	fba0 1202 	umull	r1, r2, r0, r2
 8006786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006788:	460a      	mov	r2, r1
 800678a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800678c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800678e:	4413      	add	r3, r2
 8006790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006794:	2200      	movs	r2, #0
 8006796:	61bb      	str	r3, [r7, #24]
 8006798:	61fa      	str	r2, [r7, #28]
 800679a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800679e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80067a2:	f7fa fa09 	bl	8000bb8 <__aeabi_uldivmod>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4613      	mov	r3, r2
 80067ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ae:	e053      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067b0:	4b35      	ldr	r3, [pc, #212]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x180>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	099b      	lsrs	r3, r3, #6
 80067b6:	2200      	movs	r2, #0
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	617a      	str	r2, [r7, #20]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80067c2:	f04f 0b00 	mov.w	fp, #0
 80067c6:	4652      	mov	r2, sl
 80067c8:	465b      	mov	r3, fp
 80067ca:	f04f 0000 	mov.w	r0, #0
 80067ce:	f04f 0100 	mov.w	r1, #0
 80067d2:	0159      	lsls	r1, r3, #5
 80067d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067d8:	0150      	lsls	r0, r2, #5
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	ebb2 080a 	subs.w	r8, r2, sl
 80067e2:	eb63 090b 	sbc.w	r9, r3, fp
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80067f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80067f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80067fa:	ebb2 0408 	subs.w	r4, r2, r8
 80067fe:	eb63 0509 	sbc.w	r5, r3, r9
 8006802:	f04f 0200 	mov.w	r2, #0
 8006806:	f04f 0300 	mov.w	r3, #0
 800680a:	00eb      	lsls	r3, r5, #3
 800680c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006810:	00e2      	lsls	r2, r4, #3
 8006812:	4614      	mov	r4, r2
 8006814:	461d      	mov	r5, r3
 8006816:	eb14 030a 	adds.w	r3, r4, sl
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	eb45 030b 	adc.w	r3, r5, fp
 8006820:	607b      	str	r3, [r7, #4]
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800682e:	4629      	mov	r1, r5
 8006830:	028b      	lsls	r3, r1, #10
 8006832:	4621      	mov	r1, r4
 8006834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006838:	4621      	mov	r1, r4
 800683a:	028a      	lsls	r2, r1, #10
 800683c:	4610      	mov	r0, r2
 800683e:	4619      	mov	r1, r3
 8006840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006842:	2200      	movs	r2, #0
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	60fa      	str	r2, [r7, #12]
 8006848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800684c:	f7fa f9b4 	bl	8000bb8 <__aeabi_uldivmod>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4613      	mov	r3, r2
 8006856:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006858:	4b0b      	ldr	r3, [pc, #44]	@ (8006888 <HAL_RCC_GetSysClockFreq+0x180>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	3301      	adds	r3, #1
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006868:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006872:	e002      	b.n	800687a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006874:	4b05      	ldr	r3, [pc, #20]	@ (800688c <HAL_RCC_GetSysClockFreq+0x184>)
 8006876:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800687a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800687c:	4618      	mov	r0, r3
 800687e:	3740      	adds	r7, #64	@ 0x40
 8006880:	46bd      	mov	sp, r7
 8006882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006886:	bf00      	nop
 8006888:	40023800 	.word	0x40023800
 800688c:	00f42400 	.word	0x00f42400
 8006890:	017d7840 	.word	0x017d7840

08006894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006898:	4b03      	ldr	r3, [pc, #12]	@ (80068a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800689a:	681b      	ldr	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20000024 	.word	0x20000024

080068ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068b0:	f7ff fff0 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 80068b4:	4602      	mov	r2, r0
 80068b6:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	0a9b      	lsrs	r3, r3, #10
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	4903      	ldr	r1, [pc, #12]	@ (80068d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068c2:	5ccb      	ldrb	r3, [r1, r3]
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40023800 	.word	0x40023800
 80068d0:	0800e2b8 	.word	0x0800e2b8

080068d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068d8:	f7ff ffdc 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 80068dc:	4602      	mov	r2, r0
 80068de:	4b05      	ldr	r3, [pc, #20]	@ (80068f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	0b5b      	lsrs	r3, r3, #13
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	4903      	ldr	r1, [pc, #12]	@ (80068f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ea:	5ccb      	ldrb	r3, [r1, r3]
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40023800 	.word	0x40023800
 80068f8:	0800e2b8 	.word	0x0800e2b8

080068fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e07b      	b.n	8006a06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006912:	2b00      	cmp	r3, #0
 8006914:	d108      	bne.n	8006928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800691e:	d009      	beq.n	8006934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	61da      	str	r2, [r3, #28]
 8006926:	e005      	b.n	8006934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fd ff3a 	bl	80047c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800696a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b8:	ea42 0103 	orr.w	r1, r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	0c1b      	lsrs	r3, r3, #16
 80069d2:	f003 0104 	and.w	r1, r3, #4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069da:	f003 0210 	and.w	r2, r3, #16
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b088      	sub	sp, #32
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a1e:	f7fe fb7f 	bl	8005120 <HAL_GetTick>
 8006a22:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d001      	beq.n	8006a38 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006a34:	2302      	movs	r3, #2
 8006a36:	e12a      	b.n	8006c8e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_SPI_Transmit+0x36>
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e122      	b.n	8006c8e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_SPI_Transmit+0x48>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e11b      	b.n	8006c8e <HAL_SPI_Transmit+0x280>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2203      	movs	r2, #3
 8006a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	88fa      	ldrh	r2, [r7, #6]
 8006a7c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aa4:	d10f      	bne.n	8006ac6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ac4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad0:	2b40      	cmp	r3, #64	@ 0x40
 8006ad2:	d007      	beq.n	8006ae4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aec:	d152      	bne.n	8006b94 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <HAL_SPI_Transmit+0xee>
 8006af6:	8b7b      	ldrh	r3, [r7, #26]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d145      	bne.n	8006b88 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b00:	881a      	ldrh	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0c:	1c9a      	adds	r2, r3, #2
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b20:	e032      	b.n	8006b88 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d112      	bne.n	8006b56 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b34:	881a      	ldrh	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b40:	1c9a      	adds	r2, r3, #2
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b54:	e018      	b.n	8006b88 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b56:	f7fe fae3 	bl	8005120 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d803      	bhi.n	8006b6e <HAL_SPI_Transmit+0x160>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d102      	bne.n	8006b74 <HAL_SPI_Transmit+0x166>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e082      	b.n	8006c8e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1c7      	bne.n	8006b22 <HAL_SPI_Transmit+0x114>
 8006b92:	e053      	b.n	8006c3c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_SPI_Transmit+0x194>
 8006b9c:	8b7b      	ldrh	r3, [r7, #26]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d147      	bne.n	8006c32 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	330c      	adds	r3, #12
 8006bac:	7812      	ldrb	r2, [r2, #0]
 8006bae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006bc8:	e033      	b.n	8006c32 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d113      	bne.n	8006c00 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006bfe:	e018      	b.n	8006c32 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c00:	f7fe fa8e 	bl	8005120 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d803      	bhi.n	8006c18 <HAL_SPI_Transmit+0x20a>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c16:	d102      	bne.n	8006c1e <HAL_SPI_Transmit+0x210>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e02d      	b.n	8006c8e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1c6      	bne.n	8006bca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fbd9 	bl	80073f8 <SPI_EndRxTxTransaction>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
  }
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3720      	adds	r7, #32
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b088      	sub	sp, #32
 8006c9a:	af02      	add	r7, sp, #8
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d001      	beq.n	8006cb6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e104      	b.n	8006ec0 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <HAL_SPI_Receive+0x2c>
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e0fc      	b.n	8006ec0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cce:	d112      	bne.n	8006cf6 <HAL_SPI_Receive+0x60>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10e      	bne.n	8006cf6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ce0:	88fa      	ldrh	r2, [r7, #6]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	68b9      	ldr	r1, [r7, #8]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 f8eb 	bl	8006ec8 <HAL_SPI_TransmitReceive>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	e0e4      	b.n	8006ec0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cf6:	f7fe fa13 	bl	8005120 <HAL_GetTick>
 8006cfa:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <HAL_SPI_Receive+0x74>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e0da      	b.n	8006ec0 <HAL_SPI_Receive+0x22a>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2204      	movs	r2, #4
 8006d16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d58:	d10f      	bne.n	8006d7a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d84:	2b40      	cmp	r3, #64	@ 0x40
 8006d86:	d007      	beq.n	8006d98 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d170      	bne.n	8006e82 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006da0:	e035      	b.n	8006e0e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d115      	bne.n	8006ddc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f103 020c 	add.w	r2, r3, #12
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	7812      	ldrb	r2, [r2, #0]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006dda:	e018      	b.n	8006e0e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ddc:	f7fe f9a0 	bl	8005120 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d803      	bhi.n	8006df4 <HAL_SPI_Receive+0x15e>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_Receive+0x164>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e058      	b.n	8006ec0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1c4      	bne.n	8006da2 <HAL_SPI_Receive+0x10c>
 8006e18:	e038      	b.n	8006e8c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d113      	bne.n	8006e50 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e32:	b292      	uxth	r2, r2
 8006e34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3a:	1c9a      	adds	r2, r3, #2
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e4e:	e018      	b.n	8006e82 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e50:	f7fe f966 	bl	8005120 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d803      	bhi.n	8006e68 <HAL_SPI_Receive+0x1d2>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d102      	bne.n	8006e6e <HAL_SPI_Receive+0x1d8>
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e01e      	b.n	8006ec0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1c6      	bne.n	8006e1a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 fa4b 	bl	800732c <SPI_EndRxTransaction>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
  }
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08a      	sub	sp, #40	@ 0x28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eda:	f7fe f921 	bl	8005120 <HAL_GetTick>
 8006ede:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ee6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006eee:	887b      	ldrh	r3, [r7, #2]
 8006ef0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ef2:	7ffb      	ldrb	r3, [r7, #31]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d00c      	beq.n	8006f12 <HAL_SPI_TransmitReceive+0x4a>
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006efe:	d106      	bne.n	8006f0e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <HAL_SPI_TransmitReceive+0x46>
 8006f08:	7ffb      	ldrb	r3, [r7, #31]
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d001      	beq.n	8006f12 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e17f      	b.n	8007212 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_SPI_TransmitReceive+0x5c>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_SPI_TransmitReceive+0x5c>
 8006f1e:	887b      	ldrh	r3, [r7, #2]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e174      	b.n	8007212 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_SPI_TransmitReceive+0x6e>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e16d      	b.n	8007212 <HAL_SPI_TransmitReceive+0x34a>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d003      	beq.n	8006f52 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2205      	movs	r2, #5
 8006f4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	887a      	ldrh	r2, [r7, #2]
 8006f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	887a      	ldrh	r2, [r7, #2]
 8006f68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	887a      	ldrh	r2, [r7, #2]
 8006f74:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	887a      	ldrh	r2, [r7, #2]
 8006f7a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f92:	2b40      	cmp	r3, #64	@ 0x40
 8006f94:	d007      	beq.n	8006fa6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fae:	d17e      	bne.n	80070ae <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_SPI_TransmitReceive+0xf6>
 8006fb8:	8afb      	ldrh	r3, [r7, #22]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d16c      	bne.n	8007098 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc2:	881a      	ldrh	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fce:	1c9a      	adds	r2, r3, #2
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fe2:	e059      	b.n	8007098 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d11b      	bne.n	800702a <HAL_SPI_TransmitReceive+0x162>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d016      	beq.n	800702a <HAL_SPI_TransmitReceive+0x162>
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d113      	bne.n	800702a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007006:	881a      	ldrh	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b01      	cmp	r3, #1
 8007036:	d119      	bne.n	800706c <HAL_SPI_TransmitReceive+0x1a4>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d014      	beq.n	800706c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	b292      	uxth	r2, r2
 800704e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007054:	1c9a      	adds	r2, r3, #2
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007068:	2301      	movs	r3, #1
 800706a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800706c:	f7fe f858 	bl	8005120 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007078:	429a      	cmp	r2, r3
 800707a:	d80d      	bhi.n	8007098 <HAL_SPI_TransmitReceive+0x1d0>
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	d009      	beq.n	8007098 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e0bc      	b.n	8007212 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1a0      	bne.n	8006fe4 <HAL_SPI_TransmitReceive+0x11c>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d19b      	bne.n	8006fe4 <HAL_SPI_TransmitReceive+0x11c>
 80070ac:	e082      	b.n	80071b4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x1f4>
 80070b6:	8afb      	ldrh	r3, [r7, #22]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d171      	bne.n	80071a0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	330c      	adds	r3, #12
 80070c6:	7812      	ldrb	r2, [r2, #0]
 80070c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070e2:	e05d      	b.n	80071a0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d11c      	bne.n	800712c <HAL_SPI_TransmitReceive+0x264>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d017      	beq.n	800712c <HAL_SPI_TransmitReceive+0x264>
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d114      	bne.n	800712c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	330c      	adds	r3, #12
 800710c:	7812      	ldrb	r2, [r2, #0]
 800710e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b01      	cmp	r3, #1
 8007138:	d119      	bne.n	800716e <HAL_SPI_TransmitReceive+0x2a6>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d014      	beq.n	800716e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800716a:	2301      	movs	r3, #1
 800716c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800716e:	f7fd ffd7 	bl	8005120 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717a:	429a      	cmp	r2, r3
 800717c:	d803      	bhi.n	8007186 <HAL_SPI_TransmitReceive+0x2be>
 800717e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d102      	bne.n	800718c <HAL_SPI_TransmitReceive+0x2c4>
 8007186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007188:	2b00      	cmp	r3, #0
 800718a:	d109      	bne.n	80071a0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e038      	b.n	8007212 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d19c      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x21c>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d197      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071b4:	6a3a      	ldr	r2, [r7, #32]
 80071b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f91d 	bl	80073f8 <SPI_EndRxTxTransaction>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d008      	beq.n	80071d6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2220      	movs	r2, #32
 80071c8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e01d      	b.n	8007212 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007210:	2300      	movs	r3, #0
  }
}
 8007212:	4618      	mov	r0, r3
 8007214:	3728      	adds	r7, #40	@ 0x28
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4613      	mov	r3, r2
 800722a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800722c:	f7fd ff78 	bl	8005120 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	4413      	add	r3, r2
 800723a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800723c:	f7fd ff70 	bl	8005120 <HAL_GetTick>
 8007240:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007242:	4b39      	ldr	r3, [pc, #228]	@ (8007328 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	015b      	lsls	r3, r3, #5
 8007248:	0d1b      	lsrs	r3, r3, #20
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	fb02 f303 	mul.w	r3, r2, r3
 8007250:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007252:	e055      	b.n	8007300 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d051      	beq.n	8007300 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800725c:	f7fd ff60 	bl	8005120 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	429a      	cmp	r2, r3
 800726a:	d902      	bls.n	8007272 <SPI_WaitFlagStateUntilTimeout+0x56>
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d13d      	bne.n	80072ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007280:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800728a:	d111      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007294:	d004      	beq.n	80072a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800729e:	d107      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b8:	d10f      	bne.n	80072da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e018      	b.n	8007320 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	e002      	b.n	8007300 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689a      	ldr	r2, [r3, #8]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	4013      	ands	r3, r2
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	429a      	cmp	r2, r3
 800730e:	bf0c      	ite	eq
 8007310:	2301      	moveq	r3, #1
 8007312:	2300      	movne	r3, #0
 8007314:	b2db      	uxtb	r3, r3
 8007316:	461a      	mov	r2, r3
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	429a      	cmp	r2, r3
 800731c:	d19a      	bne.n	8007254 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000024 	.word	0x20000024

0800732c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007340:	d111      	bne.n	8007366 <SPI_EndRxTransaction+0x3a>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800734a:	d004      	beq.n	8007356 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007354:	d107      	bne.n	8007366 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007364:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800736e:	d12a      	bne.n	80073c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007378:	d012      	beq.n	80073a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	2180      	movs	r1, #128	@ 0x80
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff ff49 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d02d      	beq.n	80073ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007394:	f043 0220 	orr.w	r2, r3, #32
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e026      	b.n	80073ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2200      	movs	r2, #0
 80073a8:	2101      	movs	r1, #1
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7ff ff36 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01a      	beq.n	80073ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ba:	f043 0220 	orr.w	r2, r3, #32
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e013      	b.n	80073ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	2101      	movs	r1, #1
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff ff23 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e0:	f043 0220 	orr.w	r2, r3, #32
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e000      	b.n	80073ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2201      	movs	r2, #1
 800740c:	2102      	movs	r1, #2
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff ff04 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800741e:	f043 0220 	orr.w	r2, r3, #32
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e032      	b.n	8007490 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800742a:	4b1b      	ldr	r3, [pc, #108]	@ (8007498 <SPI_EndRxTxTransaction+0xa0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1b      	ldr	r2, [pc, #108]	@ (800749c <SPI_EndRxTxTransaction+0xa4>)
 8007430:	fba2 2303 	umull	r2, r3, r2, r3
 8007434:	0d5b      	lsrs	r3, r3, #21
 8007436:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800743a:	fb02 f303 	mul.w	r3, r2, r3
 800743e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007448:	d112      	bne.n	8007470 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2200      	movs	r2, #0
 8007452:	2180      	movs	r1, #128	@ 0x80
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7ff fee1 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d016      	beq.n	800748e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007464:	f043 0220 	orr.w	r2, r3, #32
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e00f      	b.n	8007490 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	3b01      	subs	r3, #1
 800747a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007486:	2b80      	cmp	r3, #128	@ 0x80
 8007488:	d0f2      	beq.n	8007470 <SPI_EndRxTxTransaction+0x78>
 800748a:	e000      	b.n	800748e <SPI_EndRxTxTransaction+0x96>
        break;
 800748c:	bf00      	nop
  }

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20000024 	.word	0x20000024
 800749c:	165e9f81 	.word	0x165e9f81

080074a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e041      	b.n	8007536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d106      	bne.n	80074cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fd f9c6 	bl	8004858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f000 fd7a 	bl	8007fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e041      	b.n	80075d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d106      	bne.n	800756a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f839 	bl	80075dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2202      	movs	r2, #2
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3304      	adds	r3, #4
 800757a:	4619      	mov	r1, r3
 800757c:	4610      	mov	r0, r2
 800757e:	f000 fd2b 	bl	8007fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d109      	bne.n	8007614 <HAL_TIM_PWM_Start+0x24>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b01      	cmp	r3, #1
 800760a:	bf14      	ite	ne
 800760c:	2301      	movne	r3, #1
 800760e:	2300      	moveq	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	e022      	b.n	800765a <HAL_TIM_PWM_Start+0x6a>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2b04      	cmp	r3, #4
 8007618:	d109      	bne.n	800762e <HAL_TIM_PWM_Start+0x3e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b01      	cmp	r3, #1
 8007624:	bf14      	ite	ne
 8007626:	2301      	movne	r3, #1
 8007628:	2300      	moveq	r3, #0
 800762a:	b2db      	uxtb	r3, r3
 800762c:	e015      	b.n	800765a <HAL_TIM_PWM_Start+0x6a>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b08      	cmp	r3, #8
 8007632:	d109      	bne.n	8007648 <HAL_TIM_PWM_Start+0x58>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	bf14      	ite	ne
 8007640:	2301      	movne	r3, #1
 8007642:	2300      	moveq	r3, #0
 8007644:	b2db      	uxtb	r3, r3
 8007646:	e008      	b.n	800765a <HAL_TIM_PWM_Start+0x6a>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b01      	cmp	r3, #1
 8007652:	bf14      	ite	ne
 8007654:	2301      	movne	r3, #1
 8007656:	2300      	moveq	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e068      	b.n	8007734 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <HAL_TIM_PWM_Start+0x82>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007670:	e013      	b.n	800769a <HAL_TIM_PWM_Start+0xaa>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b04      	cmp	r3, #4
 8007676:	d104      	bne.n	8007682 <HAL_TIM_PWM_Start+0x92>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007680:	e00b      	b.n	800769a <HAL_TIM_PWM_Start+0xaa>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b08      	cmp	r3, #8
 8007686:	d104      	bne.n	8007692 <HAL_TIM_PWM_Start+0xa2>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007690:	e003      	b.n	800769a <HAL_TIM_PWM_Start+0xaa>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2202      	movs	r2, #2
 8007696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2201      	movs	r2, #1
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 ff44 	bl	8008530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a23      	ldr	r2, [pc, #140]	@ (800773c <HAL_TIM_PWM_Start+0x14c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d107      	bne.n	80076c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1d      	ldr	r2, [pc, #116]	@ (800773c <HAL_TIM_PWM_Start+0x14c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d018      	beq.n	80076fe <HAL_TIM_PWM_Start+0x10e>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d4:	d013      	beq.n	80076fe <HAL_TIM_PWM_Start+0x10e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a19      	ldr	r2, [pc, #100]	@ (8007740 <HAL_TIM_PWM_Start+0x150>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00e      	beq.n	80076fe <HAL_TIM_PWM_Start+0x10e>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a17      	ldr	r2, [pc, #92]	@ (8007744 <HAL_TIM_PWM_Start+0x154>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d009      	beq.n	80076fe <HAL_TIM_PWM_Start+0x10e>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a16      	ldr	r2, [pc, #88]	@ (8007748 <HAL_TIM_PWM_Start+0x158>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d004      	beq.n	80076fe <HAL_TIM_PWM_Start+0x10e>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a14      	ldr	r2, [pc, #80]	@ (800774c <HAL_TIM_PWM_Start+0x15c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d111      	bne.n	8007722 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f003 0307 	and.w	r3, r3, #7
 8007708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b06      	cmp	r3, #6
 800770e:	d010      	beq.n	8007732 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007720:	e007      	b.n	8007732 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0201 	orr.w	r2, r2, #1
 8007730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	40010000 	.word	0x40010000
 8007740:	40000400 	.word	0x40000400
 8007744:	40000800 	.word	0x40000800
 8007748:	40000c00 	.word	0x40000c00
 800774c:	40014000 	.word	0x40014000

08007750 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2200      	movs	r2, #0
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fee4 	bl	8008530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a29      	ldr	r2, [pc, #164]	@ (8007814 <HAL_TIM_PWM_Stop+0xc4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d117      	bne.n	80077a2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6a1a      	ldr	r2, [r3, #32]
 8007778:	f241 1311 	movw	r3, #4369	@ 0x1111
 800777c:	4013      	ands	r3, r2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10f      	bne.n	80077a2 <HAL_TIM_PWM_Stop+0x52>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6a1a      	ldr	r2, [r3, #32]
 8007788:	f240 4344 	movw	r3, #1092	@ 0x444
 800778c:	4013      	ands	r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d107      	bne.n	80077a2 <HAL_TIM_PWM_Stop+0x52>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6a1a      	ldr	r2, [r3, #32]
 80077a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10f      	bne.n	80077d2 <HAL_TIM_PWM_Stop+0x82>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6a1a      	ldr	r2, [r3, #32]
 80077b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80077bc:	4013      	ands	r3, r2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d107      	bne.n	80077d2 <HAL_TIM_PWM_Stop+0x82>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0201 	bic.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d104      	bne.n	80077e2 <HAL_TIM_PWM_Stop+0x92>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077e0:	e013      	b.n	800780a <HAL_TIM_PWM_Stop+0xba>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_PWM_Stop+0xa2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077f0:	e00b      	b.n	800780a <HAL_TIM_PWM_Stop+0xba>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d104      	bne.n	8007802 <HAL_TIM_PWM_Stop+0xb2>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007800:	e003      	b.n	800780a <HAL_TIM_PWM_Stop+0xba>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40010000 	.word	0x40010000

08007818 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e097      	b.n	800795c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d106      	bne.n	8007846 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fd f847 	bl	80048d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2202      	movs	r2, #2
 800784a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800785c:	f023 0307 	bic.w	r3, r3, #7
 8007860:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3304      	adds	r3, #4
 800786a:	4619      	mov	r1, r3
 800786c:	4610      	mov	r0, r2
 800786e:	f000 fbb3 	bl	8007fd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4313      	orrs	r3, r2
 8007892:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789a:	f023 0303 	bic.w	r3, r3, #3
 800789e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	021b      	lsls	r3, r3, #8
 80078aa:	4313      	orrs	r3, r2
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80078b8:	f023 030c 	bic.w	r3, r3, #12
 80078bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	021b      	lsls	r3, r3, #8
 80078d4:	4313      	orrs	r3, r2
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	011a      	lsls	r2, r3, #4
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	031b      	lsls	r3, r3, #12
 80078e8:	4313      	orrs	r3, r2
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80078f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80078fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	4313      	orrs	r3, r2
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007974:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800797c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007984:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800798c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d110      	bne.n	80079b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d102      	bne.n	80079a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800799a:	7b7b      	ldrb	r3, [r7, #13]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d001      	beq.n	80079a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e069      	b.n	8007a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079b4:	e031      	b.n	8007a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d110      	bne.n	80079de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d102      	bne.n	80079c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079c2:	7b3b      	ldrb	r3, [r7, #12]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d001      	beq.n	80079cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e055      	b.n	8007a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079dc:	e01d      	b.n	8007a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d108      	bne.n	80079f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d105      	bne.n	80079f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079ea:	7b7b      	ldrb	r3, [r7, #13]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d102      	bne.n	80079f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079f0:	7b3b      	ldrb	r3, [r7, #12]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d001      	beq.n	80079fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e03e      	b.n	8007a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2202      	movs	r2, #2
 8007a06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2202      	movs	r2, #2
 8007a16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_TIM_Encoder_Start+0xc4>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d008      	beq.n	8007a38 <HAL_TIM_Encoder_Start+0xd4>
 8007a26:	e00f      	b.n	8007a48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fd7d 	bl	8008530 <TIM_CCxChannelCmd>
      break;
 8007a36:	e016      	b.n	8007a66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	2104      	movs	r1, #4
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fd75 	bl	8008530 <TIM_CCxChannelCmd>
      break;
 8007a46:	e00e      	b.n	8007a66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fd6d 	bl	8008530 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	2104      	movs	r1, #4
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fd66 	bl	8008530 <TIM_CCxChannelCmd>
      break;
 8007a64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d020      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01b      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f06f 0202 	mvn.w	r2, #2
 8007ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa65 	bl	8007f9a <HAL_TIM_IC_CaptureCallback>
 8007ad0:	e005      	b.n	8007ade <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa57 	bl	8007f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fa68 	bl	8007fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d020      	beq.n	8007b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01b      	beq.n	8007b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f06f 0204 	mvn.w	r2, #4
 8007b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2202      	movs	r2, #2
 8007b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa3f 	bl	8007f9a <HAL_TIM_IC_CaptureCallback>
 8007b1c:	e005      	b.n	8007b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fa31 	bl	8007f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fa42 	bl	8007fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d020      	beq.n	8007b7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01b      	beq.n	8007b7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0208 	mvn.w	r2, #8
 8007b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2204      	movs	r2, #4
 8007b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa19 	bl	8007f9a <HAL_TIM_IC_CaptureCallback>
 8007b68:	e005      	b.n	8007b76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa0b 	bl	8007f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fa1c 	bl	8007fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f003 0310 	and.w	r3, r3, #16
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d020      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d01b      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0210 	mvn.w	r2, #16
 8007b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f9f3 	bl	8007f9a <HAL_TIM_IC_CaptureCallback>
 8007bb4:	e005      	b.n	8007bc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f9e5 	bl	8007f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f9f6 	bl	8007fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00c      	beq.n	8007bec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f06f 0201 	mvn.w	r2, #1
 8007be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f9c3 	bl	8007f72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00c      	beq.n	8007c10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d007      	beq.n	8007c10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fd80 	bl	8008710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00c      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d007      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f9c7 	bl	8007fc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00c      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0220 	mvn.w	r2, #32
 8007c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fd52 	bl	80086fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e0ae      	b.n	8007ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b0c      	cmp	r3, #12
 8007c8a:	f200 809f 	bhi.w	8007dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007dcd 	.word	0x08007dcd
 8007c9c:	08007dcd 	.word	0x08007dcd
 8007ca0:	08007dcd 	.word	0x08007dcd
 8007ca4:	08007d09 	.word	0x08007d09
 8007ca8:	08007dcd 	.word	0x08007dcd
 8007cac:	08007dcd 	.word	0x08007dcd
 8007cb0:	08007dcd 	.word	0x08007dcd
 8007cb4:	08007d4b 	.word	0x08007d4b
 8007cb8:	08007dcd 	.word	0x08007dcd
 8007cbc:	08007dcd 	.word	0x08007dcd
 8007cc0:	08007dcd 	.word	0x08007dcd
 8007cc4:	08007d8b 	.word	0x08007d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 fa08 	bl	80080e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699a      	ldr	r2, [r3, #24]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0208 	orr.w	r2, r2, #8
 8007ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0204 	bic.w	r2, r2, #4
 8007cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6999      	ldr	r1, [r3, #24]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	619a      	str	r2, [r3, #24]
      break;
 8007d06:	e064      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fa4e 	bl	80081b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6999      	ldr	r1, [r3, #24]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	021a      	lsls	r2, r3, #8
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	619a      	str	r2, [r3, #24]
      break;
 8007d48:	e043      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fa99 	bl	8008288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0208 	orr.w	r2, r2, #8
 8007d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0204 	bic.w	r2, r2, #4
 8007d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69d9      	ldr	r1, [r3, #28]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	61da      	str	r2, [r3, #28]
      break;
 8007d88:	e023      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68b9      	ldr	r1, [r7, #8]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fae3 	bl	800835c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69da      	ldr	r2, [r3, #28]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69da      	ldr	r2, [r3, #28]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69d9      	ldr	r1, [r3, #28]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	021a      	lsls	r2, r3, #8
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	61da      	str	r2, [r3, #28]
      break;
 8007dca:	e002      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_TIM_ConfigClockSource+0x1c>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e0b4      	b.n	8007f6a <HAL_TIM_ConfigClockSource+0x186>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e38:	d03e      	beq.n	8007eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8007e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e3e:	f200 8087 	bhi.w	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e46:	f000 8086 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x172>
 8007e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e4e:	d87f      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e50:	2b70      	cmp	r3, #112	@ 0x70
 8007e52:	d01a      	beq.n	8007e8a <HAL_TIM_ConfigClockSource+0xa6>
 8007e54:	2b70      	cmp	r3, #112	@ 0x70
 8007e56:	d87b      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e58:	2b60      	cmp	r3, #96	@ 0x60
 8007e5a:	d050      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x11a>
 8007e5c:	2b60      	cmp	r3, #96	@ 0x60
 8007e5e:	d877      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e60:	2b50      	cmp	r3, #80	@ 0x50
 8007e62:	d03c      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0xfa>
 8007e64:	2b50      	cmp	r3, #80	@ 0x50
 8007e66:	d873      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e68:	2b40      	cmp	r3, #64	@ 0x40
 8007e6a:	d058      	beq.n	8007f1e <HAL_TIM_ConfigClockSource+0x13a>
 8007e6c:	2b40      	cmp	r3, #64	@ 0x40
 8007e6e:	d86f      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e70:	2b30      	cmp	r3, #48	@ 0x30
 8007e72:	d064      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e74:	2b30      	cmp	r3, #48	@ 0x30
 8007e76:	d86b      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e78:	2b20      	cmp	r3, #32
 8007e7a:	d060      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d867      	bhi.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d05c      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	d05a      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x15a>
 8007e88:	e062      	b.n	8007f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e9a:	f000 fb29 	bl	80084f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	609a      	str	r2, [r3, #8]
      break;
 8007eb6:	e04f      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ec8:	f000 fb12 	bl	80084f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007eda:	609a      	str	r2, [r3, #8]
      break;
 8007edc:	e03c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eea:	461a      	mov	r2, r3
 8007eec:	f000 fa86 	bl	80083fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2150      	movs	r1, #80	@ 0x50
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fadf 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007efc:	e02c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f000 faa5 	bl	800845a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2160      	movs	r1, #96	@ 0x60
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 facf 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007f1c:	e01c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f000 fa66 	bl	80083fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2140      	movs	r1, #64	@ 0x40
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fabf 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007f3c:	e00c      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4619      	mov	r1, r3
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f000 fab6 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007f4e:	e003      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	73fb      	strb	r3, [r7, #15]
      break;
 8007f54:	e000      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
	...

08007fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a37      	ldr	r2, [pc, #220]	@ (80080c8 <TIM_Base_SetConfig+0xf0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00f      	beq.n	8008010 <TIM_Base_SetConfig+0x38>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff6:	d00b      	beq.n	8008010 <TIM_Base_SetConfig+0x38>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a34      	ldr	r2, [pc, #208]	@ (80080cc <TIM_Base_SetConfig+0xf4>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d007      	beq.n	8008010 <TIM_Base_SetConfig+0x38>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a33      	ldr	r2, [pc, #204]	@ (80080d0 <TIM_Base_SetConfig+0xf8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_Base_SetConfig+0x38>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a32      	ldr	r2, [pc, #200]	@ (80080d4 <TIM_Base_SetConfig+0xfc>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d108      	bne.n	8008022 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a28      	ldr	r2, [pc, #160]	@ (80080c8 <TIM_Base_SetConfig+0xf0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d01b      	beq.n	8008062 <TIM_Base_SetConfig+0x8a>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008030:	d017      	beq.n	8008062 <TIM_Base_SetConfig+0x8a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a25      	ldr	r2, [pc, #148]	@ (80080cc <TIM_Base_SetConfig+0xf4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <TIM_Base_SetConfig+0x8a>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a24      	ldr	r2, [pc, #144]	@ (80080d0 <TIM_Base_SetConfig+0xf8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00f      	beq.n	8008062 <TIM_Base_SetConfig+0x8a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a23      	ldr	r2, [pc, #140]	@ (80080d4 <TIM_Base_SetConfig+0xfc>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00b      	beq.n	8008062 <TIM_Base_SetConfig+0x8a>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a22      	ldr	r2, [pc, #136]	@ (80080d8 <TIM_Base_SetConfig+0x100>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d007      	beq.n	8008062 <TIM_Base_SetConfig+0x8a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a21      	ldr	r2, [pc, #132]	@ (80080dc <TIM_Base_SetConfig+0x104>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d003      	beq.n	8008062 <TIM_Base_SetConfig+0x8a>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a20      	ldr	r2, [pc, #128]	@ (80080e0 <TIM_Base_SetConfig+0x108>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d108      	bne.n	8008074 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	4313      	orrs	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a0c      	ldr	r2, [pc, #48]	@ (80080c8 <TIM_Base_SetConfig+0xf0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d103      	bne.n	80080a2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	691a      	ldr	r2, [r3, #16]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f043 0204 	orr.w	r2, r3, #4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	601a      	str	r2, [r3, #0]
}
 80080ba:	bf00      	nop
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40000400 	.word	0x40000400
 80080d0:	40000800 	.word	0x40000800
 80080d4:	40000c00 	.word	0x40000c00
 80080d8:	40014000 	.word	0x40014000
 80080dc:	40014400 	.word	0x40014400
 80080e0:	40014800 	.word	0x40014800

080080e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	f023 0201 	bic.w	r2, r3, #1
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0303 	bic.w	r3, r3, #3
 800811a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f023 0302 	bic.w	r3, r3, #2
 800812c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	4313      	orrs	r3, r2
 8008136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a1c      	ldr	r2, [pc, #112]	@ (80081ac <TIM_OC1_SetConfig+0xc8>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d10c      	bne.n	800815a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f023 0308 	bic.w	r3, r3, #8
 8008146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f023 0304 	bic.w	r3, r3, #4
 8008158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a13      	ldr	r2, [pc, #76]	@ (80081ac <TIM_OC1_SetConfig+0xc8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d111      	bne.n	8008186 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	4313      	orrs	r3, r2
 800817a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	4313      	orrs	r3, r2
 8008184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	621a      	str	r2, [r3, #32]
}
 80081a0:	bf00      	nop
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	40010000 	.word	0x40010000

080081b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	f023 0210 	bic.w	r2, r3, #16
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f023 0320 	bic.w	r3, r3, #32
 80081fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	011b      	lsls	r3, r3, #4
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a1e      	ldr	r2, [pc, #120]	@ (8008284 <TIM_OC2_SetConfig+0xd4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10d      	bne.n	800822c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	011b      	lsls	r3, r3, #4
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	4313      	orrs	r3, r2
 8008222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800822a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a15      	ldr	r2, [pc, #84]	@ (8008284 <TIM_OC2_SetConfig+0xd4>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d113      	bne.n	800825c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800823a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	4313      	orrs	r3, r2
 800824e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4313      	orrs	r3, r2
 800825a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	621a      	str	r2, [r3, #32]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	40010000 	.word	0x40010000

08008288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 0303 	bic.w	r3, r3, #3
 80082be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008358 <TIM_OC3_SetConfig+0xd0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d10d      	bne.n	8008302 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a14      	ldr	r2, [pc, #80]	@ (8008358 <TIM_OC3_SetConfig+0xd0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d113      	bne.n	8008332 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	011b      	lsls	r3, r3, #4
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	011b      	lsls	r3, r3, #4
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	621a      	str	r2, [r3, #32]
}
 800834c:	bf00      	nop
 800834e:	371c      	adds	r7, #28
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	40010000 	.word	0x40010000

0800835c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800838a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	031b      	lsls	r3, r3, #12
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a10      	ldr	r2, [pc, #64]	@ (80083f8 <TIM_OC4_SetConfig+0x9c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d109      	bne.n	80083d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	019b      	lsls	r3, r3, #6
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	621a      	str	r2, [r3, #32]
}
 80083ea:	bf00      	nop
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40010000 	.word	0x40010000

080083fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	f023 0201 	bic.w	r2, r3, #1
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	011b      	lsls	r3, r3, #4
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	4313      	orrs	r3, r2
 8008430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f023 030a 	bic.w	r3, r3, #10
 8008438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4313      	orrs	r3, r2
 8008440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	621a      	str	r2, [r3, #32]
}
 800844e:	bf00      	nop
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800845a:	b480      	push	{r7}
 800845c:	b087      	sub	sp, #28
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	f023 0210 	bic.w	r2, r3, #16
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	031b      	lsls	r3, r3, #12
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	4313      	orrs	r3, r2
 800848e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008496:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	621a      	str	r2, [r3, #32]
}
 80084ae:	bf00      	nop
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	f043 0307 	orr.w	r3, r3, #7
 80084dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	609a      	str	r2, [r3, #8]
}
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800850a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	021a      	lsls	r2, r3, #8
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	431a      	orrs	r2, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4313      	orrs	r3, r2
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	4313      	orrs	r3, r2
 800851c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	609a      	str	r2, [r3, #8]
}
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f003 031f 	and.w	r3, r3, #31
 8008542:	2201      	movs	r2, #1
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a1a      	ldr	r2, [r3, #32]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	43db      	mvns	r3, r3
 8008552:	401a      	ands	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a1a      	ldr	r2, [r3, #32]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 031f 	and.w	r3, r3, #31
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	fa01 f303 	lsl.w	r3, r1, r3
 8008568:	431a      	orrs	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	621a      	str	r2, [r3, #32]
}
 800856e:	bf00      	nop
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
	...

0800857c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008590:	2302      	movs	r3, #2
 8008592:	e050      	b.n	8008636 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d018      	beq.n	800860a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085e0:	d013      	beq.n	800860a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a18      	ldr	r2, [pc, #96]	@ (8008648 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00e      	beq.n	800860a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a16      	ldr	r2, [pc, #88]	@ (800864c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d009      	beq.n	800860a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a15      	ldr	r2, [pc, #84]	@ (8008650 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d004      	beq.n	800860a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a13      	ldr	r2, [pc, #76]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d10c      	bne.n	8008624 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	4313      	orrs	r3, r2
 800861a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	40010000 	.word	0x40010000
 8008648:	40000400 	.word	0x40000400
 800864c:	40000800 	.word	0x40000800
 8008650:	40000c00 	.word	0x40000c00
 8008654:	40014000 	.word	0x40014000

08008658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008670:	2302      	movs	r3, #2
 8008672:	e03d      	b.n	80086f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	4313      	orrs	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e042      	b.n	80087bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fc f9dc 	bl	8004b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2224      	movs	r2, #36	@ 0x24
 8008754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fd7f 	bl	800926c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	691a      	ldr	r2, [r3, #16]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800877c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695a      	ldr	r2, [r3, #20]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800878c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800879c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08a      	sub	sp, #40	@ 0x28
 80087c8:	af02      	add	r7, sp, #8
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	4613      	mov	r3, r2
 80087d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	d175      	bne.n	80088d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <HAL_UART_Transmit+0x2c>
 80087ea:	88fb      	ldrh	r3, [r7, #6]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e06e      	b.n	80088d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2221      	movs	r2, #33	@ 0x21
 80087fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008802:	f7fc fc8d 	bl	8005120 <HAL_GetTick>
 8008806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	88fa      	ldrh	r2, [r7, #6]
 800880c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	88fa      	ldrh	r2, [r7, #6]
 8008812:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800881c:	d108      	bne.n	8008830 <HAL_UART_Transmit+0x6c>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d104      	bne.n	8008830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	61bb      	str	r3, [r7, #24]
 800882e:	e003      	b.n	8008838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008834:	2300      	movs	r3, #0
 8008836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008838:	e02e      	b.n	8008898 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2200      	movs	r2, #0
 8008842:	2180      	movs	r1, #128	@ 0x80
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fb1d 	bl	8008e84 <UART_WaitOnFlagUntilTimeout>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2220      	movs	r2, #32
 8008854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e03a      	b.n	80088d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10b      	bne.n	800887a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	3302      	adds	r3, #2
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	e007      	b.n	800888a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	781a      	ldrb	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	3301      	adds	r3, #1
 8008888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800888e:	b29b      	uxth	r3, r3
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1cb      	bne.n	800883a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2200      	movs	r2, #0
 80088aa:	2140      	movs	r1, #64	@ 0x40
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 fae9 	bl	8008e84 <UART_WaitOnFlagUntilTimeout>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d005      	beq.n	80088c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e006      	b.n	80088d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2220      	movs	r2, #32
 80088c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	e000      	b.n	80088d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80088d0:	2302      	movs	r3, #2
  }
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b0ba      	sub	sp, #232	@ 0xe8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008902:	2300      	movs	r3, #0
 8008904:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008908:	2300      	movs	r3, #0
 800890a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800890e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800891a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10f      	bne.n	8008942 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d009      	beq.n	8008942 <HAL_UART_IRQHandler+0x66>
 800892e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fbd7 	bl	80090ee <UART_Receive_IT>
      return;
 8008940:	e273      	b.n	8008e2a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008942:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 80de 	beq.w	8008b08 <HAL_UART_IRQHandler+0x22c>
 800894c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d106      	bne.n	8008966 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800895c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 80d1 	beq.w	8008b08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <HAL_UART_IRQHandler+0xae>
 8008972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008982:	f043 0201 	orr.w	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800898a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00b      	beq.n	80089ae <HAL_UART_IRQHandler+0xd2>
 8008996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d005      	beq.n	80089ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a6:	f043 0202 	orr.w	r2, r3, #2
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00b      	beq.n	80089d2 <HAL_UART_IRQHandler+0xf6>
 80089ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ca:	f043 0204 	orr.w	r2, r3, #4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089d6:	f003 0308 	and.w	r3, r3, #8
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d011      	beq.n	8008a02 <HAL_UART_IRQHandler+0x126>
 80089de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d105      	bne.n	80089f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80089ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089fa:	f043 0208 	orr.w	r2, r3, #8
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 820a 	beq.w	8008e20 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a10:	f003 0320 	and.w	r3, r3, #32
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d008      	beq.n	8008a2a <HAL_UART_IRQHandler+0x14e>
 8008a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a1c:	f003 0320 	and.w	r3, r3, #32
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fb62 	bl	80090ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a34:	2b40      	cmp	r3, #64	@ 0x40
 8008a36:	bf0c      	ite	eq
 8008a38:	2301      	moveq	r3, #1
 8008a3a:	2300      	movne	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a46:	f003 0308 	and.w	r3, r3, #8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d103      	bne.n	8008a56 <HAL_UART_IRQHandler+0x17a>
 8008a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d04f      	beq.n	8008af6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fa6d 	bl	8008f36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a66:	2b40      	cmp	r3, #64	@ 0x40
 8008a68:	d141      	bne.n	8008aee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3314      	adds	r3, #20
 8008a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3314      	adds	r3, #20
 8008a92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1d9      	bne.n	8008a6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d013      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac2:	4a8a      	ldr	r2, [pc, #552]	@ (8008cec <HAL_UART_IRQHandler+0x410>)
 8008ac4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fd f8cb 	bl	8005c66 <HAL_DMA_Abort_IT>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d016      	beq.n	8008b04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae4:	e00e      	b.n	8008b04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f9b6 	bl	8008e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aec:	e00a      	b.n	8008b04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f9b2 	bl	8008e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af4:	e006      	b.n	8008b04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f9ae 	bl	8008e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008b02:	e18d      	b.n	8008e20 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b04:	bf00      	nop
    return;
 8008b06:	e18b      	b.n	8008e20 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	f040 8167 	bne.w	8008de0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b16:	f003 0310 	and.w	r3, r3, #16
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 8160 	beq.w	8008de0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b24:	f003 0310 	and.w	r3, r3, #16
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 8159 	beq.w	8008de0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60bb      	str	r3, [r7, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	60bb      	str	r3, [r7, #8]
 8008b42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4e:	2b40      	cmp	r3, #64	@ 0x40
 8008b50:	f040 80ce 	bne.w	8008cf0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 80a9 	beq.w	8008cbc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b72:	429a      	cmp	r2, r3
 8008b74:	f080 80a2 	bcs.w	8008cbc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b8a:	f000 8088 	beq.w	8008c9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	330c      	adds	r3, #12
 8008b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	330c      	adds	r3, #12
 8008bb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008bba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1d9      	bne.n	8008b8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3314      	adds	r3, #20
 8008be0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3314      	adds	r3, #20
 8008bfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008bfe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008c06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e1      	bne.n	8008bda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3314      	adds	r3, #20
 8008c1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3314      	adds	r3, #20
 8008c36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008c3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008c40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008c42:	e841 2300 	strex	r3, r2, [r1]
 8008c46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e3      	bne.n	8008c16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	330c      	adds	r3, #12
 8008c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c6e:	f023 0310 	bic.w	r3, r3, #16
 8008c72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	330c      	adds	r3, #12
 8008c7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008c82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c88:	e841 2300 	strex	r3, r2, [r1]
 8008c8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e3      	bne.n	8008c5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fc ff74 	bl	8005b86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f8d9 	bl	8008e6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008cba:	e0b3      	b.n	8008e24 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008cc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	f040 80ad 	bne.w	8008e24 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cd4:	f040 80a6 	bne.w	8008e24 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f8c1 	bl	8008e6c <HAL_UARTEx_RxEventCallback>
      return;
 8008cea:	e09b      	b.n	8008e24 <HAL_UART_IRQHandler+0x548>
 8008cec:	08008ffd 	.word	0x08008ffd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 808e 	beq.w	8008e28 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 8089 	beq.w	8008e28 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	330c      	adds	r3, #12
 8008d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	330c      	adds	r3, #12
 8008d36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008d3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e3      	bne.n	8008d16 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3314      	adds	r3, #20
 8008d54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	f023 0301 	bic.w	r3, r3, #1
 8008d64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3314      	adds	r3, #20
 8008d6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008d72:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e3      	bne.n	8008d4e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	330c      	adds	r3, #12
 8008d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0310 	bic.w	r3, r3, #16
 8008daa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	330c      	adds	r3, #12
 8008db4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008db8:	61fa      	str	r2, [r7, #28]
 8008dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	69b9      	ldr	r1, [r7, #24]
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e3      	bne.n	8008d94 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008dd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f847 	bl	8008e6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dde:	e023      	b.n	8008e28 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d009      	beq.n	8008e00 <HAL_UART_IRQHandler+0x524>
 8008dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d003      	beq.n	8008e00 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f910 	bl	800901e <UART_Transmit_IT>
    return;
 8008dfe:	e014      	b.n	8008e2a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00e      	beq.n	8008e2a <HAL_UART_IRQHandler+0x54e>
 8008e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d008      	beq.n	8008e2a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f950 	bl	80090be <UART_EndTransmit_IT>
    return;
 8008e1e:	e004      	b.n	8008e2a <HAL_UART_IRQHandler+0x54e>
    return;
 8008e20:	bf00      	nop
 8008e22:	e002      	b.n	8008e2a <HAL_UART_IRQHandler+0x54e>
      return;
 8008e24:	bf00      	nop
 8008e26:	e000      	b.n	8008e2a <HAL_UART_IRQHandler+0x54e>
      return;
 8008e28:	bf00      	nop
  }
}
 8008e2a:	37e8      	adds	r7, #232	@ 0xe8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	4613      	mov	r3, r2
 8008e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e94:	e03b      	b.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d037      	beq.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e9e:	f7fc f93f 	bl	8005120 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	6a3a      	ldr	r2, [r7, #32]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d302      	bcc.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e03a      	b.n	8008f2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	f003 0304 	and.w	r3, r3, #4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d023      	beq.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b80      	cmp	r3, #128	@ 0x80
 8008eca:	d020      	beq.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b40      	cmp	r3, #64	@ 0x40
 8008ed0:	d01d      	beq.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0308 	and.w	r3, r3, #8
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	d116      	bne.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	617b      	str	r3, [r7, #20]
 8008ef4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 f81d 	bl	8008f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2208      	movs	r2, #8
 8008f00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e00f      	b.n	8008f2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	4013      	ands	r3, r2
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	bf0c      	ite	eq
 8008f1e:	2301      	moveq	r3, #1
 8008f20:	2300      	movne	r3, #0
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	79fb      	ldrb	r3, [r7, #7]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d0b4      	beq.n	8008e96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b095      	sub	sp, #84	@ 0x54
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	330c      	adds	r3, #12
 8008f44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	330c      	adds	r3, #12
 8008f5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e5      	bne.n	8008f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3314      	adds	r3, #20
 8008f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3314      	adds	r3, #20
 8008f90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e5      	bne.n	8008f72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d119      	bne.n	8008fe2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	330c      	adds	r3, #12
 8008fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f023 0310 	bic.w	r3, r3, #16
 8008fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	330c      	adds	r3, #12
 8008fcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fce:	61ba      	str	r2, [r7, #24]
 8008fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6979      	ldr	r1, [r7, #20]
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	613b      	str	r3, [r7, #16]
   return(result);
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e5      	bne.n	8008fae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008ff0:	bf00      	nop
 8008ff2:	3754      	adds	r7, #84	@ 0x54
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f7ff ff21 	bl	8008e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b21      	cmp	r3, #33	@ 0x21
 8009030:	d13e      	bne.n	80090b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800903a:	d114      	bne.n	8009066 <UART_Transmit_IT+0x48>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d110      	bne.n	8009066 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009058:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	1c9a      	adds	r2, r3, #2
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	621a      	str	r2, [r3, #32]
 8009064:	e008      	b.n	8009078 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	1c59      	adds	r1, r3, #1
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6211      	str	r1, [r2, #32]
 8009070:	781a      	ldrb	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800907c:	b29b      	uxth	r3, r3
 800907e:	3b01      	subs	r3, #1
 8009080:	b29b      	uxth	r3, r3
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	4619      	mov	r1, r3
 8009086:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10f      	bne.n	80090ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800909a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	e000      	b.n	80090b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090b0:	2302      	movs	r3, #2
  }
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68da      	ldr	r2, [r3, #12]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2220      	movs	r2, #32
 80090da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff fea6 	bl	8008e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b08c      	sub	sp, #48	@ 0x30
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b22      	cmp	r3, #34	@ 0x22
 8009108:	f040 80aa 	bne.w	8009260 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009114:	d115      	bne.n	8009142 <UART_Receive_IT+0x54>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d111      	bne.n	8009142 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009122:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	b29b      	uxth	r3, r3
 800912c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009130:	b29a      	uxth	r2, r3
 8009132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009134:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800913a:	1c9a      	adds	r2, r3, #2
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009140:	e024      	b.n	800918c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009146:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009150:	d007      	beq.n	8009162 <UART_Receive_IT+0x74>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10a      	bne.n	8009170 <UART_Receive_IT+0x82>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d106      	bne.n	8009170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	b2da      	uxtb	r2, r3
 800916a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e008      	b.n	8009182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	b2db      	uxtb	r3, r3
 8009178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800917c:	b2da      	uxtb	r2, r3
 800917e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009190:	b29b      	uxth	r3, r3
 8009192:	3b01      	subs	r3, #1
 8009194:	b29b      	uxth	r3, r3
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	4619      	mov	r1, r3
 800919a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800919c:	2b00      	cmp	r3, #0
 800919e:	d15d      	bne.n	800925c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0220 	bic.w	r2, r2, #32
 80091ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	695a      	ldr	r2, [r3, #20]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0201 	bic.w	r2, r2, #1
 80091ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d135      	bne.n	8009252 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	330c      	adds	r3, #12
 80091f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	613b      	str	r3, [r7, #16]
   return(result);
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	f023 0310 	bic.w	r3, r3, #16
 8009202:	627b      	str	r3, [r7, #36]	@ 0x24
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	330c      	adds	r3, #12
 800920a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800920c:	623a      	str	r2, [r7, #32]
 800920e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	69f9      	ldr	r1, [r7, #28]
 8009212:	6a3a      	ldr	r2, [r7, #32]
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	61bb      	str	r3, [r7, #24]
   return(result);
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e5      	bne.n	80091ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0310 	and.w	r3, r3, #16
 800922a:	2b10      	cmp	r3, #16
 800922c:	d10a      	bne.n	8009244 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800922e:	2300      	movs	r3, #0
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	60fb      	str	r3, [r7, #12]
 8009242:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7ff fe0e 	bl	8008e6c <HAL_UARTEx_RxEventCallback>
 8009250:	e002      	b.n	8009258 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff fdf6 	bl	8008e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	e002      	b.n	8009262 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	e000      	b.n	8009262 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009260:	2302      	movs	r3, #2
  }
}
 8009262:	4618      	mov	r0, r3
 8009264:	3730      	adds	r7, #48	@ 0x30
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800926c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009270:	b0c0      	sub	sp, #256	@ 0x100
 8009272:	af00      	add	r7, sp, #0
 8009274:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009288:	68d9      	ldr	r1, [r3, #12]
 800928a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	ea40 0301 	orr.w	r3, r0, r1
 8009294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	431a      	orrs	r2, r3
 80092a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80092b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80092c4:	f021 010c 	bic.w	r1, r1, #12
 80092c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80092d2:	430b      	orrs	r3, r1
 80092d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80092e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092e6:	6999      	ldr	r1, [r3, #24]
 80092e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	ea40 0301 	orr.w	r3, r0, r1
 80092f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	4b8f      	ldr	r3, [pc, #572]	@ (8009538 <UART_SetConfig+0x2cc>)
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d005      	beq.n	800930c <UART_SetConfig+0xa0>
 8009300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	4b8d      	ldr	r3, [pc, #564]	@ (800953c <UART_SetConfig+0x2d0>)
 8009308:	429a      	cmp	r2, r3
 800930a:	d104      	bne.n	8009316 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800930c:	f7fd fae2 	bl	80068d4 <HAL_RCC_GetPCLK2Freq>
 8009310:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009314:	e003      	b.n	800931e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009316:	f7fd fac9 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 800931a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800931e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009328:	f040 810c 	bne.w	8009544 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800932c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009330:	2200      	movs	r2, #0
 8009332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009336:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800933a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800933e:	4622      	mov	r2, r4
 8009340:	462b      	mov	r3, r5
 8009342:	1891      	adds	r1, r2, r2
 8009344:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009346:	415b      	adcs	r3, r3
 8009348:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800934a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800934e:	4621      	mov	r1, r4
 8009350:	eb12 0801 	adds.w	r8, r2, r1
 8009354:	4629      	mov	r1, r5
 8009356:	eb43 0901 	adc.w	r9, r3, r1
 800935a:	f04f 0200 	mov.w	r2, #0
 800935e:	f04f 0300 	mov.w	r3, #0
 8009362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800936a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800936e:	4690      	mov	r8, r2
 8009370:	4699      	mov	r9, r3
 8009372:	4623      	mov	r3, r4
 8009374:	eb18 0303 	adds.w	r3, r8, r3
 8009378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800937c:	462b      	mov	r3, r5
 800937e:	eb49 0303 	adc.w	r3, r9, r3
 8009382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009392:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800939a:	460b      	mov	r3, r1
 800939c:	18db      	adds	r3, r3, r3
 800939e:	653b      	str	r3, [r7, #80]	@ 0x50
 80093a0:	4613      	mov	r3, r2
 80093a2:	eb42 0303 	adc.w	r3, r2, r3
 80093a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80093a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80093ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80093b0:	f7f7 fc02 	bl	8000bb8 <__aeabi_uldivmod>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4b61      	ldr	r3, [pc, #388]	@ (8009540 <UART_SetConfig+0x2d4>)
 80093ba:	fba3 2302 	umull	r2, r3, r3, r2
 80093be:	095b      	lsrs	r3, r3, #5
 80093c0:	011c      	lsls	r4, r3, #4
 80093c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093c6:	2200      	movs	r2, #0
 80093c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80093d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80093d4:	4642      	mov	r2, r8
 80093d6:	464b      	mov	r3, r9
 80093d8:	1891      	adds	r1, r2, r2
 80093da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80093dc:	415b      	adcs	r3, r3
 80093de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80093e4:	4641      	mov	r1, r8
 80093e6:	eb12 0a01 	adds.w	sl, r2, r1
 80093ea:	4649      	mov	r1, r9
 80093ec:	eb43 0b01 	adc.w	fp, r3, r1
 80093f0:	f04f 0200 	mov.w	r2, #0
 80093f4:	f04f 0300 	mov.w	r3, #0
 80093f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80093fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009404:	4692      	mov	sl, r2
 8009406:	469b      	mov	fp, r3
 8009408:	4643      	mov	r3, r8
 800940a:	eb1a 0303 	adds.w	r3, sl, r3
 800940e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009412:	464b      	mov	r3, r9
 8009414:	eb4b 0303 	adc.w	r3, fp, r3
 8009418:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800941c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009428:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800942c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009430:	460b      	mov	r3, r1
 8009432:	18db      	adds	r3, r3, r3
 8009434:	643b      	str	r3, [r7, #64]	@ 0x40
 8009436:	4613      	mov	r3, r2
 8009438:	eb42 0303 	adc.w	r3, r2, r3
 800943c:	647b      	str	r3, [r7, #68]	@ 0x44
 800943e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009442:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009446:	f7f7 fbb7 	bl	8000bb8 <__aeabi_uldivmod>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	4611      	mov	r1, r2
 8009450:	4b3b      	ldr	r3, [pc, #236]	@ (8009540 <UART_SetConfig+0x2d4>)
 8009452:	fba3 2301 	umull	r2, r3, r3, r1
 8009456:	095b      	lsrs	r3, r3, #5
 8009458:	2264      	movs	r2, #100	@ 0x64
 800945a:	fb02 f303 	mul.w	r3, r2, r3
 800945e:	1acb      	subs	r3, r1, r3
 8009460:	00db      	lsls	r3, r3, #3
 8009462:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009466:	4b36      	ldr	r3, [pc, #216]	@ (8009540 <UART_SetConfig+0x2d4>)
 8009468:	fba3 2302 	umull	r2, r3, r3, r2
 800946c:	095b      	lsrs	r3, r3, #5
 800946e:	005b      	lsls	r3, r3, #1
 8009470:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009474:	441c      	add	r4, r3
 8009476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800947a:	2200      	movs	r2, #0
 800947c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009480:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009484:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009488:	4642      	mov	r2, r8
 800948a:	464b      	mov	r3, r9
 800948c:	1891      	adds	r1, r2, r2
 800948e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009490:	415b      	adcs	r3, r3
 8009492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009498:	4641      	mov	r1, r8
 800949a:	1851      	adds	r1, r2, r1
 800949c:	6339      	str	r1, [r7, #48]	@ 0x30
 800949e:	4649      	mov	r1, r9
 80094a0:	414b      	adcs	r3, r1
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a4:	f04f 0200 	mov.w	r2, #0
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80094b0:	4659      	mov	r1, fp
 80094b2:	00cb      	lsls	r3, r1, #3
 80094b4:	4651      	mov	r1, sl
 80094b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094ba:	4651      	mov	r1, sl
 80094bc:	00ca      	lsls	r2, r1, #3
 80094be:	4610      	mov	r0, r2
 80094c0:	4619      	mov	r1, r3
 80094c2:	4603      	mov	r3, r0
 80094c4:	4642      	mov	r2, r8
 80094c6:	189b      	adds	r3, r3, r2
 80094c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094cc:	464b      	mov	r3, r9
 80094ce:	460a      	mov	r2, r1
 80094d0:	eb42 0303 	adc.w	r3, r2, r3
 80094d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80094e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80094e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80094ec:	460b      	mov	r3, r1
 80094ee:	18db      	adds	r3, r3, r3
 80094f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094f2:	4613      	mov	r3, r2
 80094f4:	eb42 0303 	adc.w	r3, r2, r3
 80094f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80094fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009502:	f7f7 fb59 	bl	8000bb8 <__aeabi_uldivmod>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4b0d      	ldr	r3, [pc, #52]	@ (8009540 <UART_SetConfig+0x2d4>)
 800950c:	fba3 1302 	umull	r1, r3, r3, r2
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	2164      	movs	r1, #100	@ 0x64
 8009514:	fb01 f303 	mul.w	r3, r1, r3
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	3332      	adds	r3, #50	@ 0x32
 800951e:	4a08      	ldr	r2, [pc, #32]	@ (8009540 <UART_SetConfig+0x2d4>)
 8009520:	fba2 2303 	umull	r2, r3, r2, r3
 8009524:	095b      	lsrs	r3, r3, #5
 8009526:	f003 0207 	and.w	r2, r3, #7
 800952a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4422      	add	r2, r4
 8009532:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009534:	e106      	b.n	8009744 <UART_SetConfig+0x4d8>
 8009536:	bf00      	nop
 8009538:	40011000 	.word	0x40011000
 800953c:	40011400 	.word	0x40011400
 8009540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009548:	2200      	movs	r2, #0
 800954a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800954e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009556:	4642      	mov	r2, r8
 8009558:	464b      	mov	r3, r9
 800955a:	1891      	adds	r1, r2, r2
 800955c:	6239      	str	r1, [r7, #32]
 800955e:	415b      	adcs	r3, r3
 8009560:	627b      	str	r3, [r7, #36]	@ 0x24
 8009562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009566:	4641      	mov	r1, r8
 8009568:	1854      	adds	r4, r2, r1
 800956a:	4649      	mov	r1, r9
 800956c:	eb43 0501 	adc.w	r5, r3, r1
 8009570:	f04f 0200 	mov.w	r2, #0
 8009574:	f04f 0300 	mov.w	r3, #0
 8009578:	00eb      	lsls	r3, r5, #3
 800957a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800957e:	00e2      	lsls	r2, r4, #3
 8009580:	4614      	mov	r4, r2
 8009582:	461d      	mov	r5, r3
 8009584:	4643      	mov	r3, r8
 8009586:	18e3      	adds	r3, r4, r3
 8009588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800958c:	464b      	mov	r3, r9
 800958e:	eb45 0303 	adc.w	r3, r5, r3
 8009592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	f04f 0300 	mov.w	r3, #0
 80095ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80095b2:	4629      	mov	r1, r5
 80095b4:	008b      	lsls	r3, r1, #2
 80095b6:	4621      	mov	r1, r4
 80095b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095bc:	4621      	mov	r1, r4
 80095be:	008a      	lsls	r2, r1, #2
 80095c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80095c4:	f7f7 faf8 	bl	8000bb8 <__aeabi_uldivmod>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4b60      	ldr	r3, [pc, #384]	@ (8009750 <UART_SetConfig+0x4e4>)
 80095ce:	fba3 2302 	umull	r2, r3, r3, r2
 80095d2:	095b      	lsrs	r3, r3, #5
 80095d4:	011c      	lsls	r4, r3, #4
 80095d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095da:	2200      	movs	r2, #0
 80095dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80095e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80095e8:	4642      	mov	r2, r8
 80095ea:	464b      	mov	r3, r9
 80095ec:	1891      	adds	r1, r2, r2
 80095ee:	61b9      	str	r1, [r7, #24]
 80095f0:	415b      	adcs	r3, r3
 80095f2:	61fb      	str	r3, [r7, #28]
 80095f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095f8:	4641      	mov	r1, r8
 80095fa:	1851      	adds	r1, r2, r1
 80095fc:	6139      	str	r1, [r7, #16]
 80095fe:	4649      	mov	r1, r9
 8009600:	414b      	adcs	r3, r1
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	f04f 0200 	mov.w	r2, #0
 8009608:	f04f 0300 	mov.w	r3, #0
 800960c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009610:	4659      	mov	r1, fp
 8009612:	00cb      	lsls	r3, r1, #3
 8009614:	4651      	mov	r1, sl
 8009616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800961a:	4651      	mov	r1, sl
 800961c:	00ca      	lsls	r2, r1, #3
 800961e:	4610      	mov	r0, r2
 8009620:	4619      	mov	r1, r3
 8009622:	4603      	mov	r3, r0
 8009624:	4642      	mov	r2, r8
 8009626:	189b      	adds	r3, r3, r2
 8009628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800962c:	464b      	mov	r3, r9
 800962e:	460a      	mov	r2, r1
 8009630:	eb42 0303 	adc.w	r3, r2, r3
 8009634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009642:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	f04f 0300 	mov.w	r3, #0
 800964c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009650:	4649      	mov	r1, r9
 8009652:	008b      	lsls	r3, r1, #2
 8009654:	4641      	mov	r1, r8
 8009656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800965a:	4641      	mov	r1, r8
 800965c:	008a      	lsls	r2, r1, #2
 800965e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009662:	f7f7 faa9 	bl	8000bb8 <__aeabi_uldivmod>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4611      	mov	r1, r2
 800966c:	4b38      	ldr	r3, [pc, #224]	@ (8009750 <UART_SetConfig+0x4e4>)
 800966e:	fba3 2301 	umull	r2, r3, r3, r1
 8009672:	095b      	lsrs	r3, r3, #5
 8009674:	2264      	movs	r2, #100	@ 0x64
 8009676:	fb02 f303 	mul.w	r3, r2, r3
 800967a:	1acb      	subs	r3, r1, r3
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	3332      	adds	r3, #50	@ 0x32
 8009680:	4a33      	ldr	r2, [pc, #204]	@ (8009750 <UART_SetConfig+0x4e4>)
 8009682:	fba2 2303 	umull	r2, r3, r2, r3
 8009686:	095b      	lsrs	r3, r3, #5
 8009688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800968c:	441c      	add	r4, r3
 800968e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009692:	2200      	movs	r2, #0
 8009694:	673b      	str	r3, [r7, #112]	@ 0x70
 8009696:	677a      	str	r2, [r7, #116]	@ 0x74
 8009698:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800969c:	4642      	mov	r2, r8
 800969e:	464b      	mov	r3, r9
 80096a0:	1891      	adds	r1, r2, r2
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	415b      	adcs	r3, r3
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096ac:	4641      	mov	r1, r8
 80096ae:	1851      	adds	r1, r2, r1
 80096b0:	6039      	str	r1, [r7, #0]
 80096b2:	4649      	mov	r1, r9
 80096b4:	414b      	adcs	r3, r1
 80096b6:	607b      	str	r3, [r7, #4]
 80096b8:	f04f 0200 	mov.w	r2, #0
 80096bc:	f04f 0300 	mov.w	r3, #0
 80096c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80096c4:	4659      	mov	r1, fp
 80096c6:	00cb      	lsls	r3, r1, #3
 80096c8:	4651      	mov	r1, sl
 80096ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096ce:	4651      	mov	r1, sl
 80096d0:	00ca      	lsls	r2, r1, #3
 80096d2:	4610      	mov	r0, r2
 80096d4:	4619      	mov	r1, r3
 80096d6:	4603      	mov	r3, r0
 80096d8:	4642      	mov	r2, r8
 80096da:	189b      	adds	r3, r3, r2
 80096dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096de:	464b      	mov	r3, r9
 80096e0:	460a      	mov	r2, r1
 80096e2:	eb42 0303 	adc.w	r3, r2, r3
 80096e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80096e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80096f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	f04f 0300 	mov.w	r3, #0
 80096fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009700:	4649      	mov	r1, r9
 8009702:	008b      	lsls	r3, r1, #2
 8009704:	4641      	mov	r1, r8
 8009706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800970a:	4641      	mov	r1, r8
 800970c:	008a      	lsls	r2, r1, #2
 800970e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009712:	f7f7 fa51 	bl	8000bb8 <__aeabi_uldivmod>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	4b0d      	ldr	r3, [pc, #52]	@ (8009750 <UART_SetConfig+0x4e4>)
 800971c:	fba3 1302 	umull	r1, r3, r3, r2
 8009720:	095b      	lsrs	r3, r3, #5
 8009722:	2164      	movs	r1, #100	@ 0x64
 8009724:	fb01 f303 	mul.w	r3, r1, r3
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	011b      	lsls	r3, r3, #4
 800972c:	3332      	adds	r3, #50	@ 0x32
 800972e:	4a08      	ldr	r2, [pc, #32]	@ (8009750 <UART_SetConfig+0x4e4>)
 8009730:	fba2 2303 	umull	r2, r3, r2, r3
 8009734:	095b      	lsrs	r3, r3, #5
 8009736:	f003 020f 	and.w	r2, r3, #15
 800973a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4422      	add	r2, r4
 8009742:	609a      	str	r2, [r3, #8]
}
 8009744:	bf00      	nop
 8009746:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800974a:	46bd      	mov	sp, r7
 800974c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009750:	51eb851f 	.word	0x51eb851f

08009754 <__cvt>:
 8009754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	ec57 6b10 	vmov	r6, r7, d0
 800975c:	2f00      	cmp	r7, #0
 800975e:	460c      	mov	r4, r1
 8009760:	4619      	mov	r1, r3
 8009762:	463b      	mov	r3, r7
 8009764:	bfbb      	ittet	lt
 8009766:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800976a:	461f      	movlt	r7, r3
 800976c:	2300      	movge	r3, #0
 800976e:	232d      	movlt	r3, #45	@ 0x2d
 8009770:	700b      	strb	r3, [r1, #0]
 8009772:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009774:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009778:	4691      	mov	r9, r2
 800977a:	f023 0820 	bic.w	r8, r3, #32
 800977e:	bfbc      	itt	lt
 8009780:	4632      	movlt	r2, r6
 8009782:	4616      	movlt	r6, r2
 8009784:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009788:	d005      	beq.n	8009796 <__cvt+0x42>
 800978a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800978e:	d100      	bne.n	8009792 <__cvt+0x3e>
 8009790:	3401      	adds	r4, #1
 8009792:	2102      	movs	r1, #2
 8009794:	e000      	b.n	8009798 <__cvt+0x44>
 8009796:	2103      	movs	r1, #3
 8009798:	ab03      	add	r3, sp, #12
 800979a:	9301      	str	r3, [sp, #4]
 800979c:	ab02      	add	r3, sp, #8
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	ec47 6b10 	vmov	d0, r6, r7
 80097a4:	4653      	mov	r3, sl
 80097a6:	4622      	mov	r2, r4
 80097a8:	f000 fea6 	bl	800a4f8 <_dtoa_r>
 80097ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80097b0:	4605      	mov	r5, r0
 80097b2:	d119      	bne.n	80097e8 <__cvt+0x94>
 80097b4:	f019 0f01 	tst.w	r9, #1
 80097b8:	d00e      	beq.n	80097d8 <__cvt+0x84>
 80097ba:	eb00 0904 	add.w	r9, r0, r4
 80097be:	2200      	movs	r2, #0
 80097c0:	2300      	movs	r3, #0
 80097c2:	4630      	mov	r0, r6
 80097c4:	4639      	mov	r1, r7
 80097c6:	f7f7 f987 	bl	8000ad8 <__aeabi_dcmpeq>
 80097ca:	b108      	cbz	r0, 80097d0 <__cvt+0x7c>
 80097cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80097d0:	2230      	movs	r2, #48	@ 0x30
 80097d2:	9b03      	ldr	r3, [sp, #12]
 80097d4:	454b      	cmp	r3, r9
 80097d6:	d31e      	bcc.n	8009816 <__cvt+0xc2>
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097dc:	1b5b      	subs	r3, r3, r5
 80097de:	4628      	mov	r0, r5
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	b004      	add	sp, #16
 80097e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80097ec:	eb00 0904 	add.w	r9, r0, r4
 80097f0:	d1e5      	bne.n	80097be <__cvt+0x6a>
 80097f2:	7803      	ldrb	r3, [r0, #0]
 80097f4:	2b30      	cmp	r3, #48	@ 0x30
 80097f6:	d10a      	bne.n	800980e <__cvt+0xba>
 80097f8:	2200      	movs	r2, #0
 80097fa:	2300      	movs	r3, #0
 80097fc:	4630      	mov	r0, r6
 80097fe:	4639      	mov	r1, r7
 8009800:	f7f7 f96a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009804:	b918      	cbnz	r0, 800980e <__cvt+0xba>
 8009806:	f1c4 0401 	rsb	r4, r4, #1
 800980a:	f8ca 4000 	str.w	r4, [sl]
 800980e:	f8da 3000 	ldr.w	r3, [sl]
 8009812:	4499      	add	r9, r3
 8009814:	e7d3      	b.n	80097be <__cvt+0x6a>
 8009816:	1c59      	adds	r1, r3, #1
 8009818:	9103      	str	r1, [sp, #12]
 800981a:	701a      	strb	r2, [r3, #0]
 800981c:	e7d9      	b.n	80097d2 <__cvt+0x7e>

0800981e <__exponent>:
 800981e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009820:	2900      	cmp	r1, #0
 8009822:	bfba      	itte	lt
 8009824:	4249      	neglt	r1, r1
 8009826:	232d      	movlt	r3, #45	@ 0x2d
 8009828:	232b      	movge	r3, #43	@ 0x2b
 800982a:	2909      	cmp	r1, #9
 800982c:	7002      	strb	r2, [r0, #0]
 800982e:	7043      	strb	r3, [r0, #1]
 8009830:	dd29      	ble.n	8009886 <__exponent+0x68>
 8009832:	f10d 0307 	add.w	r3, sp, #7
 8009836:	461d      	mov	r5, r3
 8009838:	270a      	movs	r7, #10
 800983a:	461a      	mov	r2, r3
 800983c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009840:	fb07 1416 	mls	r4, r7, r6, r1
 8009844:	3430      	adds	r4, #48	@ 0x30
 8009846:	f802 4c01 	strb.w	r4, [r2, #-1]
 800984a:	460c      	mov	r4, r1
 800984c:	2c63      	cmp	r4, #99	@ 0x63
 800984e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009852:	4631      	mov	r1, r6
 8009854:	dcf1      	bgt.n	800983a <__exponent+0x1c>
 8009856:	3130      	adds	r1, #48	@ 0x30
 8009858:	1e94      	subs	r4, r2, #2
 800985a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800985e:	1c41      	adds	r1, r0, #1
 8009860:	4623      	mov	r3, r4
 8009862:	42ab      	cmp	r3, r5
 8009864:	d30a      	bcc.n	800987c <__exponent+0x5e>
 8009866:	f10d 0309 	add.w	r3, sp, #9
 800986a:	1a9b      	subs	r3, r3, r2
 800986c:	42ac      	cmp	r4, r5
 800986e:	bf88      	it	hi
 8009870:	2300      	movhi	r3, #0
 8009872:	3302      	adds	r3, #2
 8009874:	4403      	add	r3, r0
 8009876:	1a18      	subs	r0, r3, r0
 8009878:	b003      	add	sp, #12
 800987a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800987c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009880:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009884:	e7ed      	b.n	8009862 <__exponent+0x44>
 8009886:	2330      	movs	r3, #48	@ 0x30
 8009888:	3130      	adds	r1, #48	@ 0x30
 800988a:	7083      	strb	r3, [r0, #2]
 800988c:	70c1      	strb	r1, [r0, #3]
 800988e:	1d03      	adds	r3, r0, #4
 8009890:	e7f1      	b.n	8009876 <__exponent+0x58>
	...

08009894 <_printf_float>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	b08d      	sub	sp, #52	@ 0x34
 800989a:	460c      	mov	r4, r1
 800989c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80098a0:	4616      	mov	r6, r2
 80098a2:	461f      	mov	r7, r3
 80098a4:	4605      	mov	r5, r0
 80098a6:	f000 fd27 	bl	800a2f8 <_localeconv_r>
 80098aa:	6803      	ldr	r3, [r0, #0]
 80098ac:	9304      	str	r3, [sp, #16]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7f6 fce6 	bl	8000280 <strlen>
 80098b4:	2300      	movs	r3, #0
 80098b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b8:	f8d8 3000 	ldr.w	r3, [r8]
 80098bc:	9005      	str	r0, [sp, #20]
 80098be:	3307      	adds	r3, #7
 80098c0:	f023 0307 	bic.w	r3, r3, #7
 80098c4:	f103 0208 	add.w	r2, r3, #8
 80098c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80098cc:	f8d4 b000 	ldr.w	fp, [r4]
 80098d0:	f8c8 2000 	str.w	r2, [r8]
 80098d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80098dc:	9307      	str	r3, [sp, #28]
 80098de:	f8cd 8018 	str.w	r8, [sp, #24]
 80098e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80098e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098ea:	4b9c      	ldr	r3, [pc, #624]	@ (8009b5c <_printf_float+0x2c8>)
 80098ec:	f04f 32ff 	mov.w	r2, #4294967295
 80098f0:	f7f7 f924 	bl	8000b3c <__aeabi_dcmpun>
 80098f4:	bb70      	cbnz	r0, 8009954 <_printf_float+0xc0>
 80098f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098fa:	4b98      	ldr	r3, [pc, #608]	@ (8009b5c <_printf_float+0x2c8>)
 80098fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009900:	f7f7 f8fe 	bl	8000b00 <__aeabi_dcmple>
 8009904:	bb30      	cbnz	r0, 8009954 <_printf_float+0xc0>
 8009906:	2200      	movs	r2, #0
 8009908:	2300      	movs	r3, #0
 800990a:	4640      	mov	r0, r8
 800990c:	4649      	mov	r1, r9
 800990e:	f7f7 f8ed 	bl	8000aec <__aeabi_dcmplt>
 8009912:	b110      	cbz	r0, 800991a <_printf_float+0x86>
 8009914:	232d      	movs	r3, #45	@ 0x2d
 8009916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800991a:	4a91      	ldr	r2, [pc, #580]	@ (8009b60 <_printf_float+0x2cc>)
 800991c:	4b91      	ldr	r3, [pc, #580]	@ (8009b64 <_printf_float+0x2d0>)
 800991e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009922:	bf8c      	ite	hi
 8009924:	4690      	movhi	r8, r2
 8009926:	4698      	movls	r8, r3
 8009928:	2303      	movs	r3, #3
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	f02b 0304 	bic.w	r3, fp, #4
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	f04f 0900 	mov.w	r9, #0
 8009936:	9700      	str	r7, [sp, #0]
 8009938:	4633      	mov	r3, r6
 800993a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800993c:	4621      	mov	r1, r4
 800993e:	4628      	mov	r0, r5
 8009940:	f000 f9d2 	bl	8009ce8 <_printf_common>
 8009944:	3001      	adds	r0, #1
 8009946:	f040 808d 	bne.w	8009a64 <_printf_float+0x1d0>
 800994a:	f04f 30ff 	mov.w	r0, #4294967295
 800994e:	b00d      	add	sp, #52	@ 0x34
 8009950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009954:	4642      	mov	r2, r8
 8009956:	464b      	mov	r3, r9
 8009958:	4640      	mov	r0, r8
 800995a:	4649      	mov	r1, r9
 800995c:	f7f7 f8ee 	bl	8000b3c <__aeabi_dcmpun>
 8009960:	b140      	cbz	r0, 8009974 <_printf_float+0xe0>
 8009962:	464b      	mov	r3, r9
 8009964:	2b00      	cmp	r3, #0
 8009966:	bfbc      	itt	lt
 8009968:	232d      	movlt	r3, #45	@ 0x2d
 800996a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800996e:	4a7e      	ldr	r2, [pc, #504]	@ (8009b68 <_printf_float+0x2d4>)
 8009970:	4b7e      	ldr	r3, [pc, #504]	@ (8009b6c <_printf_float+0x2d8>)
 8009972:	e7d4      	b.n	800991e <_printf_float+0x8a>
 8009974:	6863      	ldr	r3, [r4, #4]
 8009976:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800997a:	9206      	str	r2, [sp, #24]
 800997c:	1c5a      	adds	r2, r3, #1
 800997e:	d13b      	bne.n	80099f8 <_printf_float+0x164>
 8009980:	2306      	movs	r3, #6
 8009982:	6063      	str	r3, [r4, #4]
 8009984:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009988:	2300      	movs	r3, #0
 800998a:	6022      	str	r2, [r4, #0]
 800998c:	9303      	str	r3, [sp, #12]
 800998e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009990:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009994:	ab09      	add	r3, sp, #36	@ 0x24
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	6861      	ldr	r1, [r4, #4]
 800999a:	ec49 8b10 	vmov	d0, r8, r9
 800999e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80099a2:	4628      	mov	r0, r5
 80099a4:	f7ff fed6 	bl	8009754 <__cvt>
 80099a8:	9b06      	ldr	r3, [sp, #24]
 80099aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099ac:	2b47      	cmp	r3, #71	@ 0x47
 80099ae:	4680      	mov	r8, r0
 80099b0:	d129      	bne.n	8009a06 <_printf_float+0x172>
 80099b2:	1cc8      	adds	r0, r1, #3
 80099b4:	db02      	blt.n	80099bc <_printf_float+0x128>
 80099b6:	6863      	ldr	r3, [r4, #4]
 80099b8:	4299      	cmp	r1, r3
 80099ba:	dd41      	ble.n	8009a40 <_printf_float+0x1ac>
 80099bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80099c0:	fa5f fa8a 	uxtb.w	sl, sl
 80099c4:	3901      	subs	r1, #1
 80099c6:	4652      	mov	r2, sl
 80099c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80099cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80099ce:	f7ff ff26 	bl	800981e <__exponent>
 80099d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099d4:	1813      	adds	r3, r2, r0
 80099d6:	2a01      	cmp	r2, #1
 80099d8:	4681      	mov	r9, r0
 80099da:	6123      	str	r3, [r4, #16]
 80099dc:	dc02      	bgt.n	80099e4 <_printf_float+0x150>
 80099de:	6822      	ldr	r2, [r4, #0]
 80099e0:	07d2      	lsls	r2, r2, #31
 80099e2:	d501      	bpl.n	80099e8 <_printf_float+0x154>
 80099e4:	3301      	adds	r3, #1
 80099e6:	6123      	str	r3, [r4, #16]
 80099e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d0a2      	beq.n	8009936 <_printf_float+0xa2>
 80099f0:	232d      	movs	r3, #45	@ 0x2d
 80099f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099f6:	e79e      	b.n	8009936 <_printf_float+0xa2>
 80099f8:	9a06      	ldr	r2, [sp, #24]
 80099fa:	2a47      	cmp	r2, #71	@ 0x47
 80099fc:	d1c2      	bne.n	8009984 <_printf_float+0xf0>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1c0      	bne.n	8009984 <_printf_float+0xf0>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e7bd      	b.n	8009982 <_printf_float+0xee>
 8009a06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a0a:	d9db      	bls.n	80099c4 <_printf_float+0x130>
 8009a0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a10:	d118      	bne.n	8009a44 <_printf_float+0x1b0>
 8009a12:	2900      	cmp	r1, #0
 8009a14:	6863      	ldr	r3, [r4, #4]
 8009a16:	dd0b      	ble.n	8009a30 <_printf_float+0x19c>
 8009a18:	6121      	str	r1, [r4, #16]
 8009a1a:	b913      	cbnz	r3, 8009a22 <_printf_float+0x18e>
 8009a1c:	6822      	ldr	r2, [r4, #0]
 8009a1e:	07d0      	lsls	r0, r2, #31
 8009a20:	d502      	bpl.n	8009a28 <_printf_float+0x194>
 8009a22:	3301      	adds	r3, #1
 8009a24:	440b      	add	r3, r1
 8009a26:	6123      	str	r3, [r4, #16]
 8009a28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a2a:	f04f 0900 	mov.w	r9, #0
 8009a2e:	e7db      	b.n	80099e8 <_printf_float+0x154>
 8009a30:	b913      	cbnz	r3, 8009a38 <_printf_float+0x1a4>
 8009a32:	6822      	ldr	r2, [r4, #0]
 8009a34:	07d2      	lsls	r2, r2, #31
 8009a36:	d501      	bpl.n	8009a3c <_printf_float+0x1a8>
 8009a38:	3302      	adds	r3, #2
 8009a3a:	e7f4      	b.n	8009a26 <_printf_float+0x192>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e7f2      	b.n	8009a26 <_printf_float+0x192>
 8009a40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a46:	4299      	cmp	r1, r3
 8009a48:	db05      	blt.n	8009a56 <_printf_float+0x1c2>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	6121      	str	r1, [r4, #16]
 8009a4e:	07d8      	lsls	r0, r3, #31
 8009a50:	d5ea      	bpl.n	8009a28 <_printf_float+0x194>
 8009a52:	1c4b      	adds	r3, r1, #1
 8009a54:	e7e7      	b.n	8009a26 <_printf_float+0x192>
 8009a56:	2900      	cmp	r1, #0
 8009a58:	bfd4      	ite	le
 8009a5a:	f1c1 0202 	rsble	r2, r1, #2
 8009a5e:	2201      	movgt	r2, #1
 8009a60:	4413      	add	r3, r2
 8009a62:	e7e0      	b.n	8009a26 <_printf_float+0x192>
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	055a      	lsls	r2, r3, #21
 8009a68:	d407      	bmi.n	8009a7a <_printf_float+0x1e6>
 8009a6a:	6923      	ldr	r3, [r4, #16]
 8009a6c:	4642      	mov	r2, r8
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b8      	blx	r7
 8009a74:	3001      	adds	r0, #1
 8009a76:	d12b      	bne.n	8009ad0 <_printf_float+0x23c>
 8009a78:	e767      	b.n	800994a <_printf_float+0xb6>
 8009a7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a7e:	f240 80dd 	bls.w	8009c3c <_printf_float+0x3a8>
 8009a82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a86:	2200      	movs	r2, #0
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f7f7 f825 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d033      	beq.n	8009afa <_printf_float+0x266>
 8009a92:	4a37      	ldr	r2, [pc, #220]	@ (8009b70 <_printf_float+0x2dc>)
 8009a94:	2301      	movs	r3, #1
 8009a96:	4631      	mov	r1, r6
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b8      	blx	r7
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	f43f af54 	beq.w	800994a <_printf_float+0xb6>
 8009aa2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009aa6:	4543      	cmp	r3, r8
 8009aa8:	db02      	blt.n	8009ab0 <_printf_float+0x21c>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	07d8      	lsls	r0, r3, #31
 8009aae:	d50f      	bpl.n	8009ad0 <_printf_float+0x23c>
 8009ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	47b8      	blx	r7
 8009aba:	3001      	adds	r0, #1
 8009abc:	f43f af45 	beq.w	800994a <_printf_float+0xb6>
 8009ac0:	f04f 0900 	mov.w	r9, #0
 8009ac4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ac8:	f104 0a1a 	add.w	sl, r4, #26
 8009acc:	45c8      	cmp	r8, r9
 8009ace:	dc09      	bgt.n	8009ae4 <_printf_float+0x250>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	079b      	lsls	r3, r3, #30
 8009ad4:	f100 8103 	bmi.w	8009cde <_printf_float+0x44a>
 8009ad8:	68e0      	ldr	r0, [r4, #12]
 8009ada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009adc:	4298      	cmp	r0, r3
 8009ade:	bfb8      	it	lt
 8009ae0:	4618      	movlt	r0, r3
 8009ae2:	e734      	b.n	800994e <_printf_float+0xba>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	4652      	mov	r2, sl
 8009ae8:	4631      	mov	r1, r6
 8009aea:	4628      	mov	r0, r5
 8009aec:	47b8      	blx	r7
 8009aee:	3001      	adds	r0, #1
 8009af0:	f43f af2b 	beq.w	800994a <_printf_float+0xb6>
 8009af4:	f109 0901 	add.w	r9, r9, #1
 8009af8:	e7e8      	b.n	8009acc <_printf_float+0x238>
 8009afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	dc39      	bgt.n	8009b74 <_printf_float+0x2e0>
 8009b00:	4a1b      	ldr	r2, [pc, #108]	@ (8009b70 <_printf_float+0x2dc>)
 8009b02:	2301      	movs	r3, #1
 8009b04:	4631      	mov	r1, r6
 8009b06:	4628      	mov	r0, r5
 8009b08:	47b8      	blx	r7
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	f43f af1d 	beq.w	800994a <_printf_float+0xb6>
 8009b10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009b14:	ea59 0303 	orrs.w	r3, r9, r3
 8009b18:	d102      	bne.n	8009b20 <_printf_float+0x28c>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	07d9      	lsls	r1, r3, #31
 8009b1e:	d5d7      	bpl.n	8009ad0 <_printf_float+0x23c>
 8009b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	f43f af0d 	beq.w	800994a <_printf_float+0xb6>
 8009b30:	f04f 0a00 	mov.w	sl, #0
 8009b34:	f104 0b1a 	add.w	fp, r4, #26
 8009b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b3a:	425b      	negs	r3, r3
 8009b3c:	4553      	cmp	r3, sl
 8009b3e:	dc01      	bgt.n	8009b44 <_printf_float+0x2b0>
 8009b40:	464b      	mov	r3, r9
 8009b42:	e793      	b.n	8009a6c <_printf_float+0x1d8>
 8009b44:	2301      	movs	r3, #1
 8009b46:	465a      	mov	r2, fp
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f43f aefb 	beq.w	800994a <_printf_float+0xb6>
 8009b54:	f10a 0a01 	add.w	sl, sl, #1
 8009b58:	e7ee      	b.n	8009b38 <_printf_float+0x2a4>
 8009b5a:	bf00      	nop
 8009b5c:	7fefffff 	.word	0x7fefffff
 8009b60:	0800e2c4 	.word	0x0800e2c4
 8009b64:	0800e2c0 	.word	0x0800e2c0
 8009b68:	0800e2cc 	.word	0x0800e2cc
 8009b6c:	0800e2c8 	.word	0x0800e2c8
 8009b70:	0800e2d0 	.word	0x0800e2d0
 8009b74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b7a:	4553      	cmp	r3, sl
 8009b7c:	bfa8      	it	ge
 8009b7e:	4653      	movge	r3, sl
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	4699      	mov	r9, r3
 8009b84:	dc36      	bgt.n	8009bf4 <_printf_float+0x360>
 8009b86:	f04f 0b00 	mov.w	fp, #0
 8009b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b8e:	f104 021a 	add.w	r2, r4, #26
 8009b92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b94:	9306      	str	r3, [sp, #24]
 8009b96:	eba3 0309 	sub.w	r3, r3, r9
 8009b9a:	455b      	cmp	r3, fp
 8009b9c:	dc31      	bgt.n	8009c02 <_printf_float+0x36e>
 8009b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba0:	459a      	cmp	sl, r3
 8009ba2:	dc3a      	bgt.n	8009c1a <_printf_float+0x386>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	07da      	lsls	r2, r3, #31
 8009ba8:	d437      	bmi.n	8009c1a <_printf_float+0x386>
 8009baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bac:	ebaa 0903 	sub.w	r9, sl, r3
 8009bb0:	9b06      	ldr	r3, [sp, #24]
 8009bb2:	ebaa 0303 	sub.w	r3, sl, r3
 8009bb6:	4599      	cmp	r9, r3
 8009bb8:	bfa8      	it	ge
 8009bba:	4699      	movge	r9, r3
 8009bbc:	f1b9 0f00 	cmp.w	r9, #0
 8009bc0:	dc33      	bgt.n	8009c2a <_printf_float+0x396>
 8009bc2:	f04f 0800 	mov.w	r8, #0
 8009bc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bca:	f104 0b1a 	add.w	fp, r4, #26
 8009bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd0:	ebaa 0303 	sub.w	r3, sl, r3
 8009bd4:	eba3 0309 	sub.w	r3, r3, r9
 8009bd8:	4543      	cmp	r3, r8
 8009bda:	f77f af79 	ble.w	8009ad0 <_printf_float+0x23c>
 8009bde:	2301      	movs	r3, #1
 8009be0:	465a      	mov	r2, fp
 8009be2:	4631      	mov	r1, r6
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b8      	blx	r7
 8009be8:	3001      	adds	r0, #1
 8009bea:	f43f aeae 	beq.w	800994a <_printf_float+0xb6>
 8009bee:	f108 0801 	add.w	r8, r8, #1
 8009bf2:	e7ec      	b.n	8009bce <_printf_float+0x33a>
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d1c2      	bne.n	8009b86 <_printf_float+0x2f2>
 8009c00:	e6a3      	b.n	800994a <_printf_float+0xb6>
 8009c02:	2301      	movs	r3, #1
 8009c04:	4631      	mov	r1, r6
 8009c06:	4628      	mov	r0, r5
 8009c08:	9206      	str	r2, [sp, #24]
 8009c0a:	47b8      	blx	r7
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	f43f ae9c 	beq.w	800994a <_printf_float+0xb6>
 8009c12:	9a06      	ldr	r2, [sp, #24]
 8009c14:	f10b 0b01 	add.w	fp, fp, #1
 8009c18:	e7bb      	b.n	8009b92 <_printf_float+0x2fe>
 8009c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c1e:	4631      	mov	r1, r6
 8009c20:	4628      	mov	r0, r5
 8009c22:	47b8      	blx	r7
 8009c24:	3001      	adds	r0, #1
 8009c26:	d1c0      	bne.n	8009baa <_printf_float+0x316>
 8009c28:	e68f      	b.n	800994a <_printf_float+0xb6>
 8009c2a:	9a06      	ldr	r2, [sp, #24]
 8009c2c:	464b      	mov	r3, r9
 8009c2e:	4442      	add	r2, r8
 8009c30:	4631      	mov	r1, r6
 8009c32:	4628      	mov	r0, r5
 8009c34:	47b8      	blx	r7
 8009c36:	3001      	adds	r0, #1
 8009c38:	d1c3      	bne.n	8009bc2 <_printf_float+0x32e>
 8009c3a:	e686      	b.n	800994a <_printf_float+0xb6>
 8009c3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c40:	f1ba 0f01 	cmp.w	sl, #1
 8009c44:	dc01      	bgt.n	8009c4a <_printf_float+0x3b6>
 8009c46:	07db      	lsls	r3, r3, #31
 8009c48:	d536      	bpl.n	8009cb8 <_printf_float+0x424>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4628      	mov	r0, r5
 8009c52:	47b8      	blx	r7
 8009c54:	3001      	adds	r0, #1
 8009c56:	f43f ae78 	beq.w	800994a <_printf_float+0xb6>
 8009c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4628      	mov	r0, r5
 8009c62:	47b8      	blx	r7
 8009c64:	3001      	adds	r0, #1
 8009c66:	f43f ae70 	beq.w	800994a <_printf_float+0xb6>
 8009c6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2300      	movs	r3, #0
 8009c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c76:	f7f6 ff2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c7a:	b9c0      	cbnz	r0, 8009cae <_printf_float+0x41a>
 8009c7c:	4653      	mov	r3, sl
 8009c7e:	f108 0201 	add.w	r2, r8, #1
 8009c82:	4631      	mov	r1, r6
 8009c84:	4628      	mov	r0, r5
 8009c86:	47b8      	blx	r7
 8009c88:	3001      	adds	r0, #1
 8009c8a:	d10c      	bne.n	8009ca6 <_printf_float+0x412>
 8009c8c:	e65d      	b.n	800994a <_printf_float+0xb6>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	465a      	mov	r2, fp
 8009c92:	4631      	mov	r1, r6
 8009c94:	4628      	mov	r0, r5
 8009c96:	47b8      	blx	r7
 8009c98:	3001      	adds	r0, #1
 8009c9a:	f43f ae56 	beq.w	800994a <_printf_float+0xb6>
 8009c9e:	f108 0801 	add.w	r8, r8, #1
 8009ca2:	45d0      	cmp	r8, sl
 8009ca4:	dbf3      	blt.n	8009c8e <_printf_float+0x3fa>
 8009ca6:	464b      	mov	r3, r9
 8009ca8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009cac:	e6df      	b.n	8009a6e <_printf_float+0x1da>
 8009cae:	f04f 0800 	mov.w	r8, #0
 8009cb2:	f104 0b1a 	add.w	fp, r4, #26
 8009cb6:	e7f4      	b.n	8009ca2 <_printf_float+0x40e>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4642      	mov	r2, r8
 8009cbc:	e7e1      	b.n	8009c82 <_printf_float+0x3ee>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	464a      	mov	r2, r9
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	f43f ae3e 	beq.w	800994a <_printf_float+0xb6>
 8009cce:	f108 0801 	add.w	r8, r8, #1
 8009cd2:	68e3      	ldr	r3, [r4, #12]
 8009cd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cd6:	1a5b      	subs	r3, r3, r1
 8009cd8:	4543      	cmp	r3, r8
 8009cda:	dcf0      	bgt.n	8009cbe <_printf_float+0x42a>
 8009cdc:	e6fc      	b.n	8009ad8 <_printf_float+0x244>
 8009cde:	f04f 0800 	mov.w	r8, #0
 8009ce2:	f104 0919 	add.w	r9, r4, #25
 8009ce6:	e7f4      	b.n	8009cd2 <_printf_float+0x43e>

08009ce8 <_printf_common>:
 8009ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cec:	4616      	mov	r6, r2
 8009cee:	4698      	mov	r8, r3
 8009cf0:	688a      	ldr	r2, [r1, #8]
 8009cf2:	690b      	ldr	r3, [r1, #16]
 8009cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	bfb8      	it	lt
 8009cfc:	4613      	movlt	r3, r2
 8009cfe:	6033      	str	r3, [r6, #0]
 8009d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d04:	4607      	mov	r7, r0
 8009d06:	460c      	mov	r4, r1
 8009d08:	b10a      	cbz	r2, 8009d0e <_printf_common+0x26>
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	6033      	str	r3, [r6, #0]
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	0699      	lsls	r1, r3, #26
 8009d12:	bf42      	ittt	mi
 8009d14:	6833      	ldrmi	r3, [r6, #0]
 8009d16:	3302      	addmi	r3, #2
 8009d18:	6033      	strmi	r3, [r6, #0]
 8009d1a:	6825      	ldr	r5, [r4, #0]
 8009d1c:	f015 0506 	ands.w	r5, r5, #6
 8009d20:	d106      	bne.n	8009d30 <_printf_common+0x48>
 8009d22:	f104 0a19 	add.w	sl, r4, #25
 8009d26:	68e3      	ldr	r3, [r4, #12]
 8009d28:	6832      	ldr	r2, [r6, #0]
 8009d2a:	1a9b      	subs	r3, r3, r2
 8009d2c:	42ab      	cmp	r3, r5
 8009d2e:	dc26      	bgt.n	8009d7e <_printf_common+0x96>
 8009d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d34:	6822      	ldr	r2, [r4, #0]
 8009d36:	3b00      	subs	r3, #0
 8009d38:	bf18      	it	ne
 8009d3a:	2301      	movne	r3, #1
 8009d3c:	0692      	lsls	r2, r2, #26
 8009d3e:	d42b      	bmi.n	8009d98 <_printf_common+0xb0>
 8009d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d44:	4641      	mov	r1, r8
 8009d46:	4638      	mov	r0, r7
 8009d48:	47c8      	blx	r9
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	d01e      	beq.n	8009d8c <_printf_common+0xa4>
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	6922      	ldr	r2, [r4, #16]
 8009d52:	f003 0306 	and.w	r3, r3, #6
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	bf02      	ittt	eq
 8009d5a:	68e5      	ldreq	r5, [r4, #12]
 8009d5c:	6833      	ldreq	r3, [r6, #0]
 8009d5e:	1aed      	subeq	r5, r5, r3
 8009d60:	68a3      	ldr	r3, [r4, #8]
 8009d62:	bf0c      	ite	eq
 8009d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d68:	2500      	movne	r5, #0
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	bfc4      	itt	gt
 8009d6e:	1a9b      	subgt	r3, r3, r2
 8009d70:	18ed      	addgt	r5, r5, r3
 8009d72:	2600      	movs	r6, #0
 8009d74:	341a      	adds	r4, #26
 8009d76:	42b5      	cmp	r5, r6
 8009d78:	d11a      	bne.n	8009db0 <_printf_common+0xc8>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	e008      	b.n	8009d90 <_printf_common+0xa8>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4652      	mov	r2, sl
 8009d82:	4641      	mov	r1, r8
 8009d84:	4638      	mov	r0, r7
 8009d86:	47c8      	blx	r9
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d103      	bne.n	8009d94 <_printf_common+0xac>
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d94:	3501      	adds	r5, #1
 8009d96:	e7c6      	b.n	8009d26 <_printf_common+0x3e>
 8009d98:	18e1      	adds	r1, r4, r3
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	2030      	movs	r0, #48	@ 0x30
 8009d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009da2:	4422      	add	r2, r4
 8009da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009dac:	3302      	adds	r3, #2
 8009dae:	e7c7      	b.n	8009d40 <_printf_common+0x58>
 8009db0:	2301      	movs	r3, #1
 8009db2:	4622      	mov	r2, r4
 8009db4:	4641      	mov	r1, r8
 8009db6:	4638      	mov	r0, r7
 8009db8:	47c8      	blx	r9
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d0e6      	beq.n	8009d8c <_printf_common+0xa4>
 8009dbe:	3601      	adds	r6, #1
 8009dc0:	e7d9      	b.n	8009d76 <_printf_common+0x8e>
	...

08009dc4 <_printf_i>:
 8009dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc8:	7e0f      	ldrb	r7, [r1, #24]
 8009dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009dcc:	2f78      	cmp	r7, #120	@ 0x78
 8009dce:	4691      	mov	r9, r2
 8009dd0:	4680      	mov	r8, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	469a      	mov	sl, r3
 8009dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dda:	d807      	bhi.n	8009dec <_printf_i+0x28>
 8009ddc:	2f62      	cmp	r7, #98	@ 0x62
 8009dde:	d80a      	bhi.n	8009df6 <_printf_i+0x32>
 8009de0:	2f00      	cmp	r7, #0
 8009de2:	f000 80d1 	beq.w	8009f88 <_printf_i+0x1c4>
 8009de6:	2f58      	cmp	r7, #88	@ 0x58
 8009de8:	f000 80b8 	beq.w	8009f5c <_printf_i+0x198>
 8009dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009df4:	e03a      	b.n	8009e6c <_printf_i+0xa8>
 8009df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009dfa:	2b15      	cmp	r3, #21
 8009dfc:	d8f6      	bhi.n	8009dec <_printf_i+0x28>
 8009dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8009e04 <_printf_i+0x40>)
 8009e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e04:	08009e5d 	.word	0x08009e5d
 8009e08:	08009e71 	.word	0x08009e71
 8009e0c:	08009ded 	.word	0x08009ded
 8009e10:	08009ded 	.word	0x08009ded
 8009e14:	08009ded 	.word	0x08009ded
 8009e18:	08009ded 	.word	0x08009ded
 8009e1c:	08009e71 	.word	0x08009e71
 8009e20:	08009ded 	.word	0x08009ded
 8009e24:	08009ded 	.word	0x08009ded
 8009e28:	08009ded 	.word	0x08009ded
 8009e2c:	08009ded 	.word	0x08009ded
 8009e30:	08009f6f 	.word	0x08009f6f
 8009e34:	08009e9b 	.word	0x08009e9b
 8009e38:	08009f29 	.word	0x08009f29
 8009e3c:	08009ded 	.word	0x08009ded
 8009e40:	08009ded 	.word	0x08009ded
 8009e44:	08009f91 	.word	0x08009f91
 8009e48:	08009ded 	.word	0x08009ded
 8009e4c:	08009e9b 	.word	0x08009e9b
 8009e50:	08009ded 	.word	0x08009ded
 8009e54:	08009ded 	.word	0x08009ded
 8009e58:	08009f31 	.word	0x08009f31
 8009e5c:	6833      	ldr	r3, [r6, #0]
 8009e5e:	1d1a      	adds	r2, r3, #4
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6032      	str	r2, [r6, #0]
 8009e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e09c      	b.n	8009faa <_printf_i+0x1e6>
 8009e70:	6833      	ldr	r3, [r6, #0]
 8009e72:	6820      	ldr	r0, [r4, #0]
 8009e74:	1d19      	adds	r1, r3, #4
 8009e76:	6031      	str	r1, [r6, #0]
 8009e78:	0606      	lsls	r6, r0, #24
 8009e7a:	d501      	bpl.n	8009e80 <_printf_i+0xbc>
 8009e7c:	681d      	ldr	r5, [r3, #0]
 8009e7e:	e003      	b.n	8009e88 <_printf_i+0xc4>
 8009e80:	0645      	lsls	r5, r0, #25
 8009e82:	d5fb      	bpl.n	8009e7c <_printf_i+0xb8>
 8009e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	da03      	bge.n	8009e94 <_printf_i+0xd0>
 8009e8c:	232d      	movs	r3, #45	@ 0x2d
 8009e8e:	426d      	negs	r5, r5
 8009e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e94:	4858      	ldr	r0, [pc, #352]	@ (8009ff8 <_printf_i+0x234>)
 8009e96:	230a      	movs	r3, #10
 8009e98:	e011      	b.n	8009ebe <_printf_i+0xfa>
 8009e9a:	6821      	ldr	r1, [r4, #0]
 8009e9c:	6833      	ldr	r3, [r6, #0]
 8009e9e:	0608      	lsls	r0, r1, #24
 8009ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ea4:	d402      	bmi.n	8009eac <_printf_i+0xe8>
 8009ea6:	0649      	lsls	r1, r1, #25
 8009ea8:	bf48      	it	mi
 8009eaa:	b2ad      	uxthmi	r5, r5
 8009eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8009eae:	4852      	ldr	r0, [pc, #328]	@ (8009ff8 <_printf_i+0x234>)
 8009eb0:	6033      	str	r3, [r6, #0]
 8009eb2:	bf14      	ite	ne
 8009eb4:	230a      	movne	r3, #10
 8009eb6:	2308      	moveq	r3, #8
 8009eb8:	2100      	movs	r1, #0
 8009eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ebe:	6866      	ldr	r6, [r4, #4]
 8009ec0:	60a6      	str	r6, [r4, #8]
 8009ec2:	2e00      	cmp	r6, #0
 8009ec4:	db05      	blt.n	8009ed2 <_printf_i+0x10e>
 8009ec6:	6821      	ldr	r1, [r4, #0]
 8009ec8:	432e      	orrs	r6, r5
 8009eca:	f021 0104 	bic.w	r1, r1, #4
 8009ece:	6021      	str	r1, [r4, #0]
 8009ed0:	d04b      	beq.n	8009f6a <_printf_i+0x1a6>
 8009ed2:	4616      	mov	r6, r2
 8009ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8009edc:	5dc7      	ldrb	r7, [r0, r7]
 8009ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ee2:	462f      	mov	r7, r5
 8009ee4:	42bb      	cmp	r3, r7
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	d9f4      	bls.n	8009ed4 <_printf_i+0x110>
 8009eea:	2b08      	cmp	r3, #8
 8009eec:	d10b      	bne.n	8009f06 <_printf_i+0x142>
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	07df      	lsls	r7, r3, #31
 8009ef2:	d508      	bpl.n	8009f06 <_printf_i+0x142>
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	6861      	ldr	r1, [r4, #4]
 8009ef8:	4299      	cmp	r1, r3
 8009efa:	bfde      	ittt	le
 8009efc:	2330      	movle	r3, #48	@ 0x30
 8009efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f06:	1b92      	subs	r2, r2, r6
 8009f08:	6122      	str	r2, [r4, #16]
 8009f0a:	f8cd a000 	str.w	sl, [sp]
 8009f0e:	464b      	mov	r3, r9
 8009f10:	aa03      	add	r2, sp, #12
 8009f12:	4621      	mov	r1, r4
 8009f14:	4640      	mov	r0, r8
 8009f16:	f7ff fee7 	bl	8009ce8 <_printf_common>
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d14a      	bne.n	8009fb4 <_printf_i+0x1f0>
 8009f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f22:	b004      	add	sp, #16
 8009f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	f043 0320 	orr.w	r3, r3, #32
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	4832      	ldr	r0, [pc, #200]	@ (8009ffc <_printf_i+0x238>)
 8009f32:	2778      	movs	r7, #120	@ 0x78
 8009f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	6831      	ldr	r1, [r6, #0]
 8009f3c:	061f      	lsls	r7, r3, #24
 8009f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f42:	d402      	bmi.n	8009f4a <_printf_i+0x186>
 8009f44:	065f      	lsls	r7, r3, #25
 8009f46:	bf48      	it	mi
 8009f48:	b2ad      	uxthmi	r5, r5
 8009f4a:	6031      	str	r1, [r6, #0]
 8009f4c:	07d9      	lsls	r1, r3, #31
 8009f4e:	bf44      	itt	mi
 8009f50:	f043 0320 	orrmi.w	r3, r3, #32
 8009f54:	6023      	strmi	r3, [r4, #0]
 8009f56:	b11d      	cbz	r5, 8009f60 <_printf_i+0x19c>
 8009f58:	2310      	movs	r3, #16
 8009f5a:	e7ad      	b.n	8009eb8 <_printf_i+0xf4>
 8009f5c:	4826      	ldr	r0, [pc, #152]	@ (8009ff8 <_printf_i+0x234>)
 8009f5e:	e7e9      	b.n	8009f34 <_printf_i+0x170>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	f023 0320 	bic.w	r3, r3, #32
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	e7f6      	b.n	8009f58 <_printf_i+0x194>
 8009f6a:	4616      	mov	r6, r2
 8009f6c:	e7bd      	b.n	8009eea <_printf_i+0x126>
 8009f6e:	6833      	ldr	r3, [r6, #0]
 8009f70:	6825      	ldr	r5, [r4, #0]
 8009f72:	6961      	ldr	r1, [r4, #20]
 8009f74:	1d18      	adds	r0, r3, #4
 8009f76:	6030      	str	r0, [r6, #0]
 8009f78:	062e      	lsls	r6, r5, #24
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	d501      	bpl.n	8009f82 <_printf_i+0x1be>
 8009f7e:	6019      	str	r1, [r3, #0]
 8009f80:	e002      	b.n	8009f88 <_printf_i+0x1c4>
 8009f82:	0668      	lsls	r0, r5, #25
 8009f84:	d5fb      	bpl.n	8009f7e <_printf_i+0x1ba>
 8009f86:	8019      	strh	r1, [r3, #0]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	6123      	str	r3, [r4, #16]
 8009f8c:	4616      	mov	r6, r2
 8009f8e:	e7bc      	b.n	8009f0a <_printf_i+0x146>
 8009f90:	6833      	ldr	r3, [r6, #0]
 8009f92:	1d1a      	adds	r2, r3, #4
 8009f94:	6032      	str	r2, [r6, #0]
 8009f96:	681e      	ldr	r6, [r3, #0]
 8009f98:	6862      	ldr	r2, [r4, #4]
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7f6 f91f 	bl	80001e0 <memchr>
 8009fa2:	b108      	cbz	r0, 8009fa8 <_printf_i+0x1e4>
 8009fa4:	1b80      	subs	r0, r0, r6
 8009fa6:	6060      	str	r0, [r4, #4]
 8009fa8:	6863      	ldr	r3, [r4, #4]
 8009faa:	6123      	str	r3, [r4, #16]
 8009fac:	2300      	movs	r3, #0
 8009fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fb2:	e7aa      	b.n	8009f0a <_printf_i+0x146>
 8009fb4:	6923      	ldr	r3, [r4, #16]
 8009fb6:	4632      	mov	r2, r6
 8009fb8:	4649      	mov	r1, r9
 8009fba:	4640      	mov	r0, r8
 8009fbc:	47d0      	blx	sl
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d0ad      	beq.n	8009f1e <_printf_i+0x15a>
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	079b      	lsls	r3, r3, #30
 8009fc6:	d413      	bmi.n	8009ff0 <_printf_i+0x22c>
 8009fc8:	68e0      	ldr	r0, [r4, #12]
 8009fca:	9b03      	ldr	r3, [sp, #12]
 8009fcc:	4298      	cmp	r0, r3
 8009fce:	bfb8      	it	lt
 8009fd0:	4618      	movlt	r0, r3
 8009fd2:	e7a6      	b.n	8009f22 <_printf_i+0x15e>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	4632      	mov	r2, r6
 8009fd8:	4649      	mov	r1, r9
 8009fda:	4640      	mov	r0, r8
 8009fdc:	47d0      	blx	sl
 8009fde:	3001      	adds	r0, #1
 8009fe0:	d09d      	beq.n	8009f1e <_printf_i+0x15a>
 8009fe2:	3501      	adds	r5, #1
 8009fe4:	68e3      	ldr	r3, [r4, #12]
 8009fe6:	9903      	ldr	r1, [sp, #12]
 8009fe8:	1a5b      	subs	r3, r3, r1
 8009fea:	42ab      	cmp	r3, r5
 8009fec:	dcf2      	bgt.n	8009fd4 <_printf_i+0x210>
 8009fee:	e7eb      	b.n	8009fc8 <_printf_i+0x204>
 8009ff0:	2500      	movs	r5, #0
 8009ff2:	f104 0619 	add.w	r6, r4, #25
 8009ff6:	e7f5      	b.n	8009fe4 <_printf_i+0x220>
 8009ff8:	0800e2d2 	.word	0x0800e2d2
 8009ffc:	0800e2e3 	.word	0x0800e2e3

0800a000 <std>:
 800a000:	2300      	movs	r3, #0
 800a002:	b510      	push	{r4, lr}
 800a004:	4604      	mov	r4, r0
 800a006:	e9c0 3300 	strd	r3, r3, [r0]
 800a00a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a00e:	6083      	str	r3, [r0, #8]
 800a010:	8181      	strh	r1, [r0, #12]
 800a012:	6643      	str	r3, [r0, #100]	@ 0x64
 800a014:	81c2      	strh	r2, [r0, #14]
 800a016:	6183      	str	r3, [r0, #24]
 800a018:	4619      	mov	r1, r3
 800a01a:	2208      	movs	r2, #8
 800a01c:	305c      	adds	r0, #92	@ 0x5c
 800a01e:	f000 f953 	bl	800a2c8 <memset>
 800a022:	4b0d      	ldr	r3, [pc, #52]	@ (800a058 <std+0x58>)
 800a024:	6263      	str	r3, [r4, #36]	@ 0x24
 800a026:	4b0d      	ldr	r3, [pc, #52]	@ (800a05c <std+0x5c>)
 800a028:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a02a:	4b0d      	ldr	r3, [pc, #52]	@ (800a060 <std+0x60>)
 800a02c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a02e:	4b0d      	ldr	r3, [pc, #52]	@ (800a064 <std+0x64>)
 800a030:	6323      	str	r3, [r4, #48]	@ 0x30
 800a032:	4b0d      	ldr	r3, [pc, #52]	@ (800a068 <std+0x68>)
 800a034:	6224      	str	r4, [r4, #32]
 800a036:	429c      	cmp	r4, r3
 800a038:	d006      	beq.n	800a048 <std+0x48>
 800a03a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a03e:	4294      	cmp	r4, r2
 800a040:	d002      	beq.n	800a048 <std+0x48>
 800a042:	33d0      	adds	r3, #208	@ 0xd0
 800a044:	429c      	cmp	r4, r3
 800a046:	d105      	bne.n	800a054 <std+0x54>
 800a048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a050:	f000 b9c6 	b.w	800a3e0 <__retarget_lock_init_recursive>
 800a054:	bd10      	pop	{r4, pc}
 800a056:	bf00      	nop
 800a058:	0800a1c9 	.word	0x0800a1c9
 800a05c:	0800a1eb 	.word	0x0800a1eb
 800a060:	0800a223 	.word	0x0800a223
 800a064:	0800a247 	.word	0x0800a247
 800a068:	20001d94 	.word	0x20001d94

0800a06c <stdio_exit_handler>:
 800a06c:	4a02      	ldr	r2, [pc, #8]	@ (800a078 <stdio_exit_handler+0xc>)
 800a06e:	4903      	ldr	r1, [pc, #12]	@ (800a07c <stdio_exit_handler+0x10>)
 800a070:	4803      	ldr	r0, [pc, #12]	@ (800a080 <stdio_exit_handler+0x14>)
 800a072:	f000 b869 	b.w	800a148 <_fwalk_sglue>
 800a076:	bf00      	nop
 800a078:	20000030 	.word	0x20000030
 800a07c:	0800bd45 	.word	0x0800bd45
 800a080:	20000040 	.word	0x20000040

0800a084 <cleanup_stdio>:
 800a084:	6841      	ldr	r1, [r0, #4]
 800a086:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b8 <cleanup_stdio+0x34>)
 800a088:	4299      	cmp	r1, r3
 800a08a:	b510      	push	{r4, lr}
 800a08c:	4604      	mov	r4, r0
 800a08e:	d001      	beq.n	800a094 <cleanup_stdio+0x10>
 800a090:	f001 fe58 	bl	800bd44 <_fflush_r>
 800a094:	68a1      	ldr	r1, [r4, #8]
 800a096:	4b09      	ldr	r3, [pc, #36]	@ (800a0bc <cleanup_stdio+0x38>)
 800a098:	4299      	cmp	r1, r3
 800a09a:	d002      	beq.n	800a0a2 <cleanup_stdio+0x1e>
 800a09c:	4620      	mov	r0, r4
 800a09e:	f001 fe51 	bl	800bd44 <_fflush_r>
 800a0a2:	68e1      	ldr	r1, [r4, #12]
 800a0a4:	4b06      	ldr	r3, [pc, #24]	@ (800a0c0 <cleanup_stdio+0x3c>)
 800a0a6:	4299      	cmp	r1, r3
 800a0a8:	d004      	beq.n	800a0b4 <cleanup_stdio+0x30>
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b0:	f001 be48 	b.w	800bd44 <_fflush_r>
 800a0b4:	bd10      	pop	{r4, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20001d94 	.word	0x20001d94
 800a0bc:	20001dfc 	.word	0x20001dfc
 800a0c0:	20001e64 	.word	0x20001e64

0800a0c4 <global_stdio_init.part.0>:
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a0f4 <global_stdio_init.part.0+0x30>)
 800a0c8:	4c0b      	ldr	r4, [pc, #44]	@ (800a0f8 <global_stdio_init.part.0+0x34>)
 800a0ca:	4a0c      	ldr	r2, [pc, #48]	@ (800a0fc <global_stdio_init.part.0+0x38>)
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2104      	movs	r1, #4
 800a0d4:	f7ff ff94 	bl	800a000 <std>
 800a0d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0dc:	2201      	movs	r2, #1
 800a0de:	2109      	movs	r1, #9
 800a0e0:	f7ff ff8e 	bl	800a000 <std>
 800a0e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0e8:	2202      	movs	r2, #2
 800a0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ee:	2112      	movs	r1, #18
 800a0f0:	f7ff bf86 	b.w	800a000 <std>
 800a0f4:	20001ecc 	.word	0x20001ecc
 800a0f8:	20001d94 	.word	0x20001d94
 800a0fc:	0800a06d 	.word	0x0800a06d

0800a100 <__sfp_lock_acquire>:
 800a100:	4801      	ldr	r0, [pc, #4]	@ (800a108 <__sfp_lock_acquire+0x8>)
 800a102:	f000 b96e 	b.w	800a3e2 <__retarget_lock_acquire_recursive>
 800a106:	bf00      	nop
 800a108:	20001ed5 	.word	0x20001ed5

0800a10c <__sfp_lock_release>:
 800a10c:	4801      	ldr	r0, [pc, #4]	@ (800a114 <__sfp_lock_release+0x8>)
 800a10e:	f000 b969 	b.w	800a3e4 <__retarget_lock_release_recursive>
 800a112:	bf00      	nop
 800a114:	20001ed5 	.word	0x20001ed5

0800a118 <__sinit>:
 800a118:	b510      	push	{r4, lr}
 800a11a:	4604      	mov	r4, r0
 800a11c:	f7ff fff0 	bl	800a100 <__sfp_lock_acquire>
 800a120:	6a23      	ldr	r3, [r4, #32]
 800a122:	b11b      	cbz	r3, 800a12c <__sinit+0x14>
 800a124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a128:	f7ff bff0 	b.w	800a10c <__sfp_lock_release>
 800a12c:	4b04      	ldr	r3, [pc, #16]	@ (800a140 <__sinit+0x28>)
 800a12e:	6223      	str	r3, [r4, #32]
 800a130:	4b04      	ldr	r3, [pc, #16]	@ (800a144 <__sinit+0x2c>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1f5      	bne.n	800a124 <__sinit+0xc>
 800a138:	f7ff ffc4 	bl	800a0c4 <global_stdio_init.part.0>
 800a13c:	e7f2      	b.n	800a124 <__sinit+0xc>
 800a13e:	bf00      	nop
 800a140:	0800a085 	.word	0x0800a085
 800a144:	20001ecc 	.word	0x20001ecc

0800a148 <_fwalk_sglue>:
 800a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a14c:	4607      	mov	r7, r0
 800a14e:	4688      	mov	r8, r1
 800a150:	4614      	mov	r4, r2
 800a152:	2600      	movs	r6, #0
 800a154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a158:	f1b9 0901 	subs.w	r9, r9, #1
 800a15c:	d505      	bpl.n	800a16a <_fwalk_sglue+0x22>
 800a15e:	6824      	ldr	r4, [r4, #0]
 800a160:	2c00      	cmp	r4, #0
 800a162:	d1f7      	bne.n	800a154 <_fwalk_sglue+0xc>
 800a164:	4630      	mov	r0, r6
 800a166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a16a:	89ab      	ldrh	r3, [r5, #12]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d907      	bls.n	800a180 <_fwalk_sglue+0x38>
 800a170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a174:	3301      	adds	r3, #1
 800a176:	d003      	beq.n	800a180 <_fwalk_sglue+0x38>
 800a178:	4629      	mov	r1, r5
 800a17a:	4638      	mov	r0, r7
 800a17c:	47c0      	blx	r8
 800a17e:	4306      	orrs	r6, r0
 800a180:	3568      	adds	r5, #104	@ 0x68
 800a182:	e7e9      	b.n	800a158 <_fwalk_sglue+0x10>

0800a184 <siprintf>:
 800a184:	b40e      	push	{r1, r2, r3}
 800a186:	b510      	push	{r4, lr}
 800a188:	b09d      	sub	sp, #116	@ 0x74
 800a18a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a18c:	9002      	str	r0, [sp, #8]
 800a18e:	9006      	str	r0, [sp, #24]
 800a190:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a194:	480a      	ldr	r0, [pc, #40]	@ (800a1c0 <siprintf+0x3c>)
 800a196:	9107      	str	r1, [sp, #28]
 800a198:	9104      	str	r1, [sp, #16]
 800a19a:	490a      	ldr	r1, [pc, #40]	@ (800a1c4 <siprintf+0x40>)
 800a19c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a0:	9105      	str	r1, [sp, #20]
 800a1a2:	2400      	movs	r4, #0
 800a1a4:	a902      	add	r1, sp, #8
 800a1a6:	6800      	ldr	r0, [r0, #0]
 800a1a8:	9301      	str	r3, [sp, #4]
 800a1aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a1ac:	f001 fc4a 	bl	800ba44 <_svfiprintf_r>
 800a1b0:	9b02      	ldr	r3, [sp, #8]
 800a1b2:	701c      	strb	r4, [r3, #0]
 800a1b4:	b01d      	add	sp, #116	@ 0x74
 800a1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1ba:	b003      	add	sp, #12
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	2000003c 	.word	0x2000003c
 800a1c4:	ffff0208 	.word	0xffff0208

0800a1c8 <__sread>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d0:	f000 f8b8 	bl	800a344 <_read_r>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	bfab      	itete	ge
 800a1d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a1da:	89a3      	ldrhlt	r3, [r4, #12]
 800a1dc:	181b      	addge	r3, r3, r0
 800a1de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a1e2:	bfac      	ite	ge
 800a1e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a1e6:	81a3      	strhlt	r3, [r4, #12]
 800a1e8:	bd10      	pop	{r4, pc}

0800a1ea <__swrite>:
 800a1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ee:	461f      	mov	r7, r3
 800a1f0:	898b      	ldrh	r3, [r1, #12]
 800a1f2:	05db      	lsls	r3, r3, #23
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	4616      	mov	r6, r2
 800a1fa:	d505      	bpl.n	800a208 <__swrite+0x1e>
 800a1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a200:	2302      	movs	r3, #2
 800a202:	2200      	movs	r2, #0
 800a204:	f000 f88c 	bl	800a320 <_lseek_r>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a20e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a212:	81a3      	strh	r3, [r4, #12]
 800a214:	4632      	mov	r2, r6
 800a216:	463b      	mov	r3, r7
 800a218:	4628      	mov	r0, r5
 800a21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a21e:	f000 b8a3 	b.w	800a368 <_write_r>

0800a222 <__sseek>:
 800a222:	b510      	push	{r4, lr}
 800a224:	460c      	mov	r4, r1
 800a226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22a:	f000 f879 	bl	800a320 <_lseek_r>
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	bf15      	itete	ne
 800a234:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a23a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a23e:	81a3      	strheq	r3, [r4, #12]
 800a240:	bf18      	it	ne
 800a242:	81a3      	strhne	r3, [r4, #12]
 800a244:	bd10      	pop	{r4, pc}

0800a246 <__sclose>:
 800a246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a24a:	f000 b859 	b.w	800a300 <_close_r>

0800a24e <_vsniprintf_r>:
 800a24e:	b530      	push	{r4, r5, lr}
 800a250:	4614      	mov	r4, r2
 800a252:	2c00      	cmp	r4, #0
 800a254:	b09b      	sub	sp, #108	@ 0x6c
 800a256:	4605      	mov	r5, r0
 800a258:	461a      	mov	r2, r3
 800a25a:	da05      	bge.n	800a268 <_vsniprintf_r+0x1a>
 800a25c:	238b      	movs	r3, #139	@ 0x8b
 800a25e:	6003      	str	r3, [r0, #0]
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	b01b      	add	sp, #108	@ 0x6c
 800a266:	bd30      	pop	{r4, r5, pc}
 800a268:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a26c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a270:	f04f 0300 	mov.w	r3, #0
 800a274:	9319      	str	r3, [sp, #100]	@ 0x64
 800a276:	bf14      	ite	ne
 800a278:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a27c:	4623      	moveq	r3, r4
 800a27e:	9302      	str	r3, [sp, #8]
 800a280:	9305      	str	r3, [sp, #20]
 800a282:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a286:	9100      	str	r1, [sp, #0]
 800a288:	9104      	str	r1, [sp, #16]
 800a28a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a28e:	4669      	mov	r1, sp
 800a290:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a292:	f001 fbd7 	bl	800ba44 <_svfiprintf_r>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	bfbc      	itt	lt
 800a29a:	238b      	movlt	r3, #139	@ 0x8b
 800a29c:	602b      	strlt	r3, [r5, #0]
 800a29e:	2c00      	cmp	r4, #0
 800a2a0:	d0e0      	beq.n	800a264 <_vsniprintf_r+0x16>
 800a2a2:	9b00      	ldr	r3, [sp, #0]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	e7dc      	b.n	800a264 <_vsniprintf_r+0x16>
	...

0800a2ac <vsniprintf>:
 800a2ac:	b507      	push	{r0, r1, r2, lr}
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	460a      	mov	r2, r1
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	4803      	ldr	r0, [pc, #12]	@ (800a2c4 <vsniprintf+0x18>)
 800a2b8:	6800      	ldr	r0, [r0, #0]
 800a2ba:	f7ff ffc8 	bl	800a24e <_vsniprintf_r>
 800a2be:	b003      	add	sp, #12
 800a2c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2c4:	2000003c 	.word	0x2000003c

0800a2c8 <memset>:
 800a2c8:	4402      	add	r2, r0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d100      	bne.n	800a2d2 <memset+0xa>
 800a2d0:	4770      	bx	lr
 800a2d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2d6:	e7f9      	b.n	800a2cc <memset+0x4>

0800a2d8 <strcat>:
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	4602      	mov	r2, r0
 800a2dc:	7814      	ldrb	r4, [r2, #0]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	3201      	adds	r2, #1
 800a2e2:	2c00      	cmp	r4, #0
 800a2e4:	d1fa      	bne.n	800a2dc <strcat+0x4>
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	d1f9      	bne.n	800a2e8 <strcat+0x10>
 800a2f4:	bd10      	pop	{r4, pc}
	...

0800a2f8 <_localeconv_r>:
 800a2f8:	4800      	ldr	r0, [pc, #0]	@ (800a2fc <_localeconv_r+0x4>)
 800a2fa:	4770      	bx	lr
 800a2fc:	2000017c 	.word	0x2000017c

0800a300 <_close_r>:
 800a300:	b538      	push	{r3, r4, r5, lr}
 800a302:	4d06      	ldr	r5, [pc, #24]	@ (800a31c <_close_r+0x1c>)
 800a304:	2300      	movs	r3, #0
 800a306:	4604      	mov	r4, r0
 800a308:	4608      	mov	r0, r1
 800a30a:	602b      	str	r3, [r5, #0]
 800a30c:	f7fa fcfa 	bl	8004d04 <_close>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <_close_r+0x1a>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	b103      	cbz	r3, 800a31a <_close_r+0x1a>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	20001ed0 	.word	0x20001ed0

0800a320 <_lseek_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4d07      	ldr	r5, [pc, #28]	@ (800a340 <_lseek_r+0x20>)
 800a324:	4604      	mov	r4, r0
 800a326:	4608      	mov	r0, r1
 800a328:	4611      	mov	r1, r2
 800a32a:	2200      	movs	r2, #0
 800a32c:	602a      	str	r2, [r5, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	f7fa fd0f 	bl	8004d52 <_lseek>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d102      	bne.n	800a33e <_lseek_r+0x1e>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	b103      	cbz	r3, 800a33e <_lseek_r+0x1e>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	20001ed0 	.word	0x20001ed0

0800a344 <_read_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4d07      	ldr	r5, [pc, #28]	@ (800a364 <_read_r+0x20>)
 800a348:	4604      	mov	r4, r0
 800a34a:	4608      	mov	r0, r1
 800a34c:	4611      	mov	r1, r2
 800a34e:	2200      	movs	r2, #0
 800a350:	602a      	str	r2, [r5, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	f7fa fc9d 	bl	8004c92 <_read>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d102      	bne.n	800a362 <_read_r+0x1e>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	b103      	cbz	r3, 800a362 <_read_r+0x1e>
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	20001ed0 	.word	0x20001ed0

0800a368 <_write_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d07      	ldr	r5, [pc, #28]	@ (800a388 <_write_r+0x20>)
 800a36c:	4604      	mov	r4, r0
 800a36e:	4608      	mov	r0, r1
 800a370:	4611      	mov	r1, r2
 800a372:	2200      	movs	r2, #0
 800a374:	602a      	str	r2, [r5, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	f7fa fca8 	bl	8004ccc <_write>
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	d102      	bne.n	800a386 <_write_r+0x1e>
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	b103      	cbz	r3, 800a386 <_write_r+0x1e>
 800a384:	6023      	str	r3, [r4, #0]
 800a386:	bd38      	pop	{r3, r4, r5, pc}
 800a388:	20001ed0 	.word	0x20001ed0

0800a38c <__errno>:
 800a38c:	4b01      	ldr	r3, [pc, #4]	@ (800a394 <__errno+0x8>)
 800a38e:	6818      	ldr	r0, [r3, #0]
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	2000003c 	.word	0x2000003c

0800a398 <__libc_init_array>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	4d0d      	ldr	r5, [pc, #52]	@ (800a3d0 <__libc_init_array+0x38>)
 800a39c:	4c0d      	ldr	r4, [pc, #52]	@ (800a3d4 <__libc_init_array+0x3c>)
 800a39e:	1b64      	subs	r4, r4, r5
 800a3a0:	10a4      	asrs	r4, r4, #2
 800a3a2:	2600      	movs	r6, #0
 800a3a4:	42a6      	cmp	r6, r4
 800a3a6:	d109      	bne.n	800a3bc <__libc_init_array+0x24>
 800a3a8:	4d0b      	ldr	r5, [pc, #44]	@ (800a3d8 <__libc_init_array+0x40>)
 800a3aa:	4c0c      	ldr	r4, [pc, #48]	@ (800a3dc <__libc_init_array+0x44>)
 800a3ac:	f002 f8e8 	bl	800c580 <_init>
 800a3b0:	1b64      	subs	r4, r4, r5
 800a3b2:	10a4      	asrs	r4, r4, #2
 800a3b4:	2600      	movs	r6, #0
 800a3b6:	42a6      	cmp	r6, r4
 800a3b8:	d105      	bne.n	800a3c6 <__libc_init_array+0x2e>
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}
 800a3bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3c0:	4798      	blx	r3
 800a3c2:	3601      	adds	r6, #1
 800a3c4:	e7ee      	b.n	800a3a4 <__libc_init_array+0xc>
 800a3c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ca:	4798      	blx	r3
 800a3cc:	3601      	adds	r6, #1
 800a3ce:	e7f2      	b.n	800a3b6 <__libc_init_array+0x1e>
 800a3d0:	0800e63c 	.word	0x0800e63c
 800a3d4:	0800e63c 	.word	0x0800e63c
 800a3d8:	0800e63c 	.word	0x0800e63c
 800a3dc:	0800e640 	.word	0x0800e640

0800a3e0 <__retarget_lock_init_recursive>:
 800a3e0:	4770      	bx	lr

0800a3e2 <__retarget_lock_acquire_recursive>:
 800a3e2:	4770      	bx	lr

0800a3e4 <__retarget_lock_release_recursive>:
 800a3e4:	4770      	bx	lr

0800a3e6 <quorem>:
 800a3e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ea:	6903      	ldr	r3, [r0, #16]
 800a3ec:	690c      	ldr	r4, [r1, #16]
 800a3ee:	42a3      	cmp	r3, r4
 800a3f0:	4607      	mov	r7, r0
 800a3f2:	db7e      	blt.n	800a4f2 <quorem+0x10c>
 800a3f4:	3c01      	subs	r4, #1
 800a3f6:	f101 0814 	add.w	r8, r1, #20
 800a3fa:	00a3      	lsls	r3, r4, #2
 800a3fc:	f100 0514 	add.w	r5, r0, #20
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a40c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a410:	3301      	adds	r3, #1
 800a412:	429a      	cmp	r2, r3
 800a414:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a418:	fbb2 f6f3 	udiv	r6, r2, r3
 800a41c:	d32e      	bcc.n	800a47c <quorem+0x96>
 800a41e:	f04f 0a00 	mov.w	sl, #0
 800a422:	46c4      	mov	ip, r8
 800a424:	46ae      	mov	lr, r5
 800a426:	46d3      	mov	fp, sl
 800a428:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a42c:	b298      	uxth	r0, r3
 800a42e:	fb06 a000 	mla	r0, r6, r0, sl
 800a432:	0c02      	lsrs	r2, r0, #16
 800a434:	0c1b      	lsrs	r3, r3, #16
 800a436:	fb06 2303 	mla	r3, r6, r3, r2
 800a43a:	f8de 2000 	ldr.w	r2, [lr]
 800a43e:	b280      	uxth	r0, r0
 800a440:	b292      	uxth	r2, r2
 800a442:	1a12      	subs	r2, r2, r0
 800a444:	445a      	add	r2, fp
 800a446:	f8de 0000 	ldr.w	r0, [lr]
 800a44a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a44e:	b29b      	uxth	r3, r3
 800a450:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a454:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a458:	b292      	uxth	r2, r2
 800a45a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a45e:	45e1      	cmp	r9, ip
 800a460:	f84e 2b04 	str.w	r2, [lr], #4
 800a464:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a468:	d2de      	bcs.n	800a428 <quorem+0x42>
 800a46a:	9b00      	ldr	r3, [sp, #0]
 800a46c:	58eb      	ldr	r3, [r5, r3]
 800a46e:	b92b      	cbnz	r3, 800a47c <quorem+0x96>
 800a470:	9b01      	ldr	r3, [sp, #4]
 800a472:	3b04      	subs	r3, #4
 800a474:	429d      	cmp	r5, r3
 800a476:	461a      	mov	r2, r3
 800a478:	d32f      	bcc.n	800a4da <quorem+0xf4>
 800a47a:	613c      	str	r4, [r7, #16]
 800a47c:	4638      	mov	r0, r7
 800a47e:	f001 f97d 	bl	800b77c <__mcmp>
 800a482:	2800      	cmp	r0, #0
 800a484:	db25      	blt.n	800a4d2 <quorem+0xec>
 800a486:	4629      	mov	r1, r5
 800a488:	2000      	movs	r0, #0
 800a48a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a48e:	f8d1 c000 	ldr.w	ip, [r1]
 800a492:	fa1f fe82 	uxth.w	lr, r2
 800a496:	fa1f f38c 	uxth.w	r3, ip
 800a49a:	eba3 030e 	sub.w	r3, r3, lr
 800a49e:	4403      	add	r3, r0
 800a4a0:	0c12      	lsrs	r2, r2, #16
 800a4a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a4a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4b0:	45c1      	cmp	r9, r8
 800a4b2:	f841 3b04 	str.w	r3, [r1], #4
 800a4b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a4ba:	d2e6      	bcs.n	800a48a <quorem+0xa4>
 800a4bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4c4:	b922      	cbnz	r2, 800a4d0 <quorem+0xea>
 800a4c6:	3b04      	subs	r3, #4
 800a4c8:	429d      	cmp	r5, r3
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	d30b      	bcc.n	800a4e6 <quorem+0x100>
 800a4ce:	613c      	str	r4, [r7, #16]
 800a4d0:	3601      	adds	r6, #1
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	b003      	add	sp, #12
 800a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4da:	6812      	ldr	r2, [r2, #0]
 800a4dc:	3b04      	subs	r3, #4
 800a4de:	2a00      	cmp	r2, #0
 800a4e0:	d1cb      	bne.n	800a47a <quorem+0x94>
 800a4e2:	3c01      	subs	r4, #1
 800a4e4:	e7c6      	b.n	800a474 <quorem+0x8e>
 800a4e6:	6812      	ldr	r2, [r2, #0]
 800a4e8:	3b04      	subs	r3, #4
 800a4ea:	2a00      	cmp	r2, #0
 800a4ec:	d1ef      	bne.n	800a4ce <quorem+0xe8>
 800a4ee:	3c01      	subs	r4, #1
 800a4f0:	e7ea      	b.n	800a4c8 <quorem+0xe2>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e7ee      	b.n	800a4d4 <quorem+0xee>
	...

0800a4f8 <_dtoa_r>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	69c7      	ldr	r7, [r0, #28]
 800a4fe:	b097      	sub	sp, #92	@ 0x5c
 800a500:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a504:	ec55 4b10 	vmov	r4, r5, d0
 800a508:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a50a:	9107      	str	r1, [sp, #28]
 800a50c:	4681      	mov	r9, r0
 800a50e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a510:	9311      	str	r3, [sp, #68]	@ 0x44
 800a512:	b97f      	cbnz	r7, 800a534 <_dtoa_r+0x3c>
 800a514:	2010      	movs	r0, #16
 800a516:	f000 fe09 	bl	800b12c <malloc>
 800a51a:	4602      	mov	r2, r0
 800a51c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a520:	b920      	cbnz	r0, 800a52c <_dtoa_r+0x34>
 800a522:	4ba9      	ldr	r3, [pc, #676]	@ (800a7c8 <_dtoa_r+0x2d0>)
 800a524:	21ef      	movs	r1, #239	@ 0xef
 800a526:	48a9      	ldr	r0, [pc, #676]	@ (800a7cc <_dtoa_r+0x2d4>)
 800a528:	f001 fc6c 	bl	800be04 <__assert_func>
 800a52c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a530:	6007      	str	r7, [r0, #0]
 800a532:	60c7      	str	r7, [r0, #12]
 800a534:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a538:	6819      	ldr	r1, [r3, #0]
 800a53a:	b159      	cbz	r1, 800a554 <_dtoa_r+0x5c>
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	604a      	str	r2, [r1, #4]
 800a540:	2301      	movs	r3, #1
 800a542:	4093      	lsls	r3, r2
 800a544:	608b      	str	r3, [r1, #8]
 800a546:	4648      	mov	r0, r9
 800a548:	f000 fee6 	bl	800b318 <_Bfree>
 800a54c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a550:	2200      	movs	r2, #0
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	1e2b      	subs	r3, r5, #0
 800a556:	bfb9      	ittee	lt
 800a558:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a55c:	9305      	strlt	r3, [sp, #20]
 800a55e:	2300      	movge	r3, #0
 800a560:	6033      	strge	r3, [r6, #0]
 800a562:	9f05      	ldr	r7, [sp, #20]
 800a564:	4b9a      	ldr	r3, [pc, #616]	@ (800a7d0 <_dtoa_r+0x2d8>)
 800a566:	bfbc      	itt	lt
 800a568:	2201      	movlt	r2, #1
 800a56a:	6032      	strlt	r2, [r6, #0]
 800a56c:	43bb      	bics	r3, r7
 800a56e:	d112      	bne.n	800a596 <_dtoa_r+0x9e>
 800a570:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a572:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a57c:	4323      	orrs	r3, r4
 800a57e:	f000 855a 	beq.w	800b036 <_dtoa_r+0xb3e>
 800a582:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a584:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a7e4 <_dtoa_r+0x2ec>
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 855c 	beq.w	800b046 <_dtoa_r+0xb4e>
 800a58e:	f10a 0303 	add.w	r3, sl, #3
 800a592:	f000 bd56 	b.w	800b042 <_dtoa_r+0xb4a>
 800a596:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a59a:	2200      	movs	r2, #0
 800a59c:	ec51 0b17 	vmov	r0, r1, d7
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a5a6:	f7f6 fa97 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5aa:	4680      	mov	r8, r0
 800a5ac:	b158      	cbz	r0, 800a5c6 <_dtoa_r+0xce>
 800a5ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a5b6:	b113      	cbz	r3, 800a5be <_dtoa_r+0xc6>
 800a5b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a5ba:	4b86      	ldr	r3, [pc, #536]	@ (800a7d4 <_dtoa_r+0x2dc>)
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a7e8 <_dtoa_r+0x2f0>
 800a5c2:	f000 bd40 	b.w	800b046 <_dtoa_r+0xb4e>
 800a5c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a5ca:	aa14      	add	r2, sp, #80	@ 0x50
 800a5cc:	a915      	add	r1, sp, #84	@ 0x54
 800a5ce:	4648      	mov	r0, r9
 800a5d0:	f001 f984 	bl	800b8dc <__d2b>
 800a5d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a5d8:	9002      	str	r0, [sp, #8]
 800a5da:	2e00      	cmp	r6, #0
 800a5dc:	d078      	beq.n	800a6d0 <_dtoa_r+0x1d8>
 800a5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a5e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a5f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a5f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4b76      	ldr	r3, [pc, #472]	@ (800a7d8 <_dtoa_r+0x2e0>)
 800a5fe:	f7f5 fe4b 	bl	8000298 <__aeabi_dsub>
 800a602:	a36b      	add	r3, pc, #428	@ (adr r3, 800a7b0 <_dtoa_r+0x2b8>)
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	f7f5 fffe 	bl	8000608 <__aeabi_dmul>
 800a60c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a7b8 <_dtoa_r+0x2c0>)
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f7f5 fe43 	bl	800029c <__adddf3>
 800a616:	4604      	mov	r4, r0
 800a618:	4630      	mov	r0, r6
 800a61a:	460d      	mov	r5, r1
 800a61c:	f7f5 ff8a 	bl	8000534 <__aeabi_i2d>
 800a620:	a367      	add	r3, pc, #412	@ (adr r3, 800a7c0 <_dtoa_r+0x2c8>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	f7f5 ffef 	bl	8000608 <__aeabi_dmul>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4620      	mov	r0, r4
 800a630:	4629      	mov	r1, r5
 800a632:	f7f5 fe33 	bl	800029c <__adddf3>
 800a636:	4604      	mov	r4, r0
 800a638:	460d      	mov	r5, r1
 800a63a:	f7f6 fa95 	bl	8000b68 <__aeabi_d2iz>
 800a63e:	2200      	movs	r2, #0
 800a640:	4607      	mov	r7, r0
 800a642:	2300      	movs	r3, #0
 800a644:	4620      	mov	r0, r4
 800a646:	4629      	mov	r1, r5
 800a648:	f7f6 fa50 	bl	8000aec <__aeabi_dcmplt>
 800a64c:	b140      	cbz	r0, 800a660 <_dtoa_r+0x168>
 800a64e:	4638      	mov	r0, r7
 800a650:	f7f5 ff70 	bl	8000534 <__aeabi_i2d>
 800a654:	4622      	mov	r2, r4
 800a656:	462b      	mov	r3, r5
 800a658:	f7f6 fa3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a65c:	b900      	cbnz	r0, 800a660 <_dtoa_r+0x168>
 800a65e:	3f01      	subs	r7, #1
 800a660:	2f16      	cmp	r7, #22
 800a662:	d852      	bhi.n	800a70a <_dtoa_r+0x212>
 800a664:	4b5d      	ldr	r3, [pc, #372]	@ (800a7dc <_dtoa_r+0x2e4>)
 800a666:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a672:	f7f6 fa3b 	bl	8000aec <__aeabi_dcmplt>
 800a676:	2800      	cmp	r0, #0
 800a678:	d049      	beq.n	800a70e <_dtoa_r+0x216>
 800a67a:	3f01      	subs	r7, #1
 800a67c:	2300      	movs	r3, #0
 800a67e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a680:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a682:	1b9b      	subs	r3, r3, r6
 800a684:	1e5a      	subs	r2, r3, #1
 800a686:	bf45      	ittet	mi
 800a688:	f1c3 0301 	rsbmi	r3, r3, #1
 800a68c:	9300      	strmi	r3, [sp, #0]
 800a68e:	2300      	movpl	r3, #0
 800a690:	2300      	movmi	r3, #0
 800a692:	9206      	str	r2, [sp, #24]
 800a694:	bf54      	ite	pl
 800a696:	9300      	strpl	r3, [sp, #0]
 800a698:	9306      	strmi	r3, [sp, #24]
 800a69a:	2f00      	cmp	r7, #0
 800a69c:	db39      	blt.n	800a712 <_dtoa_r+0x21a>
 800a69e:	9b06      	ldr	r3, [sp, #24]
 800a6a0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a6a2:	443b      	add	r3, r7
 800a6a4:	9306      	str	r3, [sp, #24]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	9308      	str	r3, [sp, #32]
 800a6aa:	9b07      	ldr	r3, [sp, #28]
 800a6ac:	2b09      	cmp	r3, #9
 800a6ae:	d863      	bhi.n	800a778 <_dtoa_r+0x280>
 800a6b0:	2b05      	cmp	r3, #5
 800a6b2:	bfc4      	itt	gt
 800a6b4:	3b04      	subgt	r3, #4
 800a6b6:	9307      	strgt	r3, [sp, #28]
 800a6b8:	9b07      	ldr	r3, [sp, #28]
 800a6ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a6be:	bfcc      	ite	gt
 800a6c0:	2400      	movgt	r4, #0
 800a6c2:	2401      	movle	r4, #1
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d863      	bhi.n	800a790 <_dtoa_r+0x298>
 800a6c8:	e8df f003 	tbb	[pc, r3]
 800a6cc:	2b375452 	.word	0x2b375452
 800a6d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a6d4:	441e      	add	r6, r3
 800a6d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	bfc1      	itttt	gt
 800a6de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a6e2:	409f      	lslgt	r7, r3
 800a6e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a6e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a6ec:	bfd6      	itet	le
 800a6ee:	f1c3 0320 	rsble	r3, r3, #32
 800a6f2:	ea47 0003 	orrgt.w	r0, r7, r3
 800a6f6:	fa04 f003 	lslle.w	r0, r4, r3
 800a6fa:	f7f5 ff0b 	bl	8000514 <__aeabi_ui2d>
 800a6fe:	2201      	movs	r2, #1
 800a700:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a704:	3e01      	subs	r6, #1
 800a706:	9212      	str	r2, [sp, #72]	@ 0x48
 800a708:	e776      	b.n	800a5f8 <_dtoa_r+0x100>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e7b7      	b.n	800a67e <_dtoa_r+0x186>
 800a70e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a710:	e7b6      	b.n	800a680 <_dtoa_r+0x188>
 800a712:	9b00      	ldr	r3, [sp, #0]
 800a714:	1bdb      	subs	r3, r3, r7
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	427b      	negs	r3, r7
 800a71a:	9308      	str	r3, [sp, #32]
 800a71c:	2300      	movs	r3, #0
 800a71e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a720:	e7c3      	b.n	800a6aa <_dtoa_r+0x1b2>
 800a722:	2301      	movs	r3, #1
 800a724:	9309      	str	r3, [sp, #36]	@ 0x24
 800a726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a728:	eb07 0b03 	add.w	fp, r7, r3
 800a72c:	f10b 0301 	add.w	r3, fp, #1
 800a730:	2b01      	cmp	r3, #1
 800a732:	9303      	str	r3, [sp, #12]
 800a734:	bfb8      	it	lt
 800a736:	2301      	movlt	r3, #1
 800a738:	e006      	b.n	800a748 <_dtoa_r+0x250>
 800a73a:	2301      	movs	r3, #1
 800a73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a73e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a740:	2b00      	cmp	r3, #0
 800a742:	dd28      	ble.n	800a796 <_dtoa_r+0x29e>
 800a744:	469b      	mov	fp, r3
 800a746:	9303      	str	r3, [sp, #12]
 800a748:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a74c:	2100      	movs	r1, #0
 800a74e:	2204      	movs	r2, #4
 800a750:	f102 0514 	add.w	r5, r2, #20
 800a754:	429d      	cmp	r5, r3
 800a756:	d926      	bls.n	800a7a6 <_dtoa_r+0x2ae>
 800a758:	6041      	str	r1, [r0, #4]
 800a75a:	4648      	mov	r0, r9
 800a75c:	f000 fd9c 	bl	800b298 <_Balloc>
 800a760:	4682      	mov	sl, r0
 800a762:	2800      	cmp	r0, #0
 800a764:	d142      	bne.n	800a7ec <_dtoa_r+0x2f4>
 800a766:	4b1e      	ldr	r3, [pc, #120]	@ (800a7e0 <_dtoa_r+0x2e8>)
 800a768:	4602      	mov	r2, r0
 800a76a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a76e:	e6da      	b.n	800a526 <_dtoa_r+0x2e>
 800a770:	2300      	movs	r3, #0
 800a772:	e7e3      	b.n	800a73c <_dtoa_r+0x244>
 800a774:	2300      	movs	r3, #0
 800a776:	e7d5      	b.n	800a724 <_dtoa_r+0x22c>
 800a778:	2401      	movs	r4, #1
 800a77a:	2300      	movs	r3, #0
 800a77c:	9307      	str	r3, [sp, #28]
 800a77e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a780:	f04f 3bff 	mov.w	fp, #4294967295
 800a784:	2200      	movs	r2, #0
 800a786:	f8cd b00c 	str.w	fp, [sp, #12]
 800a78a:	2312      	movs	r3, #18
 800a78c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a78e:	e7db      	b.n	800a748 <_dtoa_r+0x250>
 800a790:	2301      	movs	r3, #1
 800a792:	9309      	str	r3, [sp, #36]	@ 0x24
 800a794:	e7f4      	b.n	800a780 <_dtoa_r+0x288>
 800a796:	f04f 0b01 	mov.w	fp, #1
 800a79a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a79e:	465b      	mov	r3, fp
 800a7a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a7a4:	e7d0      	b.n	800a748 <_dtoa_r+0x250>
 800a7a6:	3101      	adds	r1, #1
 800a7a8:	0052      	lsls	r2, r2, #1
 800a7aa:	e7d1      	b.n	800a750 <_dtoa_r+0x258>
 800a7ac:	f3af 8000 	nop.w
 800a7b0:	636f4361 	.word	0x636f4361
 800a7b4:	3fd287a7 	.word	0x3fd287a7
 800a7b8:	8b60c8b3 	.word	0x8b60c8b3
 800a7bc:	3fc68a28 	.word	0x3fc68a28
 800a7c0:	509f79fb 	.word	0x509f79fb
 800a7c4:	3fd34413 	.word	0x3fd34413
 800a7c8:	0800e301 	.word	0x0800e301
 800a7cc:	0800e318 	.word	0x0800e318
 800a7d0:	7ff00000 	.word	0x7ff00000
 800a7d4:	0800e2d1 	.word	0x0800e2d1
 800a7d8:	3ff80000 	.word	0x3ff80000
 800a7dc:	0800e468 	.word	0x0800e468
 800a7e0:	0800e370 	.word	0x0800e370
 800a7e4:	0800e2fd 	.word	0x0800e2fd
 800a7e8:	0800e2d0 	.word	0x0800e2d0
 800a7ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a7f0:	6018      	str	r0, [r3, #0]
 800a7f2:	9b03      	ldr	r3, [sp, #12]
 800a7f4:	2b0e      	cmp	r3, #14
 800a7f6:	f200 80a1 	bhi.w	800a93c <_dtoa_r+0x444>
 800a7fa:	2c00      	cmp	r4, #0
 800a7fc:	f000 809e 	beq.w	800a93c <_dtoa_r+0x444>
 800a800:	2f00      	cmp	r7, #0
 800a802:	dd33      	ble.n	800a86c <_dtoa_r+0x374>
 800a804:	4b9c      	ldr	r3, [pc, #624]	@ (800aa78 <_dtoa_r+0x580>)
 800a806:	f007 020f 	and.w	r2, r7, #15
 800a80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a80e:	ed93 7b00 	vldr	d7, [r3]
 800a812:	05f8      	lsls	r0, r7, #23
 800a814:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a818:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a81c:	d516      	bpl.n	800a84c <_dtoa_r+0x354>
 800a81e:	4b97      	ldr	r3, [pc, #604]	@ (800aa7c <_dtoa_r+0x584>)
 800a820:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a824:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a828:	f7f6 f818 	bl	800085c <__aeabi_ddiv>
 800a82c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a830:	f004 040f 	and.w	r4, r4, #15
 800a834:	2603      	movs	r6, #3
 800a836:	4d91      	ldr	r5, [pc, #580]	@ (800aa7c <_dtoa_r+0x584>)
 800a838:	b954      	cbnz	r4, 800a850 <_dtoa_r+0x358>
 800a83a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a83e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a842:	f7f6 f80b 	bl	800085c <__aeabi_ddiv>
 800a846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a84a:	e028      	b.n	800a89e <_dtoa_r+0x3a6>
 800a84c:	2602      	movs	r6, #2
 800a84e:	e7f2      	b.n	800a836 <_dtoa_r+0x33e>
 800a850:	07e1      	lsls	r1, r4, #31
 800a852:	d508      	bpl.n	800a866 <_dtoa_r+0x36e>
 800a854:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a858:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a85c:	f7f5 fed4 	bl	8000608 <__aeabi_dmul>
 800a860:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a864:	3601      	adds	r6, #1
 800a866:	1064      	asrs	r4, r4, #1
 800a868:	3508      	adds	r5, #8
 800a86a:	e7e5      	b.n	800a838 <_dtoa_r+0x340>
 800a86c:	f000 80af 	beq.w	800a9ce <_dtoa_r+0x4d6>
 800a870:	427c      	negs	r4, r7
 800a872:	4b81      	ldr	r3, [pc, #516]	@ (800aa78 <_dtoa_r+0x580>)
 800a874:	4d81      	ldr	r5, [pc, #516]	@ (800aa7c <_dtoa_r+0x584>)
 800a876:	f004 020f 	and.w	r2, r4, #15
 800a87a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a886:	f7f5 febf 	bl	8000608 <__aeabi_dmul>
 800a88a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a88e:	1124      	asrs	r4, r4, #4
 800a890:	2300      	movs	r3, #0
 800a892:	2602      	movs	r6, #2
 800a894:	2c00      	cmp	r4, #0
 800a896:	f040 808f 	bne.w	800a9b8 <_dtoa_r+0x4c0>
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1d3      	bne.n	800a846 <_dtoa_r+0x34e>
 800a89e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a8a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 8094 	beq.w	800a9d2 <_dtoa_r+0x4da>
 800a8aa:	4b75      	ldr	r3, [pc, #468]	@ (800aa80 <_dtoa_r+0x588>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	f7f6 f91b 	bl	8000aec <__aeabi_dcmplt>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	f000 808b 	beq.w	800a9d2 <_dtoa_r+0x4da>
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 8087 	beq.w	800a9d2 <_dtoa_r+0x4da>
 800a8c4:	f1bb 0f00 	cmp.w	fp, #0
 800a8c8:	dd34      	ble.n	800a934 <_dtoa_r+0x43c>
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	4b6d      	ldr	r3, [pc, #436]	@ (800aa84 <_dtoa_r+0x58c>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	f7f5 fe99 	bl	8000608 <__aeabi_dmul>
 800a8d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8da:	f107 38ff 	add.w	r8, r7, #4294967295
 800a8de:	3601      	adds	r6, #1
 800a8e0:	465c      	mov	r4, fp
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f7f5 fe26 	bl	8000534 <__aeabi_i2d>
 800a8e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8ec:	f7f5 fe8c 	bl	8000608 <__aeabi_dmul>
 800a8f0:	4b65      	ldr	r3, [pc, #404]	@ (800aa88 <_dtoa_r+0x590>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f7f5 fcd2 	bl	800029c <__adddf3>
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a8fe:	2c00      	cmp	r4, #0
 800a900:	d16a      	bne.n	800a9d8 <_dtoa_r+0x4e0>
 800a902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a906:	4b61      	ldr	r3, [pc, #388]	@ (800aa8c <_dtoa_r+0x594>)
 800a908:	2200      	movs	r2, #0
 800a90a:	f7f5 fcc5 	bl	8000298 <__aeabi_dsub>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a916:	462a      	mov	r2, r5
 800a918:	4633      	mov	r3, r6
 800a91a:	f7f6 f905 	bl	8000b28 <__aeabi_dcmpgt>
 800a91e:	2800      	cmp	r0, #0
 800a920:	f040 8298 	bne.w	800ae54 <_dtoa_r+0x95c>
 800a924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a928:	462a      	mov	r2, r5
 800a92a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a92e:	f7f6 f8dd 	bl	8000aec <__aeabi_dcmplt>
 800a932:	bb38      	cbnz	r0, 800a984 <_dtoa_r+0x48c>
 800a934:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a938:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a93c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f2c0 8157 	blt.w	800abf2 <_dtoa_r+0x6fa>
 800a944:	2f0e      	cmp	r7, #14
 800a946:	f300 8154 	bgt.w	800abf2 <_dtoa_r+0x6fa>
 800a94a:	4b4b      	ldr	r3, [pc, #300]	@ (800aa78 <_dtoa_r+0x580>)
 800a94c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a950:	ed93 7b00 	vldr	d7, [r3]
 800a954:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a956:	2b00      	cmp	r3, #0
 800a958:	ed8d 7b00 	vstr	d7, [sp]
 800a95c:	f280 80e5 	bge.w	800ab2a <_dtoa_r+0x632>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	f300 80e1 	bgt.w	800ab2a <_dtoa_r+0x632>
 800a968:	d10c      	bne.n	800a984 <_dtoa_r+0x48c>
 800a96a:	4b48      	ldr	r3, [pc, #288]	@ (800aa8c <_dtoa_r+0x594>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	ec51 0b17 	vmov	r0, r1, d7
 800a972:	f7f5 fe49 	bl	8000608 <__aeabi_dmul>
 800a976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a97a:	f7f6 f8cb 	bl	8000b14 <__aeabi_dcmpge>
 800a97e:	2800      	cmp	r0, #0
 800a980:	f000 8266 	beq.w	800ae50 <_dtoa_r+0x958>
 800a984:	2400      	movs	r4, #0
 800a986:	4625      	mov	r5, r4
 800a988:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a98a:	4656      	mov	r6, sl
 800a98c:	ea6f 0803 	mvn.w	r8, r3
 800a990:	2700      	movs	r7, #0
 800a992:	4621      	mov	r1, r4
 800a994:	4648      	mov	r0, r9
 800a996:	f000 fcbf 	bl	800b318 <_Bfree>
 800a99a:	2d00      	cmp	r5, #0
 800a99c:	f000 80bd 	beq.w	800ab1a <_dtoa_r+0x622>
 800a9a0:	b12f      	cbz	r7, 800a9ae <_dtoa_r+0x4b6>
 800a9a2:	42af      	cmp	r7, r5
 800a9a4:	d003      	beq.n	800a9ae <_dtoa_r+0x4b6>
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	4648      	mov	r0, r9
 800a9aa:	f000 fcb5 	bl	800b318 <_Bfree>
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4648      	mov	r0, r9
 800a9b2:	f000 fcb1 	bl	800b318 <_Bfree>
 800a9b6:	e0b0      	b.n	800ab1a <_dtoa_r+0x622>
 800a9b8:	07e2      	lsls	r2, r4, #31
 800a9ba:	d505      	bpl.n	800a9c8 <_dtoa_r+0x4d0>
 800a9bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9c0:	f7f5 fe22 	bl	8000608 <__aeabi_dmul>
 800a9c4:	3601      	adds	r6, #1
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	1064      	asrs	r4, r4, #1
 800a9ca:	3508      	adds	r5, #8
 800a9cc:	e762      	b.n	800a894 <_dtoa_r+0x39c>
 800a9ce:	2602      	movs	r6, #2
 800a9d0:	e765      	b.n	800a89e <_dtoa_r+0x3a6>
 800a9d2:	9c03      	ldr	r4, [sp, #12]
 800a9d4:	46b8      	mov	r8, r7
 800a9d6:	e784      	b.n	800a8e2 <_dtoa_r+0x3ea>
 800a9d8:	4b27      	ldr	r3, [pc, #156]	@ (800aa78 <_dtoa_r+0x580>)
 800a9da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9e4:	4454      	add	r4, sl
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	d054      	beq.n	800aa94 <_dtoa_r+0x59c>
 800a9ea:	4929      	ldr	r1, [pc, #164]	@ (800aa90 <_dtoa_r+0x598>)
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	f7f5 ff35 	bl	800085c <__aeabi_ddiv>
 800a9f2:	4633      	mov	r3, r6
 800a9f4:	462a      	mov	r2, r5
 800a9f6:	f7f5 fc4f 	bl	8000298 <__aeabi_dsub>
 800a9fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a9fe:	4656      	mov	r6, sl
 800aa00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa04:	f7f6 f8b0 	bl	8000b68 <__aeabi_d2iz>
 800aa08:	4605      	mov	r5, r0
 800aa0a:	f7f5 fd93 	bl	8000534 <__aeabi_i2d>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa16:	f7f5 fc3f 	bl	8000298 <__aeabi_dsub>
 800aa1a:	3530      	adds	r5, #48	@ 0x30
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa24:	f806 5b01 	strb.w	r5, [r6], #1
 800aa28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa2c:	f7f6 f85e 	bl	8000aec <__aeabi_dcmplt>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d172      	bne.n	800ab1a <_dtoa_r+0x622>
 800aa34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa38:	4911      	ldr	r1, [pc, #68]	@ (800aa80 <_dtoa_r+0x588>)
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	f7f5 fc2c 	bl	8000298 <__aeabi_dsub>
 800aa40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa44:	f7f6 f852 	bl	8000aec <__aeabi_dcmplt>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	f040 80b4 	bne.w	800abb6 <_dtoa_r+0x6be>
 800aa4e:	42a6      	cmp	r6, r4
 800aa50:	f43f af70 	beq.w	800a934 <_dtoa_r+0x43c>
 800aa54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aa58:	4b0a      	ldr	r3, [pc, #40]	@ (800aa84 <_dtoa_r+0x58c>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f7f5 fdd4 	bl	8000608 <__aeabi_dmul>
 800aa60:	4b08      	ldr	r3, [pc, #32]	@ (800aa84 <_dtoa_r+0x58c>)
 800aa62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aa66:	2200      	movs	r2, #0
 800aa68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa6c:	f7f5 fdcc 	bl	8000608 <__aeabi_dmul>
 800aa70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa74:	e7c4      	b.n	800aa00 <_dtoa_r+0x508>
 800aa76:	bf00      	nop
 800aa78:	0800e468 	.word	0x0800e468
 800aa7c:	0800e440 	.word	0x0800e440
 800aa80:	3ff00000 	.word	0x3ff00000
 800aa84:	40240000 	.word	0x40240000
 800aa88:	401c0000 	.word	0x401c0000
 800aa8c:	40140000 	.word	0x40140000
 800aa90:	3fe00000 	.word	0x3fe00000
 800aa94:	4631      	mov	r1, r6
 800aa96:	4628      	mov	r0, r5
 800aa98:	f7f5 fdb6 	bl	8000608 <__aeabi_dmul>
 800aa9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aaa0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800aaa2:	4656      	mov	r6, sl
 800aaa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaa8:	f7f6 f85e 	bl	8000b68 <__aeabi_d2iz>
 800aaac:	4605      	mov	r5, r0
 800aaae:	f7f5 fd41 	bl	8000534 <__aeabi_i2d>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaba:	f7f5 fbed 	bl	8000298 <__aeabi_dsub>
 800aabe:	3530      	adds	r5, #48	@ 0x30
 800aac0:	f806 5b01 	strb.w	r5, [r6], #1
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	42a6      	cmp	r6, r4
 800aaca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aace:	f04f 0200 	mov.w	r2, #0
 800aad2:	d124      	bne.n	800ab1e <_dtoa_r+0x626>
 800aad4:	4baf      	ldr	r3, [pc, #700]	@ (800ad94 <_dtoa_r+0x89c>)
 800aad6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aada:	f7f5 fbdf 	bl	800029c <__adddf3>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aae6:	f7f6 f81f 	bl	8000b28 <__aeabi_dcmpgt>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d163      	bne.n	800abb6 <_dtoa_r+0x6be>
 800aaee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aaf2:	49a8      	ldr	r1, [pc, #672]	@ (800ad94 <_dtoa_r+0x89c>)
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f7f5 fbcf 	bl	8000298 <__aeabi_dsub>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab02:	f7f5 fff3 	bl	8000aec <__aeabi_dcmplt>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f43f af14 	beq.w	800a934 <_dtoa_r+0x43c>
 800ab0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ab0e:	1e73      	subs	r3, r6, #1
 800ab10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab16:	2b30      	cmp	r3, #48	@ 0x30
 800ab18:	d0f8      	beq.n	800ab0c <_dtoa_r+0x614>
 800ab1a:	4647      	mov	r7, r8
 800ab1c:	e03b      	b.n	800ab96 <_dtoa_r+0x69e>
 800ab1e:	4b9e      	ldr	r3, [pc, #632]	@ (800ad98 <_dtoa_r+0x8a0>)
 800ab20:	f7f5 fd72 	bl	8000608 <__aeabi_dmul>
 800ab24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab28:	e7bc      	b.n	800aaa4 <_dtoa_r+0x5ac>
 800ab2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ab2e:	4656      	mov	r6, sl
 800ab30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7f5 fe90 	bl	800085c <__aeabi_ddiv>
 800ab3c:	f7f6 f814 	bl	8000b68 <__aeabi_d2iz>
 800ab40:	4680      	mov	r8, r0
 800ab42:	f7f5 fcf7 	bl	8000534 <__aeabi_i2d>
 800ab46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab4a:	f7f5 fd5d 	bl	8000608 <__aeabi_dmul>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	4620      	mov	r0, r4
 800ab54:	4629      	mov	r1, r5
 800ab56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab5a:	f7f5 fb9d 	bl	8000298 <__aeabi_dsub>
 800ab5e:	f806 4b01 	strb.w	r4, [r6], #1
 800ab62:	9d03      	ldr	r5, [sp, #12]
 800ab64:	eba6 040a 	sub.w	r4, r6, sl
 800ab68:	42a5      	cmp	r5, r4
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	d133      	bne.n	800abd8 <_dtoa_r+0x6e0>
 800ab70:	f7f5 fb94 	bl	800029c <__adddf3>
 800ab74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab78:	4604      	mov	r4, r0
 800ab7a:	460d      	mov	r5, r1
 800ab7c:	f7f5 ffd4 	bl	8000b28 <__aeabi_dcmpgt>
 800ab80:	b9c0      	cbnz	r0, 800abb4 <_dtoa_r+0x6bc>
 800ab82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab86:	4620      	mov	r0, r4
 800ab88:	4629      	mov	r1, r5
 800ab8a:	f7f5 ffa5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab8e:	b110      	cbz	r0, 800ab96 <_dtoa_r+0x69e>
 800ab90:	f018 0f01 	tst.w	r8, #1
 800ab94:	d10e      	bne.n	800abb4 <_dtoa_r+0x6bc>
 800ab96:	9902      	ldr	r1, [sp, #8]
 800ab98:	4648      	mov	r0, r9
 800ab9a:	f000 fbbd 	bl	800b318 <_Bfree>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	7033      	strb	r3, [r6, #0]
 800aba2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aba4:	3701      	adds	r7, #1
 800aba6:	601f      	str	r7, [r3, #0]
 800aba8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 824b 	beq.w	800b046 <_dtoa_r+0xb4e>
 800abb0:	601e      	str	r6, [r3, #0]
 800abb2:	e248      	b.n	800b046 <_dtoa_r+0xb4e>
 800abb4:	46b8      	mov	r8, r7
 800abb6:	4633      	mov	r3, r6
 800abb8:	461e      	mov	r6, r3
 800abba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abbe:	2a39      	cmp	r2, #57	@ 0x39
 800abc0:	d106      	bne.n	800abd0 <_dtoa_r+0x6d8>
 800abc2:	459a      	cmp	sl, r3
 800abc4:	d1f8      	bne.n	800abb8 <_dtoa_r+0x6c0>
 800abc6:	2230      	movs	r2, #48	@ 0x30
 800abc8:	f108 0801 	add.w	r8, r8, #1
 800abcc:	f88a 2000 	strb.w	r2, [sl]
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	3201      	adds	r2, #1
 800abd4:	701a      	strb	r2, [r3, #0]
 800abd6:	e7a0      	b.n	800ab1a <_dtoa_r+0x622>
 800abd8:	4b6f      	ldr	r3, [pc, #444]	@ (800ad98 <_dtoa_r+0x8a0>)
 800abda:	2200      	movs	r2, #0
 800abdc:	f7f5 fd14 	bl	8000608 <__aeabi_dmul>
 800abe0:	2200      	movs	r2, #0
 800abe2:	2300      	movs	r3, #0
 800abe4:	4604      	mov	r4, r0
 800abe6:	460d      	mov	r5, r1
 800abe8:	f7f5 ff76 	bl	8000ad8 <__aeabi_dcmpeq>
 800abec:	2800      	cmp	r0, #0
 800abee:	d09f      	beq.n	800ab30 <_dtoa_r+0x638>
 800abf0:	e7d1      	b.n	800ab96 <_dtoa_r+0x69e>
 800abf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abf4:	2a00      	cmp	r2, #0
 800abf6:	f000 80ea 	beq.w	800adce <_dtoa_r+0x8d6>
 800abfa:	9a07      	ldr	r2, [sp, #28]
 800abfc:	2a01      	cmp	r2, #1
 800abfe:	f300 80cd 	bgt.w	800ad9c <_dtoa_r+0x8a4>
 800ac02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ac04:	2a00      	cmp	r2, #0
 800ac06:	f000 80c1 	beq.w	800ad8c <_dtoa_r+0x894>
 800ac0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ac0e:	9c08      	ldr	r4, [sp, #32]
 800ac10:	9e00      	ldr	r6, [sp, #0]
 800ac12:	9a00      	ldr	r2, [sp, #0]
 800ac14:	441a      	add	r2, r3
 800ac16:	9200      	str	r2, [sp, #0]
 800ac18:	9a06      	ldr	r2, [sp, #24]
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	441a      	add	r2, r3
 800ac1e:	4648      	mov	r0, r9
 800ac20:	9206      	str	r2, [sp, #24]
 800ac22:	f000 fc2d 	bl	800b480 <__i2b>
 800ac26:	4605      	mov	r5, r0
 800ac28:	b166      	cbz	r6, 800ac44 <_dtoa_r+0x74c>
 800ac2a:	9b06      	ldr	r3, [sp, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dd09      	ble.n	800ac44 <_dtoa_r+0x74c>
 800ac30:	42b3      	cmp	r3, r6
 800ac32:	9a00      	ldr	r2, [sp, #0]
 800ac34:	bfa8      	it	ge
 800ac36:	4633      	movge	r3, r6
 800ac38:	1ad2      	subs	r2, r2, r3
 800ac3a:	9200      	str	r2, [sp, #0]
 800ac3c:	9a06      	ldr	r2, [sp, #24]
 800ac3e:	1af6      	subs	r6, r6, r3
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	9306      	str	r3, [sp, #24]
 800ac44:	9b08      	ldr	r3, [sp, #32]
 800ac46:	b30b      	cbz	r3, 800ac8c <_dtoa_r+0x794>
 800ac48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 80c6 	beq.w	800addc <_dtoa_r+0x8e4>
 800ac50:	2c00      	cmp	r4, #0
 800ac52:	f000 80c0 	beq.w	800add6 <_dtoa_r+0x8de>
 800ac56:	4629      	mov	r1, r5
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4648      	mov	r0, r9
 800ac5c:	f000 fcc8 	bl	800b5f0 <__pow5mult>
 800ac60:	9a02      	ldr	r2, [sp, #8]
 800ac62:	4601      	mov	r1, r0
 800ac64:	4605      	mov	r5, r0
 800ac66:	4648      	mov	r0, r9
 800ac68:	f000 fc20 	bl	800b4ac <__multiply>
 800ac6c:	9902      	ldr	r1, [sp, #8]
 800ac6e:	4680      	mov	r8, r0
 800ac70:	4648      	mov	r0, r9
 800ac72:	f000 fb51 	bl	800b318 <_Bfree>
 800ac76:	9b08      	ldr	r3, [sp, #32]
 800ac78:	1b1b      	subs	r3, r3, r4
 800ac7a:	9308      	str	r3, [sp, #32]
 800ac7c:	f000 80b1 	beq.w	800ade2 <_dtoa_r+0x8ea>
 800ac80:	9a08      	ldr	r2, [sp, #32]
 800ac82:	4641      	mov	r1, r8
 800ac84:	4648      	mov	r0, r9
 800ac86:	f000 fcb3 	bl	800b5f0 <__pow5mult>
 800ac8a:	9002      	str	r0, [sp, #8]
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	4648      	mov	r0, r9
 800ac90:	f000 fbf6 	bl	800b480 <__i2b>
 800ac94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac96:	4604      	mov	r4, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 81d8 	beq.w	800b04e <_dtoa_r+0xb56>
 800ac9e:	461a      	mov	r2, r3
 800aca0:	4601      	mov	r1, r0
 800aca2:	4648      	mov	r0, r9
 800aca4:	f000 fca4 	bl	800b5f0 <__pow5mult>
 800aca8:	9b07      	ldr	r3, [sp, #28]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	4604      	mov	r4, r0
 800acae:	f300 809f 	bgt.w	800adf0 <_dtoa_r+0x8f8>
 800acb2:	9b04      	ldr	r3, [sp, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f040 8097 	bne.w	800ade8 <_dtoa_r+0x8f0>
 800acba:	9b05      	ldr	r3, [sp, #20]
 800acbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f040 8093 	bne.w	800adec <_dtoa_r+0x8f4>
 800acc6:	9b05      	ldr	r3, [sp, #20]
 800acc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800accc:	0d1b      	lsrs	r3, r3, #20
 800acce:	051b      	lsls	r3, r3, #20
 800acd0:	b133      	cbz	r3, 800ace0 <_dtoa_r+0x7e8>
 800acd2:	9b00      	ldr	r3, [sp, #0]
 800acd4:	3301      	adds	r3, #1
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	9b06      	ldr	r3, [sp, #24]
 800acda:	3301      	adds	r3, #1
 800acdc:	9306      	str	r3, [sp, #24]
 800acde:	2301      	movs	r3, #1
 800ace0:	9308      	str	r3, [sp, #32]
 800ace2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 81b8 	beq.w	800b05a <_dtoa_r+0xb62>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acf0:	6918      	ldr	r0, [r3, #16]
 800acf2:	f000 fb79 	bl	800b3e8 <__hi0bits>
 800acf6:	f1c0 0020 	rsb	r0, r0, #32
 800acfa:	9b06      	ldr	r3, [sp, #24]
 800acfc:	4418      	add	r0, r3
 800acfe:	f010 001f 	ands.w	r0, r0, #31
 800ad02:	f000 8082 	beq.w	800ae0a <_dtoa_r+0x912>
 800ad06:	f1c0 0320 	rsb	r3, r0, #32
 800ad0a:	2b04      	cmp	r3, #4
 800ad0c:	dd73      	ble.n	800adf6 <_dtoa_r+0x8fe>
 800ad0e:	9b00      	ldr	r3, [sp, #0]
 800ad10:	f1c0 001c 	rsb	r0, r0, #28
 800ad14:	4403      	add	r3, r0
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	9b06      	ldr	r3, [sp, #24]
 800ad1a:	4403      	add	r3, r0
 800ad1c:	4406      	add	r6, r0
 800ad1e:	9306      	str	r3, [sp, #24]
 800ad20:	9b00      	ldr	r3, [sp, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	dd05      	ble.n	800ad32 <_dtoa_r+0x83a>
 800ad26:	9902      	ldr	r1, [sp, #8]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	4648      	mov	r0, r9
 800ad2c:	f000 fcba 	bl	800b6a4 <__lshift>
 800ad30:	9002      	str	r0, [sp, #8]
 800ad32:	9b06      	ldr	r3, [sp, #24]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dd05      	ble.n	800ad44 <_dtoa_r+0x84c>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	4648      	mov	r0, r9
 800ad3e:	f000 fcb1 	bl	800b6a4 <__lshift>
 800ad42:	4604      	mov	r4, r0
 800ad44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d061      	beq.n	800ae0e <_dtoa_r+0x916>
 800ad4a:	9802      	ldr	r0, [sp, #8]
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	f000 fd15 	bl	800b77c <__mcmp>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	da5b      	bge.n	800ae0e <_dtoa_r+0x916>
 800ad56:	2300      	movs	r3, #0
 800ad58:	9902      	ldr	r1, [sp, #8]
 800ad5a:	220a      	movs	r2, #10
 800ad5c:	4648      	mov	r0, r9
 800ad5e:	f000 fafd 	bl	800b35c <__multadd>
 800ad62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad64:	9002      	str	r0, [sp, #8]
 800ad66:	f107 38ff 	add.w	r8, r7, #4294967295
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 8177 	beq.w	800b05e <_dtoa_r+0xb66>
 800ad70:	4629      	mov	r1, r5
 800ad72:	2300      	movs	r3, #0
 800ad74:	220a      	movs	r2, #10
 800ad76:	4648      	mov	r0, r9
 800ad78:	f000 faf0 	bl	800b35c <__multadd>
 800ad7c:	f1bb 0f00 	cmp.w	fp, #0
 800ad80:	4605      	mov	r5, r0
 800ad82:	dc6f      	bgt.n	800ae64 <_dtoa_r+0x96c>
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	dc49      	bgt.n	800ae1e <_dtoa_r+0x926>
 800ad8a:	e06b      	b.n	800ae64 <_dtoa_r+0x96c>
 800ad8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ad92:	e73c      	b.n	800ac0e <_dtoa_r+0x716>
 800ad94:	3fe00000 	.word	0x3fe00000
 800ad98:	40240000 	.word	0x40240000
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	1e5c      	subs	r4, r3, #1
 800ada0:	9b08      	ldr	r3, [sp, #32]
 800ada2:	42a3      	cmp	r3, r4
 800ada4:	db09      	blt.n	800adba <_dtoa_r+0x8c2>
 800ada6:	1b1c      	subs	r4, r3, r4
 800ada8:	9b03      	ldr	r3, [sp, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f6bf af30 	bge.w	800ac10 <_dtoa_r+0x718>
 800adb0:	9b00      	ldr	r3, [sp, #0]
 800adb2:	9a03      	ldr	r2, [sp, #12]
 800adb4:	1a9e      	subs	r6, r3, r2
 800adb6:	2300      	movs	r3, #0
 800adb8:	e72b      	b.n	800ac12 <_dtoa_r+0x71a>
 800adba:	9b08      	ldr	r3, [sp, #32]
 800adbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adbe:	9408      	str	r4, [sp, #32]
 800adc0:	1ae3      	subs	r3, r4, r3
 800adc2:	441a      	add	r2, r3
 800adc4:	9e00      	ldr	r6, [sp, #0]
 800adc6:	9b03      	ldr	r3, [sp, #12]
 800adc8:	920d      	str	r2, [sp, #52]	@ 0x34
 800adca:	2400      	movs	r4, #0
 800adcc:	e721      	b.n	800ac12 <_dtoa_r+0x71a>
 800adce:	9c08      	ldr	r4, [sp, #32]
 800add0:	9e00      	ldr	r6, [sp, #0]
 800add2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800add4:	e728      	b.n	800ac28 <_dtoa_r+0x730>
 800add6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800adda:	e751      	b.n	800ac80 <_dtoa_r+0x788>
 800addc:	9a08      	ldr	r2, [sp, #32]
 800adde:	9902      	ldr	r1, [sp, #8]
 800ade0:	e750      	b.n	800ac84 <_dtoa_r+0x78c>
 800ade2:	f8cd 8008 	str.w	r8, [sp, #8]
 800ade6:	e751      	b.n	800ac8c <_dtoa_r+0x794>
 800ade8:	2300      	movs	r3, #0
 800adea:	e779      	b.n	800ace0 <_dtoa_r+0x7e8>
 800adec:	9b04      	ldr	r3, [sp, #16]
 800adee:	e777      	b.n	800ace0 <_dtoa_r+0x7e8>
 800adf0:	2300      	movs	r3, #0
 800adf2:	9308      	str	r3, [sp, #32]
 800adf4:	e779      	b.n	800acea <_dtoa_r+0x7f2>
 800adf6:	d093      	beq.n	800ad20 <_dtoa_r+0x828>
 800adf8:	9a00      	ldr	r2, [sp, #0]
 800adfa:	331c      	adds	r3, #28
 800adfc:	441a      	add	r2, r3
 800adfe:	9200      	str	r2, [sp, #0]
 800ae00:	9a06      	ldr	r2, [sp, #24]
 800ae02:	441a      	add	r2, r3
 800ae04:	441e      	add	r6, r3
 800ae06:	9206      	str	r2, [sp, #24]
 800ae08:	e78a      	b.n	800ad20 <_dtoa_r+0x828>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	e7f4      	b.n	800adf8 <_dtoa_r+0x900>
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	46b8      	mov	r8, r7
 800ae14:	dc20      	bgt.n	800ae58 <_dtoa_r+0x960>
 800ae16:	469b      	mov	fp, r3
 800ae18:	9b07      	ldr	r3, [sp, #28]
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	dd1e      	ble.n	800ae5c <_dtoa_r+0x964>
 800ae1e:	f1bb 0f00 	cmp.w	fp, #0
 800ae22:	f47f adb1 	bne.w	800a988 <_dtoa_r+0x490>
 800ae26:	4621      	mov	r1, r4
 800ae28:	465b      	mov	r3, fp
 800ae2a:	2205      	movs	r2, #5
 800ae2c:	4648      	mov	r0, r9
 800ae2e:	f000 fa95 	bl	800b35c <__multadd>
 800ae32:	4601      	mov	r1, r0
 800ae34:	4604      	mov	r4, r0
 800ae36:	9802      	ldr	r0, [sp, #8]
 800ae38:	f000 fca0 	bl	800b77c <__mcmp>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f77f ada3 	ble.w	800a988 <_dtoa_r+0x490>
 800ae42:	4656      	mov	r6, sl
 800ae44:	2331      	movs	r3, #49	@ 0x31
 800ae46:	f806 3b01 	strb.w	r3, [r6], #1
 800ae4a:	f108 0801 	add.w	r8, r8, #1
 800ae4e:	e59f      	b.n	800a990 <_dtoa_r+0x498>
 800ae50:	9c03      	ldr	r4, [sp, #12]
 800ae52:	46b8      	mov	r8, r7
 800ae54:	4625      	mov	r5, r4
 800ae56:	e7f4      	b.n	800ae42 <_dtoa_r+0x94a>
 800ae58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ae5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 8101 	beq.w	800b066 <_dtoa_r+0xb6e>
 800ae64:	2e00      	cmp	r6, #0
 800ae66:	dd05      	ble.n	800ae74 <_dtoa_r+0x97c>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	4648      	mov	r0, r9
 800ae6e:	f000 fc19 	bl	800b6a4 <__lshift>
 800ae72:	4605      	mov	r5, r0
 800ae74:	9b08      	ldr	r3, [sp, #32]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d05c      	beq.n	800af34 <_dtoa_r+0xa3c>
 800ae7a:	6869      	ldr	r1, [r5, #4]
 800ae7c:	4648      	mov	r0, r9
 800ae7e:	f000 fa0b 	bl	800b298 <_Balloc>
 800ae82:	4606      	mov	r6, r0
 800ae84:	b928      	cbnz	r0, 800ae92 <_dtoa_r+0x99a>
 800ae86:	4b82      	ldr	r3, [pc, #520]	@ (800b090 <_dtoa_r+0xb98>)
 800ae88:	4602      	mov	r2, r0
 800ae8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae8e:	f7ff bb4a 	b.w	800a526 <_dtoa_r+0x2e>
 800ae92:	692a      	ldr	r2, [r5, #16]
 800ae94:	3202      	adds	r2, #2
 800ae96:	0092      	lsls	r2, r2, #2
 800ae98:	f105 010c 	add.w	r1, r5, #12
 800ae9c:	300c      	adds	r0, #12
 800ae9e:	f000 ffa3 	bl	800bde8 <memcpy>
 800aea2:	2201      	movs	r2, #1
 800aea4:	4631      	mov	r1, r6
 800aea6:	4648      	mov	r0, r9
 800aea8:	f000 fbfc 	bl	800b6a4 <__lshift>
 800aeac:	f10a 0301 	add.w	r3, sl, #1
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	eb0a 030b 	add.w	r3, sl, fp
 800aeb6:	9308      	str	r3, [sp, #32]
 800aeb8:	9b04      	ldr	r3, [sp, #16]
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	462f      	mov	r7, r5
 800aec0:	9306      	str	r3, [sp, #24]
 800aec2:	4605      	mov	r5, r0
 800aec4:	9b00      	ldr	r3, [sp, #0]
 800aec6:	9802      	ldr	r0, [sp, #8]
 800aec8:	4621      	mov	r1, r4
 800aeca:	f103 3bff 	add.w	fp, r3, #4294967295
 800aece:	f7ff fa8a 	bl	800a3e6 <quorem>
 800aed2:	4603      	mov	r3, r0
 800aed4:	3330      	adds	r3, #48	@ 0x30
 800aed6:	9003      	str	r0, [sp, #12]
 800aed8:	4639      	mov	r1, r7
 800aeda:	9802      	ldr	r0, [sp, #8]
 800aedc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aede:	f000 fc4d 	bl	800b77c <__mcmp>
 800aee2:	462a      	mov	r2, r5
 800aee4:	9004      	str	r0, [sp, #16]
 800aee6:	4621      	mov	r1, r4
 800aee8:	4648      	mov	r0, r9
 800aeea:	f000 fc63 	bl	800b7b4 <__mdiff>
 800aeee:	68c2      	ldr	r2, [r0, #12]
 800aef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef2:	4606      	mov	r6, r0
 800aef4:	bb02      	cbnz	r2, 800af38 <_dtoa_r+0xa40>
 800aef6:	4601      	mov	r1, r0
 800aef8:	9802      	ldr	r0, [sp, #8]
 800aefa:	f000 fc3f 	bl	800b77c <__mcmp>
 800aefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af00:	4602      	mov	r2, r0
 800af02:	4631      	mov	r1, r6
 800af04:	4648      	mov	r0, r9
 800af06:	920c      	str	r2, [sp, #48]	@ 0x30
 800af08:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0a:	f000 fa05 	bl	800b318 <_Bfree>
 800af0e:	9b07      	ldr	r3, [sp, #28]
 800af10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af12:	9e00      	ldr	r6, [sp, #0]
 800af14:	ea42 0103 	orr.w	r1, r2, r3
 800af18:	9b06      	ldr	r3, [sp, #24]
 800af1a:	4319      	orrs	r1, r3
 800af1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1e:	d10d      	bne.n	800af3c <_dtoa_r+0xa44>
 800af20:	2b39      	cmp	r3, #57	@ 0x39
 800af22:	d027      	beq.n	800af74 <_dtoa_r+0xa7c>
 800af24:	9a04      	ldr	r2, [sp, #16]
 800af26:	2a00      	cmp	r2, #0
 800af28:	dd01      	ble.n	800af2e <_dtoa_r+0xa36>
 800af2a:	9b03      	ldr	r3, [sp, #12]
 800af2c:	3331      	adds	r3, #49	@ 0x31
 800af2e:	f88b 3000 	strb.w	r3, [fp]
 800af32:	e52e      	b.n	800a992 <_dtoa_r+0x49a>
 800af34:	4628      	mov	r0, r5
 800af36:	e7b9      	b.n	800aeac <_dtoa_r+0x9b4>
 800af38:	2201      	movs	r2, #1
 800af3a:	e7e2      	b.n	800af02 <_dtoa_r+0xa0a>
 800af3c:	9904      	ldr	r1, [sp, #16]
 800af3e:	2900      	cmp	r1, #0
 800af40:	db04      	blt.n	800af4c <_dtoa_r+0xa54>
 800af42:	9807      	ldr	r0, [sp, #28]
 800af44:	4301      	orrs	r1, r0
 800af46:	9806      	ldr	r0, [sp, #24]
 800af48:	4301      	orrs	r1, r0
 800af4a:	d120      	bne.n	800af8e <_dtoa_r+0xa96>
 800af4c:	2a00      	cmp	r2, #0
 800af4e:	ddee      	ble.n	800af2e <_dtoa_r+0xa36>
 800af50:	9902      	ldr	r1, [sp, #8]
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	2201      	movs	r2, #1
 800af56:	4648      	mov	r0, r9
 800af58:	f000 fba4 	bl	800b6a4 <__lshift>
 800af5c:	4621      	mov	r1, r4
 800af5e:	9002      	str	r0, [sp, #8]
 800af60:	f000 fc0c 	bl	800b77c <__mcmp>
 800af64:	2800      	cmp	r0, #0
 800af66:	9b00      	ldr	r3, [sp, #0]
 800af68:	dc02      	bgt.n	800af70 <_dtoa_r+0xa78>
 800af6a:	d1e0      	bne.n	800af2e <_dtoa_r+0xa36>
 800af6c:	07da      	lsls	r2, r3, #31
 800af6e:	d5de      	bpl.n	800af2e <_dtoa_r+0xa36>
 800af70:	2b39      	cmp	r3, #57	@ 0x39
 800af72:	d1da      	bne.n	800af2a <_dtoa_r+0xa32>
 800af74:	2339      	movs	r3, #57	@ 0x39
 800af76:	f88b 3000 	strb.w	r3, [fp]
 800af7a:	4633      	mov	r3, r6
 800af7c:	461e      	mov	r6, r3
 800af7e:	3b01      	subs	r3, #1
 800af80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800af84:	2a39      	cmp	r2, #57	@ 0x39
 800af86:	d04e      	beq.n	800b026 <_dtoa_r+0xb2e>
 800af88:	3201      	adds	r2, #1
 800af8a:	701a      	strb	r2, [r3, #0]
 800af8c:	e501      	b.n	800a992 <_dtoa_r+0x49a>
 800af8e:	2a00      	cmp	r2, #0
 800af90:	dd03      	ble.n	800af9a <_dtoa_r+0xaa2>
 800af92:	2b39      	cmp	r3, #57	@ 0x39
 800af94:	d0ee      	beq.n	800af74 <_dtoa_r+0xa7c>
 800af96:	3301      	adds	r3, #1
 800af98:	e7c9      	b.n	800af2e <_dtoa_r+0xa36>
 800af9a:	9a00      	ldr	r2, [sp, #0]
 800af9c:	9908      	ldr	r1, [sp, #32]
 800af9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800afa2:	428a      	cmp	r2, r1
 800afa4:	d028      	beq.n	800aff8 <_dtoa_r+0xb00>
 800afa6:	9902      	ldr	r1, [sp, #8]
 800afa8:	2300      	movs	r3, #0
 800afaa:	220a      	movs	r2, #10
 800afac:	4648      	mov	r0, r9
 800afae:	f000 f9d5 	bl	800b35c <__multadd>
 800afb2:	42af      	cmp	r7, r5
 800afb4:	9002      	str	r0, [sp, #8]
 800afb6:	f04f 0300 	mov.w	r3, #0
 800afba:	f04f 020a 	mov.w	r2, #10
 800afbe:	4639      	mov	r1, r7
 800afc0:	4648      	mov	r0, r9
 800afc2:	d107      	bne.n	800afd4 <_dtoa_r+0xadc>
 800afc4:	f000 f9ca 	bl	800b35c <__multadd>
 800afc8:	4607      	mov	r7, r0
 800afca:	4605      	mov	r5, r0
 800afcc:	9b00      	ldr	r3, [sp, #0]
 800afce:	3301      	adds	r3, #1
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	e777      	b.n	800aec4 <_dtoa_r+0x9cc>
 800afd4:	f000 f9c2 	bl	800b35c <__multadd>
 800afd8:	4629      	mov	r1, r5
 800afda:	4607      	mov	r7, r0
 800afdc:	2300      	movs	r3, #0
 800afde:	220a      	movs	r2, #10
 800afe0:	4648      	mov	r0, r9
 800afe2:	f000 f9bb 	bl	800b35c <__multadd>
 800afe6:	4605      	mov	r5, r0
 800afe8:	e7f0      	b.n	800afcc <_dtoa_r+0xad4>
 800afea:	f1bb 0f00 	cmp.w	fp, #0
 800afee:	bfcc      	ite	gt
 800aff0:	465e      	movgt	r6, fp
 800aff2:	2601      	movle	r6, #1
 800aff4:	4456      	add	r6, sl
 800aff6:	2700      	movs	r7, #0
 800aff8:	9902      	ldr	r1, [sp, #8]
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	2201      	movs	r2, #1
 800affe:	4648      	mov	r0, r9
 800b000:	f000 fb50 	bl	800b6a4 <__lshift>
 800b004:	4621      	mov	r1, r4
 800b006:	9002      	str	r0, [sp, #8]
 800b008:	f000 fbb8 	bl	800b77c <__mcmp>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	dcb4      	bgt.n	800af7a <_dtoa_r+0xa82>
 800b010:	d102      	bne.n	800b018 <_dtoa_r+0xb20>
 800b012:	9b00      	ldr	r3, [sp, #0]
 800b014:	07db      	lsls	r3, r3, #31
 800b016:	d4b0      	bmi.n	800af7a <_dtoa_r+0xa82>
 800b018:	4633      	mov	r3, r6
 800b01a:	461e      	mov	r6, r3
 800b01c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b020:	2a30      	cmp	r2, #48	@ 0x30
 800b022:	d0fa      	beq.n	800b01a <_dtoa_r+0xb22>
 800b024:	e4b5      	b.n	800a992 <_dtoa_r+0x49a>
 800b026:	459a      	cmp	sl, r3
 800b028:	d1a8      	bne.n	800af7c <_dtoa_r+0xa84>
 800b02a:	2331      	movs	r3, #49	@ 0x31
 800b02c:	f108 0801 	add.w	r8, r8, #1
 800b030:	f88a 3000 	strb.w	r3, [sl]
 800b034:	e4ad      	b.n	800a992 <_dtoa_r+0x49a>
 800b036:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b038:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b094 <_dtoa_r+0xb9c>
 800b03c:	b11b      	cbz	r3, 800b046 <_dtoa_r+0xb4e>
 800b03e:	f10a 0308 	add.w	r3, sl, #8
 800b042:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b044:	6013      	str	r3, [r2, #0]
 800b046:	4650      	mov	r0, sl
 800b048:	b017      	add	sp, #92	@ 0x5c
 800b04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04e:	9b07      	ldr	r3, [sp, #28]
 800b050:	2b01      	cmp	r3, #1
 800b052:	f77f ae2e 	ble.w	800acb2 <_dtoa_r+0x7ba>
 800b056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b058:	9308      	str	r3, [sp, #32]
 800b05a:	2001      	movs	r0, #1
 800b05c:	e64d      	b.n	800acfa <_dtoa_r+0x802>
 800b05e:	f1bb 0f00 	cmp.w	fp, #0
 800b062:	f77f aed9 	ble.w	800ae18 <_dtoa_r+0x920>
 800b066:	4656      	mov	r6, sl
 800b068:	9802      	ldr	r0, [sp, #8]
 800b06a:	4621      	mov	r1, r4
 800b06c:	f7ff f9bb 	bl	800a3e6 <quorem>
 800b070:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b074:	f806 3b01 	strb.w	r3, [r6], #1
 800b078:	eba6 020a 	sub.w	r2, r6, sl
 800b07c:	4593      	cmp	fp, r2
 800b07e:	ddb4      	ble.n	800afea <_dtoa_r+0xaf2>
 800b080:	9902      	ldr	r1, [sp, #8]
 800b082:	2300      	movs	r3, #0
 800b084:	220a      	movs	r2, #10
 800b086:	4648      	mov	r0, r9
 800b088:	f000 f968 	bl	800b35c <__multadd>
 800b08c:	9002      	str	r0, [sp, #8]
 800b08e:	e7eb      	b.n	800b068 <_dtoa_r+0xb70>
 800b090:	0800e370 	.word	0x0800e370
 800b094:	0800e2f4 	.word	0x0800e2f4

0800b098 <_free_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4605      	mov	r5, r0
 800b09c:	2900      	cmp	r1, #0
 800b09e:	d041      	beq.n	800b124 <_free_r+0x8c>
 800b0a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0a4:	1f0c      	subs	r4, r1, #4
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bfb8      	it	lt
 800b0aa:	18e4      	addlt	r4, r4, r3
 800b0ac:	f000 f8e8 	bl	800b280 <__malloc_lock>
 800b0b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b128 <_free_r+0x90>)
 800b0b2:	6813      	ldr	r3, [r2, #0]
 800b0b4:	b933      	cbnz	r3, 800b0c4 <_free_r+0x2c>
 800b0b6:	6063      	str	r3, [r4, #4]
 800b0b8:	6014      	str	r4, [r2, #0]
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0c0:	f000 b8e4 	b.w	800b28c <__malloc_unlock>
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	d908      	bls.n	800b0da <_free_r+0x42>
 800b0c8:	6820      	ldr	r0, [r4, #0]
 800b0ca:	1821      	adds	r1, r4, r0
 800b0cc:	428b      	cmp	r3, r1
 800b0ce:	bf01      	itttt	eq
 800b0d0:	6819      	ldreq	r1, [r3, #0]
 800b0d2:	685b      	ldreq	r3, [r3, #4]
 800b0d4:	1809      	addeq	r1, r1, r0
 800b0d6:	6021      	streq	r1, [r4, #0]
 800b0d8:	e7ed      	b.n	800b0b6 <_free_r+0x1e>
 800b0da:	461a      	mov	r2, r3
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	b10b      	cbz	r3, 800b0e4 <_free_r+0x4c>
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	d9fa      	bls.n	800b0da <_free_r+0x42>
 800b0e4:	6811      	ldr	r1, [r2, #0]
 800b0e6:	1850      	adds	r0, r2, r1
 800b0e8:	42a0      	cmp	r0, r4
 800b0ea:	d10b      	bne.n	800b104 <_free_r+0x6c>
 800b0ec:	6820      	ldr	r0, [r4, #0]
 800b0ee:	4401      	add	r1, r0
 800b0f0:	1850      	adds	r0, r2, r1
 800b0f2:	4283      	cmp	r3, r0
 800b0f4:	6011      	str	r1, [r2, #0]
 800b0f6:	d1e0      	bne.n	800b0ba <_free_r+0x22>
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	6053      	str	r3, [r2, #4]
 800b0fe:	4408      	add	r0, r1
 800b100:	6010      	str	r0, [r2, #0]
 800b102:	e7da      	b.n	800b0ba <_free_r+0x22>
 800b104:	d902      	bls.n	800b10c <_free_r+0x74>
 800b106:	230c      	movs	r3, #12
 800b108:	602b      	str	r3, [r5, #0]
 800b10a:	e7d6      	b.n	800b0ba <_free_r+0x22>
 800b10c:	6820      	ldr	r0, [r4, #0]
 800b10e:	1821      	adds	r1, r4, r0
 800b110:	428b      	cmp	r3, r1
 800b112:	bf04      	itt	eq
 800b114:	6819      	ldreq	r1, [r3, #0]
 800b116:	685b      	ldreq	r3, [r3, #4]
 800b118:	6063      	str	r3, [r4, #4]
 800b11a:	bf04      	itt	eq
 800b11c:	1809      	addeq	r1, r1, r0
 800b11e:	6021      	streq	r1, [r4, #0]
 800b120:	6054      	str	r4, [r2, #4]
 800b122:	e7ca      	b.n	800b0ba <_free_r+0x22>
 800b124:	bd38      	pop	{r3, r4, r5, pc}
 800b126:	bf00      	nop
 800b128:	20001edc 	.word	0x20001edc

0800b12c <malloc>:
 800b12c:	4b02      	ldr	r3, [pc, #8]	@ (800b138 <malloc+0xc>)
 800b12e:	4601      	mov	r1, r0
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	f000 b825 	b.w	800b180 <_malloc_r>
 800b136:	bf00      	nop
 800b138:	2000003c 	.word	0x2000003c

0800b13c <sbrk_aligned>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	4e0f      	ldr	r6, [pc, #60]	@ (800b17c <sbrk_aligned+0x40>)
 800b140:	460c      	mov	r4, r1
 800b142:	6831      	ldr	r1, [r6, #0]
 800b144:	4605      	mov	r5, r0
 800b146:	b911      	cbnz	r1, 800b14e <sbrk_aligned+0x12>
 800b148:	f000 fe3e 	bl	800bdc8 <_sbrk_r>
 800b14c:	6030      	str	r0, [r6, #0]
 800b14e:	4621      	mov	r1, r4
 800b150:	4628      	mov	r0, r5
 800b152:	f000 fe39 	bl	800bdc8 <_sbrk_r>
 800b156:	1c43      	adds	r3, r0, #1
 800b158:	d103      	bne.n	800b162 <sbrk_aligned+0x26>
 800b15a:	f04f 34ff 	mov.w	r4, #4294967295
 800b15e:	4620      	mov	r0, r4
 800b160:	bd70      	pop	{r4, r5, r6, pc}
 800b162:	1cc4      	adds	r4, r0, #3
 800b164:	f024 0403 	bic.w	r4, r4, #3
 800b168:	42a0      	cmp	r0, r4
 800b16a:	d0f8      	beq.n	800b15e <sbrk_aligned+0x22>
 800b16c:	1a21      	subs	r1, r4, r0
 800b16e:	4628      	mov	r0, r5
 800b170:	f000 fe2a 	bl	800bdc8 <_sbrk_r>
 800b174:	3001      	adds	r0, #1
 800b176:	d1f2      	bne.n	800b15e <sbrk_aligned+0x22>
 800b178:	e7ef      	b.n	800b15a <sbrk_aligned+0x1e>
 800b17a:	bf00      	nop
 800b17c:	20001ed8 	.word	0x20001ed8

0800b180 <_malloc_r>:
 800b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b184:	1ccd      	adds	r5, r1, #3
 800b186:	f025 0503 	bic.w	r5, r5, #3
 800b18a:	3508      	adds	r5, #8
 800b18c:	2d0c      	cmp	r5, #12
 800b18e:	bf38      	it	cc
 800b190:	250c      	movcc	r5, #12
 800b192:	2d00      	cmp	r5, #0
 800b194:	4606      	mov	r6, r0
 800b196:	db01      	blt.n	800b19c <_malloc_r+0x1c>
 800b198:	42a9      	cmp	r1, r5
 800b19a:	d904      	bls.n	800b1a6 <_malloc_r+0x26>
 800b19c:	230c      	movs	r3, #12
 800b19e:	6033      	str	r3, [r6, #0]
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b27c <_malloc_r+0xfc>
 800b1aa:	f000 f869 	bl	800b280 <__malloc_lock>
 800b1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b2:	461c      	mov	r4, r3
 800b1b4:	bb44      	cbnz	r4, 800b208 <_malloc_r+0x88>
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f7ff ffbf 	bl	800b13c <sbrk_aligned>
 800b1be:	1c43      	adds	r3, r0, #1
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	d158      	bne.n	800b276 <_malloc_r+0xf6>
 800b1c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b1c8:	4627      	mov	r7, r4
 800b1ca:	2f00      	cmp	r7, #0
 800b1cc:	d143      	bne.n	800b256 <_malloc_r+0xd6>
 800b1ce:	2c00      	cmp	r4, #0
 800b1d0:	d04b      	beq.n	800b26a <_malloc_r+0xea>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	eb04 0903 	add.w	r9, r4, r3
 800b1dc:	f000 fdf4 	bl	800bdc8 <_sbrk_r>
 800b1e0:	4581      	cmp	r9, r0
 800b1e2:	d142      	bne.n	800b26a <_malloc_r+0xea>
 800b1e4:	6821      	ldr	r1, [r4, #0]
 800b1e6:	1a6d      	subs	r5, r5, r1
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f7ff ffa6 	bl	800b13c <sbrk_aligned>
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d03a      	beq.n	800b26a <_malloc_r+0xea>
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	442b      	add	r3, r5
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	bb62      	cbnz	r2, 800b25c <_malloc_r+0xdc>
 800b202:	f8c8 7000 	str.w	r7, [r8]
 800b206:	e00f      	b.n	800b228 <_malloc_r+0xa8>
 800b208:	6822      	ldr	r2, [r4, #0]
 800b20a:	1b52      	subs	r2, r2, r5
 800b20c:	d420      	bmi.n	800b250 <_malloc_r+0xd0>
 800b20e:	2a0b      	cmp	r2, #11
 800b210:	d917      	bls.n	800b242 <_malloc_r+0xc2>
 800b212:	1961      	adds	r1, r4, r5
 800b214:	42a3      	cmp	r3, r4
 800b216:	6025      	str	r5, [r4, #0]
 800b218:	bf18      	it	ne
 800b21a:	6059      	strne	r1, [r3, #4]
 800b21c:	6863      	ldr	r3, [r4, #4]
 800b21e:	bf08      	it	eq
 800b220:	f8c8 1000 	streq.w	r1, [r8]
 800b224:	5162      	str	r2, [r4, r5]
 800b226:	604b      	str	r3, [r1, #4]
 800b228:	4630      	mov	r0, r6
 800b22a:	f000 f82f 	bl	800b28c <__malloc_unlock>
 800b22e:	f104 000b 	add.w	r0, r4, #11
 800b232:	1d23      	adds	r3, r4, #4
 800b234:	f020 0007 	bic.w	r0, r0, #7
 800b238:	1ac2      	subs	r2, r0, r3
 800b23a:	bf1c      	itt	ne
 800b23c:	1a1b      	subne	r3, r3, r0
 800b23e:	50a3      	strne	r3, [r4, r2]
 800b240:	e7af      	b.n	800b1a2 <_malloc_r+0x22>
 800b242:	6862      	ldr	r2, [r4, #4]
 800b244:	42a3      	cmp	r3, r4
 800b246:	bf0c      	ite	eq
 800b248:	f8c8 2000 	streq.w	r2, [r8]
 800b24c:	605a      	strne	r2, [r3, #4]
 800b24e:	e7eb      	b.n	800b228 <_malloc_r+0xa8>
 800b250:	4623      	mov	r3, r4
 800b252:	6864      	ldr	r4, [r4, #4]
 800b254:	e7ae      	b.n	800b1b4 <_malloc_r+0x34>
 800b256:	463c      	mov	r4, r7
 800b258:	687f      	ldr	r7, [r7, #4]
 800b25a:	e7b6      	b.n	800b1ca <_malloc_r+0x4a>
 800b25c:	461a      	mov	r2, r3
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	42a3      	cmp	r3, r4
 800b262:	d1fb      	bne.n	800b25c <_malloc_r+0xdc>
 800b264:	2300      	movs	r3, #0
 800b266:	6053      	str	r3, [r2, #4]
 800b268:	e7de      	b.n	800b228 <_malloc_r+0xa8>
 800b26a:	230c      	movs	r3, #12
 800b26c:	6033      	str	r3, [r6, #0]
 800b26e:	4630      	mov	r0, r6
 800b270:	f000 f80c 	bl	800b28c <__malloc_unlock>
 800b274:	e794      	b.n	800b1a0 <_malloc_r+0x20>
 800b276:	6005      	str	r5, [r0, #0]
 800b278:	e7d6      	b.n	800b228 <_malloc_r+0xa8>
 800b27a:	bf00      	nop
 800b27c:	20001edc 	.word	0x20001edc

0800b280 <__malloc_lock>:
 800b280:	4801      	ldr	r0, [pc, #4]	@ (800b288 <__malloc_lock+0x8>)
 800b282:	f7ff b8ae 	b.w	800a3e2 <__retarget_lock_acquire_recursive>
 800b286:	bf00      	nop
 800b288:	20001ed4 	.word	0x20001ed4

0800b28c <__malloc_unlock>:
 800b28c:	4801      	ldr	r0, [pc, #4]	@ (800b294 <__malloc_unlock+0x8>)
 800b28e:	f7ff b8a9 	b.w	800a3e4 <__retarget_lock_release_recursive>
 800b292:	bf00      	nop
 800b294:	20001ed4 	.word	0x20001ed4

0800b298 <_Balloc>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	69c6      	ldr	r6, [r0, #28]
 800b29c:	4604      	mov	r4, r0
 800b29e:	460d      	mov	r5, r1
 800b2a0:	b976      	cbnz	r6, 800b2c0 <_Balloc+0x28>
 800b2a2:	2010      	movs	r0, #16
 800b2a4:	f7ff ff42 	bl	800b12c <malloc>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	61e0      	str	r0, [r4, #28]
 800b2ac:	b920      	cbnz	r0, 800b2b8 <_Balloc+0x20>
 800b2ae:	4b18      	ldr	r3, [pc, #96]	@ (800b310 <_Balloc+0x78>)
 800b2b0:	4818      	ldr	r0, [pc, #96]	@ (800b314 <_Balloc+0x7c>)
 800b2b2:	216b      	movs	r1, #107	@ 0x6b
 800b2b4:	f000 fda6 	bl	800be04 <__assert_func>
 800b2b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2bc:	6006      	str	r6, [r0, #0]
 800b2be:	60c6      	str	r6, [r0, #12]
 800b2c0:	69e6      	ldr	r6, [r4, #28]
 800b2c2:	68f3      	ldr	r3, [r6, #12]
 800b2c4:	b183      	cbz	r3, 800b2e8 <_Balloc+0x50>
 800b2c6:	69e3      	ldr	r3, [r4, #28]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2ce:	b9b8      	cbnz	r0, 800b300 <_Balloc+0x68>
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b2d6:	1d72      	adds	r2, r6, #5
 800b2d8:	0092      	lsls	r2, r2, #2
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 fdb0 	bl	800be40 <_calloc_r>
 800b2e0:	b160      	cbz	r0, 800b2fc <_Balloc+0x64>
 800b2e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2e6:	e00e      	b.n	800b306 <_Balloc+0x6e>
 800b2e8:	2221      	movs	r2, #33	@ 0x21
 800b2ea:	2104      	movs	r1, #4
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f000 fda7 	bl	800be40 <_calloc_r>
 800b2f2:	69e3      	ldr	r3, [r4, #28]
 800b2f4:	60f0      	str	r0, [r6, #12]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1e4      	bne.n	800b2c6 <_Balloc+0x2e>
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	6802      	ldr	r2, [r0, #0]
 800b302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b306:	2300      	movs	r3, #0
 800b308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b30c:	e7f7      	b.n	800b2fe <_Balloc+0x66>
 800b30e:	bf00      	nop
 800b310:	0800e301 	.word	0x0800e301
 800b314:	0800e381 	.word	0x0800e381

0800b318 <_Bfree>:
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	69c6      	ldr	r6, [r0, #28]
 800b31c:	4605      	mov	r5, r0
 800b31e:	460c      	mov	r4, r1
 800b320:	b976      	cbnz	r6, 800b340 <_Bfree+0x28>
 800b322:	2010      	movs	r0, #16
 800b324:	f7ff ff02 	bl	800b12c <malloc>
 800b328:	4602      	mov	r2, r0
 800b32a:	61e8      	str	r0, [r5, #28]
 800b32c:	b920      	cbnz	r0, 800b338 <_Bfree+0x20>
 800b32e:	4b09      	ldr	r3, [pc, #36]	@ (800b354 <_Bfree+0x3c>)
 800b330:	4809      	ldr	r0, [pc, #36]	@ (800b358 <_Bfree+0x40>)
 800b332:	218f      	movs	r1, #143	@ 0x8f
 800b334:	f000 fd66 	bl	800be04 <__assert_func>
 800b338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b33c:	6006      	str	r6, [r0, #0]
 800b33e:	60c6      	str	r6, [r0, #12]
 800b340:	b13c      	cbz	r4, 800b352 <_Bfree+0x3a>
 800b342:	69eb      	ldr	r3, [r5, #28]
 800b344:	6862      	ldr	r2, [r4, #4]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b34c:	6021      	str	r1, [r4, #0]
 800b34e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b352:	bd70      	pop	{r4, r5, r6, pc}
 800b354:	0800e301 	.word	0x0800e301
 800b358:	0800e381 	.word	0x0800e381

0800b35c <__multadd>:
 800b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b360:	690d      	ldr	r5, [r1, #16]
 800b362:	4607      	mov	r7, r0
 800b364:	460c      	mov	r4, r1
 800b366:	461e      	mov	r6, r3
 800b368:	f101 0c14 	add.w	ip, r1, #20
 800b36c:	2000      	movs	r0, #0
 800b36e:	f8dc 3000 	ldr.w	r3, [ip]
 800b372:	b299      	uxth	r1, r3
 800b374:	fb02 6101 	mla	r1, r2, r1, r6
 800b378:	0c1e      	lsrs	r6, r3, #16
 800b37a:	0c0b      	lsrs	r3, r1, #16
 800b37c:	fb02 3306 	mla	r3, r2, r6, r3
 800b380:	b289      	uxth	r1, r1
 800b382:	3001      	adds	r0, #1
 800b384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b388:	4285      	cmp	r5, r0
 800b38a:	f84c 1b04 	str.w	r1, [ip], #4
 800b38e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b392:	dcec      	bgt.n	800b36e <__multadd+0x12>
 800b394:	b30e      	cbz	r6, 800b3da <__multadd+0x7e>
 800b396:	68a3      	ldr	r3, [r4, #8]
 800b398:	42ab      	cmp	r3, r5
 800b39a:	dc19      	bgt.n	800b3d0 <__multadd+0x74>
 800b39c:	6861      	ldr	r1, [r4, #4]
 800b39e:	4638      	mov	r0, r7
 800b3a0:	3101      	adds	r1, #1
 800b3a2:	f7ff ff79 	bl	800b298 <_Balloc>
 800b3a6:	4680      	mov	r8, r0
 800b3a8:	b928      	cbnz	r0, 800b3b6 <__multadd+0x5a>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e0 <__multadd+0x84>)
 800b3ae:	480d      	ldr	r0, [pc, #52]	@ (800b3e4 <__multadd+0x88>)
 800b3b0:	21ba      	movs	r1, #186	@ 0xba
 800b3b2:	f000 fd27 	bl	800be04 <__assert_func>
 800b3b6:	6922      	ldr	r2, [r4, #16]
 800b3b8:	3202      	adds	r2, #2
 800b3ba:	f104 010c 	add.w	r1, r4, #12
 800b3be:	0092      	lsls	r2, r2, #2
 800b3c0:	300c      	adds	r0, #12
 800b3c2:	f000 fd11 	bl	800bde8 <memcpy>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7ff ffa5 	bl	800b318 <_Bfree>
 800b3ce:	4644      	mov	r4, r8
 800b3d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	615e      	str	r6, [r3, #20]
 800b3d8:	6125      	str	r5, [r4, #16]
 800b3da:	4620      	mov	r0, r4
 800b3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3e0:	0800e370 	.word	0x0800e370
 800b3e4:	0800e381 	.word	0x0800e381

0800b3e8 <__hi0bits>:
 800b3e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	bf36      	itet	cc
 800b3f0:	0403      	lslcc	r3, r0, #16
 800b3f2:	2000      	movcs	r0, #0
 800b3f4:	2010      	movcc	r0, #16
 800b3f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b3fa:	bf3c      	itt	cc
 800b3fc:	021b      	lslcc	r3, r3, #8
 800b3fe:	3008      	addcc	r0, #8
 800b400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b404:	bf3c      	itt	cc
 800b406:	011b      	lslcc	r3, r3, #4
 800b408:	3004      	addcc	r0, #4
 800b40a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b40e:	bf3c      	itt	cc
 800b410:	009b      	lslcc	r3, r3, #2
 800b412:	3002      	addcc	r0, #2
 800b414:	2b00      	cmp	r3, #0
 800b416:	db05      	blt.n	800b424 <__hi0bits+0x3c>
 800b418:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b41c:	f100 0001 	add.w	r0, r0, #1
 800b420:	bf08      	it	eq
 800b422:	2020      	moveq	r0, #32
 800b424:	4770      	bx	lr

0800b426 <__lo0bits>:
 800b426:	6803      	ldr	r3, [r0, #0]
 800b428:	4602      	mov	r2, r0
 800b42a:	f013 0007 	ands.w	r0, r3, #7
 800b42e:	d00b      	beq.n	800b448 <__lo0bits+0x22>
 800b430:	07d9      	lsls	r1, r3, #31
 800b432:	d421      	bmi.n	800b478 <__lo0bits+0x52>
 800b434:	0798      	lsls	r0, r3, #30
 800b436:	bf49      	itett	mi
 800b438:	085b      	lsrmi	r3, r3, #1
 800b43a:	089b      	lsrpl	r3, r3, #2
 800b43c:	2001      	movmi	r0, #1
 800b43e:	6013      	strmi	r3, [r2, #0]
 800b440:	bf5c      	itt	pl
 800b442:	6013      	strpl	r3, [r2, #0]
 800b444:	2002      	movpl	r0, #2
 800b446:	4770      	bx	lr
 800b448:	b299      	uxth	r1, r3
 800b44a:	b909      	cbnz	r1, 800b450 <__lo0bits+0x2a>
 800b44c:	0c1b      	lsrs	r3, r3, #16
 800b44e:	2010      	movs	r0, #16
 800b450:	b2d9      	uxtb	r1, r3
 800b452:	b909      	cbnz	r1, 800b458 <__lo0bits+0x32>
 800b454:	3008      	adds	r0, #8
 800b456:	0a1b      	lsrs	r3, r3, #8
 800b458:	0719      	lsls	r1, r3, #28
 800b45a:	bf04      	itt	eq
 800b45c:	091b      	lsreq	r3, r3, #4
 800b45e:	3004      	addeq	r0, #4
 800b460:	0799      	lsls	r1, r3, #30
 800b462:	bf04      	itt	eq
 800b464:	089b      	lsreq	r3, r3, #2
 800b466:	3002      	addeq	r0, #2
 800b468:	07d9      	lsls	r1, r3, #31
 800b46a:	d403      	bmi.n	800b474 <__lo0bits+0x4e>
 800b46c:	085b      	lsrs	r3, r3, #1
 800b46e:	f100 0001 	add.w	r0, r0, #1
 800b472:	d003      	beq.n	800b47c <__lo0bits+0x56>
 800b474:	6013      	str	r3, [r2, #0]
 800b476:	4770      	bx	lr
 800b478:	2000      	movs	r0, #0
 800b47a:	4770      	bx	lr
 800b47c:	2020      	movs	r0, #32
 800b47e:	4770      	bx	lr

0800b480 <__i2b>:
 800b480:	b510      	push	{r4, lr}
 800b482:	460c      	mov	r4, r1
 800b484:	2101      	movs	r1, #1
 800b486:	f7ff ff07 	bl	800b298 <_Balloc>
 800b48a:	4602      	mov	r2, r0
 800b48c:	b928      	cbnz	r0, 800b49a <__i2b+0x1a>
 800b48e:	4b05      	ldr	r3, [pc, #20]	@ (800b4a4 <__i2b+0x24>)
 800b490:	4805      	ldr	r0, [pc, #20]	@ (800b4a8 <__i2b+0x28>)
 800b492:	f240 1145 	movw	r1, #325	@ 0x145
 800b496:	f000 fcb5 	bl	800be04 <__assert_func>
 800b49a:	2301      	movs	r3, #1
 800b49c:	6144      	str	r4, [r0, #20]
 800b49e:	6103      	str	r3, [r0, #16]
 800b4a0:	bd10      	pop	{r4, pc}
 800b4a2:	bf00      	nop
 800b4a4:	0800e370 	.word	0x0800e370
 800b4a8:	0800e381 	.word	0x0800e381

0800b4ac <__multiply>:
 800b4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b0:	4617      	mov	r7, r2
 800b4b2:	690a      	ldr	r2, [r1, #16]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	bfa8      	it	ge
 800b4ba:	463b      	movge	r3, r7
 800b4bc:	4689      	mov	r9, r1
 800b4be:	bfa4      	itt	ge
 800b4c0:	460f      	movge	r7, r1
 800b4c2:	4699      	movge	r9, r3
 800b4c4:	693d      	ldr	r5, [r7, #16]
 800b4c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	6879      	ldr	r1, [r7, #4]
 800b4ce:	eb05 060a 	add.w	r6, r5, sl
 800b4d2:	42b3      	cmp	r3, r6
 800b4d4:	b085      	sub	sp, #20
 800b4d6:	bfb8      	it	lt
 800b4d8:	3101      	addlt	r1, #1
 800b4da:	f7ff fedd 	bl	800b298 <_Balloc>
 800b4de:	b930      	cbnz	r0, 800b4ee <__multiply+0x42>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	4b41      	ldr	r3, [pc, #260]	@ (800b5e8 <__multiply+0x13c>)
 800b4e4:	4841      	ldr	r0, [pc, #260]	@ (800b5ec <__multiply+0x140>)
 800b4e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b4ea:	f000 fc8b 	bl	800be04 <__assert_func>
 800b4ee:	f100 0414 	add.w	r4, r0, #20
 800b4f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b4f6:	4623      	mov	r3, r4
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	4573      	cmp	r3, lr
 800b4fc:	d320      	bcc.n	800b540 <__multiply+0x94>
 800b4fe:	f107 0814 	add.w	r8, r7, #20
 800b502:	f109 0114 	add.w	r1, r9, #20
 800b506:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b50a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b50e:	9302      	str	r3, [sp, #8]
 800b510:	1beb      	subs	r3, r5, r7
 800b512:	3b15      	subs	r3, #21
 800b514:	f023 0303 	bic.w	r3, r3, #3
 800b518:	3304      	adds	r3, #4
 800b51a:	3715      	adds	r7, #21
 800b51c:	42bd      	cmp	r5, r7
 800b51e:	bf38      	it	cc
 800b520:	2304      	movcc	r3, #4
 800b522:	9301      	str	r3, [sp, #4]
 800b524:	9b02      	ldr	r3, [sp, #8]
 800b526:	9103      	str	r1, [sp, #12]
 800b528:	428b      	cmp	r3, r1
 800b52a:	d80c      	bhi.n	800b546 <__multiply+0x9a>
 800b52c:	2e00      	cmp	r6, #0
 800b52e:	dd03      	ble.n	800b538 <__multiply+0x8c>
 800b530:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b534:	2b00      	cmp	r3, #0
 800b536:	d055      	beq.n	800b5e4 <__multiply+0x138>
 800b538:	6106      	str	r6, [r0, #16]
 800b53a:	b005      	add	sp, #20
 800b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b540:	f843 2b04 	str.w	r2, [r3], #4
 800b544:	e7d9      	b.n	800b4fa <__multiply+0x4e>
 800b546:	f8b1 a000 	ldrh.w	sl, [r1]
 800b54a:	f1ba 0f00 	cmp.w	sl, #0
 800b54e:	d01f      	beq.n	800b590 <__multiply+0xe4>
 800b550:	46c4      	mov	ip, r8
 800b552:	46a1      	mov	r9, r4
 800b554:	2700      	movs	r7, #0
 800b556:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b55a:	f8d9 3000 	ldr.w	r3, [r9]
 800b55e:	fa1f fb82 	uxth.w	fp, r2
 800b562:	b29b      	uxth	r3, r3
 800b564:	fb0a 330b 	mla	r3, sl, fp, r3
 800b568:	443b      	add	r3, r7
 800b56a:	f8d9 7000 	ldr.w	r7, [r9]
 800b56e:	0c12      	lsrs	r2, r2, #16
 800b570:	0c3f      	lsrs	r7, r7, #16
 800b572:	fb0a 7202 	mla	r2, sl, r2, r7
 800b576:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b580:	4565      	cmp	r5, ip
 800b582:	f849 3b04 	str.w	r3, [r9], #4
 800b586:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b58a:	d8e4      	bhi.n	800b556 <__multiply+0xaa>
 800b58c:	9b01      	ldr	r3, [sp, #4]
 800b58e:	50e7      	str	r7, [r4, r3]
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b596:	3104      	adds	r1, #4
 800b598:	f1b9 0f00 	cmp.w	r9, #0
 800b59c:	d020      	beq.n	800b5e0 <__multiply+0x134>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	4647      	mov	r7, r8
 800b5a2:	46a4      	mov	ip, r4
 800b5a4:	f04f 0a00 	mov.w	sl, #0
 800b5a8:	f8b7 b000 	ldrh.w	fp, [r7]
 800b5ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b5b0:	fb09 220b 	mla	r2, r9, fp, r2
 800b5b4:	4452      	add	r2, sl
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5bc:	f84c 3b04 	str.w	r3, [ip], #4
 800b5c0:	f857 3b04 	ldr.w	r3, [r7], #4
 800b5c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5c8:	f8bc 3000 	ldrh.w	r3, [ip]
 800b5cc:	fb09 330a 	mla	r3, r9, sl, r3
 800b5d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b5d4:	42bd      	cmp	r5, r7
 800b5d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5da:	d8e5      	bhi.n	800b5a8 <__multiply+0xfc>
 800b5dc:	9a01      	ldr	r2, [sp, #4]
 800b5de:	50a3      	str	r3, [r4, r2]
 800b5e0:	3404      	adds	r4, #4
 800b5e2:	e79f      	b.n	800b524 <__multiply+0x78>
 800b5e4:	3e01      	subs	r6, #1
 800b5e6:	e7a1      	b.n	800b52c <__multiply+0x80>
 800b5e8:	0800e370 	.word	0x0800e370
 800b5ec:	0800e381 	.word	0x0800e381

0800b5f0 <__pow5mult>:
 800b5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f4:	4615      	mov	r5, r2
 800b5f6:	f012 0203 	ands.w	r2, r2, #3
 800b5fa:	4607      	mov	r7, r0
 800b5fc:	460e      	mov	r6, r1
 800b5fe:	d007      	beq.n	800b610 <__pow5mult+0x20>
 800b600:	4c25      	ldr	r4, [pc, #148]	@ (800b698 <__pow5mult+0xa8>)
 800b602:	3a01      	subs	r2, #1
 800b604:	2300      	movs	r3, #0
 800b606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b60a:	f7ff fea7 	bl	800b35c <__multadd>
 800b60e:	4606      	mov	r6, r0
 800b610:	10ad      	asrs	r5, r5, #2
 800b612:	d03d      	beq.n	800b690 <__pow5mult+0xa0>
 800b614:	69fc      	ldr	r4, [r7, #28]
 800b616:	b97c      	cbnz	r4, 800b638 <__pow5mult+0x48>
 800b618:	2010      	movs	r0, #16
 800b61a:	f7ff fd87 	bl	800b12c <malloc>
 800b61e:	4602      	mov	r2, r0
 800b620:	61f8      	str	r0, [r7, #28]
 800b622:	b928      	cbnz	r0, 800b630 <__pow5mult+0x40>
 800b624:	4b1d      	ldr	r3, [pc, #116]	@ (800b69c <__pow5mult+0xac>)
 800b626:	481e      	ldr	r0, [pc, #120]	@ (800b6a0 <__pow5mult+0xb0>)
 800b628:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b62c:	f000 fbea 	bl	800be04 <__assert_func>
 800b630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b634:	6004      	str	r4, [r0, #0]
 800b636:	60c4      	str	r4, [r0, #12]
 800b638:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b63c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b640:	b94c      	cbnz	r4, 800b656 <__pow5mult+0x66>
 800b642:	f240 2171 	movw	r1, #625	@ 0x271
 800b646:	4638      	mov	r0, r7
 800b648:	f7ff ff1a 	bl	800b480 <__i2b>
 800b64c:	2300      	movs	r3, #0
 800b64e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b652:	4604      	mov	r4, r0
 800b654:	6003      	str	r3, [r0, #0]
 800b656:	f04f 0900 	mov.w	r9, #0
 800b65a:	07eb      	lsls	r3, r5, #31
 800b65c:	d50a      	bpl.n	800b674 <__pow5mult+0x84>
 800b65e:	4631      	mov	r1, r6
 800b660:	4622      	mov	r2, r4
 800b662:	4638      	mov	r0, r7
 800b664:	f7ff ff22 	bl	800b4ac <__multiply>
 800b668:	4631      	mov	r1, r6
 800b66a:	4680      	mov	r8, r0
 800b66c:	4638      	mov	r0, r7
 800b66e:	f7ff fe53 	bl	800b318 <_Bfree>
 800b672:	4646      	mov	r6, r8
 800b674:	106d      	asrs	r5, r5, #1
 800b676:	d00b      	beq.n	800b690 <__pow5mult+0xa0>
 800b678:	6820      	ldr	r0, [r4, #0]
 800b67a:	b938      	cbnz	r0, 800b68c <__pow5mult+0x9c>
 800b67c:	4622      	mov	r2, r4
 800b67e:	4621      	mov	r1, r4
 800b680:	4638      	mov	r0, r7
 800b682:	f7ff ff13 	bl	800b4ac <__multiply>
 800b686:	6020      	str	r0, [r4, #0]
 800b688:	f8c0 9000 	str.w	r9, [r0]
 800b68c:	4604      	mov	r4, r0
 800b68e:	e7e4      	b.n	800b65a <__pow5mult+0x6a>
 800b690:	4630      	mov	r0, r6
 800b692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b696:	bf00      	nop
 800b698:	0800e434 	.word	0x0800e434
 800b69c:	0800e301 	.word	0x0800e301
 800b6a0:	0800e381 	.word	0x0800e381

0800b6a4 <__lshift>:
 800b6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	6849      	ldr	r1, [r1, #4]
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6b2:	68a3      	ldr	r3, [r4, #8]
 800b6b4:	4607      	mov	r7, r0
 800b6b6:	4691      	mov	r9, r2
 800b6b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6bc:	f108 0601 	add.w	r6, r8, #1
 800b6c0:	42b3      	cmp	r3, r6
 800b6c2:	db0b      	blt.n	800b6dc <__lshift+0x38>
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f7ff fde7 	bl	800b298 <_Balloc>
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	b948      	cbnz	r0, 800b6e2 <__lshift+0x3e>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	4b28      	ldr	r3, [pc, #160]	@ (800b774 <__lshift+0xd0>)
 800b6d2:	4829      	ldr	r0, [pc, #164]	@ (800b778 <__lshift+0xd4>)
 800b6d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b6d8:	f000 fb94 	bl	800be04 <__assert_func>
 800b6dc:	3101      	adds	r1, #1
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	e7ee      	b.n	800b6c0 <__lshift+0x1c>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	f100 0114 	add.w	r1, r0, #20
 800b6e8:	f100 0210 	add.w	r2, r0, #16
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	4553      	cmp	r3, sl
 800b6f0:	db33      	blt.n	800b75a <__lshift+0xb6>
 800b6f2:	6920      	ldr	r0, [r4, #16]
 800b6f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6f8:	f104 0314 	add.w	r3, r4, #20
 800b6fc:	f019 091f 	ands.w	r9, r9, #31
 800b700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b704:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b708:	d02b      	beq.n	800b762 <__lshift+0xbe>
 800b70a:	f1c9 0e20 	rsb	lr, r9, #32
 800b70e:	468a      	mov	sl, r1
 800b710:	2200      	movs	r2, #0
 800b712:	6818      	ldr	r0, [r3, #0]
 800b714:	fa00 f009 	lsl.w	r0, r0, r9
 800b718:	4310      	orrs	r0, r2
 800b71a:	f84a 0b04 	str.w	r0, [sl], #4
 800b71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b722:	459c      	cmp	ip, r3
 800b724:	fa22 f20e 	lsr.w	r2, r2, lr
 800b728:	d8f3      	bhi.n	800b712 <__lshift+0x6e>
 800b72a:	ebac 0304 	sub.w	r3, ip, r4
 800b72e:	3b15      	subs	r3, #21
 800b730:	f023 0303 	bic.w	r3, r3, #3
 800b734:	3304      	adds	r3, #4
 800b736:	f104 0015 	add.w	r0, r4, #21
 800b73a:	4560      	cmp	r0, ip
 800b73c:	bf88      	it	hi
 800b73e:	2304      	movhi	r3, #4
 800b740:	50ca      	str	r2, [r1, r3]
 800b742:	b10a      	cbz	r2, 800b748 <__lshift+0xa4>
 800b744:	f108 0602 	add.w	r6, r8, #2
 800b748:	3e01      	subs	r6, #1
 800b74a:	4638      	mov	r0, r7
 800b74c:	612e      	str	r6, [r5, #16]
 800b74e:	4621      	mov	r1, r4
 800b750:	f7ff fde2 	bl	800b318 <_Bfree>
 800b754:	4628      	mov	r0, r5
 800b756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b75e:	3301      	adds	r3, #1
 800b760:	e7c5      	b.n	800b6ee <__lshift+0x4a>
 800b762:	3904      	subs	r1, #4
 800b764:	f853 2b04 	ldr.w	r2, [r3], #4
 800b768:	f841 2f04 	str.w	r2, [r1, #4]!
 800b76c:	459c      	cmp	ip, r3
 800b76e:	d8f9      	bhi.n	800b764 <__lshift+0xc0>
 800b770:	e7ea      	b.n	800b748 <__lshift+0xa4>
 800b772:	bf00      	nop
 800b774:	0800e370 	.word	0x0800e370
 800b778:	0800e381 	.word	0x0800e381

0800b77c <__mcmp>:
 800b77c:	690a      	ldr	r2, [r1, #16]
 800b77e:	4603      	mov	r3, r0
 800b780:	6900      	ldr	r0, [r0, #16]
 800b782:	1a80      	subs	r0, r0, r2
 800b784:	b530      	push	{r4, r5, lr}
 800b786:	d10e      	bne.n	800b7a6 <__mcmp+0x2a>
 800b788:	3314      	adds	r3, #20
 800b78a:	3114      	adds	r1, #20
 800b78c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b790:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b79c:	4295      	cmp	r5, r2
 800b79e:	d003      	beq.n	800b7a8 <__mcmp+0x2c>
 800b7a0:	d205      	bcs.n	800b7ae <__mcmp+0x32>
 800b7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a6:	bd30      	pop	{r4, r5, pc}
 800b7a8:	42a3      	cmp	r3, r4
 800b7aa:	d3f3      	bcc.n	800b794 <__mcmp+0x18>
 800b7ac:	e7fb      	b.n	800b7a6 <__mcmp+0x2a>
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	e7f9      	b.n	800b7a6 <__mcmp+0x2a>
	...

0800b7b4 <__mdiff>:
 800b7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b8:	4689      	mov	r9, r1
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	4611      	mov	r1, r2
 800b7be:	4648      	mov	r0, r9
 800b7c0:	4614      	mov	r4, r2
 800b7c2:	f7ff ffdb 	bl	800b77c <__mcmp>
 800b7c6:	1e05      	subs	r5, r0, #0
 800b7c8:	d112      	bne.n	800b7f0 <__mdiff+0x3c>
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f7ff fd63 	bl	800b298 <_Balloc>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	b928      	cbnz	r0, 800b7e2 <__mdiff+0x2e>
 800b7d6:	4b3f      	ldr	r3, [pc, #252]	@ (800b8d4 <__mdiff+0x120>)
 800b7d8:	f240 2137 	movw	r1, #567	@ 0x237
 800b7dc:	483e      	ldr	r0, [pc, #248]	@ (800b8d8 <__mdiff+0x124>)
 800b7de:	f000 fb11 	bl	800be04 <__assert_func>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	b003      	add	sp, #12
 800b7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f0:	bfbc      	itt	lt
 800b7f2:	464b      	movlt	r3, r9
 800b7f4:	46a1      	movlt	r9, r4
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b7fc:	bfba      	itte	lt
 800b7fe:	461c      	movlt	r4, r3
 800b800:	2501      	movlt	r5, #1
 800b802:	2500      	movge	r5, #0
 800b804:	f7ff fd48 	bl	800b298 <_Balloc>
 800b808:	4602      	mov	r2, r0
 800b80a:	b918      	cbnz	r0, 800b814 <__mdiff+0x60>
 800b80c:	4b31      	ldr	r3, [pc, #196]	@ (800b8d4 <__mdiff+0x120>)
 800b80e:	f240 2145 	movw	r1, #581	@ 0x245
 800b812:	e7e3      	b.n	800b7dc <__mdiff+0x28>
 800b814:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b818:	6926      	ldr	r6, [r4, #16]
 800b81a:	60c5      	str	r5, [r0, #12]
 800b81c:	f109 0310 	add.w	r3, r9, #16
 800b820:	f109 0514 	add.w	r5, r9, #20
 800b824:	f104 0e14 	add.w	lr, r4, #20
 800b828:	f100 0b14 	add.w	fp, r0, #20
 800b82c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b830:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	46d9      	mov	r9, fp
 800b838:	f04f 0c00 	mov.w	ip, #0
 800b83c:	9b01      	ldr	r3, [sp, #4]
 800b83e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b842:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	fa1f f38a 	uxth.w	r3, sl
 800b84c:	4619      	mov	r1, r3
 800b84e:	b283      	uxth	r3, r0
 800b850:	1acb      	subs	r3, r1, r3
 800b852:	0c00      	lsrs	r0, r0, #16
 800b854:	4463      	add	r3, ip
 800b856:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b85a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b85e:	b29b      	uxth	r3, r3
 800b860:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b864:	4576      	cmp	r6, lr
 800b866:	f849 3b04 	str.w	r3, [r9], #4
 800b86a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b86e:	d8e5      	bhi.n	800b83c <__mdiff+0x88>
 800b870:	1b33      	subs	r3, r6, r4
 800b872:	3b15      	subs	r3, #21
 800b874:	f023 0303 	bic.w	r3, r3, #3
 800b878:	3415      	adds	r4, #21
 800b87a:	3304      	adds	r3, #4
 800b87c:	42a6      	cmp	r6, r4
 800b87e:	bf38      	it	cc
 800b880:	2304      	movcc	r3, #4
 800b882:	441d      	add	r5, r3
 800b884:	445b      	add	r3, fp
 800b886:	461e      	mov	r6, r3
 800b888:	462c      	mov	r4, r5
 800b88a:	4544      	cmp	r4, r8
 800b88c:	d30e      	bcc.n	800b8ac <__mdiff+0xf8>
 800b88e:	f108 0103 	add.w	r1, r8, #3
 800b892:	1b49      	subs	r1, r1, r5
 800b894:	f021 0103 	bic.w	r1, r1, #3
 800b898:	3d03      	subs	r5, #3
 800b89a:	45a8      	cmp	r8, r5
 800b89c:	bf38      	it	cc
 800b89e:	2100      	movcc	r1, #0
 800b8a0:	440b      	add	r3, r1
 800b8a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8a6:	b191      	cbz	r1, 800b8ce <__mdiff+0x11a>
 800b8a8:	6117      	str	r7, [r2, #16]
 800b8aa:	e79d      	b.n	800b7e8 <__mdiff+0x34>
 800b8ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800b8b0:	46e6      	mov	lr, ip
 800b8b2:	0c08      	lsrs	r0, r1, #16
 800b8b4:	fa1c fc81 	uxtah	ip, ip, r1
 800b8b8:	4471      	add	r1, lr
 800b8ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b8be:	b289      	uxth	r1, r1
 800b8c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b8c4:	f846 1b04 	str.w	r1, [r6], #4
 800b8c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8cc:	e7dd      	b.n	800b88a <__mdiff+0xd6>
 800b8ce:	3f01      	subs	r7, #1
 800b8d0:	e7e7      	b.n	800b8a2 <__mdiff+0xee>
 800b8d2:	bf00      	nop
 800b8d4:	0800e370 	.word	0x0800e370
 800b8d8:	0800e381 	.word	0x0800e381

0800b8dc <__d2b>:
 800b8dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8e0:	460f      	mov	r7, r1
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	ec59 8b10 	vmov	r8, r9, d0
 800b8e8:	4616      	mov	r6, r2
 800b8ea:	f7ff fcd5 	bl	800b298 <_Balloc>
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	b930      	cbnz	r0, 800b900 <__d2b+0x24>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	4b23      	ldr	r3, [pc, #140]	@ (800b984 <__d2b+0xa8>)
 800b8f6:	4824      	ldr	r0, [pc, #144]	@ (800b988 <__d2b+0xac>)
 800b8f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b8fc:	f000 fa82 	bl	800be04 <__assert_func>
 800b900:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b904:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b908:	b10d      	cbz	r5, 800b90e <__d2b+0x32>
 800b90a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b90e:	9301      	str	r3, [sp, #4]
 800b910:	f1b8 0300 	subs.w	r3, r8, #0
 800b914:	d023      	beq.n	800b95e <__d2b+0x82>
 800b916:	4668      	mov	r0, sp
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	f7ff fd84 	bl	800b426 <__lo0bits>
 800b91e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b922:	b1d0      	cbz	r0, 800b95a <__d2b+0x7e>
 800b924:	f1c0 0320 	rsb	r3, r0, #32
 800b928:	fa02 f303 	lsl.w	r3, r2, r3
 800b92c:	430b      	orrs	r3, r1
 800b92e:	40c2      	lsrs	r2, r0
 800b930:	6163      	str	r3, [r4, #20]
 800b932:	9201      	str	r2, [sp, #4]
 800b934:	9b01      	ldr	r3, [sp, #4]
 800b936:	61a3      	str	r3, [r4, #24]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bf0c      	ite	eq
 800b93c:	2201      	moveq	r2, #1
 800b93e:	2202      	movne	r2, #2
 800b940:	6122      	str	r2, [r4, #16]
 800b942:	b1a5      	cbz	r5, 800b96e <__d2b+0x92>
 800b944:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b948:	4405      	add	r5, r0
 800b94a:	603d      	str	r5, [r7, #0]
 800b94c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b950:	6030      	str	r0, [r6, #0]
 800b952:	4620      	mov	r0, r4
 800b954:	b003      	add	sp, #12
 800b956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b95a:	6161      	str	r1, [r4, #20]
 800b95c:	e7ea      	b.n	800b934 <__d2b+0x58>
 800b95e:	a801      	add	r0, sp, #4
 800b960:	f7ff fd61 	bl	800b426 <__lo0bits>
 800b964:	9b01      	ldr	r3, [sp, #4]
 800b966:	6163      	str	r3, [r4, #20]
 800b968:	3020      	adds	r0, #32
 800b96a:	2201      	movs	r2, #1
 800b96c:	e7e8      	b.n	800b940 <__d2b+0x64>
 800b96e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b972:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b976:	6038      	str	r0, [r7, #0]
 800b978:	6918      	ldr	r0, [r3, #16]
 800b97a:	f7ff fd35 	bl	800b3e8 <__hi0bits>
 800b97e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b982:	e7e5      	b.n	800b950 <__d2b+0x74>
 800b984:	0800e370 	.word	0x0800e370
 800b988:	0800e381 	.word	0x0800e381

0800b98c <__ssputs_r>:
 800b98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b990:	688e      	ldr	r6, [r1, #8]
 800b992:	461f      	mov	r7, r3
 800b994:	42be      	cmp	r6, r7
 800b996:	680b      	ldr	r3, [r1, #0]
 800b998:	4682      	mov	sl, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	4690      	mov	r8, r2
 800b99e:	d82d      	bhi.n	800b9fc <__ssputs_r+0x70>
 800b9a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b9a8:	d026      	beq.n	800b9f8 <__ssputs_r+0x6c>
 800b9aa:	6965      	ldr	r5, [r4, #20]
 800b9ac:	6909      	ldr	r1, [r1, #16]
 800b9ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9b2:	eba3 0901 	sub.w	r9, r3, r1
 800b9b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9ba:	1c7b      	adds	r3, r7, #1
 800b9bc:	444b      	add	r3, r9
 800b9be:	106d      	asrs	r5, r5, #1
 800b9c0:	429d      	cmp	r5, r3
 800b9c2:	bf38      	it	cc
 800b9c4:	461d      	movcc	r5, r3
 800b9c6:	0553      	lsls	r3, r2, #21
 800b9c8:	d527      	bpl.n	800ba1a <__ssputs_r+0x8e>
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	f7ff fbd8 	bl	800b180 <_malloc_r>
 800b9d0:	4606      	mov	r6, r0
 800b9d2:	b360      	cbz	r0, 800ba2e <__ssputs_r+0xa2>
 800b9d4:	6921      	ldr	r1, [r4, #16]
 800b9d6:	464a      	mov	r2, r9
 800b9d8:	f000 fa06 	bl	800bde8 <memcpy>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e6:	81a3      	strh	r3, [r4, #12]
 800b9e8:	6126      	str	r6, [r4, #16]
 800b9ea:	6165      	str	r5, [r4, #20]
 800b9ec:	444e      	add	r6, r9
 800b9ee:	eba5 0509 	sub.w	r5, r5, r9
 800b9f2:	6026      	str	r6, [r4, #0]
 800b9f4:	60a5      	str	r5, [r4, #8]
 800b9f6:	463e      	mov	r6, r7
 800b9f8:	42be      	cmp	r6, r7
 800b9fa:	d900      	bls.n	800b9fe <__ssputs_r+0x72>
 800b9fc:	463e      	mov	r6, r7
 800b9fe:	6820      	ldr	r0, [r4, #0]
 800ba00:	4632      	mov	r2, r6
 800ba02:	4641      	mov	r1, r8
 800ba04:	f000 f9c6 	bl	800bd94 <memmove>
 800ba08:	68a3      	ldr	r3, [r4, #8]
 800ba0a:	1b9b      	subs	r3, r3, r6
 800ba0c:	60a3      	str	r3, [r4, #8]
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	4433      	add	r3, r6
 800ba12:	6023      	str	r3, [r4, #0]
 800ba14:	2000      	movs	r0, #0
 800ba16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1a:	462a      	mov	r2, r5
 800ba1c:	f000 fa36 	bl	800be8c <_realloc_r>
 800ba20:	4606      	mov	r6, r0
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d1e0      	bne.n	800b9e8 <__ssputs_r+0x5c>
 800ba26:	6921      	ldr	r1, [r4, #16]
 800ba28:	4650      	mov	r0, sl
 800ba2a:	f7ff fb35 	bl	800b098 <_free_r>
 800ba2e:	230c      	movs	r3, #12
 800ba30:	f8ca 3000 	str.w	r3, [sl]
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba3a:	81a3      	strh	r3, [r4, #12]
 800ba3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba40:	e7e9      	b.n	800ba16 <__ssputs_r+0x8a>
	...

0800ba44 <_svfiprintf_r>:
 800ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	4698      	mov	r8, r3
 800ba4a:	898b      	ldrh	r3, [r1, #12]
 800ba4c:	061b      	lsls	r3, r3, #24
 800ba4e:	b09d      	sub	sp, #116	@ 0x74
 800ba50:	4607      	mov	r7, r0
 800ba52:	460d      	mov	r5, r1
 800ba54:	4614      	mov	r4, r2
 800ba56:	d510      	bpl.n	800ba7a <_svfiprintf_r+0x36>
 800ba58:	690b      	ldr	r3, [r1, #16]
 800ba5a:	b973      	cbnz	r3, 800ba7a <_svfiprintf_r+0x36>
 800ba5c:	2140      	movs	r1, #64	@ 0x40
 800ba5e:	f7ff fb8f 	bl	800b180 <_malloc_r>
 800ba62:	6028      	str	r0, [r5, #0]
 800ba64:	6128      	str	r0, [r5, #16]
 800ba66:	b930      	cbnz	r0, 800ba76 <_svfiprintf_r+0x32>
 800ba68:	230c      	movs	r3, #12
 800ba6a:	603b      	str	r3, [r7, #0]
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba70:	b01d      	add	sp, #116	@ 0x74
 800ba72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba76:	2340      	movs	r3, #64	@ 0x40
 800ba78:	616b      	str	r3, [r5, #20]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba7e:	2320      	movs	r3, #32
 800ba80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba88:	2330      	movs	r3, #48	@ 0x30
 800ba8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc28 <_svfiprintf_r+0x1e4>
 800ba8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba92:	f04f 0901 	mov.w	r9, #1
 800ba96:	4623      	mov	r3, r4
 800ba98:	469a      	mov	sl, r3
 800ba9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba9e:	b10a      	cbz	r2, 800baa4 <_svfiprintf_r+0x60>
 800baa0:	2a25      	cmp	r2, #37	@ 0x25
 800baa2:	d1f9      	bne.n	800ba98 <_svfiprintf_r+0x54>
 800baa4:	ebba 0b04 	subs.w	fp, sl, r4
 800baa8:	d00b      	beq.n	800bac2 <_svfiprintf_r+0x7e>
 800baaa:	465b      	mov	r3, fp
 800baac:	4622      	mov	r2, r4
 800baae:	4629      	mov	r1, r5
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7ff ff6b 	bl	800b98c <__ssputs_r>
 800bab6:	3001      	adds	r0, #1
 800bab8:	f000 80a7 	beq.w	800bc0a <_svfiprintf_r+0x1c6>
 800babc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800babe:	445a      	add	r2, fp
 800bac0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bac2:	f89a 3000 	ldrb.w	r3, [sl]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 809f 	beq.w	800bc0a <_svfiprintf_r+0x1c6>
 800bacc:	2300      	movs	r3, #0
 800bace:	f04f 32ff 	mov.w	r2, #4294967295
 800bad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bad6:	f10a 0a01 	add.w	sl, sl, #1
 800bada:	9304      	str	r3, [sp, #16]
 800badc:	9307      	str	r3, [sp, #28]
 800bade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bae2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bae4:	4654      	mov	r4, sl
 800bae6:	2205      	movs	r2, #5
 800bae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baec:	484e      	ldr	r0, [pc, #312]	@ (800bc28 <_svfiprintf_r+0x1e4>)
 800baee:	f7f4 fb77 	bl	80001e0 <memchr>
 800baf2:	9a04      	ldr	r2, [sp, #16]
 800baf4:	b9d8      	cbnz	r0, 800bb2e <_svfiprintf_r+0xea>
 800baf6:	06d0      	lsls	r0, r2, #27
 800baf8:	bf44      	itt	mi
 800bafa:	2320      	movmi	r3, #32
 800bafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb00:	0711      	lsls	r1, r2, #28
 800bb02:	bf44      	itt	mi
 800bb04:	232b      	movmi	r3, #43	@ 0x2b
 800bb06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb10:	d015      	beq.n	800bb3e <_svfiprintf_r+0xfa>
 800bb12:	9a07      	ldr	r2, [sp, #28]
 800bb14:	4654      	mov	r4, sl
 800bb16:	2000      	movs	r0, #0
 800bb18:	f04f 0c0a 	mov.w	ip, #10
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb22:	3b30      	subs	r3, #48	@ 0x30
 800bb24:	2b09      	cmp	r3, #9
 800bb26:	d94b      	bls.n	800bbc0 <_svfiprintf_r+0x17c>
 800bb28:	b1b0      	cbz	r0, 800bb58 <_svfiprintf_r+0x114>
 800bb2a:	9207      	str	r2, [sp, #28]
 800bb2c:	e014      	b.n	800bb58 <_svfiprintf_r+0x114>
 800bb2e:	eba0 0308 	sub.w	r3, r0, r8
 800bb32:	fa09 f303 	lsl.w	r3, r9, r3
 800bb36:	4313      	orrs	r3, r2
 800bb38:	9304      	str	r3, [sp, #16]
 800bb3a:	46a2      	mov	sl, r4
 800bb3c:	e7d2      	b.n	800bae4 <_svfiprintf_r+0xa0>
 800bb3e:	9b03      	ldr	r3, [sp, #12]
 800bb40:	1d19      	adds	r1, r3, #4
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	9103      	str	r1, [sp, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	bfbb      	ittet	lt
 800bb4a:	425b      	neglt	r3, r3
 800bb4c:	f042 0202 	orrlt.w	r2, r2, #2
 800bb50:	9307      	strge	r3, [sp, #28]
 800bb52:	9307      	strlt	r3, [sp, #28]
 800bb54:	bfb8      	it	lt
 800bb56:	9204      	strlt	r2, [sp, #16]
 800bb58:	7823      	ldrb	r3, [r4, #0]
 800bb5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb5c:	d10a      	bne.n	800bb74 <_svfiprintf_r+0x130>
 800bb5e:	7863      	ldrb	r3, [r4, #1]
 800bb60:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb62:	d132      	bne.n	800bbca <_svfiprintf_r+0x186>
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	1d1a      	adds	r2, r3, #4
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	9203      	str	r2, [sp, #12]
 800bb6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb70:	3402      	adds	r4, #2
 800bb72:	9305      	str	r3, [sp, #20]
 800bb74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc38 <_svfiprintf_r+0x1f4>
 800bb78:	7821      	ldrb	r1, [r4, #0]
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	4650      	mov	r0, sl
 800bb7e:	f7f4 fb2f 	bl	80001e0 <memchr>
 800bb82:	b138      	cbz	r0, 800bb94 <_svfiprintf_r+0x150>
 800bb84:	9b04      	ldr	r3, [sp, #16]
 800bb86:	eba0 000a 	sub.w	r0, r0, sl
 800bb8a:	2240      	movs	r2, #64	@ 0x40
 800bb8c:	4082      	lsls	r2, r0
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	3401      	adds	r4, #1
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb98:	4824      	ldr	r0, [pc, #144]	@ (800bc2c <_svfiprintf_r+0x1e8>)
 800bb9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb9e:	2206      	movs	r2, #6
 800bba0:	f7f4 fb1e 	bl	80001e0 <memchr>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d036      	beq.n	800bc16 <_svfiprintf_r+0x1d2>
 800bba8:	4b21      	ldr	r3, [pc, #132]	@ (800bc30 <_svfiprintf_r+0x1ec>)
 800bbaa:	bb1b      	cbnz	r3, 800bbf4 <_svfiprintf_r+0x1b0>
 800bbac:	9b03      	ldr	r3, [sp, #12]
 800bbae:	3307      	adds	r3, #7
 800bbb0:	f023 0307 	bic.w	r3, r3, #7
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	9303      	str	r3, [sp, #12]
 800bbb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbba:	4433      	add	r3, r6
 800bbbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbbe:	e76a      	b.n	800ba96 <_svfiprintf_r+0x52>
 800bbc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	e7a8      	b.n	800bb1c <_svfiprintf_r+0xd8>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	3401      	adds	r4, #1
 800bbce:	9305      	str	r3, [sp, #20]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	f04f 0c0a 	mov.w	ip, #10
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbdc:	3a30      	subs	r2, #48	@ 0x30
 800bbde:	2a09      	cmp	r2, #9
 800bbe0:	d903      	bls.n	800bbea <_svfiprintf_r+0x1a6>
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d0c6      	beq.n	800bb74 <_svfiprintf_r+0x130>
 800bbe6:	9105      	str	r1, [sp, #20]
 800bbe8:	e7c4      	b.n	800bb74 <_svfiprintf_r+0x130>
 800bbea:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbee:	4604      	mov	r4, r0
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e7f0      	b.n	800bbd6 <_svfiprintf_r+0x192>
 800bbf4:	ab03      	add	r3, sp, #12
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	462a      	mov	r2, r5
 800bbfa:	4b0e      	ldr	r3, [pc, #56]	@ (800bc34 <_svfiprintf_r+0x1f0>)
 800bbfc:	a904      	add	r1, sp, #16
 800bbfe:	4638      	mov	r0, r7
 800bc00:	f7fd fe48 	bl	8009894 <_printf_float>
 800bc04:	1c42      	adds	r2, r0, #1
 800bc06:	4606      	mov	r6, r0
 800bc08:	d1d6      	bne.n	800bbb8 <_svfiprintf_r+0x174>
 800bc0a:	89ab      	ldrh	r3, [r5, #12]
 800bc0c:	065b      	lsls	r3, r3, #25
 800bc0e:	f53f af2d 	bmi.w	800ba6c <_svfiprintf_r+0x28>
 800bc12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc14:	e72c      	b.n	800ba70 <_svfiprintf_r+0x2c>
 800bc16:	ab03      	add	r3, sp, #12
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	462a      	mov	r2, r5
 800bc1c:	4b05      	ldr	r3, [pc, #20]	@ (800bc34 <_svfiprintf_r+0x1f0>)
 800bc1e:	a904      	add	r1, sp, #16
 800bc20:	4638      	mov	r0, r7
 800bc22:	f7fe f8cf 	bl	8009dc4 <_printf_i>
 800bc26:	e7ed      	b.n	800bc04 <_svfiprintf_r+0x1c0>
 800bc28:	0800e3da 	.word	0x0800e3da
 800bc2c:	0800e3e4 	.word	0x0800e3e4
 800bc30:	08009895 	.word	0x08009895
 800bc34:	0800b98d 	.word	0x0800b98d
 800bc38:	0800e3e0 	.word	0x0800e3e0

0800bc3c <__sflush_r>:
 800bc3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc44:	0716      	lsls	r6, r2, #28
 800bc46:	4605      	mov	r5, r0
 800bc48:	460c      	mov	r4, r1
 800bc4a:	d454      	bmi.n	800bcf6 <__sflush_r+0xba>
 800bc4c:	684b      	ldr	r3, [r1, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	dc02      	bgt.n	800bc58 <__sflush_r+0x1c>
 800bc52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dd48      	ble.n	800bcea <__sflush_r+0xae>
 800bc58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc5a:	2e00      	cmp	r6, #0
 800bc5c:	d045      	beq.n	800bcea <__sflush_r+0xae>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc64:	682f      	ldr	r7, [r5, #0]
 800bc66:	6a21      	ldr	r1, [r4, #32]
 800bc68:	602b      	str	r3, [r5, #0]
 800bc6a:	d030      	beq.n	800bcce <__sflush_r+0x92>
 800bc6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	0759      	lsls	r1, r3, #29
 800bc72:	d505      	bpl.n	800bc80 <__sflush_r+0x44>
 800bc74:	6863      	ldr	r3, [r4, #4]
 800bc76:	1ad2      	subs	r2, r2, r3
 800bc78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc7a:	b10b      	cbz	r3, 800bc80 <__sflush_r+0x44>
 800bc7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc7e:	1ad2      	subs	r2, r2, r3
 800bc80:	2300      	movs	r3, #0
 800bc82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc84:	6a21      	ldr	r1, [r4, #32]
 800bc86:	4628      	mov	r0, r5
 800bc88:	47b0      	blx	r6
 800bc8a:	1c43      	adds	r3, r0, #1
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	d106      	bne.n	800bc9e <__sflush_r+0x62>
 800bc90:	6829      	ldr	r1, [r5, #0]
 800bc92:	291d      	cmp	r1, #29
 800bc94:	d82b      	bhi.n	800bcee <__sflush_r+0xb2>
 800bc96:	4a2a      	ldr	r2, [pc, #168]	@ (800bd40 <__sflush_r+0x104>)
 800bc98:	40ca      	lsrs	r2, r1
 800bc9a:	07d6      	lsls	r6, r2, #31
 800bc9c:	d527      	bpl.n	800bcee <__sflush_r+0xb2>
 800bc9e:	2200      	movs	r2, #0
 800bca0:	6062      	str	r2, [r4, #4]
 800bca2:	04d9      	lsls	r1, r3, #19
 800bca4:	6922      	ldr	r2, [r4, #16]
 800bca6:	6022      	str	r2, [r4, #0]
 800bca8:	d504      	bpl.n	800bcb4 <__sflush_r+0x78>
 800bcaa:	1c42      	adds	r2, r0, #1
 800bcac:	d101      	bne.n	800bcb2 <__sflush_r+0x76>
 800bcae:	682b      	ldr	r3, [r5, #0]
 800bcb0:	b903      	cbnz	r3, 800bcb4 <__sflush_r+0x78>
 800bcb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcb6:	602f      	str	r7, [r5, #0]
 800bcb8:	b1b9      	cbz	r1, 800bcea <__sflush_r+0xae>
 800bcba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcbe:	4299      	cmp	r1, r3
 800bcc0:	d002      	beq.n	800bcc8 <__sflush_r+0x8c>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f7ff f9e8 	bl	800b098 <_free_r>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	6363      	str	r3, [r4, #52]	@ 0x34
 800bccc:	e00d      	b.n	800bcea <__sflush_r+0xae>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	47b0      	blx	r6
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	1c50      	adds	r0, r2, #1
 800bcd8:	d1c9      	bne.n	800bc6e <__sflush_r+0x32>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0c6      	beq.n	800bc6e <__sflush_r+0x32>
 800bce0:	2b1d      	cmp	r3, #29
 800bce2:	d001      	beq.n	800bce8 <__sflush_r+0xac>
 800bce4:	2b16      	cmp	r3, #22
 800bce6:	d11e      	bne.n	800bd26 <__sflush_r+0xea>
 800bce8:	602f      	str	r7, [r5, #0]
 800bcea:	2000      	movs	r0, #0
 800bcec:	e022      	b.n	800bd34 <__sflush_r+0xf8>
 800bcee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcf2:	b21b      	sxth	r3, r3
 800bcf4:	e01b      	b.n	800bd2e <__sflush_r+0xf2>
 800bcf6:	690f      	ldr	r7, [r1, #16]
 800bcf8:	2f00      	cmp	r7, #0
 800bcfa:	d0f6      	beq.n	800bcea <__sflush_r+0xae>
 800bcfc:	0793      	lsls	r3, r2, #30
 800bcfe:	680e      	ldr	r6, [r1, #0]
 800bd00:	bf08      	it	eq
 800bd02:	694b      	ldreq	r3, [r1, #20]
 800bd04:	600f      	str	r7, [r1, #0]
 800bd06:	bf18      	it	ne
 800bd08:	2300      	movne	r3, #0
 800bd0a:	eba6 0807 	sub.w	r8, r6, r7
 800bd0e:	608b      	str	r3, [r1, #8]
 800bd10:	f1b8 0f00 	cmp.w	r8, #0
 800bd14:	dde9      	ble.n	800bcea <__sflush_r+0xae>
 800bd16:	6a21      	ldr	r1, [r4, #32]
 800bd18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd1a:	4643      	mov	r3, r8
 800bd1c:	463a      	mov	r2, r7
 800bd1e:	4628      	mov	r0, r5
 800bd20:	47b0      	blx	r6
 800bd22:	2800      	cmp	r0, #0
 800bd24:	dc08      	bgt.n	800bd38 <__sflush_r+0xfc>
 800bd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd2e:	81a3      	strh	r3, [r4, #12]
 800bd30:	f04f 30ff 	mov.w	r0, #4294967295
 800bd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd38:	4407      	add	r7, r0
 800bd3a:	eba8 0800 	sub.w	r8, r8, r0
 800bd3e:	e7e7      	b.n	800bd10 <__sflush_r+0xd4>
 800bd40:	20400001 	.word	0x20400001

0800bd44 <_fflush_r>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	690b      	ldr	r3, [r1, #16]
 800bd48:	4605      	mov	r5, r0
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	b913      	cbnz	r3, 800bd54 <_fflush_r+0x10>
 800bd4e:	2500      	movs	r5, #0
 800bd50:	4628      	mov	r0, r5
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	b118      	cbz	r0, 800bd5e <_fflush_r+0x1a>
 800bd56:	6a03      	ldr	r3, [r0, #32]
 800bd58:	b90b      	cbnz	r3, 800bd5e <_fflush_r+0x1a>
 800bd5a:	f7fe f9dd 	bl	800a118 <__sinit>
 800bd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0f3      	beq.n	800bd4e <_fflush_r+0xa>
 800bd66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd68:	07d0      	lsls	r0, r2, #31
 800bd6a:	d404      	bmi.n	800bd76 <_fflush_r+0x32>
 800bd6c:	0599      	lsls	r1, r3, #22
 800bd6e:	d402      	bmi.n	800bd76 <_fflush_r+0x32>
 800bd70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd72:	f7fe fb36 	bl	800a3e2 <__retarget_lock_acquire_recursive>
 800bd76:	4628      	mov	r0, r5
 800bd78:	4621      	mov	r1, r4
 800bd7a:	f7ff ff5f 	bl	800bc3c <__sflush_r>
 800bd7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd80:	07da      	lsls	r2, r3, #31
 800bd82:	4605      	mov	r5, r0
 800bd84:	d4e4      	bmi.n	800bd50 <_fflush_r+0xc>
 800bd86:	89a3      	ldrh	r3, [r4, #12]
 800bd88:	059b      	lsls	r3, r3, #22
 800bd8a:	d4e1      	bmi.n	800bd50 <_fflush_r+0xc>
 800bd8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd8e:	f7fe fb29 	bl	800a3e4 <__retarget_lock_release_recursive>
 800bd92:	e7dd      	b.n	800bd50 <_fflush_r+0xc>

0800bd94 <memmove>:
 800bd94:	4288      	cmp	r0, r1
 800bd96:	b510      	push	{r4, lr}
 800bd98:	eb01 0402 	add.w	r4, r1, r2
 800bd9c:	d902      	bls.n	800bda4 <memmove+0x10>
 800bd9e:	4284      	cmp	r4, r0
 800bda0:	4623      	mov	r3, r4
 800bda2:	d807      	bhi.n	800bdb4 <memmove+0x20>
 800bda4:	1e43      	subs	r3, r0, #1
 800bda6:	42a1      	cmp	r1, r4
 800bda8:	d008      	beq.n	800bdbc <memmove+0x28>
 800bdaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdb2:	e7f8      	b.n	800bda6 <memmove+0x12>
 800bdb4:	4402      	add	r2, r0
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	428a      	cmp	r2, r1
 800bdba:	d100      	bne.n	800bdbe <memmove+0x2a>
 800bdbc:	bd10      	pop	{r4, pc}
 800bdbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdc6:	e7f7      	b.n	800bdb8 <memmove+0x24>

0800bdc8 <_sbrk_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d06      	ldr	r5, [pc, #24]	@ (800bde4 <_sbrk_r+0x1c>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	f7f8 ffca 	bl	8004d6c <_sbrk>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_sbrk_r+0x1a>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_sbrk_r+0x1a>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20001ed0 	.word	0x20001ed0

0800bde8 <memcpy>:
 800bde8:	440a      	add	r2, r1
 800bdea:	4291      	cmp	r1, r2
 800bdec:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdf0:	d100      	bne.n	800bdf4 <memcpy+0xc>
 800bdf2:	4770      	bx	lr
 800bdf4:	b510      	push	{r4, lr}
 800bdf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdfe:	4291      	cmp	r1, r2
 800be00:	d1f9      	bne.n	800bdf6 <memcpy+0xe>
 800be02:	bd10      	pop	{r4, pc}

0800be04 <__assert_func>:
 800be04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be06:	4614      	mov	r4, r2
 800be08:	461a      	mov	r2, r3
 800be0a:	4b09      	ldr	r3, [pc, #36]	@ (800be30 <__assert_func+0x2c>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4605      	mov	r5, r0
 800be10:	68d8      	ldr	r0, [r3, #12]
 800be12:	b14c      	cbz	r4, 800be28 <__assert_func+0x24>
 800be14:	4b07      	ldr	r3, [pc, #28]	@ (800be34 <__assert_func+0x30>)
 800be16:	9100      	str	r1, [sp, #0]
 800be18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be1c:	4906      	ldr	r1, [pc, #24]	@ (800be38 <__assert_func+0x34>)
 800be1e:	462b      	mov	r3, r5
 800be20:	f000 f870 	bl	800bf04 <fiprintf>
 800be24:	f000 f880 	bl	800bf28 <abort>
 800be28:	4b04      	ldr	r3, [pc, #16]	@ (800be3c <__assert_func+0x38>)
 800be2a:	461c      	mov	r4, r3
 800be2c:	e7f3      	b.n	800be16 <__assert_func+0x12>
 800be2e:	bf00      	nop
 800be30:	2000003c 	.word	0x2000003c
 800be34:	0800e3f5 	.word	0x0800e3f5
 800be38:	0800e402 	.word	0x0800e402
 800be3c:	0800e430 	.word	0x0800e430

0800be40 <_calloc_r>:
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	fba1 5402 	umull	r5, r4, r1, r2
 800be46:	b934      	cbnz	r4, 800be56 <_calloc_r+0x16>
 800be48:	4629      	mov	r1, r5
 800be4a:	f7ff f999 	bl	800b180 <_malloc_r>
 800be4e:	4606      	mov	r6, r0
 800be50:	b928      	cbnz	r0, 800be5e <_calloc_r+0x1e>
 800be52:	4630      	mov	r0, r6
 800be54:	bd70      	pop	{r4, r5, r6, pc}
 800be56:	220c      	movs	r2, #12
 800be58:	6002      	str	r2, [r0, #0]
 800be5a:	2600      	movs	r6, #0
 800be5c:	e7f9      	b.n	800be52 <_calloc_r+0x12>
 800be5e:	462a      	mov	r2, r5
 800be60:	4621      	mov	r1, r4
 800be62:	f7fe fa31 	bl	800a2c8 <memset>
 800be66:	e7f4      	b.n	800be52 <_calloc_r+0x12>

0800be68 <__ascii_mbtowc>:
 800be68:	b082      	sub	sp, #8
 800be6a:	b901      	cbnz	r1, 800be6e <__ascii_mbtowc+0x6>
 800be6c:	a901      	add	r1, sp, #4
 800be6e:	b142      	cbz	r2, 800be82 <__ascii_mbtowc+0x1a>
 800be70:	b14b      	cbz	r3, 800be86 <__ascii_mbtowc+0x1e>
 800be72:	7813      	ldrb	r3, [r2, #0]
 800be74:	600b      	str	r3, [r1, #0]
 800be76:	7812      	ldrb	r2, [r2, #0]
 800be78:	1e10      	subs	r0, r2, #0
 800be7a:	bf18      	it	ne
 800be7c:	2001      	movne	r0, #1
 800be7e:	b002      	add	sp, #8
 800be80:	4770      	bx	lr
 800be82:	4610      	mov	r0, r2
 800be84:	e7fb      	b.n	800be7e <__ascii_mbtowc+0x16>
 800be86:	f06f 0001 	mvn.w	r0, #1
 800be8a:	e7f8      	b.n	800be7e <__ascii_mbtowc+0x16>

0800be8c <_realloc_r>:
 800be8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be90:	4607      	mov	r7, r0
 800be92:	4614      	mov	r4, r2
 800be94:	460d      	mov	r5, r1
 800be96:	b921      	cbnz	r1, 800bea2 <_realloc_r+0x16>
 800be98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be9c:	4611      	mov	r1, r2
 800be9e:	f7ff b96f 	b.w	800b180 <_malloc_r>
 800bea2:	b92a      	cbnz	r2, 800beb0 <_realloc_r+0x24>
 800bea4:	f7ff f8f8 	bl	800b098 <_free_r>
 800bea8:	4625      	mov	r5, r4
 800beaa:	4628      	mov	r0, r5
 800beac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb0:	f000 f841 	bl	800bf36 <_malloc_usable_size_r>
 800beb4:	4284      	cmp	r4, r0
 800beb6:	4606      	mov	r6, r0
 800beb8:	d802      	bhi.n	800bec0 <_realloc_r+0x34>
 800beba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bebe:	d8f4      	bhi.n	800beaa <_realloc_r+0x1e>
 800bec0:	4621      	mov	r1, r4
 800bec2:	4638      	mov	r0, r7
 800bec4:	f7ff f95c 	bl	800b180 <_malloc_r>
 800bec8:	4680      	mov	r8, r0
 800beca:	b908      	cbnz	r0, 800bed0 <_realloc_r+0x44>
 800becc:	4645      	mov	r5, r8
 800bece:	e7ec      	b.n	800beaa <_realloc_r+0x1e>
 800bed0:	42b4      	cmp	r4, r6
 800bed2:	4622      	mov	r2, r4
 800bed4:	4629      	mov	r1, r5
 800bed6:	bf28      	it	cs
 800bed8:	4632      	movcs	r2, r6
 800beda:	f7ff ff85 	bl	800bde8 <memcpy>
 800bede:	4629      	mov	r1, r5
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff f8d9 	bl	800b098 <_free_r>
 800bee6:	e7f1      	b.n	800becc <_realloc_r+0x40>

0800bee8 <__ascii_wctomb>:
 800bee8:	4603      	mov	r3, r0
 800beea:	4608      	mov	r0, r1
 800beec:	b141      	cbz	r1, 800bf00 <__ascii_wctomb+0x18>
 800beee:	2aff      	cmp	r2, #255	@ 0xff
 800bef0:	d904      	bls.n	800befc <__ascii_wctomb+0x14>
 800bef2:	228a      	movs	r2, #138	@ 0x8a
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	f04f 30ff 	mov.w	r0, #4294967295
 800befa:	4770      	bx	lr
 800befc:	700a      	strb	r2, [r1, #0]
 800befe:	2001      	movs	r0, #1
 800bf00:	4770      	bx	lr
	...

0800bf04 <fiprintf>:
 800bf04:	b40e      	push	{r1, r2, r3}
 800bf06:	b503      	push	{r0, r1, lr}
 800bf08:	4601      	mov	r1, r0
 800bf0a:	ab03      	add	r3, sp, #12
 800bf0c:	4805      	ldr	r0, [pc, #20]	@ (800bf24 <fiprintf+0x20>)
 800bf0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf12:	6800      	ldr	r0, [r0, #0]
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	f000 f83f 	bl	800bf98 <_vfiprintf_r>
 800bf1a:	b002      	add	sp, #8
 800bf1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf20:	b003      	add	sp, #12
 800bf22:	4770      	bx	lr
 800bf24:	2000003c 	.word	0x2000003c

0800bf28 <abort>:
 800bf28:	b508      	push	{r3, lr}
 800bf2a:	2006      	movs	r0, #6
 800bf2c:	f000 fa08 	bl	800c340 <raise>
 800bf30:	2001      	movs	r0, #1
 800bf32:	f7f8 fea3 	bl	8004c7c <_exit>

0800bf36 <_malloc_usable_size_r>:
 800bf36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf3a:	1f18      	subs	r0, r3, #4
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	bfbc      	itt	lt
 800bf40:	580b      	ldrlt	r3, [r1, r0]
 800bf42:	18c0      	addlt	r0, r0, r3
 800bf44:	4770      	bx	lr

0800bf46 <__sfputc_r>:
 800bf46:	6893      	ldr	r3, [r2, #8]
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	b410      	push	{r4}
 800bf4e:	6093      	str	r3, [r2, #8]
 800bf50:	da08      	bge.n	800bf64 <__sfputc_r+0x1e>
 800bf52:	6994      	ldr	r4, [r2, #24]
 800bf54:	42a3      	cmp	r3, r4
 800bf56:	db01      	blt.n	800bf5c <__sfputc_r+0x16>
 800bf58:	290a      	cmp	r1, #10
 800bf5a:	d103      	bne.n	800bf64 <__sfputc_r+0x1e>
 800bf5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf60:	f000 b932 	b.w	800c1c8 <__swbuf_r>
 800bf64:	6813      	ldr	r3, [r2, #0]
 800bf66:	1c58      	adds	r0, r3, #1
 800bf68:	6010      	str	r0, [r2, #0]
 800bf6a:	7019      	strb	r1, [r3, #0]
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <__sfputs_r>:
 800bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf76:	4606      	mov	r6, r0
 800bf78:	460f      	mov	r7, r1
 800bf7a:	4614      	mov	r4, r2
 800bf7c:	18d5      	adds	r5, r2, r3
 800bf7e:	42ac      	cmp	r4, r5
 800bf80:	d101      	bne.n	800bf86 <__sfputs_r+0x12>
 800bf82:	2000      	movs	r0, #0
 800bf84:	e007      	b.n	800bf96 <__sfputs_r+0x22>
 800bf86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf8a:	463a      	mov	r2, r7
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f7ff ffda 	bl	800bf46 <__sfputc_r>
 800bf92:	1c43      	adds	r3, r0, #1
 800bf94:	d1f3      	bne.n	800bf7e <__sfputs_r+0xa>
 800bf96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf98 <_vfiprintf_r>:
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	b09d      	sub	sp, #116	@ 0x74
 800bfa0:	4614      	mov	r4, r2
 800bfa2:	4698      	mov	r8, r3
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	b118      	cbz	r0, 800bfb0 <_vfiprintf_r+0x18>
 800bfa8:	6a03      	ldr	r3, [r0, #32]
 800bfaa:	b90b      	cbnz	r3, 800bfb0 <_vfiprintf_r+0x18>
 800bfac:	f7fe f8b4 	bl	800a118 <__sinit>
 800bfb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfb2:	07d9      	lsls	r1, r3, #31
 800bfb4:	d405      	bmi.n	800bfc2 <_vfiprintf_r+0x2a>
 800bfb6:	89ab      	ldrh	r3, [r5, #12]
 800bfb8:	059a      	lsls	r2, r3, #22
 800bfba:	d402      	bmi.n	800bfc2 <_vfiprintf_r+0x2a>
 800bfbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfbe:	f7fe fa10 	bl	800a3e2 <__retarget_lock_acquire_recursive>
 800bfc2:	89ab      	ldrh	r3, [r5, #12]
 800bfc4:	071b      	lsls	r3, r3, #28
 800bfc6:	d501      	bpl.n	800bfcc <_vfiprintf_r+0x34>
 800bfc8:	692b      	ldr	r3, [r5, #16]
 800bfca:	b99b      	cbnz	r3, 800bff4 <_vfiprintf_r+0x5c>
 800bfcc:	4629      	mov	r1, r5
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f000 f938 	bl	800c244 <__swsetup_r>
 800bfd4:	b170      	cbz	r0, 800bff4 <_vfiprintf_r+0x5c>
 800bfd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfd8:	07dc      	lsls	r4, r3, #31
 800bfda:	d504      	bpl.n	800bfe6 <_vfiprintf_r+0x4e>
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	b01d      	add	sp, #116	@ 0x74
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe6:	89ab      	ldrh	r3, [r5, #12]
 800bfe8:	0598      	lsls	r0, r3, #22
 800bfea:	d4f7      	bmi.n	800bfdc <_vfiprintf_r+0x44>
 800bfec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfee:	f7fe f9f9 	bl	800a3e4 <__retarget_lock_release_recursive>
 800bff2:	e7f3      	b.n	800bfdc <_vfiprintf_r+0x44>
 800bff4:	2300      	movs	r3, #0
 800bff6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bff8:	2320      	movs	r3, #32
 800bffa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bffe:	f8cd 800c 	str.w	r8, [sp, #12]
 800c002:	2330      	movs	r3, #48	@ 0x30
 800c004:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c1b4 <_vfiprintf_r+0x21c>
 800c008:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c00c:	f04f 0901 	mov.w	r9, #1
 800c010:	4623      	mov	r3, r4
 800c012:	469a      	mov	sl, r3
 800c014:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c018:	b10a      	cbz	r2, 800c01e <_vfiprintf_r+0x86>
 800c01a:	2a25      	cmp	r2, #37	@ 0x25
 800c01c:	d1f9      	bne.n	800c012 <_vfiprintf_r+0x7a>
 800c01e:	ebba 0b04 	subs.w	fp, sl, r4
 800c022:	d00b      	beq.n	800c03c <_vfiprintf_r+0xa4>
 800c024:	465b      	mov	r3, fp
 800c026:	4622      	mov	r2, r4
 800c028:	4629      	mov	r1, r5
 800c02a:	4630      	mov	r0, r6
 800c02c:	f7ff ffa2 	bl	800bf74 <__sfputs_r>
 800c030:	3001      	adds	r0, #1
 800c032:	f000 80a7 	beq.w	800c184 <_vfiprintf_r+0x1ec>
 800c036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c038:	445a      	add	r2, fp
 800c03a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c03c:	f89a 3000 	ldrb.w	r3, [sl]
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 809f 	beq.w	800c184 <_vfiprintf_r+0x1ec>
 800c046:	2300      	movs	r3, #0
 800c048:	f04f 32ff 	mov.w	r2, #4294967295
 800c04c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c050:	f10a 0a01 	add.w	sl, sl, #1
 800c054:	9304      	str	r3, [sp, #16]
 800c056:	9307      	str	r3, [sp, #28]
 800c058:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c05c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c05e:	4654      	mov	r4, sl
 800c060:	2205      	movs	r2, #5
 800c062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c066:	4853      	ldr	r0, [pc, #332]	@ (800c1b4 <_vfiprintf_r+0x21c>)
 800c068:	f7f4 f8ba 	bl	80001e0 <memchr>
 800c06c:	9a04      	ldr	r2, [sp, #16]
 800c06e:	b9d8      	cbnz	r0, 800c0a8 <_vfiprintf_r+0x110>
 800c070:	06d1      	lsls	r1, r2, #27
 800c072:	bf44      	itt	mi
 800c074:	2320      	movmi	r3, #32
 800c076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c07a:	0713      	lsls	r3, r2, #28
 800c07c:	bf44      	itt	mi
 800c07e:	232b      	movmi	r3, #43	@ 0x2b
 800c080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c084:	f89a 3000 	ldrb.w	r3, [sl]
 800c088:	2b2a      	cmp	r3, #42	@ 0x2a
 800c08a:	d015      	beq.n	800c0b8 <_vfiprintf_r+0x120>
 800c08c:	9a07      	ldr	r2, [sp, #28]
 800c08e:	4654      	mov	r4, sl
 800c090:	2000      	movs	r0, #0
 800c092:	f04f 0c0a 	mov.w	ip, #10
 800c096:	4621      	mov	r1, r4
 800c098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c09c:	3b30      	subs	r3, #48	@ 0x30
 800c09e:	2b09      	cmp	r3, #9
 800c0a0:	d94b      	bls.n	800c13a <_vfiprintf_r+0x1a2>
 800c0a2:	b1b0      	cbz	r0, 800c0d2 <_vfiprintf_r+0x13a>
 800c0a4:	9207      	str	r2, [sp, #28]
 800c0a6:	e014      	b.n	800c0d2 <_vfiprintf_r+0x13a>
 800c0a8:	eba0 0308 	sub.w	r3, r0, r8
 800c0ac:	fa09 f303 	lsl.w	r3, r9, r3
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	9304      	str	r3, [sp, #16]
 800c0b4:	46a2      	mov	sl, r4
 800c0b6:	e7d2      	b.n	800c05e <_vfiprintf_r+0xc6>
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	1d19      	adds	r1, r3, #4
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	9103      	str	r1, [sp, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	bfbb      	ittet	lt
 800c0c4:	425b      	neglt	r3, r3
 800c0c6:	f042 0202 	orrlt.w	r2, r2, #2
 800c0ca:	9307      	strge	r3, [sp, #28]
 800c0cc:	9307      	strlt	r3, [sp, #28]
 800c0ce:	bfb8      	it	lt
 800c0d0:	9204      	strlt	r2, [sp, #16]
 800c0d2:	7823      	ldrb	r3, [r4, #0]
 800c0d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0d6:	d10a      	bne.n	800c0ee <_vfiprintf_r+0x156>
 800c0d8:	7863      	ldrb	r3, [r4, #1]
 800c0da:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0dc:	d132      	bne.n	800c144 <_vfiprintf_r+0x1ac>
 800c0de:	9b03      	ldr	r3, [sp, #12]
 800c0e0:	1d1a      	adds	r2, r3, #4
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	9203      	str	r2, [sp, #12]
 800c0e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0ea:	3402      	adds	r4, #2
 800c0ec:	9305      	str	r3, [sp, #20]
 800c0ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c1c4 <_vfiprintf_r+0x22c>
 800c0f2:	7821      	ldrb	r1, [r4, #0]
 800c0f4:	2203      	movs	r2, #3
 800c0f6:	4650      	mov	r0, sl
 800c0f8:	f7f4 f872 	bl	80001e0 <memchr>
 800c0fc:	b138      	cbz	r0, 800c10e <_vfiprintf_r+0x176>
 800c0fe:	9b04      	ldr	r3, [sp, #16]
 800c100:	eba0 000a 	sub.w	r0, r0, sl
 800c104:	2240      	movs	r2, #64	@ 0x40
 800c106:	4082      	lsls	r2, r0
 800c108:	4313      	orrs	r3, r2
 800c10a:	3401      	adds	r4, #1
 800c10c:	9304      	str	r3, [sp, #16]
 800c10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c112:	4829      	ldr	r0, [pc, #164]	@ (800c1b8 <_vfiprintf_r+0x220>)
 800c114:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c118:	2206      	movs	r2, #6
 800c11a:	f7f4 f861 	bl	80001e0 <memchr>
 800c11e:	2800      	cmp	r0, #0
 800c120:	d03f      	beq.n	800c1a2 <_vfiprintf_r+0x20a>
 800c122:	4b26      	ldr	r3, [pc, #152]	@ (800c1bc <_vfiprintf_r+0x224>)
 800c124:	bb1b      	cbnz	r3, 800c16e <_vfiprintf_r+0x1d6>
 800c126:	9b03      	ldr	r3, [sp, #12]
 800c128:	3307      	adds	r3, #7
 800c12a:	f023 0307 	bic.w	r3, r3, #7
 800c12e:	3308      	adds	r3, #8
 800c130:	9303      	str	r3, [sp, #12]
 800c132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c134:	443b      	add	r3, r7
 800c136:	9309      	str	r3, [sp, #36]	@ 0x24
 800c138:	e76a      	b.n	800c010 <_vfiprintf_r+0x78>
 800c13a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c13e:	460c      	mov	r4, r1
 800c140:	2001      	movs	r0, #1
 800c142:	e7a8      	b.n	800c096 <_vfiprintf_r+0xfe>
 800c144:	2300      	movs	r3, #0
 800c146:	3401      	adds	r4, #1
 800c148:	9305      	str	r3, [sp, #20]
 800c14a:	4619      	mov	r1, r3
 800c14c:	f04f 0c0a 	mov.w	ip, #10
 800c150:	4620      	mov	r0, r4
 800c152:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c156:	3a30      	subs	r2, #48	@ 0x30
 800c158:	2a09      	cmp	r2, #9
 800c15a:	d903      	bls.n	800c164 <_vfiprintf_r+0x1cc>
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d0c6      	beq.n	800c0ee <_vfiprintf_r+0x156>
 800c160:	9105      	str	r1, [sp, #20]
 800c162:	e7c4      	b.n	800c0ee <_vfiprintf_r+0x156>
 800c164:	fb0c 2101 	mla	r1, ip, r1, r2
 800c168:	4604      	mov	r4, r0
 800c16a:	2301      	movs	r3, #1
 800c16c:	e7f0      	b.n	800c150 <_vfiprintf_r+0x1b8>
 800c16e:	ab03      	add	r3, sp, #12
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	462a      	mov	r2, r5
 800c174:	4b12      	ldr	r3, [pc, #72]	@ (800c1c0 <_vfiprintf_r+0x228>)
 800c176:	a904      	add	r1, sp, #16
 800c178:	4630      	mov	r0, r6
 800c17a:	f7fd fb8b 	bl	8009894 <_printf_float>
 800c17e:	4607      	mov	r7, r0
 800c180:	1c78      	adds	r0, r7, #1
 800c182:	d1d6      	bne.n	800c132 <_vfiprintf_r+0x19a>
 800c184:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c186:	07d9      	lsls	r1, r3, #31
 800c188:	d405      	bmi.n	800c196 <_vfiprintf_r+0x1fe>
 800c18a:	89ab      	ldrh	r3, [r5, #12]
 800c18c:	059a      	lsls	r2, r3, #22
 800c18e:	d402      	bmi.n	800c196 <_vfiprintf_r+0x1fe>
 800c190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c192:	f7fe f927 	bl	800a3e4 <__retarget_lock_release_recursive>
 800c196:	89ab      	ldrh	r3, [r5, #12]
 800c198:	065b      	lsls	r3, r3, #25
 800c19a:	f53f af1f 	bmi.w	800bfdc <_vfiprintf_r+0x44>
 800c19e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1a0:	e71e      	b.n	800bfe0 <_vfiprintf_r+0x48>
 800c1a2:	ab03      	add	r3, sp, #12
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	462a      	mov	r2, r5
 800c1a8:	4b05      	ldr	r3, [pc, #20]	@ (800c1c0 <_vfiprintf_r+0x228>)
 800c1aa:	a904      	add	r1, sp, #16
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f7fd fe09 	bl	8009dc4 <_printf_i>
 800c1b2:	e7e4      	b.n	800c17e <_vfiprintf_r+0x1e6>
 800c1b4:	0800e3da 	.word	0x0800e3da
 800c1b8:	0800e3e4 	.word	0x0800e3e4
 800c1bc:	08009895 	.word	0x08009895
 800c1c0:	0800bf75 	.word	0x0800bf75
 800c1c4:	0800e3e0 	.word	0x0800e3e0

0800c1c8 <__swbuf_r>:
 800c1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ca:	460e      	mov	r6, r1
 800c1cc:	4614      	mov	r4, r2
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	b118      	cbz	r0, 800c1da <__swbuf_r+0x12>
 800c1d2:	6a03      	ldr	r3, [r0, #32]
 800c1d4:	b90b      	cbnz	r3, 800c1da <__swbuf_r+0x12>
 800c1d6:	f7fd ff9f 	bl	800a118 <__sinit>
 800c1da:	69a3      	ldr	r3, [r4, #24]
 800c1dc:	60a3      	str	r3, [r4, #8]
 800c1de:	89a3      	ldrh	r3, [r4, #12]
 800c1e0:	071a      	lsls	r2, r3, #28
 800c1e2:	d501      	bpl.n	800c1e8 <__swbuf_r+0x20>
 800c1e4:	6923      	ldr	r3, [r4, #16]
 800c1e6:	b943      	cbnz	r3, 800c1fa <__swbuf_r+0x32>
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	f000 f82a 	bl	800c244 <__swsetup_r>
 800c1f0:	b118      	cbz	r0, 800c1fa <__swbuf_r+0x32>
 800c1f2:	f04f 37ff 	mov.w	r7, #4294967295
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	6922      	ldr	r2, [r4, #16]
 800c1fe:	1a98      	subs	r0, r3, r2
 800c200:	6963      	ldr	r3, [r4, #20]
 800c202:	b2f6      	uxtb	r6, r6
 800c204:	4283      	cmp	r3, r0
 800c206:	4637      	mov	r7, r6
 800c208:	dc05      	bgt.n	800c216 <__swbuf_r+0x4e>
 800c20a:	4621      	mov	r1, r4
 800c20c:	4628      	mov	r0, r5
 800c20e:	f7ff fd99 	bl	800bd44 <_fflush_r>
 800c212:	2800      	cmp	r0, #0
 800c214:	d1ed      	bne.n	800c1f2 <__swbuf_r+0x2a>
 800c216:	68a3      	ldr	r3, [r4, #8]
 800c218:	3b01      	subs	r3, #1
 800c21a:	60a3      	str	r3, [r4, #8]
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	6022      	str	r2, [r4, #0]
 800c222:	701e      	strb	r6, [r3, #0]
 800c224:	6962      	ldr	r2, [r4, #20]
 800c226:	1c43      	adds	r3, r0, #1
 800c228:	429a      	cmp	r2, r3
 800c22a:	d004      	beq.n	800c236 <__swbuf_r+0x6e>
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	07db      	lsls	r3, r3, #31
 800c230:	d5e1      	bpl.n	800c1f6 <__swbuf_r+0x2e>
 800c232:	2e0a      	cmp	r6, #10
 800c234:	d1df      	bne.n	800c1f6 <__swbuf_r+0x2e>
 800c236:	4621      	mov	r1, r4
 800c238:	4628      	mov	r0, r5
 800c23a:	f7ff fd83 	bl	800bd44 <_fflush_r>
 800c23e:	2800      	cmp	r0, #0
 800c240:	d0d9      	beq.n	800c1f6 <__swbuf_r+0x2e>
 800c242:	e7d6      	b.n	800c1f2 <__swbuf_r+0x2a>

0800c244 <__swsetup_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4b29      	ldr	r3, [pc, #164]	@ (800c2ec <__swsetup_r+0xa8>)
 800c248:	4605      	mov	r5, r0
 800c24a:	6818      	ldr	r0, [r3, #0]
 800c24c:	460c      	mov	r4, r1
 800c24e:	b118      	cbz	r0, 800c258 <__swsetup_r+0x14>
 800c250:	6a03      	ldr	r3, [r0, #32]
 800c252:	b90b      	cbnz	r3, 800c258 <__swsetup_r+0x14>
 800c254:	f7fd ff60 	bl	800a118 <__sinit>
 800c258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c25c:	0719      	lsls	r1, r3, #28
 800c25e:	d422      	bmi.n	800c2a6 <__swsetup_r+0x62>
 800c260:	06da      	lsls	r2, r3, #27
 800c262:	d407      	bmi.n	800c274 <__swsetup_r+0x30>
 800c264:	2209      	movs	r2, #9
 800c266:	602a      	str	r2, [r5, #0]
 800c268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c26c:	81a3      	strh	r3, [r4, #12]
 800c26e:	f04f 30ff 	mov.w	r0, #4294967295
 800c272:	e033      	b.n	800c2dc <__swsetup_r+0x98>
 800c274:	0758      	lsls	r0, r3, #29
 800c276:	d512      	bpl.n	800c29e <__swsetup_r+0x5a>
 800c278:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c27a:	b141      	cbz	r1, 800c28e <__swsetup_r+0x4a>
 800c27c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c280:	4299      	cmp	r1, r3
 800c282:	d002      	beq.n	800c28a <__swsetup_r+0x46>
 800c284:	4628      	mov	r0, r5
 800c286:	f7fe ff07 	bl	800b098 <_free_r>
 800c28a:	2300      	movs	r3, #0
 800c28c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c294:	81a3      	strh	r3, [r4, #12]
 800c296:	2300      	movs	r3, #0
 800c298:	6063      	str	r3, [r4, #4]
 800c29a:	6923      	ldr	r3, [r4, #16]
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	f043 0308 	orr.w	r3, r3, #8
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	6923      	ldr	r3, [r4, #16]
 800c2a8:	b94b      	cbnz	r3, 800c2be <__swsetup_r+0x7a>
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2b4:	d003      	beq.n	800c2be <__swsetup_r+0x7a>
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f000 f883 	bl	800c3c4 <__smakebuf_r>
 800c2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c2:	f013 0201 	ands.w	r2, r3, #1
 800c2c6:	d00a      	beq.n	800c2de <__swsetup_r+0x9a>
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	60a2      	str	r2, [r4, #8]
 800c2cc:	6962      	ldr	r2, [r4, #20]
 800c2ce:	4252      	negs	r2, r2
 800c2d0:	61a2      	str	r2, [r4, #24]
 800c2d2:	6922      	ldr	r2, [r4, #16]
 800c2d4:	b942      	cbnz	r2, 800c2e8 <__swsetup_r+0xa4>
 800c2d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2da:	d1c5      	bne.n	800c268 <__swsetup_r+0x24>
 800c2dc:	bd38      	pop	{r3, r4, r5, pc}
 800c2de:	0799      	lsls	r1, r3, #30
 800c2e0:	bf58      	it	pl
 800c2e2:	6962      	ldrpl	r2, [r4, #20]
 800c2e4:	60a2      	str	r2, [r4, #8]
 800c2e6:	e7f4      	b.n	800c2d2 <__swsetup_r+0x8e>
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	e7f7      	b.n	800c2dc <__swsetup_r+0x98>
 800c2ec:	2000003c 	.word	0x2000003c

0800c2f0 <_raise_r>:
 800c2f0:	291f      	cmp	r1, #31
 800c2f2:	b538      	push	{r3, r4, r5, lr}
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	d904      	bls.n	800c304 <_raise_r+0x14>
 800c2fa:	2316      	movs	r3, #22
 800c2fc:	6003      	str	r3, [r0, #0]
 800c2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c306:	b112      	cbz	r2, 800c30e <_raise_r+0x1e>
 800c308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c30c:	b94b      	cbnz	r3, 800c322 <_raise_r+0x32>
 800c30e:	4628      	mov	r0, r5
 800c310:	f000 f830 	bl	800c374 <_getpid_r>
 800c314:	4622      	mov	r2, r4
 800c316:	4601      	mov	r1, r0
 800c318:	4628      	mov	r0, r5
 800c31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c31e:	f000 b817 	b.w	800c350 <_kill_r>
 800c322:	2b01      	cmp	r3, #1
 800c324:	d00a      	beq.n	800c33c <_raise_r+0x4c>
 800c326:	1c59      	adds	r1, r3, #1
 800c328:	d103      	bne.n	800c332 <_raise_r+0x42>
 800c32a:	2316      	movs	r3, #22
 800c32c:	6003      	str	r3, [r0, #0]
 800c32e:	2001      	movs	r0, #1
 800c330:	e7e7      	b.n	800c302 <_raise_r+0x12>
 800c332:	2100      	movs	r1, #0
 800c334:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c338:	4620      	mov	r0, r4
 800c33a:	4798      	blx	r3
 800c33c:	2000      	movs	r0, #0
 800c33e:	e7e0      	b.n	800c302 <_raise_r+0x12>

0800c340 <raise>:
 800c340:	4b02      	ldr	r3, [pc, #8]	@ (800c34c <raise+0xc>)
 800c342:	4601      	mov	r1, r0
 800c344:	6818      	ldr	r0, [r3, #0]
 800c346:	f7ff bfd3 	b.w	800c2f0 <_raise_r>
 800c34a:	bf00      	nop
 800c34c:	2000003c 	.word	0x2000003c

0800c350 <_kill_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d07      	ldr	r5, [pc, #28]	@ (800c370 <_kill_r+0x20>)
 800c354:	2300      	movs	r3, #0
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	4611      	mov	r1, r2
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	f7f8 fc7d 	bl	8004c5c <_kill>
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	d102      	bne.n	800c36c <_kill_r+0x1c>
 800c366:	682b      	ldr	r3, [r5, #0]
 800c368:	b103      	cbz	r3, 800c36c <_kill_r+0x1c>
 800c36a:	6023      	str	r3, [r4, #0]
 800c36c:	bd38      	pop	{r3, r4, r5, pc}
 800c36e:	bf00      	nop
 800c370:	20001ed0 	.word	0x20001ed0

0800c374 <_getpid_r>:
 800c374:	f7f8 bc6a 	b.w	8004c4c <_getpid>

0800c378 <__swhatbuf_r>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	460c      	mov	r4, r1
 800c37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c380:	2900      	cmp	r1, #0
 800c382:	b096      	sub	sp, #88	@ 0x58
 800c384:	4615      	mov	r5, r2
 800c386:	461e      	mov	r6, r3
 800c388:	da0d      	bge.n	800c3a6 <__swhatbuf_r+0x2e>
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c390:	f04f 0100 	mov.w	r1, #0
 800c394:	bf14      	ite	ne
 800c396:	2340      	movne	r3, #64	@ 0x40
 800c398:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c39c:	2000      	movs	r0, #0
 800c39e:	6031      	str	r1, [r6, #0]
 800c3a0:	602b      	str	r3, [r5, #0]
 800c3a2:	b016      	add	sp, #88	@ 0x58
 800c3a4:	bd70      	pop	{r4, r5, r6, pc}
 800c3a6:	466a      	mov	r2, sp
 800c3a8:	f000 f848 	bl	800c43c <_fstat_r>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	dbec      	blt.n	800c38a <__swhatbuf_r+0x12>
 800c3b0:	9901      	ldr	r1, [sp, #4]
 800c3b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3ba:	4259      	negs	r1, r3
 800c3bc:	4159      	adcs	r1, r3
 800c3be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3c2:	e7eb      	b.n	800c39c <__swhatbuf_r+0x24>

0800c3c4 <__smakebuf_r>:
 800c3c4:	898b      	ldrh	r3, [r1, #12]
 800c3c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3c8:	079d      	lsls	r5, r3, #30
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	d507      	bpl.n	800c3e0 <__smakebuf_r+0x1c>
 800c3d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	6123      	str	r3, [r4, #16]
 800c3d8:	2301      	movs	r3, #1
 800c3da:	6163      	str	r3, [r4, #20]
 800c3dc:	b003      	add	sp, #12
 800c3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3e0:	ab01      	add	r3, sp, #4
 800c3e2:	466a      	mov	r2, sp
 800c3e4:	f7ff ffc8 	bl	800c378 <__swhatbuf_r>
 800c3e8:	9f00      	ldr	r7, [sp, #0]
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	4639      	mov	r1, r7
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f7fe fec6 	bl	800b180 <_malloc_r>
 800c3f4:	b948      	cbnz	r0, 800c40a <__smakebuf_r+0x46>
 800c3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3fa:	059a      	lsls	r2, r3, #22
 800c3fc:	d4ee      	bmi.n	800c3dc <__smakebuf_r+0x18>
 800c3fe:	f023 0303 	bic.w	r3, r3, #3
 800c402:	f043 0302 	orr.w	r3, r3, #2
 800c406:	81a3      	strh	r3, [r4, #12]
 800c408:	e7e2      	b.n	800c3d0 <__smakebuf_r+0xc>
 800c40a:	89a3      	ldrh	r3, [r4, #12]
 800c40c:	6020      	str	r0, [r4, #0]
 800c40e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c412:	81a3      	strh	r3, [r4, #12]
 800c414:	9b01      	ldr	r3, [sp, #4]
 800c416:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c41a:	b15b      	cbz	r3, 800c434 <__smakebuf_r+0x70>
 800c41c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c420:	4630      	mov	r0, r6
 800c422:	f000 f81d 	bl	800c460 <_isatty_r>
 800c426:	b128      	cbz	r0, 800c434 <__smakebuf_r+0x70>
 800c428:	89a3      	ldrh	r3, [r4, #12]
 800c42a:	f023 0303 	bic.w	r3, r3, #3
 800c42e:	f043 0301 	orr.w	r3, r3, #1
 800c432:	81a3      	strh	r3, [r4, #12]
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	431d      	orrs	r5, r3
 800c438:	81a5      	strh	r5, [r4, #12]
 800c43a:	e7cf      	b.n	800c3dc <__smakebuf_r+0x18>

0800c43c <_fstat_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4d07      	ldr	r5, [pc, #28]	@ (800c45c <_fstat_r+0x20>)
 800c440:	2300      	movs	r3, #0
 800c442:	4604      	mov	r4, r0
 800c444:	4608      	mov	r0, r1
 800c446:	4611      	mov	r1, r2
 800c448:	602b      	str	r3, [r5, #0]
 800c44a:	f7f8 fc67 	bl	8004d1c <_fstat>
 800c44e:	1c43      	adds	r3, r0, #1
 800c450:	d102      	bne.n	800c458 <_fstat_r+0x1c>
 800c452:	682b      	ldr	r3, [r5, #0]
 800c454:	b103      	cbz	r3, 800c458 <_fstat_r+0x1c>
 800c456:	6023      	str	r3, [r4, #0]
 800c458:	bd38      	pop	{r3, r4, r5, pc}
 800c45a:	bf00      	nop
 800c45c:	20001ed0 	.word	0x20001ed0

0800c460 <_isatty_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	4d06      	ldr	r5, [pc, #24]	@ (800c47c <_isatty_r+0x1c>)
 800c464:	2300      	movs	r3, #0
 800c466:	4604      	mov	r4, r0
 800c468:	4608      	mov	r0, r1
 800c46a:	602b      	str	r3, [r5, #0]
 800c46c:	f7f8 fc66 	bl	8004d3c <_isatty>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d102      	bne.n	800c47a <_isatty_r+0x1a>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	b103      	cbz	r3, 800c47a <_isatty_r+0x1a>
 800c478:	6023      	str	r3, [r4, #0]
 800c47a:	bd38      	pop	{r3, r4, r5, pc}
 800c47c:	20001ed0 	.word	0x20001ed0

0800c480 <sqrtf>:
 800c480:	b508      	push	{r3, lr}
 800c482:	ed2d 8b02 	vpush	{d8}
 800c486:	eeb0 8a40 	vmov.f32	s16, s0
 800c48a:	f000 f851 	bl	800c530 <__ieee754_sqrtf>
 800c48e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c496:	d60c      	bvs.n	800c4b2 <sqrtf+0x32>
 800c498:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c4b8 <sqrtf+0x38>
 800c49c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4a4:	d505      	bpl.n	800c4b2 <sqrtf+0x32>
 800c4a6:	f7fd ff71 	bl	800a38c <__errno>
 800c4aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c4ae:	2321      	movs	r3, #33	@ 0x21
 800c4b0:	6003      	str	r3, [r0, #0]
 800c4b2:	ecbd 8b02 	vpop	{d8}
 800c4b6:	bd08      	pop	{r3, pc}
 800c4b8:	00000000 	.word	0x00000000

0800c4bc <fmaxf>:
 800c4bc:	b508      	push	{r3, lr}
 800c4be:	ed2d 8b02 	vpush	{d8}
 800c4c2:	eeb0 8a40 	vmov.f32	s16, s0
 800c4c6:	eef0 8a60 	vmov.f32	s17, s1
 800c4ca:	f000 f815 	bl	800c4f8 <__fpclassifyf>
 800c4ce:	b930      	cbnz	r0, 800c4de <fmaxf+0x22>
 800c4d0:	eeb0 8a68 	vmov.f32	s16, s17
 800c4d4:	eeb0 0a48 	vmov.f32	s0, s16
 800c4d8:	ecbd 8b02 	vpop	{d8}
 800c4dc:	bd08      	pop	{r3, pc}
 800c4de:	eeb0 0a68 	vmov.f32	s0, s17
 800c4e2:	f000 f809 	bl	800c4f8 <__fpclassifyf>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d0f4      	beq.n	800c4d4 <fmaxf+0x18>
 800c4ea:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f2:	dded      	ble.n	800c4d0 <fmaxf+0x14>
 800c4f4:	e7ee      	b.n	800c4d4 <fmaxf+0x18>
	...

0800c4f8 <__fpclassifyf>:
 800c4f8:	ee10 3a10 	vmov	r3, s0
 800c4fc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c500:	d00d      	beq.n	800c51e <__fpclassifyf+0x26>
 800c502:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c506:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c50a:	d30a      	bcc.n	800c522 <__fpclassifyf+0x2a>
 800c50c:	4b07      	ldr	r3, [pc, #28]	@ (800c52c <__fpclassifyf+0x34>)
 800c50e:	1e42      	subs	r2, r0, #1
 800c510:	429a      	cmp	r2, r3
 800c512:	d908      	bls.n	800c526 <__fpclassifyf+0x2e>
 800c514:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c518:	4258      	negs	r0, r3
 800c51a:	4158      	adcs	r0, r3
 800c51c:	4770      	bx	lr
 800c51e:	2002      	movs	r0, #2
 800c520:	4770      	bx	lr
 800c522:	2004      	movs	r0, #4
 800c524:	4770      	bx	lr
 800c526:	2003      	movs	r0, #3
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	007ffffe 	.word	0x007ffffe

0800c530 <__ieee754_sqrtf>:
 800c530:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c534:	4770      	bx	lr
	...

0800c538 <roundf>:
 800c538:	ee10 0a10 	vmov	r0, s0
 800c53c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c540:	3a7f      	subs	r2, #127	@ 0x7f
 800c542:	2a16      	cmp	r2, #22
 800c544:	dc15      	bgt.n	800c572 <roundf+0x3a>
 800c546:	2a00      	cmp	r2, #0
 800c548:	da08      	bge.n	800c55c <roundf+0x24>
 800c54a:	3201      	adds	r2, #1
 800c54c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800c550:	d101      	bne.n	800c556 <roundf+0x1e>
 800c552:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800c556:	ee00 3a10 	vmov	s0, r3
 800c55a:	4770      	bx	lr
 800c55c:	4907      	ldr	r1, [pc, #28]	@ (800c57c <roundf+0x44>)
 800c55e:	4111      	asrs	r1, r2
 800c560:	4201      	tst	r1, r0
 800c562:	d0fa      	beq.n	800c55a <roundf+0x22>
 800c564:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c568:	4113      	asrs	r3, r2
 800c56a:	4403      	add	r3, r0
 800c56c:	ea23 0301 	bic.w	r3, r3, r1
 800c570:	e7f1      	b.n	800c556 <roundf+0x1e>
 800c572:	2a80      	cmp	r2, #128	@ 0x80
 800c574:	d1f1      	bne.n	800c55a <roundf+0x22>
 800c576:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c57a:	4770      	bx	lr
 800c57c:	007fffff 	.word	0x007fffff

0800c580 <_init>:
 800c580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c582:	bf00      	nop
 800c584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c586:	bc08      	pop	{r3}
 800c588:	469e      	mov	lr, r3
 800c58a:	4770      	bx	lr

0800c58c <_fini>:
 800c58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58e:	bf00      	nop
 800c590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c592:	bc08      	pop	{r3}
 800c594:	469e      	mov	lr, r3
 800c596:	4770      	bx	lr
