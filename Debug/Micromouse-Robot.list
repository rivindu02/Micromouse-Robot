
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac20  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001eec  0800adc0  0800adc0  0000bdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccac  0800ccac  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ccac  0800ccac  0000dcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccb4  0800ccb4  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccb4  0800ccb4  0000dcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ccb8  0800ccb8  0000dcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ccbc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  200001d8  0800ce94  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001618  0800ce94  0000e618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b5a  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366a  00000000  00000000  00024d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  000283d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff9  00000000  00000000  00029808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6f4  00000000  00000000  0002a801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018528  00000000  00000000  00044ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0409  00000000  00000000  0005d41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000657c  00000000  00000000  000fd86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00103de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ada8 	.word	0x0800ada8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800ada8 	.word	0x0800ada8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 fddd 	bl	8003ac0 <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f005 f815 	bl	8005f78 <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fdb5 	bl	8003ac0 <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f005 f8bd 	bl	80060d8 <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	200002ac 	.word	0x200002ac

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f005 f8b0 	bl	80060d8 <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002ac 	.word	0x200002ac

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <play_battery_warning>:

/**
 * @brief Play battery low warning
 */
void play_battery_warning(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	e00b      	b.n	8000fdc <play_battery_warning+0x24>
        play_tone(440, 100);  // A4
 8000fc4:	2164      	movs	r1, #100	@ 0x64
 8000fc6:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8000fca:	f7ff ff8b 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 8000fce:	2164      	movs	r1, #100	@ 0x64
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff ff87 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 5; i++) {
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	ddf0      	ble.n	8000fc4 <play_battery_warning+0xc>
    }
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff f943 	bl	8000280 <strlen>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4803      	ldr	r0, [pc, #12]	@ (8001014 <send_bluetooth_message+0x28>)
 8001006:	f006 f8a1 	bl	800714c <HAL_UART_Transmit>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200003cc 	.word	0x200003cc

08001018 <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 8001018:	b40f      	push	{r0, r1, r2, r3}
 800101a:	b580      	push	{r7, lr}
 800101c:	b0c2      	sub	sp, #264	@ 0x108
 800101e:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8001020:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001028:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800102c:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800102e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001036:	f107 0008 	add.w	r0, r7, #8
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001044:	f007 fdd4 	bl	8008bf0 <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ffcd 	bl	8000fec <send_bluetooth_message>
}
 8001052:	bf00      	nop
 8001054:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001058:	46bd      	mov	sp, r7
 800105a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800105e:	b004      	add	sp, #16
 8001060:	4770      	bx	lr
	...

08001064 <send_sensor_data>:

/**
 * @brief Send current sensor data
 */
void send_sensor_data(void)
{
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	b087      	sub	sp, #28
 8001068:	af06      	add	r7, sp, #24
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
                         sensors.battery, sensors.front_left, sensors.front_right,
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <send_sensor_data+0x54>)
 800106c:	881b      	ldrh	r3, [r3, #0]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800106e:	461d      	mov	r5, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <send_sensor_data+0x54>)
 8001072:	891b      	ldrh	r3, [r3, #8]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001074:	461e      	mov	r6, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <send_sensor_data+0x54>)
 8001078:	885b      	ldrh	r3, [r3, #2]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800107a:	469c      	mov	ip, r3
                         sensors.side_left, sensors.side_right,
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <send_sensor_data+0x54>)
 800107e:	88db      	ldrh	r3, [r3, #6]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001080:	461a      	mov	r2, r3
                         sensors.side_left, sensors.side_right,
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <send_sensor_data+0x54>)
 8001084:	889b      	ldrh	r3, [r3, #4]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001086:	4619      	mov	r1, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <send_sensor_data+0x54>)
 800108a:	7a9b      	ldrb	r3, [r3, #10]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800108c:	4618      	mov	r0, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <send_sensor_data+0x54>)
 8001090:	7adb      	ldrb	r3, [r3, #11]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001092:	461c      	mov	r4, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <send_sensor_data+0x54>)
 8001096:	7b1b      	ldrb	r3, [r3, #12]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001098:	9304      	str	r3, [sp, #16]
 800109a:	9403      	str	r4, [sp, #12]
 800109c:	9002      	str	r0, [sp, #8]
 800109e:	9101      	str	r1, [sp, #4]
 80010a0:	9200      	str	r2, [sp, #0]
 80010a2:	4663      	mov	r3, ip
 80010a4:	4632      	mov	r2, r6
 80010a6:	4629      	mov	r1, r5
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <send_sensor_data+0x58>)
 80010aa:	f7ff ffb5 	bl	8001018 <send_bluetooth_printf>
}
 80010ae:	bf00      	nop
 80010b0:	3704      	adds	r7, #4
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20001428 	.word	0x20001428
 80010bc:	0800ae64 	.word	0x0800ae64

080010c0 <send_battery_status>:

/**
 * @brief Send battery status
 */
void send_battery_status(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af02      	add	r7, sp, #8
    // Convert ADC reading to voltage (assuming 3.3V reference)
    float voltage = (sensors.battery * 3.3f) / 4096.0f;
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <send_battery_status+0x60>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001124 <send_battery_status+0x64>
 80010d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010da:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001128 <send_battery_status+0x68>
 80010de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e2:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_printf("Battery: %.2fV (ADC:%d)", voltage, sensors.battery);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fa36 	bl	8000558 <__aeabi_f2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	490b      	ldr	r1, [pc, #44]	@ (8001120 <send_battery_status+0x60>)
 80010f2:	8809      	ldrh	r1, [r1, #0]
 80010f4:	9100      	str	r1, [sp, #0]
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <send_battery_status+0x6c>)
 80010f8:	f7ff ff8e 	bl	8001018 <send_bluetooth_printf>

    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <send_battery_status+0x60>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001104:	4293      	cmp	r3, r2
 8001106:	d803      	bhi.n	8001110 <send_battery_status+0x50>
        send_bluetooth_message(" - LOW BATTERY WARNING!\r\n");
 8001108:	4809      	ldr	r0, [pc, #36]	@ (8001130 <send_battery_status+0x70>)
 800110a:	f7ff ff6f 	bl	8000fec <send_bluetooth_message>
    } else {
        send_bluetooth_message(" - OK\r\n");
    }
}
 800110e:	e002      	b.n	8001116 <send_battery_status+0x56>
        send_bluetooth_message(" - OK\r\n");
 8001110:	4808      	ldr	r0, [pc, #32]	@ (8001134 <send_battery_status+0x74>)
 8001112:	f7ff ff6b 	bl	8000fec <send_bluetooth_message>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20001428 	.word	0x20001428
 8001124:	40533333 	.word	0x40533333
 8001128:	45800000 	.word	0x45800000
 800112c:	0800b010 	.word	0x0800b010
 8001130:	0800b028 	.word	0x0800b028
 8001134:	0800b044 	.word	0x0800b044

08001138 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001148:	b2db      	uxtb	r3, r3
 800114a:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001156:	4817      	ldr	r0, [pc, #92]	@ (80011b4 <mpu9250_read_register+0x7c>)
 8001158:	f003 fbf0 	bl	800493c <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 800115c:	f107 010d 	add.w	r1, r7, #13
 8001160:	2364      	movs	r3, #100	@ 0x64
 8001162:	2201      	movs	r2, #1
 8001164:	4814      	ldr	r0, [pc, #80]	@ (80011b8 <mpu9250_read_register+0x80>)
 8001166:	f004 f916 	bl	8005396 <HAL_SPI_Transmit>
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 800116e:	f107 010c 	add.w	r1, r7, #12
 8001172:	2364      	movs	r3, #100	@ 0x64
 8001174:	2201      	movs	r2, #1
 8001176:	4810      	ldr	r0, [pc, #64]	@ (80011b8 <mpu9250_read_register+0x80>)
 8001178:	f004 fa51 	bl	800561e <HAL_SPI_Receive>
 800117c:	4603      	mov	r3, r0
 800117e:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001186:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <mpu9250_read_register+0x7c>)
 8001188:	f003 fbd8 	bl	800493c <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <mpu9250_read_register+0x60>
 8001192:	7bbb      	ldrb	r3, [r7, #14]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d007      	beq.n	80011a8 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 8001198:	4808      	ldr	r0, [pc, #32]	@ (80011bc <mpu9250_read_register+0x84>)
 800119a:	f7ff ff27 	bl	8000fec <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <mpu9250_read_register+0x88>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 80011a4:	23ff      	movs	r3, #255	@ 0xff
 80011a6:	e000      	b.n	80011aa <mpu9250_read_register+0x72>
    }

    return rx_data;
 80011a8:	7b3b      	ldrb	r3, [r7, #12]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020400 	.word	0x40020400
 80011b8:	20000254 	.word	0x20000254
 80011bc:	0800b164 	.word	0x0800b164
 80011c0:	200001f4 	.word	0x200001f4

080011c4 <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	733b      	strb	r3, [r7, #12]
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011e2:	4811      	ldr	r0, [pc, #68]	@ (8001228 <mpu9250_write_register+0x64>)
 80011e4:	f003 fbaa 	bl	800493c <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 80011e8:	f107 010c 	add.w	r1, r7, #12
 80011ec:	2364      	movs	r3, #100	@ 0x64
 80011ee:	2202      	movs	r2, #2
 80011f0:	480e      	ldr	r0, [pc, #56]	@ (800122c <mpu9250_write_register+0x68>)
 80011f2:	f004 f8d0 	bl	8005396 <HAL_SPI_Transmit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001200:	4809      	ldr	r0, [pc, #36]	@ (8001228 <mpu9250_write_register+0x64>)
 8001202:	f003 fb9b 	bl	800493c <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 800120c:	4808      	ldr	r0, [pc, #32]	@ (8001230 <mpu9250_write_register+0x6c>)
 800120e:	f7ff feed 	bl	8000fec <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <mpu9250_write_register+0x70>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8001218:	2001      	movs	r0, #1
 800121a:	f002 fc51 	bl	8003ac0 <HAL_Delay>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020400 	.word	0x40020400
 800122c:	20000254 	.word	0x20000254
 8001230:	0800b188 	.word	0x0800b188
 8001234:	200001f4 	.word	0x200001f4

08001238 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 800123e:	483c      	ldr	r0, [pc, #240]	@ (8001330 <mpu9250_init+0xf8>)
 8001240:	f7ff fed4 	bl	8000fec <send_bluetooth_message>
    HAL_Delay(200);
 8001244:	20c8      	movs	r0, #200	@ 0xc8
 8001246:	f002 fc3b 	bl	8003ac0 <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 800124a:	2180      	movs	r1, #128	@ 0x80
 800124c:	206b      	movs	r0, #107	@ 0x6b
 800124e:	f7ff ffb9 	bl	80011c4 <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 8001252:	20fa      	movs	r0, #250	@ 0xfa
 8001254:	f002 fc34 	bl	8003ac0 <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 8001258:	2100      	movs	r1, #0
 800125a:	206b      	movs	r0, #107	@ 0x6b
 800125c:	f7ff ffb2 	bl	80011c4 <mpu9250_write_register>
    HAL_Delay(50);
 8001260:	2032      	movs	r0, #50	@ 0x32
 8001262:	f002 fc2d 	bl	8003ac0 <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 8001266:	2101      	movs	r1, #1
 8001268:	206b      	movs	r0, #107	@ 0x6b
 800126a:	f7ff ffab 	bl	80011c4 <mpu9250_write_register>
    HAL_Delay(50);
 800126e:	2032      	movs	r0, #50	@ 0x32
 8001270:	f002 fc26 	bl	8003ac0 <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 8001274:	2100      	movs	r1, #0
 8001276:	206c      	movs	r0, #108	@ 0x6c
 8001278:	f7ff ffa4 	bl	80011c4 <mpu9250_write_register>
    HAL_Delay(10);
 800127c:	200a      	movs	r0, #10
 800127e:	f002 fc1f 	bl	8003ac0 <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 8001282:	206a      	movs	r0, #106	@ 0x6a
 8001284:	f7ff ff58 	bl	8001138 <mpu9250_read_register>
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4619      	mov	r1, r3
 8001298:	206a      	movs	r0, #106	@ 0x6a
 800129a:	f7ff ff93 	bl	80011c4 <mpu9250_write_register>
     HAL_Delay(10);
 800129e:	200a      	movs	r0, #10
 80012a0:	f002 fc0e 	bl	8003ac0 <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 80012a4:	2104      	movs	r1, #4
 80012a6:	2019      	movs	r0, #25
 80012a8:	f7ff ff8c 	bl	80011c4 <mpu9250_write_register>
    HAL_Delay(10);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f002 fc07 	bl	8003ac0 <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 80012b2:	2102      	movs	r1, #2
 80012b4:	201a      	movs	r0, #26
 80012b6:	f7ff ff85 	bl	80011c4 <mpu9250_write_register>
    HAL_Delay(10);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f002 fc00 	bl	8003ac0 <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 80012c0:	2108      	movs	r1, #8
 80012c2:	201b      	movs	r0, #27
 80012c4:	f7ff ff7e 	bl	80011c4 <mpu9250_write_register>
    HAL_Delay(10);
 80012c8:	200a      	movs	r0, #10
 80012ca:	f002 fbf9 	bl	8003ac0 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 80012ce:	2108      	movs	r1, #8
 80012d0:	201c      	movs	r0, #28
 80012d2:	f7ff ff77 	bl	80011c4 <mpu9250_write_register>
    HAL_Delay(10);
 80012d6:	200a      	movs	r0, #10
 80012d8:	f002 fbf2 	bl	8003ac0 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 80012dc:	2102      	movs	r1, #2
 80012de:	201d      	movs	r0, #29
 80012e0:	f7ff ff70 	bl	80011c4 <mpu9250_write_register>
    HAL_Delay(10);
 80012e4:	200a      	movs	r0, #10
 80012e6:	f002 fbeb 	bl	8003ac0 <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 80012ea:	2075      	movs	r0, #117	@ 0x75
 80012ec:	f7ff ff24 	bl	8001138 <mpu9250_read_register>
 80012f0:	4603      	mov	r3, r0
 80012f2:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	4619      	mov	r1, r3
 80012f8:	480e      	ldr	r0, [pc, #56]	@ (8001334 <mpu9250_init+0xfc>)
 80012fa:	f7ff fe8d 	bl	8001018 <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	2b70      	cmp	r3, #112	@ 0x70
 8001302:	d009      	beq.n	8001318 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	4619      	mov	r1, r3
 8001308:	480b      	ldr	r0, [pc, #44]	@ (8001338 <mpu9250_init+0x100>)
 800130a:	f7ff fe85 	bl	8001018 <send_bluetooth_printf>
        mpu9250_initialized=false;
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <mpu9250_init+0x104>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
        return false;
 8001314:	2300      	movs	r3, #0
 8001316:	e006      	b.n	8001326 <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8001318:	4809      	ldr	r0, [pc, #36]	@ (8001340 <mpu9250_init+0x108>)
 800131a:	f7ff fe67 	bl	8000fec <send_bluetooth_message>
    mpu9250_initialized=true;
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <mpu9250_init+0x104>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
    return true;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	0800b1b0 	.word	0x0800b1b0
 8001334:	0800b1dc 	.word	0x0800b1dc
 8001338:	0800b1f0 	.word	0x0800b1f0
 800133c:	200001f4 	.word	0x200001f4
 8001340:	0800b218 	.word	0x0800b218

08001344 <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 8001344:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001348:	b088      	sub	sp, #32
 800134a:	af04      	add	r7, sp, #16
    if (!mpu9250_initialized) {
 800134c:	4b4e      	ldr	r3, [pc, #312]	@ (8001488 <mpu9250_calibrate_bias+0x144>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	f083 0301 	eor.w	r3, r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <mpu9250_calibrate_bias+0x1e>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 800135a:	484c      	ldr	r0, [pc, #304]	@ (800148c <mpu9250_calibrate_bias+0x148>)
 800135c:	f7ff fe46 	bl	8000fec <send_bluetooth_message>
        return;
 8001360:	e08e      	b.n	8001480 <mpu9250_calibrate_bias+0x13c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 8001362:	484b      	ldr	r0, [pc, #300]	@ (8001490 <mpu9250_calibrate_bias+0x14c>)
 8001364:	f7ff fe42 	bl	8000fec <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 1000;
 8001368:	4b4a      	ldr	r3, [pc, #296]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 800136a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800136e:	611a      	str	r2, [r3, #16]
    float sum_x = 0, sum_y = 0, sum_z = 0;
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	e02e      	b.n	80013e6 <mpu9250_calibrate_bias+0xa2>
        mpu9250_read_gyro();
 8001388:	f000 f896 	bl	80014b8 <mpu9250_read_gyro>
        sum_x += gyro.gyro_x;
 800138c:	4b42      	ldr	r3, [pc, #264]	@ (8001498 <mpu9250_calibrate_bias+0x154>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139a:	ed97 7a03 	vldr	s14, [r7, #12]
 800139e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a2:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_y += gyro.gyro_y;
 80013a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001498 <mpu9250_calibrate_bias+0x154>)
 80013a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80013b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013bc:	edc7 7a02 	vstr	s15, [r7, #8]
        sum_z += gyro.gyro_z;
 80013c0:	4b35      	ldr	r3, [pc, #212]	@ (8001498 <mpu9250_calibrate_bias+0x154>)
 80013c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80013d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d6:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 80013da:	2003      	movs	r0, #3
 80013dc:	f002 fb70 	bl	8003ac0 <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8cb      	bhi.n	8001388 <mpu9250_calibrate_bias+0x44>
    }

    enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
 80013f0:	4b28      	ldr	r3, [pc, #160]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001404:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 8001406:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
 800140a:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001416:	edd7 6a02 	vldr	s13, [r7, #8]
 800141a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 8001420:	edc3 7a01 	vstr	s15, [r3, #4]
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001430:	edd7 6a01 	vldr	s13, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 800143a:	edc3 7a02 	vstr	s15, [r3, #8]
    enhanced_gyro.calibrated = true;
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 8001440:	2201      	movs	r2, #1
 8001442:	731a      	strb	r2, [r3, #12]

    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 8001446:	681b      	ldr	r3, [r3, #0]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f885 	bl	8000558 <__aeabi_f2d>
 800144e:	4680      	mov	r8, r0
 8001450:	4689      	mov	r9, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 8001454:	685b      	ldr	r3, [r3, #4]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f87e 	bl	8000558 <__aeabi_f2d>
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <mpu9250_calibrate_bias+0x150>)
 8001462:	689b      	ldr	r3, [r3, #8]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f877 	bl	8000558 <__aeabi_f2d>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001472:	e9cd 4500 	strd	r4, r5, [sp]
 8001476:	4642      	mov	r2, r8
 8001478:	464b      	mov	r3, r9
 800147a:	4808      	ldr	r0, [pc, #32]	@ (800149c <mpu9250_calibrate_bias+0x158>)
 800147c:	f7ff fdcc 	bl	8001018 <send_bluetooth_printf>
}
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001488:	200001f4 	.word	0x200001f4
 800148c:	0800b22c 	.word	0x0800b22c
 8001490:	0800b258 	.word	0x0800b258
 8001494:	200001f8 	.word	0x200001f8
 8001498:	20001438 	.word	0x20001438
 800149c:	0800b28c 	.word	0x0800b28c

080014a0 <mpu9250_is_initialized>:

/**
 * @brief Check if MPU9250 is initialized - NEW FUNCTION
 */
bool mpu9250_is_initialized(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
    return mpu9250_initialized;
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <mpu9250_is_initialized+0x14>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200001f4 	.word	0x200001f4

080014b8 <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 80014be:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <mpu9250_read_gyro+0xc4>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	f083 0301 	eor.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 80014cc:	482c      	ldr	r0, [pc, #176]	@ (8001580 <mpu9250_read_gyro+0xc8>)
 80014ce:	f7ff fd8d 	bl	8000fec <send_bluetooth_message>
        return;
 80014d2:	e050      	b.n	8001576 <mpu9250_read_gyro+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 80014d4:	23c3      	movs	r3, #195	@ 0xc3
 80014d6:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014de:	4829      	ldr	r0, [pc, #164]	@ (8001584 <mpu9250_read_gyro+0xcc>)
 80014e0:	f003 fa2c 	bl	800493c <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80014e4:	1df9      	adds	r1, r7, #7
 80014e6:	2364      	movs	r3, #100	@ 0x64
 80014e8:	2201      	movs	r2, #1
 80014ea:	4827      	ldr	r0, [pc, #156]	@ (8001588 <mpu9250_read_gyro+0xd0>)
 80014ec:	f003 ff53 	bl	8005396 <HAL_SPI_Transmit>
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001500:	4820      	ldr	r0, [pc, #128]	@ (8001584 <mpu9250_read_gyro+0xcc>)
 8001502:	f003 fa1b 	bl	800493c <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 8001506:	4821      	ldr	r0, [pc, #132]	@ (800158c <mpu9250_read_gyro+0xd4>)
 8001508:	f7ff fd70 	bl	8000fec <send_bluetooth_message>
        return;
 800150c:	e033      	b.n	8001576 <mpu9250_read_gyro+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 800150e:	f107 0108 	add.w	r1, r7, #8
 8001512:	2364      	movs	r3, #100	@ 0x64
 8001514:	2206      	movs	r2, #6
 8001516:	481c      	ldr	r0, [pc, #112]	@ (8001588 <mpu9250_read_gyro+0xd0>)
 8001518:	f004 f881 	bl	800561e <HAL_SPI_Receive>
 800151c:	4603      	mov	r3, r0
 800151e:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001526:	4817      	ldr	r0, [pc, #92]	@ (8001584 <mpu9250_read_gyro+0xcc>)
 8001528:	f003 fa08 	bl	800493c <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 8001532:	4817      	ldr	r0, [pc, #92]	@ (8001590 <mpu9250_read_gyro+0xd8>)
 8001534:	f7ff fd5a 	bl	8000fec <send_bluetooth_message>
        return;
 8001538:	e01d      	b.n	8001576 <mpu9250_read_gyro+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 800153a:	7a3b      	ldrb	r3, [r7, #8]
 800153c:	b21b      	sxth	r3, r3
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	7a7b      	ldrb	r3, [r7, #9]
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <mpu9250_read_gyro+0xdc>)
 800154c:	801a      	strh	r2, [r3, #0]
    gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 800154e:	7abb      	ldrb	r3, [r7, #10]
 8001550:	b21b      	sxth	r3, r3
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <mpu9250_read_gyro+0xdc>)
 8001560:	805a      	strh	r2, [r3, #2]
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001562:	7b3b      	ldrb	r3, [r7, #12]
 8001564:	b21b      	sxth	r3, r3
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7b7b      	ldrb	r3, [r7, #13]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21a      	sxth	r2, r3
 8001572:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <mpu9250_read_gyro+0xdc>)
 8001574:	809a      	strh	r2, [r3, #4]
}
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200001f4 	.word	0x200001f4
 8001580:	0800b2bc 	.word	0x0800b2bc
 8001584:	40020400 	.word	0x40020400
 8001588:	20000254 	.word	0x20000254
 800158c:	0800b2f0 	.word	0x0800b2f0
 8001590:	0800b314 	.word	0x0800b314
 8001594:	20001438 	.word	0x20001438

08001598 <mpu9250_read_accel>:

/**
 * @brief Read raw accelerometer data - FIXED with error checking
 */
void mpu9250_read_accel(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 800159e:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <mpu9250_read_accel+0xc4>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	f083 0301 	eor.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <mpu9250_read_accel+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read accel\r\n");
 80015ac:	482c      	ldr	r0, [pc, #176]	@ (8001660 <mpu9250_read_accel+0xc8>)
 80015ae:	f7ff fd1d 	bl	8000fec <send_bluetooth_message>
        return;
 80015b2:	e050      	b.n	8001656 <mpu9250_read_accel+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_ACCEL_XOUT_H | 0x80; // Set read bit
 80015b4:	23bb      	movs	r3, #187	@ 0xbb
 80015b6:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015be:	4829      	ldr	r0, [pc, #164]	@ (8001664 <mpu9250_read_accel+0xcc>)
 80015c0:	f003 f9bc 	bl	800493c <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80015c4:	1df9      	adds	r1, r7, #7
 80015c6:	2364      	movs	r3, #100	@ 0x64
 80015c8:	2201      	movs	r2, #1
 80015ca:	4827      	ldr	r0, [pc, #156]	@ (8001668 <mpu9250_read_accel+0xd0>)
 80015cc:	f003 fee3 	bl	8005396 <HAL_SPI_Transmit>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <mpu9250_read_accel+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e0:	4820      	ldr	r0, [pc, #128]	@ (8001664 <mpu9250_read_accel+0xcc>)
 80015e2:	f003 f9ab 	bl	800493c <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in accel read\r\n");
 80015e6:	4821      	ldr	r0, [pc, #132]	@ (800166c <mpu9250_read_accel+0xd4>)
 80015e8:	f7ff fd00 	bl	8000fec <send_bluetooth_message>
        return;
 80015ec:	e033      	b.n	8001656 <mpu9250_read_accel+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 80015ee:	f107 0108 	add.w	r1, r7, #8
 80015f2:	2364      	movs	r3, #100	@ 0x64
 80015f4:	2206      	movs	r2, #6
 80015f6:	481c      	ldr	r0, [pc, #112]	@ (8001668 <mpu9250_read_accel+0xd0>)
 80015f8:	f004 f811 	bl	800561e <HAL_SPI_Receive>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001606:	4817      	ldr	r0, [pc, #92]	@ (8001664 <mpu9250_read_accel+0xcc>)
 8001608:	f003 f998 	bl	800493c <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <mpu9250_read_accel+0x82>
        send_bluetooth_message("SPI receive error in accel read\r\n");
 8001612:	4817      	ldr	r0, [pc, #92]	@ (8001670 <mpu9250_read_accel+0xd8>)
 8001614:	f7ff fcea 	bl	8000fec <send_bluetooth_message>
        return;
 8001618:	e01d      	b.n	8001656 <mpu9250_read_accel+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.accel_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 800161a:	7a3b      	ldrb	r3, [r7, #8]
 800161c:	b21b      	sxth	r3, r3
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	7a7b      	ldrb	r3, [r7, #9]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <mpu9250_read_accel+0xdc>)
 800162c:	80da      	strh	r2, [r3, #6]
    gyro.accel_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 800162e:	7abb      	ldrb	r3, [r7, #10]
 8001630:	b21b      	sxth	r3, r3
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	7afb      	ldrb	r3, [r7, #11]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <mpu9250_read_accel+0xdc>)
 8001640:	811a      	strh	r2, [r3, #8]
    gyro.accel_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001642:	7b3b      	ldrb	r3, [r7, #12]
 8001644:	b21b      	sxth	r3, r3
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	7b7b      	ldrb	r3, [r7, #13]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <mpu9250_read_accel+0xdc>)
 8001654:	815a      	strh	r2, [r3, #10]
}
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200001f4 	.word	0x200001f4
 8001660:	0800b338 	.word	0x0800b338
 8001664:	40020400 	.word	0x40020400
 8001668:	20000254 	.word	0x20000254
 800166c:	0800b370 	.word	0x0800b370
 8001670:	0800b394 	.word	0x0800b394
 8001674:	20001438 	.word	0x20001438

08001678 <mpu9250_read_all>:

/**
 * @brief Read all IMU data
 */
void mpu9250_read_all(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    mpu9250_read_accel();
 800167c:	f7ff ff8c 	bl	8001598 <mpu9250_read_accel>
    mpu9250_read_gyro();
 8001680:	f7ff ff1a 	bl	80014b8 <mpu9250_read_gyro>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <mpu9250_get_gyro_z_dps>:

/**
 * @brief Get gyro Z-axis in degrees per second
 */
float mpu9250_get_gyro_z_dps(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
    // ±500 dps range, 16-bit resolution
    // Sensitivity: 65.5 LSB/(dps)

    return (float)gyro.gyro_z / 65.5f;
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <mpu9250_get_gyro_z_dps+0x2c>)
 800168e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80016b8 <mpu9250_get_gyro_z_dps+0x30>
 800169e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016a2:	eef0 7a66 	vmov.f32	s15, s13
}
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20001438 	.word	0x20001438
 80016b8:	42830000 	.word	0x42830000

080016bc <mpu9250_send_status>:

/**
 * @brief Get MPU9250 status for debugging - NEW FUNCTION
 */
void mpu9250_send_status(void)
{
 80016bc:	b5b0      	push	{r4, r5, r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af02      	add	r7, sp, #8
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
                         mpu9250_initialized ? "OK" : "FAILED");
 80016c2:	4b2e      	ldr	r3, [pc, #184]	@ (800177c <mpu9250_send_status+0xc0>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <mpu9250_send_status+0x12>
 80016ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <mpu9250_send_status+0xc4>)
 80016cc:	e000      	b.n	80016d0 <mpu9250_send_status+0x14>
 80016ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001784 <mpu9250_send_status+0xc8>)
 80016d0:	4619      	mov	r1, r3
 80016d2:	482d      	ldr	r0, [pc, #180]	@ (8001788 <mpu9250_send_status+0xcc>)
 80016d4:	f7ff fca0 	bl	8001018 <send_bluetooth_printf>

    if (mpu9250_initialized) {
 80016d8:	4b28      	ldr	r3, [pc, #160]	@ (800177c <mpu9250_send_status+0xc0>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d048      	beq.n	8001772 <mpu9250_send_status+0xb6>
        uint8_t who_am_i = mpu9250_read_register(MPU9250_WHO_AM_I);
 80016e0:	2075      	movs	r0, #117	@ 0x75
 80016e2:	f7ff fd29 	bl	8001138 <mpu9250_read_register>
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
        uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 80016ea:	206a      	movs	r0, #106	@ 0x6a
 80016ec:	f7ff fd24 	bl	8001138 <mpu9250_read_register>
 80016f0:	4603      	mov	r3, r0
 80016f2:	71bb      	strb	r3, [r7, #6]
        uint8_t pwr_mgmt = mpu9250_read_register(MPU9250_PWR_MGMT_1);
 80016f4:	206b      	movs	r0, #107	@ 0x6b
 80016f6:	f7ff fd1f 	bl	8001138 <mpu9250_read_register>
 80016fa:	4603      	mov	r3, r0
 80016fc:	717b      	strb	r3, [r7, #5]

        send_bluetooth_printf("WHO_AM_I:0x%02X USER_CTRL:0x%02X PWR_MGMT:0x%02X\r\n",
 80016fe:	79f9      	ldrb	r1, [r7, #7]
 8001700:	79ba      	ldrb	r2, [r7, #6]
 8001702:	797b      	ldrb	r3, [r7, #5]
 8001704:	4821      	ldr	r0, [pc, #132]	@ (800178c <mpu9250_send_status+0xd0>)
 8001706:	f7ff fc87 	bl	8001018 <send_bluetooth_printf>
                             who_am_i, user_ctrl, pwr_mgmt);

        if (user_ctrl & 0x10) {
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <mpu9250_send_status+0x60>
            send_bluetooth_message("I2C disabled: ✅\r\n");
 8001714:	481e      	ldr	r0, [pc, #120]	@ (8001790 <mpu9250_send_status+0xd4>)
 8001716:	f7ff fc69 	bl	8000fec <send_bluetooth_message>
 800171a:	e002      	b.n	8001722 <mpu9250_send_status+0x66>
        } else {
            send_bluetooth_message("I2C disabled: ❌\r\n");
 800171c:	481d      	ldr	r0, [pc, #116]	@ (8001794 <mpu9250_send_status+0xd8>)
 800171e:	f7ff fc65 	bl	8000fec <send_bluetooth_message>
        }

        // Read current sensor values
        mpu9250_read_all();
 8001722:	f7ff ffa9 	bl	8001678 <mpu9250_read_all>
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <mpu9250_send_status+0xdc>)
 8001728:	f9b3 3000 	ldrsh.w	r3, [r3]
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 800172c:	461c      	mov	r4, r3
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 800172e:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <mpu9250_send_status+0xdc>)
 8001730:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 8001734:	461d      	mov	r5, r3
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 8001736:	f7ff ffa7 	bl	8001688 <mpu9250_get_gyro_z_dps>
 800173a:	ee10 3a10 	vmov	r3, s0
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff0a 	bl	8000558 <__aeabi_f2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	e9cd 2300 	strd	r2, r3, [sp]
 800174c:	462a      	mov	r2, r5
 800174e:	4621      	mov	r1, r4
 8001750:	4812      	ldr	r0, [pc, #72]	@ (800179c <mpu9250_send_status+0xe0>)
 8001752:	f7ff fc61 	bl	8001018 <send_bluetooth_printf>
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <mpu9250_send_status+0xdc>)
 8001758:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 800175c:	4619      	mov	r1, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <mpu9250_send_status+0xdc>)
 8001760:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001764:	461a      	mov	r2, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001766:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <mpu9250_send_status+0xdc>)
 8001768:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 800176c:	480c      	ldr	r0, [pc, #48]	@ (80017a0 <mpu9250_send_status+0xe4>)
 800176e:	f7ff fc53 	bl	8001018 <send_bluetooth_printf>
    }
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bdb0      	pop	{r4, r5, r7, pc}
 800177a:	bf00      	nop
 800177c:	200001f4 	.word	0x200001f4
 8001780:	0800b3b8 	.word	0x0800b3b8
 8001784:	0800b3bc 	.word	0x0800b3bc
 8001788:	0800b3c4 	.word	0x0800b3c4
 800178c:	0800b3e0 	.word	0x0800b3e0
 8001790:	0800b414 	.word	0x0800b414
 8001794:	0800b428 	.word	0x0800b428
 8001798:	20001438 	.word	0x20001438
 800179c:	0800b43c 	.word	0x0800b43c
 80017a0:	0800b458 	.word	0x0800b458

080017a4 <initialize_hardware_systems>:
/* USER CODE BEGIN 0 */

/**
 * @brief Initialize all hardware systems and perform diagnostics
 */
static void initialize_hardware_systems(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
    //send_bluetooth_message("\r\n" "="*60 "\r\n");
    send_bluetooth_message("🤖 CHAMPIONSHIP MICROMOUSE INITIALIZATION 🤖\r\n");
 80017a8:	4828      	ldr	r0, [pc, #160]	@ (800184c <initialize_hardware_systems+0xa8>)
 80017aa:	f7ff fc1f 	bl	8000fec <send_bluetooth_message>
    //send_bluetooth_message("="*60 "\r\n");

    // Initialize PWM for motors
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6 (MOTOR_IN1)
 80017ae:	2100      	movs	r1, #0
 80017b0:	4827      	ldr	r0, [pc, #156]	@ (8001850 <initialize_hardware_systems+0xac>)
 80017b2:	f004 fbe1 	bl	8005f78 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // PA7 (MOTOR_IN2)
 80017b6:	2104      	movs	r1, #4
 80017b8:	4825      	ldr	r0, [pc, #148]	@ (8001850 <initialize_hardware_systems+0xac>)
 80017ba:	f004 fbdd 	bl	8005f78 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // PB0 (MOTOR_IN3)
 80017be:	2108      	movs	r1, #8
 80017c0:	4823      	ldr	r0, [pc, #140]	@ (8001850 <initialize_hardware_systems+0xac>)
 80017c2:	f004 fbd9 	bl	8005f78 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PB1 (MOTOR_IN4)
 80017c6:	210c      	movs	r1, #12
 80017c8:	4821      	ldr	r0, [pc, #132]	@ (8001850 <initialize_hardware_systems+0xac>)
 80017ca:	f004 fbd5 	bl	8005f78 <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET); // Enable DRV8833
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017d4:	481f      	ldr	r0, [pc, #124]	@ (8001854 <initialize_hardware_systems+0xb0>)
 80017d6:	f003 f8b1 	bl	800493c <HAL_GPIO_WritePin>

    // Verify ADC GPIO configuration
    verify_adc_gpio_configuration();
 80017da:	f000 fce7 	bl	80021ac <verify_adc_gpio_configuration>
    adc_system_diagnostics();
 80017de:	f001 f893 	bl	8002908 <adc_system_diagnostics>

    // Initialize and test MPU9250 gyroscope
    if (mpu9250_init()) {
 80017e2:	f7ff fd29 	bl	8001238 <mpu9250_init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00f      	beq.n	800180c <initialize_hardware_systems+0x68>
        send_bluetooth_message("✅ MPU9250 gyroscope initialized successfully\r\n");
 80017ec:	481a      	ldr	r0, [pc, #104]	@ (8001858 <initialize_hardware_systems+0xb4>)
 80017ee:	f7ff fbfd 	bl	8000fec <send_bluetooth_message>
        send_bluetooth_message("⚠️ KEEP ROBOT STATIONARY during gyro calibration!\r\n");
 80017f2:	481a      	ldr	r0, [pc, #104]	@ (800185c <initialize_hardware_systems+0xb8>)
 80017f4:	f7ff fbfa 	bl	8000fec <send_bluetooth_message>
        HAL_Delay(2000);
 80017f8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017fc:	f002 f960 	bl	8003ac0 <HAL_Delay>
        mpu9250_calibrate_bias();
 8001800:	f7ff fda0 	bl	8001344 <mpu9250_calibrate_bias>
        send_bluetooth_message("✅ Gyro calibration complete\r\n");
 8001804:	4816      	ldr	r0, [pc, #88]	@ (8001860 <initialize_hardware_systems+0xbc>)
 8001806:	f7ff fbf1 	bl	8000fec <send_bluetooth_message>
 800180a:	e002      	b.n	8001812 <initialize_hardware_systems+0x6e>
    } else {
        send_bluetooth_message("⚠️ Gyro initialization failed - using basic movement\r\n");
 800180c:	4815      	ldr	r0, [pc, #84]	@ (8001864 <initialize_hardware_systems+0xc0>)
 800180e:	f7ff fbed 	bl	8000fec <send_bluetooth_message>
    }

    // Initialize encoders
    start_encoders();
 8001812:	f000 fe43 	bl	800249c <start_encoders>
    HAL_Delay(100);
 8001816:	2064      	movs	r0, #100	@ 0x64
 8001818:	f002 f952 	bl	8003ac0 <HAL_Delay>

    // Test encoder functionality
    if (get_left_encoder_total() == 0 && get_right_encoder_total() == 0) {
 800181c:	f000 fe2a 	bl	8002474 <get_left_encoder_total>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d108      	bne.n	8001838 <initialize_hardware_systems+0x94>
 8001826:	f000 fe2f 	bl	8002488 <get_right_encoder_total>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d103      	bne.n	8001838 <initialize_hardware_systems+0x94>
        send_bluetooth_message("⚠️ WARNING: Encoders may not be working properly\r\n");
 8001830:	480d      	ldr	r0, [pc, #52]	@ (8001868 <initialize_hardware_systems+0xc4>)
 8001832:	f7ff fbdb 	bl	8000fec <send_bluetooth_message>
 8001836:	e002      	b.n	800183e <initialize_hardware_systems+0x9a>
    } else {
        send_bluetooth_message("✅ Encoders initialized and responding\r\n");
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <initialize_hardware_systems+0xc8>)
 800183a:	f7ff fbd7 	bl	8000fec <send_bluetooth_message>
    }

    // Initialize maze exploration system
    initialize_maze_exploration();
 800183e:	f000 fd05 	bl	800224c <initialize_maze_exploration>

    send_bluetooth_message("✅ All systems initialized successfully!\r\n");
 8001842:	480b      	ldr	r0, [pc, #44]	@ (8001870 <initialize_hardware_systems+0xcc>)
 8001844:	f7ff fbd2 	bl	8000fec <send_bluetooth_message>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	0800b470 	.word	0x0800b470
 8001850:	2000033c 	.word	0x2000033c
 8001854:	40020800 	.word	0x40020800
 8001858:	0800b4a4 	.word	0x0800b4a4
 800185c:	0800b4d8 	.word	0x0800b4d8
 8001860:	0800b510 	.word	0x0800b510
 8001864:	0800b530 	.word	0x0800b530
 8001868:	0800b56c 	.word	0x0800b56c
 800186c:	0800b5a4 	.word	0x0800b5a4
 8001870:	0800b5d0 	.word	0x0800b5d0

08001874 <run_system_diagnostics>:

/**
 * @brief Run comprehensive system diagnostics
 */
static void run_system_diagnostics(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🔧 SYSTEM DIAGNOSTICS 🔧\r\n");
 8001878:	4821      	ldr	r0, [pc, #132]	@ (8001900 <run_system_diagnostics+0x8c>)
 800187a:	f7ff fbb7 	bl	8000fec <send_bluetooth_message>

    // Test sensors
    update_sensors();
 800187e:	f000 ff7b 	bl	8002778 <update_sensors>
    if (sensors.battery == 0 && sensors.front_left == 0 &&
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <run_system_diagnostics+0x90>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d113      	bne.n	80018b2 <run_system_diagnostics+0x3e>
 800188a:	4b1e      	ldr	r3, [pc, #120]	@ (8001904 <run_system_diagnostics+0x90>)
 800188c:	891b      	ldrh	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <run_system_diagnostics+0x3e>
        sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <run_system_diagnostics+0x90>)
 8001894:	885b      	ldrh	r3, [r3, #2]
    if (sensors.battery == 0 && sensors.front_left == 0 &&
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10b      	bne.n	80018b2 <run_system_diagnostics+0x3e>
        sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 800189a:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <run_system_diagnostics+0x90>)
 800189c:	88db      	ldrh	r3, [r3, #6]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d107      	bne.n	80018b2 <run_system_diagnostics+0x3e>
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <run_system_diagnostics+0x90>)
 80018a4:	889b      	ldrh	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d103      	bne.n	80018b2 <run_system_diagnostics+0x3e>
        send_bluetooth_message("❌ CRITICAL: All sensors reading zero - check connections!\r\n");
 80018aa:	4817      	ldr	r0, [pc, #92]	@ (8001908 <run_system_diagnostics+0x94>)
 80018ac:	f7ff fb9e 	bl	8000fec <send_bluetooth_message>
 80018b0:	e004      	b.n	80018bc <run_system_diagnostics+0x48>
    } else {
        send_bluetooth_message("✅ Sensors responding normally\r\n");
 80018b2:	4816      	ldr	r0, [pc, #88]	@ (800190c <run_system_diagnostics+0x98>)
 80018b4:	f7ff fb9a 	bl	8000fec <send_bluetooth_message>
        send_sensor_data();
 80018b8:	f7ff fbd4 	bl	8001064 <send_sensor_data>
    }

    // Test battery
    send_battery_status();
 80018bc:	f7ff fc00 	bl	80010c0 <send_battery_status>

    // Test gyro if available
    if (mpu9250_is_initialized()) {
 80018c0:	f7ff fdee 	bl	80014a0 <mpu9250_is_initialized>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <run_system_diagnostics+0x5a>
        mpu9250_send_status();
 80018ca:	f7ff fef7 	bl	80016bc <mpu9250_send_status>
    }

    // Test encoders
    send_encoder_status();
 80018ce:	f000 fe21 	bl	8002514 <send_encoder_status>

    // System health check
    if (system_health_check()) {
 80018d2:	f002 f817 	bl	8003904 <system_health_check>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <run_system_diagnostics+0x76>
        send_bluetooth_message("✅ System health check PASSED\r\n");
 80018dc:	480c      	ldr	r0, [pc, #48]	@ (8001910 <run_system_diagnostics+0x9c>)
 80018de:	f7ff fb85 	bl	8000fec <send_bluetooth_message>
        system_ready = true;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <run_system_diagnostics+0xa0>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e005      	b.n	80018f6 <run_system_diagnostics+0x82>
    } else {
        send_bluetooth_message("⚠️ System health check FAILED - check warnings above\r\n");
 80018ea:	480b      	ldr	r0, [pc, #44]	@ (8001918 <run_system_diagnostics+0xa4>)
 80018ec:	f7ff fb7e 	bl	8000fec <send_bluetooth_message>
        system_ready = false;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <run_system_diagnostics+0xa0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
    }

    send_bluetooth_message("🔧 Diagnostics complete!\r\n");
 80018f6:	4809      	ldr	r0, [pc, #36]	@ (800191c <run_system_diagnostics+0xa8>)
 80018f8:	f7ff fb78 	bl	8000fec <send_bluetooth_message>
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	0800b5fc 	.word	0x0800b5fc
 8001904:	20001428 	.word	0x20001428
 8001908:	0800b620 	.word	0x0800b620
 800190c:	0800b660 	.word	0x0800b660
 8001910:	0800b684 	.word	0x0800b684
 8001914:	2000145e 	.word	0x2000145e
 8001918:	0800b6a8 	.word	0x0800b6a8
 800191c:	0800b6e4 	.word	0x0800b6e4

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001926:	f002 f859 	bl	80039dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192a:	f000 f863 	bl	80019f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192e:	f000 fb5b 	bl	8001fe8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001932:	f000 f8c7 	bl	8001ac4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001936:	f000 f917 	bl	8001b68 <MX_SPI2_Init>
  MX_TIM1_Init();
 800193a:	f000 f94b 	bl	8001bd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800193e:	f000 f9e9 	bl	8001d14 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001942:	f000 fad3 	bl	8001eec <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001946:	f000 fb25 	bl	8001f94 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 800194a:	f000 fa37 	bl	8001dbc <MX_TIM3_Init>


  // main.c — after SystemClock_Config();


  dwt_delay_init(HAL_RCC_GetHCLKFreq());
 800194e:	f003 fc65 	bl	800521c <HAL_RCC_GetHCLKFreq>
 8001952:	4603      	mov	r3, r0
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fe61 	bl	800261c <dwt_delay_init>


  /* USER CODE BEGIN 2 */
  // Initialize all hardware systems
  initialize_hardware_systems();
 800195a:	f7ff ff23 	bl	80017a4 <initialize_hardware_systems>

  // Run system diagnostics
  run_system_diagnostics();
 800195e:	f7ff ff89 	bl	8001874 <run_system_diagnostics>

  // Play startup sequence
  play_startup_tone();
 8001962:	f7ff fb0d 	bl	8000f80 <play_startup_tone>
  led_sequence_startup();
 8001966:	f001 ffab 	bl	80038c0 <led_sequence_startup>

  // Send startup message
  send_bluetooth_message("\r\n🎮 MICROMOUSE CONTROL READY 🎮\r\n");
 800196a:	481a      	ldr	r0, [pc, #104]	@ (80019d4 <main+0xb4>)
 800196c:	f7ff fb3e 	bl	8000fec <send_bluetooth_message>
  send_bluetooth_message("LEFT button: Start exploration\r\n");
 8001970:	4819      	ldr	r0, [pc, #100]	@ (80019d8 <main+0xb8>)
 8001972:	f7ff fb3b 	bl	8000fec <send_bluetooth_message>
  send_bluetooth_message("RIGHT button: Status/Emergency stop\r\n");
 8001976:	4819      	ldr	r0, [pc, #100]	@ (80019dc <main+0xbc>)
 8001978:	f7ff fb38 	bl	8000fec <send_bluetooth_message>
  send_bluetooth_message("Waiting for user input...\r\n");
 800197c:	4818      	ldr	r0, [pc, #96]	@ (80019e0 <main+0xc0>)
 800197e:	f7ff fb35 	bl	8000fec <send_bluetooth_message>

    // Initial status
  last_status_time = HAL_GetTick();
 8001982:	f002 f891 	bl	8003aa8 <HAL_GetTick>
 8001986:	4603      	mov	r3, r0
 8001988:	4a16      	ldr	r2, [pc, #88]	@ (80019e4 <main+0xc4>)
 800198a:	6013      	str	r3, [r2, #0]
  last_blink_time = HAL_GetTick();
 800198c:	f002 f88c 	bl	8003aa8 <HAL_GetTick>
 8001990:	4603      	mov	r3, r0
 8001992:	4a15      	ldr	r2, [pc, #84]	@ (80019e8 <main+0xc8>)
 8001994:	6013      	str	r3, [r2, #0]


  /* Initialize movement system */

  // get ADC Values//////////////////////////////////////////////////////
  calibrate_sensors();
 8001996:	f001 f86d 	bl	8002a74 <calibrate_sensors>
  while(1){
	  update_sensors();
 800199a:	f000 feed 	bl	8002778 <update_sensors>
	  send_bluetooth_printf("FL:%u FR:%u SL:%u SR:%u | Batt:%u\r\n",
	                          sensors.front_left, sensors.front_right,
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <main+0xcc>)
 80019a0:	891b      	ldrh	r3, [r3, #8]
	  send_bluetooth_printf("FL:%u FR:%u SL:%u SR:%u | Batt:%u\r\n",
 80019a2:	4619      	mov	r1, r3
	                          sensors.front_left, sensors.front_right,
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <main+0xcc>)
 80019a6:	885b      	ldrh	r3, [r3, #2]
	  send_bluetooth_printf("FL:%u FR:%u SL:%u SR:%u | Batt:%u\r\n",
 80019a8:	4618      	mov	r0, r3
	                          sensors.side_left, sensors.side_right,
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <main+0xcc>)
 80019ac:	88db      	ldrh	r3, [r3, #6]
	  send_bluetooth_printf("FL:%u FR:%u SL:%u SR:%u | Batt:%u\r\n",
 80019ae:	461c      	mov	r4, r3
	                          sensors.side_left, sensors.side_right,
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <main+0xcc>)
 80019b2:	889b      	ldrh	r3, [r3, #4]
	  send_bluetooth_printf("FL:%u FR:%u SL:%u SR:%u | Batt:%u\r\n",
 80019b4:	461a      	mov	r2, r3
	                          sensors.battery);
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <main+0xcc>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
	  send_bluetooth_printf("FL:%u FR:%u SL:%u SR:%u | Batt:%u\r\n",
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	9200      	str	r2, [sp, #0]
 80019be:	4623      	mov	r3, r4
 80019c0:	4602      	mov	r2, r0
 80019c2:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <main+0xd0>)
 80019c4:	f7ff fb28 	bl	8001018 <send_bluetooth_printf>

	  HAL_Delay(500);
 80019c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019cc:	f002 f878 	bl	8003ac0 <HAL_Delay>
	  update_sensors();
 80019d0:	bf00      	nop
 80019d2:	e7e2      	b.n	800199a <main+0x7a>
 80019d4:	0800b770 	.word	0x0800b770
 80019d8:	0800b798 	.word	0x0800b798
 80019dc:	0800b7bc 	.word	0x0800b7bc
 80019e0:	0800b7e4 	.word	0x0800b7e4
 80019e4:	20001460 	.word	0x20001460
 80019e8:	20001464 	.word	0x20001464
 80019ec:	20001428 	.word	0x20001428
 80019f0:	0800b800 	.word	0x0800b800

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b094      	sub	sp, #80	@ 0x50
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 0320 	add.w	r3, r7, #32
 80019fe:	2230      	movs	r2, #48	@ 0x30
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f007 f902 	bl	8008c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <SystemClock_Config+0xc8>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	4a26      	ldr	r2, [pc, #152]	@ (8001abc <SystemClock_Config+0xc8>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a28:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <SystemClock_Config+0xc8>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <SystemClock_Config+0xcc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a20      	ldr	r2, [pc, #128]	@ (8001ac0 <SystemClock_Config+0xcc>)
 8001a3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <SystemClock_Config+0xcc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a50:	2302      	movs	r3, #2
 8001a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a54:	2301      	movs	r3, #1
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a58:	2310      	movs	r3, #16
 8001a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a64:	2310      	movs	r3, #16
 8001a66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a68:	23a8      	movs	r3, #168	@ 0xa8
 8001a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a70:	2304      	movs	r3, #4
 8001a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 ffab 	bl	80049d4 <HAL_RCC_OscConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a84:	f000 fbce 	bl	8002224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a88:	230f      	movs	r3, #15
 8001a8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fa0d 	bl	8004ec4 <HAL_RCC_ClockConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ab0:	f000 fbb8 	bl	8002224 <Error_Handler>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3750      	adds	r7, #80	@ 0x50
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aca:	463b      	mov	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001ad8:	4a21      	ldr	r2, [pc, #132]	@ (8001b60 <MX_ADC1_Init+0x9c>)
 8001ada:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001ade:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ae2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001afe:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b04:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001b06:	4a17      	ldr	r2, [pc, #92]	@ (8001b64 <MX_ADC1_Init+0xa0>)
 8001b08:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b24:	480d      	ldr	r0, [pc, #52]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001b26:	f001 ffef 	bl	8003b08 <HAL_ADC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b30:	f000 fb78 	bl	8002224 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	@ (8001b5c <MX_ADC1_Init+0x98>)
 8001b46:	f002 f9a3 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b50:	f000 fb68 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000020c 	.word	0x2000020c
 8001b60:	40012000 	.word	0x40012000
 8001b64:	0f000001 	.word	0x0f000001

08001b68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <MX_SPI2_Init+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b9c:	2230      	movs	r2, #48	@ 0x30
 8001b9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001bba:	f003 fb63 	bl	8005284 <HAL_SPI_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bc4:	f000 fb2e 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000254 	.word	0x20000254
 8001bd0:	40003800 	.word	0x40003800

08001bd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b096      	sub	sp, #88	@ 0x58
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2220      	movs	r2, #32
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f006 fffd 	bl	8008c0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c12:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c14:	4a3e      	ldr	r2, [pc, #248]	@ (8001d10 <MX_TIM1_Init+0x13c>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8001c18:	4b3c      	ldr	r3, [pc, #240]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c1a:	2214      	movs	r2, #20
 8001c1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8001c24:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c26:	22c8      	movs	r2, #200	@ 0xc8
 8001c28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2a:	4b38      	ldr	r3, [pc, #224]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c30:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c36:	4b35      	ldr	r3, [pc, #212]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c38:	2280      	movs	r2, #128	@ 0x80
 8001c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c3c:	4833      	ldr	r0, [pc, #204]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c3e:	f004 f8f3 	bl	8005e28 <HAL_TIM_Base_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001c48:	f000 faec 	bl	8002224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c50:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c52:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c56:	4619      	mov	r1, r3
 8001c58:	482c      	ldr	r0, [pc, #176]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c5a:	f004 fd87 	bl	800676c <HAL_TIM_ConfigClockSource>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001c64:	f000 fade 	bl	8002224 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c68:	4828      	ldr	r0, [pc, #160]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c6a:	f004 f92c 	bl	8005ec6 <HAL_TIM_PWM_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001c74:	f000 fad6 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c84:	4619      	mov	r1, r3
 8001c86:	4821      	ldr	r0, [pc, #132]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001c88:	f005 f93c 	bl	8006f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001c92:	f000 fac7 	bl	8002224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c96:	2360      	movs	r3, #96	@ 0x60
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 8001c9a:	2364      	movs	r3, #100	@ 0x64
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4814      	ldr	r0, [pc, #80]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001cbc:	f004 fc94 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001cc6:	f000 faad 	bl	8002224 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4807      	ldr	r0, [pc, #28]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001cee:	f005 f977 	bl	8006fe0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001cf8:	f000 fa94 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cfc:	4803      	ldr	r0, [pc, #12]	@ (8001d0c <MX_TIM1_Init+0x138>)
 8001cfe:	f001 fbc1 	bl	8003484 <HAL_TIM_MspPostInit>

}
 8001d02:	bf00      	nop
 8001d04:	3758      	adds	r7, #88	@ 0x58
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200002ac 	.word	0x200002ac
 8001d10:	40010000 	.word	0x40010000

08001d14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	@ 0x30
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	2224      	movs	r2, #36	@ 0x24
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f006 ff72 	bl	8008c0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d30:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <MX_TIM2_Init+0xa4>)
 8001d32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <MX_TIM2_Init+0xa4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <MX_TIM2_Init+0xa4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_TIM2_Init+0xa4>)
 8001d46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_TIM2_Init+0xa4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <MX_TIM2_Init+0xa4>)
 8001d54:	2280      	movs	r2, #128	@ 0x80
 8001d56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d60:	2301      	movs	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d70:	2301      	movs	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <MX_TIM2_Init+0xa4>)
 8001d84:	f004 fa0c 	bl	80061a0 <HAL_TIM_Encoder_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d8e:	f000 fa49 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	@ (8001db8 <MX_TIM2_Init+0xa4>)
 8001da0:	f005 f8b0 	bl	8006f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001daa:	f000 fa3b 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3730      	adds	r7, #48	@ 0x30
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200002f4 	.word	0x200002f4

08001dbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08e      	sub	sp, #56	@ 0x38
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dec:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001dee:	4a3e      	ldr	r2, [pc, #248]	@ (8001ee8 <MX_TIM3_Init+0x12c>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8001df2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001df4:	2204      	movs	r2, #4
 8001df6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 8001dfe:	4b39      	ldr	r3, [pc, #228]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001e00:	f240 3246 	movw	r2, #838	@ 0x346
 8001e04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e06:	4b37      	ldr	r3, [pc, #220]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001e0e:	2280      	movs	r2, #128	@ 0x80
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e12:	4834      	ldr	r0, [pc, #208]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001e14:	f004 f808 	bl	8005e28 <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e1e:	f000 fa01 	bl	8002224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	482d      	ldr	r0, [pc, #180]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001e30:	f004 fc9c 	bl	800676c <HAL_TIM_ConfigClockSource>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e3a:	f000 f9f3 	bl	8002224 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e3e:	4829      	ldr	r0, [pc, #164]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001e40:	f004 f841 	bl	8005ec6 <HAL_TIM_PWM_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e4a:	f000 f9eb 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e56:	f107 0320 	add.w	r3, r7, #32
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4821      	ldr	r0, [pc, #132]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001e5e:	f005 f851 	bl	8006f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e68:	f000 f9dc 	bl	8002224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6c:	2360      	movs	r3, #96	@ 0x60
 8001e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4818      	ldr	r0, [pc, #96]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001e84:	f004 fbb0 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e8e:	f000 f9c9 	bl	8002224 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2204      	movs	r2, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001e9a:	f004 fba5 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001ea4:	f000 f9be 	bl	8002224 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	2208      	movs	r2, #8
 8001eac:	4619      	mov	r1, r3
 8001eae:	480d      	ldr	r0, [pc, #52]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001eb0:	f004 fb9a 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001eba:	f000 f9b3 	bl	8002224 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	220c      	movs	r2, #12
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4807      	ldr	r0, [pc, #28]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001ec6:	f004 fb8f 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001ed0:	f000 f9a8 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ed4:	4803      	ldr	r0, [pc, #12]	@ (8001ee4 <MX_TIM3_Init+0x128>)
 8001ed6:	f001 fad5 	bl	8003484 <HAL_TIM_MspPostInit>

}
 8001eda:	bf00      	nop
 8001edc:	3738      	adds	r7, #56	@ 0x38
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000033c 	.word	0x2000033c
 8001ee8:	40000400 	.word	0x40000400

08001eec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	@ 0x30
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	2224      	movs	r2, #36	@ 0x24
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f006 fe86 	bl	8008c0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f08:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <MX_TIM4_Init+0xa0>)
 8001f0a:	4a21      	ldr	r2, [pc, #132]	@ (8001f90 <MX_TIM4_Init+0xa4>)
 8001f0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <MX_TIM4_Init+0xa0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <MX_TIM4_Init+0xa0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <MX_TIM4_Init+0xa0>)
 8001f1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <MX_TIM4_Init+0xa0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f28:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <MX_TIM4_Init+0xa0>)
 8001f2a:	2280      	movs	r2, #128	@ 0x80
 8001f2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f36:	2301      	movs	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f46:	2301      	movs	r3, #1
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	4619      	mov	r1, r3
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <MX_TIM4_Init+0xa0>)
 8001f5a:	f004 f921 	bl	80061a0 <HAL_TIM_Encoder_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001f64:	f000 f95e 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <MX_TIM4_Init+0xa0>)
 8001f76:	f004 ffc5 	bl	8006f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f80:	f000 f950 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	3730      	adds	r7, #48	@ 0x30
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000384 	.word	0x20000384
 8001f90:	40000800 	.word	0x40000800

08001f94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <MX_USART6_UART_Init+0x4c>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <MX_USART6_UART_Init+0x50>)
 8001f9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <MX_USART6_UART_Init+0x4c>)
 8001fa0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001fa4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_USART6_UART_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <MX_USART6_UART_Init+0x4c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <MX_USART6_UART_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <MX_USART6_UART_Init+0x4c>)
 8001fba:	220c      	movs	r2, #12
 8001fbc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <MX_USART6_UART_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_USART6_UART_Init+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <MX_USART6_UART_Init+0x4c>)
 8001fcc:	f005 f86e 	bl	80070ac <HAL_UART_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001fd6:	f000 f925 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200003cc 	.word	0x200003cc
 8001fe4:	40011400 	.word	0x40011400

08001fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b4b      	ldr	r3, [pc, #300]	@ (8002130 <MX_GPIO_Init+0x148>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a4a      	ldr	r2, [pc, #296]	@ (8002130 <MX_GPIO_Init+0x148>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b48      	ldr	r3, [pc, #288]	@ (8002130 <MX_GPIO_Init+0x148>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b44      	ldr	r3, [pc, #272]	@ (8002130 <MX_GPIO_Init+0x148>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	4a43      	ldr	r2, [pc, #268]	@ (8002130 <MX_GPIO_Init+0x148>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6313      	str	r3, [r2, #48]	@ 0x30
 800202a:	4b41      	ldr	r3, [pc, #260]	@ (8002130 <MX_GPIO_Init+0x148>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4b3d      	ldr	r3, [pc, #244]	@ (8002130 <MX_GPIO_Init+0x148>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4a3c      	ldr	r2, [pc, #240]	@ (8002130 <MX_GPIO_Init+0x148>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30
 8002046:	4b3a      	ldr	r3, [pc, #232]	@ (8002130 <MX_GPIO_Init+0x148>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002058:	4836      	ldr	r0, [pc, #216]	@ (8002134 <MX_GPIO_Init+0x14c>)
 800205a:	f002 fc6f 	bl	800493c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 800205e:	2200      	movs	r2, #0
 8002060:	f241 3130 	movw	r1, #4912	@ 0x1330
 8002064:	4834      	ldr	r0, [pc, #208]	@ (8002138 <MX_GPIO_Init+0x150>)
 8002066:	f002 fc69 	bl	800493c <HAL_GPIO_WritePin>
                          |EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002070:	4832      	ldr	r0, [pc, #200]	@ (800213c <MX_GPIO_Init+0x154>)
 8002072:	f002 fc63 	bl	800493c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 8002076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800207a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207c:	2301      	movs	r3, #1
 800207e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4619      	mov	r1, r3
 800208e:	4829      	ldr	r0, [pc, #164]	@ (8002134 <MX_GPIO_Init+0x14c>)
 8002090:	f002 fad0 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8002094:	2302      	movs	r3, #2
 8002096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002098:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800209c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	4619      	mov	r1, r3
 80020a8:	4824      	ldr	r0, [pc, #144]	@ (800213c <MX_GPIO_Init+0x154>)
 80020aa:	f002 fac3 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 80020ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4619      	mov	r1, r3
 80020c4:	481c      	ldr	r0, [pc, #112]	@ (8002138 <MX_GPIO_Init+0x150>)
 80020c6:	f002 fab5 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_LEFT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 80020ca:	f241 3330 	movw	r3, #4912	@ 0x1330
 80020ce:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	4619      	mov	r1, r3
 80020e2:	4815      	ldr	r0, [pc, #84]	@ (8002138 <MX_GPIO_Init+0x150>)
 80020e4:	f002 faa6 	bl	8004634 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_RIGHT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin;
 80020e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ee:	2301      	movs	r3, #1
 80020f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4619      	mov	r1, r3
 8002100:	480e      	ldr	r0, [pc, #56]	@ (800213c <MX_GPIO_Init+0x154>)
 8002102:	f002 fa97 	bl	8004634 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2105      	movs	r1, #5
 800210a:	2007      	movs	r0, #7
 800210c:	f002 f9c9 	bl	80044a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002110:	2007      	movs	r0, #7
 8002112:	f002 f9e2 	bl	80044da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2105      	movs	r1, #5
 800211a:	2028      	movs	r0, #40	@ 0x28
 800211c:	f002 f9c1 	bl	80044a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002120:	2028      	movs	r0, #40	@ 0x28
 8002122:	f002 f9da 	bl	80044da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002126:	bf00      	nop
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40020800 	.word	0x40020800
 8002138:	40020400 	.word	0x40020400
 800213c:	40020000 	.word	0x40020000

08002140 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 800214a:	f001 fcad 	bl	8003aa8 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_GPIO_EXTI_Callback+0x58>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2bc8      	cmp	r3, #200	@ 0xc8
 800215a:	d919      	bls.n	8002190 <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d109      	bne.n	8002176 <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 8002162:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 8002168:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 800216e:	480d      	ldr	r0, [pc, #52]	@ (80021a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002170:	f7fe ff3c 	bl	8000fec <send_bluetooth_message>
 8002174:	e009      	b.n	800218a <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217c:	d105      	bne.n	800218a <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 800217e:	4b07      	ldr	r3, [pc, #28]	@ (800219c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002180:	2202      	movs	r2, #2
 8002182:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 8002184:	4808      	ldr	r0, [pc, #32]	@ (80021a8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002186:	f7fe ff31 	bl	8000fec <send_bluetooth_message>
        }
        last_press = current_time;
 800218a:	4a03      	ldr	r2, [pc, #12]	@ (8002198 <HAL_GPIO_EXTI_Callback+0x58>)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6013      	str	r3, [r2, #0]
    }
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20001468 	.word	0x20001468
 800219c:	2000145c 	.word	0x2000145c
 80021a0:	2000145d 	.word	0x2000145d
 80021a4:	0800b824 	.word	0x0800b824
 80021a8:	0800b83c 	.word	0x0800b83c

080021ac <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021c0:	2301      	movs	r3, #1
 80021c2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c4:	2303      	movs	r3, #3
 80021c6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	4812      	ldr	r0, [pc, #72]	@ (800221c <verify_adc_gpio_configuration+0x70>)
 80021d2:	f002 fa2f 	bl	8004634 <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d6:	2304      	movs	r3, #4
 80021d8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	480f      	ldr	r0, [pc, #60]	@ (800221c <verify_adc_gpio_configuration+0x70>)
 80021e0:	f002 fa28 	bl	8004634 <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021e4:	2308      	movs	r3, #8
 80021e6:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	4619      	mov	r1, r3
 80021ec:	480b      	ldr	r0, [pc, #44]	@ (800221c <verify_adc_gpio_configuration+0x70>)
 80021ee:	f002 fa21 	bl	8004634 <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021f2:	2310      	movs	r3, #16
 80021f4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4808      	ldr	r0, [pc, #32]	@ (800221c <verify_adc_gpio_configuration+0x70>)
 80021fc:	f002 fa1a 	bl	8004634 <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002200:	2320      	movs	r3, #32
 8002202:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4804      	ldr	r0, [pc, #16]	@ (800221c <verify_adc_gpio_configuration+0x70>)
 800220a:	f002 fa13 	bl	8004634 <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 800220e:	4804      	ldr	r0, [pc, #16]	@ (8002220 <verify_adc_gpio_configuration+0x74>)
 8002210:	f7fe feec 	bl	8000fec <send_bluetooth_message>
}
 8002214:	bf00      	nop
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40020000 	.word	0x40020000
 8002220:	0800b854 	.word	0x0800b854

08002224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002228:	b672      	cpsid	i
}
 800222a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 800222c:	2110      	movs	r1, #16
 800222e:	4806      	ldr	r0, [pc, #24]	@ (8002248 <Error_Handler+0x24>)
 8002230:	f002 fb9d 	bl	800496e <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8002234:	2120      	movs	r1, #32
 8002236:	4804      	ldr	r0, [pc, #16]	@ (8002248 <Error_Handler+0x24>)
 8002238:	f002 fb99 	bl	800496e <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 800223c:	2064      	movs	r0, #100	@ 0x64
 800223e:	f001 fc3f 	bl	8003ac0 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002242:	bf00      	nop
 8002244:	e7f2      	b.n	800222c <Error_Handler+0x8>
 8002246:	bf00      	nop
 8002248:	40020400 	.word	0x40020400

0800224c <initialize_maze_exploration>:
}

/**
 * @brief Initialize maze for exploration
 */
void initialize_maze_exploration(void) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n=== INITIALIZING MAZE EXPLORATION ===\r\n");
 8002252:	485a      	ldr	r0, [pc, #360]	@ (80023bc <initialize_maze_exploration+0x170>)
 8002254:	f7fe feca 	bl	8000fec <send_bluetooth_message>

    // Initialize maze structure
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e03e      	b.n	80022dc <initialize_maze_exploration+0x90>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	e035      	b.n	80022d0 <initialize_maze_exploration+0x84>
            maze[x][y].distance = MAX_DISTANCE;
 8002264:	4956      	ldr	r1, [pc, #344]	@ (80023c0 <initialize_maze_exploration+0x174>)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	011a      	lsls	r2, r3, #4
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4413      	add	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	440b      	add	r3, r1
 8002272:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002276:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 8002278:	4951      	ldr	r1, [pc, #324]	@ (80023c0 <initialize_maze_exploration+0x174>)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	011a      	lsls	r2, r3, #4
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4413      	add	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	440b      	add	r3, r1
 8002286:	3304      	adds	r3, #4
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 800228c:	494c      	ldr	r1, [pc, #304]	@ (80023c0 <initialize_maze_exploration+0x174>)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	011a      	lsls	r2, r3, #4
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	4413      	add	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	440b      	add	r3, r1
 800229a:	330c      	adds	r3, #12
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

            // Initialize all walls as unknown (false)
            for (int dir = 0; dir < 4; dir++) {
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	e00e      	b.n	80022c4 <initialize_maze_exploration+0x78>
                maze[x][y].walls[dir] = false;
 80022a6:	4946      	ldr	r1, [pc, #280]	@ (80023c0 <initialize_maze_exploration+0x174>)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	011a      	lsls	r2, r3, #4
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4413      	add	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	18ca      	adds	r2, r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	3305      	adds	r3, #5
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
            for (int dir = 0; dir < 4; dir++) {
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3301      	adds	r3, #1
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	dded      	ble.n	80022a6 <initialize_maze_exploration+0x5a>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	ddc6      	ble.n	8002264 <initialize_maze_exploration+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3301      	adds	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	ddbd      	ble.n	800225e <initialize_maze_exploration+0x12>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	e01f      	b.n	8002328 <initialize_maze_exploration+0xdc>
        maze[i][0].walls[SOUTH] = true;                    // Bottom boundary
 80022e8:	4a35      	ldr	r2, [pc, #212]	@ (80023c0 <initialize_maze_exploration+0x174>)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	4413      	add	r3, r2
 80022f0:	3307      	adds	r3, #7
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true;          // Top boundary
 80022f6:	4a32      	ldr	r2, [pc, #200]	@ (80023c0 <initialize_maze_exploration+0x174>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	4413      	add	r3, r2
 80022fe:	33f5      	adds	r3, #245	@ 0xf5
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;                     // Left boundary
 8002304:	4a2e      	ldr	r2, [pc, #184]	@ (80023c0 <initialize_maze_exploration+0x174>)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4413      	add	r3, r2
 800230c:	3308      	adds	r3, #8
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;           // Right boundary
 8002312:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <initialize_maze_exploration+0x174>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	4413      	add	r3, r2
 800231a:	f603 7306 	addw	r3, r3, #3846	@ 0xf06
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	dddc      	ble.n	80022e8 <initialize_maze_exploration+0x9c>
    }

    // Set maze center coordinates
    maze_center_x1 = MAZE_SIZE / 2 - 1;
 800232e:	4b25      	ldr	r3, [pc, #148]	@ (80023c4 <initialize_maze_exploration+0x178>)
 8002330:	2207      	movs	r2, #7
 8002332:	601a      	str	r2, [r3, #0]
    maze_center_y1 = MAZE_SIZE / 2 - 1;
 8002334:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <initialize_maze_exploration+0x17c>)
 8002336:	2207      	movs	r2, #7
 8002338:	601a      	str	r2, [r3, #0]
    maze_center_x2 = MAZE_SIZE / 2;
 800233a:	4b24      	ldr	r3, [pc, #144]	@ (80023cc <initialize_maze_exploration+0x180>)
 800233c:	2208      	movs	r2, #8
 800233e:	601a      	str	r2, [r3, #0]
    maze_center_y2 = MAZE_SIZE / 2;
 8002340:	4b23      	ldr	r3, [pc, #140]	@ (80023d0 <initialize_maze_exploration+0x184>)
 8002342:	2208      	movs	r2, #8
 8002344:	601a      	str	r2, [r3, #0]

    // Initialize robot state
    robot.x = 0;
 8002346:	4b23      	ldr	r3, [pc, #140]	@ (80023d4 <initialize_maze_exploration+0x188>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 800234c:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <initialize_maze_exploration+0x188>)
 800234e:	2200      	movs	r2, #0
 8002350:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 8002352:	4b20      	ldr	r3, [pc, #128]	@ (80023d4 <initialize_maze_exploration+0x188>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 8002358:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <initialize_maze_exploration+0x188>)
 800235a:	2200      	movs	r2, #0
 800235c:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 800235e:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <initialize_maze_exploration+0x188>)
 8002360:	2200      	movs	r2, #0
 8002362:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 8002364:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <initialize_maze_exploration+0x188>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]

    // Mark starting position
    maze[0][0].visited = true;
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <initialize_maze_exploration+0x174>)
 800236c:	2201      	movs	r2, #1
 800236e:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 8002370:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <initialize_maze_exploration+0x174>)
 8002372:	2201      	movs	r2, #1
 8002374:	60da      	str	r2, [r3, #12]

    // Reset exploration flags
    exploration_completed = 0;
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <initialize_maze_exploration+0x18c>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    optimal_path_calculated = 0;
 800237c:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <initialize_maze_exploration+0x190>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]

    send_bluetooth_printf("Maze Size: %dx%d\r\n", MAZE_SIZE, MAZE_SIZE);
 8002382:	2210      	movs	r2, #16
 8002384:	2110      	movs	r1, #16
 8002386:	4816      	ldr	r0, [pc, #88]	@ (80023e0 <initialize_maze_exploration+0x194>)
 8002388:	f7fe fe46 	bl	8001018 <send_bluetooth_printf>
    send_bluetooth_printf("Center: (%d,%d) to (%d,%d)\r\n",
 800238c:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <initialize_maze_exploration+0x178>)
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <initialize_maze_exploration+0x17c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <initialize_maze_exploration+0x180>)
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <initialize_maze_exploration+0x184>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	4603      	mov	r3, r0
 80023a0:	4810      	ldr	r0, [pc, #64]	@ (80023e4 <initialize_maze_exploration+0x198>)
 80023a2:	f7fe fe39 	bl	8001018 <send_bluetooth_printf>
                         maze_center_x1, maze_center_y1, maze_center_x2, maze_center_y2);
    send_bluetooth_message("Maze exploration initialized successfully!\r\n");
 80023a6:	4810      	ldr	r0, [pc, #64]	@ (80023e8 <initialize_maze_exploration+0x19c>)
 80023a8:	f7fe fe20 	bl	8000fec <send_bluetooth_message>
    send_bluetooth_message("==========================================\r\n");
 80023ac:	480f      	ldr	r0, [pc, #60]	@ (80023ec <initialize_maze_exploration+0x1a0>)
 80023ae:	f7fe fe1d 	bl	8000fec <send_bluetooth_message>
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	0800b87c 	.word	0x0800b87c
 80023c0:	20000414 	.word	0x20000414
 80023c4:	2000146c 	.word	0x2000146c
 80023c8:	20001470 	.word	0x20001470
 80023cc:	20001474 	.word	0x20001474
 80023d0:	20001478 	.word	0x20001478
 80023d4:	20001414 	.word	0x20001414
 80023d8:	2000147c 	.word	0x2000147c
 80023dc:	20001480 	.word	0x20001480
 80023e0:	0800b8a8 	.word	0x0800b8a8
 80023e4:	0800b8bc 	.word	0x0800b8bc
 80023e8:	0800b8dc 	.word	0x0800b8dc
 80023ec:	0800b90c 	.word	0x0800b90c

080023f0 <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 80023f6:	4b19      	ldr	r3, [pc, #100]	@ (800245c <update_encoder_totals+0x6c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 80023fe:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <update_encoder_totals+0x70>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 8002406:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <update_encoder_totals+0x74>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	b29b      	uxth	r3, r3
 8002410:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 8002412:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <update_encoder_totals+0x78>)
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	88ba      	ldrh	r2, [r7, #4]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	b29b      	uxth	r3, r3
 800241c:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    right_diff = -right_diff;  // Make left encoder positive for forward movement
 800241e:	883b      	ldrh	r3, [r7, #0]
 8002420:	425b      	negs	r3, r3
 8002422:	b29b      	uxth	r3, r3
 8002424:	803b      	strh	r3, [r7, #0]

    // Update totals
    left_total += left_diff;
 8002426:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <update_encoder_totals+0x7c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a0e      	ldr	r2, [pc, #56]	@ (800246c <update_encoder_totals+0x7c>)
 8002432:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 8002434:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002438:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <update_encoder_totals+0x80>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4413      	add	r3, r2
 800243e:	4a0c      	ldr	r2, [pc, #48]	@ (8002470 <update_encoder_totals+0x80>)
 8002440:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 8002442:	4a08      	ldr	r2, [pc, #32]	@ (8002464 <update_encoder_totals+0x74>)
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 8002448:	4a07      	ldr	r2, [pc, #28]	@ (8002468 <update_encoder_totals+0x78>)
 800244a:	88bb      	ldrh	r3, [r7, #4]
 800244c:	8013      	strh	r3, [r2, #0]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	200002f4 	.word	0x200002f4
 8002460:	20000384 	.word	0x20000384
 8002464:	20000000 	.word	0x20000000
 8002468:	20000002 	.word	0x20000002
 800246c:	20001484 	.word	0x20001484
 8002470:	20001488 	.word	0x20001488

08002474 <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8002478:	f7ff ffba 	bl	80023f0 <update_encoder_totals>
    return left_total;
 800247c:	4b01      	ldr	r3, [pc, #4]	@ (8002484 <get_left_encoder_total+0x10>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20001484 	.word	0x20001484

08002488 <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
    update_encoder_totals();
 800248c:	f7ff ffb0 	bl	80023f0 <update_encoder_totals>
    return right_total;
 8002490:	4b01      	ldr	r3, [pc, #4]	@ (8002498 <get_right_encoder_total+0x10>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20001488 	.word	0x20001488

0800249c <start_encoders>:
}

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 80024a0:	213c      	movs	r1, #60	@ 0x3c
 80024a2:	4815      	ldr	r0, [pc, #84]	@ (80024f8 <start_encoders+0x5c>)
 80024a4:	f003 ff22 	bl	80062ec <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 80024a8:	213c      	movs	r1, #60	@ 0x3c
 80024aa:	4814      	ldr	r0, [pc, #80]	@ (80024fc <start_encoders+0x60>)
 80024ac:	f003 ff1e 	bl	80062ec <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 80024b0:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <start_encoders+0x5c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 80024ba:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <start_encoders+0x60>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f001 fafb 	bl	8003ac0 <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <start_encoders+0x64>)
 80024cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024d0:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 80024d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <start_encoders+0x68>)
 80024d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024d8:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <start_encoders+0x6c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
    right_total = 0;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <start_encoders+0x70>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 80024e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <start_encoders+0x74>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 80024ec:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <start_encoders+0x74>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	60da      	str	r2, [r3, #12]
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000384 	.word	0x20000384
 80024fc:	200002f4 	.word	0x200002f4
 8002500:	20000000 	.word	0x20000000
 8002504:	20000002 	.word	0x20000002
 8002508:	20001484 	.word	0x20001484
 800250c:	20001488 	.word	0x20001488
 8002510:	2000144c 	.word	0x2000144c

08002514 <send_encoder_status>:


/**
 * @brief Get encoder status for debugging - NEW FUNCTION
 */
void send_encoder_status(void) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af02      	add	r7, sp, #8
    update_encoder_totals();
 800251a:	f7ff ff69 	bl	80023f0 <update_encoder_totals>
    send_bluetooth_printf("Encoders - Left:%ld Right:%ld Raw_L:%d Raw_R:%d\r\n",
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <send_encoder_status+0x30>)
 8002520:	6819      	ldr	r1, [r3, #0]
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <send_encoder_status+0x34>)
 8002524:	681a      	ldr	r2, [r3, #0]
                         left_total, right_total,
                         __HAL_TIM_GET_COUNTER(&htim2), __HAL_TIM_GET_COUNTER(&htim4));
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <send_encoder_status+0x38>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <send_encoder_status+0x3c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    send_bluetooth_printf("Encoders - Left:%ld Right:%ld Raw_L:%d Raw_R:%d\r\n",
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	4807      	ldr	r0, [pc, #28]	@ (8002554 <send_encoder_status+0x40>)
 8002538:	f7fe fd6e 	bl	8001018 <send_bluetooth_printf>
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20001484 	.word	0x20001484
 8002548:	20001488 	.word	0x20001488
 800254c:	200002f4 	.word	0x200002f4
 8002550:	20000384 	.word	0x20000384
 8002554:	0800bce0 	.word	0x0800bce0

08002558 <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 800255c:	2200      	movs	r2, #0
 800255e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002562:	480b      	ldr	r0, [pc, #44]	@ (8002590 <turn_off_emitters+0x38>)
 8002564:	f002 f9ea 	bl	800493c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8002568:	2200      	movs	r2, #0
 800256a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800256e:	4809      	ldr	r0, [pc, #36]	@ (8002594 <turn_off_emitters+0x3c>)
 8002570:	f002 f9e4 	bl	800493c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 8002574:	2200      	movs	r2, #0
 8002576:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800257a:	4805      	ldr	r0, [pc, #20]	@ (8002590 <turn_off_emitters+0x38>)
 800257c:	f002 f9de 	bl	800493c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002586:	4803      	ldr	r0, [pc, #12]	@ (8002594 <turn_off_emitters+0x3c>)
 8002588:	f002 f9d8 	bl	800493c <HAL_GPIO_WritePin>
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40020400 	.word	0x40020400
 8002594:	40020000 	.word	0x40020000

08002598 <read_adc_channel>:

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef cfg = {0};
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
    cfg.Channel = channel;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
    cfg.Rank = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	613b      	str	r3, [r7, #16]
    cfg.SamplingTime = ADC_SAMPLETIME_480CYCLES; // more stable than 84
 80025b6:	2307      	movs	r3, #7
 80025b8:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &cfg) != HAL_OK) return 0;
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	4619      	mov	r1, r3
 80025c0:	4815      	ldr	r0, [pc, #84]	@ (8002618 <read_adc_channel+0x80>)
 80025c2:	f001 fc65 	bl	8003e90 <HAL_ADC_ConfigChannel>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <read_adc_channel+0x38>
 80025cc:	2300      	movs	r3, #0
 80025ce:	e01f      	b.n	8002610 <read_adc_channel+0x78>

    dwt_delay_us(5);                     // tiny mux settle
 80025d0:	2005      	movs	r0, #5
 80025d2:	f000 f849 	bl	8002668 <dwt_delay_us>

    // dummy conversion (discard)
    HAL_ADC_Start(&hadc1);
 80025d6:	4810      	ldr	r0, [pc, #64]	@ (8002618 <read_adc_channel+0x80>)
 80025d8:	f001 fada 	bl	8003b90 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 80025dc:	210a      	movs	r1, #10
 80025de:	480e      	ldr	r0, [pc, #56]	@ (8002618 <read_adc_channel+0x80>)
 80025e0:	f001 fbbd 	bl	8003d5e <HAL_ADC_PollForConversion>
    (void)HAL_ADC_GetValue(&hadc1);
 80025e4:	480c      	ldr	r0, [pc, #48]	@ (8002618 <read_adc_channel+0x80>)
 80025e6:	f001 fc45 	bl	8003e74 <HAL_ADC_GetValue>
    HAL_ADC_Stop(&hadc1);
 80025ea:	480b      	ldr	r0, [pc, #44]	@ (8002618 <read_adc_channel+0x80>)
 80025ec:	f001 fb84 	bl	8003cf8 <HAL_ADC_Stop>

    // real conversion
    HAL_ADC_Start(&hadc1);
 80025f0:	4809      	ldr	r0, [pc, #36]	@ (8002618 <read_adc_channel+0x80>)
 80025f2:	f001 facd 	bl	8003b90 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 80025f6:	210a      	movs	r1, #10
 80025f8:	4807      	ldr	r0, [pc, #28]	@ (8002618 <read_adc_channel+0x80>)
 80025fa:	f001 fbb0 	bl	8003d5e <HAL_ADC_PollForConversion>
    uint16_t v = HAL_ADC_GetValue(&hadc1);
 80025fe:	4806      	ldr	r0, [pc, #24]	@ (8002618 <read_adc_channel+0x80>)
 8002600:	f001 fc38 	bl	8003e74 <HAL_ADC_GetValue>
 8002604:	4603      	mov	r3, r0
 8002606:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 8002608:	4803      	ldr	r0, [pc, #12]	@ (8002618 <read_adc_channel+0x80>)
 800260a:	f001 fb75 	bl	8003cf8 <HAL_ADC_Stop>
    return v;
 800260e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	2000020c 	.word	0x2000020c

0800261c <dwt_delay_init>:
// sensors.c
#include "core_cm4.h"  // F411 = Cortex-M4

static uint32_t dwt_cycles_per_us;

void dwt_delay_init(uint32_t cpu_hz) {
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002624:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <dwt_delay_init+0x3c>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a0b      	ldr	r2, [pc, #44]	@ (8002658 <dwt_delay_init+0x3c>)
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800262e:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002630:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <dwt_delay_init+0x40>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a09      	ldr	r2, [pc, #36]	@ (800265c <dwt_delay_init+0x40>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6013      	str	r3, [r2, #0]
    dwt_cycles_per_us = cpu_hz / 1000000U; // e.g., 84 for 84 MHz
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a08      	ldr	r2, [pc, #32]	@ (8002660 <dwt_delay_init+0x44>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	0c9b      	lsrs	r3, r3, #18
 8002646:	4a07      	ldr	r2, [pc, #28]	@ (8002664 <dwt_delay_init+0x48>)
 8002648:	6013      	str	r3, [r2, #0]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000edf0 	.word	0xe000edf0
 800265c:	e0001000 	.word	0xe0001000
 8002660:	431bde83 	.word	0x431bde83
 8002664:	200014c0 	.word	0x200014c0

08002668 <dwt_delay_us>:

inline void dwt_delay_us(uint32_t us) {
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <dwt_delay_us+0x3c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * dwt_cycles_per_us;
 8002676:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <dwt_delay_us+0x40>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks) { __NOP(); }
 8002682:	e000      	b.n	8002686 <dwt_delay_us+0x1e>
 8002684:	bf00      	nop
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <dwt_delay_us+0x3c>)
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	429a      	cmp	r2, r3
 8002692:	d8f7      	bhi.n	8002684 <dwt_delay_us+0x1c>
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e0001000 	.word	0xe0001000
 80026a8:	200014c0 	.word	0x200014c0

080026ac <diff_once>:
// ---- Tunables (typical values from micromouse practice) ----
#define IR_CYCLES   12     // average of 12 ON/OFF pairs per sensor
#define T_OFF_US    50     // wait after LED OFF before sample
#define T_ON_US     60     // wait after LED ON before sample

static inline uint16_t diff_once(GPIO_TypeDef* port, uint16_t pin, uint32_t ch) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	460b      	mov	r3, r1
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	817b      	strh	r3, [r7, #10]
    // OFF sample
    EMIT_OFF(port, pin);
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	2200      	movs	r2, #0
 80026be:	4619      	mov	r1, r3
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f002 f93b 	bl	800493c <HAL_GPIO_WritePin>
    dwt_delay_us(T_OFF_US);
 80026c6:	2032      	movs	r0, #50	@ 0x32
 80026c8:	f7ff ffce 	bl	8002668 <dwt_delay_us>
    uint16_t offv = read_adc_channel(ch);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff63 	bl	8002598 <read_adc_channel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	82fb      	strh	r3, [r7, #22]

    // ON sample
    EMIT_ON(port, pin);
 80026d6:	897b      	ldrh	r3, [r7, #10]
 80026d8:	2201      	movs	r2, #1
 80026da:	4619      	mov	r1, r3
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f002 f92d 	bl	800493c <HAL_GPIO_WritePin>
    dwt_delay_us(T_ON_US);
 80026e2:	203c      	movs	r0, #60	@ 0x3c
 80026e4:	f7ff ffc0 	bl	8002668 <dwt_delay_us>
    uint16_t onv  = read_adc_channel(ch);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ff55 	bl	8002598 <read_adc_channel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	82bb      	strh	r3, [r7, #20]

    EMIT_OFF(port, pin);
 80026f2:	897b      	ldrh	r3, [r7, #10]
 80026f4:	2200      	movs	r2, #0
 80026f6:	4619      	mov	r1, r3
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f002 f91f 	bl	800493c <HAL_GPIO_WritePin>

    int32_t d = (int32_t)onv - (int32_t)offv;
 80026fe:	8aba      	ldrh	r2, [r7, #20]
 8002700:	8afb      	ldrh	r3, [r7, #22]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	613b      	str	r3, [r7, #16]
    return (d > 0) ? (uint16_t)d : 0;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	dd02      	ble.n	8002712 <diff_once+0x66>
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	b29b      	uxth	r3, r3
 8002710:	e000      	b.n	8002714 <diff_once+0x68>
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <measure_sync>:

static uint16_t measure_sync(GPIO_TypeDef* port, uint16_t pin, uint32_t ch) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	460b      	mov	r3, r1
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	817b      	strh	r3, [r7, #10]
    uint32_t acc = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
    for (int k = 0; k < IR_CYCLES; k++) {
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	e010      	b.n	8002756 <measure_sync+0x3a>
        acc += diff_once(port, pin, ch);
 8002734:	897b      	ldrh	r3, [r7, #10]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4619      	mov	r1, r3
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff ffb6 	bl	80026ac <diff_once>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	4413      	add	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
        dwt_delay_us(20);
 800274a:	2014      	movs	r0, #20
 800274c:	f7ff ff8c 	bl	8002668 <dwt_delay_us>
    for (int k = 0; k < IR_CYCLES; k++) {
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	3301      	adds	r3, #1
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b0b      	cmp	r3, #11
 800275a:	ddeb      	ble.n	8002734 <measure_sync+0x18>
    }
    if (acc > 4095) acc = 4095;   // clamp to 12-bit domain if you prefer
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002762:	d302      	bcc.n	800276a <measure_sync+0x4e>
 8002764:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8002768:	617b      	str	r3, [r7, #20]
    return (uint16_t)acc;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	b29b      	uxth	r3, r3
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <update_sensors>:


void update_sensors(void)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b091      	sub	sp, #68	@ 0x44
 800277c:	af00      	add	r7, sp, #0
    uint32_t ch[4]    = {ADC_CHANNEL_5, ADC_CHANNEL_2, ADC_CHANNEL_4, ADC_CHANNEL_3};
 800277e:	4b58      	ldr	r3, [pc, #352]	@ (80028e0 <update_sensors+0x168>)
 8002780:	f107 0418 	add.w	r4, r7, #24
 8002784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    GPIO_TypeDef* p[4]= {EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_RIGHT_GPIO_Port,
 800278a:	4b56      	ldr	r3, [pc, #344]	@ (80028e4 <update_sensors+0x16c>)
 800278c:	f107 0408 	add.w	r4, r7, #8
 8002790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                         EMIT_SIDE_LEFT_GPIO_Port,  EMIT_SIDE_RIGHT_GPIO_Port};
    uint16_t pin[4]   = {EMIT_FRONT_LEFT_Pin, EMIT_FRONT_RIGHT_Pin,
 8002796:	4a54      	ldr	r2, [pc, #336]	@ (80028e8 <update_sensors+0x170>)
 8002798:	463b      	mov	r3, r7
 800279a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800279e:	e883 0003 	stmia.w	r3, {r0, r1}
                         EMIT_SIDE_LEFT_Pin,  EMIT_SIDE_RIGHT_Pin};

    // synchronous, ambient-rejected readings
    uint16_t fl = measure_sync(p[0], pin[0], ch[0]);
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	8839      	ldrh	r1, [r7, #0]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ffb7 	bl	800271c <measure_sync>
 80027ae:	4603      	mov	r3, r0
 80027b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint16_t fr = measure_sync(p[1], pin[1], ch[1]);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8879      	ldrh	r1, [r7, #2]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ffaf 	bl	800271c <measure_sync>
 80027be:	4603      	mov	r3, r0
 80027c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint16_t sl = measure_sync(p[2], pin[2], ch[2]);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	88b9      	ldrh	r1, [r7, #4]
 80027c6:	6a3a      	ldr	r2, [r7, #32]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ffa7 	bl	800271c <measure_sync>
 80027ce:	4603      	mov	r3, r0
 80027d0:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t sr = measure_sync(p[3], pin[3], ch[3]);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	88f9      	ldrh	r1, [r7, #6]
 80027d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff9f 	bl	800271c <measure_sync>
 80027de:	4603      	mov	r3, r0
 80027e0:	863b      	strh	r3, [r7, #48]	@ 0x30

    sensors.front_left  = fl;
 80027e2:	4a42      	ldr	r2, [pc, #264]	@ (80028ec <update_sensors+0x174>)
 80027e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027e6:	8113      	strh	r3, [r2, #8]
    sensors.front_right = fr;
 80027e8:	4a40      	ldr	r2, [pc, #256]	@ (80028ec <update_sensors+0x174>)
 80027ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80027ec:	8053      	strh	r3, [r2, #2]
    sensors.side_left   = sl;
 80027ee:	4a3f      	ldr	r2, [pc, #252]	@ (80028ec <update_sensors+0x174>)
 80027f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80027f2:	80d3      	strh	r3, [r2, #6]
    sensors.side_right  = sr;
 80027f4:	4a3d      	ldr	r2, [pc, #244]	@ (80028ec <update_sensors+0x174>)
 80027f6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80027f8:	8093      	strh	r3, [r2, #4]

    // battery (light average)
    uint32_t bat=0; for (int i=0;i<8;i++) bat += read_adc_channel(ADC_CHANNEL_0);
 80027fa:	2300      	movs	r3, #0
 80027fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027fe:	2300      	movs	r3, #0
 8002800:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002802:	e00a      	b.n	800281a <update_sensors+0xa2>
 8002804:	2000      	movs	r0, #0
 8002806:	f7ff fec7 	bl	8002598 <read_adc_channel>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002810:	4413      	add	r3, r2
 8002812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002816:	3301      	adds	r3, #1
 8002818:	63bb      	str	r3, [r7, #56]	@ 0x38
 800281a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281c:	2b07      	cmp	r3, #7
 800281e:	ddf1      	ble.n	8002804 <update_sensors+0x8c>
    sensors.battery = (uint16_t)(bat/8);
 8002820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002822:	08db      	lsrs	r3, r3, #3
 8002824:	b29a      	uxth	r2, r3
 8002826:	4b31      	ldr	r3, [pc, #196]	@ (80028ec <update_sensors+0x174>)
 8002828:	801a      	strh	r2, [r3, #0]

    // thresholds (use your calibrated ones if valid)
    uint16_t th_fl = is_sensor_calibration_valid() ? get_calibrated_threshold(0) : WALL_THRESHOLD_FRONT;
 800282a:	f000 f861 	bl	80028f0 <is_sensor_calibration_valid>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <update_sensors+0xc6>
 8002834:	2000      	movs	r0, #0
 8002836:	f000 fc71 	bl	800311c <get_calibrated_threshold>
 800283a:	4603      	mov	r3, r0
 800283c:	e001      	b.n	8002842 <update_sensors+0xca>
 800283e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002842:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t th_fr = is_sensor_calibration_valid() ? get_calibrated_threshold(1) : WALL_THRESHOLD_FRONT;
 8002844:	f000 f854 	bl	80028f0 <is_sensor_calibration_valid>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <update_sensors+0xe0>
 800284e:	2001      	movs	r0, #1
 8002850:	f000 fc64 	bl	800311c <get_calibrated_threshold>
 8002854:	4603      	mov	r3, r0
 8002856:	e001      	b.n	800285c <update_sensors+0xe4>
 8002858:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800285c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t th_sl = is_sensor_calibration_valid() ? get_calibrated_threshold(2) : WALL_THRESHOLD_SIDE;
 800285e:	f000 f847 	bl	80028f0 <is_sensor_calibration_valid>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <update_sensors+0xfa>
 8002868:	2002      	movs	r0, #2
 800286a:	f000 fc57 	bl	800311c <get_calibrated_threshold>
 800286e:	4603      	mov	r3, r0
 8002870:	e001      	b.n	8002876 <update_sensors+0xfe>
 8002872:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002876:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t th_sr = is_sensor_calibration_valid() ? get_calibrated_threshold(3) : WALL_THRESHOLD_SIDE;
 8002878:	f000 f83a 	bl	80028f0 <is_sensor_calibration_valid>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <update_sensors+0x114>
 8002882:	2003      	movs	r0, #3
 8002884:	f000 fc4a 	bl	800311c <get_calibrated_threshold>
 8002888:	4603      	mov	r3, r0
 800288a:	e001      	b.n	8002890 <update_sensors+0x118>
 800288c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002890:	853b      	strh	r3, [r7, #40]	@ 0x28

    sensors.wall_front = (fl > th_fl) || (fr > th_fr);
 8002892:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002894:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002896:	429a      	cmp	r2, r3
 8002898:	d803      	bhi.n	80028a2 <update_sensors+0x12a>
 800289a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800289c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800289e:	429a      	cmp	r2, r3
 80028a0:	d901      	bls.n	80028a6 <update_sensors+0x12e>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <update_sensors+0x130>
 80028a6:	2300      	movs	r3, #0
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b0f      	ldr	r3, [pc, #60]	@ (80028ec <update_sensors+0x174>)
 80028b0:	729a      	strb	r2, [r3, #10]
    sensors.wall_left  = (sl > th_sl);
 80028b2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80028b4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80028b6:	429a      	cmp	r2, r3
 80028b8:	bf8c      	ite	hi
 80028ba:	2301      	movhi	r3, #1
 80028bc:	2300      	movls	r3, #0
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	4b0a      	ldr	r3, [pc, #40]	@ (80028ec <update_sensors+0x174>)
 80028c2:	72da      	strb	r2, [r3, #11]
    sensors.wall_right = (sr > th_sr);
 80028c4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80028c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80028c8:	429a      	cmp	r2, r3
 80028ca:	bf8c      	ite	hi
 80028cc:	2301      	movhi	r3, #1
 80028ce:	2300      	movls	r3, #0
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <update_sensors+0x174>)
 80028d4:	731a      	strb	r2, [r3, #12]
}
 80028d6:	bf00      	nop
 80028d8:	3744      	adds	r7, #68	@ 0x44
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}
 80028de:	bf00      	nop
 80028e0:	0800bf1c 	.word	0x0800bf1c
 80028e4:	0800bf2c 	.word	0x0800bf2c
 80028e8:	0800bf3c 	.word	0x0800bf3c
 80028ec:	20001428 	.word	0x20001428

080028f0 <is_sensor_calibration_valid>:

/**
 * @brief Get sensor calibration status
 */
bool is_sensor_calibration_valid(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
    return sensor_cal.calibration_valid;
 80028f4:	4b03      	ldr	r3, [pc, #12]	@ (8002904 <is_sensor_calibration_valid+0x14>)
 80028f6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	2000148c 	.word	0x2000148c

08002908 <adc_system_diagnostics>:

    send_bluetooth_message("===============================\r\n");
}


void adc_system_diagnostics(void) {
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b08e      	sub	sp, #56	@ 0x38
 800290c:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 800290e:	484b      	ldr	r0, [pc, #300]	@ (8002a3c <adc_system_diagnostics+0x134>)
 8002910:	f7fe fb6c 	bl	8000fec <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 8002914:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <adc_system_diagnostics+0x138>)
 8002916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 8002920:	4848      	ldr	r0, [pc, #288]	@ (8002a44 <adc_system_diagnostics+0x13c>)
 8002922:	f7fe fb63 	bl	8000fec <send_bluetooth_message>
 8002926:	e002      	b.n	800292e <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 8002928:	4847      	ldr	r0, [pc, #284]	@ (8002a48 <adc_system_diagnostics+0x140>)
 800292a:	f7fe fb5f 	bl	8000fec <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 800292e:	4b44      	ldr	r3, [pc, #272]	@ (8002a40 <adc_system_diagnostics+0x138>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 800293a:	4844      	ldr	r0, [pc, #272]	@ (8002a4c <adc_system_diagnostics+0x144>)
 800293c:	f7fe fb56 	bl	8000fec <send_bluetooth_message>
 8002940:	e002      	b.n	8002948 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 8002942:	4843      	ldr	r0, [pc, #268]	@ (8002a50 <adc_system_diagnostics+0x148>)
 8002944:	f7fe fb52 	bl	8000fec <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 8002948:	4b42      	ldr	r3, [pc, #264]	@ (8002a54 <adc_system_diagnostics+0x14c>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	2b01      	cmp	r3, #1
 800294e:	d103      	bne.n	8002958 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 8002950:	4841      	ldr	r0, [pc, #260]	@ (8002a58 <adc_system_diagnostics+0x150>)
 8002952:	f7fe fb4b 	bl	8000fec <send_bluetooth_message>
 8002956:	e005      	b.n	8002964 <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 8002958:	4b3e      	ldr	r3, [pc, #248]	@ (8002a54 <adc_system_diagnostics+0x14c>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	4619      	mov	r1, r3
 800295e:	483f      	ldr	r0, [pc, #252]	@ (8002a5c <adc_system_diagnostics+0x154>)
 8002960:	f7fe fb5a 	bl	8001018 <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 8002964:	483e      	ldr	r0, [pc, #248]	@ (8002a60 <adc_system_diagnostics+0x158>)
 8002966:	f7fe fb41 	bl	8000fec <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 800296a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a64 <adc_system_diagnostics+0x15c>)
 800296c:	f107 0420 	add.w	r4, r7, #32
 8002970:	461d      	mov	r5, r3
 8002972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002976:	682b      	ldr	r3, [r5, #0]
 8002978:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 800297a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a68 <adc_system_diagnostics+0x160>)
 800297c:	f107 040c 	add.w	r4, r7, #12
 8002980:	461d      	mov	r5, r3
 8002982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002986:	682b      	ldr	r3, [r5, #0]
 8002988:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 800298a:	2300      	movs	r3, #0
 800298c:	637b      	str	r3, [r7, #52]	@ 0x34
 800298e:	e04b      	b.n	8002a28 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 8002990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	3338      	adds	r3, #56	@ 0x38
 8002996:	443b      	add	r3, r7
 8002998:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fdfb 	bl	8002598 <read_adc_channel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	3338      	adds	r3, #56	@ 0x38
 80029ac:	443b      	add	r3, r7
 80029ae:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80029b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3338      	adds	r3, #56	@ 0x38
 80029b8:	443b      	add	r3, r7
 80029ba:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 80029be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	3338      	adds	r3, #56	@ 0x38
 80029c4:	443b      	add	r3, r7
 80029c6:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d01f      	beq.n	8002a0e <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80029ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	3338      	adds	r3, #56	@ 0x38
 80029d4:	443b      	add	r3, r7
 80029d6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d015      	beq.n	8002a0a <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 80029de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	3338      	adds	r3, #56	@ 0x38
 80029e4:	443b      	add	r3, r7
 80029e6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d00b      	beq.n	8002a06 <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 80029ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	3338      	adds	r3, #56	@ 0x38
 80029f4:	443b      	add	r3, r7
 80029f6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d101      	bne.n	8002a02 <adc_system_diagnostics+0xfa>
 80029fe:	2204      	movs	r2, #4
 8002a00:	e006      	b.n	8002a10 <adc_system_diagnostics+0x108>
 8002a02:	2205      	movs	r2, #5
 8002a04:	e004      	b.n	8002a10 <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 8002a06:	2203      	movs	r2, #3
 8002a08:	e002      	b.n	8002a10 <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	e000      	b.n	8002a10 <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8002a0e:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 8002a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	3338      	adds	r3, #56	@ 0x38
 8002a16:	443b      	add	r3, r7
 8002a18:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8002a1c:	4813      	ldr	r0, [pc, #76]	@ (8002a6c <adc_system_diagnostics+0x164>)
 8002a1e:	f7fe fafb 	bl	8001018 <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 8002a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a24:	3301      	adds	r3, #1
 8002a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	ddb0      	ble.n	8002990 <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 8002a2e:	4810      	ldr	r0, [pc, #64]	@ (8002a70 <adc_system_diagnostics+0x168>)
 8002a30:	f7fe fadc 	bl	8000fec <send_bluetooth_message>
}
 8002a34:	bf00      	nop
 8002a36:	3738      	adds	r7, #56	@ 0x38
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	0800c14c 	.word	0x0800c14c
 8002a40:	40023800 	.word	0x40023800
 8002a44:	0800c170 	.word	0x0800c170
 8002a48:	0800c18c 	.word	0x0800c18c
 8002a4c:	0800c1a8 	.word	0x0800c1a8
 8002a50:	0800c1c4 	.word	0x0800c1c4
 8002a54:	2000020c 	.word	0x2000020c
 8002a58:	0800c1e0 	.word	0x0800c1e0
 8002a5c:	0800c1f8 	.word	0x0800c1f8
 8002a60:	0800c210 	.word	0x0800c210
 8002a64:	0800c240 	.word	0x0800c240
 8002a68:	0800c28c 	.word	0x0800c28c
 8002a6c:	0800c230 	.word	0x0800c230
 8002a70:	0800c128 	.word	0x0800c128

08002a74 <calibrate_sensors>:
 * - Dynamic wall threshold calculation
 * - Sensor health validation
 * - Battery voltage baseline
 */
void calibrate_sensors(void)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b0a7      	sub	sp, #156	@ 0x9c
 8002a78:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ENHANCED SENSOR CALIBRATION ===\r\n");
 8002a7a:	48a0      	ldr	r0, [pc, #640]	@ (8002cfc <calibrate_sensors+0x288>)
 8002a7c:	f7fe fab6 	bl	8000fec <send_bluetooth_message>

    // Initialize calibration structure
    memset(&sensor_cal, 0, sizeof(sensor_cal));
 8002a80:	2234      	movs	r2, #52	@ 0x34
 8002a82:	2100      	movs	r1, #0
 8002a84:	489e      	ldr	r0, [pc, #632]	@ (8002d00 <calibrate_sensors+0x28c>)
 8002a86:	f006 f8c1 	bl	8008c0c <memset>

    // Phase 1: ADC System Validation
    send_bluetooth_message("Phase 1: ADC System Validation\r\n");
 8002a8a:	489e      	ldr	r0, [pc, #632]	@ (8002d04 <calibrate_sensors+0x290>)
 8002a8c:	f7fe faae 	bl	8000fec <send_bluetooth_message>

    // Check if ADC is properly initialized
    if (hadc1.State != HAL_ADC_STATE_READY) {
 8002a90:	4b9d      	ldr	r3, [pc, #628]	@ (8002d08 <calibrate_sensors+0x294>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d00c      	beq.n	8002ab2 <calibrate_sensors+0x3e>
        send_bluetooth_message("❌ ADC not ready - attempting re-initialization\r\n");
 8002a98:	489c      	ldr	r0, [pc, #624]	@ (8002d0c <calibrate_sensors+0x298>)
 8002a9a:	f7fe faa7 	bl	8000fec <send_bluetooth_message>
        if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002a9e:	489a      	ldr	r0, [pc, #616]	@ (8002d08 <calibrate_sensors+0x294>)
 8002aa0:	f001 f832 	bl	8003b08 <HAL_ADC_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <calibrate_sensors+0x3e>
            send_bluetooth_message("❌ CRITICAL: ADC initialization failed!\r\n");
 8002aaa:	4899      	ldr	r0, [pc, #612]	@ (8002d10 <calibrate_sensors+0x29c>)
 8002aac:	f7fe fa9e 	bl	8000fec <send_bluetooth_message>
            return;
 8002ab0:	e2f3      	b.n	800309a <calibrate_sensors+0x626>
        }
    }

    // Verify clock enables
    if (!__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 8002ab2:	4b98      	ldr	r3, [pc, #608]	@ (8002d14 <calibrate_sensors+0x2a0>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <calibrate_sensors+0x52>
        send_bluetooth_message("❌ ADC1 clock disabled\r\n");
 8002abe:	4896      	ldr	r0, [pc, #600]	@ (8002d18 <calibrate_sensors+0x2a4>)
 8002ac0:	f7fe fa94 	bl	8000fec <send_bluetooth_message>
        return;
 8002ac4:	e2e9      	b.n	800309a <calibrate_sensors+0x626>
    }

    if (!__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 8002ac6:	4b93      	ldr	r3, [pc, #588]	@ (8002d14 <calibrate_sensors+0x2a0>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <calibrate_sensors+0x66>
        send_bluetooth_message("❌ GPIOA clock disabled\r\n");
 8002ad2:	4892      	ldr	r0, [pc, #584]	@ (8002d1c <calibrate_sensors+0x2a8>)
 8002ad4:	f7fe fa8a 	bl	8000fec <send_bluetooth_message>
        return;
 8002ad8:	e2df      	b.n	800309a <calibrate_sensors+0x626>
    }

    send_bluetooth_message("✅ ADC system validation passed\r\n");
 8002ada:	4891      	ldr	r0, [pc, #580]	@ (8002d20 <calibrate_sensors+0x2ac>)
 8002adc:	f7fe fa86 	bl	8000fec <send_bluetooth_message>

    // Phase 2: Baseline Ambient Light Measurement
    send_bluetooth_message("Phase 2: Measuring ambient baselines (IR emitters OFF)\r\n");
 8002ae0:	4890      	ldr	r0, [pc, #576]	@ (8002d24 <calibrate_sensors+0x2b0>)
 8002ae2:	f7fe fa83 	bl	8000fec <send_bluetooth_message>

    // Ensure emitters are OFF
    turn_off_emitters();
 8002ae6:	f7ff fd37 	bl	8002558 <turn_off_emitters>
    HAL_Delay(100); // Allow sensors to stabilize
 8002aea:	2064      	movs	r0, #100	@ 0x64
 8002aec:	f000 ffe8 	bl	8003ac0 <HAL_Delay>

    // Take multiple ambient readings for stability
    uint32_t ambient_sum[4] = {0};
 8002af0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
    uint32_t ambient_readings = 50;
 8002afe:	2332      	movs	r3, #50	@ 0x32
 8002b00:	66fb      	str	r3, [r7, #108]	@ 0x6c

    for (int i = 0; i < ambient_readings; i++) {
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b08:	e027      	b.n	8002b5a <calibrate_sensors+0xe6>
        ambient_sum[0] += read_adc_channel(ADC_CHANNEL_5); // Front Left
 8002b0a:	2005      	movs	r0, #5
 8002b0c:	f7ff fd44 	bl	8002598 <read_adc_channel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b16:	4413      	add	r3, r2
 8002b18:	647b      	str	r3, [r7, #68]	@ 0x44
        ambient_sum[1] += read_adc_channel(ADC_CHANNEL_2); // Front Right
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f7ff fd3c 	bl	8002598 <read_adc_channel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b26:	4413      	add	r3, r2
 8002b28:	64bb      	str	r3, [r7, #72]	@ 0x48
        ambient_sum[2] += read_adc_channel(ADC_CHANNEL_4); // Side Left
 8002b2a:	2004      	movs	r0, #4
 8002b2c:	f7ff fd34 	bl	8002598 <read_adc_channel>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461a      	mov	r2, r3
 8002b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b36:	4413      	add	r3, r2
 8002b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
        ambient_sum[3] += read_adc_channel(ADC_CHANNEL_3); // Side Right
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	f7ff fd2c 	bl	8002598 <read_adc_channel>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b46:	4413      	add	r3, r2
 8002b48:	653b      	str	r3, [r7, #80]	@ 0x50
        HAL_Delay(10);
 8002b4a:	200a      	movs	r0, #10
 8002b4c:	f000 ffb8 	bl	8003ac0 <HAL_Delay>
    for (int i = 0; i < ambient_readings; i++) {
 8002b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b54:	3301      	adds	r3, #1
 8002b56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d8d2      	bhi.n	8002b0a <calibrate_sensors+0x96>
    }

    // Calculate ambient baselines
    sensor_cal.ambient_baseline[0] = ambient_sum[0] / ambient_readings; // Front Left
 8002b64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4b64      	ldr	r3, [pc, #400]	@ (8002d00 <calibrate_sensors+0x28c>)
 8002b70:	801a      	strh	r2, [r3, #0]
    sensor_cal.ambient_baseline[1] = ambient_sum[1] / ambient_readings; // Front Right
 8002b72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	4b60      	ldr	r3, [pc, #384]	@ (8002d00 <calibrate_sensors+0x28c>)
 8002b7e:	805a      	strh	r2, [r3, #2]
    sensor_cal.ambient_baseline[2] = ambient_sum[2] / ambient_readings; // Side Left
 8002b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d00 <calibrate_sensors+0x28c>)
 8002b8c:	809a      	strh	r2, [r3, #4]
    sensor_cal.ambient_baseline[3] = ambient_sum[3] / ambient_readings; // Side Right
 8002b8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	4b59      	ldr	r3, [pc, #356]	@ (8002d00 <calibrate_sensors+0x28c>)
 8002b9a:	80da      	strh	r2, [r3, #6]

    send_bluetooth_message("Ambient baselines (emitters OFF):\r\n");
 8002b9c:	4862      	ldr	r0, [pc, #392]	@ (8002d28 <calibrate_sensors+0x2b4>)
 8002b9e:	f7fe fa25 	bl	8000fec <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %d\r\n", sensor_cal.ambient_baseline[0]);
 8002ba2:	4b57      	ldr	r3, [pc, #348]	@ (8002d00 <calibrate_sensors+0x28c>)
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4860      	ldr	r0, [pc, #384]	@ (8002d2c <calibrate_sensors+0x2b8>)
 8002baa:	f7fe fa35 	bl	8001018 <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %d\r\n", sensor_cal.ambient_baseline[1]);
 8002bae:	4b54      	ldr	r3, [pc, #336]	@ (8002d00 <calibrate_sensors+0x28c>)
 8002bb0:	885b      	ldrh	r3, [r3, #2]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	485e      	ldr	r0, [pc, #376]	@ (8002d30 <calibrate_sensors+0x2bc>)
 8002bb6:	f7fe fa2f 	bl	8001018 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %d\r\n", sensor_cal.ambient_baseline[2]);
 8002bba:	4b51      	ldr	r3, [pc, #324]	@ (8002d00 <calibrate_sensors+0x28c>)
 8002bbc:	889b      	ldrh	r3, [r3, #4]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	485c      	ldr	r0, [pc, #368]	@ (8002d34 <calibrate_sensors+0x2c0>)
 8002bc2:	f7fe fa29 	bl	8001018 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %d\r\n", sensor_cal.ambient_baseline[3]);
 8002bc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002d00 <calibrate_sensors+0x28c>)
 8002bc8:	88db      	ldrh	r3, [r3, #6]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	485a      	ldr	r0, [pc, #360]	@ (8002d38 <calibrate_sensors+0x2c4>)
 8002bce:	f7fe fa23 	bl	8001018 <send_bluetooth_printf>

    // Phase 3: Differential response per sensor (ON-OFF, single emitter only)
    send_bluetooth_message("Phase 3: Measuring differential response per sensor\r\n");
 8002bd2:	485a      	ldr	r0, [pc, #360]	@ (8002d3c <calibrate_sensors+0x2c8>)
 8002bd4:	f7fe fa0a 	bl	8000fec <send_bluetooth_message>

    uint16_t diff_avg[4] = {0};
 8002bd8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
    float    diff_noise[4] = {0};
 8002be2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]

    uint32_t ch[] = {ADC_CHANNEL_5, ADC_CHANNEL_2, ADC_CHANNEL_4, ADC_CHANNEL_3};
 8002bf0:	4b53      	ldr	r3, [pc, #332]	@ (8002d40 <calibrate_sensors+0x2cc>)
 8002bf2:	f107 041c 	add.w	r4, r7, #28
 8002bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    GPIO_TypeDef* prt[] = {EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_RIGHT_GPIO_Port,
 8002bfc:	4b51      	ldr	r3, [pc, #324]	@ (8002d44 <calibrate_sensors+0x2d0>)
 8002bfe:	f107 040c 	add.w	r4, r7, #12
 8002c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                           EMIT_SIDE_LEFT_GPIO_Port,  EMIT_SIDE_RIGHT_GPIO_Port};
    uint16_t pin[] = {EMIT_FRONT_LEFT_Pin, EMIT_FRONT_RIGHT_Pin,
 8002c08:	4a4f      	ldr	r2, [pc, #316]	@ (8002d48 <calibrate_sensors+0x2d4>)
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c10:	e883 0003 	stmia.w	r3, {r0, r1}
                      EMIT_SIDE_LEFT_Pin,  EMIT_SIDE_RIGHT_Pin};

    // make sure all emitters are OFF
    turn_off_emitters();
 8002c14:	f7ff fca0 	bl	8002558 <turn_off_emitters>

    for (int i=0;i<4;i++){
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c1e:	e105      	b.n	8002e2c <calibrate_sensors+0x3b8>
        const int K = 20;        // minimal samples for an average
 8002c20:	2314      	movs	r3, #20
 8002c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
        uint32_t acc = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        uint16_t minv = 0xFFFF, maxv = 0;
 8002c2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c2e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

        for (int k=0;k<K;k++){
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c3e:	e0ab      	b.n	8002d98 <calibrate_sensors+0x324>
            // OFF window (emitter off)
            HAL_GPIO_WritePin(prt[i], pin[i], GPIO_PIN_RESET);
 8002c40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	3398      	adds	r3, #152	@ 0x98
 8002c48:	443b      	add	r3, r7
 8002c4a:	f853 0c8c 	ldr.w	r0, [r3, #-140]
 8002c4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	3398      	adds	r3, #152	@ 0x98
 8002c56:	443b      	add	r3, r7
 8002c58:	f833 3c94 	ldrh.w	r3, [r3, #-148]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f001 fe6c 	bl	800493c <HAL_GPIO_WritePin>
            uint16_t off = read_adc_channel(ch[i]);
 8002c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	3398      	adds	r3, #152	@ 0x98
 8002c6c:	443b      	add	r3, r7
 8002c6e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fc90 	bl	8002598 <read_adc_channel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            // ON window (only this emitter on)
            HAL_GPIO_WritePin(prt[i], pin[i], GPIO_PIN_SET);
 8002c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	3398      	adds	r3, #152	@ 0x98
 8002c86:	443b      	add	r3, r7
 8002c88:	f853 0c8c 	ldr.w	r0, [r3, #-140]
 8002c8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	3398      	adds	r3, #152	@ 0x98
 8002c94:	443b      	add	r3, r7
 8002c96:	f833 3c94 	ldrh.w	r3, [r3, #-148]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f001 fe4d 	bl	800493c <HAL_GPIO_WritePin>
            uint16_t on  = read_adc_channel(ch[i]);
 8002ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	3398      	adds	r3, #152	@ 0x98
 8002caa:	443b      	add	r3, r7
 8002cac:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fc71 	bl	8002598 <read_adc_channel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

            // back to OFF
            HAL_GPIO_WritePin(prt[i], pin[i], GPIO_PIN_RESET);
 8002cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	3398      	adds	r3, #152	@ 0x98
 8002cc4:	443b      	add	r3, r7
 8002cc6:	f853 0c8c 	ldr.w	r0, [r3, #-140]
 8002cca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	3398      	adds	r3, #152	@ 0x98
 8002cd2:	443b      	add	r3, r7
 8002cd4:	f833 3c94 	ldrh.w	r3, [r3, #-148]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f001 fe2e 	bl	800493c <HAL_GPIO_WritePin>

            uint16_t d = (on > off) ? (on - off) : 0;
 8002ce0:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8002ce4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d92f      	bls.n	8002d4c <calibrate_sensors+0x2d8>
 8002cec:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8002cf0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	e029      	b.n	8002d4e <calibrate_sensors+0x2da>
 8002cfa:	bf00      	nop
 8002cfc:	0800c35c 	.word	0x0800c35c
 8002d00:	2000148c 	.word	0x2000148c
 8002d04:	0800c384 	.word	0x0800c384
 8002d08:	2000020c 	.word	0x2000020c
 8002d0c:	0800c3a8 	.word	0x0800c3a8
 8002d10:	0800c3dc 	.word	0x0800c3dc
 8002d14:	40023800 	.word	0x40023800
 8002d18:	0800c408 	.word	0x0800c408
 8002d1c:	0800c424 	.word	0x0800c424
 8002d20:	0800c440 	.word	0x0800c440
 8002d24:	0800c464 	.word	0x0800c464
 8002d28:	0800c4a0 	.word	0x0800c4a0
 8002d2c:	0800c4c4 	.word	0x0800c4c4
 8002d30:	0800c4d8 	.word	0x0800c4d8
 8002d34:	0800c4ec 	.word	0x0800c4ec
 8002d38:	0800c500 	.word	0x0800c500
 8002d3c:	0800c514 	.word	0x0800c514
 8002d40:	0800bf1c 	.word	0x0800bf1c
 8002d44:	0800bf2c 	.word	0x0800bf2c
 8002d48:	0800bf3c 	.word	0x0800bf3c
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            acc += d;
 8002d52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002d56:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            if (d < minv) minv = d;
 8002d60:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8002d64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d203      	bcs.n	8002d74 <calibrate_sensors+0x300>
 8002d6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002d70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
            if (d > maxv) maxv = d;
 8002d74:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8002d78:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d903      	bls.n	8002d88 <calibrate_sensors+0x314>
 8002d80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002d84:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

            HAL_Delay(2);
 8002d88:	2002      	movs	r0, #2
 8002d8a:	f000 fe99 	bl	8003ac0 <HAL_Delay>
        for (int k=0;k<K;k++){
 8002d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d92:	3301      	adds	r3, #1
 8002d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d98:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002d9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	f6ff af4e 	blt.w	8002c40 <calibrate_sensors+0x1cc>
        }

        diff_avg[i]            = (uint16_t)(acc / K);
 8002da4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002da6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	3398      	adds	r3, #152	@ 0x98
 8002db8:	443b      	add	r3, r7
 8002dba:	f823 2c5c 	strh.w	r2, [r3, #-92]
        diff_noise[i]          = (float)(maxv - minv);
 8002dbe:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8002dc2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	ee07 3a90 	vmov	s15, r3
 8002dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	3398      	adds	r3, #152	@ 0x98
 8002dd8:	443b      	add	r3, r7
 8002dda:	3b6c      	subs	r3, #108	@ 0x6c
 8002ddc:	edc3 7a00 	vstr	s15, [r3]
        sensor_cal.noise_levels[i] = diff_noise[i];
 8002de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	3398      	adds	r3, #152	@ 0x98
 8002de8:	443b      	add	r3, r7
 8002dea:	3b6c      	subs	r3, #108	@ 0x6c
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	49ac      	ldr	r1, [pc, #688]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002df4:	3308      	adds	r3, #8
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	601a      	str	r2, [r3, #0]
        sensor_cal.sensor_min[i]   = minv;
 8002dfe:	4aa8      	ldr	r2, [pc, #672]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e04:	3308      	adds	r3, #8
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8002e0e:	805a      	strh	r2, [r3, #2]
        sensor_cal.sensor_max[i]   = maxv;
 8002e10:	4aa3      	ldr	r2, [pc, #652]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e16:	330c      	adds	r3, #12
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8002e20:	805a      	strh	r2, [r3, #2]
    for (int i=0;i<4;i++){
 8002e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e26:	3301      	adds	r3, #1
 8002e28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	f77f aef5 	ble.w	8002c20 <calibrate_sensors+0x1ac>
    }

    send_bluetooth_message("Differential response (ON-OFF):\r\n");
 8002e36:	489b      	ldr	r0, [pc, #620]	@ (80030a4 <calibrate_sensors+0x630>)
 8002e38:	f7fe f8d8 	bl	8000fec <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %u (noise: %.1f)\r\n", diff_avg[0], diff_noise[0]);
 8002e3c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002e3e:	461c      	mov	r4, r3
 8002e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd fb88 	bl	8000558 <__aeabi_f2d>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	4896      	ldr	r0, [pc, #600]	@ (80030a8 <calibrate_sensors+0x634>)
 8002e50:	f7fe f8e2 	bl	8001018 <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %u (noise: %.1f)\r\n", diff_avg[1], diff_noise[1]);
 8002e54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e56:	461c      	mov	r4, r3
 8002e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fb7c 	bl	8000558 <__aeabi_f2d>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4621      	mov	r1, r4
 8002e66:	4891      	ldr	r0, [pc, #580]	@ (80030ac <calibrate_sensors+0x638>)
 8002e68:	f7fe f8d6 	bl	8001018 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %u (noise: %.1f)\r\n", diff_avg[2], diff_noise[2]);
 8002e6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e70:	461c      	mov	r4, r3
 8002e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fb6f 	bl	8000558 <__aeabi_f2d>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4621      	mov	r1, r4
 8002e80:	488b      	ldr	r0, [pc, #556]	@ (80030b0 <calibrate_sensors+0x63c>)
 8002e82:	f7fe f8c9 	bl	8001018 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %u (noise: %.1f)\r\n", diff_avg[3], diff_noise[3]);
 8002e86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002e8a:	461c      	mov	r4, r3
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb62 	bl	8000558 <__aeabi_f2d>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4621      	mov	r1, r4
 8002e9a:	4886      	ldr	r0, [pc, #536]	@ (80030b4 <calibrate_sensors+0x640>)
 8002e9c:	f7fe f8bc 	bl	8001018 <send_bluetooth_printf>

    // Phase 4: Set DIFFERENTIAL thresholds (same domain as runtime readings)
    send_bluetooth_message("Phase 4: Calculating differential wall thresholds\r\n");
 8002ea0:	4885      	ldr	r0, [pc, #532]	@ (80030b8 <calibrate_sensors+0x644>)
 8002ea2:	f7fe f8a3 	bl	8000fec <send_bluetooth_message>


    for (int i=0;i<4;i++){
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002eac:	e057      	b.n	8002f5e <calibrate_sensors+0x4ea>
        float frac   = (i < 2) ? 0.40f : 0.30f;   // front vs side
 8002eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	dc01      	bgt.n	8002eba <calibrate_sensors+0x446>
 8002eb6:	4b81      	ldr	r3, [pc, #516]	@ (80030bc <calibrate_sensors+0x648>)
 8002eb8:	e000      	b.n	8002ebc <calibrate_sensors+0x448>
 8002eba:	4b81      	ldr	r3, [pc, #516]	@ (80030c0 <calibrate_sensors+0x64c>)
 8002ebc:	667b      	str	r3, [r7, #100]	@ 0x64
        float margin = 3.0f * sensor_cal.noise_levels[i];
 8002ebe:	4a78      	ldr	r2, [pc, #480]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	3304      	adds	r3, #4
 8002ecc:	edd3 7a00 	vldr	s15, [r3]
 8002ed0:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ed8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        float th     = frac * (float)diff_avg[i] + margin;
 8002edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	3398      	adds	r3, #152	@ 0x98
 8002ee4:	443b      	add	r3, r7
 8002ee6:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ef2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f02:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

        if (th < 60.0f)   th = 60.0f;             // reasonable floor
 8002f06:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002f0a:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80030c4 <calibrate_sensors+0x650>
 8002f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f16:	d501      	bpl.n	8002f1c <calibrate_sensors+0x4a8>
 8002f18:	4b6b      	ldr	r3, [pc, #428]	@ (80030c8 <calibrate_sensors+0x654>)
 8002f1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (th > 3500.0f) th = 3500.0f;
 8002f1c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002f20:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80030cc <calibrate_sensors+0x658>
 8002f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	dd01      	ble.n	8002f32 <calibrate_sensors+0x4be>
 8002f2e:	4b68      	ldr	r3, [pc, #416]	@ (80030d0 <calibrate_sensors+0x65c>)
 8002f30:	67fb      	str	r3, [r7, #124]	@ 0x7c

        sensor_cal.wall_thresholds[i] = (uint16_t)(th + 0.5f);
 8002f32:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002f36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f42:	ee17 3a90 	vmov	r3, s15
 8002f46:	b299      	uxth	r1, r3
 8002f48:	4a55      	ldr	r2, [pc, #340]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002f4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f4e:	3304      	adds	r3, #4
 8002f50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i=0;i<4;i++){
 8002f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	dda3      	ble.n	8002eae <calibrate_sensors+0x43a>
    }

    send_bluetooth_message("Differential wall thresholds:\r\n");
 8002f66:	485b      	ldr	r0, [pc, #364]	@ (80030d4 <calibrate_sensors+0x660>)
 8002f68:	f7fe f840 	bl	8000fec <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %u\r\n", sensor_cal.wall_thresholds[0]);
 8002f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002f6e:	891b      	ldrh	r3, [r3, #8]
 8002f70:	4619      	mov	r1, r3
 8002f72:	4859      	ldr	r0, [pc, #356]	@ (80030d8 <calibrate_sensors+0x664>)
 8002f74:	f7fe f850 	bl	8001018 <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %u\r\n", sensor_cal.wall_thresholds[1]);
 8002f78:	4b49      	ldr	r3, [pc, #292]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002f7a:	895b      	ldrh	r3, [r3, #10]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4857      	ldr	r0, [pc, #348]	@ (80030dc <calibrate_sensors+0x668>)
 8002f80:	f7fe f84a 	bl	8001018 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %u\r\n", sensor_cal.wall_thresholds[2]);
 8002f84:	4b46      	ldr	r3, [pc, #280]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002f86:	899b      	ldrh	r3, [r3, #12]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4855      	ldr	r0, [pc, #340]	@ (80030e0 <calibrate_sensors+0x66c>)
 8002f8c:	f7fe f844 	bl	8001018 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %u\r\n", sensor_cal.wall_thresholds[3]);
 8002f90:	4b43      	ldr	r3, [pc, #268]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002f92:	89db      	ldrh	r3, [r3, #14]
 8002f94:	4619      	mov	r1, r3
 8002f96:	4853      	ldr	r0, [pc, #332]	@ (80030e4 <calibrate_sensors+0x670>)
 8002f98:	f7fe f83e 	bl	8001018 <send_bluetooth_printf>



    // Phase 5: Battery Baseline Measurement
    send_bluetooth_message("Phase 5: Battery voltage baseline measurement\r\n");
 8002f9c:	4852      	ldr	r0, [pc, #328]	@ (80030e8 <calibrate_sensors+0x674>)
 8002f9e:	f7fe f825 	bl	8000fec <send_bluetooth_message>

    uint32_t battery_sum = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 20; i++) {
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002faa:	e00d      	b.n	8002fc8 <calibrate_sensors+0x554>
        battery_sum += read_adc_channel(ADC_CHANNEL_0);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7ff faf3 	bl	8002598 <read_adc_channel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fb8:	4413      	add	r3, r2
 8002fba:	67bb      	str	r3, [r7, #120]	@ 0x78
        HAL_Delay(10);
 8002fbc:	200a      	movs	r0, #10
 8002fbe:	f000 fd7f 	bl	8003ac0 <HAL_Delay>
    for (int i = 0; i < 20; i++) {
 8002fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fca:	2b13      	cmp	r3, #19
 8002fcc:	ddee      	ble.n	8002fac <calibrate_sensors+0x538>
    }
    sensor_cal.battery_baseline = battery_sum / 20;
 8002fce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fd0:	4a46      	ldr	r2, [pc, #280]	@ (80030ec <calibrate_sensors+0x678>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	4b31      	ldr	r3, [pc, #196]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002fdc:	821a      	strh	r2, [r3, #16]

    float battery_voltage = (sensor_cal.battery_baseline * 3.3f) / 4096.0f;
 8002fde:	4b30      	ldr	r3, [pc, #192]	@ (80030a0 <calibrate_sensors+0x62c>)
 8002fe0:	8a1b      	ldrh	r3, [r3, #16]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fea:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80030f0 <calibrate_sensors+0x67c>
 8002fee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ff2:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80030f4 <calibrate_sensors+0x680>
 8002ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ffa:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    send_bluetooth_printf("Battery baseline: %d (%.2fV)\r\n",
                         sensor_cal.battery_baseline, battery_voltage);
 8002ffe:	4b28      	ldr	r3, [pc, #160]	@ (80030a0 <calibrate_sensors+0x62c>)
 8003000:	8a1b      	ldrh	r3, [r3, #16]
    send_bluetooth_printf("Battery baseline: %d (%.2fV)\r\n",
 8003002:	461c      	mov	r4, r3
 8003004:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003006:	f7fd faa7 	bl	8000558 <__aeabi_f2d>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4621      	mov	r1, r4
 8003010:	4839      	ldr	r0, [pc, #228]	@ (80030f8 <calibrate_sensors+0x684>)
 8003012:	f7fe f801 	bl	8001018 <send_bluetooth_printf>

    // Phase 6: Sensor Health Validation
//    send_bluetooth_message("Phase 6: Sensor health validation\r\n");
//
    bool all_sensors_healthy = true;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
//            all_sensors_healthy = false;
//        }
//    }

    // Check battery
    if (battery_voltage < 3.0f) {
 800301c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003020:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	d506      	bpl.n	800303c <calibrate_sensors+0x5c8>
        send_bluetooth_message("⚠️ Battery: Low voltage detected\r\n");
 800302e:	4833      	ldr	r0, [pc, #204]	@ (80030fc <calibrate_sensors+0x688>)
 8003030:	f7fd ffdc 	bl	8000fec <send_bluetooth_message>
        all_sensors_healthy = false;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800303a:	e012      	b.n	8003062 <calibrate_sensors+0x5ee>
    } else if (battery_voltage > 4.5f) {
 800303c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003040:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8003044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304c:	dd06      	ble.n	800305c <calibrate_sensors+0x5e8>
        send_bluetooth_message("⚠️ Battery: Voltage too high\r\n");
 800304e:	482c      	ldr	r0, [pc, #176]	@ (8003100 <calibrate_sensors+0x68c>)
 8003050:	f7fd ffcc 	bl	8000fec <send_bluetooth_message>
        all_sensors_healthy = false;
 8003054:	2300      	movs	r3, #0
 8003056:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800305a:	e002      	b.n	8003062 <calibrate_sensors+0x5ee>
    } else {
        send_bluetooth_message("✅ Battery: Healthy\r\n");
 800305c:	4829      	ldr	r0, [pc, #164]	@ (8003104 <calibrate_sensors+0x690>)
 800305e:	f7fd ffc5 	bl	8000fec <send_bluetooth_message>
    }

    // Phase 7: Calibration Complete
    sensor_cal.calibration_valid = all_sensors_healthy;
 8003062:	4a0f      	ldr	r2, [pc, #60]	@ (80030a0 <calibrate_sensors+0x62c>)
 8003064:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003068:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22

    turn_off_emitters(); // Save power
 800306c:	f7ff fa74 	bl	8002558 <turn_off_emitters>

    if (sensor_cal.calibration_valid) {
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <calibrate_sensors+0x62c>)
 8003072:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <calibrate_sensors+0x614>
        send_bluetooth_message("✅ SENSOR CALIBRATION COMPLETE - All systems nominal\r\n");
 800307a:	4823      	ldr	r0, [pc, #140]	@ (8003108 <calibrate_sensors+0x694>)
 800307c:	f7fd ffb6 	bl	8000fec <send_bluetooth_message>
        send_bluetooth_message("Dynamic thresholds will be used for wall detection\r\n");
 8003080:	4822      	ldr	r0, [pc, #136]	@ (800310c <calibrate_sensors+0x698>)
 8003082:	f7fd ffb3 	bl	8000fec <send_bluetooth_message>
 8003086:	e005      	b.n	8003094 <calibrate_sensors+0x620>
    } else {
        send_bluetooth_message("⚠️ SENSOR CALIBRATION COMPLETE - Some issues detected\r\n");
 8003088:	4821      	ldr	r0, [pc, #132]	@ (8003110 <calibrate_sensors+0x69c>)
 800308a:	f7fd ffaf 	bl	8000fec <send_bluetooth_message>
        send_bluetooth_message("Robot will continue with degraded sensor performance\r\n");
 800308e:	4821      	ldr	r0, [pc, #132]	@ (8003114 <calibrate_sensors+0x6a0>)
 8003090:	f7fd ffac 	bl	8000fec <send_bluetooth_message>
    }

    send_bluetooth_message("=====================================\r\n");
 8003094:	4820      	ldr	r0, [pc, #128]	@ (8003118 <calibrate_sensors+0x6a4>)
 8003096:	f7fd ffa9 	bl	8000fec <send_bluetooth_message>
}
 800309a:	379c      	adds	r7, #156	@ 0x9c
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}
 80030a0:	2000148c 	.word	0x2000148c
 80030a4:	0800c54c 	.word	0x0800c54c
 80030a8:	0800c570 	.word	0x0800c570
 80030ac:	0800c594 	.word	0x0800c594
 80030b0:	0800c5b8 	.word	0x0800c5b8
 80030b4:	0800c5dc 	.word	0x0800c5dc
 80030b8:	0800c600 	.word	0x0800c600
 80030bc:	3ecccccd 	.word	0x3ecccccd
 80030c0:	3e99999a 	.word	0x3e99999a
 80030c4:	42700000 	.word	0x42700000
 80030c8:	42700000 	.word	0x42700000
 80030cc:	455ac000 	.word	0x455ac000
 80030d0:	455ac000 	.word	0x455ac000
 80030d4:	0800c634 	.word	0x0800c634
 80030d8:	0800c654 	.word	0x0800c654
 80030dc:	0800c668 	.word	0x0800c668
 80030e0:	0800c67c 	.word	0x0800c67c
 80030e4:	0800c690 	.word	0x0800c690
 80030e8:	0800c6a4 	.word	0x0800c6a4
 80030ec:	cccccccd 	.word	0xcccccccd
 80030f0:	40533333 	.word	0x40533333
 80030f4:	45800000 	.word	0x45800000
 80030f8:	0800c6d4 	.word	0x0800c6d4
 80030fc:	0800c6f4 	.word	0x0800c6f4
 8003100:	0800c71c 	.word	0x0800c71c
 8003104:	0800c740 	.word	0x0800c740
 8003108:	0800c758 	.word	0x0800c758
 800310c:	0800c790 	.word	0x0800c790
 8003110:	0800c7c8 	.word	0x0800c7c8
 8003114:	0800c804 	.word	0x0800c804
 8003118:	0800c83c 	.word	0x0800c83c

0800311c <get_calibrated_threshold>:
 * @brief Get calibrated wall threshold for specific sensor
 * @param sensor_index: 0=Front_Left, 1=Front_Right, 2=Side_Left, 3=Side_Right
 * @return Calibrated threshold value
 */
uint16_t get_calibrated_threshold(int sensor_index)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
    if (sensor_index < 0 || sensor_index > 3 || !sensor_cal.calibration_valid) {
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db0a      	blt.n	8003140 <get_calibrated_threshold+0x24>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b03      	cmp	r3, #3
 800312e:	dc07      	bgt.n	8003140 <get_calibrated_threshold+0x24>
 8003130:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <get_calibrated_threshold+0x4c>)
 8003132:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <get_calibrated_threshold+0x36>
        // Return default thresholds if calibration failed
        return (sensor_index < 2) ? WALL_THRESHOLD_FRONT : WALL_THRESHOLD_SIDE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b01      	cmp	r3, #1
 8003144:	dc02      	bgt.n	800314c <get_calibrated_threshold+0x30>
 8003146:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800314a:	e007      	b.n	800315c <get_calibrated_threshold+0x40>
 800314c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003150:	e004      	b.n	800315c <get_calibrated_threshold+0x40>
    }

    return sensor_cal.wall_thresholds[sensor_index];
 8003152:	4a05      	ldr	r2, [pc, #20]	@ (8003168 <get_calibrated_threshold+0x4c>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3304      	adds	r3, #4
 8003158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	2000148c 	.word	0x2000148c

0800316c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_MspInit+0x4c>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	4a0f      	ldr	r2, [pc, #60]	@ (80031b8 <HAL_MspInit+0x4c>)
 800317c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003180:	6453      	str	r3, [r2, #68]	@ 0x44
 8003182:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <HAL_MspInit+0x4c>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_MspInit+0x4c>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	4a08      	ldr	r2, [pc, #32]	@ (80031b8 <HAL_MspInit+0x4c>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	@ 0x40
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_MspInit+0x4c>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800

080031bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	@ 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <HAL_ADC_MspInit+0x7c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d127      	bne.n	800322e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	4b16      	ldr	r3, [pc, #88]	@ (800323c <HAL_ADC_MspInit+0x80>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	4a15      	ldr	r2, [pc, #84]	@ (800323c <HAL_ADC_MspInit+0x80>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ee:	4b13      	ldr	r3, [pc, #76]	@ (800323c <HAL_ADC_MspInit+0x80>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b0f      	ldr	r3, [pc, #60]	@ (800323c <HAL_ADC_MspInit+0x80>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	4a0e      	ldr	r2, [pc, #56]	@ (800323c <HAL_ADC_MspInit+0x80>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6313      	str	r3, [r2, #48]	@ 0x30
 800320a:	4b0c      	ldr	r3, [pc, #48]	@ (800323c <HAL_ADC_MspInit+0x80>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 8003216:	233d      	movs	r3, #61	@ 0x3d
 8003218:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800321a:	2303      	movs	r3, #3
 800321c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003222:	f107 0314 	add.w	r3, r7, #20
 8003226:	4619      	mov	r1, r3
 8003228:	4805      	ldr	r0, [pc, #20]	@ (8003240 <HAL_ADC_MspInit+0x84>)
 800322a:	f001 fa03 	bl	8004634 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800322e:	bf00      	nop
 8003230:	3728      	adds	r7, #40	@ 0x28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40012000 	.word	0x40012000
 800323c:	40023800 	.word	0x40023800
 8003240:	40020000 	.word	0x40020000

08003244 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	@ 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a19      	ldr	r2, [pc, #100]	@ (80032c8 <HAL_SPI_MspInit+0x84>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d12c      	bne.n	80032c0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a17      	ldr	r2, [pc, #92]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	4a10      	ldr	r2, [pc, #64]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	6313      	str	r3, [r2, #48]	@ 0x30
 8003292:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <HAL_SPI_MspInit+0x88>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 800329e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80032a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ac:	2303      	movs	r3, #3
 80032ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032b0:	2305      	movs	r3, #5
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4619      	mov	r1, r3
 80032ba:	4805      	ldr	r0, [pc, #20]	@ (80032d0 <HAL_SPI_MspInit+0x8c>)
 80032bc:	f001 f9ba 	bl	8004634 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80032c0:	bf00      	nop
 80032c2:	3728      	adds	r7, #40	@ 0x28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40003800 	.word	0x40003800
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40020400 	.word	0x40020400

080032d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a18      	ldr	r2, [pc, #96]	@ (8003344 <HAL_TIM_Base_MspInit+0x70>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d116      	bne.n	8003314 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b17      	ldr	r3, [pc, #92]	@ (8003348 <HAL_TIM_Base_MspInit+0x74>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	4a16      	ldr	r2, [pc, #88]	@ (8003348 <HAL_TIM_Base_MspInit+0x74>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032f6:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <HAL_TIM_Base_MspInit+0x74>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2107      	movs	r1, #7
 8003306:	2019      	movs	r0, #25
 8003308:	f001 f8cb 	bl	80044a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800330c:	2019      	movs	r0, #25
 800330e:	f001 f8e4 	bl	80044da <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003312:	e012      	b.n	800333a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0c      	ldr	r2, [pc, #48]	@ (800334c <HAL_TIM_Base_MspInit+0x78>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10d      	bne.n	800333a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_TIM_Base_MspInit+0x74>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	4a08      	ldr	r2, [pc, #32]	@ (8003348 <HAL_TIM_Base_MspInit+0x74>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	6413      	str	r3, [r2, #64]	@ 0x40
 800332e:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_TIM_Base_MspInit+0x74>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40010000 	.word	0x40010000
 8003348:	40023800 	.word	0x40023800
 800334c:	40000400 	.word	0x40000400

08003350 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08c      	sub	sp, #48	@ 0x30
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 031c 	add.w	r3, r7, #28
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d14b      	bne.n	800340a <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	4b3f      	ldr	r3, [pc, #252]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	4a3e      	ldr	r2, [pc, #248]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6413      	str	r3, [r2, #64]	@ 0x40
 8003382:	4b3c      	ldr	r3, [pc, #240]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	4b38      	ldr	r3, [pc, #224]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	4a37      	ldr	r2, [pc, #220]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6313      	str	r3, [r2, #48]	@ 0x30
 800339e:	4b35      	ldr	r3, [pc, #212]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	4b31      	ldr	r3, [pc, #196]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	4a30      	ldr	r2, [pc, #192]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 80033c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033cc:	2302      	movs	r3, #2
 80033ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033d8:	2301      	movs	r3, #1
 80033da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 80033dc:	f107 031c 	add.w	r3, r7, #28
 80033e0:	4619      	mov	r1, r3
 80033e2:	4825      	ldr	r0, [pc, #148]	@ (8003478 <HAL_TIM_Encoder_MspInit+0x128>)
 80033e4:	f001 f926 	bl	8004634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 80033e8:	2308      	movs	r3, #8
 80033ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033f8:	2301      	movs	r3, #1
 80033fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	4619      	mov	r1, r3
 8003402:	481e      	ldr	r0, [pc, #120]	@ (800347c <HAL_TIM_Encoder_MspInit+0x12c>)
 8003404:	f001 f916 	bl	8004634 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003408:	e030      	b.n	800346c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1c      	ldr	r2, [pc, #112]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x130>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d12b      	bne.n	800346c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	4b16      	ldr	r3, [pc, #88]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	4a15      	ldr	r2, [pc, #84]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6413      	str	r3, [r2, #64]	@ 0x40
 8003424:	4b13      	ldr	r3, [pc, #76]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	4a0e      	ldr	r2, [pc, #56]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 800343a:	f043 0302 	orr.w	r3, r3, #2
 800343e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003440:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <HAL_TIM_Encoder_MspInit+0x124>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 800344c:	23c0      	movs	r3, #192	@ 0xc0
 800344e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800345c:	2302      	movs	r3, #2
 800345e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003460:	f107 031c 	add.w	r3, r7, #28
 8003464:	4619      	mov	r1, r3
 8003466:	4805      	ldr	r0, [pc, #20]	@ (800347c <HAL_TIM_Encoder_MspInit+0x12c>)
 8003468:	f001 f8e4 	bl	8004634 <HAL_GPIO_Init>
}
 800346c:	bf00      	nop
 800346e:	3730      	adds	r7, #48	@ 0x30
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40023800 	.word	0x40023800
 8003478:	40020000 	.word	0x40020000
 800347c:	40020400 	.word	0x40020400
 8003480:	40000800 	.word	0x40000800

08003484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	@ 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a33      	ldr	r2, [pc, #204]	@ (8003570 <HAL_TIM_MspPostInit+0xec>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d11f      	bne.n	80034e6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	4b32      	ldr	r3, [pc, #200]	@ (8003574 <HAL_TIM_MspPostInit+0xf0>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	4a31      	ldr	r2, [pc, #196]	@ (8003574 <HAL_TIM_MspPostInit+0xf0>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003574 <HAL_TIM_MspPostInit+0xf0>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 80034c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034d4:	2301      	movs	r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4619      	mov	r1, r3
 80034de:	4826      	ldr	r0, [pc, #152]	@ (8003578 <HAL_TIM_MspPostInit+0xf4>)
 80034e0:	f001 f8a8 	bl	8004634 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034e4:	e040      	b.n	8003568 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a24      	ldr	r2, [pc, #144]	@ (800357c <HAL_TIM_MspPostInit+0xf8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d13b      	bne.n	8003568 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003574 <HAL_TIM_MspPostInit+0xf0>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003574 <HAL_TIM_MspPostInit+0xf0>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003500:	4b1c      	ldr	r3, [pc, #112]	@ (8003574 <HAL_TIM_MspPostInit+0xf0>)
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	4b18      	ldr	r3, [pc, #96]	@ (8003574 <HAL_TIM_MspPostInit+0xf0>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	4a17      	ldr	r2, [pc, #92]	@ (8003574 <HAL_TIM_MspPostInit+0xf0>)
 8003516:	f043 0302 	orr.w	r3, r3, #2
 800351a:	6313      	str	r3, [r2, #48]	@ 0x30
 800351c:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_TIM_MspPostInit+0xf0>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8003528:	23c0      	movs	r3, #192	@ 0xc0
 800352a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003534:	2300      	movs	r3, #0
 8003536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003538:	2302      	movs	r3, #2
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	4619      	mov	r1, r3
 8003542:	480d      	ldr	r0, [pc, #52]	@ (8003578 <HAL_TIM_MspPostInit+0xf4>)
 8003544:	f001 f876 	bl	8004634 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 8003548:	2303      	movs	r3, #3
 800354a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003554:	2300      	movs	r3, #0
 8003556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003558:	2302      	movs	r3, #2
 800355a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	4619      	mov	r1, r3
 8003562:	4807      	ldr	r0, [pc, #28]	@ (8003580 <HAL_TIM_MspPostInit+0xfc>)
 8003564:	f001 f866 	bl	8004634 <HAL_GPIO_Init>
}
 8003568:	bf00      	nop
 800356a:	3728      	adds	r7, #40	@ 0x28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40010000 	.word	0x40010000
 8003574:	40023800 	.word	0x40023800
 8003578:	40020000 	.word	0x40020000
 800357c:	40000400 	.word	0x40000400
 8003580:	40020400 	.word	0x40020400

08003584 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	@ 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <HAL_UART_MspInit+0x94>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d134      	bne.n	8003610 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	4b1c      	ldr	r3, [pc, #112]	@ (800361c <HAL_UART_MspInit+0x98>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	4a1b      	ldr	r2, [pc, #108]	@ (800361c <HAL_UART_MspInit+0x98>)
 80035b0:	f043 0320 	orr.w	r3, r3, #32
 80035b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b6:	4b19      	ldr	r3, [pc, #100]	@ (800361c <HAL_UART_MspInit+0x98>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b15      	ldr	r3, [pc, #84]	@ (800361c <HAL_UART_MspInit+0x98>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	4a14      	ldr	r2, [pc, #80]	@ (800361c <HAL_UART_MspInit+0x98>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d2:	4b12      	ldr	r3, [pc, #72]	@ (800361c <HAL_UART_MspInit+0x98>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 80035de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80035e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ec:	2303      	movs	r3, #3
 80035ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035f0:	2308      	movs	r3, #8
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4619      	mov	r1, r3
 80035fa:	4809      	ldr	r0, [pc, #36]	@ (8003620 <HAL_UART_MspInit+0x9c>)
 80035fc:	f001 f81a 	bl	8004634 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003600:	2200      	movs	r2, #0
 8003602:	2106      	movs	r1, #6
 8003604:	2047      	movs	r0, #71	@ 0x47
 8003606:	f000 ff4c 	bl	80044a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800360a:	2047      	movs	r0, #71	@ 0x47
 800360c:	f000 ff65 	bl	80044da <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8003610:	bf00      	nop
 8003612:	3728      	adds	r7, #40	@ 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40011400 	.word	0x40011400
 800361c:	40023800 	.word	0x40023800
 8003620:	40020000 	.word	0x40020000

08003624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003628:	bf00      	nop
 800362a:	e7fd      	b.n	8003628 <NMI_Handler+0x4>

0800362c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <HardFault_Handler+0x4>

08003634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <MemManage_Handler+0x4>

0800363c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <BusFault_Handler+0x4>

08003644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <UsageFault_Handler+0x4>

0800364c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800367a:	f000 fa01 	bl	8003a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}

08003682 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8003686:	2002      	movs	r0, #2
 8003688:	f001 f98c 	bl	80049a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800368c:	bf00      	nop
 800368e:	bd80      	pop	{r7, pc}

08003690 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003694:	4802      	ldr	r0, [pc, #8]	@ (80036a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003696:	f002 feb7 	bl	8006408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200002ac 	.word	0x200002ac

080036a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 80036a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80036ac:	f001 f97a 	bl	80049a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80036b8:	4802      	ldr	r0, [pc, #8]	@ (80036c4 <USART6_IRQHandler+0x10>)
 80036ba:	f003 fdd3 	bl	8007264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200003cc 	.word	0x200003cc

080036c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return 1;
 80036cc:	2301      	movs	r3, #1
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <_kill>:

int _kill(int pid, int sig)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036e2:	f005 fae5 	bl	8008cb0 <__errno>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2216      	movs	r2, #22
 80036ea:	601a      	str	r2, [r3, #0]
  return -1;
 80036ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_exit>:

void _exit (int status)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ffe7 	bl	80036d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800370a:	bf00      	nop
 800370c:	e7fd      	b.n	800370a <_exit+0x12>

0800370e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e00a      	b.n	8003736 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003720:	f3af 8000 	nop.w
 8003724:	4601      	mov	r1, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	60ba      	str	r2, [r7, #8]
 800372c:	b2ca      	uxtb	r2, r1
 800372e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	3301      	adds	r3, #1
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	429a      	cmp	r2, r3
 800373c:	dbf0      	blt.n	8003720 <_read+0x12>
  }

  return len;
 800373e:	687b      	ldr	r3, [r7, #4]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e009      	b.n	800376e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	60ba      	str	r2, [r7, #8]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3301      	adds	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	429a      	cmp	r2, r3
 8003774:	dbf1      	blt.n	800375a <_write+0x12>
  }
  return len;
 8003776:	687b      	ldr	r3, [r7, #4]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <_close>:

int _close(int file)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037a8:	605a      	str	r2, [r3, #4]
  return 0;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <_isatty>:

int _isatty(int file)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037c0:	2301      	movs	r3, #1
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037f0:	4a14      	ldr	r2, [pc, #80]	@ (8003844 <_sbrk+0x5c>)
 80037f2:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <_sbrk+0x60>)
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037fc:	4b13      	ldr	r3, [pc, #76]	@ (800384c <_sbrk+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d102      	bne.n	800380a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003804:	4b11      	ldr	r3, [pc, #68]	@ (800384c <_sbrk+0x64>)
 8003806:	4a12      	ldr	r2, [pc, #72]	@ (8003850 <_sbrk+0x68>)
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800380a:	4b10      	ldr	r3, [pc, #64]	@ (800384c <_sbrk+0x64>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	429a      	cmp	r2, r3
 8003816:	d207      	bcs.n	8003828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003818:	f005 fa4a 	bl	8008cb0 <__errno>
 800381c:	4603      	mov	r3, r0
 800381e:	220c      	movs	r2, #12
 8003820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	e009      	b.n	800383c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003828:	4b08      	ldr	r3, [pc, #32]	@ (800384c <_sbrk+0x64>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800382e:	4b07      	ldr	r3, [pc, #28]	@ (800384c <_sbrk+0x64>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	4a05      	ldr	r2, [pc, #20]	@ (800384c <_sbrk+0x64>)
 8003838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800383a:	68fb      	ldr	r3, [r7, #12]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20020000 	.word	0x20020000
 8003848:	00000400 	.word	0x00000400
 800384c:	200014c4 	.word	0x200014c4
 8003850:	20001618 	.word	0x20001618

08003854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003858:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <SystemInit+0x20>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	4a05      	ldr	r2, [pc, #20]	@ (8003874 <SystemInit+0x20>)
 8003860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	460a      	mov	r2, r1
 8003882:	71fb      	strb	r3, [r7, #7]
 8003884:	4613      	mov	r3, r2
 8003886:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	2110      	movs	r1, #16
 8003898:	4808      	ldr	r0, [pc, #32]	@ (80038bc <led_status+0x44>)
 800389a:	f001 f84f 	bl	800493c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800389e:	79bb      	ldrb	r3, [r7, #6]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	2120      	movs	r1, #32
 80038ae:	4803      	ldr	r0, [pc, #12]	@ (80038bc <led_status+0x44>)
 80038b0:	f001 f844 	bl	800493c <HAL_GPIO_WritePin>
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40020400 	.word	0x40020400

080038c0 <led_sequence_startup>:

/**
 * @brief LED sequence for different states
 */
void led_sequence_startup(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	e010      	b.n	80038ee <led_sequence_startup+0x2e>
        led_status(1, 0);
 80038cc:	2100      	movs	r1, #0
 80038ce:	2001      	movs	r0, #1
 80038d0:	f7ff ffd2 	bl	8003878 <led_status>
        HAL_Delay(150);
 80038d4:	2096      	movs	r0, #150	@ 0x96
 80038d6:	f000 f8f3 	bl	8003ac0 <HAL_Delay>
        led_status(0, 1);
 80038da:	2101      	movs	r1, #1
 80038dc:	2000      	movs	r0, #0
 80038de:	f7ff ffcb 	bl	8003878 <led_status>
        HAL_Delay(150);
 80038e2:	2096      	movs	r0, #150	@ 0x96
 80038e4:	f000 f8ec 	bl	8003ac0 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3301      	adds	r3, #1
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	ddeb      	ble.n	80038cc <led_sequence_startup+0xc>
    }
    led_status(0, 0);
 80038f4:	2100      	movs	r1, #0
 80038f6:	2000      	movs	r0, #0
 80038f8:	f7ff ffbe 	bl	8003878 <led_status>
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <system_health_check>:

/**
 * @brief System health check
 */
bool system_health_check(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
    bool health_ok = true;
 800390a:	2301      	movs	r3, #1
 800390c:	71fb      	strb	r3, [r7, #7]

    // Check battery voltage
    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 800390e:	4b1a      	ldr	r3, [pc, #104]	@ (8003978 <system_health_check+0x74>)
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003916:	4293      	cmp	r3, r2
 8003918:	d806      	bhi.n	8003928 <system_health_check+0x24>
        send_bluetooth_message("WARNING: Low battery detected!\r\n");
 800391a:	4818      	ldr	r0, [pc, #96]	@ (800397c <system_health_check+0x78>)
 800391c:	f7fd fb66 	bl	8000fec <send_bluetooth_message>
        play_battery_warning();
 8003920:	f7fd fb4a 	bl	8000fb8 <play_battery_warning>
        health_ok = false;
 8003924:	2300      	movs	r3, #0
 8003926:	71fb      	strb	r3, [r7, #7]
    }

    // Check sensor readings
    if (sensors.front_left == 0 && sensors.front_right == 0 &&
 8003928:	4b13      	ldr	r3, [pc, #76]	@ (8003978 <system_health_check+0x74>)
 800392a:	891b      	ldrh	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d110      	bne.n	8003952 <system_health_check+0x4e>
 8003930:	4b11      	ldr	r3, [pc, #68]	@ (8003978 <system_health_check+0x74>)
 8003932:	885b      	ldrh	r3, [r3, #2]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10c      	bne.n	8003952 <system_health_check+0x4e>
        sensors.side_left == 0 && sensors.side_right == 0) {
 8003938:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <system_health_check+0x74>)
 800393a:	88db      	ldrh	r3, [r3, #6]
    if (sensors.front_left == 0 && sensors.front_right == 0 &&
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <system_health_check+0x4e>
        sensors.side_left == 0 && sensors.side_right == 0) {
 8003940:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <system_health_check+0x74>)
 8003942:	889b      	ldrh	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <system_health_check+0x4e>
        send_bluetooth_message("WARNING: All sensors reading zero!\r\n");
 8003948:	480d      	ldr	r0, [pc, #52]	@ (8003980 <system_health_check+0x7c>)
 800394a:	f7fd fb4f 	bl	8000fec <send_bluetooth_message>
        health_ok = false;
 800394e:	2300      	movs	r3, #0
 8003950:	71fb      	strb	r3, [r7, #7]
    }

    // Check gyroscope communication
    uint8_t gyro_id = mpu9250_read_register(0x75);
 8003952:	2075      	movs	r0, #117	@ 0x75
 8003954:	f7fd fbf0 	bl	8001138 <mpu9250_read_register>
 8003958:	4603      	mov	r3, r0
 800395a:	71bb      	strb	r3, [r7, #6]
    if (gyro_id != 0x71) {
 800395c:	79bb      	ldrb	r3, [r7, #6]
 800395e:	2b71      	cmp	r3, #113	@ 0x71
 8003960:	d004      	beq.n	800396c <system_health_check+0x68>
        send_bluetooth_message("WARNING: Gyroscope communication issue!\r\n");
 8003962:	4808      	ldr	r0, [pc, #32]	@ (8003984 <system_health_check+0x80>)
 8003964:	f7fd fb42 	bl	8000fec <send_bluetooth_message>
        health_ok = false;
 8003968:	2300      	movs	r3, #0
 800396a:	71fb      	strb	r3, [r7, #7]
    }

    return health_ok;
 800396c:	79fb      	ldrb	r3, [r7, #7]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20001428 	.word	0x20001428
 800397c:	0800c88c 	.word	0x0800c88c
 8003980:	0800c8b0 	.word	0x0800c8b0
 8003984:	0800c8d8 	.word	0x0800c8d8

08003988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800398c:	f7ff ff62 	bl	8003854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003990:	480c      	ldr	r0, [pc, #48]	@ (80039c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003992:	490d      	ldr	r1, [pc, #52]	@ (80039c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003994:	4a0d      	ldr	r2, [pc, #52]	@ (80039cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003998:	e002      	b.n	80039a0 <LoopCopyDataInit>

0800399a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800399a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800399c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800399e:	3304      	adds	r3, #4

080039a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039a4:	d3f9      	bcc.n	800399a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039a8:	4c0a      	ldr	r4, [pc, #40]	@ (80039d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039ac:	e001      	b.n	80039b2 <LoopFillZerobss>

080039ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b0:	3204      	adds	r2, #4

080039b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039b4:	d3fb      	bcc.n	80039ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039b6:	f005 f981 	bl	8008cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ba:	f7fd ffb1 	bl	8001920 <main>
  bx  lr    
 80039be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80039c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039c8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80039cc:	0800ccbc 	.word	0x0800ccbc
  ldr r2, =_sbss
 80039d0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80039d4:	20001618 	.word	0x20001618

080039d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039d8:	e7fe      	b.n	80039d8 <ADC_IRQHandler>
	...

080039dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039e0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a1c <HAL_Init+0x40>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0d      	ldr	r2, [pc, #52]	@ (8003a1c <HAL_Init+0x40>)
 80039e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_Init+0x40>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0a      	ldr	r2, [pc, #40]	@ (8003a1c <HAL_Init+0x40>)
 80039f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <HAL_Init+0x40>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a07      	ldr	r2, [pc, #28]	@ (8003a1c <HAL_Init+0x40>)
 80039fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a04:	2003      	movs	r0, #3
 8003a06:	f000 fd41 	bl	800448c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a0a:	200f      	movs	r0, #15
 8003a0c:	f000 f808 	bl	8003a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a10:	f7ff fbac 	bl	800316c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023c00 	.word	0x40023c00

08003a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a28:	4b12      	ldr	r3, [pc, #72]	@ (8003a74 <HAL_InitTick+0x54>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <HAL_InitTick+0x58>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fd59 	bl	80044f6 <HAL_SYSTICK_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e00e      	b.n	8003a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b0f      	cmp	r3, #15
 8003a52:	d80a      	bhi.n	8003a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a54:	2200      	movs	r2, #0
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	f000 fd21 	bl	80044a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a60:	4a06      	ldr	r2, [pc, #24]	@ (8003a7c <HAL_InitTick+0x5c>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000004 	.word	0x20000004
 8003a78:	2000000c 	.word	0x2000000c
 8003a7c:	20000008 	.word	0x20000008

08003a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_IncTick+0x20>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <HAL_IncTick+0x24>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4413      	add	r3, r2
 8003a90:	4a04      	ldr	r2, [pc, #16]	@ (8003aa4 <HAL_IncTick+0x24>)
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	2000000c 	.word	0x2000000c
 8003aa4:	200014c8 	.word	0x200014c8

08003aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8003aac:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <HAL_GetTick+0x14>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	200014c8 	.word	0x200014c8

08003ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac8:	f7ff ffee 	bl	8003aa8 <HAL_GetTick>
 8003acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d005      	beq.n	8003ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ada:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <HAL_Delay+0x44>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ae6:	bf00      	nop
 8003ae8:	f7ff ffde 	bl	8003aa8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d8f7      	bhi.n	8003ae8 <HAL_Delay+0x28>
  {
  }
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	2000000c 	.word	0x2000000c

08003b08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e033      	b.n	8003b86 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff fb48 	bl	80031bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d118      	bne.n	8003b78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b4e:	f023 0302 	bic.w	r3, r3, #2
 8003b52:	f043 0202 	orr.w	r2, r3, #2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 faca 	bl	80040f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	f023 0303 	bic.w	r3, r3, #3
 8003b6e:	f043 0201 	orr.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b76:	e001      	b.n	8003b7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_ADC_Start+0x1a>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e097      	b.n	8003cda <HAL_ADC_Start+0x14a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d018      	beq.n	8003bf2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bd0:	4b45      	ldr	r3, [pc, #276]	@ (8003ce8 <HAL_ADC_Start+0x158>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a45      	ldr	r2, [pc, #276]	@ (8003cec <HAL_ADC_Start+0x15c>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0c9a      	lsrs	r2, r3, #18
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003be4:	e002      	b.n	8003bec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f9      	bne.n	8003be6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d15f      	bne.n	8003cc0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3e:	d106      	bne.n	8003c4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c44:	f023 0206 	bic.w	r2, r3, #6
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c4c:	e002      	b.n	8003c54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c5c:	4b24      	ldr	r3, [pc, #144]	@ (8003cf0 <HAL_ADC_Start+0x160>)
 8003c5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003c68:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d129      	bne.n	8003cd8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	e020      	b.n	8003cd8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	@ (8003cf4 <HAL_ADC_Start+0x164>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d11b      	bne.n	8003cd8 <HAL_ADC_Start+0x148>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d114      	bne.n	8003cd8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	e00b      	b.n	8003cd8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	f043 0210 	orr.w	r2, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd0:	f043 0201 	orr.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000004 	.word	0x20000004
 8003cec:	431bde83 	.word	0x431bde83
 8003cf0:	40012300 	.word	0x40012300
 8003cf4:	40012000 	.word	0x40012000

08003cf8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_ADC_Stop+0x16>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e021      	b.n	8003d52 <HAL_ADC_Stop+0x5a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7a:	d113      	bne.n	8003da4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d8a:	d10b      	bne.n	8003da4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e063      	b.n	8003e6c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da4:	f7ff fe80 	bl	8003aa8 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003daa:	e021      	b.n	8003df0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d01d      	beq.n	8003df0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <HAL_ADC_PollForConversion+0x6c>
 8003dba:	f7ff fe75 	bl	8003aa8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d212      	bcs.n	8003df0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d00b      	beq.n	8003df0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e03d      	b.n	8003e6c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d1d6      	bne.n	8003dac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f06f 0212 	mvn.w	r2, #18
 8003e06:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d123      	bne.n	8003e6a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11f      	bne.n	8003e6a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d006      	beq.n	8003e46 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d111      	bne.n	8003e6a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	f043 0201 	orr.w	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e113      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x244>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b09      	cmp	r3, #9
 8003eba:	d925      	bls.n	8003f08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	3b1e      	subs	r3, #30
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	400a      	ands	r2, r1
 8003ee0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68d9      	ldr	r1, [r3, #12]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4403      	add	r3, r0
 8003efa:	3b1e      	subs	r3, #30
 8003efc:	409a      	lsls	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	e022      	b.n	8003f4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6919      	ldr	r1, [r3, #16]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	4613      	mov	r3, r2
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4413      	add	r3, r2
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43da      	mvns	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	400a      	ands	r2, r1
 8003f2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6919      	ldr	r1, [r3, #16]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4403      	add	r3, r0
 8003f44:	409a      	lsls	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d824      	bhi.n	8003fa0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	3b05      	subs	r3, #5
 8003f68:	221f      	movs	r2, #31
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	400a      	ands	r2, r1
 8003f76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4618      	mov	r0, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	3b05      	subs	r3, #5
 8003f92:	fa00 f203 	lsl.w	r2, r0, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f9e:	e04c      	b.n	800403a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d824      	bhi.n	8003ff2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3b23      	subs	r3, #35	@ 0x23
 8003fba:	221f      	movs	r2, #31
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43da      	mvns	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	400a      	ands	r2, r1
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3b23      	subs	r3, #35	@ 0x23
 8003fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ff0:	e023      	b.n	800403a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	3b41      	subs	r3, #65	@ 0x41
 8004004:	221f      	movs	r2, #31
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43da      	mvns	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	400a      	ands	r2, r1
 8004012:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	4618      	mov	r0, r3
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	3b41      	subs	r3, #65	@ 0x41
 800402e:	fa00 f203 	lsl.w	r2, r0, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800403a:	4b29      	ldr	r3, [pc, #164]	@ (80040e0 <HAL_ADC_ConfigChannel+0x250>)
 800403c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a28      	ldr	r2, [pc, #160]	@ (80040e4 <HAL_ADC_ConfigChannel+0x254>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d10f      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x1d8>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b12      	cmp	r3, #18
 800404e:	d10b      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1d      	ldr	r2, [pc, #116]	@ (80040e4 <HAL_ADC_ConfigChannel+0x254>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d12b      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x23a>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1c      	ldr	r2, [pc, #112]	@ (80040e8 <HAL_ADC_ConfigChannel+0x258>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <HAL_ADC_ConfigChannel+0x1f4>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b11      	cmp	r3, #17
 8004082:	d122      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a11      	ldr	r2, [pc, #68]	@ (80040e8 <HAL_ADC_ConfigChannel+0x258>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040a6:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <HAL_ADC_ConfigChannel+0x25c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a11      	ldr	r2, [pc, #68]	@ (80040f0 <HAL_ADC_ConfigChannel+0x260>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	0c9a      	lsrs	r2, r3, #18
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040bc:	e002      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f9      	bne.n	80040be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40012300 	.word	0x40012300
 80040e4:	40012000 	.word	0x40012000
 80040e8:	10000012 	.word	0x10000012
 80040ec:	20000004 	.word	0x20000004
 80040f0:	431bde83 	.word	0x431bde83

080040f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040fc:	4b79      	ldr	r3, [pc, #484]	@ (80042e4 <ADC_Init+0x1f0>)
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	021a      	lsls	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800414c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6899      	ldr	r1, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	4a58      	ldr	r2, [pc, #352]	@ (80042e8 <ADC_Init+0x1f4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800419a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6899      	ldr	r1, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6899      	ldr	r1, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e00f      	b.n	80041f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0202 	bic.w	r2, r2, #2
 8004200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6899      	ldr	r1, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7e1b      	ldrb	r3, [r3, #24]
 800420c:	005a      	lsls	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800422e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800423e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	3b01      	subs	r3, #1
 800424c:	035a      	lsls	r2, r3, #13
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	e007      	b.n	8004268 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004266:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004276:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	3b01      	subs	r3, #1
 8004284:	051a      	lsls	r2, r3, #20
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800429c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6899      	ldr	r1, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042aa:	025a      	lsls	r2, r3, #9
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	029a      	lsls	r2, r3, #10
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40012300 	.word	0x40012300
 80042e8:	0f000001 	.word	0x0f000001

080042ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <__NVIC_SetPriorityGrouping+0x44>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004308:	4013      	ands	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800431c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800431e:	4a04      	ldr	r2, [pc, #16]	@ (8004330 <__NVIC_SetPriorityGrouping+0x44>)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	60d3      	str	r3, [r2, #12]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004338:	4b04      	ldr	r3, [pc, #16]	@ (800434c <__NVIC_GetPriorityGrouping+0x18>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	f003 0307 	and.w	r3, r3, #7
}
 8004342:	4618      	mov	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	db0b      	blt.n	800437a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	4907      	ldr	r1, [pc, #28]	@ (8004388 <__NVIC_EnableIRQ+0x38>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2001      	movs	r0, #1
 8004372:	fa00 f202 	lsl.w	r2, r0, r2
 8004376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	e000e100 	.word	0xe000e100

0800438c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	6039      	str	r1, [r7, #0]
 8004396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439c:	2b00      	cmp	r3, #0
 800439e:	db0a      	blt.n	80043b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	490c      	ldr	r1, [pc, #48]	@ (80043d8 <__NVIC_SetPriority+0x4c>)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	0112      	lsls	r2, r2, #4
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	440b      	add	r3, r1
 80043b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b4:	e00a      	b.n	80043cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4908      	ldr	r1, [pc, #32]	@ (80043dc <__NVIC_SetPriority+0x50>)
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	3b04      	subs	r3, #4
 80043c4:	0112      	lsls	r2, r2, #4
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	440b      	add	r3, r1
 80043ca:	761a      	strb	r2, [r3, #24]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000e100 	.word	0xe000e100
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b089      	sub	sp, #36	@ 0x24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f1c3 0307 	rsb	r3, r3, #7
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	bf28      	it	cs
 80043fe:	2304      	movcs	r3, #4
 8004400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3304      	adds	r3, #4
 8004406:	2b06      	cmp	r3, #6
 8004408:	d902      	bls.n	8004410 <NVIC_EncodePriority+0x30>
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3b03      	subs	r3, #3
 800440e:	e000      	b.n	8004412 <NVIC_EncodePriority+0x32>
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004414:	f04f 32ff 	mov.w	r2, #4294967295
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43da      	mvns	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	401a      	ands	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004428:	f04f 31ff 	mov.w	r1, #4294967295
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	43d9      	mvns	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004438:	4313      	orrs	r3, r2
         );
}
 800443a:	4618      	mov	r0, r3
 800443c:	3724      	adds	r7, #36	@ 0x24
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3b01      	subs	r3, #1
 8004454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004458:	d301      	bcc.n	800445e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800445a:	2301      	movs	r3, #1
 800445c:	e00f      	b.n	800447e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800445e:	4a0a      	ldr	r2, [pc, #40]	@ (8004488 <SysTick_Config+0x40>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3b01      	subs	r3, #1
 8004464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004466:	210f      	movs	r1, #15
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	f7ff ff8e 	bl	800438c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <SysTick_Config+0x40>)
 8004472:	2200      	movs	r2, #0
 8004474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004476:	4b04      	ldr	r3, [pc, #16]	@ (8004488 <SysTick_Config+0x40>)
 8004478:	2207      	movs	r2, #7
 800447a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	e000e010 	.word	0xe000e010

0800448c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff ff29 	bl	80042ec <__NVIC_SetPriorityGrouping>
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b086      	sub	sp, #24
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	4603      	mov	r3, r0
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b4:	f7ff ff3e 	bl	8004334 <__NVIC_GetPriorityGrouping>
 80044b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	6978      	ldr	r0, [r7, #20]
 80044c0:	f7ff ff8e 	bl	80043e0 <NVIC_EncodePriority>
 80044c4:	4602      	mov	r2, r0
 80044c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff ff5d 	bl	800438c <__NVIC_SetPriority>
}
 80044d2:	bf00      	nop
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	4603      	mov	r3, r0
 80044e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ff31 	bl	8004350 <__NVIC_EnableIRQ>
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff ffa2 	bl	8004448 <SysTick_Config>
 8004504:	4603      	mov	r3, r0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800451c:	f7ff fac4 	bl	8003aa8 <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d008      	beq.n	8004540 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2280      	movs	r2, #128	@ 0x80
 8004532:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e052      	b.n	80045e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0216 	bic.w	r2, r2, #22
 800454e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800455e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <HAL_DMA_Abort+0x62>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0208 	bic.w	r2, r2, #8
 800457e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004590:	e013      	b.n	80045ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004592:	f7ff fa89 	bl	8003aa8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b05      	cmp	r3, #5
 800459e:	d90c      	bls.n	80045ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2203      	movs	r2, #3
 80045aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e015      	b.n	80045e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e4      	bne.n	8004592 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045cc:	223f      	movs	r2, #63	@ 0x3f
 80045ce:	409a      	lsls	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d004      	beq.n	800460c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2280      	movs	r2, #128	@ 0x80
 8004606:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e00c      	b.n	8004626 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2205      	movs	r2, #5
 8004610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0201 	bic.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	@ 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	e159      	b.n	8004904 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004650:	2201      	movs	r2, #1
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	429a      	cmp	r2, r3
 800466a:	f040 8148 	bne.w	80048fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b01      	cmp	r3, #1
 8004678:	d005      	beq.n	8004686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004682:	2b02      	cmp	r3, #2
 8004684:	d130      	bne.n	80046e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	2203      	movs	r2, #3
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4013      	ands	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046bc:	2201      	movs	r2, #1
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 0201 	and.w	r2, r3, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d017      	beq.n	8004724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	2203      	movs	r2, #3
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d123      	bne.n	8004778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	08da      	lsrs	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3208      	adds	r2, #8
 8004738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	220f      	movs	r2, #15
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4313      	orrs	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	08da      	lsrs	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3208      	adds	r2, #8
 8004772:	69b9      	ldr	r1, [r7, #24]
 8004774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	2203      	movs	r2, #3
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 0203 	and.w	r2, r3, #3
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80a2 	beq.w	80048fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	4b57      	ldr	r3, [pc, #348]	@ (800491c <HAL_GPIO_Init+0x2e8>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c2:	4a56      	ldr	r2, [pc, #344]	@ (800491c <HAL_GPIO_Init+0x2e8>)
 80047c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ca:	4b54      	ldr	r3, [pc, #336]	@ (800491c <HAL_GPIO_Init+0x2e8>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047d6:	4a52      	ldr	r2, [pc, #328]	@ (8004920 <HAL_GPIO_Init+0x2ec>)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	3302      	adds	r3, #2
 80047de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	220f      	movs	r2, #15
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	43db      	mvns	r3, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4013      	ands	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a49      	ldr	r2, [pc, #292]	@ (8004924 <HAL_GPIO_Init+0x2f0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d019      	beq.n	8004836 <HAL_GPIO_Init+0x202>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a48      	ldr	r2, [pc, #288]	@ (8004928 <HAL_GPIO_Init+0x2f4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <HAL_GPIO_Init+0x1fe>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a47      	ldr	r2, [pc, #284]	@ (800492c <HAL_GPIO_Init+0x2f8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00d      	beq.n	800482e <HAL_GPIO_Init+0x1fa>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a46      	ldr	r2, [pc, #280]	@ (8004930 <HAL_GPIO_Init+0x2fc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <HAL_GPIO_Init+0x1f6>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a45      	ldr	r2, [pc, #276]	@ (8004934 <HAL_GPIO_Init+0x300>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <HAL_GPIO_Init+0x1f2>
 8004822:	2304      	movs	r3, #4
 8004824:	e008      	b.n	8004838 <HAL_GPIO_Init+0x204>
 8004826:	2307      	movs	r3, #7
 8004828:	e006      	b.n	8004838 <HAL_GPIO_Init+0x204>
 800482a:	2303      	movs	r3, #3
 800482c:	e004      	b.n	8004838 <HAL_GPIO_Init+0x204>
 800482e:	2302      	movs	r3, #2
 8004830:	e002      	b.n	8004838 <HAL_GPIO_Init+0x204>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <HAL_GPIO_Init+0x204>
 8004836:	2300      	movs	r3, #0
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	f002 0203 	and.w	r2, r2, #3
 800483e:	0092      	lsls	r2, r2, #2
 8004840:	4093      	lsls	r3, r2
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004848:	4935      	ldr	r1, [pc, #212]	@ (8004920 <HAL_GPIO_Init+0x2ec>)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	3302      	adds	r3, #2
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004856:	4b38      	ldr	r3, [pc, #224]	@ (8004938 <HAL_GPIO_Init+0x304>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800487a:	4a2f      	ldr	r2, [pc, #188]	@ (8004938 <HAL_GPIO_Init+0x304>)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004880:	4b2d      	ldr	r3, [pc, #180]	@ (8004938 <HAL_GPIO_Init+0x304>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048a4:	4a24      	ldr	r2, [pc, #144]	@ (8004938 <HAL_GPIO_Init+0x304>)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048aa:	4b23      	ldr	r3, [pc, #140]	@ (8004938 <HAL_GPIO_Init+0x304>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	43db      	mvns	r3, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4013      	ands	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004938 <HAL_GPIO_Init+0x304>)
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048d4:	4b18      	ldr	r3, [pc, #96]	@ (8004938 <HAL_GPIO_Init+0x304>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	43db      	mvns	r3, r3
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4013      	ands	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004938 <HAL_GPIO_Init+0x304>)
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3301      	adds	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	2b0f      	cmp	r3, #15
 8004908:	f67f aea2 	bls.w	8004650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	3724      	adds	r7, #36	@ 0x24
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800
 8004920:	40013800 	.word	0x40013800
 8004924:	40020000 	.word	0x40020000
 8004928:	40020400 	.word	0x40020400
 800492c:	40020800 	.word	0x40020800
 8004930:	40020c00 	.word	0x40020c00
 8004934:	40021000 	.word	0x40021000
 8004938:	40013c00 	.word	0x40013c00

0800493c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	807b      	strh	r3, [r7, #2]
 8004948:	4613      	mov	r3, r2
 800494a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800494c:	787b      	ldrb	r3, [r7, #1]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004952:	887a      	ldrh	r2, [r7, #2]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004958:	e003      	b.n	8004962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800495a:	887b      	ldrh	r3, [r7, #2]
 800495c:	041a      	lsls	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	619a      	str	r2, [r3, #24]
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004980:	887a      	ldrh	r2, [r7, #2]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4013      	ands	r3, r2
 8004986:	041a      	lsls	r2, r3, #16
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	43d9      	mvns	r1, r3
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	400b      	ands	r3, r1
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	619a      	str	r2, [r3, #24]
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049ae:	4b08      	ldr	r3, [pc, #32]	@ (80049d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d006      	beq.n	80049c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049ba:	4a05      	ldr	r2, [pc, #20]	@ (80049d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd fbbc 	bl	8002140 <HAL_GPIO_EXTI_Callback>
  }
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40013c00 	.word	0x40013c00

080049d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e267      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d075      	beq.n	8004ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049f2:	4b88      	ldr	r3, [pc, #544]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d00c      	beq.n	8004a18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fe:	4b85      	ldr	r3, [pc, #532]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d112      	bne.n	8004a30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0a:	4b82      	ldr	r3, [pc, #520]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	4b7e      	ldr	r3, [pc, #504]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d05b      	beq.n	8004adc <HAL_RCC_OscConfig+0x108>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d157      	bne.n	8004adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e242      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a38:	d106      	bne.n	8004a48 <HAL_RCC_OscConfig+0x74>
 8004a3a:	4b76      	ldr	r3, [pc, #472]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a75      	ldr	r2, [pc, #468]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e01d      	b.n	8004a84 <HAL_RCC_OscConfig+0xb0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x98>
 8004a52:	4b70      	ldr	r3, [pc, #448]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6f      	ldr	r2, [pc, #444]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a6c      	ldr	r2, [pc, #432]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0xb0>
 8004a6c:	4b69      	ldr	r3, [pc, #420]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a68      	ldr	r2, [pc, #416]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b66      	ldr	r3, [pc, #408]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a65      	ldr	r2, [pc, #404]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8c:	f7ff f80c 	bl	8003aa8 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7ff f808 	bl	8003aa8 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	@ 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e207      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0xc0>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7fe fff8 	bl	8003aa8 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fe fff4 	bl	8003aa8 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	@ 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e1f3      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	4b51      	ldr	r3, [pc, #324]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0xe8>
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d063      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004aea:	4b4a      	ldr	r3, [pc, #296]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af6:	4b47      	ldr	r3, [pc, #284]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d11c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b02:	4b44      	ldr	r3, [pc, #272]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d116      	bne.n	8004b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0e:	4b41      	ldr	r3, [pc, #260]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_RCC_OscConfig+0x152>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e1c7      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b26:	4b3b      	ldr	r3, [pc, #236]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4937      	ldr	r1, [pc, #220]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	e03a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b44:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <HAL_RCC_OscConfig+0x244>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4a:	f7fe ffad 	bl	8003aa8 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b52:	f7fe ffa9 	bl	8003aa8 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e1a8      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	4b2b      	ldr	r3, [pc, #172]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b70:	4b28      	ldr	r3, [pc, #160]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	4925      	ldr	r1, [pc, #148]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]
 8004b84:	e015      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b86:	4b24      	ldr	r3, [pc, #144]	@ (8004c18 <HAL_RCC_OscConfig+0x244>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fe ff8c 	bl	8003aa8 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b94:	f7fe ff88 	bl	8003aa8 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e187      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d036      	beq.n	8004c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d016      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc6:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <HAL_RCC_OscConfig+0x248>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fe ff6c 	bl	8003aa8 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7fe ff68 	bl	8003aa8 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e167      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <HAL_RCC_OscConfig+0x240>)
 8004be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x200>
 8004bf2:	e01b      	b.n	8004c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf4:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <HAL_RCC_OscConfig+0x248>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfa:	f7fe ff55 	bl	8003aa8 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c00:	e00e      	b.n	8004c20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c02:	f7fe ff51 	bl	8003aa8 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d907      	bls.n	8004c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e150      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
 8004c14:	40023800 	.word	0x40023800
 8004c18:	42470000 	.word	0x42470000
 8004c1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c20:	4b88      	ldr	r3, [pc, #544]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ea      	bne.n	8004c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8097 	beq.w	8004d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3e:	4b81      	ldr	r3, [pc, #516]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	4a7c      	ldr	r2, [pc, #496]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c66:	2301      	movs	r3, #1
 8004c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6a:	4b77      	ldr	r3, [pc, #476]	@ (8004e48 <HAL_RCC_OscConfig+0x474>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d118      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c76:	4b74      	ldr	r3, [pc, #464]	@ (8004e48 <HAL_RCC_OscConfig+0x474>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a73      	ldr	r2, [pc, #460]	@ (8004e48 <HAL_RCC_OscConfig+0x474>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c82:	f7fe ff11 	bl	8003aa8 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8a:	f7fe ff0d 	bl	8003aa8 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e10c      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004e48 <HAL_RCC_OscConfig+0x474>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d106      	bne.n	8004cbe <HAL_RCC_OscConfig+0x2ea>
 8004cb0:	4b64      	ldr	r3, [pc, #400]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb4:	4a63      	ldr	r2, [pc, #396]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cbc:	e01c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x324>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x30c>
 8004cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cca:	4a5e      	ldr	r2, [pc, #376]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	f043 0304 	orr.w	r3, r3, #4
 8004cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd6:	4a5b      	ldr	r2, [pc, #364]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cde:	e00b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x324>
 8004ce0:	4b58      	ldr	r3, [pc, #352]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce4:	4a57      	ldr	r2, [pc, #348]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cec:	4b55      	ldr	r3, [pc, #340]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf0:	4a54      	ldr	r2, [pc, #336]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	f023 0304 	bic.w	r3, r3, #4
 8004cf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d015      	beq.n	8004d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fe fed2 	bl	8003aa8 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7fe fece 	bl	8003aa8 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e0cb      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1e:	4b49      	ldr	r3, [pc, #292]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0ee      	beq.n	8004d08 <HAL_RCC_OscConfig+0x334>
 8004d2a:	e014      	b.n	8004d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2c:	f7fe febc 	bl	8003aa8 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d34:	f7fe feb8 	bl	8003aa8 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e0b5      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1ee      	bne.n	8004d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5c:	4b39      	ldr	r3, [pc, #228]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	4a38      	ldr	r2, [pc, #224]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80a1 	beq.w	8004eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d72:	4b34      	ldr	r3, [pc, #208]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d05c      	beq.n	8004e38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d141      	bne.n	8004e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d86:	4b31      	ldr	r3, [pc, #196]	@ (8004e4c <HAL_RCC_OscConfig+0x478>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8c:	f7fe fe8c 	bl	8003aa8 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fe fe88 	bl	8003aa8 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e087      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	4b27      	ldr	r3, [pc, #156]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	019b      	lsls	r3, r3, #6
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	491b      	ldr	r1, [pc, #108]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e4c <HAL_RCC_OscConfig+0x478>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de2:	f7fe fe61 	bl	8003aa8 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dea:	f7fe fe5d 	bl	8003aa8 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e05c      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfc:	4b11      	ldr	r3, [pc, #68]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x416>
 8004e08:	e054      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0a:	4b10      	ldr	r3, [pc, #64]	@ (8004e4c <HAL_RCC_OscConfig+0x478>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e10:	f7fe fe4a 	bl	8003aa8 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e18:	f7fe fe46 	bl	8003aa8 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e045      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2a:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x444>
 8004e36:	e03d      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e038      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
 8004e44:	40023800 	.word	0x40023800
 8004e48:	40007000 	.word	0x40007000
 8004e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e50:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec0 <HAL_RCC_OscConfig+0x4ec>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d028      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d121      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d11a      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e80:	4013      	ands	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d111      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	085b      	lsrs	r3, r3, #1
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d107      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800

08004ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0cc      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed8:	4b68      	ldr	r3, [pc, #416]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d90c      	bls.n	8004f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee6:	4b65      	ldr	r3, [pc, #404]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b63      	ldr	r3, [pc, #396]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0b8      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d020      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f18:	4b59      	ldr	r3, [pc, #356]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4a58      	ldr	r2, [pc, #352]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f30:	4b53      	ldr	r3, [pc, #332]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4a52      	ldr	r2, [pc, #328]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f3c:	4b50      	ldr	r3, [pc, #320]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	494d      	ldr	r1, [pc, #308]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d044      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b47      	ldr	r3, [pc, #284]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d119      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e07f      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d003      	beq.n	8004f82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d107      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f82:	4b3f      	ldr	r3, [pc, #252]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e06f      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f92:	4b3b      	ldr	r3, [pc, #236]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e067      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fa2:	4b37      	ldr	r3, [pc, #220]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f023 0203 	bic.w	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4934      	ldr	r1, [pc, #208]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb4:	f7fe fd78 	bl	8003aa8 <HAL_GetTick>
 8004fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fbc:	f7fe fd74 	bl	8003aa8 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e04f      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 020c 	and.w	r2, r3, #12
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d1eb      	bne.n	8004fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe4:	4b25      	ldr	r3, [pc, #148]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d20c      	bcs.n	800500c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	4b22      	ldr	r3, [pc, #136]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b20      	ldr	r3, [pc, #128]	@ (800507c <HAL_RCC_ClockConfig+0x1b8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e032      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005018:	4b19      	ldr	r3, [pc, #100]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4916      	ldr	r1, [pc, #88]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005036:	4b12      	ldr	r3, [pc, #72]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	490e      	ldr	r1, [pc, #56]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800504a:	f000 f821 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 800504e:	4602      	mov	r2, r0
 8005050:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	490a      	ldr	r1, [pc, #40]	@ (8005084 <HAL_RCC_ClockConfig+0x1c0>)
 800505c:	5ccb      	ldrb	r3, [r1, r3]
 800505e:	fa22 f303 	lsr.w	r3, r2, r3
 8005062:	4a09      	ldr	r2, [pc, #36]	@ (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005066:	4b09      	ldr	r3, [pc, #36]	@ (800508c <HAL_RCC_ClockConfig+0x1c8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe fcd8 	bl	8003a20 <HAL_InitTick>

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40023c00 	.word	0x40023c00
 8005080:	40023800 	.word	0x40023800
 8005084:	0800c91c 	.word	0x0800c91c
 8005088:	20000004 	.word	0x20000004
 800508c:	20000008 	.word	0x20000008

08005090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005094:	b090      	sub	sp, #64	@ 0x40
 8005096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050a8:	4b59      	ldr	r3, [pc, #356]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x180>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 030c 	and.w	r3, r3, #12
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d00d      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x40>
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	f200 80a1 	bhi.w	80051fc <HAL_RCC_GetSysClockFreq+0x16c>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x34>
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d003      	beq.n	80050ca <HAL_RCC_GetSysClockFreq+0x3a>
 80050c2:	e09b      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050c4:	4b53      	ldr	r3, [pc, #332]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x184>)
 80050c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050c8:	e09b      	b.n	8005202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050ca:	4b53      	ldr	r3, [pc, #332]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x188>)
 80050cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050ce:	e098      	b.n	8005202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x180>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050da:	4b4d      	ldr	r3, [pc, #308]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x180>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d028      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x180>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	099b      	lsrs	r3, r3, #6
 80050ec:	2200      	movs	r2, #0
 80050ee:	623b      	str	r3, [r7, #32]
 80050f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050f8:	2100      	movs	r1, #0
 80050fa:	4b47      	ldr	r3, [pc, #284]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x188>)
 80050fc:	fb03 f201 	mul.w	r2, r3, r1
 8005100:	2300      	movs	r3, #0
 8005102:	fb00 f303 	mul.w	r3, r0, r3
 8005106:	4413      	add	r3, r2
 8005108:	4a43      	ldr	r2, [pc, #268]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x188>)
 800510a:	fba0 1202 	umull	r1, r2, r0, r2
 800510e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005110:	460a      	mov	r2, r1
 8005112:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005116:	4413      	add	r3, r2
 8005118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800511a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511c:	2200      	movs	r2, #0
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	61fa      	str	r2, [r7, #28]
 8005122:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005126:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800512a:	f7fb fd45 	bl	8000bb8 <__aeabi_uldivmod>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4613      	mov	r3, r2
 8005134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005136:	e053      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005138:	4b35      	ldr	r3, [pc, #212]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x180>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	099b      	lsrs	r3, r3, #6
 800513e:	2200      	movs	r2, #0
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	617a      	str	r2, [r7, #20]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800514a:	f04f 0b00 	mov.w	fp, #0
 800514e:	4652      	mov	r2, sl
 8005150:	465b      	mov	r3, fp
 8005152:	f04f 0000 	mov.w	r0, #0
 8005156:	f04f 0100 	mov.w	r1, #0
 800515a:	0159      	lsls	r1, r3, #5
 800515c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005160:	0150      	lsls	r0, r2, #5
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	ebb2 080a 	subs.w	r8, r2, sl
 800516a:	eb63 090b 	sbc.w	r9, r3, fp
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800517a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800517e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005182:	ebb2 0408 	subs.w	r4, r2, r8
 8005186:	eb63 0509 	sbc.w	r5, r3, r9
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	00eb      	lsls	r3, r5, #3
 8005194:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005198:	00e2      	lsls	r2, r4, #3
 800519a:	4614      	mov	r4, r2
 800519c:	461d      	mov	r5, r3
 800519e:	eb14 030a 	adds.w	r3, r4, sl
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	eb45 030b 	adc.w	r3, r5, fp
 80051a8:	607b      	str	r3, [r7, #4]
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051b6:	4629      	mov	r1, r5
 80051b8:	028b      	lsls	r3, r1, #10
 80051ba:	4621      	mov	r1, r4
 80051bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051c0:	4621      	mov	r1, r4
 80051c2:	028a      	lsls	r2, r1, #10
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ca:	2200      	movs	r2, #0
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	60fa      	str	r2, [r7, #12]
 80051d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051d4:	f7fb fcf0 	bl	8000bb8 <__aeabi_uldivmod>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4613      	mov	r3, r2
 80051de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x180>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	3301      	adds	r3, #1
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80051f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80051f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051fa:	e002      	b.n	8005202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051fc:	4b05      	ldr	r3, [pc, #20]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x184>)
 80051fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005204:	4618      	mov	r0, r3
 8005206:	3740      	adds	r7, #64	@ 0x40
 8005208:	46bd      	mov	sp, r7
 800520a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520e:	bf00      	nop
 8005210:	40023800 	.word	0x40023800
 8005214:	00f42400 	.word	0x00f42400
 8005218:	017d7840 	.word	0x017d7840

0800521c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005220:	4b03      	ldr	r3, [pc, #12]	@ (8005230 <HAL_RCC_GetHCLKFreq+0x14>)
 8005222:	681b      	ldr	r3, [r3, #0]
}
 8005224:	4618      	mov	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	20000004 	.word	0x20000004

08005234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005238:	f7ff fff0 	bl	800521c <HAL_RCC_GetHCLKFreq>
 800523c:	4602      	mov	r2, r0
 800523e:	4b05      	ldr	r3, [pc, #20]	@ (8005254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	0a9b      	lsrs	r3, r3, #10
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	4903      	ldr	r1, [pc, #12]	@ (8005258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800524a:	5ccb      	ldrb	r3, [r1, r3]
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40023800 	.word	0x40023800
 8005258:	0800c92c 	.word	0x0800c92c

0800525c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005260:	f7ff ffdc 	bl	800521c <HAL_RCC_GetHCLKFreq>
 8005264:	4602      	mov	r2, r0
 8005266:	4b05      	ldr	r3, [pc, #20]	@ (800527c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	0b5b      	lsrs	r3, r3, #13
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	4903      	ldr	r1, [pc, #12]	@ (8005280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005272:	5ccb      	ldrb	r3, [r1, r3]
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005278:	4618      	mov	r0, r3
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40023800 	.word	0x40023800
 8005280:	0800c92c 	.word	0x0800c92c

08005284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e07b      	b.n	800538e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d108      	bne.n	80052b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052a6:	d009      	beq.n	80052bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	61da      	str	r2, [r3, #28]
 80052ae:	e005      	b.n	80052bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fd ffb4 	bl	8003244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005340:	ea42 0103 	orr.w	r1, r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	0c1b      	lsrs	r3, r3, #16
 800535a:	f003 0104 	and.w	r1, r3, #4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	f003 0210 	and.w	r2, r3, #16
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800537c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b088      	sub	sp, #32
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	603b      	str	r3, [r7, #0]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053a6:	f7fe fb7f 	bl	8003aa8 <HAL_GetTick>
 80053aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d001      	beq.n	80053c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
 80053be:	e12a      	b.n	8005616 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Transmit+0x36>
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e122      	b.n	8005616 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_SPI_Transmit+0x48>
 80053da:	2302      	movs	r3, #2
 80053dc:	e11b      	b.n	8005616 <HAL_SPI_Transmit+0x280>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2203      	movs	r2, #3
 80053ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	88fa      	ldrh	r2, [r7, #6]
 80053fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	88fa      	ldrh	r2, [r7, #6]
 8005404:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542c:	d10f      	bne.n	800544e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800543c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800544c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005458:	2b40      	cmp	r3, #64	@ 0x40
 800545a:	d007      	beq.n	800546c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800546a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005474:	d152      	bne.n	800551c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_SPI_Transmit+0xee>
 800547e:	8b7b      	ldrh	r3, [r7, #26]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d145      	bne.n	8005510 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005494:	1c9a      	adds	r2, r3, #2
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054a8:	e032      	b.n	8005510 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d112      	bne.n	80054de <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054bc:	881a      	ldrh	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c8:	1c9a      	adds	r2, r3, #2
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054dc:	e018      	b.n	8005510 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054de:	f7fe fae3 	bl	8003aa8 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d803      	bhi.n	80054f6 <HAL_SPI_Transmit+0x160>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d102      	bne.n	80054fc <HAL_SPI_Transmit+0x166>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d109      	bne.n	8005510 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e082      	b.n	8005616 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1c7      	bne.n	80054aa <HAL_SPI_Transmit+0x114>
 800551a:	e053      	b.n	80055c4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_SPI_Transmit+0x194>
 8005524:	8b7b      	ldrh	r3, [r7, #26]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d147      	bne.n	80055ba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	7812      	ldrb	r2, [r2, #0]
 8005536:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005550:	e033      	b.n	80055ba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b02      	cmp	r3, #2
 800555e:	d113      	bne.n	8005588 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	7812      	ldrb	r2, [r2, #0]
 800556c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005586:	e018      	b.n	80055ba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005588:	f7fe fa8e 	bl	8003aa8 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d803      	bhi.n	80055a0 <HAL_SPI_Transmit+0x20a>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	d102      	bne.n	80055a6 <HAL_SPI_Transmit+0x210>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e02d      	b.n	8005616 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1c6      	bne.n	8005552 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fbd9 	bl	8005d80 <SPI_EndRxTxTransaction>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005614:	2300      	movs	r3, #0
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b088      	sub	sp, #32
 8005622:	af02      	add	r7, sp, #8
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b01      	cmp	r3, #1
 8005638:	d001      	beq.n	800563e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800563a:	2302      	movs	r3, #2
 800563c:	e104      	b.n	8005848 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_SPI_Receive+0x2c>
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e0fc      	b.n	8005848 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005656:	d112      	bne.n	800567e <HAL_SPI_Receive+0x60>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10e      	bne.n	800567e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2204      	movs	r2, #4
 8005664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005668:	88fa      	ldrh	r2, [r7, #6]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	4613      	mov	r3, r2
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f8eb 	bl	8005850 <HAL_SPI_TransmitReceive>
 800567a:	4603      	mov	r3, r0
 800567c:	e0e4      	b.n	8005848 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800567e:	f7fe fa13 	bl	8003aa8 <HAL_GetTick>
 8005682:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_SPI_Receive+0x74>
 800568e:	2302      	movs	r3, #2
 8005690:	e0da      	b.n	8005848 <HAL_SPI_Receive+0x22a>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2204      	movs	r2, #4
 800569e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	88fa      	ldrh	r2, [r7, #6]
 80056b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e0:	d10f      	bne.n	8005702 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005700:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570c:	2b40      	cmp	r3, #64	@ 0x40
 800570e:	d007      	beq.n	8005720 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800571e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d170      	bne.n	800580a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005728:	e035      	b.n	8005796 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d115      	bne.n	8005764 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f103 020c 	add.w	r2, r3, #12
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005762:	e018      	b.n	8005796 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005764:	f7fe f9a0 	bl	8003aa8 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d803      	bhi.n	800577c <HAL_SPI_Receive+0x15e>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d102      	bne.n	8005782 <HAL_SPI_Receive+0x164>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e058      	b.n	8005848 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1c4      	bne.n	800572a <HAL_SPI_Receive+0x10c>
 80057a0:	e038      	b.n	8005814 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d113      	bne.n	80057d8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ba:	b292      	uxth	r2, r2
 80057bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c2:	1c9a      	adds	r2, r3, #2
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057d6:	e018      	b.n	800580a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d8:	f7fe f966 	bl	8003aa8 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d803      	bhi.n	80057f0 <HAL_SPI_Receive+0x1d2>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d102      	bne.n	80057f6 <HAL_SPI_Receive+0x1d8>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e01e      	b.n	8005848 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1c6      	bne.n	80057a2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 fa4b 	bl	8005cb4 <SPI_EndRxTransaction>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005846:	2300      	movs	r3, #0
  }
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	@ 0x28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800585e:	2301      	movs	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005862:	f7fe f921 	bl	8003aa8 <HAL_GetTick>
 8005866:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800586e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005876:	887b      	ldrh	r3, [r7, #2]
 8005878:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800587a:	7ffb      	ldrb	r3, [r7, #31]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d00c      	beq.n	800589a <HAL_SPI_TransmitReceive+0x4a>
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005886:	d106      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d102      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x46>
 8005890:	7ffb      	ldrb	r3, [r7, #31]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d001      	beq.n	800589a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005896:	2302      	movs	r3, #2
 8005898:	e17f      	b.n	8005b9a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_SPI_TransmitReceive+0x5c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_TransmitReceive+0x5c>
 80058a6:	887b      	ldrh	r3, [r7, #2]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e174      	b.n	8005b9a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_SPI_TransmitReceive+0x6e>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e16d      	b.n	8005b9a <HAL_SPI_TransmitReceive+0x34a>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d003      	beq.n	80058da <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2205      	movs	r2, #5
 80058d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	887a      	ldrh	r2, [r7, #2]
 80058ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	887a      	ldrh	r2, [r7, #2]
 80058f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	887a      	ldrh	r2, [r7, #2]
 8005902:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591a:	2b40      	cmp	r3, #64	@ 0x40
 800591c:	d007      	beq.n	800592e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800592c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005936:	d17e      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <HAL_SPI_TransmitReceive+0xf6>
 8005940:	8afb      	ldrh	r3, [r7, #22]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d16c      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594a:	881a      	ldrh	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005956:	1c9a      	adds	r2, r3, #2
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800596a:	e059      	b.n	8005a20 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d11b      	bne.n	80059b2 <HAL_SPI_TransmitReceive+0x162>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d016      	beq.n	80059b2 <HAL_SPI_TransmitReceive+0x162>
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	2b01      	cmp	r3, #1
 8005988:	d113      	bne.n	80059b2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	881a      	ldrh	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599a:	1c9a      	adds	r2, r3, #2
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d119      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x1a4>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d014      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d4:	b292      	uxth	r2, r2
 80059d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059dc:	1c9a      	adds	r2, r3, #2
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059f0:	2301      	movs	r3, #1
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059f4:	f7fe f858 	bl	8003aa8 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d80d      	bhi.n	8005a20 <HAL_SPI_TransmitReceive+0x1d0>
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0a:	d009      	beq.n	8005a20 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e0bc      	b.n	8005b9a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1a0      	bne.n	800596c <HAL_SPI_TransmitReceive+0x11c>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d19b      	bne.n	800596c <HAL_SPI_TransmitReceive+0x11c>
 8005a34:	e082      	b.n	8005b3c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_SPI_TransmitReceive+0x1f4>
 8005a3e:	8afb      	ldrh	r3, [r7, #22]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d171      	bne.n	8005b28 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	7812      	ldrb	r2, [r2, #0]
 8005a50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a6a:	e05d      	b.n	8005b28 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d11c      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x264>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d017      	beq.n	8005ab4 <HAL_SPI_TransmitReceive+0x264>
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d114      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	7812      	ldrb	r2, [r2, #0]
 8005a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d119      	bne.n	8005af6 <HAL_SPI_TransmitReceive+0x2a6>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d014      	beq.n	8005af6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005af2:	2301      	movs	r3, #1
 8005af4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005af6:	f7fd ffd7 	bl	8003aa8 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d803      	bhi.n	8005b0e <HAL_SPI_TransmitReceive+0x2be>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d102      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x2c4>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e038      	b.n	8005b9a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d19c      	bne.n	8005a6c <HAL_SPI_TransmitReceive+0x21c>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d197      	bne.n	8005a6c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b3c:	6a3a      	ldr	r2, [r7, #32]
 8005b3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f91d 	bl	8005d80 <SPI_EndRxTxTransaction>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d008      	beq.n	8005b5e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e01d      	b.n	8005b9a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3728      	adds	r7, #40	@ 0x28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bb4:	f7fd ff78 	bl	8003aa8 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bc4:	f7fd ff70 	bl	8003aa8 <HAL_GetTick>
 8005bc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bca:	4b39      	ldr	r3, [pc, #228]	@ (8005cb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	015b      	lsls	r3, r3, #5
 8005bd0:	0d1b      	lsrs	r3, r3, #20
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	fb02 f303 	mul.w	r3, r2, r3
 8005bd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bda:	e055      	b.n	8005c88 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d051      	beq.n	8005c88 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005be4:	f7fd ff60 	bl	8003aa8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d902      	bls.n	8005bfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d13d      	bne.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c12:	d111      	bne.n	8005c38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c1c:	d004      	beq.n	8005c28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c26:	d107      	bne.n	8005c38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c40:	d10f      	bne.n	8005c62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e018      	b.n	8005ca8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d102      	bne.n	8005c82 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61fb      	str	r3, [r7, #28]
 8005c80:	e002      	b.n	8005c88 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4013      	ands	r3, r2
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	bf0c      	ite	eq
 8005c98:	2301      	moveq	r3, #1
 8005c9a:	2300      	movne	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d19a      	bne.n	8005bdc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3720      	adds	r7, #32
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20000004 	.word	0x20000004

08005cb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cc8:	d111      	bne.n	8005cee <SPI_EndRxTransaction+0x3a>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd2:	d004      	beq.n	8005cde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cdc:	d107      	bne.n	8005cee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cf6:	d12a      	bne.n	8005d4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d00:	d012      	beq.n	8005d28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2180      	movs	r1, #128	@ 0x80
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f7ff ff49 	bl	8005ba4 <SPI_WaitFlagStateUntilTimeout>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d02d      	beq.n	8005d74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d1c:	f043 0220 	orr.w	r2, r3, #32
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e026      	b.n	8005d76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2101      	movs	r1, #1
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff ff36 	bl	8005ba4 <SPI_WaitFlagStateUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01a      	beq.n	8005d74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e013      	b.n	8005d76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2200      	movs	r2, #0
 8005d56:	2101      	movs	r1, #1
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7ff ff23 	bl	8005ba4 <SPI_WaitFlagStateUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d68:	f043 0220 	orr.w	r2, r3, #32
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e000      	b.n	8005d76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2201      	movs	r2, #1
 8005d94:	2102      	movs	r1, #2
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7ff ff04 	bl	8005ba4 <SPI_WaitFlagStateUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da6:	f043 0220 	orr.w	r2, r3, #32
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e032      	b.n	8005e18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005db2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <SPI_EndRxTxTransaction+0xa0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e24 <SPI_EndRxTxTransaction+0xa4>)
 8005db8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbc:	0d5b      	lsrs	r3, r3, #21
 8005dbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dc2:	fb02 f303 	mul.w	r3, r2, r3
 8005dc6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dd0:	d112      	bne.n	8005df8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2180      	movs	r1, #128	@ 0x80
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff fee1 	bl	8005ba4 <SPI_WaitFlagStateUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d016      	beq.n	8005e16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e00f      	b.n	8005e18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e0e:	2b80      	cmp	r3, #128	@ 0x80
 8005e10:	d0f2      	beq.n	8005df8 <SPI_EndRxTxTransaction+0x78>
 8005e12:	e000      	b.n	8005e16 <SPI_EndRxTxTransaction+0x96>
        break;
 8005e14:	bf00      	nop
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000004 	.word	0x20000004
 8005e24:	165e9f81 	.word	0x165e9f81

08005e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e041      	b.n	8005ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fd fa40 	bl	80032d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3304      	adds	r3, #4
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f000 fd7a 	bl	8006960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e041      	b.n	8005f5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f839 	bl	8005f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f000 fd2b 	bl	8006960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d109      	bne.n	8005f9c <HAL_TIM_PWM_Start+0x24>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	bf14      	ite	ne
 8005f94:	2301      	movne	r3, #1
 8005f96:	2300      	moveq	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	e022      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x6a>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d109      	bne.n	8005fb6 <HAL_TIM_PWM_Start+0x3e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	bf14      	ite	ne
 8005fae:	2301      	movne	r3, #1
 8005fb0:	2300      	moveq	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	e015      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x6a>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d109      	bne.n	8005fd0 <HAL_TIM_PWM_Start+0x58>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	bf14      	ite	ne
 8005fc8:	2301      	movne	r3, #1
 8005fca:	2300      	moveq	r3, #0
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	e008      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x6a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	bf14      	ite	ne
 8005fdc:	2301      	movne	r3, #1
 8005fde:	2300      	moveq	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e068      	b.n	80060bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_PWM_Start+0x82>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ff8:	e013      	b.n	8006022 <HAL_TIM_PWM_Start+0xaa>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d104      	bne.n	800600a <HAL_TIM_PWM_Start+0x92>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006008:	e00b      	b.n	8006022 <HAL_TIM_PWM_Start+0xaa>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d104      	bne.n	800601a <HAL_TIM_PWM_Start+0xa2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006018:	e003      	b.n	8006022 <HAL_TIM_PWM_Start+0xaa>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 ff44 	bl	8006eb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a23      	ldr	r2, [pc, #140]	@ (80060c4 <HAL_TIM_PWM_Start+0x14c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d107      	bne.n	800604a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006048:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1d      	ldr	r2, [pc, #116]	@ (80060c4 <HAL_TIM_PWM_Start+0x14c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d018      	beq.n	8006086 <HAL_TIM_PWM_Start+0x10e>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605c:	d013      	beq.n	8006086 <HAL_TIM_PWM_Start+0x10e>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a19      	ldr	r2, [pc, #100]	@ (80060c8 <HAL_TIM_PWM_Start+0x150>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00e      	beq.n	8006086 <HAL_TIM_PWM_Start+0x10e>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a17      	ldr	r2, [pc, #92]	@ (80060cc <HAL_TIM_PWM_Start+0x154>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_TIM_PWM_Start+0x10e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a16      	ldr	r2, [pc, #88]	@ (80060d0 <HAL_TIM_PWM_Start+0x158>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_TIM_PWM_Start+0x10e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a14      	ldr	r2, [pc, #80]	@ (80060d4 <HAL_TIM_PWM_Start+0x15c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d111      	bne.n	80060aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b06      	cmp	r3, #6
 8006096:	d010      	beq.n	80060ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a8:	e007      	b.n	80060ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	40010000 	.word	0x40010000
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40000800 	.word	0x40000800
 80060d0:	40000c00 	.word	0x40000c00
 80060d4:	40014000 	.word	0x40014000

080060d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2200      	movs	r2, #0
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fee4 	bl	8006eb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a29      	ldr	r2, [pc, #164]	@ (800619c <HAL_TIM_PWM_Stop+0xc4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d117      	bne.n	800612a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6a1a      	ldr	r2, [r3, #32]
 8006100:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006104:	4013      	ands	r3, r2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10f      	bne.n	800612a <HAL_TIM_PWM_Stop+0x52>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6a1a      	ldr	r2, [r3, #32]
 8006110:	f240 4344 	movw	r3, #1092	@ 0x444
 8006114:	4013      	ands	r3, r2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <HAL_TIM_PWM_Stop+0x52>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006128:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006134:	4013      	ands	r3, r2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10f      	bne.n	800615a <HAL_TIM_PWM_Stop+0x82>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6a1a      	ldr	r2, [r3, #32]
 8006140:	f240 4344 	movw	r3, #1092	@ 0x444
 8006144:	4013      	ands	r3, r2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d107      	bne.n	800615a <HAL_TIM_PWM_Stop+0x82>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0201 	bic.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <HAL_TIM_PWM_Stop+0x92>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006168:	e013      	b.n	8006192 <HAL_TIM_PWM_Stop+0xba>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b04      	cmp	r3, #4
 800616e:	d104      	bne.n	800617a <HAL_TIM_PWM_Stop+0xa2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006178:	e00b      	b.n	8006192 <HAL_TIM_PWM_Stop+0xba>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d104      	bne.n	800618a <HAL_TIM_PWM_Stop+0xb2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006188:	e003      	b.n	8006192 <HAL_TIM_PWM_Stop+0xba>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40010000 	.word	0x40010000

080061a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e097      	b.n	80062e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7fd f8c1 	bl	8003350 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061e4:	f023 0307 	bic.w	r3, r3, #7
 80061e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f000 fbb3 	bl	8006960 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	4313      	orrs	r3, r2
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006240:	f023 030c 	bic.w	r3, r3, #12
 8006244:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800624c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	4313      	orrs	r3, r2
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	011a      	lsls	r2, r3, #4
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	031b      	lsls	r3, r3, #12
 8006270:	4313      	orrs	r3, r2
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800627e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006286:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	4313      	orrs	r3, r2
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006304:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800630c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006314:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d110      	bne.n	800633e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d102      	bne.n	8006328 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006322:	7b7b      	ldrb	r3, [r7, #13]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d001      	beq.n	800632c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e069      	b.n	8006400 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800633c:	e031      	b.n	80063a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b04      	cmp	r3, #4
 8006342:	d110      	bne.n	8006366 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d102      	bne.n	8006350 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800634a:	7b3b      	ldrb	r3, [r7, #12]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d001      	beq.n	8006354 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e055      	b.n	8006400 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006364:	e01d      	b.n	80063a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d108      	bne.n	800637e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d105      	bne.n	800637e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006372:	7b7b      	ldrb	r3, [r7, #13]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d102      	bne.n	800637e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006378:	7b3b      	ldrb	r3, [r7, #12]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d001      	beq.n	8006382 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e03e      	b.n	8006400 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2202      	movs	r2, #2
 8006386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2202      	movs	r2, #2
 8006396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_TIM_Encoder_Start+0xc4>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d008      	beq.n	80063c0 <HAL_TIM_Encoder_Start+0xd4>
 80063ae:	e00f      	b.n	80063d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2201      	movs	r2, #1
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fd7d 	bl	8006eb8 <TIM_CCxChannelCmd>
      break;
 80063be:	e016      	b.n	80063ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2201      	movs	r2, #1
 80063c6:	2104      	movs	r1, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fd75 	bl	8006eb8 <TIM_CCxChannelCmd>
      break;
 80063ce:	e00e      	b.n	80063ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2201      	movs	r2, #1
 80063d6:	2100      	movs	r1, #0
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fd6d 	bl	8006eb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2201      	movs	r2, #1
 80063e4:	2104      	movs	r1, #4
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fd66 	bl	8006eb8 <TIM_CCxChannelCmd>
      break;
 80063ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f042 0201 	orr.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d020      	beq.n	800646c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01b      	beq.n	800646c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0202 	mvn.w	r2, #2
 800643c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa65 	bl	8006922 <HAL_TIM_IC_CaptureCallback>
 8006458:	e005      	b.n	8006466 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa57 	bl	800690e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fa68 	bl	8006936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d020      	beq.n	80064b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01b      	beq.n	80064b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0204 	mvn.w	r2, #4
 8006488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa3f 	bl	8006922 <HAL_TIM_IC_CaptureCallback>
 80064a4:	e005      	b.n	80064b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa31 	bl	800690e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa42 	bl	8006936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d020      	beq.n	8006504 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01b      	beq.n	8006504 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0208 	mvn.w	r2, #8
 80064d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2204      	movs	r2, #4
 80064da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fa19 	bl	8006922 <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa0b 	bl	800690e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fa1c 	bl	8006936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 0310 	and.w	r3, r3, #16
 800650a:	2b00      	cmp	r3, #0
 800650c:	d020      	beq.n	8006550 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f003 0310 	and.w	r3, r3, #16
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01b      	beq.n	8006550 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0210 	mvn.w	r2, #16
 8006520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2208      	movs	r2, #8
 8006526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f9f3 	bl	8006922 <HAL_TIM_IC_CaptureCallback>
 800653c:	e005      	b.n	800654a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9e5 	bl	800690e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f9f6 	bl	8006936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00c      	beq.n	8006574 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d007      	beq.n	8006574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0201 	mvn.w	r2, #1
 800656c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f9c3 	bl	80068fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00c      	beq.n	8006598 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006584:	2b00      	cmp	r3, #0
 8006586:	d007      	beq.n	8006598 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fd80 	bl	8007098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00c      	beq.n	80065bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d007      	beq.n	80065bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f9c7 	bl	800694a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00c      	beq.n	80065e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d007      	beq.n	80065e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0220 	mvn.w	r2, #32
 80065d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fd52 	bl	8007084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006602:	2302      	movs	r3, #2
 8006604:	e0ae      	b.n	8006764 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b0c      	cmp	r3, #12
 8006612:	f200 809f 	bhi.w	8006754 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006616:	a201      	add	r2, pc, #4	@ (adr r2, 800661c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006651 	.word	0x08006651
 8006620:	08006755 	.word	0x08006755
 8006624:	08006755 	.word	0x08006755
 8006628:	08006755 	.word	0x08006755
 800662c:	08006691 	.word	0x08006691
 8006630:	08006755 	.word	0x08006755
 8006634:	08006755 	.word	0x08006755
 8006638:	08006755 	.word	0x08006755
 800663c:	080066d3 	.word	0x080066d3
 8006640:	08006755 	.word	0x08006755
 8006644:	08006755 	.word	0x08006755
 8006648:	08006755 	.word	0x08006755
 800664c:	08006713 	.word	0x08006713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fa08 	bl	8006a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0208 	orr.w	r2, r2, #8
 800666a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0204 	bic.w	r2, r2, #4
 800667a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6999      	ldr	r1, [r3, #24]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	691a      	ldr	r2, [r3, #16]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	619a      	str	r2, [r3, #24]
      break;
 800668e:	e064      	b.n	800675a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fa4e 	bl	8006b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6999      	ldr	r1, [r3, #24]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	021a      	lsls	r2, r3, #8
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	619a      	str	r2, [r3, #24]
      break;
 80066d0:	e043      	b.n	800675a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fa99 	bl	8006c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69da      	ldr	r2, [r3, #28]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0208 	orr.w	r2, r2, #8
 80066ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0204 	bic.w	r2, r2, #4
 80066fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69d9      	ldr	r1, [r3, #28]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	61da      	str	r2, [r3, #28]
      break;
 8006710:	e023      	b.n	800675a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fae3 	bl	8006ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800672c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69da      	ldr	r2, [r3, #28]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800673c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69d9      	ldr	r1, [r3, #28]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	021a      	lsls	r2, r3, #8
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	61da      	str	r2, [r3, #28]
      break;
 8006752:	e002      	b.n	800675a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	75fb      	strb	r3, [r7, #23]
      break;
 8006758:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006762:	7dfb      	ldrb	r3, [r7, #23]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_TIM_ConfigClockSource+0x1c>
 8006784:	2302      	movs	r3, #2
 8006786:	e0b4      	b.n	80068f2 <HAL_TIM_ConfigClockSource+0x186>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80067a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c0:	d03e      	beq.n	8006840 <HAL_TIM_ConfigClockSource+0xd4>
 80067c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c6:	f200 8087 	bhi.w	80068d8 <HAL_TIM_ConfigClockSource+0x16c>
 80067ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ce:	f000 8086 	beq.w	80068de <HAL_TIM_ConfigClockSource+0x172>
 80067d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d6:	d87f      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x16c>
 80067d8:	2b70      	cmp	r3, #112	@ 0x70
 80067da:	d01a      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0xa6>
 80067dc:	2b70      	cmp	r3, #112	@ 0x70
 80067de:	d87b      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x16c>
 80067e0:	2b60      	cmp	r3, #96	@ 0x60
 80067e2:	d050      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x11a>
 80067e4:	2b60      	cmp	r3, #96	@ 0x60
 80067e6:	d877      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x16c>
 80067e8:	2b50      	cmp	r3, #80	@ 0x50
 80067ea:	d03c      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0xfa>
 80067ec:	2b50      	cmp	r3, #80	@ 0x50
 80067ee:	d873      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x16c>
 80067f0:	2b40      	cmp	r3, #64	@ 0x40
 80067f2:	d058      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x13a>
 80067f4:	2b40      	cmp	r3, #64	@ 0x40
 80067f6:	d86f      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x16c>
 80067f8:	2b30      	cmp	r3, #48	@ 0x30
 80067fa:	d064      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x15a>
 80067fc:	2b30      	cmp	r3, #48	@ 0x30
 80067fe:	d86b      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006800:	2b20      	cmp	r3, #32
 8006802:	d060      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d867      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d05c      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x15a>
 800680c:	2b10      	cmp	r3, #16
 800680e:	d05a      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006810:	e062      	b.n	80068d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006822:	f000 fb29 	bl	8006e78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	609a      	str	r2, [r3, #8]
      break;
 800683e:	e04f      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006850:	f000 fb12 	bl	8006e78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006862:	609a      	str	r2, [r3, #8]
      break;
 8006864:	e03c      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006872:	461a      	mov	r2, r3
 8006874:	f000 fa86 	bl	8006d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2150      	movs	r1, #80	@ 0x50
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fadf 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 8006884:	e02c      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006892:	461a      	mov	r2, r3
 8006894:	f000 faa5 	bl	8006de2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2160      	movs	r1, #96	@ 0x60
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 facf 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 80068a4:	e01c      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b2:	461a      	mov	r2, r3
 80068b4:	f000 fa66 	bl	8006d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2140      	movs	r1, #64	@ 0x40
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fabf 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 80068c4:	e00c      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4619      	mov	r1, r3
 80068d0:	4610      	mov	r0, r2
 80068d2:	f000 fab6 	bl	8006e42 <TIM_ITRx_SetConfig>
      break;
 80068d6:	e003      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]
      break;
 80068dc:	e000      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
	...

08006960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a37      	ldr	r2, [pc, #220]	@ (8006a50 <TIM_Base_SetConfig+0xf0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00f      	beq.n	8006998 <TIM_Base_SetConfig+0x38>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800697e:	d00b      	beq.n	8006998 <TIM_Base_SetConfig+0x38>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a34      	ldr	r2, [pc, #208]	@ (8006a54 <TIM_Base_SetConfig+0xf4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d007      	beq.n	8006998 <TIM_Base_SetConfig+0x38>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a33      	ldr	r2, [pc, #204]	@ (8006a58 <TIM_Base_SetConfig+0xf8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d003      	beq.n	8006998 <TIM_Base_SetConfig+0x38>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a32      	ldr	r2, [pc, #200]	@ (8006a5c <TIM_Base_SetConfig+0xfc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d108      	bne.n	80069aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a28      	ldr	r2, [pc, #160]	@ (8006a50 <TIM_Base_SetConfig+0xf0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d01b      	beq.n	80069ea <TIM_Base_SetConfig+0x8a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b8:	d017      	beq.n	80069ea <TIM_Base_SetConfig+0x8a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a25      	ldr	r2, [pc, #148]	@ (8006a54 <TIM_Base_SetConfig+0xf4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d013      	beq.n	80069ea <TIM_Base_SetConfig+0x8a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a24      	ldr	r2, [pc, #144]	@ (8006a58 <TIM_Base_SetConfig+0xf8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00f      	beq.n	80069ea <TIM_Base_SetConfig+0x8a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a23      	ldr	r2, [pc, #140]	@ (8006a5c <TIM_Base_SetConfig+0xfc>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00b      	beq.n	80069ea <TIM_Base_SetConfig+0x8a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a22      	ldr	r2, [pc, #136]	@ (8006a60 <TIM_Base_SetConfig+0x100>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d007      	beq.n	80069ea <TIM_Base_SetConfig+0x8a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a21      	ldr	r2, [pc, #132]	@ (8006a64 <TIM_Base_SetConfig+0x104>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d003      	beq.n	80069ea <TIM_Base_SetConfig+0x8a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a20      	ldr	r2, [pc, #128]	@ (8006a68 <TIM_Base_SetConfig+0x108>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d108      	bne.n	80069fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006a50 <TIM_Base_SetConfig+0xf0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d103      	bne.n	8006a2a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f043 0204 	orr.w	r2, r3, #4
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	601a      	str	r2, [r3, #0]
}
 8006a42:	bf00      	nop
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800
 8006a5c:	40000c00 	.word	0x40000c00
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800

08006a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	f023 0201 	bic.w	r2, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0303 	bic.w	r3, r3, #3
 8006aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f023 0302 	bic.w	r3, r3, #2
 8006ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b34 <TIM_OC1_SetConfig+0xc8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d10c      	bne.n	8006ae2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f023 0308 	bic.w	r3, r3, #8
 8006ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f023 0304 	bic.w	r3, r3, #4
 8006ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a13      	ldr	r2, [pc, #76]	@ (8006b34 <TIM_OC1_SetConfig+0xc8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d111      	bne.n	8006b0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	621a      	str	r2, [r3, #32]
}
 8006b28:	bf00      	nop
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	40010000 	.word	0x40010000

08006b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	f023 0210 	bic.w	r2, r3, #16
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f023 0320 	bic.w	r3, r3, #32
 8006b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a1e      	ldr	r2, [pc, #120]	@ (8006c0c <TIM_OC2_SetConfig+0xd4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10d      	bne.n	8006bb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a15      	ldr	r2, [pc, #84]	@ (8006c0c <TIM_OC2_SetConfig+0xd4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d113      	bne.n	8006be4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010000 	.word	0x40010000

08006c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce0 <TIM_OC3_SetConfig+0xd0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d10d      	bne.n	8006c8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a14      	ldr	r2, [pc, #80]	@ (8006ce0 <TIM_OC3_SetConfig+0xd0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d113      	bne.n	8006cba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	621a      	str	r2, [r3, #32]
}
 8006cd4:	bf00      	nop
 8006cd6:	371c      	adds	r7, #28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	40010000 	.word	0x40010000

08006ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	031b      	lsls	r3, r3, #12
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a10      	ldr	r2, [pc, #64]	@ (8006d80 <TIM_OC4_SetConfig+0x9c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d109      	bne.n	8006d58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	019b      	lsls	r3, r3, #6
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40010000 	.word	0x40010000

08006d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f023 0201 	bic.w	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f023 030a 	bic.w	r3, r3, #10
 8006dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	621a      	str	r2, [r3, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b087      	sub	sp, #28
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	f023 0210 	bic.w	r2, r3, #16
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	031b      	lsls	r3, r3, #12
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f043 0307 	orr.w	r3, r3, #7
 8006e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	609a      	str	r2, [r3, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	021a      	lsls	r2, r3, #8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	609a      	str	r2, [r3, #8]
}
 8006eac:	bf00      	nop
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	2201      	movs	r2, #1
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1a      	ldr	r2, [r3, #32]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	401a      	ands	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a1a      	ldr	r2, [r3, #32]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 031f 	and.w	r3, r3, #31
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e050      	b.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d018      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f68:	d013      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a18      	ldr	r2, [pc, #96]	@ (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00e      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a16      	ldr	r2, [pc, #88]	@ (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d009      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a15      	ldr	r2, [pc, #84]	@ (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d004      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a13      	ldr	r2, [pc, #76]	@ (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d10c      	bne.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40014000 	.word	0x40014000

08006fe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e03d      	b.n	8007078 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e042      	b.n	8007144 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fc fa56 	bl	8003584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2224      	movs	r2, #36	@ 0x24
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fd7f 	bl	8007bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	@ 0x28
 8007150:	af02      	add	r7, sp, #8
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	4613      	mov	r3, r2
 800715a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b20      	cmp	r3, #32
 800716a:	d175      	bne.n	8007258 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_UART_Transmit+0x2c>
 8007172:	88fb      	ldrh	r3, [r7, #6]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e06e      	b.n	800725a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2221      	movs	r2, #33	@ 0x21
 8007186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800718a:	f7fc fc8d 	bl	8003aa8 <HAL_GetTick>
 800718e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	88fa      	ldrh	r2, [r7, #6]
 800719a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071a4:	d108      	bne.n	80071b8 <HAL_UART_Transmit+0x6c>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	e003      	b.n	80071c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071c0:	e02e      	b.n	8007220 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2200      	movs	r2, #0
 80071ca:	2180      	movs	r1, #128	@ 0x80
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 fb1d 	bl	800780c <UART_WaitOnFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e03a      	b.n	800725a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	3302      	adds	r3, #2
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	e007      	b.n	8007212 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	781a      	ldrb	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1cb      	bne.n	80071c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2200      	movs	r2, #0
 8007232:	2140      	movs	r1, #64	@ 0x40
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 fae9 	bl	800780c <UART_WaitOnFlagUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e006      	b.n	800725a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	e000      	b.n	800725a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007258:	2302      	movs	r3, #2
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	3720      	adds	r7, #32
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b0ba      	sub	sp, #232	@ 0xe8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800728a:	2300      	movs	r3, #0
 800728c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007290:	2300      	movs	r3, #0
 8007292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80072a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10f      	bne.n	80072ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <HAL_UART_IRQHandler+0x66>
 80072b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fbd7 	bl	8007a76 <UART_Receive_IT>
      return;
 80072c8:	e273      	b.n	80077b2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80de 	beq.w	8007490 <HAL_UART_IRQHandler+0x22c>
 80072d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 80d1 	beq.w	8007490 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <HAL_UART_IRQHandler+0xae>
 80072fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d005      	beq.n	8007312 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730a:	f043 0201 	orr.w	r2, r3, #1
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00b      	beq.n	8007336 <HAL_UART_IRQHandler+0xd2>
 800731e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732e:	f043 0202 	orr.w	r2, r3, #2
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <HAL_UART_IRQHandler+0xf6>
 8007342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007352:	f043 0204 	orr.w	r2, r3, #4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800735a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d011      	beq.n	800738a <HAL_UART_IRQHandler+0x126>
 8007366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b00      	cmp	r3, #0
 8007370:	d105      	bne.n	800737e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007382:	f043 0208 	orr.w	r2, r3, #8
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 820a 	beq.w	80077a8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <HAL_UART_IRQHandler+0x14e>
 80073a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fb62 	bl	8007a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073bc:	2b40      	cmp	r3, #64	@ 0x40
 80073be:	bf0c      	ite	eq
 80073c0:	2301      	moveq	r3, #1
 80073c2:	2300      	movne	r3, #0
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d103      	bne.n	80073de <HAL_UART_IRQHandler+0x17a>
 80073d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d04f      	beq.n	800747e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa6d 	bl	80078be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ee:	2b40      	cmp	r3, #64	@ 0x40
 80073f0:	d141      	bne.n	8007476 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3314      	adds	r3, #20
 80073f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007408:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800740c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3314      	adds	r3, #20
 800741a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800741e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800742a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1d9      	bne.n	80073f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d013      	beq.n	800746e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744a:	4a8a      	ldr	r2, [pc, #552]	@ (8007674 <HAL_UART_IRQHandler+0x410>)
 800744c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007452:	4618      	mov	r0, r3
 8007454:	f7fd f8cb 	bl	80045ee <HAL_DMA_Abort_IT>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d016      	beq.n	800748c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007468:	4610      	mov	r0, r2
 800746a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746c:	e00e      	b.n	800748c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f9b6 	bl	80077e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007474:	e00a      	b.n	800748c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f9b2 	bl	80077e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747c:	e006      	b.n	800748c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f9ae 	bl	80077e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800748a:	e18d      	b.n	80077a8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748c:	bf00      	nop
    return;
 800748e:	e18b      	b.n	80077a8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007494:	2b01      	cmp	r3, #1
 8007496:	f040 8167 	bne.w	8007768 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8160 	beq.w	8007768 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80074a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8159 	beq.w	8007768 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074b6:	2300      	movs	r3, #0
 80074b8:	60bb      	str	r3, [r7, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60bb      	str	r3, [r7, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d6:	2b40      	cmp	r3, #64	@ 0x40
 80074d8:	f040 80ce 	bne.w	8007678 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 80a9 	beq.w	8007644 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074fa:	429a      	cmp	r2, r3
 80074fc:	f080 80a2 	bcs.w	8007644 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007506:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007512:	f000 8088 	beq.w	8007626 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	330c      	adds	r3, #12
 800751c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800752c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007534:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	330c      	adds	r3, #12
 800753e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007542:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007546:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800754e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800755a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1d9      	bne.n	8007516 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3314      	adds	r3, #20
 8007568:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007572:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007574:	f023 0301 	bic.w	r3, r3, #1
 8007578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3314      	adds	r3, #20
 8007582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007586:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800758a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800758e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007598:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e1      	bne.n	8007562 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3314      	adds	r3, #20
 80075a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80075ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3314      	adds	r3, #20
 80075be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80075c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80075c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e3      	bne.n	800759e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	330c      	adds	r3, #12
 80075ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075f6:	f023 0310 	bic.w	r3, r3, #16
 80075fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	330c      	adds	r3, #12
 8007604:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007608:	65ba      	str	r2, [r7, #88]	@ 0x58
 800760a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800760e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e3      	bne.n	80075e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007620:	4618      	mov	r0, r3
 8007622:	f7fc ff74 	bl	800450e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007634:	b29b      	uxth	r3, r3
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	b29b      	uxth	r3, r3
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f8d9 	bl	80077f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007642:	e0b3      	b.n	80077ac <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007648:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800764c:	429a      	cmp	r2, r3
 800764e:	f040 80ad 	bne.w	80077ac <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765c:	f040 80a6 	bne.w	80077ac <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f8c1 	bl	80077f4 <HAL_UARTEx_RxEventCallback>
      return;
 8007672:	e09b      	b.n	80077ac <HAL_UART_IRQHandler+0x548>
 8007674:	08007985 	.word	0x08007985
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007680:	b29b      	uxth	r3, r3
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 808e 	beq.w	80077b0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8089 	beq.w	80077b0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	330c      	adds	r3, #12
 80076be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80076c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80076c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e3      	bne.n	800769e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3314      	adds	r3, #20
 80076dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	623b      	str	r3, [r7, #32]
   return(result);
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	f023 0301 	bic.w	r3, r3, #1
 80076ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3314      	adds	r3, #20
 80076f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80076fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80076fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007702:	e841 2300 	strex	r3, r2, [r1]
 8007706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e3      	bne.n	80076d6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	330c      	adds	r3, #12
 8007722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	60fb      	str	r3, [r7, #12]
   return(result);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0310 	bic.w	r3, r3, #16
 8007732:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007740:	61fa      	str	r2, [r7, #28]
 8007742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	69b9      	ldr	r1, [r7, #24]
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	617b      	str	r3, [r7, #20]
   return(result);
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e3      	bne.n	800771c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800775a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f847 	bl	80077f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007766:	e023      	b.n	80077b0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800776c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007770:	2b00      	cmp	r3, #0
 8007772:	d009      	beq.n	8007788 <HAL_UART_IRQHandler+0x524>
 8007774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f910 	bl	80079a6 <UART_Transmit_IT>
    return;
 8007786:	e014      	b.n	80077b2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800778c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00e      	beq.n	80077b2 <HAL_UART_IRQHandler+0x54e>
 8007794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f950 	bl	8007a46 <UART_EndTransmit_IT>
    return;
 80077a6:	e004      	b.n	80077b2 <HAL_UART_IRQHandler+0x54e>
    return;
 80077a8:	bf00      	nop
 80077aa:	e002      	b.n	80077b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80077ac:	bf00      	nop
 80077ae:	e000      	b.n	80077b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80077b0:	bf00      	nop
  }
}
 80077b2:	37e8      	adds	r7, #232	@ 0xe8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	4613      	mov	r3, r2
 800781a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781c:	e03b      	b.n	8007896 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007824:	d037      	beq.n	8007896 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007826:	f7fc f93f 	bl	8003aa8 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	429a      	cmp	r2, r3
 8007834:	d302      	bcc.n	800783c <UART_WaitOnFlagUntilTimeout+0x30>
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e03a      	b.n	80078b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d023      	beq.n	8007896 <UART_WaitOnFlagUntilTimeout+0x8a>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b80      	cmp	r3, #128	@ 0x80
 8007852:	d020      	beq.n	8007896 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b40      	cmp	r3, #64	@ 0x40
 8007858:	d01d      	beq.n	8007896 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b08      	cmp	r3, #8
 8007866:	d116      	bne.n	8007896 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f81d 	bl	80078be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2208      	movs	r2, #8
 8007888:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e00f      	b.n	80078b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4013      	ands	r3, r2
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	bf0c      	ite	eq
 80078a6:	2301      	moveq	r3, #1
 80078a8:	2300      	movne	r3, #0
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d0b4      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078be:	b480      	push	{r7}
 80078c0:	b095      	sub	sp, #84	@ 0x54
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	330c      	adds	r3, #12
 80078cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d0:	e853 3f00 	ldrex	r3, [r3]
 80078d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	330c      	adds	r3, #12
 80078e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80078e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e5      	bne.n	80078c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3314      	adds	r3, #20
 8007900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	61fb      	str	r3, [r7, #28]
   return(result);
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3314      	adds	r3, #20
 8007918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800791a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800791c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e5      	bne.n	80078fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007932:	2b01      	cmp	r3, #1
 8007934:	d119      	bne.n	800796a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	330c      	adds	r3, #12
 800793c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	60bb      	str	r3, [r7, #8]
   return(result);
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f023 0310 	bic.w	r3, r3, #16
 800794c:	647b      	str	r3, [r7, #68]	@ 0x44
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	330c      	adds	r3, #12
 8007954:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007956:	61ba      	str	r2, [r7, #24]
 8007958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6979      	ldr	r1, [r7, #20]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	613b      	str	r3, [r7, #16]
   return(result);
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007978:	bf00      	nop
 800797a:	3754      	adds	r7, #84	@ 0x54
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff ff21 	bl	80077e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b21      	cmp	r3, #33	@ 0x21
 80079b8:	d13e      	bne.n	8007a38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c2:	d114      	bne.n	80079ee <UART_Transmit_IT+0x48>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d110      	bne.n	80079ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	1c9a      	adds	r2, r3, #2
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	621a      	str	r2, [r3, #32]
 80079ec:	e008      	b.n	8007a00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	1c59      	adds	r1, r3, #1
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6211      	str	r1, [r2, #32]
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10f      	bne.n	8007a34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	e000      	b.n	8007a3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a38:	2302      	movs	r3, #2
  }
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fea6 	bl	80077b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b08c      	sub	sp, #48	@ 0x30
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b22      	cmp	r3, #34	@ 0x22
 8007a90:	f040 80aa 	bne.w	8007be8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a9c:	d115      	bne.n	8007aca <UART_Receive_IT+0x54>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d111      	bne.n	8007aca <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007abc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac2:	1c9a      	adds	r2, r3, #2
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ac8:	e024      	b.n	8007b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ad8:	d007      	beq.n	8007aea <UART_Receive_IT+0x74>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <UART_Receive_IT+0x82>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d106      	bne.n	8007af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e008      	b.n	8007b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	4619      	mov	r1, r3
 8007b22:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d15d      	bne.n	8007be4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0220 	bic.w	r2, r2, #32
 8007b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695a      	ldr	r2, [r3, #20]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0201 	bic.w	r2, r2, #1
 8007b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d135      	bne.n	8007bda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	613b      	str	r3, [r7, #16]
   return(result);
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f023 0310 	bic.w	r3, r3, #16
 8007b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	330c      	adds	r3, #12
 8007b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b94:	623a      	str	r2, [r7, #32]
 8007b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b98:	69f9      	ldr	r1, [r7, #28]
 8007b9a:	6a3a      	ldr	r2, [r7, #32]
 8007b9c:	e841 2300 	strex	r3, r2, [r1]
 8007ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e5      	bne.n	8007b74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d10a      	bne.n	8007bcc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff fe0e 	bl	80077f4 <HAL_UARTEx_RxEventCallback>
 8007bd8:	e002      	b.n	8007be0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff fdf6 	bl	80077cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e002      	b.n	8007bea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	e000      	b.n	8007bea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
  }
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3730      	adds	r7, #48	@ 0x30
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bf8:	b0c0      	sub	sp, #256	@ 0x100
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c10:	68d9      	ldr	r1, [r3, #12]
 8007c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	ea40 0301 	orr.w	r3, r0, r1
 8007c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	431a      	orrs	r2, r3
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c4c:	f021 010c 	bic.w	r1, r1, #12
 8007c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c5a:	430b      	orrs	r3, r1
 8007c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6e:	6999      	ldr	r1, [r3, #24]
 8007c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	ea40 0301 	orr.w	r3, r0, r1
 8007c7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b8f      	ldr	r3, [pc, #572]	@ (8007ec0 <UART_SetConfig+0x2cc>)
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d005      	beq.n	8007c94 <UART_SetConfig+0xa0>
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	4b8d      	ldr	r3, [pc, #564]	@ (8007ec4 <UART_SetConfig+0x2d0>)
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d104      	bne.n	8007c9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c94:	f7fd fae2 	bl	800525c <HAL_RCC_GetPCLK2Freq>
 8007c98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c9c:	e003      	b.n	8007ca6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c9e:	f7fd fac9 	bl	8005234 <HAL_RCC_GetPCLK1Freq>
 8007ca2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cb0:	f040 810c 	bne.w	8007ecc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	462b      	mov	r3, r5
 8007cca:	1891      	adds	r1, r2, r2
 8007ccc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007cce:	415b      	adcs	r3, r3
 8007cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	eb12 0801 	adds.w	r8, r2, r1
 8007cdc:	4629      	mov	r1, r5
 8007cde:	eb43 0901 	adc.w	r9, r3, r1
 8007ce2:	f04f 0200 	mov.w	r2, #0
 8007ce6:	f04f 0300 	mov.w	r3, #0
 8007cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cf6:	4690      	mov	r8, r2
 8007cf8:	4699      	mov	r9, r3
 8007cfa:	4623      	mov	r3, r4
 8007cfc:	eb18 0303 	adds.w	r3, r8, r3
 8007d00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d04:	462b      	mov	r3, r5
 8007d06:	eb49 0303 	adc.w	r3, r9, r3
 8007d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d22:	460b      	mov	r3, r1
 8007d24:	18db      	adds	r3, r3, r3
 8007d26:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d28:	4613      	mov	r3, r2
 8007d2a:	eb42 0303 	adc.w	r3, r2, r3
 8007d2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d38:	f7f8 ff3e 	bl	8000bb8 <__aeabi_uldivmod>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4b61      	ldr	r3, [pc, #388]	@ (8007ec8 <UART_SetConfig+0x2d4>)
 8007d42:	fba3 2302 	umull	r2, r3, r3, r2
 8007d46:	095b      	lsrs	r3, r3, #5
 8007d48:	011c      	lsls	r4, r3, #4
 8007d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	464b      	mov	r3, r9
 8007d60:	1891      	adds	r1, r2, r2
 8007d62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d64:	415b      	adcs	r3, r3
 8007d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d6c:	4641      	mov	r1, r8
 8007d6e:	eb12 0a01 	adds.w	sl, r2, r1
 8007d72:	4649      	mov	r1, r9
 8007d74:	eb43 0b01 	adc.w	fp, r3, r1
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d8c:	4692      	mov	sl, r2
 8007d8e:	469b      	mov	fp, r3
 8007d90:	4643      	mov	r3, r8
 8007d92:	eb1a 0303 	adds.w	r3, sl, r3
 8007d96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d9a:	464b      	mov	r3, r9
 8007d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8007da0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007db0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007db4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007db8:	460b      	mov	r3, r1
 8007dba:	18db      	adds	r3, r3, r3
 8007dbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	eb42 0303 	adc.w	r3, r2, r3
 8007dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007dca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007dce:	f7f8 fef3 	bl	8000bb8 <__aeabi_uldivmod>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ec8 <UART_SetConfig+0x2d4>)
 8007dda:	fba3 2301 	umull	r2, r3, r3, r1
 8007dde:	095b      	lsrs	r3, r3, #5
 8007de0:	2264      	movs	r2, #100	@ 0x64
 8007de2:	fb02 f303 	mul.w	r3, r2, r3
 8007de6:	1acb      	subs	r3, r1, r3
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007dee:	4b36      	ldr	r3, [pc, #216]	@ (8007ec8 <UART_SetConfig+0x2d4>)
 8007df0:	fba3 2302 	umull	r2, r3, r3, r2
 8007df4:	095b      	lsrs	r3, r3, #5
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007dfc:	441c      	add	r4, r3
 8007dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e10:	4642      	mov	r2, r8
 8007e12:	464b      	mov	r3, r9
 8007e14:	1891      	adds	r1, r2, r2
 8007e16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e18:	415b      	adcs	r3, r3
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e20:	4641      	mov	r1, r8
 8007e22:	1851      	adds	r1, r2, r1
 8007e24:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e26:	4649      	mov	r1, r9
 8007e28:	414b      	adcs	r3, r1
 8007e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e2c:	f04f 0200 	mov.w	r2, #0
 8007e30:	f04f 0300 	mov.w	r3, #0
 8007e34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e38:	4659      	mov	r1, fp
 8007e3a:	00cb      	lsls	r3, r1, #3
 8007e3c:	4651      	mov	r1, sl
 8007e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e42:	4651      	mov	r1, sl
 8007e44:	00ca      	lsls	r2, r1, #3
 8007e46:	4610      	mov	r0, r2
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	189b      	adds	r3, r3, r2
 8007e50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e54:	464b      	mov	r3, r9
 8007e56:	460a      	mov	r2, r1
 8007e58:	eb42 0303 	adc.w	r3, r2, r3
 8007e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e74:	460b      	mov	r3, r1
 8007e76:	18db      	adds	r3, r3, r3
 8007e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	eb42 0303 	adc.w	r3, r2, r3
 8007e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e8a:	f7f8 fe95 	bl	8000bb8 <__aeabi_uldivmod>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec8 <UART_SetConfig+0x2d4>)
 8007e94:	fba3 1302 	umull	r1, r3, r3, r2
 8007e98:	095b      	lsrs	r3, r3, #5
 8007e9a:	2164      	movs	r1, #100	@ 0x64
 8007e9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	3332      	adds	r3, #50	@ 0x32
 8007ea6:	4a08      	ldr	r2, [pc, #32]	@ (8007ec8 <UART_SetConfig+0x2d4>)
 8007ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eac:	095b      	lsrs	r3, r3, #5
 8007eae:	f003 0207 	and.w	r2, r3, #7
 8007eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4422      	add	r2, r4
 8007eba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ebc:	e106      	b.n	80080cc <UART_SetConfig+0x4d8>
 8007ebe:	bf00      	nop
 8007ec0:	40011000 	.word	0x40011000
 8007ec4:	40011400 	.word	0x40011400
 8007ec8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ed6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007eda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007ede:	4642      	mov	r2, r8
 8007ee0:	464b      	mov	r3, r9
 8007ee2:	1891      	adds	r1, r2, r2
 8007ee4:	6239      	str	r1, [r7, #32]
 8007ee6:	415b      	adcs	r3, r3
 8007ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007eee:	4641      	mov	r1, r8
 8007ef0:	1854      	adds	r4, r2, r1
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	eb43 0501 	adc.w	r5, r3, r1
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	00eb      	lsls	r3, r5, #3
 8007f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f06:	00e2      	lsls	r2, r4, #3
 8007f08:	4614      	mov	r4, r2
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	4643      	mov	r3, r8
 8007f0e:	18e3      	adds	r3, r4, r3
 8007f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f14:	464b      	mov	r3, r9
 8007f16:	eb45 0303 	adc.w	r3, r5, r3
 8007f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f2e:	f04f 0200 	mov.w	r2, #0
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	008b      	lsls	r3, r1, #2
 8007f3e:	4621      	mov	r1, r4
 8007f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f44:	4621      	mov	r1, r4
 8007f46:	008a      	lsls	r2, r1, #2
 8007f48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f4c:	f7f8 fe34 	bl	8000bb8 <__aeabi_uldivmod>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	4b60      	ldr	r3, [pc, #384]	@ (80080d8 <UART_SetConfig+0x4e4>)
 8007f56:	fba3 2302 	umull	r2, r3, r3, r2
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	011c      	lsls	r4, r3, #4
 8007f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f70:	4642      	mov	r2, r8
 8007f72:	464b      	mov	r3, r9
 8007f74:	1891      	adds	r1, r2, r2
 8007f76:	61b9      	str	r1, [r7, #24]
 8007f78:	415b      	adcs	r3, r3
 8007f7a:	61fb      	str	r3, [r7, #28]
 8007f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f80:	4641      	mov	r1, r8
 8007f82:	1851      	adds	r1, r2, r1
 8007f84:	6139      	str	r1, [r7, #16]
 8007f86:	4649      	mov	r1, r9
 8007f88:	414b      	adcs	r3, r1
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	f04f 0300 	mov.w	r3, #0
 8007f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f98:	4659      	mov	r1, fp
 8007f9a:	00cb      	lsls	r3, r1, #3
 8007f9c:	4651      	mov	r1, sl
 8007f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fa2:	4651      	mov	r1, sl
 8007fa4:	00ca      	lsls	r2, r1, #3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4603      	mov	r3, r0
 8007fac:	4642      	mov	r2, r8
 8007fae:	189b      	adds	r3, r3, r2
 8007fb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fb4:	464b      	mov	r3, r9
 8007fb6:	460a      	mov	r2, r1
 8007fb8:	eb42 0303 	adc.w	r3, r2, r3
 8007fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007fd8:	4649      	mov	r1, r9
 8007fda:	008b      	lsls	r3, r1, #2
 8007fdc:	4641      	mov	r1, r8
 8007fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fe2:	4641      	mov	r1, r8
 8007fe4:	008a      	lsls	r2, r1, #2
 8007fe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007fea:	f7f8 fde5 	bl	8000bb8 <__aeabi_uldivmod>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	4b38      	ldr	r3, [pc, #224]	@ (80080d8 <UART_SetConfig+0x4e4>)
 8007ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8007ffa:	095b      	lsrs	r3, r3, #5
 8007ffc:	2264      	movs	r2, #100	@ 0x64
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	1acb      	subs	r3, r1, r3
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	3332      	adds	r3, #50	@ 0x32
 8008008:	4a33      	ldr	r2, [pc, #204]	@ (80080d8 <UART_SetConfig+0x4e4>)
 800800a:	fba2 2303 	umull	r2, r3, r2, r3
 800800e:	095b      	lsrs	r3, r3, #5
 8008010:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008014:	441c      	add	r4, r3
 8008016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800801a:	2200      	movs	r2, #0
 800801c:	673b      	str	r3, [r7, #112]	@ 0x70
 800801e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008020:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008024:	4642      	mov	r2, r8
 8008026:	464b      	mov	r3, r9
 8008028:	1891      	adds	r1, r2, r2
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	415b      	adcs	r3, r3
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008034:	4641      	mov	r1, r8
 8008036:	1851      	adds	r1, r2, r1
 8008038:	6039      	str	r1, [r7, #0]
 800803a:	4649      	mov	r1, r9
 800803c:	414b      	adcs	r3, r1
 800803e:	607b      	str	r3, [r7, #4]
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	f04f 0300 	mov.w	r3, #0
 8008048:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800804c:	4659      	mov	r1, fp
 800804e:	00cb      	lsls	r3, r1, #3
 8008050:	4651      	mov	r1, sl
 8008052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008056:	4651      	mov	r1, sl
 8008058:	00ca      	lsls	r2, r1, #3
 800805a:	4610      	mov	r0, r2
 800805c:	4619      	mov	r1, r3
 800805e:	4603      	mov	r3, r0
 8008060:	4642      	mov	r2, r8
 8008062:	189b      	adds	r3, r3, r2
 8008064:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008066:	464b      	mov	r3, r9
 8008068:	460a      	mov	r2, r1
 800806a:	eb42 0303 	adc.w	r3, r2, r3
 800806e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	663b      	str	r3, [r7, #96]	@ 0x60
 800807a:	667a      	str	r2, [r7, #100]	@ 0x64
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008088:	4649      	mov	r1, r9
 800808a:	008b      	lsls	r3, r1, #2
 800808c:	4641      	mov	r1, r8
 800808e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008092:	4641      	mov	r1, r8
 8008094:	008a      	lsls	r2, r1, #2
 8008096:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800809a:	f7f8 fd8d 	bl	8000bb8 <__aeabi_uldivmod>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4b0d      	ldr	r3, [pc, #52]	@ (80080d8 <UART_SetConfig+0x4e4>)
 80080a4:	fba3 1302 	umull	r1, r3, r3, r2
 80080a8:	095b      	lsrs	r3, r3, #5
 80080aa:	2164      	movs	r1, #100	@ 0x64
 80080ac:	fb01 f303 	mul.w	r3, r1, r3
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	011b      	lsls	r3, r3, #4
 80080b4:	3332      	adds	r3, #50	@ 0x32
 80080b6:	4a08      	ldr	r2, [pc, #32]	@ (80080d8 <UART_SetConfig+0x4e4>)
 80080b8:	fba2 2303 	umull	r2, r3, r2, r3
 80080bc:	095b      	lsrs	r3, r3, #5
 80080be:	f003 020f 	and.w	r2, r3, #15
 80080c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4422      	add	r2, r4
 80080ca:	609a      	str	r2, [r3, #8]
}
 80080cc:	bf00      	nop
 80080ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80080d2:	46bd      	mov	sp, r7
 80080d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080d8:	51eb851f 	.word	0x51eb851f

080080dc <__cvt>:
 80080dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080e0:	ec57 6b10 	vmov	r6, r7, d0
 80080e4:	2f00      	cmp	r7, #0
 80080e6:	460c      	mov	r4, r1
 80080e8:	4619      	mov	r1, r3
 80080ea:	463b      	mov	r3, r7
 80080ec:	bfbb      	ittet	lt
 80080ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80080f2:	461f      	movlt	r7, r3
 80080f4:	2300      	movge	r3, #0
 80080f6:	232d      	movlt	r3, #45	@ 0x2d
 80080f8:	700b      	strb	r3, [r1, #0]
 80080fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008100:	4691      	mov	r9, r2
 8008102:	f023 0820 	bic.w	r8, r3, #32
 8008106:	bfbc      	itt	lt
 8008108:	4632      	movlt	r2, r6
 800810a:	4616      	movlt	r6, r2
 800810c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008110:	d005      	beq.n	800811e <__cvt+0x42>
 8008112:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008116:	d100      	bne.n	800811a <__cvt+0x3e>
 8008118:	3401      	adds	r4, #1
 800811a:	2102      	movs	r1, #2
 800811c:	e000      	b.n	8008120 <__cvt+0x44>
 800811e:	2103      	movs	r1, #3
 8008120:	ab03      	add	r3, sp, #12
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	ab02      	add	r3, sp, #8
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	ec47 6b10 	vmov	d0, r6, r7
 800812c:	4653      	mov	r3, sl
 800812e:	4622      	mov	r2, r4
 8008130:	f000 fe76 	bl	8008e20 <_dtoa_r>
 8008134:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008138:	4605      	mov	r5, r0
 800813a:	d119      	bne.n	8008170 <__cvt+0x94>
 800813c:	f019 0f01 	tst.w	r9, #1
 8008140:	d00e      	beq.n	8008160 <__cvt+0x84>
 8008142:	eb00 0904 	add.w	r9, r0, r4
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	4630      	mov	r0, r6
 800814c:	4639      	mov	r1, r7
 800814e:	f7f8 fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008152:	b108      	cbz	r0, 8008158 <__cvt+0x7c>
 8008154:	f8cd 900c 	str.w	r9, [sp, #12]
 8008158:	2230      	movs	r2, #48	@ 0x30
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	454b      	cmp	r3, r9
 800815e:	d31e      	bcc.n	800819e <__cvt+0xc2>
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008164:	1b5b      	subs	r3, r3, r5
 8008166:	4628      	mov	r0, r5
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	b004      	add	sp, #16
 800816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008170:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008174:	eb00 0904 	add.w	r9, r0, r4
 8008178:	d1e5      	bne.n	8008146 <__cvt+0x6a>
 800817a:	7803      	ldrb	r3, [r0, #0]
 800817c:	2b30      	cmp	r3, #48	@ 0x30
 800817e:	d10a      	bne.n	8008196 <__cvt+0xba>
 8008180:	2200      	movs	r2, #0
 8008182:	2300      	movs	r3, #0
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 fca6 	bl	8000ad8 <__aeabi_dcmpeq>
 800818c:	b918      	cbnz	r0, 8008196 <__cvt+0xba>
 800818e:	f1c4 0401 	rsb	r4, r4, #1
 8008192:	f8ca 4000 	str.w	r4, [sl]
 8008196:	f8da 3000 	ldr.w	r3, [sl]
 800819a:	4499      	add	r9, r3
 800819c:	e7d3      	b.n	8008146 <__cvt+0x6a>
 800819e:	1c59      	adds	r1, r3, #1
 80081a0:	9103      	str	r1, [sp, #12]
 80081a2:	701a      	strb	r2, [r3, #0]
 80081a4:	e7d9      	b.n	800815a <__cvt+0x7e>

080081a6 <__exponent>:
 80081a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081a8:	2900      	cmp	r1, #0
 80081aa:	bfba      	itte	lt
 80081ac:	4249      	neglt	r1, r1
 80081ae:	232d      	movlt	r3, #45	@ 0x2d
 80081b0:	232b      	movge	r3, #43	@ 0x2b
 80081b2:	2909      	cmp	r1, #9
 80081b4:	7002      	strb	r2, [r0, #0]
 80081b6:	7043      	strb	r3, [r0, #1]
 80081b8:	dd29      	ble.n	800820e <__exponent+0x68>
 80081ba:	f10d 0307 	add.w	r3, sp, #7
 80081be:	461d      	mov	r5, r3
 80081c0:	270a      	movs	r7, #10
 80081c2:	461a      	mov	r2, r3
 80081c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80081c8:	fb07 1416 	mls	r4, r7, r6, r1
 80081cc:	3430      	adds	r4, #48	@ 0x30
 80081ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80081d2:	460c      	mov	r4, r1
 80081d4:	2c63      	cmp	r4, #99	@ 0x63
 80081d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80081da:	4631      	mov	r1, r6
 80081dc:	dcf1      	bgt.n	80081c2 <__exponent+0x1c>
 80081de:	3130      	adds	r1, #48	@ 0x30
 80081e0:	1e94      	subs	r4, r2, #2
 80081e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80081e6:	1c41      	adds	r1, r0, #1
 80081e8:	4623      	mov	r3, r4
 80081ea:	42ab      	cmp	r3, r5
 80081ec:	d30a      	bcc.n	8008204 <__exponent+0x5e>
 80081ee:	f10d 0309 	add.w	r3, sp, #9
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	42ac      	cmp	r4, r5
 80081f6:	bf88      	it	hi
 80081f8:	2300      	movhi	r3, #0
 80081fa:	3302      	adds	r3, #2
 80081fc:	4403      	add	r3, r0
 80081fe:	1a18      	subs	r0, r3, r0
 8008200:	b003      	add	sp, #12
 8008202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008204:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008208:	f801 6f01 	strb.w	r6, [r1, #1]!
 800820c:	e7ed      	b.n	80081ea <__exponent+0x44>
 800820e:	2330      	movs	r3, #48	@ 0x30
 8008210:	3130      	adds	r1, #48	@ 0x30
 8008212:	7083      	strb	r3, [r0, #2]
 8008214:	70c1      	strb	r1, [r0, #3]
 8008216:	1d03      	adds	r3, r0, #4
 8008218:	e7f1      	b.n	80081fe <__exponent+0x58>
	...

0800821c <_printf_float>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	b08d      	sub	sp, #52	@ 0x34
 8008222:	460c      	mov	r4, r1
 8008224:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008228:	4616      	mov	r6, r2
 800822a:	461f      	mov	r7, r3
 800822c:	4605      	mov	r5, r0
 800822e:	f000 fcf5 	bl	8008c1c <_localeconv_r>
 8008232:	6803      	ldr	r3, [r0, #0]
 8008234:	9304      	str	r3, [sp, #16]
 8008236:	4618      	mov	r0, r3
 8008238:	f7f8 f822 	bl	8000280 <strlen>
 800823c:	2300      	movs	r3, #0
 800823e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008240:	f8d8 3000 	ldr.w	r3, [r8]
 8008244:	9005      	str	r0, [sp, #20]
 8008246:	3307      	adds	r3, #7
 8008248:	f023 0307 	bic.w	r3, r3, #7
 800824c:	f103 0208 	add.w	r2, r3, #8
 8008250:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008254:	f8d4 b000 	ldr.w	fp, [r4]
 8008258:	f8c8 2000 	str.w	r2, [r8]
 800825c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008260:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008264:	9307      	str	r3, [sp, #28]
 8008266:	f8cd 8018 	str.w	r8, [sp, #24]
 800826a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800826e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008272:	4b9c      	ldr	r3, [pc, #624]	@ (80084e4 <_printf_float+0x2c8>)
 8008274:	f04f 32ff 	mov.w	r2, #4294967295
 8008278:	f7f8 fc60 	bl	8000b3c <__aeabi_dcmpun>
 800827c:	bb70      	cbnz	r0, 80082dc <_printf_float+0xc0>
 800827e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008282:	4b98      	ldr	r3, [pc, #608]	@ (80084e4 <_printf_float+0x2c8>)
 8008284:	f04f 32ff 	mov.w	r2, #4294967295
 8008288:	f7f8 fc3a 	bl	8000b00 <__aeabi_dcmple>
 800828c:	bb30      	cbnz	r0, 80082dc <_printf_float+0xc0>
 800828e:	2200      	movs	r2, #0
 8008290:	2300      	movs	r3, #0
 8008292:	4640      	mov	r0, r8
 8008294:	4649      	mov	r1, r9
 8008296:	f7f8 fc29 	bl	8000aec <__aeabi_dcmplt>
 800829a:	b110      	cbz	r0, 80082a2 <_printf_float+0x86>
 800829c:	232d      	movs	r3, #45	@ 0x2d
 800829e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082a2:	4a91      	ldr	r2, [pc, #580]	@ (80084e8 <_printf_float+0x2cc>)
 80082a4:	4b91      	ldr	r3, [pc, #580]	@ (80084ec <_printf_float+0x2d0>)
 80082a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082aa:	bf8c      	ite	hi
 80082ac:	4690      	movhi	r8, r2
 80082ae:	4698      	movls	r8, r3
 80082b0:	2303      	movs	r3, #3
 80082b2:	6123      	str	r3, [r4, #16]
 80082b4:	f02b 0304 	bic.w	r3, fp, #4
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	f04f 0900 	mov.w	r9, #0
 80082be:	9700      	str	r7, [sp, #0]
 80082c0:	4633      	mov	r3, r6
 80082c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80082c4:	4621      	mov	r1, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 f9d2 	bl	8008670 <_printf_common>
 80082cc:	3001      	adds	r0, #1
 80082ce:	f040 808d 	bne.w	80083ec <_printf_float+0x1d0>
 80082d2:	f04f 30ff 	mov.w	r0, #4294967295
 80082d6:	b00d      	add	sp, #52	@ 0x34
 80082d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	4640      	mov	r0, r8
 80082e2:	4649      	mov	r1, r9
 80082e4:	f7f8 fc2a 	bl	8000b3c <__aeabi_dcmpun>
 80082e8:	b140      	cbz	r0, 80082fc <_printf_float+0xe0>
 80082ea:	464b      	mov	r3, r9
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	bfbc      	itt	lt
 80082f0:	232d      	movlt	r3, #45	@ 0x2d
 80082f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80082f6:	4a7e      	ldr	r2, [pc, #504]	@ (80084f0 <_printf_float+0x2d4>)
 80082f8:	4b7e      	ldr	r3, [pc, #504]	@ (80084f4 <_printf_float+0x2d8>)
 80082fa:	e7d4      	b.n	80082a6 <_printf_float+0x8a>
 80082fc:	6863      	ldr	r3, [r4, #4]
 80082fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008302:	9206      	str	r2, [sp, #24]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	d13b      	bne.n	8008380 <_printf_float+0x164>
 8008308:	2306      	movs	r3, #6
 800830a:	6063      	str	r3, [r4, #4]
 800830c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008310:	2300      	movs	r3, #0
 8008312:	6022      	str	r2, [r4, #0]
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	ab0a      	add	r3, sp, #40	@ 0x28
 8008318:	e9cd a301 	strd	sl, r3, [sp, #4]
 800831c:	ab09      	add	r3, sp, #36	@ 0x24
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	6861      	ldr	r1, [r4, #4]
 8008322:	ec49 8b10 	vmov	d0, r8, r9
 8008326:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800832a:	4628      	mov	r0, r5
 800832c:	f7ff fed6 	bl	80080dc <__cvt>
 8008330:	9b06      	ldr	r3, [sp, #24]
 8008332:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008334:	2b47      	cmp	r3, #71	@ 0x47
 8008336:	4680      	mov	r8, r0
 8008338:	d129      	bne.n	800838e <_printf_float+0x172>
 800833a:	1cc8      	adds	r0, r1, #3
 800833c:	db02      	blt.n	8008344 <_printf_float+0x128>
 800833e:	6863      	ldr	r3, [r4, #4]
 8008340:	4299      	cmp	r1, r3
 8008342:	dd41      	ble.n	80083c8 <_printf_float+0x1ac>
 8008344:	f1aa 0a02 	sub.w	sl, sl, #2
 8008348:	fa5f fa8a 	uxtb.w	sl, sl
 800834c:	3901      	subs	r1, #1
 800834e:	4652      	mov	r2, sl
 8008350:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008354:	9109      	str	r1, [sp, #36]	@ 0x24
 8008356:	f7ff ff26 	bl	80081a6 <__exponent>
 800835a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800835c:	1813      	adds	r3, r2, r0
 800835e:	2a01      	cmp	r2, #1
 8008360:	4681      	mov	r9, r0
 8008362:	6123      	str	r3, [r4, #16]
 8008364:	dc02      	bgt.n	800836c <_printf_float+0x150>
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	07d2      	lsls	r2, r2, #31
 800836a:	d501      	bpl.n	8008370 <_printf_float+0x154>
 800836c:	3301      	adds	r3, #1
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0a2      	beq.n	80082be <_printf_float+0xa2>
 8008378:	232d      	movs	r3, #45	@ 0x2d
 800837a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800837e:	e79e      	b.n	80082be <_printf_float+0xa2>
 8008380:	9a06      	ldr	r2, [sp, #24]
 8008382:	2a47      	cmp	r2, #71	@ 0x47
 8008384:	d1c2      	bne.n	800830c <_printf_float+0xf0>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1c0      	bne.n	800830c <_printf_float+0xf0>
 800838a:	2301      	movs	r3, #1
 800838c:	e7bd      	b.n	800830a <_printf_float+0xee>
 800838e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008392:	d9db      	bls.n	800834c <_printf_float+0x130>
 8008394:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008398:	d118      	bne.n	80083cc <_printf_float+0x1b0>
 800839a:	2900      	cmp	r1, #0
 800839c:	6863      	ldr	r3, [r4, #4]
 800839e:	dd0b      	ble.n	80083b8 <_printf_float+0x19c>
 80083a0:	6121      	str	r1, [r4, #16]
 80083a2:	b913      	cbnz	r3, 80083aa <_printf_float+0x18e>
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	07d0      	lsls	r0, r2, #31
 80083a8:	d502      	bpl.n	80083b0 <_printf_float+0x194>
 80083aa:	3301      	adds	r3, #1
 80083ac:	440b      	add	r3, r1
 80083ae:	6123      	str	r3, [r4, #16]
 80083b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80083b2:	f04f 0900 	mov.w	r9, #0
 80083b6:	e7db      	b.n	8008370 <_printf_float+0x154>
 80083b8:	b913      	cbnz	r3, 80083c0 <_printf_float+0x1a4>
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	07d2      	lsls	r2, r2, #31
 80083be:	d501      	bpl.n	80083c4 <_printf_float+0x1a8>
 80083c0:	3302      	adds	r3, #2
 80083c2:	e7f4      	b.n	80083ae <_printf_float+0x192>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e7f2      	b.n	80083ae <_printf_float+0x192>
 80083c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80083cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ce:	4299      	cmp	r1, r3
 80083d0:	db05      	blt.n	80083de <_printf_float+0x1c2>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	6121      	str	r1, [r4, #16]
 80083d6:	07d8      	lsls	r0, r3, #31
 80083d8:	d5ea      	bpl.n	80083b0 <_printf_float+0x194>
 80083da:	1c4b      	adds	r3, r1, #1
 80083dc:	e7e7      	b.n	80083ae <_printf_float+0x192>
 80083de:	2900      	cmp	r1, #0
 80083e0:	bfd4      	ite	le
 80083e2:	f1c1 0202 	rsble	r2, r1, #2
 80083e6:	2201      	movgt	r2, #1
 80083e8:	4413      	add	r3, r2
 80083ea:	e7e0      	b.n	80083ae <_printf_float+0x192>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	055a      	lsls	r2, r3, #21
 80083f0:	d407      	bmi.n	8008402 <_printf_float+0x1e6>
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	4642      	mov	r2, r8
 80083f6:	4631      	mov	r1, r6
 80083f8:	4628      	mov	r0, r5
 80083fa:	47b8      	blx	r7
 80083fc:	3001      	adds	r0, #1
 80083fe:	d12b      	bne.n	8008458 <_printf_float+0x23c>
 8008400:	e767      	b.n	80082d2 <_printf_float+0xb6>
 8008402:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008406:	f240 80dd 	bls.w	80085c4 <_printf_float+0x3a8>
 800840a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800840e:	2200      	movs	r2, #0
 8008410:	2300      	movs	r3, #0
 8008412:	f7f8 fb61 	bl	8000ad8 <__aeabi_dcmpeq>
 8008416:	2800      	cmp	r0, #0
 8008418:	d033      	beq.n	8008482 <_printf_float+0x266>
 800841a:	4a37      	ldr	r2, [pc, #220]	@ (80084f8 <_printf_float+0x2dc>)
 800841c:	2301      	movs	r3, #1
 800841e:	4631      	mov	r1, r6
 8008420:	4628      	mov	r0, r5
 8008422:	47b8      	blx	r7
 8008424:	3001      	adds	r0, #1
 8008426:	f43f af54 	beq.w	80082d2 <_printf_float+0xb6>
 800842a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800842e:	4543      	cmp	r3, r8
 8008430:	db02      	blt.n	8008438 <_printf_float+0x21c>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	07d8      	lsls	r0, r3, #31
 8008436:	d50f      	bpl.n	8008458 <_printf_float+0x23c>
 8008438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	f43f af45 	beq.w	80082d2 <_printf_float+0xb6>
 8008448:	f04f 0900 	mov.w	r9, #0
 800844c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008450:	f104 0a1a 	add.w	sl, r4, #26
 8008454:	45c8      	cmp	r8, r9
 8008456:	dc09      	bgt.n	800846c <_printf_float+0x250>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	079b      	lsls	r3, r3, #30
 800845c:	f100 8103 	bmi.w	8008666 <_printf_float+0x44a>
 8008460:	68e0      	ldr	r0, [r4, #12]
 8008462:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008464:	4298      	cmp	r0, r3
 8008466:	bfb8      	it	lt
 8008468:	4618      	movlt	r0, r3
 800846a:	e734      	b.n	80082d6 <_printf_float+0xba>
 800846c:	2301      	movs	r3, #1
 800846e:	4652      	mov	r2, sl
 8008470:	4631      	mov	r1, r6
 8008472:	4628      	mov	r0, r5
 8008474:	47b8      	blx	r7
 8008476:	3001      	adds	r0, #1
 8008478:	f43f af2b 	beq.w	80082d2 <_printf_float+0xb6>
 800847c:	f109 0901 	add.w	r9, r9, #1
 8008480:	e7e8      	b.n	8008454 <_printf_float+0x238>
 8008482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008484:	2b00      	cmp	r3, #0
 8008486:	dc39      	bgt.n	80084fc <_printf_float+0x2e0>
 8008488:	4a1b      	ldr	r2, [pc, #108]	@ (80084f8 <_printf_float+0x2dc>)
 800848a:	2301      	movs	r3, #1
 800848c:	4631      	mov	r1, r6
 800848e:	4628      	mov	r0, r5
 8008490:	47b8      	blx	r7
 8008492:	3001      	adds	r0, #1
 8008494:	f43f af1d 	beq.w	80082d2 <_printf_float+0xb6>
 8008498:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800849c:	ea59 0303 	orrs.w	r3, r9, r3
 80084a0:	d102      	bne.n	80084a8 <_printf_float+0x28c>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	07d9      	lsls	r1, r3, #31
 80084a6:	d5d7      	bpl.n	8008458 <_printf_float+0x23c>
 80084a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	47b8      	blx	r7
 80084b2:	3001      	adds	r0, #1
 80084b4:	f43f af0d 	beq.w	80082d2 <_printf_float+0xb6>
 80084b8:	f04f 0a00 	mov.w	sl, #0
 80084bc:	f104 0b1a 	add.w	fp, r4, #26
 80084c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c2:	425b      	negs	r3, r3
 80084c4:	4553      	cmp	r3, sl
 80084c6:	dc01      	bgt.n	80084cc <_printf_float+0x2b0>
 80084c8:	464b      	mov	r3, r9
 80084ca:	e793      	b.n	80083f4 <_printf_float+0x1d8>
 80084cc:	2301      	movs	r3, #1
 80084ce:	465a      	mov	r2, fp
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	f43f aefb 	beq.w	80082d2 <_printf_float+0xb6>
 80084dc:	f10a 0a01 	add.w	sl, sl, #1
 80084e0:	e7ee      	b.n	80084c0 <_printf_float+0x2a4>
 80084e2:	bf00      	nop
 80084e4:	7fefffff 	.word	0x7fefffff
 80084e8:	0800c938 	.word	0x0800c938
 80084ec:	0800c934 	.word	0x0800c934
 80084f0:	0800c940 	.word	0x0800c940
 80084f4:	0800c93c 	.word	0x0800c93c
 80084f8:	0800c944 	.word	0x0800c944
 80084fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80084fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008502:	4553      	cmp	r3, sl
 8008504:	bfa8      	it	ge
 8008506:	4653      	movge	r3, sl
 8008508:	2b00      	cmp	r3, #0
 800850a:	4699      	mov	r9, r3
 800850c:	dc36      	bgt.n	800857c <_printf_float+0x360>
 800850e:	f04f 0b00 	mov.w	fp, #0
 8008512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008516:	f104 021a 	add.w	r2, r4, #26
 800851a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800851c:	9306      	str	r3, [sp, #24]
 800851e:	eba3 0309 	sub.w	r3, r3, r9
 8008522:	455b      	cmp	r3, fp
 8008524:	dc31      	bgt.n	800858a <_printf_float+0x36e>
 8008526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008528:	459a      	cmp	sl, r3
 800852a:	dc3a      	bgt.n	80085a2 <_printf_float+0x386>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	07da      	lsls	r2, r3, #31
 8008530:	d437      	bmi.n	80085a2 <_printf_float+0x386>
 8008532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008534:	ebaa 0903 	sub.w	r9, sl, r3
 8008538:	9b06      	ldr	r3, [sp, #24]
 800853a:	ebaa 0303 	sub.w	r3, sl, r3
 800853e:	4599      	cmp	r9, r3
 8008540:	bfa8      	it	ge
 8008542:	4699      	movge	r9, r3
 8008544:	f1b9 0f00 	cmp.w	r9, #0
 8008548:	dc33      	bgt.n	80085b2 <_printf_float+0x396>
 800854a:	f04f 0800 	mov.w	r8, #0
 800854e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008552:	f104 0b1a 	add.w	fp, r4, #26
 8008556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008558:	ebaa 0303 	sub.w	r3, sl, r3
 800855c:	eba3 0309 	sub.w	r3, r3, r9
 8008560:	4543      	cmp	r3, r8
 8008562:	f77f af79 	ble.w	8008458 <_printf_float+0x23c>
 8008566:	2301      	movs	r3, #1
 8008568:	465a      	mov	r2, fp
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	47b8      	blx	r7
 8008570:	3001      	adds	r0, #1
 8008572:	f43f aeae 	beq.w	80082d2 <_printf_float+0xb6>
 8008576:	f108 0801 	add.w	r8, r8, #1
 800857a:	e7ec      	b.n	8008556 <_printf_float+0x33a>
 800857c:	4642      	mov	r2, r8
 800857e:	4631      	mov	r1, r6
 8008580:	4628      	mov	r0, r5
 8008582:	47b8      	blx	r7
 8008584:	3001      	adds	r0, #1
 8008586:	d1c2      	bne.n	800850e <_printf_float+0x2f2>
 8008588:	e6a3      	b.n	80082d2 <_printf_float+0xb6>
 800858a:	2301      	movs	r3, #1
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	9206      	str	r2, [sp, #24]
 8008592:	47b8      	blx	r7
 8008594:	3001      	adds	r0, #1
 8008596:	f43f ae9c 	beq.w	80082d2 <_printf_float+0xb6>
 800859a:	9a06      	ldr	r2, [sp, #24]
 800859c:	f10b 0b01 	add.w	fp, fp, #1
 80085a0:	e7bb      	b.n	800851a <_printf_float+0x2fe>
 80085a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085a6:	4631      	mov	r1, r6
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	d1c0      	bne.n	8008532 <_printf_float+0x316>
 80085b0:	e68f      	b.n	80082d2 <_printf_float+0xb6>
 80085b2:	9a06      	ldr	r2, [sp, #24]
 80085b4:	464b      	mov	r3, r9
 80085b6:	4442      	add	r2, r8
 80085b8:	4631      	mov	r1, r6
 80085ba:	4628      	mov	r0, r5
 80085bc:	47b8      	blx	r7
 80085be:	3001      	adds	r0, #1
 80085c0:	d1c3      	bne.n	800854a <_printf_float+0x32e>
 80085c2:	e686      	b.n	80082d2 <_printf_float+0xb6>
 80085c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085c8:	f1ba 0f01 	cmp.w	sl, #1
 80085cc:	dc01      	bgt.n	80085d2 <_printf_float+0x3b6>
 80085ce:	07db      	lsls	r3, r3, #31
 80085d0:	d536      	bpl.n	8008640 <_printf_float+0x424>
 80085d2:	2301      	movs	r3, #1
 80085d4:	4642      	mov	r2, r8
 80085d6:	4631      	mov	r1, r6
 80085d8:	4628      	mov	r0, r5
 80085da:	47b8      	blx	r7
 80085dc:	3001      	adds	r0, #1
 80085de:	f43f ae78 	beq.w	80082d2 <_printf_float+0xb6>
 80085e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	f43f ae70 	beq.w	80082d2 <_printf_float+0xb6>
 80085f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80085f6:	2200      	movs	r2, #0
 80085f8:	2300      	movs	r3, #0
 80085fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085fe:	f7f8 fa6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008602:	b9c0      	cbnz	r0, 8008636 <_printf_float+0x41a>
 8008604:	4653      	mov	r3, sl
 8008606:	f108 0201 	add.w	r2, r8, #1
 800860a:	4631      	mov	r1, r6
 800860c:	4628      	mov	r0, r5
 800860e:	47b8      	blx	r7
 8008610:	3001      	adds	r0, #1
 8008612:	d10c      	bne.n	800862e <_printf_float+0x412>
 8008614:	e65d      	b.n	80082d2 <_printf_float+0xb6>
 8008616:	2301      	movs	r3, #1
 8008618:	465a      	mov	r2, fp
 800861a:	4631      	mov	r1, r6
 800861c:	4628      	mov	r0, r5
 800861e:	47b8      	blx	r7
 8008620:	3001      	adds	r0, #1
 8008622:	f43f ae56 	beq.w	80082d2 <_printf_float+0xb6>
 8008626:	f108 0801 	add.w	r8, r8, #1
 800862a:	45d0      	cmp	r8, sl
 800862c:	dbf3      	blt.n	8008616 <_printf_float+0x3fa>
 800862e:	464b      	mov	r3, r9
 8008630:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008634:	e6df      	b.n	80083f6 <_printf_float+0x1da>
 8008636:	f04f 0800 	mov.w	r8, #0
 800863a:	f104 0b1a 	add.w	fp, r4, #26
 800863e:	e7f4      	b.n	800862a <_printf_float+0x40e>
 8008640:	2301      	movs	r3, #1
 8008642:	4642      	mov	r2, r8
 8008644:	e7e1      	b.n	800860a <_printf_float+0x3ee>
 8008646:	2301      	movs	r3, #1
 8008648:	464a      	mov	r2, r9
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	f43f ae3e 	beq.w	80082d2 <_printf_float+0xb6>
 8008656:	f108 0801 	add.w	r8, r8, #1
 800865a:	68e3      	ldr	r3, [r4, #12]
 800865c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800865e:	1a5b      	subs	r3, r3, r1
 8008660:	4543      	cmp	r3, r8
 8008662:	dcf0      	bgt.n	8008646 <_printf_float+0x42a>
 8008664:	e6fc      	b.n	8008460 <_printf_float+0x244>
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	f104 0919 	add.w	r9, r4, #25
 800866e:	e7f4      	b.n	800865a <_printf_float+0x43e>

08008670 <_printf_common>:
 8008670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	4616      	mov	r6, r2
 8008676:	4698      	mov	r8, r3
 8008678:	688a      	ldr	r2, [r1, #8]
 800867a:	690b      	ldr	r3, [r1, #16]
 800867c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008680:	4293      	cmp	r3, r2
 8008682:	bfb8      	it	lt
 8008684:	4613      	movlt	r3, r2
 8008686:	6033      	str	r3, [r6, #0]
 8008688:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800868c:	4607      	mov	r7, r0
 800868e:	460c      	mov	r4, r1
 8008690:	b10a      	cbz	r2, 8008696 <_printf_common+0x26>
 8008692:	3301      	adds	r3, #1
 8008694:	6033      	str	r3, [r6, #0]
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	0699      	lsls	r1, r3, #26
 800869a:	bf42      	ittt	mi
 800869c:	6833      	ldrmi	r3, [r6, #0]
 800869e:	3302      	addmi	r3, #2
 80086a0:	6033      	strmi	r3, [r6, #0]
 80086a2:	6825      	ldr	r5, [r4, #0]
 80086a4:	f015 0506 	ands.w	r5, r5, #6
 80086a8:	d106      	bne.n	80086b8 <_printf_common+0x48>
 80086aa:	f104 0a19 	add.w	sl, r4, #25
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	6832      	ldr	r2, [r6, #0]
 80086b2:	1a9b      	subs	r3, r3, r2
 80086b4:	42ab      	cmp	r3, r5
 80086b6:	dc26      	bgt.n	8008706 <_printf_common+0x96>
 80086b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086bc:	6822      	ldr	r2, [r4, #0]
 80086be:	3b00      	subs	r3, #0
 80086c0:	bf18      	it	ne
 80086c2:	2301      	movne	r3, #1
 80086c4:	0692      	lsls	r2, r2, #26
 80086c6:	d42b      	bmi.n	8008720 <_printf_common+0xb0>
 80086c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086cc:	4641      	mov	r1, r8
 80086ce:	4638      	mov	r0, r7
 80086d0:	47c8      	blx	r9
 80086d2:	3001      	adds	r0, #1
 80086d4:	d01e      	beq.n	8008714 <_printf_common+0xa4>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	6922      	ldr	r2, [r4, #16]
 80086da:	f003 0306 	and.w	r3, r3, #6
 80086de:	2b04      	cmp	r3, #4
 80086e0:	bf02      	ittt	eq
 80086e2:	68e5      	ldreq	r5, [r4, #12]
 80086e4:	6833      	ldreq	r3, [r6, #0]
 80086e6:	1aed      	subeq	r5, r5, r3
 80086e8:	68a3      	ldr	r3, [r4, #8]
 80086ea:	bf0c      	ite	eq
 80086ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086f0:	2500      	movne	r5, #0
 80086f2:	4293      	cmp	r3, r2
 80086f4:	bfc4      	itt	gt
 80086f6:	1a9b      	subgt	r3, r3, r2
 80086f8:	18ed      	addgt	r5, r5, r3
 80086fa:	2600      	movs	r6, #0
 80086fc:	341a      	adds	r4, #26
 80086fe:	42b5      	cmp	r5, r6
 8008700:	d11a      	bne.n	8008738 <_printf_common+0xc8>
 8008702:	2000      	movs	r0, #0
 8008704:	e008      	b.n	8008718 <_printf_common+0xa8>
 8008706:	2301      	movs	r3, #1
 8008708:	4652      	mov	r2, sl
 800870a:	4641      	mov	r1, r8
 800870c:	4638      	mov	r0, r7
 800870e:	47c8      	blx	r9
 8008710:	3001      	adds	r0, #1
 8008712:	d103      	bne.n	800871c <_printf_common+0xac>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871c:	3501      	adds	r5, #1
 800871e:	e7c6      	b.n	80086ae <_printf_common+0x3e>
 8008720:	18e1      	adds	r1, r4, r3
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	2030      	movs	r0, #48	@ 0x30
 8008726:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800872a:	4422      	add	r2, r4
 800872c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008730:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008734:	3302      	adds	r3, #2
 8008736:	e7c7      	b.n	80086c8 <_printf_common+0x58>
 8008738:	2301      	movs	r3, #1
 800873a:	4622      	mov	r2, r4
 800873c:	4641      	mov	r1, r8
 800873e:	4638      	mov	r0, r7
 8008740:	47c8      	blx	r9
 8008742:	3001      	adds	r0, #1
 8008744:	d0e6      	beq.n	8008714 <_printf_common+0xa4>
 8008746:	3601      	adds	r6, #1
 8008748:	e7d9      	b.n	80086fe <_printf_common+0x8e>
	...

0800874c <_printf_i>:
 800874c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008750:	7e0f      	ldrb	r7, [r1, #24]
 8008752:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008754:	2f78      	cmp	r7, #120	@ 0x78
 8008756:	4691      	mov	r9, r2
 8008758:	4680      	mov	r8, r0
 800875a:	460c      	mov	r4, r1
 800875c:	469a      	mov	sl, r3
 800875e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008762:	d807      	bhi.n	8008774 <_printf_i+0x28>
 8008764:	2f62      	cmp	r7, #98	@ 0x62
 8008766:	d80a      	bhi.n	800877e <_printf_i+0x32>
 8008768:	2f00      	cmp	r7, #0
 800876a:	f000 80d1 	beq.w	8008910 <_printf_i+0x1c4>
 800876e:	2f58      	cmp	r7, #88	@ 0x58
 8008770:	f000 80b8 	beq.w	80088e4 <_printf_i+0x198>
 8008774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008778:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800877c:	e03a      	b.n	80087f4 <_printf_i+0xa8>
 800877e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008782:	2b15      	cmp	r3, #21
 8008784:	d8f6      	bhi.n	8008774 <_printf_i+0x28>
 8008786:	a101      	add	r1, pc, #4	@ (adr r1, 800878c <_printf_i+0x40>)
 8008788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800878c:	080087e5 	.word	0x080087e5
 8008790:	080087f9 	.word	0x080087f9
 8008794:	08008775 	.word	0x08008775
 8008798:	08008775 	.word	0x08008775
 800879c:	08008775 	.word	0x08008775
 80087a0:	08008775 	.word	0x08008775
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	08008775 	.word	0x08008775
 80087ac:	08008775 	.word	0x08008775
 80087b0:	08008775 	.word	0x08008775
 80087b4:	08008775 	.word	0x08008775
 80087b8:	080088f7 	.word	0x080088f7
 80087bc:	08008823 	.word	0x08008823
 80087c0:	080088b1 	.word	0x080088b1
 80087c4:	08008775 	.word	0x08008775
 80087c8:	08008775 	.word	0x08008775
 80087cc:	08008919 	.word	0x08008919
 80087d0:	08008775 	.word	0x08008775
 80087d4:	08008823 	.word	0x08008823
 80087d8:	08008775 	.word	0x08008775
 80087dc:	08008775 	.word	0x08008775
 80087e0:	080088b9 	.word	0x080088b9
 80087e4:	6833      	ldr	r3, [r6, #0]
 80087e6:	1d1a      	adds	r2, r3, #4
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6032      	str	r2, [r6, #0]
 80087ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087f4:	2301      	movs	r3, #1
 80087f6:	e09c      	b.n	8008932 <_printf_i+0x1e6>
 80087f8:	6833      	ldr	r3, [r6, #0]
 80087fa:	6820      	ldr	r0, [r4, #0]
 80087fc:	1d19      	adds	r1, r3, #4
 80087fe:	6031      	str	r1, [r6, #0]
 8008800:	0606      	lsls	r6, r0, #24
 8008802:	d501      	bpl.n	8008808 <_printf_i+0xbc>
 8008804:	681d      	ldr	r5, [r3, #0]
 8008806:	e003      	b.n	8008810 <_printf_i+0xc4>
 8008808:	0645      	lsls	r5, r0, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0xb8>
 800880c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008810:	2d00      	cmp	r5, #0
 8008812:	da03      	bge.n	800881c <_printf_i+0xd0>
 8008814:	232d      	movs	r3, #45	@ 0x2d
 8008816:	426d      	negs	r5, r5
 8008818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800881c:	4858      	ldr	r0, [pc, #352]	@ (8008980 <_printf_i+0x234>)
 800881e:	230a      	movs	r3, #10
 8008820:	e011      	b.n	8008846 <_printf_i+0xfa>
 8008822:	6821      	ldr	r1, [r4, #0]
 8008824:	6833      	ldr	r3, [r6, #0]
 8008826:	0608      	lsls	r0, r1, #24
 8008828:	f853 5b04 	ldr.w	r5, [r3], #4
 800882c:	d402      	bmi.n	8008834 <_printf_i+0xe8>
 800882e:	0649      	lsls	r1, r1, #25
 8008830:	bf48      	it	mi
 8008832:	b2ad      	uxthmi	r5, r5
 8008834:	2f6f      	cmp	r7, #111	@ 0x6f
 8008836:	4852      	ldr	r0, [pc, #328]	@ (8008980 <_printf_i+0x234>)
 8008838:	6033      	str	r3, [r6, #0]
 800883a:	bf14      	ite	ne
 800883c:	230a      	movne	r3, #10
 800883e:	2308      	moveq	r3, #8
 8008840:	2100      	movs	r1, #0
 8008842:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008846:	6866      	ldr	r6, [r4, #4]
 8008848:	60a6      	str	r6, [r4, #8]
 800884a:	2e00      	cmp	r6, #0
 800884c:	db05      	blt.n	800885a <_printf_i+0x10e>
 800884e:	6821      	ldr	r1, [r4, #0]
 8008850:	432e      	orrs	r6, r5
 8008852:	f021 0104 	bic.w	r1, r1, #4
 8008856:	6021      	str	r1, [r4, #0]
 8008858:	d04b      	beq.n	80088f2 <_printf_i+0x1a6>
 800885a:	4616      	mov	r6, r2
 800885c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008860:	fb03 5711 	mls	r7, r3, r1, r5
 8008864:	5dc7      	ldrb	r7, [r0, r7]
 8008866:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800886a:	462f      	mov	r7, r5
 800886c:	42bb      	cmp	r3, r7
 800886e:	460d      	mov	r5, r1
 8008870:	d9f4      	bls.n	800885c <_printf_i+0x110>
 8008872:	2b08      	cmp	r3, #8
 8008874:	d10b      	bne.n	800888e <_printf_i+0x142>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	07df      	lsls	r7, r3, #31
 800887a:	d508      	bpl.n	800888e <_printf_i+0x142>
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	6861      	ldr	r1, [r4, #4]
 8008880:	4299      	cmp	r1, r3
 8008882:	bfde      	ittt	le
 8008884:	2330      	movle	r3, #48	@ 0x30
 8008886:	f806 3c01 	strble.w	r3, [r6, #-1]
 800888a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800888e:	1b92      	subs	r2, r2, r6
 8008890:	6122      	str	r2, [r4, #16]
 8008892:	f8cd a000 	str.w	sl, [sp]
 8008896:	464b      	mov	r3, r9
 8008898:	aa03      	add	r2, sp, #12
 800889a:	4621      	mov	r1, r4
 800889c:	4640      	mov	r0, r8
 800889e:	f7ff fee7 	bl	8008670 <_printf_common>
 80088a2:	3001      	adds	r0, #1
 80088a4:	d14a      	bne.n	800893c <_printf_i+0x1f0>
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295
 80088aa:	b004      	add	sp, #16
 80088ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	f043 0320 	orr.w	r3, r3, #32
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	4832      	ldr	r0, [pc, #200]	@ (8008984 <_printf_i+0x238>)
 80088ba:	2778      	movs	r7, #120	@ 0x78
 80088bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	6831      	ldr	r1, [r6, #0]
 80088c4:	061f      	lsls	r7, r3, #24
 80088c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80088ca:	d402      	bmi.n	80088d2 <_printf_i+0x186>
 80088cc:	065f      	lsls	r7, r3, #25
 80088ce:	bf48      	it	mi
 80088d0:	b2ad      	uxthmi	r5, r5
 80088d2:	6031      	str	r1, [r6, #0]
 80088d4:	07d9      	lsls	r1, r3, #31
 80088d6:	bf44      	itt	mi
 80088d8:	f043 0320 	orrmi.w	r3, r3, #32
 80088dc:	6023      	strmi	r3, [r4, #0]
 80088de:	b11d      	cbz	r5, 80088e8 <_printf_i+0x19c>
 80088e0:	2310      	movs	r3, #16
 80088e2:	e7ad      	b.n	8008840 <_printf_i+0xf4>
 80088e4:	4826      	ldr	r0, [pc, #152]	@ (8008980 <_printf_i+0x234>)
 80088e6:	e7e9      	b.n	80088bc <_printf_i+0x170>
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	f023 0320 	bic.w	r3, r3, #32
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	e7f6      	b.n	80088e0 <_printf_i+0x194>
 80088f2:	4616      	mov	r6, r2
 80088f4:	e7bd      	b.n	8008872 <_printf_i+0x126>
 80088f6:	6833      	ldr	r3, [r6, #0]
 80088f8:	6825      	ldr	r5, [r4, #0]
 80088fa:	6961      	ldr	r1, [r4, #20]
 80088fc:	1d18      	adds	r0, r3, #4
 80088fe:	6030      	str	r0, [r6, #0]
 8008900:	062e      	lsls	r6, r5, #24
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	d501      	bpl.n	800890a <_printf_i+0x1be>
 8008906:	6019      	str	r1, [r3, #0]
 8008908:	e002      	b.n	8008910 <_printf_i+0x1c4>
 800890a:	0668      	lsls	r0, r5, #25
 800890c:	d5fb      	bpl.n	8008906 <_printf_i+0x1ba>
 800890e:	8019      	strh	r1, [r3, #0]
 8008910:	2300      	movs	r3, #0
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	4616      	mov	r6, r2
 8008916:	e7bc      	b.n	8008892 <_printf_i+0x146>
 8008918:	6833      	ldr	r3, [r6, #0]
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	6032      	str	r2, [r6, #0]
 800891e:	681e      	ldr	r6, [r3, #0]
 8008920:	6862      	ldr	r2, [r4, #4]
 8008922:	2100      	movs	r1, #0
 8008924:	4630      	mov	r0, r6
 8008926:	f7f7 fc5b 	bl	80001e0 <memchr>
 800892a:	b108      	cbz	r0, 8008930 <_printf_i+0x1e4>
 800892c:	1b80      	subs	r0, r0, r6
 800892e:	6060      	str	r0, [r4, #4]
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	6123      	str	r3, [r4, #16]
 8008934:	2300      	movs	r3, #0
 8008936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800893a:	e7aa      	b.n	8008892 <_printf_i+0x146>
 800893c:	6923      	ldr	r3, [r4, #16]
 800893e:	4632      	mov	r2, r6
 8008940:	4649      	mov	r1, r9
 8008942:	4640      	mov	r0, r8
 8008944:	47d0      	blx	sl
 8008946:	3001      	adds	r0, #1
 8008948:	d0ad      	beq.n	80088a6 <_printf_i+0x15a>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	079b      	lsls	r3, r3, #30
 800894e:	d413      	bmi.n	8008978 <_printf_i+0x22c>
 8008950:	68e0      	ldr	r0, [r4, #12]
 8008952:	9b03      	ldr	r3, [sp, #12]
 8008954:	4298      	cmp	r0, r3
 8008956:	bfb8      	it	lt
 8008958:	4618      	movlt	r0, r3
 800895a:	e7a6      	b.n	80088aa <_printf_i+0x15e>
 800895c:	2301      	movs	r3, #1
 800895e:	4632      	mov	r2, r6
 8008960:	4649      	mov	r1, r9
 8008962:	4640      	mov	r0, r8
 8008964:	47d0      	blx	sl
 8008966:	3001      	adds	r0, #1
 8008968:	d09d      	beq.n	80088a6 <_printf_i+0x15a>
 800896a:	3501      	adds	r5, #1
 800896c:	68e3      	ldr	r3, [r4, #12]
 800896e:	9903      	ldr	r1, [sp, #12]
 8008970:	1a5b      	subs	r3, r3, r1
 8008972:	42ab      	cmp	r3, r5
 8008974:	dcf2      	bgt.n	800895c <_printf_i+0x210>
 8008976:	e7eb      	b.n	8008950 <_printf_i+0x204>
 8008978:	2500      	movs	r5, #0
 800897a:	f104 0619 	add.w	r6, r4, #25
 800897e:	e7f5      	b.n	800896c <_printf_i+0x220>
 8008980:	0800c946 	.word	0x0800c946
 8008984:	0800c957 	.word	0x0800c957

08008988 <std>:
 8008988:	2300      	movs	r3, #0
 800898a:	b510      	push	{r4, lr}
 800898c:	4604      	mov	r4, r0
 800898e:	e9c0 3300 	strd	r3, r3, [r0]
 8008992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008996:	6083      	str	r3, [r0, #8]
 8008998:	8181      	strh	r1, [r0, #12]
 800899a:	6643      	str	r3, [r0, #100]	@ 0x64
 800899c:	81c2      	strh	r2, [r0, #14]
 800899e:	6183      	str	r3, [r0, #24]
 80089a0:	4619      	mov	r1, r3
 80089a2:	2208      	movs	r2, #8
 80089a4:	305c      	adds	r0, #92	@ 0x5c
 80089a6:	f000 f931 	bl	8008c0c <memset>
 80089aa:	4b0d      	ldr	r3, [pc, #52]	@ (80089e0 <std+0x58>)
 80089ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80089ae:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <std+0x5c>)
 80089b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089b2:	4b0d      	ldr	r3, [pc, #52]	@ (80089e8 <std+0x60>)
 80089b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80089b6:	4b0d      	ldr	r3, [pc, #52]	@ (80089ec <std+0x64>)
 80089b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80089ba:	4b0d      	ldr	r3, [pc, #52]	@ (80089f0 <std+0x68>)
 80089bc:	6224      	str	r4, [r4, #32]
 80089be:	429c      	cmp	r4, r3
 80089c0:	d006      	beq.n	80089d0 <std+0x48>
 80089c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80089c6:	4294      	cmp	r4, r2
 80089c8:	d002      	beq.n	80089d0 <std+0x48>
 80089ca:	33d0      	adds	r3, #208	@ 0xd0
 80089cc:	429c      	cmp	r4, r3
 80089ce:	d105      	bne.n	80089dc <std+0x54>
 80089d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d8:	f000 b994 	b.w	8008d04 <__retarget_lock_init_recursive>
 80089dc:	bd10      	pop	{r4, pc}
 80089de:	bf00      	nop
 80089e0:	08008b0d 	.word	0x08008b0d
 80089e4:	08008b2f 	.word	0x08008b2f
 80089e8:	08008b67 	.word	0x08008b67
 80089ec:	08008b8b 	.word	0x08008b8b
 80089f0:	200014cc 	.word	0x200014cc

080089f4 <stdio_exit_handler>:
 80089f4:	4a02      	ldr	r2, [pc, #8]	@ (8008a00 <stdio_exit_handler+0xc>)
 80089f6:	4903      	ldr	r1, [pc, #12]	@ (8008a04 <stdio_exit_handler+0x10>)
 80089f8:	4803      	ldr	r0, [pc, #12]	@ (8008a08 <stdio_exit_handler+0x14>)
 80089fa:	f000 b869 	b.w	8008ad0 <_fwalk_sglue>
 80089fe:	bf00      	nop
 8008a00:	20000010 	.word	0x20000010
 8008a04:	0800a66d 	.word	0x0800a66d
 8008a08:	20000020 	.word	0x20000020

08008a0c <cleanup_stdio>:
 8008a0c:	6841      	ldr	r1, [r0, #4]
 8008a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a40 <cleanup_stdio+0x34>)
 8008a10:	4299      	cmp	r1, r3
 8008a12:	b510      	push	{r4, lr}
 8008a14:	4604      	mov	r4, r0
 8008a16:	d001      	beq.n	8008a1c <cleanup_stdio+0x10>
 8008a18:	f001 fe28 	bl	800a66c <_fflush_r>
 8008a1c:	68a1      	ldr	r1, [r4, #8]
 8008a1e:	4b09      	ldr	r3, [pc, #36]	@ (8008a44 <cleanup_stdio+0x38>)
 8008a20:	4299      	cmp	r1, r3
 8008a22:	d002      	beq.n	8008a2a <cleanup_stdio+0x1e>
 8008a24:	4620      	mov	r0, r4
 8008a26:	f001 fe21 	bl	800a66c <_fflush_r>
 8008a2a:	68e1      	ldr	r1, [r4, #12]
 8008a2c:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <cleanup_stdio+0x3c>)
 8008a2e:	4299      	cmp	r1, r3
 8008a30:	d004      	beq.n	8008a3c <cleanup_stdio+0x30>
 8008a32:	4620      	mov	r0, r4
 8008a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a38:	f001 be18 	b.w	800a66c <_fflush_r>
 8008a3c:	bd10      	pop	{r4, pc}
 8008a3e:	bf00      	nop
 8008a40:	200014cc 	.word	0x200014cc
 8008a44:	20001534 	.word	0x20001534
 8008a48:	2000159c 	.word	0x2000159c

08008a4c <global_stdio_init.part.0>:
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a7c <global_stdio_init.part.0+0x30>)
 8008a50:	4c0b      	ldr	r4, [pc, #44]	@ (8008a80 <global_stdio_init.part.0+0x34>)
 8008a52:	4a0c      	ldr	r2, [pc, #48]	@ (8008a84 <global_stdio_init.part.0+0x38>)
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	4620      	mov	r0, r4
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	f7ff ff94 	bl	8008988 <std>
 8008a60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a64:	2201      	movs	r2, #1
 8008a66:	2109      	movs	r1, #9
 8008a68:	f7ff ff8e 	bl	8008988 <std>
 8008a6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a70:	2202      	movs	r2, #2
 8008a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a76:	2112      	movs	r1, #18
 8008a78:	f7ff bf86 	b.w	8008988 <std>
 8008a7c:	20001604 	.word	0x20001604
 8008a80:	200014cc 	.word	0x200014cc
 8008a84:	080089f5 	.word	0x080089f5

08008a88 <__sfp_lock_acquire>:
 8008a88:	4801      	ldr	r0, [pc, #4]	@ (8008a90 <__sfp_lock_acquire+0x8>)
 8008a8a:	f000 b93c 	b.w	8008d06 <__retarget_lock_acquire_recursive>
 8008a8e:	bf00      	nop
 8008a90:	2000160d 	.word	0x2000160d

08008a94 <__sfp_lock_release>:
 8008a94:	4801      	ldr	r0, [pc, #4]	@ (8008a9c <__sfp_lock_release+0x8>)
 8008a96:	f000 b937 	b.w	8008d08 <__retarget_lock_release_recursive>
 8008a9a:	bf00      	nop
 8008a9c:	2000160d 	.word	0x2000160d

08008aa0 <__sinit>:
 8008aa0:	b510      	push	{r4, lr}
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	f7ff fff0 	bl	8008a88 <__sfp_lock_acquire>
 8008aa8:	6a23      	ldr	r3, [r4, #32]
 8008aaa:	b11b      	cbz	r3, 8008ab4 <__sinit+0x14>
 8008aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ab0:	f7ff bff0 	b.w	8008a94 <__sfp_lock_release>
 8008ab4:	4b04      	ldr	r3, [pc, #16]	@ (8008ac8 <__sinit+0x28>)
 8008ab6:	6223      	str	r3, [r4, #32]
 8008ab8:	4b04      	ldr	r3, [pc, #16]	@ (8008acc <__sinit+0x2c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1f5      	bne.n	8008aac <__sinit+0xc>
 8008ac0:	f7ff ffc4 	bl	8008a4c <global_stdio_init.part.0>
 8008ac4:	e7f2      	b.n	8008aac <__sinit+0xc>
 8008ac6:	bf00      	nop
 8008ac8:	08008a0d 	.word	0x08008a0d
 8008acc:	20001604 	.word	0x20001604

08008ad0 <_fwalk_sglue>:
 8008ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	4688      	mov	r8, r1
 8008ad8:	4614      	mov	r4, r2
 8008ada:	2600      	movs	r6, #0
 8008adc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ae0:	f1b9 0901 	subs.w	r9, r9, #1
 8008ae4:	d505      	bpl.n	8008af2 <_fwalk_sglue+0x22>
 8008ae6:	6824      	ldr	r4, [r4, #0]
 8008ae8:	2c00      	cmp	r4, #0
 8008aea:	d1f7      	bne.n	8008adc <_fwalk_sglue+0xc>
 8008aec:	4630      	mov	r0, r6
 8008aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d907      	bls.n	8008b08 <_fwalk_sglue+0x38>
 8008af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008afc:	3301      	adds	r3, #1
 8008afe:	d003      	beq.n	8008b08 <_fwalk_sglue+0x38>
 8008b00:	4629      	mov	r1, r5
 8008b02:	4638      	mov	r0, r7
 8008b04:	47c0      	blx	r8
 8008b06:	4306      	orrs	r6, r0
 8008b08:	3568      	adds	r5, #104	@ 0x68
 8008b0a:	e7e9      	b.n	8008ae0 <_fwalk_sglue+0x10>

08008b0c <__sread>:
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	460c      	mov	r4, r1
 8008b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b14:	f000 f8a8 	bl	8008c68 <_read_r>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	bfab      	itete	ge
 8008b1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b20:	181b      	addge	r3, r3, r0
 8008b22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b26:	bfac      	ite	ge
 8008b28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b2a:	81a3      	strhlt	r3, [r4, #12]
 8008b2c:	bd10      	pop	{r4, pc}

08008b2e <__swrite>:
 8008b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b32:	461f      	mov	r7, r3
 8008b34:	898b      	ldrh	r3, [r1, #12]
 8008b36:	05db      	lsls	r3, r3, #23
 8008b38:	4605      	mov	r5, r0
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	d505      	bpl.n	8008b4c <__swrite+0x1e>
 8008b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b44:	2302      	movs	r3, #2
 8008b46:	2200      	movs	r2, #0
 8008b48:	f000 f87c 	bl	8008c44 <_lseek_r>
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	4632      	mov	r2, r6
 8008b5a:	463b      	mov	r3, r7
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b62:	f000 b893 	b.w	8008c8c <_write_r>

08008b66 <__sseek>:
 8008b66:	b510      	push	{r4, lr}
 8008b68:	460c      	mov	r4, r1
 8008b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b6e:	f000 f869 	bl	8008c44 <_lseek_r>
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	bf15      	itete	ne
 8008b78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b82:	81a3      	strheq	r3, [r4, #12]
 8008b84:	bf18      	it	ne
 8008b86:	81a3      	strhne	r3, [r4, #12]
 8008b88:	bd10      	pop	{r4, pc}

08008b8a <__sclose>:
 8008b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b8e:	f000 b849 	b.w	8008c24 <_close_r>

08008b92 <_vsniprintf_r>:
 8008b92:	b530      	push	{r4, r5, lr}
 8008b94:	4614      	mov	r4, r2
 8008b96:	2c00      	cmp	r4, #0
 8008b98:	b09b      	sub	sp, #108	@ 0x6c
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	da05      	bge.n	8008bac <_vsniprintf_r+0x1a>
 8008ba0:	238b      	movs	r3, #139	@ 0x8b
 8008ba2:	6003      	str	r3, [r0, #0]
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba8:	b01b      	add	sp, #108	@ 0x6c
 8008baa:	bd30      	pop	{r4, r5, pc}
 8008bac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008bb0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008bb4:	f04f 0300 	mov.w	r3, #0
 8008bb8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008bba:	bf14      	ite	ne
 8008bbc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008bc0:	4623      	moveq	r3, r4
 8008bc2:	9302      	str	r3, [sp, #8]
 8008bc4:	9305      	str	r3, [sp, #20]
 8008bc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008bca:	9100      	str	r1, [sp, #0]
 8008bcc:	9104      	str	r1, [sp, #16]
 8008bce:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008bd2:	4669      	mov	r1, sp
 8008bd4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008bd6:	f001 fbc9 	bl	800a36c <_svfiprintf_r>
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	bfbc      	itt	lt
 8008bde:	238b      	movlt	r3, #139	@ 0x8b
 8008be0:	602b      	strlt	r3, [r5, #0]
 8008be2:	2c00      	cmp	r4, #0
 8008be4:	d0e0      	beq.n	8008ba8 <_vsniprintf_r+0x16>
 8008be6:	9b00      	ldr	r3, [sp, #0]
 8008be8:	2200      	movs	r2, #0
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	e7dc      	b.n	8008ba8 <_vsniprintf_r+0x16>
	...

08008bf0 <vsniprintf>:
 8008bf0:	b507      	push	{r0, r1, r2, lr}
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	460a      	mov	r2, r1
 8008bf8:	4601      	mov	r1, r0
 8008bfa:	4803      	ldr	r0, [pc, #12]	@ (8008c08 <vsniprintf+0x18>)
 8008bfc:	6800      	ldr	r0, [r0, #0]
 8008bfe:	f7ff ffc8 	bl	8008b92 <_vsniprintf_r>
 8008c02:	b003      	add	sp, #12
 8008c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c08:	2000001c 	.word	0x2000001c

08008c0c <memset>:
 8008c0c:	4402      	add	r2, r0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d100      	bne.n	8008c16 <memset+0xa>
 8008c14:	4770      	bx	lr
 8008c16:	f803 1b01 	strb.w	r1, [r3], #1
 8008c1a:	e7f9      	b.n	8008c10 <memset+0x4>

08008c1c <_localeconv_r>:
 8008c1c:	4800      	ldr	r0, [pc, #0]	@ (8008c20 <_localeconv_r+0x4>)
 8008c1e:	4770      	bx	lr
 8008c20:	2000015c 	.word	0x2000015c

08008c24 <_close_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d06      	ldr	r5, [pc, #24]	@ (8008c40 <_close_r+0x1c>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	602b      	str	r3, [r5, #0]
 8008c30:	f7fa fda6 	bl	8003780 <_close>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_close_r+0x1a>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_close_r+0x1a>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	20001608 	.word	0x20001608

08008c44 <_lseek_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d07      	ldr	r5, [pc, #28]	@ (8008c64 <_lseek_r+0x20>)
 8008c48:	4604      	mov	r4, r0
 8008c4a:	4608      	mov	r0, r1
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	602a      	str	r2, [r5, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f7fa fdbb 	bl	80037ce <_lseek>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_lseek_r+0x1e>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_lseek_r+0x1e>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	20001608 	.word	0x20001608

08008c68 <_read_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d07      	ldr	r5, [pc, #28]	@ (8008c88 <_read_r+0x20>)
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	4608      	mov	r0, r1
 8008c70:	4611      	mov	r1, r2
 8008c72:	2200      	movs	r2, #0
 8008c74:	602a      	str	r2, [r5, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	f7fa fd49 	bl	800370e <_read>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_read_r+0x1e>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_read_r+0x1e>
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	20001608 	.word	0x20001608

08008c8c <_write_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d07      	ldr	r5, [pc, #28]	@ (8008cac <_write_r+0x20>)
 8008c90:	4604      	mov	r4, r0
 8008c92:	4608      	mov	r0, r1
 8008c94:	4611      	mov	r1, r2
 8008c96:	2200      	movs	r2, #0
 8008c98:	602a      	str	r2, [r5, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f7fa fd54 	bl	8003748 <_write>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d102      	bne.n	8008caa <_write_r+0x1e>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b103      	cbz	r3, 8008caa <_write_r+0x1e>
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	20001608 	.word	0x20001608

08008cb0 <__errno>:
 8008cb0:	4b01      	ldr	r3, [pc, #4]	@ (8008cb8 <__errno+0x8>)
 8008cb2:	6818      	ldr	r0, [r3, #0]
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	2000001c 	.word	0x2000001c

08008cbc <__libc_init_array>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	4d0d      	ldr	r5, [pc, #52]	@ (8008cf4 <__libc_init_array+0x38>)
 8008cc0:	4c0d      	ldr	r4, [pc, #52]	@ (8008cf8 <__libc_init_array+0x3c>)
 8008cc2:	1b64      	subs	r4, r4, r5
 8008cc4:	10a4      	asrs	r4, r4, #2
 8008cc6:	2600      	movs	r6, #0
 8008cc8:	42a6      	cmp	r6, r4
 8008cca:	d109      	bne.n	8008ce0 <__libc_init_array+0x24>
 8008ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8008cfc <__libc_init_array+0x40>)
 8008cce:	4c0c      	ldr	r4, [pc, #48]	@ (8008d00 <__libc_init_array+0x44>)
 8008cd0:	f002 f86a 	bl	800ada8 <_init>
 8008cd4:	1b64      	subs	r4, r4, r5
 8008cd6:	10a4      	asrs	r4, r4, #2
 8008cd8:	2600      	movs	r6, #0
 8008cda:	42a6      	cmp	r6, r4
 8008cdc:	d105      	bne.n	8008cea <__libc_init_array+0x2e>
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
 8008ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce4:	4798      	blx	r3
 8008ce6:	3601      	adds	r6, #1
 8008ce8:	e7ee      	b.n	8008cc8 <__libc_init_array+0xc>
 8008cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cee:	4798      	blx	r3
 8008cf0:	3601      	adds	r6, #1
 8008cf2:	e7f2      	b.n	8008cda <__libc_init_array+0x1e>
 8008cf4:	0800ccb4 	.word	0x0800ccb4
 8008cf8:	0800ccb4 	.word	0x0800ccb4
 8008cfc:	0800ccb4 	.word	0x0800ccb4
 8008d00:	0800ccb8 	.word	0x0800ccb8

08008d04 <__retarget_lock_init_recursive>:
 8008d04:	4770      	bx	lr

08008d06 <__retarget_lock_acquire_recursive>:
 8008d06:	4770      	bx	lr

08008d08 <__retarget_lock_release_recursive>:
 8008d08:	4770      	bx	lr

08008d0a <quorem>:
 8008d0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0e:	6903      	ldr	r3, [r0, #16]
 8008d10:	690c      	ldr	r4, [r1, #16]
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	4607      	mov	r7, r0
 8008d16:	db7e      	blt.n	8008e16 <quorem+0x10c>
 8008d18:	3c01      	subs	r4, #1
 8008d1a:	f101 0814 	add.w	r8, r1, #20
 8008d1e:	00a3      	lsls	r3, r4, #2
 8008d20:	f100 0514 	add.w	r5, r0, #20
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d34:	3301      	adds	r3, #1
 8008d36:	429a      	cmp	r2, r3
 8008d38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d40:	d32e      	bcc.n	8008da0 <quorem+0x96>
 8008d42:	f04f 0a00 	mov.w	sl, #0
 8008d46:	46c4      	mov	ip, r8
 8008d48:	46ae      	mov	lr, r5
 8008d4a:	46d3      	mov	fp, sl
 8008d4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d50:	b298      	uxth	r0, r3
 8008d52:	fb06 a000 	mla	r0, r6, r0, sl
 8008d56:	0c02      	lsrs	r2, r0, #16
 8008d58:	0c1b      	lsrs	r3, r3, #16
 8008d5a:	fb06 2303 	mla	r3, r6, r3, r2
 8008d5e:	f8de 2000 	ldr.w	r2, [lr]
 8008d62:	b280      	uxth	r0, r0
 8008d64:	b292      	uxth	r2, r2
 8008d66:	1a12      	subs	r2, r2, r0
 8008d68:	445a      	add	r2, fp
 8008d6a:	f8de 0000 	ldr.w	r0, [lr]
 8008d6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d78:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d7c:	b292      	uxth	r2, r2
 8008d7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d82:	45e1      	cmp	r9, ip
 8008d84:	f84e 2b04 	str.w	r2, [lr], #4
 8008d88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d8c:	d2de      	bcs.n	8008d4c <quorem+0x42>
 8008d8e:	9b00      	ldr	r3, [sp, #0]
 8008d90:	58eb      	ldr	r3, [r5, r3]
 8008d92:	b92b      	cbnz	r3, 8008da0 <quorem+0x96>
 8008d94:	9b01      	ldr	r3, [sp, #4]
 8008d96:	3b04      	subs	r3, #4
 8008d98:	429d      	cmp	r5, r3
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	d32f      	bcc.n	8008dfe <quorem+0xf4>
 8008d9e:	613c      	str	r4, [r7, #16]
 8008da0:	4638      	mov	r0, r7
 8008da2:	f001 f97f 	bl	800a0a4 <__mcmp>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	db25      	blt.n	8008df6 <quorem+0xec>
 8008daa:	4629      	mov	r1, r5
 8008dac:	2000      	movs	r0, #0
 8008dae:	f858 2b04 	ldr.w	r2, [r8], #4
 8008db2:	f8d1 c000 	ldr.w	ip, [r1]
 8008db6:	fa1f fe82 	uxth.w	lr, r2
 8008dba:	fa1f f38c 	uxth.w	r3, ip
 8008dbe:	eba3 030e 	sub.w	r3, r3, lr
 8008dc2:	4403      	add	r3, r0
 8008dc4:	0c12      	lsrs	r2, r2, #16
 8008dc6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008dca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dd4:	45c1      	cmp	r9, r8
 8008dd6:	f841 3b04 	str.w	r3, [r1], #4
 8008dda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008dde:	d2e6      	bcs.n	8008dae <quorem+0xa4>
 8008de0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008de4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008de8:	b922      	cbnz	r2, 8008df4 <quorem+0xea>
 8008dea:	3b04      	subs	r3, #4
 8008dec:	429d      	cmp	r5, r3
 8008dee:	461a      	mov	r2, r3
 8008df0:	d30b      	bcc.n	8008e0a <quorem+0x100>
 8008df2:	613c      	str	r4, [r7, #16]
 8008df4:	3601      	adds	r6, #1
 8008df6:	4630      	mov	r0, r6
 8008df8:	b003      	add	sp, #12
 8008dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfe:	6812      	ldr	r2, [r2, #0]
 8008e00:	3b04      	subs	r3, #4
 8008e02:	2a00      	cmp	r2, #0
 8008e04:	d1cb      	bne.n	8008d9e <quorem+0x94>
 8008e06:	3c01      	subs	r4, #1
 8008e08:	e7c6      	b.n	8008d98 <quorem+0x8e>
 8008e0a:	6812      	ldr	r2, [r2, #0]
 8008e0c:	3b04      	subs	r3, #4
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	d1ef      	bne.n	8008df2 <quorem+0xe8>
 8008e12:	3c01      	subs	r4, #1
 8008e14:	e7ea      	b.n	8008dec <quorem+0xe2>
 8008e16:	2000      	movs	r0, #0
 8008e18:	e7ee      	b.n	8008df8 <quorem+0xee>
 8008e1a:	0000      	movs	r0, r0
 8008e1c:	0000      	movs	r0, r0
	...

08008e20 <_dtoa_r>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	69c7      	ldr	r7, [r0, #28]
 8008e26:	b097      	sub	sp, #92	@ 0x5c
 8008e28:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008e2c:	ec55 4b10 	vmov	r4, r5, d0
 8008e30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008e32:	9107      	str	r1, [sp, #28]
 8008e34:	4681      	mov	r9, r0
 8008e36:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e38:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e3a:	b97f      	cbnz	r7, 8008e5c <_dtoa_r+0x3c>
 8008e3c:	2010      	movs	r0, #16
 8008e3e:	f000 fe09 	bl	8009a54 <malloc>
 8008e42:	4602      	mov	r2, r0
 8008e44:	f8c9 001c 	str.w	r0, [r9, #28]
 8008e48:	b920      	cbnz	r0, 8008e54 <_dtoa_r+0x34>
 8008e4a:	4ba9      	ldr	r3, [pc, #676]	@ (80090f0 <_dtoa_r+0x2d0>)
 8008e4c:	21ef      	movs	r1, #239	@ 0xef
 8008e4e:	48a9      	ldr	r0, [pc, #676]	@ (80090f4 <_dtoa_r+0x2d4>)
 8008e50:	f001 fc6c 	bl	800a72c <__assert_func>
 8008e54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008e58:	6007      	str	r7, [r0, #0]
 8008e5a:	60c7      	str	r7, [r0, #12]
 8008e5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e60:	6819      	ldr	r1, [r3, #0]
 8008e62:	b159      	cbz	r1, 8008e7c <_dtoa_r+0x5c>
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	604a      	str	r2, [r1, #4]
 8008e68:	2301      	movs	r3, #1
 8008e6a:	4093      	lsls	r3, r2
 8008e6c:	608b      	str	r3, [r1, #8]
 8008e6e:	4648      	mov	r0, r9
 8008e70:	f000 fee6 	bl	8009c40 <_Bfree>
 8008e74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	1e2b      	subs	r3, r5, #0
 8008e7e:	bfb9      	ittee	lt
 8008e80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e84:	9305      	strlt	r3, [sp, #20]
 8008e86:	2300      	movge	r3, #0
 8008e88:	6033      	strge	r3, [r6, #0]
 8008e8a:	9f05      	ldr	r7, [sp, #20]
 8008e8c:	4b9a      	ldr	r3, [pc, #616]	@ (80090f8 <_dtoa_r+0x2d8>)
 8008e8e:	bfbc      	itt	lt
 8008e90:	2201      	movlt	r2, #1
 8008e92:	6032      	strlt	r2, [r6, #0]
 8008e94:	43bb      	bics	r3, r7
 8008e96:	d112      	bne.n	8008ebe <_dtoa_r+0x9e>
 8008e98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ea4:	4323      	orrs	r3, r4
 8008ea6:	f000 855a 	beq.w	800995e <_dtoa_r+0xb3e>
 8008eaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008eac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800910c <_dtoa_r+0x2ec>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 855c 	beq.w	800996e <_dtoa_r+0xb4e>
 8008eb6:	f10a 0303 	add.w	r3, sl, #3
 8008eba:	f000 bd56 	b.w	800996a <_dtoa_r+0xb4a>
 8008ebe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	ec51 0b17 	vmov	r0, r1, d7
 8008ec8:	2300      	movs	r3, #0
 8008eca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008ece:	f7f7 fe03 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	b158      	cbz	r0, 8008eee <_dtoa_r+0xce>
 8008ed6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008ed8:	2301      	movs	r3, #1
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ede:	b113      	cbz	r3, 8008ee6 <_dtoa_r+0xc6>
 8008ee0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ee2:	4b86      	ldr	r3, [pc, #536]	@ (80090fc <_dtoa_r+0x2dc>)
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009110 <_dtoa_r+0x2f0>
 8008eea:	f000 bd40 	b.w	800996e <_dtoa_r+0xb4e>
 8008eee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008ef2:	aa14      	add	r2, sp, #80	@ 0x50
 8008ef4:	a915      	add	r1, sp, #84	@ 0x54
 8008ef6:	4648      	mov	r0, r9
 8008ef8:	f001 f984 	bl	800a204 <__d2b>
 8008efc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008f00:	9002      	str	r0, [sp, #8]
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	d078      	beq.n	8008ff8 <_dtoa_r+0x1d8>
 8008f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f08:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008f18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008f1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008f20:	4619      	mov	r1, r3
 8008f22:	2200      	movs	r2, #0
 8008f24:	4b76      	ldr	r3, [pc, #472]	@ (8009100 <_dtoa_r+0x2e0>)
 8008f26:	f7f7 f9b7 	bl	8000298 <__aeabi_dsub>
 8008f2a:	a36b      	add	r3, pc, #428	@ (adr r3, 80090d8 <_dtoa_r+0x2b8>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f7f7 fb6a 	bl	8000608 <__aeabi_dmul>
 8008f34:	a36a      	add	r3, pc, #424	@ (adr r3, 80090e0 <_dtoa_r+0x2c0>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f7f7 f9af 	bl	800029c <__adddf3>
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4630      	mov	r0, r6
 8008f42:	460d      	mov	r5, r1
 8008f44:	f7f7 faf6 	bl	8000534 <__aeabi_i2d>
 8008f48:	a367      	add	r3, pc, #412	@ (adr r3, 80090e8 <_dtoa_r+0x2c8>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	f7f7 fb5b 	bl	8000608 <__aeabi_dmul>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4620      	mov	r0, r4
 8008f58:	4629      	mov	r1, r5
 8008f5a:	f7f7 f99f 	bl	800029c <__adddf3>
 8008f5e:	4604      	mov	r4, r0
 8008f60:	460d      	mov	r5, r1
 8008f62:	f7f7 fe01 	bl	8000b68 <__aeabi_d2iz>
 8008f66:	2200      	movs	r2, #0
 8008f68:	4607      	mov	r7, r0
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7f7 fdbc 	bl	8000aec <__aeabi_dcmplt>
 8008f74:	b140      	cbz	r0, 8008f88 <_dtoa_r+0x168>
 8008f76:	4638      	mov	r0, r7
 8008f78:	f7f7 fadc 	bl	8000534 <__aeabi_i2d>
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	462b      	mov	r3, r5
 8008f80:	f7f7 fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f84:	b900      	cbnz	r0, 8008f88 <_dtoa_r+0x168>
 8008f86:	3f01      	subs	r7, #1
 8008f88:	2f16      	cmp	r7, #22
 8008f8a:	d852      	bhi.n	8009032 <_dtoa_r+0x212>
 8008f8c:	4b5d      	ldr	r3, [pc, #372]	@ (8009104 <_dtoa_r+0x2e4>)
 8008f8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f9a:	f7f7 fda7 	bl	8000aec <__aeabi_dcmplt>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d049      	beq.n	8009036 <_dtoa_r+0x216>
 8008fa2:	3f01      	subs	r7, #1
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fa8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008faa:	1b9b      	subs	r3, r3, r6
 8008fac:	1e5a      	subs	r2, r3, #1
 8008fae:	bf45      	ittet	mi
 8008fb0:	f1c3 0301 	rsbmi	r3, r3, #1
 8008fb4:	9300      	strmi	r3, [sp, #0]
 8008fb6:	2300      	movpl	r3, #0
 8008fb8:	2300      	movmi	r3, #0
 8008fba:	9206      	str	r2, [sp, #24]
 8008fbc:	bf54      	ite	pl
 8008fbe:	9300      	strpl	r3, [sp, #0]
 8008fc0:	9306      	strmi	r3, [sp, #24]
 8008fc2:	2f00      	cmp	r7, #0
 8008fc4:	db39      	blt.n	800903a <_dtoa_r+0x21a>
 8008fc6:	9b06      	ldr	r3, [sp, #24]
 8008fc8:	970d      	str	r7, [sp, #52]	@ 0x34
 8008fca:	443b      	add	r3, r7
 8008fcc:	9306      	str	r3, [sp, #24]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9308      	str	r3, [sp, #32]
 8008fd2:	9b07      	ldr	r3, [sp, #28]
 8008fd4:	2b09      	cmp	r3, #9
 8008fd6:	d863      	bhi.n	80090a0 <_dtoa_r+0x280>
 8008fd8:	2b05      	cmp	r3, #5
 8008fda:	bfc4      	itt	gt
 8008fdc:	3b04      	subgt	r3, #4
 8008fde:	9307      	strgt	r3, [sp, #28]
 8008fe0:	9b07      	ldr	r3, [sp, #28]
 8008fe2:	f1a3 0302 	sub.w	r3, r3, #2
 8008fe6:	bfcc      	ite	gt
 8008fe8:	2400      	movgt	r4, #0
 8008fea:	2401      	movle	r4, #1
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d863      	bhi.n	80090b8 <_dtoa_r+0x298>
 8008ff0:	e8df f003 	tbb	[pc, r3]
 8008ff4:	2b375452 	.word	0x2b375452
 8008ff8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008ffc:	441e      	add	r6, r3
 8008ffe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009002:	2b20      	cmp	r3, #32
 8009004:	bfc1      	itttt	gt
 8009006:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800900a:	409f      	lslgt	r7, r3
 800900c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009010:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009014:	bfd6      	itet	le
 8009016:	f1c3 0320 	rsble	r3, r3, #32
 800901a:	ea47 0003 	orrgt.w	r0, r7, r3
 800901e:	fa04 f003 	lslle.w	r0, r4, r3
 8009022:	f7f7 fa77 	bl	8000514 <__aeabi_ui2d>
 8009026:	2201      	movs	r2, #1
 8009028:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800902c:	3e01      	subs	r6, #1
 800902e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009030:	e776      	b.n	8008f20 <_dtoa_r+0x100>
 8009032:	2301      	movs	r3, #1
 8009034:	e7b7      	b.n	8008fa6 <_dtoa_r+0x186>
 8009036:	9010      	str	r0, [sp, #64]	@ 0x40
 8009038:	e7b6      	b.n	8008fa8 <_dtoa_r+0x188>
 800903a:	9b00      	ldr	r3, [sp, #0]
 800903c:	1bdb      	subs	r3, r3, r7
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	427b      	negs	r3, r7
 8009042:	9308      	str	r3, [sp, #32]
 8009044:	2300      	movs	r3, #0
 8009046:	930d      	str	r3, [sp, #52]	@ 0x34
 8009048:	e7c3      	b.n	8008fd2 <_dtoa_r+0x1b2>
 800904a:	2301      	movs	r3, #1
 800904c:	9309      	str	r3, [sp, #36]	@ 0x24
 800904e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009050:	eb07 0b03 	add.w	fp, r7, r3
 8009054:	f10b 0301 	add.w	r3, fp, #1
 8009058:	2b01      	cmp	r3, #1
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	bfb8      	it	lt
 800905e:	2301      	movlt	r3, #1
 8009060:	e006      	b.n	8009070 <_dtoa_r+0x250>
 8009062:	2301      	movs	r3, #1
 8009064:	9309      	str	r3, [sp, #36]	@ 0x24
 8009066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009068:	2b00      	cmp	r3, #0
 800906a:	dd28      	ble.n	80090be <_dtoa_r+0x29e>
 800906c:	469b      	mov	fp, r3
 800906e:	9303      	str	r3, [sp, #12]
 8009070:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009074:	2100      	movs	r1, #0
 8009076:	2204      	movs	r2, #4
 8009078:	f102 0514 	add.w	r5, r2, #20
 800907c:	429d      	cmp	r5, r3
 800907e:	d926      	bls.n	80090ce <_dtoa_r+0x2ae>
 8009080:	6041      	str	r1, [r0, #4]
 8009082:	4648      	mov	r0, r9
 8009084:	f000 fd9c 	bl	8009bc0 <_Balloc>
 8009088:	4682      	mov	sl, r0
 800908a:	2800      	cmp	r0, #0
 800908c:	d142      	bne.n	8009114 <_dtoa_r+0x2f4>
 800908e:	4b1e      	ldr	r3, [pc, #120]	@ (8009108 <_dtoa_r+0x2e8>)
 8009090:	4602      	mov	r2, r0
 8009092:	f240 11af 	movw	r1, #431	@ 0x1af
 8009096:	e6da      	b.n	8008e4e <_dtoa_r+0x2e>
 8009098:	2300      	movs	r3, #0
 800909a:	e7e3      	b.n	8009064 <_dtoa_r+0x244>
 800909c:	2300      	movs	r3, #0
 800909e:	e7d5      	b.n	800904c <_dtoa_r+0x22c>
 80090a0:	2401      	movs	r4, #1
 80090a2:	2300      	movs	r3, #0
 80090a4:	9307      	str	r3, [sp, #28]
 80090a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80090a8:	f04f 3bff 	mov.w	fp, #4294967295
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80090b2:	2312      	movs	r3, #18
 80090b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80090b6:	e7db      	b.n	8009070 <_dtoa_r+0x250>
 80090b8:	2301      	movs	r3, #1
 80090ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80090bc:	e7f4      	b.n	80090a8 <_dtoa_r+0x288>
 80090be:	f04f 0b01 	mov.w	fp, #1
 80090c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80090c6:	465b      	mov	r3, fp
 80090c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80090cc:	e7d0      	b.n	8009070 <_dtoa_r+0x250>
 80090ce:	3101      	adds	r1, #1
 80090d0:	0052      	lsls	r2, r2, #1
 80090d2:	e7d1      	b.n	8009078 <_dtoa_r+0x258>
 80090d4:	f3af 8000 	nop.w
 80090d8:	636f4361 	.word	0x636f4361
 80090dc:	3fd287a7 	.word	0x3fd287a7
 80090e0:	8b60c8b3 	.word	0x8b60c8b3
 80090e4:	3fc68a28 	.word	0x3fc68a28
 80090e8:	509f79fb 	.word	0x509f79fb
 80090ec:	3fd34413 	.word	0x3fd34413
 80090f0:	0800c975 	.word	0x0800c975
 80090f4:	0800c98c 	.word	0x0800c98c
 80090f8:	7ff00000 	.word	0x7ff00000
 80090fc:	0800c945 	.word	0x0800c945
 8009100:	3ff80000 	.word	0x3ff80000
 8009104:	0800cae0 	.word	0x0800cae0
 8009108:	0800c9e4 	.word	0x0800c9e4
 800910c:	0800c971 	.word	0x0800c971
 8009110:	0800c944 	.word	0x0800c944
 8009114:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009118:	6018      	str	r0, [r3, #0]
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	2b0e      	cmp	r3, #14
 800911e:	f200 80a1 	bhi.w	8009264 <_dtoa_r+0x444>
 8009122:	2c00      	cmp	r4, #0
 8009124:	f000 809e 	beq.w	8009264 <_dtoa_r+0x444>
 8009128:	2f00      	cmp	r7, #0
 800912a:	dd33      	ble.n	8009194 <_dtoa_r+0x374>
 800912c:	4b9c      	ldr	r3, [pc, #624]	@ (80093a0 <_dtoa_r+0x580>)
 800912e:	f007 020f 	and.w	r2, r7, #15
 8009132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009136:	ed93 7b00 	vldr	d7, [r3]
 800913a:	05f8      	lsls	r0, r7, #23
 800913c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009140:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009144:	d516      	bpl.n	8009174 <_dtoa_r+0x354>
 8009146:	4b97      	ldr	r3, [pc, #604]	@ (80093a4 <_dtoa_r+0x584>)
 8009148:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800914c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009150:	f7f7 fb84 	bl	800085c <__aeabi_ddiv>
 8009154:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009158:	f004 040f 	and.w	r4, r4, #15
 800915c:	2603      	movs	r6, #3
 800915e:	4d91      	ldr	r5, [pc, #580]	@ (80093a4 <_dtoa_r+0x584>)
 8009160:	b954      	cbnz	r4, 8009178 <_dtoa_r+0x358>
 8009162:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800916a:	f7f7 fb77 	bl	800085c <__aeabi_ddiv>
 800916e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009172:	e028      	b.n	80091c6 <_dtoa_r+0x3a6>
 8009174:	2602      	movs	r6, #2
 8009176:	e7f2      	b.n	800915e <_dtoa_r+0x33e>
 8009178:	07e1      	lsls	r1, r4, #31
 800917a:	d508      	bpl.n	800918e <_dtoa_r+0x36e>
 800917c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009180:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009184:	f7f7 fa40 	bl	8000608 <__aeabi_dmul>
 8009188:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800918c:	3601      	adds	r6, #1
 800918e:	1064      	asrs	r4, r4, #1
 8009190:	3508      	adds	r5, #8
 8009192:	e7e5      	b.n	8009160 <_dtoa_r+0x340>
 8009194:	f000 80af 	beq.w	80092f6 <_dtoa_r+0x4d6>
 8009198:	427c      	negs	r4, r7
 800919a:	4b81      	ldr	r3, [pc, #516]	@ (80093a0 <_dtoa_r+0x580>)
 800919c:	4d81      	ldr	r5, [pc, #516]	@ (80093a4 <_dtoa_r+0x584>)
 800919e:	f004 020f 	and.w	r2, r4, #15
 80091a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80091ae:	f7f7 fa2b 	bl	8000608 <__aeabi_dmul>
 80091b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091b6:	1124      	asrs	r4, r4, #4
 80091b8:	2300      	movs	r3, #0
 80091ba:	2602      	movs	r6, #2
 80091bc:	2c00      	cmp	r4, #0
 80091be:	f040 808f 	bne.w	80092e0 <_dtoa_r+0x4c0>
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1d3      	bne.n	800916e <_dtoa_r+0x34e>
 80091c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8094 	beq.w	80092fa <_dtoa_r+0x4da>
 80091d2:	4b75      	ldr	r3, [pc, #468]	@ (80093a8 <_dtoa_r+0x588>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	4620      	mov	r0, r4
 80091d8:	4629      	mov	r1, r5
 80091da:	f7f7 fc87 	bl	8000aec <__aeabi_dcmplt>
 80091de:	2800      	cmp	r0, #0
 80091e0:	f000 808b 	beq.w	80092fa <_dtoa_r+0x4da>
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 8087 	beq.w	80092fa <_dtoa_r+0x4da>
 80091ec:	f1bb 0f00 	cmp.w	fp, #0
 80091f0:	dd34      	ble.n	800925c <_dtoa_r+0x43c>
 80091f2:	4620      	mov	r0, r4
 80091f4:	4b6d      	ldr	r3, [pc, #436]	@ (80093ac <_dtoa_r+0x58c>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7f7 fa05 	bl	8000608 <__aeabi_dmul>
 80091fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009202:	f107 38ff 	add.w	r8, r7, #4294967295
 8009206:	3601      	adds	r6, #1
 8009208:	465c      	mov	r4, fp
 800920a:	4630      	mov	r0, r6
 800920c:	f7f7 f992 	bl	8000534 <__aeabi_i2d>
 8009210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009214:	f7f7 f9f8 	bl	8000608 <__aeabi_dmul>
 8009218:	4b65      	ldr	r3, [pc, #404]	@ (80093b0 <_dtoa_r+0x590>)
 800921a:	2200      	movs	r2, #0
 800921c:	f7f7 f83e 	bl	800029c <__adddf3>
 8009220:	4605      	mov	r5, r0
 8009222:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009226:	2c00      	cmp	r4, #0
 8009228:	d16a      	bne.n	8009300 <_dtoa_r+0x4e0>
 800922a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800922e:	4b61      	ldr	r3, [pc, #388]	@ (80093b4 <_dtoa_r+0x594>)
 8009230:	2200      	movs	r2, #0
 8009232:	f7f7 f831 	bl	8000298 <__aeabi_dsub>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800923e:	462a      	mov	r2, r5
 8009240:	4633      	mov	r3, r6
 8009242:	f7f7 fc71 	bl	8000b28 <__aeabi_dcmpgt>
 8009246:	2800      	cmp	r0, #0
 8009248:	f040 8298 	bne.w	800977c <_dtoa_r+0x95c>
 800924c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009250:	462a      	mov	r2, r5
 8009252:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009256:	f7f7 fc49 	bl	8000aec <__aeabi_dcmplt>
 800925a:	bb38      	cbnz	r0, 80092ac <_dtoa_r+0x48c>
 800925c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009260:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009264:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009266:	2b00      	cmp	r3, #0
 8009268:	f2c0 8157 	blt.w	800951a <_dtoa_r+0x6fa>
 800926c:	2f0e      	cmp	r7, #14
 800926e:	f300 8154 	bgt.w	800951a <_dtoa_r+0x6fa>
 8009272:	4b4b      	ldr	r3, [pc, #300]	@ (80093a0 <_dtoa_r+0x580>)
 8009274:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009278:	ed93 7b00 	vldr	d7, [r3]
 800927c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800927e:	2b00      	cmp	r3, #0
 8009280:	ed8d 7b00 	vstr	d7, [sp]
 8009284:	f280 80e5 	bge.w	8009452 <_dtoa_r+0x632>
 8009288:	9b03      	ldr	r3, [sp, #12]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f300 80e1 	bgt.w	8009452 <_dtoa_r+0x632>
 8009290:	d10c      	bne.n	80092ac <_dtoa_r+0x48c>
 8009292:	4b48      	ldr	r3, [pc, #288]	@ (80093b4 <_dtoa_r+0x594>)
 8009294:	2200      	movs	r2, #0
 8009296:	ec51 0b17 	vmov	r0, r1, d7
 800929a:	f7f7 f9b5 	bl	8000608 <__aeabi_dmul>
 800929e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092a2:	f7f7 fc37 	bl	8000b14 <__aeabi_dcmpge>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f000 8266 	beq.w	8009778 <_dtoa_r+0x958>
 80092ac:	2400      	movs	r4, #0
 80092ae:	4625      	mov	r5, r4
 80092b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092b2:	4656      	mov	r6, sl
 80092b4:	ea6f 0803 	mvn.w	r8, r3
 80092b8:	2700      	movs	r7, #0
 80092ba:	4621      	mov	r1, r4
 80092bc:	4648      	mov	r0, r9
 80092be:	f000 fcbf 	bl	8009c40 <_Bfree>
 80092c2:	2d00      	cmp	r5, #0
 80092c4:	f000 80bd 	beq.w	8009442 <_dtoa_r+0x622>
 80092c8:	b12f      	cbz	r7, 80092d6 <_dtoa_r+0x4b6>
 80092ca:	42af      	cmp	r7, r5
 80092cc:	d003      	beq.n	80092d6 <_dtoa_r+0x4b6>
 80092ce:	4639      	mov	r1, r7
 80092d0:	4648      	mov	r0, r9
 80092d2:	f000 fcb5 	bl	8009c40 <_Bfree>
 80092d6:	4629      	mov	r1, r5
 80092d8:	4648      	mov	r0, r9
 80092da:	f000 fcb1 	bl	8009c40 <_Bfree>
 80092de:	e0b0      	b.n	8009442 <_dtoa_r+0x622>
 80092e0:	07e2      	lsls	r2, r4, #31
 80092e2:	d505      	bpl.n	80092f0 <_dtoa_r+0x4d0>
 80092e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092e8:	f7f7 f98e 	bl	8000608 <__aeabi_dmul>
 80092ec:	3601      	adds	r6, #1
 80092ee:	2301      	movs	r3, #1
 80092f0:	1064      	asrs	r4, r4, #1
 80092f2:	3508      	adds	r5, #8
 80092f4:	e762      	b.n	80091bc <_dtoa_r+0x39c>
 80092f6:	2602      	movs	r6, #2
 80092f8:	e765      	b.n	80091c6 <_dtoa_r+0x3a6>
 80092fa:	9c03      	ldr	r4, [sp, #12]
 80092fc:	46b8      	mov	r8, r7
 80092fe:	e784      	b.n	800920a <_dtoa_r+0x3ea>
 8009300:	4b27      	ldr	r3, [pc, #156]	@ (80093a0 <_dtoa_r+0x580>)
 8009302:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009304:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009308:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800930c:	4454      	add	r4, sl
 800930e:	2900      	cmp	r1, #0
 8009310:	d054      	beq.n	80093bc <_dtoa_r+0x59c>
 8009312:	4929      	ldr	r1, [pc, #164]	@ (80093b8 <_dtoa_r+0x598>)
 8009314:	2000      	movs	r0, #0
 8009316:	f7f7 faa1 	bl	800085c <__aeabi_ddiv>
 800931a:	4633      	mov	r3, r6
 800931c:	462a      	mov	r2, r5
 800931e:	f7f6 ffbb 	bl	8000298 <__aeabi_dsub>
 8009322:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009326:	4656      	mov	r6, sl
 8009328:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800932c:	f7f7 fc1c 	bl	8000b68 <__aeabi_d2iz>
 8009330:	4605      	mov	r5, r0
 8009332:	f7f7 f8ff 	bl	8000534 <__aeabi_i2d>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800933e:	f7f6 ffab 	bl	8000298 <__aeabi_dsub>
 8009342:	3530      	adds	r5, #48	@ 0x30
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800934c:	f806 5b01 	strb.w	r5, [r6], #1
 8009350:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009354:	f7f7 fbca 	bl	8000aec <__aeabi_dcmplt>
 8009358:	2800      	cmp	r0, #0
 800935a:	d172      	bne.n	8009442 <_dtoa_r+0x622>
 800935c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009360:	4911      	ldr	r1, [pc, #68]	@ (80093a8 <_dtoa_r+0x588>)
 8009362:	2000      	movs	r0, #0
 8009364:	f7f6 ff98 	bl	8000298 <__aeabi_dsub>
 8009368:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800936c:	f7f7 fbbe 	bl	8000aec <__aeabi_dcmplt>
 8009370:	2800      	cmp	r0, #0
 8009372:	f040 80b4 	bne.w	80094de <_dtoa_r+0x6be>
 8009376:	42a6      	cmp	r6, r4
 8009378:	f43f af70 	beq.w	800925c <_dtoa_r+0x43c>
 800937c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009380:	4b0a      	ldr	r3, [pc, #40]	@ (80093ac <_dtoa_r+0x58c>)
 8009382:	2200      	movs	r2, #0
 8009384:	f7f7 f940 	bl	8000608 <__aeabi_dmul>
 8009388:	4b08      	ldr	r3, [pc, #32]	@ (80093ac <_dtoa_r+0x58c>)
 800938a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800938e:	2200      	movs	r2, #0
 8009390:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009394:	f7f7 f938 	bl	8000608 <__aeabi_dmul>
 8009398:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800939c:	e7c4      	b.n	8009328 <_dtoa_r+0x508>
 800939e:	bf00      	nop
 80093a0:	0800cae0 	.word	0x0800cae0
 80093a4:	0800cab8 	.word	0x0800cab8
 80093a8:	3ff00000 	.word	0x3ff00000
 80093ac:	40240000 	.word	0x40240000
 80093b0:	401c0000 	.word	0x401c0000
 80093b4:	40140000 	.word	0x40140000
 80093b8:	3fe00000 	.word	0x3fe00000
 80093bc:	4631      	mov	r1, r6
 80093be:	4628      	mov	r0, r5
 80093c0:	f7f7 f922 	bl	8000608 <__aeabi_dmul>
 80093c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80093c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80093ca:	4656      	mov	r6, sl
 80093cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093d0:	f7f7 fbca 	bl	8000b68 <__aeabi_d2iz>
 80093d4:	4605      	mov	r5, r0
 80093d6:	f7f7 f8ad 	bl	8000534 <__aeabi_i2d>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093e2:	f7f6 ff59 	bl	8000298 <__aeabi_dsub>
 80093e6:	3530      	adds	r5, #48	@ 0x30
 80093e8:	f806 5b01 	strb.w	r5, [r6], #1
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	42a6      	cmp	r6, r4
 80093f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093f6:	f04f 0200 	mov.w	r2, #0
 80093fa:	d124      	bne.n	8009446 <_dtoa_r+0x626>
 80093fc:	4baf      	ldr	r3, [pc, #700]	@ (80096bc <_dtoa_r+0x89c>)
 80093fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009402:	f7f6 ff4b 	bl	800029c <__adddf3>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800940e:	f7f7 fb8b 	bl	8000b28 <__aeabi_dcmpgt>
 8009412:	2800      	cmp	r0, #0
 8009414:	d163      	bne.n	80094de <_dtoa_r+0x6be>
 8009416:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800941a:	49a8      	ldr	r1, [pc, #672]	@ (80096bc <_dtoa_r+0x89c>)
 800941c:	2000      	movs	r0, #0
 800941e:	f7f6 ff3b 	bl	8000298 <__aeabi_dsub>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800942a:	f7f7 fb5f 	bl	8000aec <__aeabi_dcmplt>
 800942e:	2800      	cmp	r0, #0
 8009430:	f43f af14 	beq.w	800925c <_dtoa_r+0x43c>
 8009434:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009436:	1e73      	subs	r3, r6, #1
 8009438:	9313      	str	r3, [sp, #76]	@ 0x4c
 800943a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800943e:	2b30      	cmp	r3, #48	@ 0x30
 8009440:	d0f8      	beq.n	8009434 <_dtoa_r+0x614>
 8009442:	4647      	mov	r7, r8
 8009444:	e03b      	b.n	80094be <_dtoa_r+0x69e>
 8009446:	4b9e      	ldr	r3, [pc, #632]	@ (80096c0 <_dtoa_r+0x8a0>)
 8009448:	f7f7 f8de 	bl	8000608 <__aeabi_dmul>
 800944c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009450:	e7bc      	b.n	80093cc <_dtoa_r+0x5ac>
 8009452:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009456:	4656      	mov	r6, sl
 8009458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800945c:	4620      	mov	r0, r4
 800945e:	4629      	mov	r1, r5
 8009460:	f7f7 f9fc 	bl	800085c <__aeabi_ddiv>
 8009464:	f7f7 fb80 	bl	8000b68 <__aeabi_d2iz>
 8009468:	4680      	mov	r8, r0
 800946a:	f7f7 f863 	bl	8000534 <__aeabi_i2d>
 800946e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009472:	f7f7 f8c9 	bl	8000608 <__aeabi_dmul>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4620      	mov	r0, r4
 800947c:	4629      	mov	r1, r5
 800947e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009482:	f7f6 ff09 	bl	8000298 <__aeabi_dsub>
 8009486:	f806 4b01 	strb.w	r4, [r6], #1
 800948a:	9d03      	ldr	r5, [sp, #12]
 800948c:	eba6 040a 	sub.w	r4, r6, sl
 8009490:	42a5      	cmp	r5, r4
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	d133      	bne.n	8009500 <_dtoa_r+0x6e0>
 8009498:	f7f6 ff00 	bl	800029c <__adddf3>
 800949c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094a0:	4604      	mov	r4, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	f7f7 fb40 	bl	8000b28 <__aeabi_dcmpgt>
 80094a8:	b9c0      	cbnz	r0, 80094dc <_dtoa_r+0x6bc>
 80094aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ae:	4620      	mov	r0, r4
 80094b0:	4629      	mov	r1, r5
 80094b2:	f7f7 fb11 	bl	8000ad8 <__aeabi_dcmpeq>
 80094b6:	b110      	cbz	r0, 80094be <_dtoa_r+0x69e>
 80094b8:	f018 0f01 	tst.w	r8, #1
 80094bc:	d10e      	bne.n	80094dc <_dtoa_r+0x6bc>
 80094be:	9902      	ldr	r1, [sp, #8]
 80094c0:	4648      	mov	r0, r9
 80094c2:	f000 fbbd 	bl	8009c40 <_Bfree>
 80094c6:	2300      	movs	r3, #0
 80094c8:	7033      	strb	r3, [r6, #0]
 80094ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094cc:	3701      	adds	r7, #1
 80094ce:	601f      	str	r7, [r3, #0]
 80094d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 824b 	beq.w	800996e <_dtoa_r+0xb4e>
 80094d8:	601e      	str	r6, [r3, #0]
 80094da:	e248      	b.n	800996e <_dtoa_r+0xb4e>
 80094dc:	46b8      	mov	r8, r7
 80094de:	4633      	mov	r3, r6
 80094e0:	461e      	mov	r6, r3
 80094e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094e6:	2a39      	cmp	r2, #57	@ 0x39
 80094e8:	d106      	bne.n	80094f8 <_dtoa_r+0x6d8>
 80094ea:	459a      	cmp	sl, r3
 80094ec:	d1f8      	bne.n	80094e0 <_dtoa_r+0x6c0>
 80094ee:	2230      	movs	r2, #48	@ 0x30
 80094f0:	f108 0801 	add.w	r8, r8, #1
 80094f4:	f88a 2000 	strb.w	r2, [sl]
 80094f8:	781a      	ldrb	r2, [r3, #0]
 80094fa:	3201      	adds	r2, #1
 80094fc:	701a      	strb	r2, [r3, #0]
 80094fe:	e7a0      	b.n	8009442 <_dtoa_r+0x622>
 8009500:	4b6f      	ldr	r3, [pc, #444]	@ (80096c0 <_dtoa_r+0x8a0>)
 8009502:	2200      	movs	r2, #0
 8009504:	f7f7 f880 	bl	8000608 <__aeabi_dmul>
 8009508:	2200      	movs	r2, #0
 800950a:	2300      	movs	r3, #0
 800950c:	4604      	mov	r4, r0
 800950e:	460d      	mov	r5, r1
 8009510:	f7f7 fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009514:	2800      	cmp	r0, #0
 8009516:	d09f      	beq.n	8009458 <_dtoa_r+0x638>
 8009518:	e7d1      	b.n	80094be <_dtoa_r+0x69e>
 800951a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800951c:	2a00      	cmp	r2, #0
 800951e:	f000 80ea 	beq.w	80096f6 <_dtoa_r+0x8d6>
 8009522:	9a07      	ldr	r2, [sp, #28]
 8009524:	2a01      	cmp	r2, #1
 8009526:	f300 80cd 	bgt.w	80096c4 <_dtoa_r+0x8a4>
 800952a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800952c:	2a00      	cmp	r2, #0
 800952e:	f000 80c1 	beq.w	80096b4 <_dtoa_r+0x894>
 8009532:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009536:	9c08      	ldr	r4, [sp, #32]
 8009538:	9e00      	ldr	r6, [sp, #0]
 800953a:	9a00      	ldr	r2, [sp, #0]
 800953c:	441a      	add	r2, r3
 800953e:	9200      	str	r2, [sp, #0]
 8009540:	9a06      	ldr	r2, [sp, #24]
 8009542:	2101      	movs	r1, #1
 8009544:	441a      	add	r2, r3
 8009546:	4648      	mov	r0, r9
 8009548:	9206      	str	r2, [sp, #24]
 800954a:	f000 fc2d 	bl	8009da8 <__i2b>
 800954e:	4605      	mov	r5, r0
 8009550:	b166      	cbz	r6, 800956c <_dtoa_r+0x74c>
 8009552:	9b06      	ldr	r3, [sp, #24]
 8009554:	2b00      	cmp	r3, #0
 8009556:	dd09      	ble.n	800956c <_dtoa_r+0x74c>
 8009558:	42b3      	cmp	r3, r6
 800955a:	9a00      	ldr	r2, [sp, #0]
 800955c:	bfa8      	it	ge
 800955e:	4633      	movge	r3, r6
 8009560:	1ad2      	subs	r2, r2, r3
 8009562:	9200      	str	r2, [sp, #0]
 8009564:	9a06      	ldr	r2, [sp, #24]
 8009566:	1af6      	subs	r6, r6, r3
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	9306      	str	r3, [sp, #24]
 800956c:	9b08      	ldr	r3, [sp, #32]
 800956e:	b30b      	cbz	r3, 80095b4 <_dtoa_r+0x794>
 8009570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 80c6 	beq.w	8009704 <_dtoa_r+0x8e4>
 8009578:	2c00      	cmp	r4, #0
 800957a:	f000 80c0 	beq.w	80096fe <_dtoa_r+0x8de>
 800957e:	4629      	mov	r1, r5
 8009580:	4622      	mov	r2, r4
 8009582:	4648      	mov	r0, r9
 8009584:	f000 fcc8 	bl	8009f18 <__pow5mult>
 8009588:	9a02      	ldr	r2, [sp, #8]
 800958a:	4601      	mov	r1, r0
 800958c:	4605      	mov	r5, r0
 800958e:	4648      	mov	r0, r9
 8009590:	f000 fc20 	bl	8009dd4 <__multiply>
 8009594:	9902      	ldr	r1, [sp, #8]
 8009596:	4680      	mov	r8, r0
 8009598:	4648      	mov	r0, r9
 800959a:	f000 fb51 	bl	8009c40 <_Bfree>
 800959e:	9b08      	ldr	r3, [sp, #32]
 80095a0:	1b1b      	subs	r3, r3, r4
 80095a2:	9308      	str	r3, [sp, #32]
 80095a4:	f000 80b1 	beq.w	800970a <_dtoa_r+0x8ea>
 80095a8:	9a08      	ldr	r2, [sp, #32]
 80095aa:	4641      	mov	r1, r8
 80095ac:	4648      	mov	r0, r9
 80095ae:	f000 fcb3 	bl	8009f18 <__pow5mult>
 80095b2:	9002      	str	r0, [sp, #8]
 80095b4:	2101      	movs	r1, #1
 80095b6:	4648      	mov	r0, r9
 80095b8:	f000 fbf6 	bl	8009da8 <__i2b>
 80095bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095be:	4604      	mov	r4, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 81d8 	beq.w	8009976 <_dtoa_r+0xb56>
 80095c6:	461a      	mov	r2, r3
 80095c8:	4601      	mov	r1, r0
 80095ca:	4648      	mov	r0, r9
 80095cc:	f000 fca4 	bl	8009f18 <__pow5mult>
 80095d0:	9b07      	ldr	r3, [sp, #28]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	4604      	mov	r4, r0
 80095d6:	f300 809f 	bgt.w	8009718 <_dtoa_r+0x8f8>
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f040 8097 	bne.w	8009710 <_dtoa_r+0x8f0>
 80095e2:	9b05      	ldr	r3, [sp, #20]
 80095e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f040 8093 	bne.w	8009714 <_dtoa_r+0x8f4>
 80095ee:	9b05      	ldr	r3, [sp, #20]
 80095f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095f4:	0d1b      	lsrs	r3, r3, #20
 80095f6:	051b      	lsls	r3, r3, #20
 80095f8:	b133      	cbz	r3, 8009608 <_dtoa_r+0x7e8>
 80095fa:	9b00      	ldr	r3, [sp, #0]
 80095fc:	3301      	adds	r3, #1
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	9b06      	ldr	r3, [sp, #24]
 8009602:	3301      	adds	r3, #1
 8009604:	9306      	str	r3, [sp, #24]
 8009606:	2301      	movs	r3, #1
 8009608:	9308      	str	r3, [sp, #32]
 800960a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 81b8 	beq.w	8009982 <_dtoa_r+0xb62>
 8009612:	6923      	ldr	r3, [r4, #16]
 8009614:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009618:	6918      	ldr	r0, [r3, #16]
 800961a:	f000 fb79 	bl	8009d10 <__hi0bits>
 800961e:	f1c0 0020 	rsb	r0, r0, #32
 8009622:	9b06      	ldr	r3, [sp, #24]
 8009624:	4418      	add	r0, r3
 8009626:	f010 001f 	ands.w	r0, r0, #31
 800962a:	f000 8082 	beq.w	8009732 <_dtoa_r+0x912>
 800962e:	f1c0 0320 	rsb	r3, r0, #32
 8009632:	2b04      	cmp	r3, #4
 8009634:	dd73      	ble.n	800971e <_dtoa_r+0x8fe>
 8009636:	9b00      	ldr	r3, [sp, #0]
 8009638:	f1c0 001c 	rsb	r0, r0, #28
 800963c:	4403      	add	r3, r0
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	9b06      	ldr	r3, [sp, #24]
 8009642:	4403      	add	r3, r0
 8009644:	4406      	add	r6, r0
 8009646:	9306      	str	r3, [sp, #24]
 8009648:	9b00      	ldr	r3, [sp, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	dd05      	ble.n	800965a <_dtoa_r+0x83a>
 800964e:	9902      	ldr	r1, [sp, #8]
 8009650:	461a      	mov	r2, r3
 8009652:	4648      	mov	r0, r9
 8009654:	f000 fcba 	bl	8009fcc <__lshift>
 8009658:	9002      	str	r0, [sp, #8]
 800965a:	9b06      	ldr	r3, [sp, #24]
 800965c:	2b00      	cmp	r3, #0
 800965e:	dd05      	ble.n	800966c <_dtoa_r+0x84c>
 8009660:	4621      	mov	r1, r4
 8009662:	461a      	mov	r2, r3
 8009664:	4648      	mov	r0, r9
 8009666:	f000 fcb1 	bl	8009fcc <__lshift>
 800966a:	4604      	mov	r4, r0
 800966c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d061      	beq.n	8009736 <_dtoa_r+0x916>
 8009672:	9802      	ldr	r0, [sp, #8]
 8009674:	4621      	mov	r1, r4
 8009676:	f000 fd15 	bl	800a0a4 <__mcmp>
 800967a:	2800      	cmp	r0, #0
 800967c:	da5b      	bge.n	8009736 <_dtoa_r+0x916>
 800967e:	2300      	movs	r3, #0
 8009680:	9902      	ldr	r1, [sp, #8]
 8009682:	220a      	movs	r2, #10
 8009684:	4648      	mov	r0, r9
 8009686:	f000 fafd 	bl	8009c84 <__multadd>
 800968a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800968c:	9002      	str	r0, [sp, #8]
 800968e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 8177 	beq.w	8009986 <_dtoa_r+0xb66>
 8009698:	4629      	mov	r1, r5
 800969a:	2300      	movs	r3, #0
 800969c:	220a      	movs	r2, #10
 800969e:	4648      	mov	r0, r9
 80096a0:	f000 faf0 	bl	8009c84 <__multadd>
 80096a4:	f1bb 0f00 	cmp.w	fp, #0
 80096a8:	4605      	mov	r5, r0
 80096aa:	dc6f      	bgt.n	800978c <_dtoa_r+0x96c>
 80096ac:	9b07      	ldr	r3, [sp, #28]
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	dc49      	bgt.n	8009746 <_dtoa_r+0x926>
 80096b2:	e06b      	b.n	800978c <_dtoa_r+0x96c>
 80096b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80096b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80096ba:	e73c      	b.n	8009536 <_dtoa_r+0x716>
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	40240000 	.word	0x40240000
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	1e5c      	subs	r4, r3, #1
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	db09      	blt.n	80096e2 <_dtoa_r+0x8c2>
 80096ce:	1b1c      	subs	r4, r3, r4
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f6bf af30 	bge.w	8009538 <_dtoa_r+0x718>
 80096d8:	9b00      	ldr	r3, [sp, #0]
 80096da:	9a03      	ldr	r2, [sp, #12]
 80096dc:	1a9e      	subs	r6, r3, r2
 80096de:	2300      	movs	r3, #0
 80096e0:	e72b      	b.n	800953a <_dtoa_r+0x71a>
 80096e2:	9b08      	ldr	r3, [sp, #32]
 80096e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096e6:	9408      	str	r4, [sp, #32]
 80096e8:	1ae3      	subs	r3, r4, r3
 80096ea:	441a      	add	r2, r3
 80096ec:	9e00      	ldr	r6, [sp, #0]
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	920d      	str	r2, [sp, #52]	@ 0x34
 80096f2:	2400      	movs	r4, #0
 80096f4:	e721      	b.n	800953a <_dtoa_r+0x71a>
 80096f6:	9c08      	ldr	r4, [sp, #32]
 80096f8:	9e00      	ldr	r6, [sp, #0]
 80096fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80096fc:	e728      	b.n	8009550 <_dtoa_r+0x730>
 80096fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009702:	e751      	b.n	80095a8 <_dtoa_r+0x788>
 8009704:	9a08      	ldr	r2, [sp, #32]
 8009706:	9902      	ldr	r1, [sp, #8]
 8009708:	e750      	b.n	80095ac <_dtoa_r+0x78c>
 800970a:	f8cd 8008 	str.w	r8, [sp, #8]
 800970e:	e751      	b.n	80095b4 <_dtoa_r+0x794>
 8009710:	2300      	movs	r3, #0
 8009712:	e779      	b.n	8009608 <_dtoa_r+0x7e8>
 8009714:	9b04      	ldr	r3, [sp, #16]
 8009716:	e777      	b.n	8009608 <_dtoa_r+0x7e8>
 8009718:	2300      	movs	r3, #0
 800971a:	9308      	str	r3, [sp, #32]
 800971c:	e779      	b.n	8009612 <_dtoa_r+0x7f2>
 800971e:	d093      	beq.n	8009648 <_dtoa_r+0x828>
 8009720:	9a00      	ldr	r2, [sp, #0]
 8009722:	331c      	adds	r3, #28
 8009724:	441a      	add	r2, r3
 8009726:	9200      	str	r2, [sp, #0]
 8009728:	9a06      	ldr	r2, [sp, #24]
 800972a:	441a      	add	r2, r3
 800972c:	441e      	add	r6, r3
 800972e:	9206      	str	r2, [sp, #24]
 8009730:	e78a      	b.n	8009648 <_dtoa_r+0x828>
 8009732:	4603      	mov	r3, r0
 8009734:	e7f4      	b.n	8009720 <_dtoa_r+0x900>
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	46b8      	mov	r8, r7
 800973c:	dc20      	bgt.n	8009780 <_dtoa_r+0x960>
 800973e:	469b      	mov	fp, r3
 8009740:	9b07      	ldr	r3, [sp, #28]
 8009742:	2b02      	cmp	r3, #2
 8009744:	dd1e      	ble.n	8009784 <_dtoa_r+0x964>
 8009746:	f1bb 0f00 	cmp.w	fp, #0
 800974a:	f47f adb1 	bne.w	80092b0 <_dtoa_r+0x490>
 800974e:	4621      	mov	r1, r4
 8009750:	465b      	mov	r3, fp
 8009752:	2205      	movs	r2, #5
 8009754:	4648      	mov	r0, r9
 8009756:	f000 fa95 	bl	8009c84 <__multadd>
 800975a:	4601      	mov	r1, r0
 800975c:	4604      	mov	r4, r0
 800975e:	9802      	ldr	r0, [sp, #8]
 8009760:	f000 fca0 	bl	800a0a4 <__mcmp>
 8009764:	2800      	cmp	r0, #0
 8009766:	f77f ada3 	ble.w	80092b0 <_dtoa_r+0x490>
 800976a:	4656      	mov	r6, sl
 800976c:	2331      	movs	r3, #49	@ 0x31
 800976e:	f806 3b01 	strb.w	r3, [r6], #1
 8009772:	f108 0801 	add.w	r8, r8, #1
 8009776:	e59f      	b.n	80092b8 <_dtoa_r+0x498>
 8009778:	9c03      	ldr	r4, [sp, #12]
 800977a:	46b8      	mov	r8, r7
 800977c:	4625      	mov	r5, r4
 800977e:	e7f4      	b.n	800976a <_dtoa_r+0x94a>
 8009780:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 8101 	beq.w	800998e <_dtoa_r+0xb6e>
 800978c:	2e00      	cmp	r6, #0
 800978e:	dd05      	ble.n	800979c <_dtoa_r+0x97c>
 8009790:	4629      	mov	r1, r5
 8009792:	4632      	mov	r2, r6
 8009794:	4648      	mov	r0, r9
 8009796:	f000 fc19 	bl	8009fcc <__lshift>
 800979a:	4605      	mov	r5, r0
 800979c:	9b08      	ldr	r3, [sp, #32]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d05c      	beq.n	800985c <_dtoa_r+0xa3c>
 80097a2:	6869      	ldr	r1, [r5, #4]
 80097a4:	4648      	mov	r0, r9
 80097a6:	f000 fa0b 	bl	8009bc0 <_Balloc>
 80097aa:	4606      	mov	r6, r0
 80097ac:	b928      	cbnz	r0, 80097ba <_dtoa_r+0x99a>
 80097ae:	4b82      	ldr	r3, [pc, #520]	@ (80099b8 <_dtoa_r+0xb98>)
 80097b0:	4602      	mov	r2, r0
 80097b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80097b6:	f7ff bb4a 	b.w	8008e4e <_dtoa_r+0x2e>
 80097ba:	692a      	ldr	r2, [r5, #16]
 80097bc:	3202      	adds	r2, #2
 80097be:	0092      	lsls	r2, r2, #2
 80097c0:	f105 010c 	add.w	r1, r5, #12
 80097c4:	300c      	adds	r0, #12
 80097c6:	f000 ffa3 	bl	800a710 <memcpy>
 80097ca:	2201      	movs	r2, #1
 80097cc:	4631      	mov	r1, r6
 80097ce:	4648      	mov	r0, r9
 80097d0:	f000 fbfc 	bl	8009fcc <__lshift>
 80097d4:	f10a 0301 	add.w	r3, sl, #1
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	eb0a 030b 	add.w	r3, sl, fp
 80097de:	9308      	str	r3, [sp, #32]
 80097e0:	9b04      	ldr	r3, [sp, #16]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	462f      	mov	r7, r5
 80097e8:	9306      	str	r3, [sp, #24]
 80097ea:	4605      	mov	r5, r0
 80097ec:	9b00      	ldr	r3, [sp, #0]
 80097ee:	9802      	ldr	r0, [sp, #8]
 80097f0:	4621      	mov	r1, r4
 80097f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80097f6:	f7ff fa88 	bl	8008d0a <quorem>
 80097fa:	4603      	mov	r3, r0
 80097fc:	3330      	adds	r3, #48	@ 0x30
 80097fe:	9003      	str	r0, [sp, #12]
 8009800:	4639      	mov	r1, r7
 8009802:	9802      	ldr	r0, [sp, #8]
 8009804:	9309      	str	r3, [sp, #36]	@ 0x24
 8009806:	f000 fc4d 	bl	800a0a4 <__mcmp>
 800980a:	462a      	mov	r2, r5
 800980c:	9004      	str	r0, [sp, #16]
 800980e:	4621      	mov	r1, r4
 8009810:	4648      	mov	r0, r9
 8009812:	f000 fc63 	bl	800a0dc <__mdiff>
 8009816:	68c2      	ldr	r2, [r0, #12]
 8009818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800981a:	4606      	mov	r6, r0
 800981c:	bb02      	cbnz	r2, 8009860 <_dtoa_r+0xa40>
 800981e:	4601      	mov	r1, r0
 8009820:	9802      	ldr	r0, [sp, #8]
 8009822:	f000 fc3f 	bl	800a0a4 <__mcmp>
 8009826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009828:	4602      	mov	r2, r0
 800982a:	4631      	mov	r1, r6
 800982c:	4648      	mov	r0, r9
 800982e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009830:	9309      	str	r3, [sp, #36]	@ 0x24
 8009832:	f000 fa05 	bl	8009c40 <_Bfree>
 8009836:	9b07      	ldr	r3, [sp, #28]
 8009838:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800983a:	9e00      	ldr	r6, [sp, #0]
 800983c:	ea42 0103 	orr.w	r1, r2, r3
 8009840:	9b06      	ldr	r3, [sp, #24]
 8009842:	4319      	orrs	r1, r3
 8009844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009846:	d10d      	bne.n	8009864 <_dtoa_r+0xa44>
 8009848:	2b39      	cmp	r3, #57	@ 0x39
 800984a:	d027      	beq.n	800989c <_dtoa_r+0xa7c>
 800984c:	9a04      	ldr	r2, [sp, #16]
 800984e:	2a00      	cmp	r2, #0
 8009850:	dd01      	ble.n	8009856 <_dtoa_r+0xa36>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	3331      	adds	r3, #49	@ 0x31
 8009856:	f88b 3000 	strb.w	r3, [fp]
 800985a:	e52e      	b.n	80092ba <_dtoa_r+0x49a>
 800985c:	4628      	mov	r0, r5
 800985e:	e7b9      	b.n	80097d4 <_dtoa_r+0x9b4>
 8009860:	2201      	movs	r2, #1
 8009862:	e7e2      	b.n	800982a <_dtoa_r+0xa0a>
 8009864:	9904      	ldr	r1, [sp, #16]
 8009866:	2900      	cmp	r1, #0
 8009868:	db04      	blt.n	8009874 <_dtoa_r+0xa54>
 800986a:	9807      	ldr	r0, [sp, #28]
 800986c:	4301      	orrs	r1, r0
 800986e:	9806      	ldr	r0, [sp, #24]
 8009870:	4301      	orrs	r1, r0
 8009872:	d120      	bne.n	80098b6 <_dtoa_r+0xa96>
 8009874:	2a00      	cmp	r2, #0
 8009876:	ddee      	ble.n	8009856 <_dtoa_r+0xa36>
 8009878:	9902      	ldr	r1, [sp, #8]
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	2201      	movs	r2, #1
 800987e:	4648      	mov	r0, r9
 8009880:	f000 fba4 	bl	8009fcc <__lshift>
 8009884:	4621      	mov	r1, r4
 8009886:	9002      	str	r0, [sp, #8]
 8009888:	f000 fc0c 	bl	800a0a4 <__mcmp>
 800988c:	2800      	cmp	r0, #0
 800988e:	9b00      	ldr	r3, [sp, #0]
 8009890:	dc02      	bgt.n	8009898 <_dtoa_r+0xa78>
 8009892:	d1e0      	bne.n	8009856 <_dtoa_r+0xa36>
 8009894:	07da      	lsls	r2, r3, #31
 8009896:	d5de      	bpl.n	8009856 <_dtoa_r+0xa36>
 8009898:	2b39      	cmp	r3, #57	@ 0x39
 800989a:	d1da      	bne.n	8009852 <_dtoa_r+0xa32>
 800989c:	2339      	movs	r3, #57	@ 0x39
 800989e:	f88b 3000 	strb.w	r3, [fp]
 80098a2:	4633      	mov	r3, r6
 80098a4:	461e      	mov	r6, r3
 80098a6:	3b01      	subs	r3, #1
 80098a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80098ac:	2a39      	cmp	r2, #57	@ 0x39
 80098ae:	d04e      	beq.n	800994e <_dtoa_r+0xb2e>
 80098b0:	3201      	adds	r2, #1
 80098b2:	701a      	strb	r2, [r3, #0]
 80098b4:	e501      	b.n	80092ba <_dtoa_r+0x49a>
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	dd03      	ble.n	80098c2 <_dtoa_r+0xaa2>
 80098ba:	2b39      	cmp	r3, #57	@ 0x39
 80098bc:	d0ee      	beq.n	800989c <_dtoa_r+0xa7c>
 80098be:	3301      	adds	r3, #1
 80098c0:	e7c9      	b.n	8009856 <_dtoa_r+0xa36>
 80098c2:	9a00      	ldr	r2, [sp, #0]
 80098c4:	9908      	ldr	r1, [sp, #32]
 80098c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80098ca:	428a      	cmp	r2, r1
 80098cc:	d028      	beq.n	8009920 <_dtoa_r+0xb00>
 80098ce:	9902      	ldr	r1, [sp, #8]
 80098d0:	2300      	movs	r3, #0
 80098d2:	220a      	movs	r2, #10
 80098d4:	4648      	mov	r0, r9
 80098d6:	f000 f9d5 	bl	8009c84 <__multadd>
 80098da:	42af      	cmp	r7, r5
 80098dc:	9002      	str	r0, [sp, #8]
 80098de:	f04f 0300 	mov.w	r3, #0
 80098e2:	f04f 020a 	mov.w	r2, #10
 80098e6:	4639      	mov	r1, r7
 80098e8:	4648      	mov	r0, r9
 80098ea:	d107      	bne.n	80098fc <_dtoa_r+0xadc>
 80098ec:	f000 f9ca 	bl	8009c84 <__multadd>
 80098f0:	4607      	mov	r7, r0
 80098f2:	4605      	mov	r5, r0
 80098f4:	9b00      	ldr	r3, [sp, #0]
 80098f6:	3301      	adds	r3, #1
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	e777      	b.n	80097ec <_dtoa_r+0x9cc>
 80098fc:	f000 f9c2 	bl	8009c84 <__multadd>
 8009900:	4629      	mov	r1, r5
 8009902:	4607      	mov	r7, r0
 8009904:	2300      	movs	r3, #0
 8009906:	220a      	movs	r2, #10
 8009908:	4648      	mov	r0, r9
 800990a:	f000 f9bb 	bl	8009c84 <__multadd>
 800990e:	4605      	mov	r5, r0
 8009910:	e7f0      	b.n	80098f4 <_dtoa_r+0xad4>
 8009912:	f1bb 0f00 	cmp.w	fp, #0
 8009916:	bfcc      	ite	gt
 8009918:	465e      	movgt	r6, fp
 800991a:	2601      	movle	r6, #1
 800991c:	4456      	add	r6, sl
 800991e:	2700      	movs	r7, #0
 8009920:	9902      	ldr	r1, [sp, #8]
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	2201      	movs	r2, #1
 8009926:	4648      	mov	r0, r9
 8009928:	f000 fb50 	bl	8009fcc <__lshift>
 800992c:	4621      	mov	r1, r4
 800992e:	9002      	str	r0, [sp, #8]
 8009930:	f000 fbb8 	bl	800a0a4 <__mcmp>
 8009934:	2800      	cmp	r0, #0
 8009936:	dcb4      	bgt.n	80098a2 <_dtoa_r+0xa82>
 8009938:	d102      	bne.n	8009940 <_dtoa_r+0xb20>
 800993a:	9b00      	ldr	r3, [sp, #0]
 800993c:	07db      	lsls	r3, r3, #31
 800993e:	d4b0      	bmi.n	80098a2 <_dtoa_r+0xa82>
 8009940:	4633      	mov	r3, r6
 8009942:	461e      	mov	r6, r3
 8009944:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009948:	2a30      	cmp	r2, #48	@ 0x30
 800994a:	d0fa      	beq.n	8009942 <_dtoa_r+0xb22>
 800994c:	e4b5      	b.n	80092ba <_dtoa_r+0x49a>
 800994e:	459a      	cmp	sl, r3
 8009950:	d1a8      	bne.n	80098a4 <_dtoa_r+0xa84>
 8009952:	2331      	movs	r3, #49	@ 0x31
 8009954:	f108 0801 	add.w	r8, r8, #1
 8009958:	f88a 3000 	strb.w	r3, [sl]
 800995c:	e4ad      	b.n	80092ba <_dtoa_r+0x49a>
 800995e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009960:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80099bc <_dtoa_r+0xb9c>
 8009964:	b11b      	cbz	r3, 800996e <_dtoa_r+0xb4e>
 8009966:	f10a 0308 	add.w	r3, sl, #8
 800996a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	4650      	mov	r0, sl
 8009970:	b017      	add	sp, #92	@ 0x5c
 8009972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009976:	9b07      	ldr	r3, [sp, #28]
 8009978:	2b01      	cmp	r3, #1
 800997a:	f77f ae2e 	ble.w	80095da <_dtoa_r+0x7ba>
 800997e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009980:	9308      	str	r3, [sp, #32]
 8009982:	2001      	movs	r0, #1
 8009984:	e64d      	b.n	8009622 <_dtoa_r+0x802>
 8009986:	f1bb 0f00 	cmp.w	fp, #0
 800998a:	f77f aed9 	ble.w	8009740 <_dtoa_r+0x920>
 800998e:	4656      	mov	r6, sl
 8009990:	9802      	ldr	r0, [sp, #8]
 8009992:	4621      	mov	r1, r4
 8009994:	f7ff f9b9 	bl	8008d0a <quorem>
 8009998:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800999c:	f806 3b01 	strb.w	r3, [r6], #1
 80099a0:	eba6 020a 	sub.w	r2, r6, sl
 80099a4:	4593      	cmp	fp, r2
 80099a6:	ddb4      	ble.n	8009912 <_dtoa_r+0xaf2>
 80099a8:	9902      	ldr	r1, [sp, #8]
 80099aa:	2300      	movs	r3, #0
 80099ac:	220a      	movs	r2, #10
 80099ae:	4648      	mov	r0, r9
 80099b0:	f000 f968 	bl	8009c84 <__multadd>
 80099b4:	9002      	str	r0, [sp, #8]
 80099b6:	e7eb      	b.n	8009990 <_dtoa_r+0xb70>
 80099b8:	0800c9e4 	.word	0x0800c9e4
 80099bc:	0800c968 	.word	0x0800c968

080099c0 <_free_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4605      	mov	r5, r0
 80099c4:	2900      	cmp	r1, #0
 80099c6:	d041      	beq.n	8009a4c <_free_r+0x8c>
 80099c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099cc:	1f0c      	subs	r4, r1, #4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	bfb8      	it	lt
 80099d2:	18e4      	addlt	r4, r4, r3
 80099d4:	f000 f8e8 	bl	8009ba8 <__malloc_lock>
 80099d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009a50 <_free_r+0x90>)
 80099da:	6813      	ldr	r3, [r2, #0]
 80099dc:	b933      	cbnz	r3, 80099ec <_free_r+0x2c>
 80099de:	6063      	str	r3, [r4, #4]
 80099e0:	6014      	str	r4, [r2, #0]
 80099e2:	4628      	mov	r0, r5
 80099e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099e8:	f000 b8e4 	b.w	8009bb4 <__malloc_unlock>
 80099ec:	42a3      	cmp	r3, r4
 80099ee:	d908      	bls.n	8009a02 <_free_r+0x42>
 80099f0:	6820      	ldr	r0, [r4, #0]
 80099f2:	1821      	adds	r1, r4, r0
 80099f4:	428b      	cmp	r3, r1
 80099f6:	bf01      	itttt	eq
 80099f8:	6819      	ldreq	r1, [r3, #0]
 80099fa:	685b      	ldreq	r3, [r3, #4]
 80099fc:	1809      	addeq	r1, r1, r0
 80099fe:	6021      	streq	r1, [r4, #0]
 8009a00:	e7ed      	b.n	80099de <_free_r+0x1e>
 8009a02:	461a      	mov	r2, r3
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	b10b      	cbz	r3, 8009a0c <_free_r+0x4c>
 8009a08:	42a3      	cmp	r3, r4
 8009a0a:	d9fa      	bls.n	8009a02 <_free_r+0x42>
 8009a0c:	6811      	ldr	r1, [r2, #0]
 8009a0e:	1850      	adds	r0, r2, r1
 8009a10:	42a0      	cmp	r0, r4
 8009a12:	d10b      	bne.n	8009a2c <_free_r+0x6c>
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	4401      	add	r1, r0
 8009a18:	1850      	adds	r0, r2, r1
 8009a1a:	4283      	cmp	r3, r0
 8009a1c:	6011      	str	r1, [r2, #0]
 8009a1e:	d1e0      	bne.n	80099e2 <_free_r+0x22>
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	6053      	str	r3, [r2, #4]
 8009a26:	4408      	add	r0, r1
 8009a28:	6010      	str	r0, [r2, #0]
 8009a2a:	e7da      	b.n	80099e2 <_free_r+0x22>
 8009a2c:	d902      	bls.n	8009a34 <_free_r+0x74>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	602b      	str	r3, [r5, #0]
 8009a32:	e7d6      	b.n	80099e2 <_free_r+0x22>
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	1821      	adds	r1, r4, r0
 8009a38:	428b      	cmp	r3, r1
 8009a3a:	bf04      	itt	eq
 8009a3c:	6819      	ldreq	r1, [r3, #0]
 8009a3e:	685b      	ldreq	r3, [r3, #4]
 8009a40:	6063      	str	r3, [r4, #4]
 8009a42:	bf04      	itt	eq
 8009a44:	1809      	addeq	r1, r1, r0
 8009a46:	6021      	streq	r1, [r4, #0]
 8009a48:	6054      	str	r4, [r2, #4]
 8009a4a:	e7ca      	b.n	80099e2 <_free_r+0x22>
 8009a4c:	bd38      	pop	{r3, r4, r5, pc}
 8009a4e:	bf00      	nop
 8009a50:	20001614 	.word	0x20001614

08009a54 <malloc>:
 8009a54:	4b02      	ldr	r3, [pc, #8]	@ (8009a60 <malloc+0xc>)
 8009a56:	4601      	mov	r1, r0
 8009a58:	6818      	ldr	r0, [r3, #0]
 8009a5a:	f000 b825 	b.w	8009aa8 <_malloc_r>
 8009a5e:	bf00      	nop
 8009a60:	2000001c 	.word	0x2000001c

08009a64 <sbrk_aligned>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4e0f      	ldr	r6, [pc, #60]	@ (8009aa4 <sbrk_aligned+0x40>)
 8009a68:	460c      	mov	r4, r1
 8009a6a:	6831      	ldr	r1, [r6, #0]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	b911      	cbnz	r1, 8009a76 <sbrk_aligned+0x12>
 8009a70:	f000 fe3e 	bl	800a6f0 <_sbrk_r>
 8009a74:	6030      	str	r0, [r6, #0]
 8009a76:	4621      	mov	r1, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f000 fe39 	bl	800a6f0 <_sbrk_r>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d103      	bne.n	8009a8a <sbrk_aligned+0x26>
 8009a82:	f04f 34ff 	mov.w	r4, #4294967295
 8009a86:	4620      	mov	r0, r4
 8009a88:	bd70      	pop	{r4, r5, r6, pc}
 8009a8a:	1cc4      	adds	r4, r0, #3
 8009a8c:	f024 0403 	bic.w	r4, r4, #3
 8009a90:	42a0      	cmp	r0, r4
 8009a92:	d0f8      	beq.n	8009a86 <sbrk_aligned+0x22>
 8009a94:	1a21      	subs	r1, r4, r0
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 fe2a 	bl	800a6f0 <_sbrk_r>
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d1f2      	bne.n	8009a86 <sbrk_aligned+0x22>
 8009aa0:	e7ef      	b.n	8009a82 <sbrk_aligned+0x1e>
 8009aa2:	bf00      	nop
 8009aa4:	20001610 	.word	0x20001610

08009aa8 <_malloc_r>:
 8009aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aac:	1ccd      	adds	r5, r1, #3
 8009aae:	f025 0503 	bic.w	r5, r5, #3
 8009ab2:	3508      	adds	r5, #8
 8009ab4:	2d0c      	cmp	r5, #12
 8009ab6:	bf38      	it	cc
 8009ab8:	250c      	movcc	r5, #12
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	4606      	mov	r6, r0
 8009abe:	db01      	blt.n	8009ac4 <_malloc_r+0x1c>
 8009ac0:	42a9      	cmp	r1, r5
 8009ac2:	d904      	bls.n	8009ace <_malloc_r+0x26>
 8009ac4:	230c      	movs	r3, #12
 8009ac6:	6033      	str	r3, [r6, #0]
 8009ac8:	2000      	movs	r0, #0
 8009aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ace:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ba4 <_malloc_r+0xfc>
 8009ad2:	f000 f869 	bl	8009ba8 <__malloc_lock>
 8009ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8009ada:	461c      	mov	r4, r3
 8009adc:	bb44      	cbnz	r4, 8009b30 <_malloc_r+0x88>
 8009ade:	4629      	mov	r1, r5
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f7ff ffbf 	bl	8009a64 <sbrk_aligned>
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	4604      	mov	r4, r0
 8009aea:	d158      	bne.n	8009b9e <_malloc_r+0xf6>
 8009aec:	f8d8 4000 	ldr.w	r4, [r8]
 8009af0:	4627      	mov	r7, r4
 8009af2:	2f00      	cmp	r7, #0
 8009af4:	d143      	bne.n	8009b7e <_malloc_r+0xd6>
 8009af6:	2c00      	cmp	r4, #0
 8009af8:	d04b      	beq.n	8009b92 <_malloc_r+0xea>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	4639      	mov	r1, r7
 8009afe:	4630      	mov	r0, r6
 8009b00:	eb04 0903 	add.w	r9, r4, r3
 8009b04:	f000 fdf4 	bl	800a6f0 <_sbrk_r>
 8009b08:	4581      	cmp	r9, r0
 8009b0a:	d142      	bne.n	8009b92 <_malloc_r+0xea>
 8009b0c:	6821      	ldr	r1, [r4, #0]
 8009b0e:	1a6d      	subs	r5, r5, r1
 8009b10:	4629      	mov	r1, r5
 8009b12:	4630      	mov	r0, r6
 8009b14:	f7ff ffa6 	bl	8009a64 <sbrk_aligned>
 8009b18:	3001      	adds	r0, #1
 8009b1a:	d03a      	beq.n	8009b92 <_malloc_r+0xea>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	442b      	add	r3, r5
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	f8d8 3000 	ldr.w	r3, [r8]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	bb62      	cbnz	r2, 8009b84 <_malloc_r+0xdc>
 8009b2a:	f8c8 7000 	str.w	r7, [r8]
 8009b2e:	e00f      	b.n	8009b50 <_malloc_r+0xa8>
 8009b30:	6822      	ldr	r2, [r4, #0]
 8009b32:	1b52      	subs	r2, r2, r5
 8009b34:	d420      	bmi.n	8009b78 <_malloc_r+0xd0>
 8009b36:	2a0b      	cmp	r2, #11
 8009b38:	d917      	bls.n	8009b6a <_malloc_r+0xc2>
 8009b3a:	1961      	adds	r1, r4, r5
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	6025      	str	r5, [r4, #0]
 8009b40:	bf18      	it	ne
 8009b42:	6059      	strne	r1, [r3, #4]
 8009b44:	6863      	ldr	r3, [r4, #4]
 8009b46:	bf08      	it	eq
 8009b48:	f8c8 1000 	streq.w	r1, [r8]
 8009b4c:	5162      	str	r2, [r4, r5]
 8009b4e:	604b      	str	r3, [r1, #4]
 8009b50:	4630      	mov	r0, r6
 8009b52:	f000 f82f 	bl	8009bb4 <__malloc_unlock>
 8009b56:	f104 000b 	add.w	r0, r4, #11
 8009b5a:	1d23      	adds	r3, r4, #4
 8009b5c:	f020 0007 	bic.w	r0, r0, #7
 8009b60:	1ac2      	subs	r2, r0, r3
 8009b62:	bf1c      	itt	ne
 8009b64:	1a1b      	subne	r3, r3, r0
 8009b66:	50a3      	strne	r3, [r4, r2]
 8009b68:	e7af      	b.n	8009aca <_malloc_r+0x22>
 8009b6a:	6862      	ldr	r2, [r4, #4]
 8009b6c:	42a3      	cmp	r3, r4
 8009b6e:	bf0c      	ite	eq
 8009b70:	f8c8 2000 	streq.w	r2, [r8]
 8009b74:	605a      	strne	r2, [r3, #4]
 8009b76:	e7eb      	b.n	8009b50 <_malloc_r+0xa8>
 8009b78:	4623      	mov	r3, r4
 8009b7a:	6864      	ldr	r4, [r4, #4]
 8009b7c:	e7ae      	b.n	8009adc <_malloc_r+0x34>
 8009b7e:	463c      	mov	r4, r7
 8009b80:	687f      	ldr	r7, [r7, #4]
 8009b82:	e7b6      	b.n	8009af2 <_malloc_r+0x4a>
 8009b84:	461a      	mov	r2, r3
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	d1fb      	bne.n	8009b84 <_malloc_r+0xdc>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	6053      	str	r3, [r2, #4]
 8009b90:	e7de      	b.n	8009b50 <_malloc_r+0xa8>
 8009b92:	230c      	movs	r3, #12
 8009b94:	6033      	str	r3, [r6, #0]
 8009b96:	4630      	mov	r0, r6
 8009b98:	f000 f80c 	bl	8009bb4 <__malloc_unlock>
 8009b9c:	e794      	b.n	8009ac8 <_malloc_r+0x20>
 8009b9e:	6005      	str	r5, [r0, #0]
 8009ba0:	e7d6      	b.n	8009b50 <_malloc_r+0xa8>
 8009ba2:	bf00      	nop
 8009ba4:	20001614 	.word	0x20001614

08009ba8 <__malloc_lock>:
 8009ba8:	4801      	ldr	r0, [pc, #4]	@ (8009bb0 <__malloc_lock+0x8>)
 8009baa:	f7ff b8ac 	b.w	8008d06 <__retarget_lock_acquire_recursive>
 8009bae:	bf00      	nop
 8009bb0:	2000160c 	.word	0x2000160c

08009bb4 <__malloc_unlock>:
 8009bb4:	4801      	ldr	r0, [pc, #4]	@ (8009bbc <__malloc_unlock+0x8>)
 8009bb6:	f7ff b8a7 	b.w	8008d08 <__retarget_lock_release_recursive>
 8009bba:	bf00      	nop
 8009bbc:	2000160c 	.word	0x2000160c

08009bc0 <_Balloc>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	69c6      	ldr	r6, [r0, #28]
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	460d      	mov	r5, r1
 8009bc8:	b976      	cbnz	r6, 8009be8 <_Balloc+0x28>
 8009bca:	2010      	movs	r0, #16
 8009bcc:	f7ff ff42 	bl	8009a54 <malloc>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	61e0      	str	r0, [r4, #28]
 8009bd4:	b920      	cbnz	r0, 8009be0 <_Balloc+0x20>
 8009bd6:	4b18      	ldr	r3, [pc, #96]	@ (8009c38 <_Balloc+0x78>)
 8009bd8:	4818      	ldr	r0, [pc, #96]	@ (8009c3c <_Balloc+0x7c>)
 8009bda:	216b      	movs	r1, #107	@ 0x6b
 8009bdc:	f000 fda6 	bl	800a72c <__assert_func>
 8009be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009be4:	6006      	str	r6, [r0, #0]
 8009be6:	60c6      	str	r6, [r0, #12]
 8009be8:	69e6      	ldr	r6, [r4, #28]
 8009bea:	68f3      	ldr	r3, [r6, #12]
 8009bec:	b183      	cbz	r3, 8009c10 <_Balloc+0x50>
 8009bee:	69e3      	ldr	r3, [r4, #28]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bf6:	b9b8      	cbnz	r0, 8009c28 <_Balloc+0x68>
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	fa01 f605 	lsl.w	r6, r1, r5
 8009bfe:	1d72      	adds	r2, r6, #5
 8009c00:	0092      	lsls	r2, r2, #2
 8009c02:	4620      	mov	r0, r4
 8009c04:	f000 fdb0 	bl	800a768 <_calloc_r>
 8009c08:	b160      	cbz	r0, 8009c24 <_Balloc+0x64>
 8009c0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c0e:	e00e      	b.n	8009c2e <_Balloc+0x6e>
 8009c10:	2221      	movs	r2, #33	@ 0x21
 8009c12:	2104      	movs	r1, #4
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 fda7 	bl	800a768 <_calloc_r>
 8009c1a:	69e3      	ldr	r3, [r4, #28]
 8009c1c:	60f0      	str	r0, [r6, #12]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e4      	bne.n	8009bee <_Balloc+0x2e>
 8009c24:	2000      	movs	r0, #0
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	6802      	ldr	r2, [r0, #0]
 8009c2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c34:	e7f7      	b.n	8009c26 <_Balloc+0x66>
 8009c36:	bf00      	nop
 8009c38:	0800c975 	.word	0x0800c975
 8009c3c:	0800c9f5 	.word	0x0800c9f5

08009c40 <_Bfree>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	69c6      	ldr	r6, [r0, #28]
 8009c44:	4605      	mov	r5, r0
 8009c46:	460c      	mov	r4, r1
 8009c48:	b976      	cbnz	r6, 8009c68 <_Bfree+0x28>
 8009c4a:	2010      	movs	r0, #16
 8009c4c:	f7ff ff02 	bl	8009a54 <malloc>
 8009c50:	4602      	mov	r2, r0
 8009c52:	61e8      	str	r0, [r5, #28]
 8009c54:	b920      	cbnz	r0, 8009c60 <_Bfree+0x20>
 8009c56:	4b09      	ldr	r3, [pc, #36]	@ (8009c7c <_Bfree+0x3c>)
 8009c58:	4809      	ldr	r0, [pc, #36]	@ (8009c80 <_Bfree+0x40>)
 8009c5a:	218f      	movs	r1, #143	@ 0x8f
 8009c5c:	f000 fd66 	bl	800a72c <__assert_func>
 8009c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c64:	6006      	str	r6, [r0, #0]
 8009c66:	60c6      	str	r6, [r0, #12]
 8009c68:	b13c      	cbz	r4, 8009c7a <_Bfree+0x3a>
 8009c6a:	69eb      	ldr	r3, [r5, #28]
 8009c6c:	6862      	ldr	r2, [r4, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c74:	6021      	str	r1, [r4, #0]
 8009c76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c7a:	bd70      	pop	{r4, r5, r6, pc}
 8009c7c:	0800c975 	.word	0x0800c975
 8009c80:	0800c9f5 	.word	0x0800c9f5

08009c84 <__multadd>:
 8009c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c88:	690d      	ldr	r5, [r1, #16]
 8009c8a:	4607      	mov	r7, r0
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	461e      	mov	r6, r3
 8009c90:	f101 0c14 	add.w	ip, r1, #20
 8009c94:	2000      	movs	r0, #0
 8009c96:	f8dc 3000 	ldr.w	r3, [ip]
 8009c9a:	b299      	uxth	r1, r3
 8009c9c:	fb02 6101 	mla	r1, r2, r1, r6
 8009ca0:	0c1e      	lsrs	r6, r3, #16
 8009ca2:	0c0b      	lsrs	r3, r1, #16
 8009ca4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ca8:	b289      	uxth	r1, r1
 8009caa:	3001      	adds	r0, #1
 8009cac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009cb0:	4285      	cmp	r5, r0
 8009cb2:	f84c 1b04 	str.w	r1, [ip], #4
 8009cb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009cba:	dcec      	bgt.n	8009c96 <__multadd+0x12>
 8009cbc:	b30e      	cbz	r6, 8009d02 <__multadd+0x7e>
 8009cbe:	68a3      	ldr	r3, [r4, #8]
 8009cc0:	42ab      	cmp	r3, r5
 8009cc2:	dc19      	bgt.n	8009cf8 <__multadd+0x74>
 8009cc4:	6861      	ldr	r1, [r4, #4]
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	3101      	adds	r1, #1
 8009cca:	f7ff ff79 	bl	8009bc0 <_Balloc>
 8009cce:	4680      	mov	r8, r0
 8009cd0:	b928      	cbnz	r0, 8009cde <__multadd+0x5a>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d08 <__multadd+0x84>)
 8009cd6:	480d      	ldr	r0, [pc, #52]	@ (8009d0c <__multadd+0x88>)
 8009cd8:	21ba      	movs	r1, #186	@ 0xba
 8009cda:	f000 fd27 	bl	800a72c <__assert_func>
 8009cde:	6922      	ldr	r2, [r4, #16]
 8009ce0:	3202      	adds	r2, #2
 8009ce2:	f104 010c 	add.w	r1, r4, #12
 8009ce6:	0092      	lsls	r2, r2, #2
 8009ce8:	300c      	adds	r0, #12
 8009cea:	f000 fd11 	bl	800a710 <memcpy>
 8009cee:	4621      	mov	r1, r4
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f7ff ffa5 	bl	8009c40 <_Bfree>
 8009cf6:	4644      	mov	r4, r8
 8009cf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cfc:	3501      	adds	r5, #1
 8009cfe:	615e      	str	r6, [r3, #20]
 8009d00:	6125      	str	r5, [r4, #16]
 8009d02:	4620      	mov	r0, r4
 8009d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d08:	0800c9e4 	.word	0x0800c9e4
 8009d0c:	0800c9f5 	.word	0x0800c9f5

08009d10 <__hi0bits>:
 8009d10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009d14:	4603      	mov	r3, r0
 8009d16:	bf36      	itet	cc
 8009d18:	0403      	lslcc	r3, r0, #16
 8009d1a:	2000      	movcs	r0, #0
 8009d1c:	2010      	movcc	r0, #16
 8009d1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d22:	bf3c      	itt	cc
 8009d24:	021b      	lslcc	r3, r3, #8
 8009d26:	3008      	addcc	r0, #8
 8009d28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d2c:	bf3c      	itt	cc
 8009d2e:	011b      	lslcc	r3, r3, #4
 8009d30:	3004      	addcc	r0, #4
 8009d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d36:	bf3c      	itt	cc
 8009d38:	009b      	lslcc	r3, r3, #2
 8009d3a:	3002      	addcc	r0, #2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	db05      	blt.n	8009d4c <__hi0bits+0x3c>
 8009d40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d44:	f100 0001 	add.w	r0, r0, #1
 8009d48:	bf08      	it	eq
 8009d4a:	2020      	moveq	r0, #32
 8009d4c:	4770      	bx	lr

08009d4e <__lo0bits>:
 8009d4e:	6803      	ldr	r3, [r0, #0]
 8009d50:	4602      	mov	r2, r0
 8009d52:	f013 0007 	ands.w	r0, r3, #7
 8009d56:	d00b      	beq.n	8009d70 <__lo0bits+0x22>
 8009d58:	07d9      	lsls	r1, r3, #31
 8009d5a:	d421      	bmi.n	8009da0 <__lo0bits+0x52>
 8009d5c:	0798      	lsls	r0, r3, #30
 8009d5e:	bf49      	itett	mi
 8009d60:	085b      	lsrmi	r3, r3, #1
 8009d62:	089b      	lsrpl	r3, r3, #2
 8009d64:	2001      	movmi	r0, #1
 8009d66:	6013      	strmi	r3, [r2, #0]
 8009d68:	bf5c      	itt	pl
 8009d6a:	6013      	strpl	r3, [r2, #0]
 8009d6c:	2002      	movpl	r0, #2
 8009d6e:	4770      	bx	lr
 8009d70:	b299      	uxth	r1, r3
 8009d72:	b909      	cbnz	r1, 8009d78 <__lo0bits+0x2a>
 8009d74:	0c1b      	lsrs	r3, r3, #16
 8009d76:	2010      	movs	r0, #16
 8009d78:	b2d9      	uxtb	r1, r3
 8009d7a:	b909      	cbnz	r1, 8009d80 <__lo0bits+0x32>
 8009d7c:	3008      	adds	r0, #8
 8009d7e:	0a1b      	lsrs	r3, r3, #8
 8009d80:	0719      	lsls	r1, r3, #28
 8009d82:	bf04      	itt	eq
 8009d84:	091b      	lsreq	r3, r3, #4
 8009d86:	3004      	addeq	r0, #4
 8009d88:	0799      	lsls	r1, r3, #30
 8009d8a:	bf04      	itt	eq
 8009d8c:	089b      	lsreq	r3, r3, #2
 8009d8e:	3002      	addeq	r0, #2
 8009d90:	07d9      	lsls	r1, r3, #31
 8009d92:	d403      	bmi.n	8009d9c <__lo0bits+0x4e>
 8009d94:	085b      	lsrs	r3, r3, #1
 8009d96:	f100 0001 	add.w	r0, r0, #1
 8009d9a:	d003      	beq.n	8009da4 <__lo0bits+0x56>
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	4770      	bx	lr
 8009da0:	2000      	movs	r0, #0
 8009da2:	4770      	bx	lr
 8009da4:	2020      	movs	r0, #32
 8009da6:	4770      	bx	lr

08009da8 <__i2b>:
 8009da8:	b510      	push	{r4, lr}
 8009daa:	460c      	mov	r4, r1
 8009dac:	2101      	movs	r1, #1
 8009dae:	f7ff ff07 	bl	8009bc0 <_Balloc>
 8009db2:	4602      	mov	r2, r0
 8009db4:	b928      	cbnz	r0, 8009dc2 <__i2b+0x1a>
 8009db6:	4b05      	ldr	r3, [pc, #20]	@ (8009dcc <__i2b+0x24>)
 8009db8:	4805      	ldr	r0, [pc, #20]	@ (8009dd0 <__i2b+0x28>)
 8009dba:	f240 1145 	movw	r1, #325	@ 0x145
 8009dbe:	f000 fcb5 	bl	800a72c <__assert_func>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	6144      	str	r4, [r0, #20]
 8009dc6:	6103      	str	r3, [r0, #16]
 8009dc8:	bd10      	pop	{r4, pc}
 8009dca:	bf00      	nop
 8009dcc:	0800c9e4 	.word	0x0800c9e4
 8009dd0:	0800c9f5 	.word	0x0800c9f5

08009dd4 <__multiply>:
 8009dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd8:	4617      	mov	r7, r2
 8009dda:	690a      	ldr	r2, [r1, #16]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	bfa8      	it	ge
 8009de2:	463b      	movge	r3, r7
 8009de4:	4689      	mov	r9, r1
 8009de6:	bfa4      	itt	ge
 8009de8:	460f      	movge	r7, r1
 8009dea:	4699      	movge	r9, r3
 8009dec:	693d      	ldr	r5, [r7, #16]
 8009dee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	eb05 060a 	add.w	r6, r5, sl
 8009dfa:	42b3      	cmp	r3, r6
 8009dfc:	b085      	sub	sp, #20
 8009dfe:	bfb8      	it	lt
 8009e00:	3101      	addlt	r1, #1
 8009e02:	f7ff fedd 	bl	8009bc0 <_Balloc>
 8009e06:	b930      	cbnz	r0, 8009e16 <__multiply+0x42>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	4b41      	ldr	r3, [pc, #260]	@ (8009f10 <__multiply+0x13c>)
 8009e0c:	4841      	ldr	r0, [pc, #260]	@ (8009f14 <__multiply+0x140>)
 8009e0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009e12:	f000 fc8b 	bl	800a72c <__assert_func>
 8009e16:	f100 0414 	add.w	r4, r0, #20
 8009e1a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009e1e:	4623      	mov	r3, r4
 8009e20:	2200      	movs	r2, #0
 8009e22:	4573      	cmp	r3, lr
 8009e24:	d320      	bcc.n	8009e68 <__multiply+0x94>
 8009e26:	f107 0814 	add.w	r8, r7, #20
 8009e2a:	f109 0114 	add.w	r1, r9, #20
 8009e2e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009e32:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009e36:	9302      	str	r3, [sp, #8]
 8009e38:	1beb      	subs	r3, r5, r7
 8009e3a:	3b15      	subs	r3, #21
 8009e3c:	f023 0303 	bic.w	r3, r3, #3
 8009e40:	3304      	adds	r3, #4
 8009e42:	3715      	adds	r7, #21
 8009e44:	42bd      	cmp	r5, r7
 8009e46:	bf38      	it	cc
 8009e48:	2304      	movcc	r3, #4
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	9b02      	ldr	r3, [sp, #8]
 8009e4e:	9103      	str	r1, [sp, #12]
 8009e50:	428b      	cmp	r3, r1
 8009e52:	d80c      	bhi.n	8009e6e <__multiply+0x9a>
 8009e54:	2e00      	cmp	r6, #0
 8009e56:	dd03      	ble.n	8009e60 <__multiply+0x8c>
 8009e58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d055      	beq.n	8009f0c <__multiply+0x138>
 8009e60:	6106      	str	r6, [r0, #16]
 8009e62:	b005      	add	sp, #20
 8009e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e68:	f843 2b04 	str.w	r2, [r3], #4
 8009e6c:	e7d9      	b.n	8009e22 <__multiply+0x4e>
 8009e6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e72:	f1ba 0f00 	cmp.w	sl, #0
 8009e76:	d01f      	beq.n	8009eb8 <__multiply+0xe4>
 8009e78:	46c4      	mov	ip, r8
 8009e7a:	46a1      	mov	r9, r4
 8009e7c:	2700      	movs	r7, #0
 8009e7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e82:	f8d9 3000 	ldr.w	r3, [r9]
 8009e86:	fa1f fb82 	uxth.w	fp, r2
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e90:	443b      	add	r3, r7
 8009e92:	f8d9 7000 	ldr.w	r7, [r9]
 8009e96:	0c12      	lsrs	r2, r2, #16
 8009e98:	0c3f      	lsrs	r7, r7, #16
 8009e9a:	fb0a 7202 	mla	r2, sl, r2, r7
 8009e9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ea8:	4565      	cmp	r5, ip
 8009eaa:	f849 3b04 	str.w	r3, [r9], #4
 8009eae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009eb2:	d8e4      	bhi.n	8009e7e <__multiply+0xaa>
 8009eb4:	9b01      	ldr	r3, [sp, #4]
 8009eb6:	50e7      	str	r7, [r4, r3]
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009ebe:	3104      	adds	r1, #4
 8009ec0:	f1b9 0f00 	cmp.w	r9, #0
 8009ec4:	d020      	beq.n	8009f08 <__multiply+0x134>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	4647      	mov	r7, r8
 8009eca:	46a4      	mov	ip, r4
 8009ecc:	f04f 0a00 	mov.w	sl, #0
 8009ed0:	f8b7 b000 	ldrh.w	fp, [r7]
 8009ed4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009ed8:	fb09 220b 	mla	r2, r9, fp, r2
 8009edc:	4452      	add	r2, sl
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ee4:	f84c 3b04 	str.w	r3, [ip], #4
 8009ee8:	f857 3b04 	ldr.w	r3, [r7], #4
 8009eec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ef0:	f8bc 3000 	ldrh.w	r3, [ip]
 8009ef4:	fb09 330a 	mla	r3, r9, sl, r3
 8009ef8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009efc:	42bd      	cmp	r5, r7
 8009efe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f02:	d8e5      	bhi.n	8009ed0 <__multiply+0xfc>
 8009f04:	9a01      	ldr	r2, [sp, #4]
 8009f06:	50a3      	str	r3, [r4, r2]
 8009f08:	3404      	adds	r4, #4
 8009f0a:	e79f      	b.n	8009e4c <__multiply+0x78>
 8009f0c:	3e01      	subs	r6, #1
 8009f0e:	e7a1      	b.n	8009e54 <__multiply+0x80>
 8009f10:	0800c9e4 	.word	0x0800c9e4
 8009f14:	0800c9f5 	.word	0x0800c9f5

08009f18 <__pow5mult>:
 8009f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f1c:	4615      	mov	r5, r2
 8009f1e:	f012 0203 	ands.w	r2, r2, #3
 8009f22:	4607      	mov	r7, r0
 8009f24:	460e      	mov	r6, r1
 8009f26:	d007      	beq.n	8009f38 <__pow5mult+0x20>
 8009f28:	4c25      	ldr	r4, [pc, #148]	@ (8009fc0 <__pow5mult+0xa8>)
 8009f2a:	3a01      	subs	r2, #1
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f32:	f7ff fea7 	bl	8009c84 <__multadd>
 8009f36:	4606      	mov	r6, r0
 8009f38:	10ad      	asrs	r5, r5, #2
 8009f3a:	d03d      	beq.n	8009fb8 <__pow5mult+0xa0>
 8009f3c:	69fc      	ldr	r4, [r7, #28]
 8009f3e:	b97c      	cbnz	r4, 8009f60 <__pow5mult+0x48>
 8009f40:	2010      	movs	r0, #16
 8009f42:	f7ff fd87 	bl	8009a54 <malloc>
 8009f46:	4602      	mov	r2, r0
 8009f48:	61f8      	str	r0, [r7, #28]
 8009f4a:	b928      	cbnz	r0, 8009f58 <__pow5mult+0x40>
 8009f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8009fc4 <__pow5mult+0xac>)
 8009f4e:	481e      	ldr	r0, [pc, #120]	@ (8009fc8 <__pow5mult+0xb0>)
 8009f50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f54:	f000 fbea 	bl	800a72c <__assert_func>
 8009f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f5c:	6004      	str	r4, [r0, #0]
 8009f5e:	60c4      	str	r4, [r0, #12]
 8009f60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f68:	b94c      	cbnz	r4, 8009f7e <__pow5mult+0x66>
 8009f6a:	f240 2171 	movw	r1, #625	@ 0x271
 8009f6e:	4638      	mov	r0, r7
 8009f70:	f7ff ff1a 	bl	8009da8 <__i2b>
 8009f74:	2300      	movs	r3, #0
 8009f76:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	6003      	str	r3, [r0, #0]
 8009f7e:	f04f 0900 	mov.w	r9, #0
 8009f82:	07eb      	lsls	r3, r5, #31
 8009f84:	d50a      	bpl.n	8009f9c <__pow5mult+0x84>
 8009f86:	4631      	mov	r1, r6
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	f7ff ff22 	bl	8009dd4 <__multiply>
 8009f90:	4631      	mov	r1, r6
 8009f92:	4680      	mov	r8, r0
 8009f94:	4638      	mov	r0, r7
 8009f96:	f7ff fe53 	bl	8009c40 <_Bfree>
 8009f9a:	4646      	mov	r6, r8
 8009f9c:	106d      	asrs	r5, r5, #1
 8009f9e:	d00b      	beq.n	8009fb8 <__pow5mult+0xa0>
 8009fa0:	6820      	ldr	r0, [r4, #0]
 8009fa2:	b938      	cbnz	r0, 8009fb4 <__pow5mult+0x9c>
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f7ff ff13 	bl	8009dd4 <__multiply>
 8009fae:	6020      	str	r0, [r4, #0]
 8009fb0:	f8c0 9000 	str.w	r9, [r0]
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	e7e4      	b.n	8009f82 <__pow5mult+0x6a>
 8009fb8:	4630      	mov	r0, r6
 8009fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fbe:	bf00      	nop
 8009fc0:	0800caa8 	.word	0x0800caa8
 8009fc4:	0800c975 	.word	0x0800c975
 8009fc8:	0800c9f5 	.word	0x0800c9f5

08009fcc <__lshift>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	6849      	ldr	r1, [r1, #4]
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	4607      	mov	r7, r0
 8009fde:	4691      	mov	r9, r2
 8009fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fe4:	f108 0601 	add.w	r6, r8, #1
 8009fe8:	42b3      	cmp	r3, r6
 8009fea:	db0b      	blt.n	800a004 <__lshift+0x38>
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7ff fde7 	bl	8009bc0 <_Balloc>
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	b948      	cbnz	r0, 800a00a <__lshift+0x3e>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	4b28      	ldr	r3, [pc, #160]	@ (800a09c <__lshift+0xd0>)
 8009ffa:	4829      	ldr	r0, [pc, #164]	@ (800a0a0 <__lshift+0xd4>)
 8009ffc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a000:	f000 fb94 	bl	800a72c <__assert_func>
 800a004:	3101      	adds	r1, #1
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	e7ee      	b.n	8009fe8 <__lshift+0x1c>
 800a00a:	2300      	movs	r3, #0
 800a00c:	f100 0114 	add.w	r1, r0, #20
 800a010:	f100 0210 	add.w	r2, r0, #16
 800a014:	4618      	mov	r0, r3
 800a016:	4553      	cmp	r3, sl
 800a018:	db33      	blt.n	800a082 <__lshift+0xb6>
 800a01a:	6920      	ldr	r0, [r4, #16]
 800a01c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a020:	f104 0314 	add.w	r3, r4, #20
 800a024:	f019 091f 	ands.w	r9, r9, #31
 800a028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a02c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a030:	d02b      	beq.n	800a08a <__lshift+0xbe>
 800a032:	f1c9 0e20 	rsb	lr, r9, #32
 800a036:	468a      	mov	sl, r1
 800a038:	2200      	movs	r2, #0
 800a03a:	6818      	ldr	r0, [r3, #0]
 800a03c:	fa00 f009 	lsl.w	r0, r0, r9
 800a040:	4310      	orrs	r0, r2
 800a042:	f84a 0b04 	str.w	r0, [sl], #4
 800a046:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04a:	459c      	cmp	ip, r3
 800a04c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a050:	d8f3      	bhi.n	800a03a <__lshift+0x6e>
 800a052:	ebac 0304 	sub.w	r3, ip, r4
 800a056:	3b15      	subs	r3, #21
 800a058:	f023 0303 	bic.w	r3, r3, #3
 800a05c:	3304      	adds	r3, #4
 800a05e:	f104 0015 	add.w	r0, r4, #21
 800a062:	4560      	cmp	r0, ip
 800a064:	bf88      	it	hi
 800a066:	2304      	movhi	r3, #4
 800a068:	50ca      	str	r2, [r1, r3]
 800a06a:	b10a      	cbz	r2, 800a070 <__lshift+0xa4>
 800a06c:	f108 0602 	add.w	r6, r8, #2
 800a070:	3e01      	subs	r6, #1
 800a072:	4638      	mov	r0, r7
 800a074:	612e      	str	r6, [r5, #16]
 800a076:	4621      	mov	r1, r4
 800a078:	f7ff fde2 	bl	8009c40 <_Bfree>
 800a07c:	4628      	mov	r0, r5
 800a07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a082:	f842 0f04 	str.w	r0, [r2, #4]!
 800a086:	3301      	adds	r3, #1
 800a088:	e7c5      	b.n	800a016 <__lshift+0x4a>
 800a08a:	3904      	subs	r1, #4
 800a08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a090:	f841 2f04 	str.w	r2, [r1, #4]!
 800a094:	459c      	cmp	ip, r3
 800a096:	d8f9      	bhi.n	800a08c <__lshift+0xc0>
 800a098:	e7ea      	b.n	800a070 <__lshift+0xa4>
 800a09a:	bf00      	nop
 800a09c:	0800c9e4 	.word	0x0800c9e4
 800a0a0:	0800c9f5 	.word	0x0800c9f5

0800a0a4 <__mcmp>:
 800a0a4:	690a      	ldr	r2, [r1, #16]
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	6900      	ldr	r0, [r0, #16]
 800a0aa:	1a80      	subs	r0, r0, r2
 800a0ac:	b530      	push	{r4, r5, lr}
 800a0ae:	d10e      	bne.n	800a0ce <__mcmp+0x2a>
 800a0b0:	3314      	adds	r3, #20
 800a0b2:	3114      	adds	r1, #20
 800a0b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a0b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0c4:	4295      	cmp	r5, r2
 800a0c6:	d003      	beq.n	800a0d0 <__mcmp+0x2c>
 800a0c8:	d205      	bcs.n	800a0d6 <__mcmp+0x32>
 800a0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ce:	bd30      	pop	{r4, r5, pc}
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	d3f3      	bcc.n	800a0bc <__mcmp+0x18>
 800a0d4:	e7fb      	b.n	800a0ce <__mcmp+0x2a>
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	e7f9      	b.n	800a0ce <__mcmp+0x2a>
	...

0800a0dc <__mdiff>:
 800a0dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	4689      	mov	r9, r1
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	4648      	mov	r0, r9
 800a0e8:	4614      	mov	r4, r2
 800a0ea:	f7ff ffdb 	bl	800a0a4 <__mcmp>
 800a0ee:	1e05      	subs	r5, r0, #0
 800a0f0:	d112      	bne.n	800a118 <__mdiff+0x3c>
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f7ff fd63 	bl	8009bc0 <_Balloc>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	b928      	cbnz	r0, 800a10a <__mdiff+0x2e>
 800a0fe:	4b3f      	ldr	r3, [pc, #252]	@ (800a1fc <__mdiff+0x120>)
 800a100:	f240 2137 	movw	r1, #567	@ 0x237
 800a104:	483e      	ldr	r0, [pc, #248]	@ (800a200 <__mdiff+0x124>)
 800a106:	f000 fb11 	bl	800a72c <__assert_func>
 800a10a:	2301      	movs	r3, #1
 800a10c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a110:	4610      	mov	r0, r2
 800a112:	b003      	add	sp, #12
 800a114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a118:	bfbc      	itt	lt
 800a11a:	464b      	movlt	r3, r9
 800a11c:	46a1      	movlt	r9, r4
 800a11e:	4630      	mov	r0, r6
 800a120:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a124:	bfba      	itte	lt
 800a126:	461c      	movlt	r4, r3
 800a128:	2501      	movlt	r5, #1
 800a12a:	2500      	movge	r5, #0
 800a12c:	f7ff fd48 	bl	8009bc0 <_Balloc>
 800a130:	4602      	mov	r2, r0
 800a132:	b918      	cbnz	r0, 800a13c <__mdiff+0x60>
 800a134:	4b31      	ldr	r3, [pc, #196]	@ (800a1fc <__mdiff+0x120>)
 800a136:	f240 2145 	movw	r1, #581	@ 0x245
 800a13a:	e7e3      	b.n	800a104 <__mdiff+0x28>
 800a13c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a140:	6926      	ldr	r6, [r4, #16]
 800a142:	60c5      	str	r5, [r0, #12]
 800a144:	f109 0310 	add.w	r3, r9, #16
 800a148:	f109 0514 	add.w	r5, r9, #20
 800a14c:	f104 0e14 	add.w	lr, r4, #20
 800a150:	f100 0b14 	add.w	fp, r0, #20
 800a154:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a158:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	46d9      	mov	r9, fp
 800a160:	f04f 0c00 	mov.w	ip, #0
 800a164:	9b01      	ldr	r3, [sp, #4]
 800a166:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a16a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	fa1f f38a 	uxth.w	r3, sl
 800a174:	4619      	mov	r1, r3
 800a176:	b283      	uxth	r3, r0
 800a178:	1acb      	subs	r3, r1, r3
 800a17a:	0c00      	lsrs	r0, r0, #16
 800a17c:	4463      	add	r3, ip
 800a17e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a182:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a186:	b29b      	uxth	r3, r3
 800a188:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a18c:	4576      	cmp	r6, lr
 800a18e:	f849 3b04 	str.w	r3, [r9], #4
 800a192:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a196:	d8e5      	bhi.n	800a164 <__mdiff+0x88>
 800a198:	1b33      	subs	r3, r6, r4
 800a19a:	3b15      	subs	r3, #21
 800a19c:	f023 0303 	bic.w	r3, r3, #3
 800a1a0:	3415      	adds	r4, #21
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	42a6      	cmp	r6, r4
 800a1a6:	bf38      	it	cc
 800a1a8:	2304      	movcc	r3, #4
 800a1aa:	441d      	add	r5, r3
 800a1ac:	445b      	add	r3, fp
 800a1ae:	461e      	mov	r6, r3
 800a1b0:	462c      	mov	r4, r5
 800a1b2:	4544      	cmp	r4, r8
 800a1b4:	d30e      	bcc.n	800a1d4 <__mdiff+0xf8>
 800a1b6:	f108 0103 	add.w	r1, r8, #3
 800a1ba:	1b49      	subs	r1, r1, r5
 800a1bc:	f021 0103 	bic.w	r1, r1, #3
 800a1c0:	3d03      	subs	r5, #3
 800a1c2:	45a8      	cmp	r8, r5
 800a1c4:	bf38      	it	cc
 800a1c6:	2100      	movcc	r1, #0
 800a1c8:	440b      	add	r3, r1
 800a1ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1ce:	b191      	cbz	r1, 800a1f6 <__mdiff+0x11a>
 800a1d0:	6117      	str	r7, [r2, #16]
 800a1d2:	e79d      	b.n	800a110 <__mdiff+0x34>
 800a1d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a1d8:	46e6      	mov	lr, ip
 800a1da:	0c08      	lsrs	r0, r1, #16
 800a1dc:	fa1c fc81 	uxtah	ip, ip, r1
 800a1e0:	4471      	add	r1, lr
 800a1e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a1e6:	b289      	uxth	r1, r1
 800a1e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a1ec:	f846 1b04 	str.w	r1, [r6], #4
 800a1f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1f4:	e7dd      	b.n	800a1b2 <__mdiff+0xd6>
 800a1f6:	3f01      	subs	r7, #1
 800a1f8:	e7e7      	b.n	800a1ca <__mdiff+0xee>
 800a1fa:	bf00      	nop
 800a1fc:	0800c9e4 	.word	0x0800c9e4
 800a200:	0800c9f5 	.word	0x0800c9f5

0800a204 <__d2b>:
 800a204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a208:	460f      	mov	r7, r1
 800a20a:	2101      	movs	r1, #1
 800a20c:	ec59 8b10 	vmov	r8, r9, d0
 800a210:	4616      	mov	r6, r2
 800a212:	f7ff fcd5 	bl	8009bc0 <_Balloc>
 800a216:	4604      	mov	r4, r0
 800a218:	b930      	cbnz	r0, 800a228 <__d2b+0x24>
 800a21a:	4602      	mov	r2, r0
 800a21c:	4b23      	ldr	r3, [pc, #140]	@ (800a2ac <__d2b+0xa8>)
 800a21e:	4824      	ldr	r0, [pc, #144]	@ (800a2b0 <__d2b+0xac>)
 800a220:	f240 310f 	movw	r1, #783	@ 0x30f
 800a224:	f000 fa82 	bl	800a72c <__assert_func>
 800a228:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a22c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a230:	b10d      	cbz	r5, 800a236 <__d2b+0x32>
 800a232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	f1b8 0300 	subs.w	r3, r8, #0
 800a23c:	d023      	beq.n	800a286 <__d2b+0x82>
 800a23e:	4668      	mov	r0, sp
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	f7ff fd84 	bl	8009d4e <__lo0bits>
 800a246:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a24a:	b1d0      	cbz	r0, 800a282 <__d2b+0x7e>
 800a24c:	f1c0 0320 	rsb	r3, r0, #32
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	430b      	orrs	r3, r1
 800a256:	40c2      	lsrs	r2, r0
 800a258:	6163      	str	r3, [r4, #20]
 800a25a:	9201      	str	r2, [sp, #4]
 800a25c:	9b01      	ldr	r3, [sp, #4]
 800a25e:	61a3      	str	r3, [r4, #24]
 800a260:	2b00      	cmp	r3, #0
 800a262:	bf0c      	ite	eq
 800a264:	2201      	moveq	r2, #1
 800a266:	2202      	movne	r2, #2
 800a268:	6122      	str	r2, [r4, #16]
 800a26a:	b1a5      	cbz	r5, 800a296 <__d2b+0x92>
 800a26c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a270:	4405      	add	r5, r0
 800a272:	603d      	str	r5, [r7, #0]
 800a274:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a278:	6030      	str	r0, [r6, #0]
 800a27a:	4620      	mov	r0, r4
 800a27c:	b003      	add	sp, #12
 800a27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a282:	6161      	str	r1, [r4, #20]
 800a284:	e7ea      	b.n	800a25c <__d2b+0x58>
 800a286:	a801      	add	r0, sp, #4
 800a288:	f7ff fd61 	bl	8009d4e <__lo0bits>
 800a28c:	9b01      	ldr	r3, [sp, #4]
 800a28e:	6163      	str	r3, [r4, #20]
 800a290:	3020      	adds	r0, #32
 800a292:	2201      	movs	r2, #1
 800a294:	e7e8      	b.n	800a268 <__d2b+0x64>
 800a296:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a29a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a29e:	6038      	str	r0, [r7, #0]
 800a2a0:	6918      	ldr	r0, [r3, #16]
 800a2a2:	f7ff fd35 	bl	8009d10 <__hi0bits>
 800a2a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2aa:	e7e5      	b.n	800a278 <__d2b+0x74>
 800a2ac:	0800c9e4 	.word	0x0800c9e4
 800a2b0:	0800c9f5 	.word	0x0800c9f5

0800a2b4 <__ssputs_r>:
 800a2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b8:	688e      	ldr	r6, [r1, #8]
 800a2ba:	461f      	mov	r7, r3
 800a2bc:	42be      	cmp	r6, r7
 800a2be:	680b      	ldr	r3, [r1, #0]
 800a2c0:	4682      	mov	sl, r0
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	4690      	mov	r8, r2
 800a2c6:	d82d      	bhi.n	800a324 <__ssputs_r+0x70>
 800a2c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a2d0:	d026      	beq.n	800a320 <__ssputs_r+0x6c>
 800a2d2:	6965      	ldr	r5, [r4, #20]
 800a2d4:	6909      	ldr	r1, [r1, #16]
 800a2d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2da:	eba3 0901 	sub.w	r9, r3, r1
 800a2de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2e2:	1c7b      	adds	r3, r7, #1
 800a2e4:	444b      	add	r3, r9
 800a2e6:	106d      	asrs	r5, r5, #1
 800a2e8:	429d      	cmp	r5, r3
 800a2ea:	bf38      	it	cc
 800a2ec:	461d      	movcc	r5, r3
 800a2ee:	0553      	lsls	r3, r2, #21
 800a2f0:	d527      	bpl.n	800a342 <__ssputs_r+0x8e>
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	f7ff fbd8 	bl	8009aa8 <_malloc_r>
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	b360      	cbz	r0, 800a356 <__ssputs_r+0xa2>
 800a2fc:	6921      	ldr	r1, [r4, #16]
 800a2fe:	464a      	mov	r2, r9
 800a300:	f000 fa06 	bl	800a710 <memcpy>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a30a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	6126      	str	r6, [r4, #16]
 800a312:	6165      	str	r5, [r4, #20]
 800a314:	444e      	add	r6, r9
 800a316:	eba5 0509 	sub.w	r5, r5, r9
 800a31a:	6026      	str	r6, [r4, #0]
 800a31c:	60a5      	str	r5, [r4, #8]
 800a31e:	463e      	mov	r6, r7
 800a320:	42be      	cmp	r6, r7
 800a322:	d900      	bls.n	800a326 <__ssputs_r+0x72>
 800a324:	463e      	mov	r6, r7
 800a326:	6820      	ldr	r0, [r4, #0]
 800a328:	4632      	mov	r2, r6
 800a32a:	4641      	mov	r1, r8
 800a32c:	f000 f9c6 	bl	800a6bc <memmove>
 800a330:	68a3      	ldr	r3, [r4, #8]
 800a332:	1b9b      	subs	r3, r3, r6
 800a334:	60a3      	str	r3, [r4, #8]
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	4433      	add	r3, r6
 800a33a:	6023      	str	r3, [r4, #0]
 800a33c:	2000      	movs	r0, #0
 800a33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a342:	462a      	mov	r2, r5
 800a344:	f000 fa36 	bl	800a7b4 <_realloc_r>
 800a348:	4606      	mov	r6, r0
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d1e0      	bne.n	800a310 <__ssputs_r+0x5c>
 800a34e:	6921      	ldr	r1, [r4, #16]
 800a350:	4650      	mov	r0, sl
 800a352:	f7ff fb35 	bl	80099c0 <_free_r>
 800a356:	230c      	movs	r3, #12
 800a358:	f8ca 3000 	str.w	r3, [sl]
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a362:	81a3      	strh	r3, [r4, #12]
 800a364:	f04f 30ff 	mov.w	r0, #4294967295
 800a368:	e7e9      	b.n	800a33e <__ssputs_r+0x8a>
	...

0800a36c <_svfiprintf_r>:
 800a36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a370:	4698      	mov	r8, r3
 800a372:	898b      	ldrh	r3, [r1, #12]
 800a374:	061b      	lsls	r3, r3, #24
 800a376:	b09d      	sub	sp, #116	@ 0x74
 800a378:	4607      	mov	r7, r0
 800a37a:	460d      	mov	r5, r1
 800a37c:	4614      	mov	r4, r2
 800a37e:	d510      	bpl.n	800a3a2 <_svfiprintf_r+0x36>
 800a380:	690b      	ldr	r3, [r1, #16]
 800a382:	b973      	cbnz	r3, 800a3a2 <_svfiprintf_r+0x36>
 800a384:	2140      	movs	r1, #64	@ 0x40
 800a386:	f7ff fb8f 	bl	8009aa8 <_malloc_r>
 800a38a:	6028      	str	r0, [r5, #0]
 800a38c:	6128      	str	r0, [r5, #16]
 800a38e:	b930      	cbnz	r0, 800a39e <_svfiprintf_r+0x32>
 800a390:	230c      	movs	r3, #12
 800a392:	603b      	str	r3, [r7, #0]
 800a394:	f04f 30ff 	mov.w	r0, #4294967295
 800a398:	b01d      	add	sp, #116	@ 0x74
 800a39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39e:	2340      	movs	r3, #64	@ 0x40
 800a3a0:	616b      	str	r3, [r5, #20]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3a6:	2320      	movs	r3, #32
 800a3a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3b0:	2330      	movs	r3, #48	@ 0x30
 800a3b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a550 <_svfiprintf_r+0x1e4>
 800a3b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3ba:	f04f 0901 	mov.w	r9, #1
 800a3be:	4623      	mov	r3, r4
 800a3c0:	469a      	mov	sl, r3
 800a3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c6:	b10a      	cbz	r2, 800a3cc <_svfiprintf_r+0x60>
 800a3c8:	2a25      	cmp	r2, #37	@ 0x25
 800a3ca:	d1f9      	bne.n	800a3c0 <_svfiprintf_r+0x54>
 800a3cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a3d0:	d00b      	beq.n	800a3ea <_svfiprintf_r+0x7e>
 800a3d2:	465b      	mov	r3, fp
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7ff ff6b 	bl	800a2b4 <__ssputs_r>
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f000 80a7 	beq.w	800a532 <_svfiprintf_r+0x1c6>
 800a3e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3e6:	445a      	add	r2, fp
 800a3e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 809f 	beq.w	800a532 <_svfiprintf_r+0x1c6>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3fe:	f10a 0a01 	add.w	sl, sl, #1
 800a402:	9304      	str	r3, [sp, #16]
 800a404:	9307      	str	r3, [sp, #28]
 800a406:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a40a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a40c:	4654      	mov	r4, sl
 800a40e:	2205      	movs	r2, #5
 800a410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a414:	484e      	ldr	r0, [pc, #312]	@ (800a550 <_svfiprintf_r+0x1e4>)
 800a416:	f7f5 fee3 	bl	80001e0 <memchr>
 800a41a:	9a04      	ldr	r2, [sp, #16]
 800a41c:	b9d8      	cbnz	r0, 800a456 <_svfiprintf_r+0xea>
 800a41e:	06d0      	lsls	r0, r2, #27
 800a420:	bf44      	itt	mi
 800a422:	2320      	movmi	r3, #32
 800a424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a428:	0711      	lsls	r1, r2, #28
 800a42a:	bf44      	itt	mi
 800a42c:	232b      	movmi	r3, #43	@ 0x2b
 800a42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a432:	f89a 3000 	ldrb.w	r3, [sl]
 800a436:	2b2a      	cmp	r3, #42	@ 0x2a
 800a438:	d015      	beq.n	800a466 <_svfiprintf_r+0xfa>
 800a43a:	9a07      	ldr	r2, [sp, #28]
 800a43c:	4654      	mov	r4, sl
 800a43e:	2000      	movs	r0, #0
 800a440:	f04f 0c0a 	mov.w	ip, #10
 800a444:	4621      	mov	r1, r4
 800a446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a44a:	3b30      	subs	r3, #48	@ 0x30
 800a44c:	2b09      	cmp	r3, #9
 800a44e:	d94b      	bls.n	800a4e8 <_svfiprintf_r+0x17c>
 800a450:	b1b0      	cbz	r0, 800a480 <_svfiprintf_r+0x114>
 800a452:	9207      	str	r2, [sp, #28]
 800a454:	e014      	b.n	800a480 <_svfiprintf_r+0x114>
 800a456:	eba0 0308 	sub.w	r3, r0, r8
 800a45a:	fa09 f303 	lsl.w	r3, r9, r3
 800a45e:	4313      	orrs	r3, r2
 800a460:	9304      	str	r3, [sp, #16]
 800a462:	46a2      	mov	sl, r4
 800a464:	e7d2      	b.n	800a40c <_svfiprintf_r+0xa0>
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	1d19      	adds	r1, r3, #4
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	9103      	str	r1, [sp, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	bfbb      	ittet	lt
 800a472:	425b      	neglt	r3, r3
 800a474:	f042 0202 	orrlt.w	r2, r2, #2
 800a478:	9307      	strge	r3, [sp, #28]
 800a47a:	9307      	strlt	r3, [sp, #28]
 800a47c:	bfb8      	it	lt
 800a47e:	9204      	strlt	r2, [sp, #16]
 800a480:	7823      	ldrb	r3, [r4, #0]
 800a482:	2b2e      	cmp	r3, #46	@ 0x2e
 800a484:	d10a      	bne.n	800a49c <_svfiprintf_r+0x130>
 800a486:	7863      	ldrb	r3, [r4, #1]
 800a488:	2b2a      	cmp	r3, #42	@ 0x2a
 800a48a:	d132      	bne.n	800a4f2 <_svfiprintf_r+0x186>
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	1d1a      	adds	r2, r3, #4
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	9203      	str	r2, [sp, #12]
 800a494:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a498:	3402      	adds	r4, #2
 800a49a:	9305      	str	r3, [sp, #20]
 800a49c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a560 <_svfiprintf_r+0x1f4>
 800a4a0:	7821      	ldrb	r1, [r4, #0]
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	4650      	mov	r0, sl
 800a4a6:	f7f5 fe9b 	bl	80001e0 <memchr>
 800a4aa:	b138      	cbz	r0, 800a4bc <_svfiprintf_r+0x150>
 800a4ac:	9b04      	ldr	r3, [sp, #16]
 800a4ae:	eba0 000a 	sub.w	r0, r0, sl
 800a4b2:	2240      	movs	r2, #64	@ 0x40
 800a4b4:	4082      	lsls	r2, r0
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	3401      	adds	r4, #1
 800a4ba:	9304      	str	r3, [sp, #16]
 800a4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c0:	4824      	ldr	r0, [pc, #144]	@ (800a554 <_svfiprintf_r+0x1e8>)
 800a4c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4c6:	2206      	movs	r2, #6
 800a4c8:	f7f5 fe8a 	bl	80001e0 <memchr>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d036      	beq.n	800a53e <_svfiprintf_r+0x1d2>
 800a4d0:	4b21      	ldr	r3, [pc, #132]	@ (800a558 <_svfiprintf_r+0x1ec>)
 800a4d2:	bb1b      	cbnz	r3, 800a51c <_svfiprintf_r+0x1b0>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	3307      	adds	r3, #7
 800a4d8:	f023 0307 	bic.w	r3, r3, #7
 800a4dc:	3308      	adds	r3, #8
 800a4de:	9303      	str	r3, [sp, #12]
 800a4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4e2:	4433      	add	r3, r6
 800a4e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e6:	e76a      	b.n	800a3be <_svfiprintf_r+0x52>
 800a4e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	2001      	movs	r0, #1
 800a4f0:	e7a8      	b.n	800a444 <_svfiprintf_r+0xd8>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	3401      	adds	r4, #1
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f04f 0c0a 	mov.w	ip, #10
 800a4fe:	4620      	mov	r0, r4
 800a500:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a504:	3a30      	subs	r2, #48	@ 0x30
 800a506:	2a09      	cmp	r2, #9
 800a508:	d903      	bls.n	800a512 <_svfiprintf_r+0x1a6>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d0c6      	beq.n	800a49c <_svfiprintf_r+0x130>
 800a50e:	9105      	str	r1, [sp, #20]
 800a510:	e7c4      	b.n	800a49c <_svfiprintf_r+0x130>
 800a512:	fb0c 2101 	mla	r1, ip, r1, r2
 800a516:	4604      	mov	r4, r0
 800a518:	2301      	movs	r3, #1
 800a51a:	e7f0      	b.n	800a4fe <_svfiprintf_r+0x192>
 800a51c:	ab03      	add	r3, sp, #12
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	462a      	mov	r2, r5
 800a522:	4b0e      	ldr	r3, [pc, #56]	@ (800a55c <_svfiprintf_r+0x1f0>)
 800a524:	a904      	add	r1, sp, #16
 800a526:	4638      	mov	r0, r7
 800a528:	f7fd fe78 	bl	800821c <_printf_float>
 800a52c:	1c42      	adds	r2, r0, #1
 800a52e:	4606      	mov	r6, r0
 800a530:	d1d6      	bne.n	800a4e0 <_svfiprintf_r+0x174>
 800a532:	89ab      	ldrh	r3, [r5, #12]
 800a534:	065b      	lsls	r3, r3, #25
 800a536:	f53f af2d 	bmi.w	800a394 <_svfiprintf_r+0x28>
 800a53a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a53c:	e72c      	b.n	800a398 <_svfiprintf_r+0x2c>
 800a53e:	ab03      	add	r3, sp, #12
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	462a      	mov	r2, r5
 800a544:	4b05      	ldr	r3, [pc, #20]	@ (800a55c <_svfiprintf_r+0x1f0>)
 800a546:	a904      	add	r1, sp, #16
 800a548:	4638      	mov	r0, r7
 800a54a:	f7fe f8ff 	bl	800874c <_printf_i>
 800a54e:	e7ed      	b.n	800a52c <_svfiprintf_r+0x1c0>
 800a550:	0800ca4e 	.word	0x0800ca4e
 800a554:	0800ca58 	.word	0x0800ca58
 800a558:	0800821d 	.word	0x0800821d
 800a55c:	0800a2b5 	.word	0x0800a2b5
 800a560:	0800ca54 	.word	0x0800ca54

0800a564 <__sflush_r>:
 800a564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56c:	0716      	lsls	r6, r2, #28
 800a56e:	4605      	mov	r5, r0
 800a570:	460c      	mov	r4, r1
 800a572:	d454      	bmi.n	800a61e <__sflush_r+0xba>
 800a574:	684b      	ldr	r3, [r1, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	dc02      	bgt.n	800a580 <__sflush_r+0x1c>
 800a57a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	dd48      	ble.n	800a612 <__sflush_r+0xae>
 800a580:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a582:	2e00      	cmp	r6, #0
 800a584:	d045      	beq.n	800a612 <__sflush_r+0xae>
 800a586:	2300      	movs	r3, #0
 800a588:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a58c:	682f      	ldr	r7, [r5, #0]
 800a58e:	6a21      	ldr	r1, [r4, #32]
 800a590:	602b      	str	r3, [r5, #0]
 800a592:	d030      	beq.n	800a5f6 <__sflush_r+0x92>
 800a594:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	0759      	lsls	r1, r3, #29
 800a59a:	d505      	bpl.n	800a5a8 <__sflush_r+0x44>
 800a59c:	6863      	ldr	r3, [r4, #4]
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5a2:	b10b      	cbz	r3, 800a5a8 <__sflush_r+0x44>
 800a5a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5a6:	1ad2      	subs	r2, r2, r3
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5ac:	6a21      	ldr	r1, [r4, #32]
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	47b0      	blx	r6
 800a5b2:	1c43      	adds	r3, r0, #1
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	d106      	bne.n	800a5c6 <__sflush_r+0x62>
 800a5b8:	6829      	ldr	r1, [r5, #0]
 800a5ba:	291d      	cmp	r1, #29
 800a5bc:	d82b      	bhi.n	800a616 <__sflush_r+0xb2>
 800a5be:	4a2a      	ldr	r2, [pc, #168]	@ (800a668 <__sflush_r+0x104>)
 800a5c0:	40ca      	lsrs	r2, r1
 800a5c2:	07d6      	lsls	r6, r2, #31
 800a5c4:	d527      	bpl.n	800a616 <__sflush_r+0xb2>
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	6062      	str	r2, [r4, #4]
 800a5ca:	04d9      	lsls	r1, r3, #19
 800a5cc:	6922      	ldr	r2, [r4, #16]
 800a5ce:	6022      	str	r2, [r4, #0]
 800a5d0:	d504      	bpl.n	800a5dc <__sflush_r+0x78>
 800a5d2:	1c42      	adds	r2, r0, #1
 800a5d4:	d101      	bne.n	800a5da <__sflush_r+0x76>
 800a5d6:	682b      	ldr	r3, [r5, #0]
 800a5d8:	b903      	cbnz	r3, 800a5dc <__sflush_r+0x78>
 800a5da:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5de:	602f      	str	r7, [r5, #0]
 800a5e0:	b1b9      	cbz	r1, 800a612 <__sflush_r+0xae>
 800a5e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5e6:	4299      	cmp	r1, r3
 800a5e8:	d002      	beq.n	800a5f0 <__sflush_r+0x8c>
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f7ff f9e8 	bl	80099c0 <_free_r>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5f4:	e00d      	b.n	800a612 <__sflush_r+0xae>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	47b0      	blx	r6
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	1c50      	adds	r0, r2, #1
 800a600:	d1c9      	bne.n	800a596 <__sflush_r+0x32>
 800a602:	682b      	ldr	r3, [r5, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0c6      	beq.n	800a596 <__sflush_r+0x32>
 800a608:	2b1d      	cmp	r3, #29
 800a60a:	d001      	beq.n	800a610 <__sflush_r+0xac>
 800a60c:	2b16      	cmp	r3, #22
 800a60e:	d11e      	bne.n	800a64e <__sflush_r+0xea>
 800a610:	602f      	str	r7, [r5, #0]
 800a612:	2000      	movs	r0, #0
 800a614:	e022      	b.n	800a65c <__sflush_r+0xf8>
 800a616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a61a:	b21b      	sxth	r3, r3
 800a61c:	e01b      	b.n	800a656 <__sflush_r+0xf2>
 800a61e:	690f      	ldr	r7, [r1, #16]
 800a620:	2f00      	cmp	r7, #0
 800a622:	d0f6      	beq.n	800a612 <__sflush_r+0xae>
 800a624:	0793      	lsls	r3, r2, #30
 800a626:	680e      	ldr	r6, [r1, #0]
 800a628:	bf08      	it	eq
 800a62a:	694b      	ldreq	r3, [r1, #20]
 800a62c:	600f      	str	r7, [r1, #0]
 800a62e:	bf18      	it	ne
 800a630:	2300      	movne	r3, #0
 800a632:	eba6 0807 	sub.w	r8, r6, r7
 800a636:	608b      	str	r3, [r1, #8]
 800a638:	f1b8 0f00 	cmp.w	r8, #0
 800a63c:	dde9      	ble.n	800a612 <__sflush_r+0xae>
 800a63e:	6a21      	ldr	r1, [r4, #32]
 800a640:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a642:	4643      	mov	r3, r8
 800a644:	463a      	mov	r2, r7
 800a646:	4628      	mov	r0, r5
 800a648:	47b0      	blx	r6
 800a64a:	2800      	cmp	r0, #0
 800a64c:	dc08      	bgt.n	800a660 <__sflush_r+0xfc>
 800a64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	f04f 30ff 	mov.w	r0, #4294967295
 800a65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a660:	4407      	add	r7, r0
 800a662:	eba8 0800 	sub.w	r8, r8, r0
 800a666:	e7e7      	b.n	800a638 <__sflush_r+0xd4>
 800a668:	20400001 	.word	0x20400001

0800a66c <_fflush_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	690b      	ldr	r3, [r1, #16]
 800a670:	4605      	mov	r5, r0
 800a672:	460c      	mov	r4, r1
 800a674:	b913      	cbnz	r3, 800a67c <_fflush_r+0x10>
 800a676:	2500      	movs	r5, #0
 800a678:	4628      	mov	r0, r5
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	b118      	cbz	r0, 800a686 <_fflush_r+0x1a>
 800a67e:	6a03      	ldr	r3, [r0, #32]
 800a680:	b90b      	cbnz	r3, 800a686 <_fflush_r+0x1a>
 800a682:	f7fe fa0d 	bl	8008aa0 <__sinit>
 800a686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d0f3      	beq.n	800a676 <_fflush_r+0xa>
 800a68e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a690:	07d0      	lsls	r0, r2, #31
 800a692:	d404      	bmi.n	800a69e <_fflush_r+0x32>
 800a694:	0599      	lsls	r1, r3, #22
 800a696:	d402      	bmi.n	800a69e <_fflush_r+0x32>
 800a698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a69a:	f7fe fb34 	bl	8008d06 <__retarget_lock_acquire_recursive>
 800a69e:	4628      	mov	r0, r5
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	f7ff ff5f 	bl	800a564 <__sflush_r>
 800a6a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6a8:	07da      	lsls	r2, r3, #31
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	d4e4      	bmi.n	800a678 <_fflush_r+0xc>
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	059b      	lsls	r3, r3, #22
 800a6b2:	d4e1      	bmi.n	800a678 <_fflush_r+0xc>
 800a6b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6b6:	f7fe fb27 	bl	8008d08 <__retarget_lock_release_recursive>
 800a6ba:	e7dd      	b.n	800a678 <_fflush_r+0xc>

0800a6bc <memmove>:
 800a6bc:	4288      	cmp	r0, r1
 800a6be:	b510      	push	{r4, lr}
 800a6c0:	eb01 0402 	add.w	r4, r1, r2
 800a6c4:	d902      	bls.n	800a6cc <memmove+0x10>
 800a6c6:	4284      	cmp	r4, r0
 800a6c8:	4623      	mov	r3, r4
 800a6ca:	d807      	bhi.n	800a6dc <memmove+0x20>
 800a6cc:	1e43      	subs	r3, r0, #1
 800a6ce:	42a1      	cmp	r1, r4
 800a6d0:	d008      	beq.n	800a6e4 <memmove+0x28>
 800a6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6da:	e7f8      	b.n	800a6ce <memmove+0x12>
 800a6dc:	4402      	add	r2, r0
 800a6de:	4601      	mov	r1, r0
 800a6e0:	428a      	cmp	r2, r1
 800a6e2:	d100      	bne.n	800a6e6 <memmove+0x2a>
 800a6e4:	bd10      	pop	{r4, pc}
 800a6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6ee:	e7f7      	b.n	800a6e0 <memmove+0x24>

0800a6f0 <_sbrk_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d06      	ldr	r5, [pc, #24]	@ (800a70c <_sbrk_r+0x1c>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	602b      	str	r3, [r5, #0]
 800a6fc:	f7f9 f874 	bl	80037e8 <_sbrk>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_sbrk_r+0x1a>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_sbrk_r+0x1a>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	20001608 	.word	0x20001608

0800a710 <memcpy>:
 800a710:	440a      	add	r2, r1
 800a712:	4291      	cmp	r1, r2
 800a714:	f100 33ff 	add.w	r3, r0, #4294967295
 800a718:	d100      	bne.n	800a71c <memcpy+0xc>
 800a71a:	4770      	bx	lr
 800a71c:	b510      	push	{r4, lr}
 800a71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a722:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a726:	4291      	cmp	r1, r2
 800a728:	d1f9      	bne.n	800a71e <memcpy+0xe>
 800a72a:	bd10      	pop	{r4, pc}

0800a72c <__assert_func>:
 800a72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a72e:	4614      	mov	r4, r2
 800a730:	461a      	mov	r2, r3
 800a732:	4b09      	ldr	r3, [pc, #36]	@ (800a758 <__assert_func+0x2c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4605      	mov	r5, r0
 800a738:	68d8      	ldr	r0, [r3, #12]
 800a73a:	b14c      	cbz	r4, 800a750 <__assert_func+0x24>
 800a73c:	4b07      	ldr	r3, [pc, #28]	@ (800a75c <__assert_func+0x30>)
 800a73e:	9100      	str	r1, [sp, #0]
 800a740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a744:	4906      	ldr	r1, [pc, #24]	@ (800a760 <__assert_func+0x34>)
 800a746:	462b      	mov	r3, r5
 800a748:	f000 f870 	bl	800a82c <fiprintf>
 800a74c:	f000 f880 	bl	800a850 <abort>
 800a750:	4b04      	ldr	r3, [pc, #16]	@ (800a764 <__assert_func+0x38>)
 800a752:	461c      	mov	r4, r3
 800a754:	e7f3      	b.n	800a73e <__assert_func+0x12>
 800a756:	bf00      	nop
 800a758:	2000001c 	.word	0x2000001c
 800a75c:	0800ca69 	.word	0x0800ca69
 800a760:	0800ca76 	.word	0x0800ca76
 800a764:	0800caa4 	.word	0x0800caa4

0800a768 <_calloc_r>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	fba1 5402 	umull	r5, r4, r1, r2
 800a76e:	b934      	cbnz	r4, 800a77e <_calloc_r+0x16>
 800a770:	4629      	mov	r1, r5
 800a772:	f7ff f999 	bl	8009aa8 <_malloc_r>
 800a776:	4606      	mov	r6, r0
 800a778:	b928      	cbnz	r0, 800a786 <_calloc_r+0x1e>
 800a77a:	4630      	mov	r0, r6
 800a77c:	bd70      	pop	{r4, r5, r6, pc}
 800a77e:	220c      	movs	r2, #12
 800a780:	6002      	str	r2, [r0, #0]
 800a782:	2600      	movs	r6, #0
 800a784:	e7f9      	b.n	800a77a <_calloc_r+0x12>
 800a786:	462a      	mov	r2, r5
 800a788:	4621      	mov	r1, r4
 800a78a:	f7fe fa3f 	bl	8008c0c <memset>
 800a78e:	e7f4      	b.n	800a77a <_calloc_r+0x12>

0800a790 <__ascii_mbtowc>:
 800a790:	b082      	sub	sp, #8
 800a792:	b901      	cbnz	r1, 800a796 <__ascii_mbtowc+0x6>
 800a794:	a901      	add	r1, sp, #4
 800a796:	b142      	cbz	r2, 800a7aa <__ascii_mbtowc+0x1a>
 800a798:	b14b      	cbz	r3, 800a7ae <__ascii_mbtowc+0x1e>
 800a79a:	7813      	ldrb	r3, [r2, #0]
 800a79c:	600b      	str	r3, [r1, #0]
 800a79e:	7812      	ldrb	r2, [r2, #0]
 800a7a0:	1e10      	subs	r0, r2, #0
 800a7a2:	bf18      	it	ne
 800a7a4:	2001      	movne	r0, #1
 800a7a6:	b002      	add	sp, #8
 800a7a8:	4770      	bx	lr
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	e7fb      	b.n	800a7a6 <__ascii_mbtowc+0x16>
 800a7ae:	f06f 0001 	mvn.w	r0, #1
 800a7b2:	e7f8      	b.n	800a7a6 <__ascii_mbtowc+0x16>

0800a7b4 <_realloc_r>:
 800a7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	4614      	mov	r4, r2
 800a7bc:	460d      	mov	r5, r1
 800a7be:	b921      	cbnz	r1, 800a7ca <_realloc_r+0x16>
 800a7c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	f7ff b96f 	b.w	8009aa8 <_malloc_r>
 800a7ca:	b92a      	cbnz	r2, 800a7d8 <_realloc_r+0x24>
 800a7cc:	f7ff f8f8 	bl	80099c0 <_free_r>
 800a7d0:	4625      	mov	r5, r4
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d8:	f000 f841 	bl	800a85e <_malloc_usable_size_r>
 800a7dc:	4284      	cmp	r4, r0
 800a7de:	4606      	mov	r6, r0
 800a7e0:	d802      	bhi.n	800a7e8 <_realloc_r+0x34>
 800a7e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7e6:	d8f4      	bhi.n	800a7d2 <_realloc_r+0x1e>
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	4638      	mov	r0, r7
 800a7ec:	f7ff f95c 	bl	8009aa8 <_malloc_r>
 800a7f0:	4680      	mov	r8, r0
 800a7f2:	b908      	cbnz	r0, 800a7f8 <_realloc_r+0x44>
 800a7f4:	4645      	mov	r5, r8
 800a7f6:	e7ec      	b.n	800a7d2 <_realloc_r+0x1e>
 800a7f8:	42b4      	cmp	r4, r6
 800a7fa:	4622      	mov	r2, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	bf28      	it	cs
 800a800:	4632      	movcs	r2, r6
 800a802:	f7ff ff85 	bl	800a710 <memcpy>
 800a806:	4629      	mov	r1, r5
 800a808:	4638      	mov	r0, r7
 800a80a:	f7ff f8d9 	bl	80099c0 <_free_r>
 800a80e:	e7f1      	b.n	800a7f4 <_realloc_r+0x40>

0800a810 <__ascii_wctomb>:
 800a810:	4603      	mov	r3, r0
 800a812:	4608      	mov	r0, r1
 800a814:	b141      	cbz	r1, 800a828 <__ascii_wctomb+0x18>
 800a816:	2aff      	cmp	r2, #255	@ 0xff
 800a818:	d904      	bls.n	800a824 <__ascii_wctomb+0x14>
 800a81a:	228a      	movs	r2, #138	@ 0x8a
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	f04f 30ff 	mov.w	r0, #4294967295
 800a822:	4770      	bx	lr
 800a824:	700a      	strb	r2, [r1, #0]
 800a826:	2001      	movs	r0, #1
 800a828:	4770      	bx	lr
	...

0800a82c <fiprintf>:
 800a82c:	b40e      	push	{r1, r2, r3}
 800a82e:	b503      	push	{r0, r1, lr}
 800a830:	4601      	mov	r1, r0
 800a832:	ab03      	add	r3, sp, #12
 800a834:	4805      	ldr	r0, [pc, #20]	@ (800a84c <fiprintf+0x20>)
 800a836:	f853 2b04 	ldr.w	r2, [r3], #4
 800a83a:	6800      	ldr	r0, [r0, #0]
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	f000 f83f 	bl	800a8c0 <_vfiprintf_r>
 800a842:	b002      	add	sp, #8
 800a844:	f85d eb04 	ldr.w	lr, [sp], #4
 800a848:	b003      	add	sp, #12
 800a84a:	4770      	bx	lr
 800a84c:	2000001c 	.word	0x2000001c

0800a850 <abort>:
 800a850:	b508      	push	{r3, lr}
 800a852:	2006      	movs	r0, #6
 800a854:	f000 fa08 	bl	800ac68 <raise>
 800a858:	2001      	movs	r0, #1
 800a85a:	f7f8 ff4d 	bl	80036f8 <_exit>

0800a85e <_malloc_usable_size_r>:
 800a85e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a862:	1f18      	subs	r0, r3, #4
 800a864:	2b00      	cmp	r3, #0
 800a866:	bfbc      	itt	lt
 800a868:	580b      	ldrlt	r3, [r1, r0]
 800a86a:	18c0      	addlt	r0, r0, r3
 800a86c:	4770      	bx	lr

0800a86e <__sfputc_r>:
 800a86e:	6893      	ldr	r3, [r2, #8]
 800a870:	3b01      	subs	r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	b410      	push	{r4}
 800a876:	6093      	str	r3, [r2, #8]
 800a878:	da08      	bge.n	800a88c <__sfputc_r+0x1e>
 800a87a:	6994      	ldr	r4, [r2, #24]
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	db01      	blt.n	800a884 <__sfputc_r+0x16>
 800a880:	290a      	cmp	r1, #10
 800a882:	d103      	bne.n	800a88c <__sfputc_r+0x1e>
 800a884:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a888:	f000 b932 	b.w	800aaf0 <__swbuf_r>
 800a88c:	6813      	ldr	r3, [r2, #0]
 800a88e:	1c58      	adds	r0, r3, #1
 800a890:	6010      	str	r0, [r2, #0]
 800a892:	7019      	strb	r1, [r3, #0]
 800a894:	4608      	mov	r0, r1
 800a896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <__sfputs_r>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	4606      	mov	r6, r0
 800a8a0:	460f      	mov	r7, r1
 800a8a2:	4614      	mov	r4, r2
 800a8a4:	18d5      	adds	r5, r2, r3
 800a8a6:	42ac      	cmp	r4, r5
 800a8a8:	d101      	bne.n	800a8ae <__sfputs_r+0x12>
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e007      	b.n	800a8be <__sfputs_r+0x22>
 800a8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b2:	463a      	mov	r2, r7
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff ffda 	bl	800a86e <__sfputc_r>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	d1f3      	bne.n	800a8a6 <__sfputs_r+0xa>
 800a8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8c0 <_vfiprintf_r>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	b09d      	sub	sp, #116	@ 0x74
 800a8c8:	4614      	mov	r4, r2
 800a8ca:	4698      	mov	r8, r3
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	b118      	cbz	r0, 800a8d8 <_vfiprintf_r+0x18>
 800a8d0:	6a03      	ldr	r3, [r0, #32]
 800a8d2:	b90b      	cbnz	r3, 800a8d8 <_vfiprintf_r+0x18>
 800a8d4:	f7fe f8e4 	bl	8008aa0 <__sinit>
 800a8d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8da:	07d9      	lsls	r1, r3, #31
 800a8dc:	d405      	bmi.n	800a8ea <_vfiprintf_r+0x2a>
 800a8de:	89ab      	ldrh	r3, [r5, #12]
 800a8e0:	059a      	lsls	r2, r3, #22
 800a8e2:	d402      	bmi.n	800a8ea <_vfiprintf_r+0x2a>
 800a8e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8e6:	f7fe fa0e 	bl	8008d06 <__retarget_lock_acquire_recursive>
 800a8ea:	89ab      	ldrh	r3, [r5, #12]
 800a8ec:	071b      	lsls	r3, r3, #28
 800a8ee:	d501      	bpl.n	800a8f4 <_vfiprintf_r+0x34>
 800a8f0:	692b      	ldr	r3, [r5, #16]
 800a8f2:	b99b      	cbnz	r3, 800a91c <_vfiprintf_r+0x5c>
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f000 f938 	bl	800ab6c <__swsetup_r>
 800a8fc:	b170      	cbz	r0, 800a91c <_vfiprintf_r+0x5c>
 800a8fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a900:	07dc      	lsls	r4, r3, #31
 800a902:	d504      	bpl.n	800a90e <_vfiprintf_r+0x4e>
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	b01d      	add	sp, #116	@ 0x74
 800a90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90e:	89ab      	ldrh	r3, [r5, #12]
 800a910:	0598      	lsls	r0, r3, #22
 800a912:	d4f7      	bmi.n	800a904 <_vfiprintf_r+0x44>
 800a914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a916:	f7fe f9f7 	bl	8008d08 <__retarget_lock_release_recursive>
 800a91a:	e7f3      	b.n	800a904 <_vfiprintf_r+0x44>
 800a91c:	2300      	movs	r3, #0
 800a91e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a920:	2320      	movs	r3, #32
 800a922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a926:	f8cd 800c 	str.w	r8, [sp, #12]
 800a92a:	2330      	movs	r3, #48	@ 0x30
 800a92c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aadc <_vfiprintf_r+0x21c>
 800a930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a934:	f04f 0901 	mov.w	r9, #1
 800a938:	4623      	mov	r3, r4
 800a93a:	469a      	mov	sl, r3
 800a93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a940:	b10a      	cbz	r2, 800a946 <_vfiprintf_r+0x86>
 800a942:	2a25      	cmp	r2, #37	@ 0x25
 800a944:	d1f9      	bne.n	800a93a <_vfiprintf_r+0x7a>
 800a946:	ebba 0b04 	subs.w	fp, sl, r4
 800a94a:	d00b      	beq.n	800a964 <_vfiprintf_r+0xa4>
 800a94c:	465b      	mov	r3, fp
 800a94e:	4622      	mov	r2, r4
 800a950:	4629      	mov	r1, r5
 800a952:	4630      	mov	r0, r6
 800a954:	f7ff ffa2 	bl	800a89c <__sfputs_r>
 800a958:	3001      	adds	r0, #1
 800a95a:	f000 80a7 	beq.w	800aaac <_vfiprintf_r+0x1ec>
 800a95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a960:	445a      	add	r2, fp
 800a962:	9209      	str	r2, [sp, #36]	@ 0x24
 800a964:	f89a 3000 	ldrb.w	r3, [sl]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 809f 	beq.w	800aaac <_vfiprintf_r+0x1ec>
 800a96e:	2300      	movs	r3, #0
 800a970:	f04f 32ff 	mov.w	r2, #4294967295
 800a974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a978:	f10a 0a01 	add.w	sl, sl, #1
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	9307      	str	r3, [sp, #28]
 800a980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a984:	931a      	str	r3, [sp, #104]	@ 0x68
 800a986:	4654      	mov	r4, sl
 800a988:	2205      	movs	r2, #5
 800a98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98e:	4853      	ldr	r0, [pc, #332]	@ (800aadc <_vfiprintf_r+0x21c>)
 800a990:	f7f5 fc26 	bl	80001e0 <memchr>
 800a994:	9a04      	ldr	r2, [sp, #16]
 800a996:	b9d8      	cbnz	r0, 800a9d0 <_vfiprintf_r+0x110>
 800a998:	06d1      	lsls	r1, r2, #27
 800a99a:	bf44      	itt	mi
 800a99c:	2320      	movmi	r3, #32
 800a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9a2:	0713      	lsls	r3, r2, #28
 800a9a4:	bf44      	itt	mi
 800a9a6:	232b      	movmi	r3, #43	@ 0x2b
 800a9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9b2:	d015      	beq.n	800a9e0 <_vfiprintf_r+0x120>
 800a9b4:	9a07      	ldr	r2, [sp, #28]
 800a9b6:	4654      	mov	r4, sl
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	f04f 0c0a 	mov.w	ip, #10
 800a9be:	4621      	mov	r1, r4
 800a9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c4:	3b30      	subs	r3, #48	@ 0x30
 800a9c6:	2b09      	cmp	r3, #9
 800a9c8:	d94b      	bls.n	800aa62 <_vfiprintf_r+0x1a2>
 800a9ca:	b1b0      	cbz	r0, 800a9fa <_vfiprintf_r+0x13a>
 800a9cc:	9207      	str	r2, [sp, #28]
 800a9ce:	e014      	b.n	800a9fa <_vfiprintf_r+0x13a>
 800a9d0:	eba0 0308 	sub.w	r3, r0, r8
 800a9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	46a2      	mov	sl, r4
 800a9de:	e7d2      	b.n	800a986 <_vfiprintf_r+0xc6>
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	1d19      	adds	r1, r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	9103      	str	r1, [sp, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bfbb      	ittet	lt
 800a9ec:	425b      	neglt	r3, r3
 800a9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f2:	9307      	strge	r3, [sp, #28]
 800a9f4:	9307      	strlt	r3, [sp, #28]
 800a9f6:	bfb8      	it	lt
 800a9f8:	9204      	strlt	r2, [sp, #16]
 800a9fa:	7823      	ldrb	r3, [r4, #0]
 800a9fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9fe:	d10a      	bne.n	800aa16 <_vfiprintf_r+0x156>
 800aa00:	7863      	ldrb	r3, [r4, #1]
 800aa02:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa04:	d132      	bne.n	800aa6c <_vfiprintf_r+0x1ac>
 800aa06:	9b03      	ldr	r3, [sp, #12]
 800aa08:	1d1a      	adds	r2, r3, #4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	9203      	str	r2, [sp, #12]
 800aa0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa12:	3402      	adds	r4, #2
 800aa14:	9305      	str	r3, [sp, #20]
 800aa16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aaec <_vfiprintf_r+0x22c>
 800aa1a:	7821      	ldrb	r1, [r4, #0]
 800aa1c:	2203      	movs	r2, #3
 800aa1e:	4650      	mov	r0, sl
 800aa20:	f7f5 fbde 	bl	80001e0 <memchr>
 800aa24:	b138      	cbz	r0, 800aa36 <_vfiprintf_r+0x176>
 800aa26:	9b04      	ldr	r3, [sp, #16]
 800aa28:	eba0 000a 	sub.w	r0, r0, sl
 800aa2c:	2240      	movs	r2, #64	@ 0x40
 800aa2e:	4082      	lsls	r2, r0
 800aa30:	4313      	orrs	r3, r2
 800aa32:	3401      	adds	r4, #1
 800aa34:	9304      	str	r3, [sp, #16]
 800aa36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3a:	4829      	ldr	r0, [pc, #164]	@ (800aae0 <_vfiprintf_r+0x220>)
 800aa3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa40:	2206      	movs	r2, #6
 800aa42:	f7f5 fbcd 	bl	80001e0 <memchr>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d03f      	beq.n	800aaca <_vfiprintf_r+0x20a>
 800aa4a:	4b26      	ldr	r3, [pc, #152]	@ (800aae4 <_vfiprintf_r+0x224>)
 800aa4c:	bb1b      	cbnz	r3, 800aa96 <_vfiprintf_r+0x1d6>
 800aa4e:	9b03      	ldr	r3, [sp, #12]
 800aa50:	3307      	adds	r3, #7
 800aa52:	f023 0307 	bic.w	r3, r3, #7
 800aa56:	3308      	adds	r3, #8
 800aa58:	9303      	str	r3, [sp, #12]
 800aa5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa5c:	443b      	add	r3, r7
 800aa5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa60:	e76a      	b.n	800a938 <_vfiprintf_r+0x78>
 800aa62:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa66:	460c      	mov	r4, r1
 800aa68:	2001      	movs	r0, #1
 800aa6a:	e7a8      	b.n	800a9be <_vfiprintf_r+0xfe>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	3401      	adds	r4, #1
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	4619      	mov	r1, r3
 800aa74:	f04f 0c0a 	mov.w	ip, #10
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa7e:	3a30      	subs	r2, #48	@ 0x30
 800aa80:	2a09      	cmp	r2, #9
 800aa82:	d903      	bls.n	800aa8c <_vfiprintf_r+0x1cc>
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d0c6      	beq.n	800aa16 <_vfiprintf_r+0x156>
 800aa88:	9105      	str	r1, [sp, #20]
 800aa8a:	e7c4      	b.n	800aa16 <_vfiprintf_r+0x156>
 800aa8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa90:	4604      	mov	r4, r0
 800aa92:	2301      	movs	r3, #1
 800aa94:	e7f0      	b.n	800aa78 <_vfiprintf_r+0x1b8>
 800aa96:	ab03      	add	r3, sp, #12
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	462a      	mov	r2, r5
 800aa9c:	4b12      	ldr	r3, [pc, #72]	@ (800aae8 <_vfiprintf_r+0x228>)
 800aa9e:	a904      	add	r1, sp, #16
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	f7fd fbbb 	bl	800821c <_printf_float>
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	1c78      	adds	r0, r7, #1
 800aaaa:	d1d6      	bne.n	800aa5a <_vfiprintf_r+0x19a>
 800aaac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaae:	07d9      	lsls	r1, r3, #31
 800aab0:	d405      	bmi.n	800aabe <_vfiprintf_r+0x1fe>
 800aab2:	89ab      	ldrh	r3, [r5, #12]
 800aab4:	059a      	lsls	r2, r3, #22
 800aab6:	d402      	bmi.n	800aabe <_vfiprintf_r+0x1fe>
 800aab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaba:	f7fe f925 	bl	8008d08 <__retarget_lock_release_recursive>
 800aabe:	89ab      	ldrh	r3, [r5, #12]
 800aac0:	065b      	lsls	r3, r3, #25
 800aac2:	f53f af1f 	bmi.w	800a904 <_vfiprintf_r+0x44>
 800aac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aac8:	e71e      	b.n	800a908 <_vfiprintf_r+0x48>
 800aaca:	ab03      	add	r3, sp, #12
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	462a      	mov	r2, r5
 800aad0:	4b05      	ldr	r3, [pc, #20]	@ (800aae8 <_vfiprintf_r+0x228>)
 800aad2:	a904      	add	r1, sp, #16
 800aad4:	4630      	mov	r0, r6
 800aad6:	f7fd fe39 	bl	800874c <_printf_i>
 800aada:	e7e4      	b.n	800aaa6 <_vfiprintf_r+0x1e6>
 800aadc:	0800ca4e 	.word	0x0800ca4e
 800aae0:	0800ca58 	.word	0x0800ca58
 800aae4:	0800821d 	.word	0x0800821d
 800aae8:	0800a89d 	.word	0x0800a89d
 800aaec:	0800ca54 	.word	0x0800ca54

0800aaf0 <__swbuf_r>:
 800aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf2:	460e      	mov	r6, r1
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	b118      	cbz	r0, 800ab02 <__swbuf_r+0x12>
 800aafa:	6a03      	ldr	r3, [r0, #32]
 800aafc:	b90b      	cbnz	r3, 800ab02 <__swbuf_r+0x12>
 800aafe:	f7fd ffcf 	bl	8008aa0 <__sinit>
 800ab02:	69a3      	ldr	r3, [r4, #24]
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	071a      	lsls	r2, r3, #28
 800ab0a:	d501      	bpl.n	800ab10 <__swbuf_r+0x20>
 800ab0c:	6923      	ldr	r3, [r4, #16]
 800ab0e:	b943      	cbnz	r3, 800ab22 <__swbuf_r+0x32>
 800ab10:	4621      	mov	r1, r4
 800ab12:	4628      	mov	r0, r5
 800ab14:	f000 f82a 	bl	800ab6c <__swsetup_r>
 800ab18:	b118      	cbz	r0, 800ab22 <__swbuf_r+0x32>
 800ab1a:	f04f 37ff 	mov.w	r7, #4294967295
 800ab1e:	4638      	mov	r0, r7
 800ab20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	6922      	ldr	r2, [r4, #16]
 800ab26:	1a98      	subs	r0, r3, r2
 800ab28:	6963      	ldr	r3, [r4, #20]
 800ab2a:	b2f6      	uxtb	r6, r6
 800ab2c:	4283      	cmp	r3, r0
 800ab2e:	4637      	mov	r7, r6
 800ab30:	dc05      	bgt.n	800ab3e <__swbuf_r+0x4e>
 800ab32:	4621      	mov	r1, r4
 800ab34:	4628      	mov	r0, r5
 800ab36:	f7ff fd99 	bl	800a66c <_fflush_r>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d1ed      	bne.n	800ab1a <__swbuf_r+0x2a>
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	60a3      	str	r3, [r4, #8]
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	1c5a      	adds	r2, r3, #1
 800ab48:	6022      	str	r2, [r4, #0]
 800ab4a:	701e      	strb	r6, [r3, #0]
 800ab4c:	6962      	ldr	r2, [r4, #20]
 800ab4e:	1c43      	adds	r3, r0, #1
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d004      	beq.n	800ab5e <__swbuf_r+0x6e>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	07db      	lsls	r3, r3, #31
 800ab58:	d5e1      	bpl.n	800ab1e <__swbuf_r+0x2e>
 800ab5a:	2e0a      	cmp	r6, #10
 800ab5c:	d1df      	bne.n	800ab1e <__swbuf_r+0x2e>
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4628      	mov	r0, r5
 800ab62:	f7ff fd83 	bl	800a66c <_fflush_r>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d0d9      	beq.n	800ab1e <__swbuf_r+0x2e>
 800ab6a:	e7d6      	b.n	800ab1a <__swbuf_r+0x2a>

0800ab6c <__swsetup_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4b29      	ldr	r3, [pc, #164]	@ (800ac14 <__swsetup_r+0xa8>)
 800ab70:	4605      	mov	r5, r0
 800ab72:	6818      	ldr	r0, [r3, #0]
 800ab74:	460c      	mov	r4, r1
 800ab76:	b118      	cbz	r0, 800ab80 <__swsetup_r+0x14>
 800ab78:	6a03      	ldr	r3, [r0, #32]
 800ab7a:	b90b      	cbnz	r3, 800ab80 <__swsetup_r+0x14>
 800ab7c:	f7fd ff90 	bl	8008aa0 <__sinit>
 800ab80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab84:	0719      	lsls	r1, r3, #28
 800ab86:	d422      	bmi.n	800abce <__swsetup_r+0x62>
 800ab88:	06da      	lsls	r2, r3, #27
 800ab8a:	d407      	bmi.n	800ab9c <__swsetup_r+0x30>
 800ab8c:	2209      	movs	r2, #9
 800ab8e:	602a      	str	r2, [r5, #0]
 800ab90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab94:	81a3      	strh	r3, [r4, #12]
 800ab96:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9a:	e033      	b.n	800ac04 <__swsetup_r+0x98>
 800ab9c:	0758      	lsls	r0, r3, #29
 800ab9e:	d512      	bpl.n	800abc6 <__swsetup_r+0x5a>
 800aba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aba2:	b141      	cbz	r1, 800abb6 <__swsetup_r+0x4a>
 800aba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aba8:	4299      	cmp	r1, r3
 800abaa:	d002      	beq.n	800abb2 <__swsetup_r+0x46>
 800abac:	4628      	mov	r0, r5
 800abae:	f7fe ff07 	bl	80099c0 <_free_r>
 800abb2:	2300      	movs	r3, #0
 800abb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800abbc:	81a3      	strh	r3, [r4, #12]
 800abbe:	2300      	movs	r3, #0
 800abc0:	6063      	str	r3, [r4, #4]
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f043 0308 	orr.w	r3, r3, #8
 800abcc:	81a3      	strh	r3, [r4, #12]
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	b94b      	cbnz	r3, 800abe6 <__swsetup_r+0x7a>
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800abd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abdc:	d003      	beq.n	800abe6 <__swsetup_r+0x7a>
 800abde:	4621      	mov	r1, r4
 800abe0:	4628      	mov	r0, r5
 800abe2:	f000 f883 	bl	800acec <__smakebuf_r>
 800abe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abea:	f013 0201 	ands.w	r2, r3, #1
 800abee:	d00a      	beq.n	800ac06 <__swsetup_r+0x9a>
 800abf0:	2200      	movs	r2, #0
 800abf2:	60a2      	str	r2, [r4, #8]
 800abf4:	6962      	ldr	r2, [r4, #20]
 800abf6:	4252      	negs	r2, r2
 800abf8:	61a2      	str	r2, [r4, #24]
 800abfa:	6922      	ldr	r2, [r4, #16]
 800abfc:	b942      	cbnz	r2, 800ac10 <__swsetup_r+0xa4>
 800abfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac02:	d1c5      	bne.n	800ab90 <__swsetup_r+0x24>
 800ac04:	bd38      	pop	{r3, r4, r5, pc}
 800ac06:	0799      	lsls	r1, r3, #30
 800ac08:	bf58      	it	pl
 800ac0a:	6962      	ldrpl	r2, [r4, #20]
 800ac0c:	60a2      	str	r2, [r4, #8]
 800ac0e:	e7f4      	b.n	800abfa <__swsetup_r+0x8e>
 800ac10:	2000      	movs	r0, #0
 800ac12:	e7f7      	b.n	800ac04 <__swsetup_r+0x98>
 800ac14:	2000001c 	.word	0x2000001c

0800ac18 <_raise_r>:
 800ac18:	291f      	cmp	r1, #31
 800ac1a:	b538      	push	{r3, r4, r5, lr}
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	460c      	mov	r4, r1
 800ac20:	d904      	bls.n	800ac2c <_raise_r+0x14>
 800ac22:	2316      	movs	r3, #22
 800ac24:	6003      	str	r3, [r0, #0]
 800ac26:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ac2e:	b112      	cbz	r2, 800ac36 <_raise_r+0x1e>
 800ac30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac34:	b94b      	cbnz	r3, 800ac4a <_raise_r+0x32>
 800ac36:	4628      	mov	r0, r5
 800ac38:	f000 f830 	bl	800ac9c <_getpid_r>
 800ac3c:	4622      	mov	r2, r4
 800ac3e:	4601      	mov	r1, r0
 800ac40:	4628      	mov	r0, r5
 800ac42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac46:	f000 b817 	b.w	800ac78 <_kill_r>
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d00a      	beq.n	800ac64 <_raise_r+0x4c>
 800ac4e:	1c59      	adds	r1, r3, #1
 800ac50:	d103      	bne.n	800ac5a <_raise_r+0x42>
 800ac52:	2316      	movs	r3, #22
 800ac54:	6003      	str	r3, [r0, #0]
 800ac56:	2001      	movs	r0, #1
 800ac58:	e7e7      	b.n	800ac2a <_raise_r+0x12>
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac60:	4620      	mov	r0, r4
 800ac62:	4798      	blx	r3
 800ac64:	2000      	movs	r0, #0
 800ac66:	e7e0      	b.n	800ac2a <_raise_r+0x12>

0800ac68 <raise>:
 800ac68:	4b02      	ldr	r3, [pc, #8]	@ (800ac74 <raise+0xc>)
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	6818      	ldr	r0, [r3, #0]
 800ac6e:	f7ff bfd3 	b.w	800ac18 <_raise_r>
 800ac72:	bf00      	nop
 800ac74:	2000001c 	.word	0x2000001c

0800ac78 <_kill_r>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4d07      	ldr	r5, [pc, #28]	@ (800ac98 <_kill_r+0x20>)
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4604      	mov	r4, r0
 800ac80:	4608      	mov	r0, r1
 800ac82:	4611      	mov	r1, r2
 800ac84:	602b      	str	r3, [r5, #0]
 800ac86:	f7f8 fd27 	bl	80036d8 <_kill>
 800ac8a:	1c43      	adds	r3, r0, #1
 800ac8c:	d102      	bne.n	800ac94 <_kill_r+0x1c>
 800ac8e:	682b      	ldr	r3, [r5, #0]
 800ac90:	b103      	cbz	r3, 800ac94 <_kill_r+0x1c>
 800ac92:	6023      	str	r3, [r4, #0]
 800ac94:	bd38      	pop	{r3, r4, r5, pc}
 800ac96:	bf00      	nop
 800ac98:	20001608 	.word	0x20001608

0800ac9c <_getpid_r>:
 800ac9c:	f7f8 bd14 	b.w	80036c8 <_getpid>

0800aca0 <__swhatbuf_r>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	460c      	mov	r4, r1
 800aca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca8:	2900      	cmp	r1, #0
 800acaa:	b096      	sub	sp, #88	@ 0x58
 800acac:	4615      	mov	r5, r2
 800acae:	461e      	mov	r6, r3
 800acb0:	da0d      	bge.n	800acce <__swhatbuf_r+0x2e>
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800acb8:	f04f 0100 	mov.w	r1, #0
 800acbc:	bf14      	ite	ne
 800acbe:	2340      	movne	r3, #64	@ 0x40
 800acc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800acc4:	2000      	movs	r0, #0
 800acc6:	6031      	str	r1, [r6, #0]
 800acc8:	602b      	str	r3, [r5, #0]
 800acca:	b016      	add	sp, #88	@ 0x58
 800accc:	bd70      	pop	{r4, r5, r6, pc}
 800acce:	466a      	mov	r2, sp
 800acd0:	f000 f848 	bl	800ad64 <_fstat_r>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	dbec      	blt.n	800acb2 <__swhatbuf_r+0x12>
 800acd8:	9901      	ldr	r1, [sp, #4]
 800acda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800acde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ace2:	4259      	negs	r1, r3
 800ace4:	4159      	adcs	r1, r3
 800ace6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800acea:	e7eb      	b.n	800acc4 <__swhatbuf_r+0x24>

0800acec <__smakebuf_r>:
 800acec:	898b      	ldrh	r3, [r1, #12]
 800acee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acf0:	079d      	lsls	r5, r3, #30
 800acf2:	4606      	mov	r6, r0
 800acf4:	460c      	mov	r4, r1
 800acf6:	d507      	bpl.n	800ad08 <__smakebuf_r+0x1c>
 800acf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	6123      	str	r3, [r4, #16]
 800ad00:	2301      	movs	r3, #1
 800ad02:	6163      	str	r3, [r4, #20]
 800ad04:	b003      	add	sp, #12
 800ad06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad08:	ab01      	add	r3, sp, #4
 800ad0a:	466a      	mov	r2, sp
 800ad0c:	f7ff ffc8 	bl	800aca0 <__swhatbuf_r>
 800ad10:	9f00      	ldr	r7, [sp, #0]
 800ad12:	4605      	mov	r5, r0
 800ad14:	4639      	mov	r1, r7
 800ad16:	4630      	mov	r0, r6
 800ad18:	f7fe fec6 	bl	8009aa8 <_malloc_r>
 800ad1c:	b948      	cbnz	r0, 800ad32 <__smakebuf_r+0x46>
 800ad1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad22:	059a      	lsls	r2, r3, #22
 800ad24:	d4ee      	bmi.n	800ad04 <__smakebuf_r+0x18>
 800ad26:	f023 0303 	bic.w	r3, r3, #3
 800ad2a:	f043 0302 	orr.w	r3, r3, #2
 800ad2e:	81a3      	strh	r3, [r4, #12]
 800ad30:	e7e2      	b.n	800acf8 <__smakebuf_r+0xc>
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	6020      	str	r0, [r4, #0]
 800ad36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad3a:	81a3      	strh	r3, [r4, #12]
 800ad3c:	9b01      	ldr	r3, [sp, #4]
 800ad3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad42:	b15b      	cbz	r3, 800ad5c <__smakebuf_r+0x70>
 800ad44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f000 f81d 	bl	800ad88 <_isatty_r>
 800ad4e:	b128      	cbz	r0, 800ad5c <__smakebuf_r+0x70>
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	f043 0301 	orr.w	r3, r3, #1
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	431d      	orrs	r5, r3
 800ad60:	81a5      	strh	r5, [r4, #12]
 800ad62:	e7cf      	b.n	800ad04 <__smakebuf_r+0x18>

0800ad64 <_fstat_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d07      	ldr	r5, [pc, #28]	@ (800ad84 <_fstat_r+0x20>)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	4611      	mov	r1, r2
 800ad70:	602b      	str	r3, [r5, #0]
 800ad72:	f7f8 fd11 	bl	8003798 <_fstat>
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	d102      	bne.n	800ad80 <_fstat_r+0x1c>
 800ad7a:	682b      	ldr	r3, [r5, #0]
 800ad7c:	b103      	cbz	r3, 800ad80 <_fstat_r+0x1c>
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	bd38      	pop	{r3, r4, r5, pc}
 800ad82:	bf00      	nop
 800ad84:	20001608 	.word	0x20001608

0800ad88 <_isatty_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d06      	ldr	r5, [pc, #24]	@ (800ada4 <_isatty_r+0x1c>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	f7f8 fd10 	bl	80037b8 <_isatty>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_isatty_r+0x1a>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_isatty_r+0x1a>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20001608 	.word	0x20001608

0800ada8 <_init>:
 800ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adaa:	bf00      	nop
 800adac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adae:	bc08      	pop	{r3}
 800adb0:	469e      	mov	lr, r3
 800adb2:	4770      	bx	lr

0800adb4 <_fini>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	bf00      	nop
 800adb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adba:	bc08      	pop	{r3}
 800adbc:	469e      	mov	lr, r3
 800adbe:	4770      	bx	lr
