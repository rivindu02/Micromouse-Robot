
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c198  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ffc  0800c338  0800c338  0000d338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e334  0800e334  000101fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e334  0800e334  0000f334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e33c  0800e33c  000101fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e33c  0800e33c  0000f33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e340  0800e340  0000f340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800e344  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  200001fc  0800e540  000101fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f38  0800e540  00010f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017174  00000000  00000000  0001022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003687  00000000  00000000  000273a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0002aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001001  00000000  00000000  0002be88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a72b  00000000  00000000  0002ce89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a64  00000000  00000000  000475b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a05e7  00000000  00000000  00060018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001005ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067d0  00000000  00000000  00100644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00106e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c320 	.word	0x0800c320

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800c320 	.word	0x0800c320

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 ffe7 	bl	8004ed4 <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f006 fa1f 	bl	800738c <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 ffbf 	bl	8004ed4 <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f006 fac7 	bl	80074ec <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	200002d0 	.word	0x200002d0

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f006 faba 	bl	80074ec <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002d0 	.word	0x200002d0

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <play_confirmation_tone>:

/**
 * @brief Play confirmation tone
 */
void play_confirmation_tone(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    play_tone(784, 150);  // G5
 8000fbc:	2196      	movs	r1, #150	@ 0x96
 8000fbe:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fc2:	f7ff ff8f 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fc6:	2132      	movs	r1, #50	@ 0x32
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff8b 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000fce:	21c8      	movs	r1, #200	@ 0xc8
 8000fd0:	f240 4017 	movw	r0, #1047	@ 0x417
 8000fd4:	f7ff ff86 	bl	8000ee4 <play_tone>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <play_success_tone>:

/**
 * @brief Play success tone sequence
 */
void play_success_tone(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    play_tone(523, 100);  // C5
 8000fe0:	2164      	movs	r1, #100	@ 0x64
 8000fe2:	f240 200b 	movw	r0, #523	@ 0x20b
 8000fe6:	f7ff ff7d 	bl	8000ee4 <play_tone>
    play_tone(659, 100);  // E5
 8000fea:	2164      	movs	r1, #100	@ 0x64
 8000fec:	f240 2093 	movw	r0, #659	@ 0x293
 8000ff0:	f7ff ff78 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 8000ff4:	2164      	movs	r1, #100	@ 0x64
 8000ff6:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000ffa:	f7ff ff73 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000ffe:	21c8      	movs	r1, #200	@ 0xc8
 8001000:	f240 4017 	movw	r0, #1047	@ 0x417
 8001004:	f7ff ff6e 	bl	8000ee4 <play_tone>
    play_tone(0, 100);    // Pause
 8001008:	2164      	movs	r1, #100	@ 0x64
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ff6a 	bl	8000ee4 <play_tone>
    play_tone(1047, 100); // C6
 8001010:	2164      	movs	r1, #100	@ 0x64
 8001012:	f240 4017 	movw	r0, #1047	@ 0x417
 8001016:	f7ff ff65 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 800101a:	2164      	movs	r1, #100	@ 0x64
 800101c:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001020:	f7ff ff60 	bl	8000ee4 <play_tone>
    play_tone(1047, 300); // C6
 8001024:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001028:	f240 4017 	movw	r0, #1047	@ 0x417
 800102c:	f7ff ff5a 	bl	8000ee4 <play_tone>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <play_error_tone>:

/**
 * @brief Play error tone sequence
 */
void play_error_tone(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e00a      	b.n	8001056 <play_error_tone+0x22>
        play_tone(220, 200);  // A3
 8001040:	21c8      	movs	r1, #200	@ 0xc8
 8001042:	20dc      	movs	r0, #220	@ 0xdc
 8001044:	f7ff ff4e 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 8001048:	2164      	movs	r1, #100	@ 0x64
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff4a 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 3; i++) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	ddf1      	ble.n	8001040 <play_error_tone+0xc>
    }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <play_wall_beep>:

/**
 * @brief Play wall detection beep
 */
void play_wall_beep(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
    play_tone(1000, 50);
 800106a:	2132      	movs	r1, #50	@ 0x32
 800106c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001070:	f7ff ff38 	bl	8000ee4 <play_tone>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <play_turn_beep>:

/**
 * @brief Play turn signal beep
 */
void play_turn_beep(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    play_tone(800, 30);
 800107c:	211e      	movs	r1, #30
 800107e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001082:	f7ff ff2f 	bl	8000ee4 <play_tone>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff f8f3 	bl	8000280 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <send_bluetooth_message+0x28>)
 80010a6:	f007 fa5b 	bl	8008560 <HAL_UART_Transmit>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200003f0 	.word	0x200003f0

080010b8 <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 80010b8:	b40f      	push	{r0, r1, r2, r3}
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b0c2      	sub	sp, #264	@ 0x108
 80010be:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 80010c0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80010c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010cc:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010d6:	f107 0008 	add.w	r0, r7, #8
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80010e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e4:	f008 ffb0 	bl	800a048 <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffcd 	bl	800108c <send_bluetooth_message>
}
 80010f2:	bf00      	nop
 80010f4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80010f8:	46bd      	mov	sp, r7
 80010fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010fe:	b004      	add	sp, #16
 8001100:	4770      	bx	lr
	...

08001104 <send_maze_state>:

/**
 * @brief Send current maze state
 */
void send_maze_state(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	@ 0x50
 8001108:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== MAZE STATE ===\r\n");
 800110a:	4844      	ldr	r0, [pc, #272]	@ (800121c <send_maze_state+0x118>)
 800110c:	f7ff ffbe 	bl	800108c <send_bluetooth_message>

    // Send maze in ASCII format
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 8001110:	230f      	movs	r3, #15
 8001112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001114:	e058      	b.n	80011c8 <send_maze_state+0xc4>
        char line[64] = "";
 8001116:	463b      	mov	r3, r7
 8001118:	2240      	movs	r2, #64	@ 0x40
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f008 ffa1 	bl	800a064 <memset>
        for (int x = 0; x < MAZE_SIZE; x++) {
 8001122:	2300      	movs	r3, #0
 8001124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001126:	e038      	b.n	800119a <send_maze_state+0x96>
            char cell[8];
            if (maze[x][y].visited) {
 8001128:	493d      	ldr	r1, [pc, #244]	@ (8001220 <send_maze_state+0x11c>)
 800112a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800112c:	011a      	lsls	r2, r3, #4
 800112e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001130:	4413      	add	r3, r2
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	440b      	add	r3, r1
 8001136:	3304      	adds	r3, #4
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d01d      	beq.n	800117a <send_maze_state+0x76>
                sprintf(cell, "%3d ", maze[x][y].distance < MAX_DISTANCE ? maze[x][y].distance : 999);
 800113e:	4938      	ldr	r1, [pc, #224]	@ (8001220 <send_maze_state+0x11c>)
 8001140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001142:	011a      	lsls	r2, r3, #4
 8001144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001146:	4413      	add	r3, r2
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	440b      	add	r3, r1
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001152:	4293      	cmp	r3, r2
 8001154:	dc08      	bgt.n	8001168 <send_maze_state+0x64>
 8001156:	4932      	ldr	r1, [pc, #200]	@ (8001220 <send_maze_state+0x11c>)
 8001158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800115a:	011a      	lsls	r2, r3, #4
 800115c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800115e:	4413      	add	r3, r2
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	440b      	add	r3, r1
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	e001      	b.n	800116c <send_maze_state+0x68>
 8001168:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800116c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001170:	461a      	mov	r2, r3
 8001172:	492c      	ldr	r1, [pc, #176]	@ (8001224 <send_maze_state+0x120>)
 8001174:	f008 fed4 	bl	8009f20 <siprintf>
 8001178:	e005      	b.n	8001186 <send_maze_state+0x82>
            } else {
                sprintf(cell, " -- ");
 800117a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800117e:	492a      	ldr	r1, [pc, #168]	@ (8001228 <send_maze_state+0x124>)
 8001180:	4618      	mov	r0, r3
 8001182:	f008 fecd 	bl	8009f20 <siprintf>
            }
            strcat(line, cell);
 8001186:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800118a:	463b      	mov	r3, r7
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f008 ff70 	bl	800a074 <strcat>
        for (int x = 0; x < MAZE_SIZE; x++) {
 8001194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001196:	3301      	adds	r3, #1
 8001198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800119a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800119c:	2b0f      	cmp	r3, #15
 800119e:	ddc3      	ble.n	8001128 <send_maze_state+0x24>
        }
        strcat(line, "\r\n");
 80011a0:	463b      	mov	r3, r7
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f86c 	bl	8000280 <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	463b      	mov	r3, r7
 80011ae:	4413      	add	r3, r2
 80011b0:	4a1e      	ldr	r2, [pc, #120]	@ (800122c <send_maze_state+0x128>)
 80011b2:	8811      	ldrh	r1, [r2, #0]
 80011b4:	7892      	ldrb	r2, [r2, #2]
 80011b6:	8019      	strh	r1, [r3, #0]
 80011b8:	709a      	strb	r2, [r3, #2]
        send_bluetooth_message(line);
 80011ba:	463b      	mov	r3, r7
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff65 	bl	800108c <send_bluetooth_message>
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 80011c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011c4:	3b01      	subs	r3, #1
 80011c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	daa3      	bge.n	8001116 <send_maze_state+0x12>
    }

    send_bluetooth_printf("Robot Position: (%d,%d) Direction: %d\r\n",
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <send_maze_state+0x12c>)
 80011d0:	6819      	ldr	r1, [r3, #0]
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <send_maze_state+0x12c>)
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <send_maze_state+0x12c>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4816      	ldr	r0, [pc, #88]	@ (8001234 <send_maze_state+0x130>)
 80011dc:	f7ff ff6c 	bl	80010b8 <send_bluetooth_printf>
                         robot.x, robot.y, robot.direction);
    send_bluetooth_printf("Center Reached: %s\r\n", robot.center_reached ? "YES" : "NO");
 80011e0:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <send_maze_state+0x12c>)
 80011e2:	7b1b      	ldrb	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <send_maze_state+0xe8>
 80011e8:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <send_maze_state+0x134>)
 80011ea:	e000      	b.n	80011ee <send_maze_state+0xea>
 80011ec:	4b13      	ldr	r3, [pc, #76]	@ (800123c <send_maze_state+0x138>)
 80011ee:	4619      	mov	r1, r3
 80011f0:	4813      	ldr	r0, [pc, #76]	@ (8001240 <send_maze_state+0x13c>)
 80011f2:	f7ff ff61 	bl	80010b8 <send_bluetooth_printf>
    send_bluetooth_printf("Returned to Start: %s\r\n", robot.returned_to_start ? "YES" : "NO");
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <send_maze_state+0x12c>)
 80011f8:	7b5b      	ldrb	r3, [r3, #13]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <send_maze_state+0xfe>
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <send_maze_state+0x134>)
 8001200:	e000      	b.n	8001204 <send_maze_state+0x100>
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <send_maze_state+0x138>)
 8001204:	4619      	mov	r1, r3
 8001206:	480f      	ldr	r0, [pc, #60]	@ (8001244 <send_maze_state+0x140>)
 8001208:	f7ff ff56 	bl	80010b8 <send_bluetooth_printf>
    send_bluetooth_message("==================\r\n");
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <send_maze_state+0x144>)
 800120e:	f7ff ff3d 	bl	800108c <send_bluetooth_message>
}
 8001212:	bf00      	nop
 8001214:	3750      	adds	r7, #80	@ 0x50
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800c338 	.word	0x0800c338
 8001220:	20000438 	.word	0x20000438
 8001224:	0800c350 	.word	0x0800c350
 8001228:	0800c358 	.word	0x0800c358
 800122c:	0800c360 	.word	0x0800c360
 8001230:	20001438 	.word	0x20001438
 8001234:	0800c364 	.word	0x0800c364
 8001238:	0800c38c 	.word	0x0800c38c
 800123c:	0800c390 	.word	0x0800c390
 8001240:	0800c394 	.word	0x0800c394
 8001244:	0800c3ac 	.word	0x0800c3ac
 8001248:	0800c3c4 	.word	0x0800c3c4

0800124c <send_sensor_data>:

/**
 * @brief Send current sensor data
 */
void send_sensor_data(void)
{
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	b087      	sub	sp, #28
 8001250:	af06      	add	r7, sp, #24
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <send_sensor_data+0x54>)
 8001254:	881b      	ldrh	r3, [r3, #0]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001256:	461d      	mov	r5, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <send_sensor_data+0x54>)
 800125a:	891b      	ldrh	r3, [r3, #8]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800125c:	461e      	mov	r6, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <send_sensor_data+0x54>)
 8001260:	885b      	ldrh	r3, [r3, #2]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001262:	469c      	mov	ip, r3
                         sensors.side_left, sensors.side_right,
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <send_sensor_data+0x54>)
 8001266:	88db      	ldrh	r3, [r3, #6]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001268:	461a      	mov	r2, r3
                         sensors.side_left, sensors.side_right,
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <send_sensor_data+0x54>)
 800126c:	889b      	ldrh	r3, [r3, #4]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800126e:	4619      	mov	r1, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <send_sensor_data+0x54>)
 8001272:	7a9b      	ldrb	r3, [r3, #10]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001274:	4618      	mov	r0, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <send_sensor_data+0x54>)
 8001278:	7adb      	ldrb	r3, [r3, #11]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800127a:	461c      	mov	r4, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <send_sensor_data+0x54>)
 800127e:	7b1b      	ldrb	r3, [r3, #12]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001280:	9304      	str	r3, [sp, #16]
 8001282:	9403      	str	r4, [sp, #12]
 8001284:	9002      	str	r0, [sp, #8]
 8001286:	9101      	str	r1, [sp, #4]
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	4663      	mov	r3, ip
 800128c:	4632      	mov	r2, r6
 800128e:	4629      	mov	r1, r5
 8001290:	4804      	ldr	r0, [pc, #16]	@ (80012a4 <send_sensor_data+0x58>)
 8001292:	f7ff ff11 	bl	80010b8 <send_bluetooth_printf>
}
 8001296:	bf00      	nop
 8001298:	3704      	adds	r7, #4
 800129a:	46bd      	mov	sp, r7
 800129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000144c 	.word	0x2000144c
 80012a4:	0800c3dc 	.word	0x0800c3dc

080012a8 <send_position_data>:

/**
 * @brief Send current position and encoder data
 */
void send_position_data(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af02      	add	r7, sp, #8
    int32_t left_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <send_position_data+0x44>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80012b8:	607b      	str	r3, [r7, #4]
    int32_t right_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim4) - 32768;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <send_position_data+0x48>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80012c4:	603b      	str	r3, [r7, #0]

    send_bluetooth_printf("POSITION - X:%d Y:%d Dir:%d EncL:%ld EncR:%ld\r\n",
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <send_position_data+0x4c>)
 80012c8:	6819      	ldr	r1, [r3, #0]
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <send_position_data+0x4c>)
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <send_position_data+0x4c>)
 80012d0:	6898      	ldr	r0, [r3, #8]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4603      	mov	r3, r0
 80012dc:	4806      	ldr	r0, [pc, #24]	@ (80012f8 <send_position_data+0x50>)
 80012de:	f7ff feeb 	bl	80010b8 <send_bluetooth_printf>
                         robot.x, robot.y, robot.direction, left_count, right_count);
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000318 	.word	0x20000318
 80012f0:	200003a8 	.word	0x200003a8
 80012f4:	20001438 	.word	0x20001438
 80012f8:	0800c420 	.word	0x0800c420

080012fc <send_performance_metrics>:

/**
 * @brief Send performance metrics
 */
void send_performance_metrics(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
    float efficiency = get_exploration_efficiency();  // make functions
 8001302:	f002 f83b 	bl	800337c <get_exploration_efficiency>
 8001306:	ed87 0a01 	vstr	s0, [r7, #4]
    int optimal_distance = get_optimal_distance();		// make functions
 800130a:	f002 f887 	bl	800341c <get_optimal_distance>
 800130e:	6038      	str	r0, [r7, #0]

    send_bluetooth_message("\r\n=== PERFORMANCE METRICS ===\r\n");
 8001310:	4824      	ldr	r0, [pc, #144]	@ (80013a4 <send_performance_metrics+0xa8>)
 8001312:	f7ff febb 	bl	800108c <send_bluetooth_message>
    send_bluetooth_printf("Exploration Steps: %d\r\n", robot.exploration_steps);
 8001316:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <send_performance_metrics+0xac>)
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	4619      	mov	r1, r3
 800131c:	4823      	ldr	r0, [pc, #140]	@ (80013ac <send_performance_metrics+0xb0>)
 800131e:	f7ff fecb 	bl	80010b8 <send_bluetooth_printf>
    send_bluetooth_printf("Exploration Efficiency: %.1f%%\r\n", efficiency);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff f918 	bl	8000558 <__aeabi_f2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4820      	ldr	r0, [pc, #128]	@ (80013b0 <send_performance_metrics+0xb4>)
 800132e:	f7ff fec3 	bl	80010b8 <send_bluetooth_printf>
    send_bluetooth_printf("Optimal Path Distance: %d steps\r\n", optimal_distance);
 8001332:	6839      	ldr	r1, [r7, #0]
 8001334:	481f      	ldr	r0, [pc, #124]	@ (80013b4 <send_performance_metrics+0xb8>)
 8001336:	f7ff febf 	bl	80010b8 <send_bluetooth_printf>

    // Performance rating
    if (efficiency <= 50.0f && optimal_distance > 0) {
 800133a:	edd7 7a01 	vldr	s15, [r7, #4]
 800133e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80013b8 <send_performance_metrics+0xbc>
 8001342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	d806      	bhi.n	800135a <send_performance_metrics+0x5e>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	dd03      	ble.n	800135a <send_performance_metrics+0x5e>
        send_bluetooth_message("Rating: ⭐⭐⭐⭐⭐ LEVEL\r\n");
 8001352:	481a      	ldr	r0, [pc, #104]	@ (80013bc <send_performance_metrics+0xc0>)
 8001354:	f7ff fe9a 	bl	800108c <send_bluetooth_message>
 8001358:	e01c      	b.n	8001394 <send_performance_metrics+0x98>
    } else if (efficiency <= 65.0f) {
 800135a:	edd7 7a01 	vldr	s15, [r7, #4]
 800135e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80013c0 <send_performance_metrics+0xc4>
 8001362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	d803      	bhi.n	8001374 <send_performance_metrics+0x78>
        send_bluetooth_message("Rating: ⭐⭐⭐⭐ COMPETITION READY\r\n");
 800136c:	4815      	ldr	r0, [pc, #84]	@ (80013c4 <send_performance_metrics+0xc8>)
 800136e:	f7ff fe8d 	bl	800108c <send_bluetooth_message>
 8001372:	e00f      	b.n	8001394 <send_performance_metrics+0x98>
    } else if (efficiency <= 80.0f) {
 8001374:	edd7 7a01 	vldr	s15, [r7, #4]
 8001378:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80013c8 <send_performance_metrics+0xcc>
 800137c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	d803      	bhi.n	800138e <send_performance_metrics+0x92>
        send_bluetooth_message("Rating: ⭐⭐⭐ GOOD PERFORMANCE\r\n");
 8001386:	4811      	ldr	r0, [pc, #68]	@ (80013cc <send_performance_metrics+0xd0>)
 8001388:	f7ff fe80 	bl	800108c <send_bluetooth_message>
 800138c:	e002      	b.n	8001394 <send_performance_metrics+0x98>
    } else {
        send_bluetooth_message("Rating: ⭐⭐ NEEDS OPTIMIZATION\r\n");
 800138e:	4810      	ldr	r0, [pc, #64]	@ (80013d0 <send_performance_metrics+0xd4>)
 8001390:	f7ff fe7c 	bl	800108c <send_bluetooth_message>
    }
    send_bluetooth_message("===========================\r\n");
 8001394:	480f      	ldr	r0, [pc, #60]	@ (80013d4 <send_performance_metrics+0xd8>)
 8001396:	f7ff fe79 	bl	800108c <send_bluetooth_message>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	0800c450 	.word	0x0800c450
 80013a8:	20001438 	.word	0x20001438
 80013ac:	0800c470 	.word	0x0800c470
 80013b0:	0800c488 	.word	0x0800c488
 80013b4:	0800c4ac 	.word	0x0800c4ac
 80013b8:	42480000 	.word	0x42480000
 80013bc:	0800c4d0 	.word	0x0800c4d0
 80013c0:	42820000 	.word	0x42820000
 80013c4:	0800c4f0 	.word	0x0800c4f0
 80013c8:	42a00000 	.word	0x42a00000
 80013cc:	0800c51c 	.word	0x0800c51c
 80013d0:	0800c544 	.word	0x0800c544
 80013d4:	0800c568 	.word	0x0800c568

080013d8 <send_battery_status>:

/**
 * @brief Send battery status
 */
void send_battery_status(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af02      	add	r7, sp, #8
    // Convert ADC reading to voltage (assuming 3.3V reference)
    float voltage = (sensors.battery * 3.3f) / 4096.0f;
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <send_battery_status+0x60>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ea:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800143c <send_battery_status+0x64>
 80013ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001440 <send_battery_status+0x68>
 80013f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fa:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_printf("Battery: %.2fV (ADC:%d)", voltage, sensors.battery);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff f8aa 	bl	8000558 <__aeabi_f2d>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	490b      	ldr	r1, [pc, #44]	@ (8001438 <send_battery_status+0x60>)
 800140a:	8809      	ldrh	r1, [r1, #0]
 800140c:	9100      	str	r1, [sp, #0]
 800140e:	480d      	ldr	r0, [pc, #52]	@ (8001444 <send_battery_status+0x6c>)
 8001410:	f7ff fe52 	bl	80010b8 <send_bluetooth_printf>

    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <send_battery_status+0x60>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800141c:	4293      	cmp	r3, r2
 800141e:	d803      	bhi.n	8001428 <send_battery_status+0x50>
        send_bluetooth_message(" - LOW BATTERY WARNING!\r\n");
 8001420:	4809      	ldr	r0, [pc, #36]	@ (8001448 <send_battery_status+0x70>)
 8001422:	f7ff fe33 	bl	800108c <send_bluetooth_message>
    } else {
        send_bluetooth_message(" - OK\r\n");
    }
}
 8001426:	e002      	b.n	800142e <send_battery_status+0x56>
        send_bluetooth_message(" - OK\r\n");
 8001428:	4808      	ldr	r0, [pc, #32]	@ (800144c <send_battery_status+0x74>)
 800142a:	f7ff fe2f 	bl	800108c <send_bluetooth_message>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000144c 	.word	0x2000144c
 800143c:	40533333 	.word	0x40533333
 8001440:	45800000 	.word	0x45800000
 8001444:	0800c588 	.word	0x0800c588
 8001448:	0800c5a0 	.word	0x0800c5a0
 800144c:	0800c5bc 	.word	0x0800c5bc

08001450 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001460:	b2db      	uxtb	r3, r3
 8001462:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800146e:	4817      	ldr	r0, [pc, #92]	@ (80014cc <mpu9250_read_register+0x7c>)
 8001470:	f004 fc6e 	bl	8005d50 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 8001474:	f107 010d 	add.w	r1, r7, #13
 8001478:	2364      	movs	r3, #100	@ 0x64
 800147a:	2201      	movs	r2, #1
 800147c:	4814      	ldr	r0, [pc, #80]	@ (80014d0 <mpu9250_read_register+0x80>)
 800147e:	f005 f994 	bl	80067aa <HAL_SPI_Transmit>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 8001486:	f107 010c 	add.w	r1, r7, #12
 800148a:	2364      	movs	r3, #100	@ 0x64
 800148c:	2201      	movs	r2, #1
 800148e:	4810      	ldr	r0, [pc, #64]	@ (80014d0 <mpu9250_read_register+0x80>)
 8001490:	f005 facf 	bl	8006a32 <HAL_SPI_Receive>
 8001494:	4603      	mov	r3, r0
 8001496:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800149e:	480b      	ldr	r0, [pc, #44]	@ (80014cc <mpu9250_read_register+0x7c>)
 80014a0:	f004 fc56 	bl	8005d50 <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <mpu9250_read_register+0x60>
 80014aa:	7bbb      	ldrb	r3, [r7, #14]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d007      	beq.n	80014c0 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 80014b0:	4808      	ldr	r0, [pc, #32]	@ (80014d4 <mpu9250_read_register+0x84>)
 80014b2:	f7ff fdeb 	bl	800108c <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <mpu9250_read_register+0x88>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 80014bc:	23ff      	movs	r3, #255	@ 0xff
 80014be:	e000      	b.n	80014c2 <mpu9250_read_register+0x72>
    }

    return rx_data;
 80014c0:	7b3b      	ldrb	r3, [r7, #12]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40020400 	.word	0x40020400
 80014d0:	20000278 	.word	0x20000278
 80014d4:	0800c6dc 	.word	0x0800c6dc
 80014d8:	20000218 	.word	0x20000218

080014dc <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	460a      	mov	r2, r1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	4613      	mov	r3, r2
 80014ea:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	733b      	strb	r3, [r7, #12]
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014fa:	4811      	ldr	r0, [pc, #68]	@ (8001540 <mpu9250_write_register+0x64>)
 80014fc:	f004 fc28 	bl	8005d50 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 8001500:	f107 010c 	add.w	r1, r7, #12
 8001504:	2364      	movs	r3, #100	@ 0x64
 8001506:	2202      	movs	r2, #2
 8001508:	480e      	ldr	r0, [pc, #56]	@ (8001544 <mpu9250_write_register+0x68>)
 800150a:	f005 f94e 	bl	80067aa <HAL_SPI_Transmit>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001518:	4809      	ldr	r0, [pc, #36]	@ (8001540 <mpu9250_write_register+0x64>)
 800151a:	f004 fc19 	bl	8005d50 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 8001524:	4808      	ldr	r0, [pc, #32]	@ (8001548 <mpu9250_write_register+0x6c>)
 8001526:	f7ff fdb1 	bl	800108c <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <mpu9250_write_register+0x70>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8001530:	2001      	movs	r0, #1
 8001532:	f003 fccf 	bl	8004ed4 <HAL_Delay>
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40020400 	.word	0x40020400
 8001544:	20000278 	.word	0x20000278
 8001548:	0800c700 	.word	0x0800c700
 800154c:	20000218 	.word	0x20000218

08001550 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 8001556:	483c      	ldr	r0, [pc, #240]	@ (8001648 <mpu9250_init+0xf8>)
 8001558:	f7ff fd98 	bl	800108c <send_bluetooth_message>
    HAL_Delay(200);
 800155c:	20c8      	movs	r0, #200	@ 0xc8
 800155e:	f003 fcb9 	bl	8004ed4 <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 8001562:	2180      	movs	r1, #128	@ 0x80
 8001564:	206b      	movs	r0, #107	@ 0x6b
 8001566:	f7ff ffb9 	bl	80014dc <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 800156a:	20fa      	movs	r0, #250	@ 0xfa
 800156c:	f003 fcb2 	bl	8004ed4 <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 8001570:	2100      	movs	r1, #0
 8001572:	206b      	movs	r0, #107	@ 0x6b
 8001574:	f7ff ffb2 	bl	80014dc <mpu9250_write_register>
    HAL_Delay(50);
 8001578:	2032      	movs	r0, #50	@ 0x32
 800157a:	f003 fcab 	bl	8004ed4 <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 800157e:	2101      	movs	r1, #1
 8001580:	206b      	movs	r0, #107	@ 0x6b
 8001582:	f7ff ffab 	bl	80014dc <mpu9250_write_register>
    HAL_Delay(50);
 8001586:	2032      	movs	r0, #50	@ 0x32
 8001588:	f003 fca4 	bl	8004ed4 <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 800158c:	2100      	movs	r1, #0
 800158e:	206c      	movs	r0, #108	@ 0x6c
 8001590:	f7ff ffa4 	bl	80014dc <mpu9250_write_register>
    HAL_Delay(10);
 8001594:	200a      	movs	r0, #10
 8001596:	f003 fc9d 	bl	8004ed4 <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 800159a:	206a      	movs	r0, #106	@ 0x6a
 800159c:	f7ff ff58 	bl	8001450 <mpu9250_read_register>
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f043 0310 	orr.w	r3, r3, #16
 80015aa:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4619      	mov	r1, r3
 80015b0:	206a      	movs	r0, #106	@ 0x6a
 80015b2:	f7ff ff93 	bl	80014dc <mpu9250_write_register>
     HAL_Delay(10);
 80015b6:	200a      	movs	r0, #10
 80015b8:	f003 fc8c 	bl	8004ed4 <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 80015bc:	2104      	movs	r1, #4
 80015be:	2019      	movs	r0, #25
 80015c0:	f7ff ff8c 	bl	80014dc <mpu9250_write_register>
    HAL_Delay(10);
 80015c4:	200a      	movs	r0, #10
 80015c6:	f003 fc85 	bl	8004ed4 <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 80015ca:	2102      	movs	r1, #2
 80015cc:	201a      	movs	r0, #26
 80015ce:	f7ff ff85 	bl	80014dc <mpu9250_write_register>
    HAL_Delay(10);
 80015d2:	200a      	movs	r0, #10
 80015d4:	f003 fc7e 	bl	8004ed4 <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 80015d8:	2108      	movs	r1, #8
 80015da:	201b      	movs	r0, #27
 80015dc:	f7ff ff7e 	bl	80014dc <mpu9250_write_register>
    HAL_Delay(10);
 80015e0:	200a      	movs	r0, #10
 80015e2:	f003 fc77 	bl	8004ed4 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 80015e6:	2108      	movs	r1, #8
 80015e8:	201c      	movs	r0, #28
 80015ea:	f7ff ff77 	bl	80014dc <mpu9250_write_register>
    HAL_Delay(10);
 80015ee:	200a      	movs	r0, #10
 80015f0:	f003 fc70 	bl	8004ed4 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 80015f4:	2102      	movs	r1, #2
 80015f6:	201d      	movs	r0, #29
 80015f8:	f7ff ff70 	bl	80014dc <mpu9250_write_register>
    HAL_Delay(10);
 80015fc:	200a      	movs	r0, #10
 80015fe:	f003 fc69 	bl	8004ed4 <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001602:	2075      	movs	r0, #117	@ 0x75
 8001604:	f7ff ff24 	bl	8001450 <mpu9250_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	4619      	mov	r1, r3
 8001610:	480e      	ldr	r0, [pc, #56]	@ (800164c <mpu9250_init+0xfc>)
 8001612:	f7ff fd51 	bl	80010b8 <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	2b70      	cmp	r3, #112	@ 0x70
 800161a:	d009      	beq.n	8001630 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	4619      	mov	r1, r3
 8001620:	480b      	ldr	r0, [pc, #44]	@ (8001650 <mpu9250_init+0x100>)
 8001622:	f7ff fd49 	bl	80010b8 <send_bluetooth_printf>
        mpu9250_initialized=false;
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <mpu9250_init+0x104>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
        return false;
 800162c:	2300      	movs	r3, #0
 800162e:	e006      	b.n	800163e <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8001630:	4809      	ldr	r0, [pc, #36]	@ (8001658 <mpu9250_init+0x108>)
 8001632:	f7ff fd2b 	bl	800108c <send_bluetooth_message>
    mpu9250_initialized=true;
 8001636:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <mpu9250_init+0x104>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
    return true;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	0800c728 	.word	0x0800c728
 800164c:	0800c754 	.word	0x0800c754
 8001650:	0800c768 	.word	0x0800c768
 8001654:	20000218 	.word	0x20000218
 8001658:	0800c790 	.word	0x0800c790

0800165c <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 800165c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001660:	b088      	sub	sp, #32
 8001662:	af04      	add	r7, sp, #16
    if (!mpu9250_initialized) {
 8001664:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <mpu9250_calibrate_bias+0x144>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	f083 0301 	eor.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <mpu9250_calibrate_bias+0x1e>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 8001672:	484c      	ldr	r0, [pc, #304]	@ (80017a4 <mpu9250_calibrate_bias+0x148>)
 8001674:	f7ff fd0a 	bl	800108c <send_bluetooth_message>
        return;
 8001678:	e08e      	b.n	8001798 <mpu9250_calibrate_bias+0x13c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 800167a:	484b      	ldr	r0, [pc, #300]	@ (80017a8 <mpu9250_calibrate_bias+0x14c>)
 800167c:	f7ff fd06 	bl	800108c <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 1000;
 8001680:	4b4a      	ldr	r3, [pc, #296]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 8001682:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001686:	611a      	str	r2, [r3, #16]
    float sum_x = 0, sum_y = 0, sum_z = 0;
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	e02e      	b.n	80016fe <mpu9250_calibrate_bias+0xa2>
        mpu9250_read_gyro();
 80016a0:	f000 f8b8 	bl	8001814 <mpu9250_read_gyro>
        sum_x += gyro.gyro_x;
 80016a4:	4b42      	ldr	r3, [pc, #264]	@ (80017b0 <mpu9250_calibrate_bias+0x154>)
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ba:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_y += gyro.gyro_y;
 80016be:	4b3c      	ldr	r3, [pc, #240]	@ (80017b0 <mpu9250_calibrate_bias+0x154>)
 80016c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80016d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d4:	edc7 7a02 	vstr	s15, [r7, #8]
        sum_z += gyro.gyro_z;
 80016d8:	4b35      	ldr	r3, [pc, #212]	@ (80017b0 <mpu9250_calibrate_bias+0x154>)
 80016da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 80016f2:	2003      	movs	r0, #3
 80016f4:	f003 fbee 	bl	8004ed4 <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8cb      	bhi.n	80016a0 <mpu9250_calibrate_bias+0x44>
    }

    enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
 8001708:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001714:	edd7 6a03 	vldr	s13, [r7, #12]
 8001718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171c:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 800171e:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
 8001722:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800172e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 8001738:	edc3 7a01 	vstr	s15, [r3, #4]
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001748:	edd7 6a01 	vldr	s13, [r7, #4]
 800174c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 8001752:	edc3 7a02 	vstr	s15, [r3, #8]
    enhanced_gyro.calibrated = true;
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 8001758:	2201      	movs	r2, #1
 800175a:	731a      	strb	r2, [r3, #12]

    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 800175e:	681b      	ldr	r3, [r3, #0]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef9 	bl	8000558 <__aeabi_f2d>
 8001766:	4680      	mov	r8, r0
 8001768:	4689      	mov	r9, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 800176c:	685b      	ldr	r3, [r3, #4]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fef2 	bl	8000558 <__aeabi_f2d>
 8001774:	4604      	mov	r4, r0
 8001776:	460d      	mov	r5, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <mpu9250_calibrate_bias+0x150>)
 800177a:	689b      	ldr	r3, [r3, #8]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe feeb 	bl	8000558 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800178a:	e9cd 4500 	strd	r4, r5, [sp]
 800178e:	4642      	mov	r2, r8
 8001790:	464b      	mov	r3, r9
 8001792:	4808      	ldr	r0, [pc, #32]	@ (80017b4 <mpu9250_calibrate_bias+0x158>)
 8001794:	f7ff fc90 	bl	80010b8 <send_bluetooth_printf>
}
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017a0:	20000218 	.word	0x20000218
 80017a4:	0800c7a4 	.word	0x0800c7a4
 80017a8:	0800c7d0 	.word	0x0800c7d0
 80017ac:	2000021c 	.word	0x2000021c
 80017b0:	2000145c 	.word	0x2000145c
 80017b4:	0800c804 	.word	0x0800c804

080017b8 <mpu9250_get_gyro_z_compensated>:

/**
 * @brief Get bias-compensated gyro Z value in degrees per second
 */
float mpu9250_get_gyro_z_compensated(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
    if (!enhanced_gyro.calibrated) {
 80017be:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <mpu9250_get_gyro_z_compensated+0x50>)
 80017c0:	7b1b      	ldrb	r3, [r3, #12]
 80017c2:	f083 0301 	eor.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <mpu9250_get_gyro_z_compensated+0x1e>
        return mpu9250_get_gyro_z_dps(); // Fall back to uncompensated
 80017cc:	f000 f892 	bl	80018f4 <mpu9250_get_gyro_z_dps>
 80017d0:	eef0 7a40 	vmov.f32	s15, s0
 80017d4:	e013      	b.n	80017fe <mpu9250_get_gyro_z_compensated+0x46>
    }

    float raw_z_dps = (float)(gyro.gyro_z - enhanced_gyro.gyro_bias_z) / 65.5f;
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <mpu9250_get_gyro_z_compensated+0x54>)
 80017d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <mpu9250_get_gyro_z_compensated+0x50>)
 80017e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80017ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ee:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001810 <mpu9250_get_gyro_z_compensated+0x58>
 80017f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f6:	edc7 7a01 	vstr	s15, [r7, #4]
    return raw_z_dps;
 80017fa:	edd7 7a01 	vldr	s15, [r7, #4]
}
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000021c 	.word	0x2000021c
 800180c:	2000145c 	.word	0x2000145c
 8001810:	42830000 	.word	0x42830000

08001814 <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 800181a:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <mpu9250_read_gyro+0xc4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 8001828:	482c      	ldr	r0, [pc, #176]	@ (80018dc <mpu9250_read_gyro+0xc8>)
 800182a:	f7ff fc2f 	bl	800108c <send_bluetooth_message>
        return;
 800182e:	e050      	b.n	80018d2 <mpu9250_read_gyro+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 8001830:	23c3      	movs	r3, #195	@ 0xc3
 8001832:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800183a:	4829      	ldr	r0, [pc, #164]	@ (80018e0 <mpu9250_read_gyro+0xcc>)
 800183c:	f004 fa88 	bl	8005d50 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8001840:	1df9      	adds	r1, r7, #7
 8001842:	2364      	movs	r3, #100	@ 0x64
 8001844:	2201      	movs	r2, #1
 8001846:	4827      	ldr	r0, [pc, #156]	@ (80018e4 <mpu9250_read_gyro+0xd0>)
 8001848:	f004 ffaf 	bl	80067aa <HAL_SPI_Transmit>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001856:	2201      	movs	r2, #1
 8001858:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800185c:	4820      	ldr	r0, [pc, #128]	@ (80018e0 <mpu9250_read_gyro+0xcc>)
 800185e:	f004 fa77 	bl	8005d50 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 8001862:	4821      	ldr	r0, [pc, #132]	@ (80018e8 <mpu9250_read_gyro+0xd4>)
 8001864:	f7ff fc12 	bl	800108c <send_bluetooth_message>
        return;
 8001868:	e033      	b.n	80018d2 <mpu9250_read_gyro+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 800186a:	f107 0108 	add.w	r1, r7, #8
 800186e:	2364      	movs	r3, #100	@ 0x64
 8001870:	2206      	movs	r2, #6
 8001872:	481c      	ldr	r0, [pc, #112]	@ (80018e4 <mpu9250_read_gyro+0xd0>)
 8001874:	f005 f8dd 	bl	8006a32 <HAL_SPI_Receive>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001882:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <mpu9250_read_gyro+0xcc>)
 8001884:	f004 fa64 	bl	8005d50 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 800188e:	4817      	ldr	r0, [pc, #92]	@ (80018ec <mpu9250_read_gyro+0xd8>)
 8001890:	f7ff fbfc 	bl	800108c <send_bluetooth_message>
        return;
 8001894:	e01d      	b.n	80018d2 <mpu9250_read_gyro+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 8001896:	7a3b      	ldrb	r3, [r7, #8]
 8001898:	b21b      	sxth	r3, r3
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	b21a      	sxth	r2, r3
 800189e:	7a7b      	ldrb	r3, [r7, #9]
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <mpu9250_read_gyro+0xdc>)
 80018a8:	801a      	strh	r2, [r3, #0]
    gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 80018aa:	7abb      	ldrb	r3, [r7, #10]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	7afb      	ldrb	r3, [r7, #11]
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <mpu9250_read_gyro+0xdc>)
 80018bc:	805a      	strh	r2, [r3, #2]
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 80018be:	7b3b      	ldrb	r3, [r7, #12]
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	7b7b      	ldrb	r3, [r7, #13]
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <mpu9250_read_gyro+0xdc>)
 80018d0:	809a      	strh	r2, [r3, #4]
}
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000218 	.word	0x20000218
 80018dc:	0800c834 	.word	0x0800c834
 80018e0:	40020400 	.word	0x40020400
 80018e4:	20000278 	.word	0x20000278
 80018e8:	0800c868 	.word	0x0800c868
 80018ec:	0800c88c 	.word	0x0800c88c
 80018f0:	2000145c 	.word	0x2000145c

080018f4 <mpu9250_get_gyro_z_dps>:

/**
 * @brief Get gyro Z-axis in degrees per second
 */
float mpu9250_get_gyro_z_dps(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
    // ±500 dps range, 16-bit resolution
    // Sensitivity: 65.5 LSB/(dps)

    return (float)gyro.gyro_z / 65.5f;
 80018f8:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <mpu9250_get_gyro_z_dps+0x2c>)
 80018fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001906:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001924 <mpu9250_get_gyro_z_dps+0x30>
 800190a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800190e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2000145c 	.word	0x2000145c
 8001924:	42830000 	.word	0x42830000

08001928 <initialize_hardware_systems>:


/**
 * @brief Initialize all hardware systems and perform diagnostics
 */
static void initialize_hardware_systems(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    //send_bluetooth_message("\r\n" "="*60 "\r\n");
    send_bluetooth_message("🤖 CHAMPIONSHIP MICROMOUSE INITIALIZATION 🤖\r\n");
 800192c:	4828      	ldr	r0, [pc, #160]	@ (80019d0 <initialize_hardware_systems+0xa8>)
 800192e:	f7ff fbad 	bl	800108c <send_bluetooth_message>
    //send_bluetooth_message("="*60 "\r\n");

    // Initialize PWM for motors
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6 (MOTOR_IN1)
 8001932:	2100      	movs	r1, #0
 8001934:	4827      	ldr	r0, [pc, #156]	@ (80019d4 <initialize_hardware_systems+0xac>)
 8001936:	f005 fd29 	bl	800738c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // PA7 (MOTOR_IN2)
 800193a:	2104      	movs	r1, #4
 800193c:	4825      	ldr	r0, [pc, #148]	@ (80019d4 <initialize_hardware_systems+0xac>)
 800193e:	f005 fd25 	bl	800738c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // PB0 (MOTOR_IN3)
 8001942:	2108      	movs	r1, #8
 8001944:	4823      	ldr	r0, [pc, #140]	@ (80019d4 <initialize_hardware_systems+0xac>)
 8001946:	f005 fd21 	bl	800738c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PB1 (MOTOR_IN4)
 800194a:	210c      	movs	r1, #12
 800194c:	4821      	ldr	r0, [pc, #132]	@ (80019d4 <initialize_hardware_systems+0xac>)
 800194e:	f005 fd1d 	bl	800738c <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET); // Enable DRV8833
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001958:	481f      	ldr	r0, [pc, #124]	@ (80019d8 <initialize_hardware_systems+0xb0>)
 800195a:	f004 f9f9 	bl	8005d50 <HAL_GPIO_WritePin>

    // Verify ADC GPIO configuration
    verify_adc_gpio_configuration();
 800195e:	f000 fd5d 	bl	800241c <verify_adc_gpio_configuration>
    adc_system_diagnostics();
 8001962:	f002 fd1f 	bl	80043a4 <adc_system_diagnostics>

    // Initialize and test MPU9250 gyroscope
    if (mpu9250_init()) {
 8001966:	f7ff fdf3 	bl	8001550 <mpu9250_init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00f      	beq.n	8001990 <initialize_hardware_systems+0x68>
        send_bluetooth_message("✅ MPU9250 gyroscope initialized successfully\r\n");
 8001970:	481a      	ldr	r0, [pc, #104]	@ (80019dc <initialize_hardware_systems+0xb4>)
 8001972:	f7ff fb8b 	bl	800108c <send_bluetooth_message>
        send_bluetooth_message("⚠️ KEEP ROBOT STATIONARY during gyro calibration!\r\n");
 8001976:	481a      	ldr	r0, [pc, #104]	@ (80019e0 <initialize_hardware_systems+0xb8>)
 8001978:	f7ff fb88 	bl	800108c <send_bluetooth_message>
        HAL_Delay(2000);
 800197c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001980:	f003 faa8 	bl	8004ed4 <HAL_Delay>
        mpu9250_calibrate_bias();
 8001984:	f7ff fe6a 	bl	800165c <mpu9250_calibrate_bias>
        send_bluetooth_message("✅ Gyro calibration complete\r\n");
 8001988:	4816      	ldr	r0, [pc, #88]	@ (80019e4 <initialize_hardware_systems+0xbc>)
 800198a:	f7ff fb7f 	bl	800108c <send_bluetooth_message>
 800198e:	e002      	b.n	8001996 <initialize_hardware_systems+0x6e>
    } else {
        send_bluetooth_message("⚠️ Gyro initialization failed - using basic movement\r\n");
 8001990:	4815      	ldr	r0, [pc, #84]	@ (80019e8 <initialize_hardware_systems+0xc0>)
 8001992:	f7ff fb7b 	bl	800108c <send_bluetooth_message>
    }

    // Initialize encoders
    start_encoders();
 8001996:	f001 fdc9 	bl	800352c <start_encoders>
    HAL_Delay(100);
 800199a:	2064      	movs	r0, #100	@ 0x64
 800199c:	f003 fa9a 	bl	8004ed4 <HAL_Delay>

    // Test encoder functionality
    if (get_left_encoder_total() == 0 && get_right_encoder_total() == 0) {
 80019a0:	f001 fd8a 	bl	80034b8 <get_left_encoder_total>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d108      	bne.n	80019bc <initialize_hardware_systems+0x94>
 80019aa:	f001 fd8f 	bl	80034cc <get_right_encoder_total>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <initialize_hardware_systems+0x94>
        send_bluetooth_message("⚠️ WARNING: Encoders may not be working properly\r\n");
 80019b4:	480d      	ldr	r0, [pc, #52]	@ (80019ec <initialize_hardware_systems+0xc4>)
 80019b6:	f7ff fb69 	bl	800108c <send_bluetooth_message>
 80019ba:	e002      	b.n	80019c2 <initialize_hardware_systems+0x9a>
    } else {
        send_bluetooth_message("✅ Encoders initialized and responding\r\n");
 80019bc:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <initialize_hardware_systems+0xc8>)
 80019be:	f7ff fb65 	bl	800108c <send_bluetooth_message>
    }

    // Initialize maze exploration system
    initialize_maze_exploration();
 80019c2:	f000 fe29 	bl	8002618 <initialize_maze_exploration>

    send_bluetooth_message("✅ All systems initialized successfully!\r\n");
 80019c6:	480b      	ldr	r0, [pc, #44]	@ (80019f4 <initialize_hardware_systems+0xcc>)
 80019c8:	f7ff fb60 	bl	800108c <send_bluetooth_message>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	0800c9e8 	.word	0x0800c9e8
 80019d4:	20000360 	.word	0x20000360
 80019d8:	40020800 	.word	0x40020800
 80019dc:	0800ca1c 	.word	0x0800ca1c
 80019e0:	0800ca50 	.word	0x0800ca50
 80019e4:	0800ca88 	.word	0x0800ca88
 80019e8:	0800caa8 	.word	0x0800caa8
 80019ec:	0800cae4 	.word	0x0800cae4
 80019f0:	0800cb1c 	.word	0x0800cb1c
 80019f4:	0800cb48 	.word	0x0800cb48

080019f8 <send_periodic_status>:


/**
 * @brief Send periodic status updates
 */
static void send_periodic_status(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80019fe:	f003 fa5d 	bl	8004ebc <HAL_GetTick>
 8001a02:	6078      	str	r0, [r7, #4]

    // Send status every 10 seconds when not exploring
    if (current_time - last_status_time > 10000 && !exploration_started) {
 8001a04:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <send_periodic_status+0x80>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d916      	bls.n	8001a42 <send_periodic_status+0x4a>
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <send_periodic_status+0x84>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f083 0301 	eor.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00f      	beq.n	8001a42 <send_periodic_status+0x4a>
        send_battery_status();
 8001a22:	f7ff fcd9 	bl	80013d8 <send_battery_status>

        if (system_ready) {
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <send_periodic_status+0x88>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <send_periodic_status+0x3e>
            send_bluetooth_message("💚 System ready - Press LEFT button to start exploration\r\n");
 8001a2e:	4815      	ldr	r0, [pc, #84]	@ (8001a84 <send_periodic_status+0x8c>)
 8001a30:	f7ff fb2c 	bl	800108c <send_bluetooth_message>
 8001a34:	e002      	b.n	8001a3c <send_periodic_status+0x44>
        } else {
            send_bluetooth_message("🔴 System not ready - Check diagnostics\r\n");
 8001a36:	4814      	ldr	r0, [pc, #80]	@ (8001a88 <send_periodic_status+0x90>)
 8001a38:	f7ff fb28 	bl	800108c <send_bluetooth_message>
        }

        last_status_time = current_time;
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a78 <send_periodic_status+0x80>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
    }

    // Blink LED to show system is alive
    if (current_time - last_blink_time > 2000) {
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <send_periodic_status+0x94>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a4e:	d90f      	bls.n	8001a70 <send_periodic_status+0x78>
        if (system_ready) {
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <send_periodic_status+0x88>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <send_periodic_status+0x6a>
            HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8001a58:	2110      	movs	r1, #16
 8001a5a:	480d      	ldr	r0, [pc, #52]	@ (8001a90 <send_periodic_status+0x98>)
 8001a5c:	f004 f991 	bl	8005d82 <HAL_GPIO_TogglePin>
 8001a60:	e003      	b.n	8001a6a <send_periodic_status+0x72>
        } else {
            // Fast blink if system not ready
            HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8001a62:	2120      	movs	r1, #32
 8001a64:	480a      	ldr	r0, [pc, #40]	@ (8001a90 <send_periodic_status+0x98>)
 8001a66:	f004 f98c 	bl	8005d82 <HAL_GPIO_TogglePin>
        }
        last_blink_time = current_time;
 8001a6a:	4a08      	ldr	r2, [pc, #32]	@ (8001a8c <send_periodic_status+0x94>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6013      	str	r3, [r2, #0]
    }
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20001484 	.word	0x20001484
 8001a7c:	20001483 	.word	0x20001483
 8001a80:	20001482 	.word	0x20001482
 8001a84:	0800cc7c 	.word	0x0800cc7c
 8001a88:	0800ccbc 	.word	0x0800ccbc
 8001a8c:	20001488 	.word	0x20001488
 8001a90:	40020400 	.word	0x40020400

08001a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a9a:	f003 f9a9 	bl	8004df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a9e:	f000 f8e1 	bl	8001c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa2:	f000 fbd9 	bl	8002258 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001aa6:	f000 f945 	bl	8001d34 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001aaa:	f000 f995 	bl	8001dd8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001aae:	f000 f9c9 	bl	8001e44 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ab2:	f000 fa67 	bl	8001f84 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001ab6:	f000 fb51 	bl	800215c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001aba:	f000 fba3 	bl	8002204 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001abe:	f000 fab5 	bl	800202c <MX_TIM3_Init>


  // main.c — after SystemClock_Config();


  dwt_delay_init(HAL_RCC_GetHCLKFreq());
 8001ac2:	f004 fdb5 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fd7f 	bl	80025cc <dwt_delay_init>


  /* USER CODE BEGIN 2 */
  // Initialize all hardware systems
  initialize_hardware_systems();
 8001ace:	f7ff ff2b 	bl	8001928 <initialize_hardware_systems>

  // Run system diagnostics
  //run_system_diagnostics();

  // Play startup sequence
  play_startup_tone();
 8001ad2:	f7ff fa55 	bl	8000f80 <play_startup_tone>
  led_sequence_startup();
 8001ad6:	f003 f8c5 	bl	8004c64 <led_sequence_startup>

  // Send startup message
  send_bluetooth_message("\r\n🎮 MICROMOUSE CONTROL READY 🎮\r\n");
 8001ada:	4852      	ldr	r0, [pc, #328]	@ (8001c24 <main+0x190>)
 8001adc:	f7ff fad6 	bl	800108c <send_bluetooth_message>
  send_bluetooth_message("LEFT button: Start exploration\r\n");
 8001ae0:	4851      	ldr	r0, [pc, #324]	@ (8001c28 <main+0x194>)
 8001ae2:	f7ff fad3 	bl	800108c <send_bluetooth_message>
  send_bluetooth_message("RIGHT button: Status/Emergency stop\r\n");
 8001ae6:	4851      	ldr	r0, [pc, #324]	@ (8001c2c <main+0x198>)
 8001ae8:	f7ff fad0 	bl	800108c <send_bluetooth_message>
  send_bluetooth_message("Waiting for user input...\r\n");
 8001aec:	4850      	ldr	r0, [pc, #320]	@ (8001c30 <main+0x19c>)
 8001aee:	f7ff facd 	bl	800108c <send_bluetooth_message>

    // Initial status
  last_status_time = HAL_GetTick();
 8001af2:	f003 f9e3 	bl	8004ebc <HAL_GetTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c34 <main+0x1a0>)
 8001afa:	6013      	str	r3, [r2, #0]
  last_blink_time = HAL_GetTick();
 8001afc:	f003 f9de 	bl	8004ebc <HAL_GetTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a4d      	ldr	r2, [pc, #308]	@ (8001c38 <main+0x1a4>)
 8001b04:	6013      	str	r3, [r2, #0]
//  HAL_Delay(1500);
//  run_gyro_step_test(800, 200, 1000, 2000, 5, 7000);


   //use gyro PID/////////////////////////////////////////////////////////////
  moveStraightGyroPID_Reset();
 8001b06:	f001 fe71 	bl	80037ec <moveStraightGyroPID_Reset>
  //moveStraightPID_Reset();
  int left=0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  int right=0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
  while(left*(-1)<=2555 || right*(-1)<=2539){
 8001b12:	e009      	b.n	8001b28 <main+0x94>
	  mpu9250_read_gyro();
 8001b14:	f7ff fe7e 	bl	8001814 <mpu9250_read_gyro>
	  left=get_left_encoder_total();
 8001b18:	f001 fcce 	bl	80034b8 <get_left_encoder_total>
 8001b1c:	6078      	str	r0, [r7, #4]
	  right=get_right_encoder_total();
 8001b1e:	f001 fcd5 	bl	80034cc <get_right_encoder_total>
 8001b22:	6038      	str	r0, [r7, #0]
	  moveStraightGyroPID();
 8001b24:	f001 fe86 	bl	8003834 <moveStraightGyroPID>
  while(left*(-1)<=2555 || right*(-1)<=2539){
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a44      	ldr	r2, [pc, #272]	@ (8001c3c <main+0x1a8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	daf1      	bge.n	8001b14 <main+0x80>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4a43      	ldr	r2, [pc, #268]	@ (8001c40 <main+0x1ac>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	daed      	bge.n	8001b14 <main+0x80>
	  //send_bluetooth_printf("L:%ld R:%ld\r\n",left,right);
  }
  break_motors();
 8001b38:	f001 fd8e 	bl	8003658 <break_motors>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Handle button events
	if (button_pressed == 1) {
 8001b3c:	4b41      	ldr	r3, [pc, #260]	@ (8001c44 <main+0x1b0>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d133      	bne.n	8001bae <main+0x11a>
		button_pressed = 0;
 8001b46:	4b3f      	ldr	r3, [pc, #252]	@ (8001c44 <main+0x1b0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]

		if (!exploration_started && system_ready) {
 8001b4c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c48 <main+0x1b4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d012      	beq.n	8001b80 <main+0xec>
 8001b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c4c <main+0x1b8>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00e      	beq.n	8001b80 <main+0xec>
			send_bluetooth_message("\r\n🚀 STARTING MAZE EXPLORATION! 🚀\r\n");
 8001b62:	483b      	ldr	r0, [pc, #236]	@ (8001c50 <main+0x1bc>)
 8001b64:	f7ff fa92 	bl	800108c <send_bluetooth_message>
			play_confirmation_tone();
 8001b68:	f7ff fa26 	bl	8000fb8 <play_confirmation_tone>
			HAL_Delay(1000);
 8001b6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b70:	f003 f9b0 	bl	8004ed4 <HAL_Delay>

			exploration_started = true;
 8001b74:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <main+0x1b4>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
			run_maze_exploration_sequence();
 8001b7a:	f001 fb5b 	bl	8003234 <run_maze_exploration_sequence>
 8001b7e:	e016      	b.n	8001bae <main+0x11a>

		} else if (is_exploration_complete()) {
 8001b80:	f001 fbec 	bl	800335c <is_exploration_complete>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <main+0x102>
			send_bluetooth_message("\r\n🏁 EXPLORATION COMPLETE - Ready for speed run! 🏁\r\n");
 8001b8a:	4832      	ldr	r0, [pc, #200]	@ (8001c54 <main+0x1c0>)
 8001b8c:	f7ff fa7e 	bl	800108c <send_bluetooth_message>
			send_performance_metrics();
 8001b90:	f7ff fbb4 	bl	80012fc <send_performance_metrics>
 8001b94:	e00b      	b.n	8001bae <main+0x11a>

		} else if (!system_ready) {
 8001b96:	4b2d      	ldr	r3, [pc, #180]	@ (8001c4c <main+0x1b8>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	f083 0301 	eor.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <main+0x11a>
			send_bluetooth_message("⚠️ System not ready - check diagnostics!\r\n");
 8001ba4:	482c      	ldr	r0, [pc, #176]	@ (8001c58 <main+0x1c4>)
 8001ba6:	f7ff fa71 	bl	800108c <send_bluetooth_message>
			play_error_tone();
 8001baa:	f7ff fa43 	bl	8001034 <play_error_tone>
		}
	}

	if (button_pressed == 2) {
 8001bae:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <main+0x1b0>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d128      	bne.n	8001c0a <main+0x176>
		button_pressed = 0;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <main+0x1b0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]

		// Right button - emergency stop or reset
		if (exploration_started && !is_exploration_complete()) {
 8001bbe:	4b22      	ldr	r3, [pc, #136]	@ (8001c48 <main+0x1b4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d012      	beq.n	8001bec <main+0x158>
 8001bc6:	f001 fbc9 	bl	800335c <is_exploration_complete>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f083 0301 	eor.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00a      	beq.n	8001bec <main+0x158>
			send_bluetooth_message("🛑 EMERGENCY STOP!\r\n");
 8001bd6:	4821      	ldr	r0, [pc, #132]	@ (8001c5c <main+0x1c8>)
 8001bd8:	f7ff fa58 	bl	800108c <send_bluetooth_message>
			stop_motors();
 8001bdc:	f001 fd22 	bl	8003624 <stop_motors>
			play_error_tone();
 8001be0:	f7ff fa28 	bl	8001034 <play_error_tone>
			exploration_started = false;
 8001be4:	4b18      	ldr	r3, [pc, #96]	@ (8001c48 <main+0x1b4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e00e      	b.n	8001c0a <main+0x176>
		} else {
			// Send detailed status
			send_bluetooth_message("\r\n📊 DETAILED STATUS REPORT 📊\r\n");
 8001bec:	481c      	ldr	r0, [pc, #112]	@ (8001c60 <main+0x1cc>)
 8001bee:	f7ff fa4d 	bl	800108c <send_bluetooth_message>
			send_maze_state();
 8001bf2:	f7ff fa87 	bl	8001104 <send_maze_state>
			send_sensor_data();
 8001bf6:	f7ff fb29 	bl	800124c <send_sensor_data>
			send_position_data();
 8001bfa:	f7ff fb55 	bl	80012a8 <send_position_data>
			if (exploration_started) {
 8001bfe:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <main+0x1b4>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <main+0x176>
				send_performance_metrics();
 8001c06:	f7ff fb79 	bl	80012fc <send_performance_metrics>
			}
		}
	}

	// Send periodic status updates
	send_periodic_status();
 8001c0a:	f7ff fef5 	bl	80019f8 <send_periodic_status>

	// If exploration is running, let it continue
	if (exploration_started && !is_exploration_complete()) {
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <main+0x1b4>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <main+0x186>
 8001c16:	f001 fba1 	bl	800335c <is_exploration_complete>
		// The exploration runs in run_maze_exploration_sequence()
		// and handles its own loop until complete
	}

	// Small delay to prevent overwhelming the system
	HAL_Delay(50);
 8001c1a:	2032      	movs	r0, #50	@ 0x32
 8001c1c:	f003 f95a 	bl	8004ed4 <HAL_Delay>
	if (button_pressed == 1) {
 8001c20:	e78c      	b.n	8001b3c <main+0xa8>
 8001c22:	bf00      	nop
 8001c24:	0800cce8 	.word	0x0800cce8
 8001c28:	0800cd10 	.word	0x0800cd10
 8001c2c:	0800cd34 	.word	0x0800cd34
 8001c30:	0800cd5c 	.word	0x0800cd5c
 8001c34:	20001484 	.word	0x20001484
 8001c38:	20001488 	.word	0x20001488
 8001c3c:	fffff605 	.word	0xfffff605
 8001c40:	fffff615 	.word	0xfffff615
 8001c44:	20001480 	.word	0x20001480
 8001c48:	20001483 	.word	0x20001483
 8001c4c:	20001482 	.word	0x20001482
 8001c50:	0800cd78 	.word	0x0800cd78
 8001c54:	0800cda4 	.word	0x0800cda4
 8001c58:	0800cde0 	.word	0x0800cde0
 8001c5c:	0800ce10 	.word	0x0800ce10
 8001c60:	0800ce28 	.word	0x0800ce28

08001c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b094      	sub	sp, #80	@ 0x50
 8001c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	2230      	movs	r2, #48	@ 0x30
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f008 f9f6 	bl	800a064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <SystemClock_Config+0xc8>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	4a26      	ldr	r2, [pc, #152]	@ (8001d2c <SystemClock_Config+0xc8>)
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c98:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <SystemClock_Config+0xc8>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <SystemClock_Config+0xcc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a20      	ldr	r2, [pc, #128]	@ (8001d30 <SystemClock_Config+0xcc>)
 8001cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <SystemClock_Config+0xcc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc8:	2310      	movs	r3, #16
 8001cca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001cd8:	23a8      	movs	r3, #168	@ 0xa8
 8001cda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 f87d 	bl	8005de8 <HAL_RCC_OscConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cf4:	f000 fbce 	bl	8002494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2102      	movs	r1, #2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 fadf 	bl	80062d8 <HAL_RCC_ClockConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d20:	f000 fbb8 	bl	8002494 <Error_Handler>
  }
}
 8001d24:	bf00      	nop
 8001d26:	3750      	adds	r7, #80	@ 0x50
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000

08001d34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d46:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d48:	4a21      	ldr	r2, [pc, #132]	@ (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d60:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d66:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d74:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d76:	4a17      	ldr	r2, [pc, #92]	@ (8001dd4 <MX_ADC1_Init+0xa0>)
 8001d78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d94:	480d      	ldr	r0, [pc, #52]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001d96:	f003 f8c1 	bl	8004f1c <HAL_ADC_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001da0:	f000 fb78 	bl	8002494 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001dac:	2304      	movs	r3, #4
 8001dae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <MX_ADC1_Init+0x98>)
 8001db6:	f003 fa75 	bl	80052a4 <HAL_ADC_ConfigChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001dc0:	f000 fb68 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000230 	.word	0x20000230
 8001dd0:	40012000 	.word	0x40012000
 8001dd4:	0f000001 	.word	0x0f000001

08001dd8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001dde:	4a18      	ldr	r2, [pc, #96]	@ (8001e40 <MX_SPI2_Init+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001de4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001de8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dea:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001e04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001e0c:	2230      	movs	r2, #48	@ 0x30
 8001e0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001e24:	220a      	movs	r2, #10
 8001e26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <MX_SPI2_Init+0x64>)
 8001e2a:	f004 fc35 	bl	8006698 <HAL_SPI_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e34:	f000 fb2e 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000278 	.word	0x20000278
 8001e40:	40003800 	.word	0x40003800

08001e44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	@ 0x58
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]
 8001e72:	615a      	str	r2, [r3, #20]
 8001e74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2220      	movs	r2, #32
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f008 f8f1 	bl	800a064 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e82:	4b3e      	ldr	r3, [pc, #248]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001e84:	4a3e      	ldr	r2, [pc, #248]	@ (8001f80 <MX_TIM1_Init+0x13c>)
 8001e86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8001e88:	4b3c      	ldr	r3, [pc, #240]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001e8a:	2214      	movs	r2, #20
 8001e8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8001e94:	4b39      	ldr	r3, [pc, #228]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001e96:	22c8      	movs	r2, #200	@ 0xc8
 8001e98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea0:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ea6:	4b35      	ldr	r3, [pc, #212]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001ea8:	2280      	movs	r2, #128	@ 0x80
 8001eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eac:	4833      	ldr	r0, [pc, #204]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001eae:	f005 f9c5 	bl	800723c <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001eb8:	f000 faec 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ec2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	482c      	ldr	r0, [pc, #176]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001eca:	f005 fe59 	bl	8007b80 <HAL_TIM_ConfigClockSource>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001ed4:	f000 fade 	bl	8002494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ed8:	4828      	ldr	r0, [pc, #160]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001eda:	f005 f9fe 	bl	80072da <HAL_TIM_PWM_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ee4:	f000 fad6 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4821      	ldr	r0, [pc, #132]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001ef8:	f006 fa0e 	bl	8008318 <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001f02:	f000 fac7 	bl	8002494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f06:	2360      	movs	r3, #96	@ 0x60
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 8001f0a:	2364      	movs	r3, #100	@ 0x64
 8001f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f12:	2300      	movs	r3, #0
 8001f14:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f26:	2208      	movs	r2, #8
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4814      	ldr	r0, [pc, #80]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001f2c:	f005 fd66 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001f36:	f000 faad 	bl	8002494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4807      	ldr	r0, [pc, #28]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001f5e:	f006 fa49 	bl	80083f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001f68:	f000 fa94 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f6c:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001f6e:	f002 fc5b 	bl	8004828 <HAL_TIM_MspPostInit>

}
 8001f72:	bf00      	nop
 8001f74:	3758      	adds	r7, #88	@ 0x58
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200002d0 	.word	0x200002d0
 8001f80:	40010000 	.word	0x40010000

08001f84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08c      	sub	sp, #48	@ 0x30
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	2224      	movs	r2, #36	@ 0x24
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f008 f866 	bl	800a064 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa0:	4b21      	ldr	r3, [pc, #132]	@ (8002028 <MX_TIM2_Init+0xa4>)
 8001fa2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <MX_TIM2_Init+0xa4>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <MX_TIM2_Init+0xa4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002028 <MX_TIM2_Init+0xa4>)
 8001fb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <MX_TIM2_Init+0xa4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fc2:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <MX_TIM2_Init+0xa4>)
 8001fc4:	2280      	movs	r2, #128	@ 0x80
 8001fc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480d      	ldr	r0, [pc, #52]	@ (8002028 <MX_TIM2_Init+0xa4>)
 8001ff4:	f005 fade 	bl	80075b4 <HAL_TIM_Encoder_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ffe:	f000 fa49 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	4619      	mov	r1, r3
 800200e:	4806      	ldr	r0, [pc, #24]	@ (8002028 <MX_TIM2_Init+0xa4>)
 8002010:	f006 f982 	bl	8008318 <HAL_TIMEx_MasterConfigSynchronization>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800201a:	f000 fa3b 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	3730      	adds	r7, #48	@ 0x30
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000318 	.word	0x20000318

0800202c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08e      	sub	sp, #56	@ 0x38
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	f107 0320 	add.w	r3, r7, #32
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
 8002058:	615a      	str	r2, [r3, #20]
 800205a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800205c:	4b3d      	ldr	r3, [pc, #244]	@ (8002154 <MX_TIM3_Init+0x128>)
 800205e:	4a3e      	ldr	r2, [pc, #248]	@ (8002158 <MX_TIM3_Init+0x12c>)
 8002060:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8002062:	4b3c      	ldr	r3, [pc, #240]	@ (8002154 <MX_TIM3_Init+0x128>)
 8002064:	2204      	movs	r2, #4
 8002066:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b3a      	ldr	r3, [pc, #232]	@ (8002154 <MX_TIM3_Init+0x128>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 800206e:	4b39      	ldr	r3, [pc, #228]	@ (8002154 <MX_TIM3_Init+0x128>)
 8002070:	f240 3246 	movw	r2, #838	@ 0x346
 8002074:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002076:	4b37      	ldr	r3, [pc, #220]	@ (8002154 <MX_TIM3_Init+0x128>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800207c:	4b35      	ldr	r3, [pc, #212]	@ (8002154 <MX_TIM3_Init+0x128>)
 800207e:	2280      	movs	r2, #128	@ 0x80
 8002080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002082:	4834      	ldr	r0, [pc, #208]	@ (8002154 <MX_TIM3_Init+0x128>)
 8002084:	f005 f8da 	bl	800723c <HAL_TIM_Base_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800208e:	f000 fa01 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002098:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800209c:	4619      	mov	r1, r3
 800209e:	482d      	ldr	r0, [pc, #180]	@ (8002154 <MX_TIM3_Init+0x128>)
 80020a0:	f005 fd6e 	bl	8007b80 <HAL_TIM_ConfigClockSource>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80020aa:	f000 f9f3 	bl	8002494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020ae:	4829      	ldr	r0, [pc, #164]	@ (8002154 <MX_TIM3_Init+0x128>)
 80020b0:	f005 f913 	bl	80072da <HAL_TIM_PWM_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020ba:	f000 f9eb 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020c6:	f107 0320 	add.w	r3, r7, #32
 80020ca:	4619      	mov	r1, r3
 80020cc:	4821      	ldr	r0, [pc, #132]	@ (8002154 <MX_TIM3_Init+0x128>)
 80020ce:	f006 f923 	bl	8008318 <HAL_TIMEx_MasterConfigSynchronization>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020d8:	f000 f9dc 	bl	8002494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020dc:	2360      	movs	r3, #96	@ 0x60
 80020de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	2200      	movs	r2, #0
 80020f0:	4619      	mov	r1, r3
 80020f2:	4818      	ldr	r0, [pc, #96]	@ (8002154 <MX_TIM3_Init+0x128>)
 80020f4:	f005 fc82 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80020fe:	f000 f9c9 	bl	8002494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	2204      	movs	r2, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4812      	ldr	r0, [pc, #72]	@ (8002154 <MX_TIM3_Init+0x128>)
 800210a:	f005 fc77 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002114:	f000 f9be 	bl	8002494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2208      	movs	r2, #8
 800211c:	4619      	mov	r1, r3
 800211e:	480d      	ldr	r0, [pc, #52]	@ (8002154 <MX_TIM3_Init+0x128>)
 8002120:	f005 fc6c 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800212a:	f000 f9b3 	bl	8002494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	220c      	movs	r2, #12
 8002132:	4619      	mov	r1, r3
 8002134:	4807      	ldr	r0, [pc, #28]	@ (8002154 <MX_TIM3_Init+0x128>)
 8002136:	f005 fc61 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002140:	f000 f9a8 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002144:	4803      	ldr	r0, [pc, #12]	@ (8002154 <MX_TIM3_Init+0x128>)
 8002146:	f002 fb6f 	bl	8004828 <HAL_TIM_MspPostInit>

}
 800214a:	bf00      	nop
 800214c:	3738      	adds	r7, #56	@ 0x38
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000360 	.word	0x20000360
 8002158:	40000400 	.word	0x40000400

0800215c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	@ 0x30
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002162:	f107 030c 	add.w	r3, r7, #12
 8002166:	2224      	movs	r2, #36	@ 0x24
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f007 ff7a 	bl	800a064 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002178:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <MX_TIM4_Init+0xa0>)
 800217a:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <MX_TIM4_Init+0xa4>)
 800217c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800217e:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <MX_TIM4_Init+0xa0>)
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002184:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <MX_TIM4_Init+0xa0>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <MX_TIM4_Init+0xa0>)
 800218c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002190:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <MX_TIM4_Init+0xa0>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002198:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <MX_TIM4_Init+0xa0>)
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800219e:	2303      	movs	r3, #3
 80021a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021a6:	2301      	movs	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021b6:	2301      	movs	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	4619      	mov	r1, r3
 80021c8:	480c      	ldr	r0, [pc, #48]	@ (80021fc <MX_TIM4_Init+0xa0>)
 80021ca:	f005 f9f3 	bl	80075b4 <HAL_TIM_Encoder_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80021d4:	f000 f95e 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	@ (80021fc <MX_TIM4_Init+0xa0>)
 80021e6:	f006 f897 	bl	8008318 <HAL_TIMEx_MasterConfigSynchronization>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80021f0:	f000 f950 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021f4:	bf00      	nop
 80021f6:	3730      	adds	r7, #48	@ 0x30
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200003a8 	.word	0x200003a8
 8002200:	40000800 	.word	0x40000800

08002204 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <MX_USART6_UART_Init+0x4c>)
 800220a:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <MX_USART6_UART_Init+0x50>)
 800220c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <MX_USART6_UART_Init+0x4c>)
 8002210:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002214:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <MX_USART6_UART_Init+0x4c>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <MX_USART6_UART_Init+0x4c>)
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002222:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <MX_USART6_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002228:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <MX_USART6_UART_Init+0x4c>)
 800222a:	220c      	movs	r2, #12
 800222c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222e:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <MX_USART6_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002234:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <MX_USART6_UART_Init+0x4c>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800223a:	4805      	ldr	r0, [pc, #20]	@ (8002250 <MX_USART6_UART_Init+0x4c>)
 800223c:	f006 f940 	bl	80084c0 <HAL_UART_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002246:	f000 f925 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200003f0 	.word	0x200003f0
 8002254:	40011400 	.word	0x40011400

08002258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	4b4b      	ldr	r3, [pc, #300]	@ (80023a0 <MX_GPIO_Init+0x148>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4a4a      	ldr	r2, [pc, #296]	@ (80023a0 <MX_GPIO_Init+0x148>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4b48      	ldr	r3, [pc, #288]	@ (80023a0 <MX_GPIO_Init+0x148>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	4b44      	ldr	r3, [pc, #272]	@ (80023a0 <MX_GPIO_Init+0x148>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a43      	ldr	r2, [pc, #268]	@ (80023a0 <MX_GPIO_Init+0x148>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b41      	ldr	r3, [pc, #260]	@ (80023a0 <MX_GPIO_Init+0x148>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	4b3d      	ldr	r3, [pc, #244]	@ (80023a0 <MX_GPIO_Init+0x148>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a3c      	ldr	r2, [pc, #240]	@ (80023a0 <MX_GPIO_Init+0x148>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b3a      	ldr	r3, [pc, #232]	@ (80023a0 <MX_GPIO_Init+0x148>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022c8:	4836      	ldr	r0, [pc, #216]	@ (80023a4 <MX_GPIO_Init+0x14c>)
 80022ca:	f003 fd41 	bl	8005d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 80022ce:	2200      	movs	r2, #0
 80022d0:	f241 3130 	movw	r1, #4912	@ 0x1330
 80022d4:	4834      	ldr	r0, [pc, #208]	@ (80023a8 <MX_GPIO_Init+0x150>)
 80022d6:	f003 fd3b 	bl	8005d50 <HAL_GPIO_WritePin>
                          |EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80022e0:	4832      	ldr	r0, [pc, #200]	@ (80023ac <MX_GPIO_Init+0x154>)
 80022e2:	f003 fd35 	bl	8005d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 80022e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	4619      	mov	r1, r3
 80022fe:	4829      	ldr	r0, [pc, #164]	@ (80023a4 <MX_GPIO_Init+0x14c>)
 8002300:	f003 fba2 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8002304:	2302      	movs	r3, #2
 8002306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002308:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800230c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	4619      	mov	r1, r3
 8002318:	4824      	ldr	r0, [pc, #144]	@ (80023ac <MX_GPIO_Init+0x154>)
 800231a:	f003 fb95 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 800231e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002324:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	4619      	mov	r1, r3
 8002334:	481c      	ldr	r0, [pc, #112]	@ (80023a8 <MX_GPIO_Init+0x150>)
 8002336:	f003 fb87 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_LEFT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 800233a:	f241 3330 	movw	r3, #4912	@ 0x1330
 800233e:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	2301      	movs	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4619      	mov	r1, r3
 8002352:	4815      	ldr	r0, [pc, #84]	@ (80023a8 <MX_GPIO_Init+0x150>)
 8002354:	f003 fb78 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_RIGHT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin;
 8002358:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800235c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	4619      	mov	r1, r3
 8002370:	480e      	ldr	r0, [pc, #56]	@ (80023ac <MX_GPIO_Init+0x154>)
 8002372:	f003 fb69 	bl	8005a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2105      	movs	r1, #5
 800237a:	2007      	movs	r0, #7
 800237c:	f003 fa9b 	bl	80058b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002380:	2007      	movs	r0, #7
 8002382:	f003 fab4 	bl	80058ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2105      	movs	r1, #5
 800238a:	2028      	movs	r0, #40	@ 0x28
 800238c:	f003 fa93 	bl	80058b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002390:	2028      	movs	r0, #40	@ 0x28
 8002392:	f003 faac 	bl	80058ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002396:	bf00      	nop
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020000 	.word	0x40020000

080023b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 80023ba:	f002 fd7f 	bl	8004ebc <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 80023c0:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x58>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80023ca:	d919      	bls.n	8002400 <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d109      	bne.n	80023e6 <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <HAL_GPIO_EXTI_Callback+0x5c>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 80023d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <HAL_GPIO_EXTI_Callback+0x60>)
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 80023de:	480d      	ldr	r0, [pc, #52]	@ (8002414 <HAL_GPIO_EXTI_Callback+0x64>)
 80023e0:	f7fe fe54 	bl	800108c <send_bluetooth_message>
 80023e4:	e009      	b.n	80023fa <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ec:	d105      	bne.n	80023fa <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 80023ee:	4b07      	ldr	r3, [pc, #28]	@ (800240c <HAL_GPIO_EXTI_Callback+0x5c>)
 80023f0:	2202      	movs	r2, #2
 80023f2:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 80023f4:	4808      	ldr	r0, [pc, #32]	@ (8002418 <HAL_GPIO_EXTI_Callback+0x68>)
 80023f6:	f7fe fe49 	bl	800108c <send_bluetooth_message>
        }
        last_press = current_time;
 80023fa:	4a03      	ldr	r2, [pc, #12]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x58>)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6013      	str	r3, [r2, #0]
    }
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	2000148c 	.word	0x2000148c
 800240c:	20001480 	.word	0x20001480
 8002410:	20001481 	.word	0x20001481
 8002414:	0800ce50 	.word	0x0800ce50
 8002418:	0800ce68 	.word	0x0800ce68

0800241c <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002430:	2301      	movs	r3, #1
 8002432:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002434:	2303      	movs	r3, #3
 8002436:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	4619      	mov	r1, r3
 8002440:	4812      	ldr	r0, [pc, #72]	@ (800248c <verify_adc_gpio_configuration+0x70>)
 8002442:	f003 fb01 	bl	8005a48 <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002446:	2304      	movs	r3, #4
 8002448:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	4619      	mov	r1, r3
 800244e:	480f      	ldr	r0, [pc, #60]	@ (800248c <verify_adc_gpio_configuration+0x70>)
 8002450:	f003 fafa 	bl	8005a48 <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002454:	2308      	movs	r3, #8
 8002456:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	4619      	mov	r1, r3
 800245c:	480b      	ldr	r0, [pc, #44]	@ (800248c <verify_adc_gpio_configuration+0x70>)
 800245e:	f003 faf3 	bl	8005a48 <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002462:	2310      	movs	r3, #16
 8002464:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4808      	ldr	r0, [pc, #32]	@ (800248c <verify_adc_gpio_configuration+0x70>)
 800246c:	f003 faec 	bl	8005a48 <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002470:	2320      	movs	r3, #32
 8002472:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	4619      	mov	r1, r3
 8002478:	4804      	ldr	r0, [pc, #16]	@ (800248c <verify_adc_gpio_configuration+0x70>)
 800247a:	f003 fae5 	bl	8005a48 <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 800247e:	4804      	ldr	r0, [pc, #16]	@ (8002490 <verify_adc_gpio_configuration+0x74>)
 8002480:	f7fe fe04 	bl	800108c <send_bluetooth_message>
}
 8002484:	bf00      	nop
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40020000 	.word	0x40020000
 8002490:	0800ce80 	.word	0x0800ce80

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
}
 800249a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 800249c:	2110      	movs	r1, #16
 800249e:	4806      	ldr	r0, [pc, #24]	@ (80024b8 <Error_Handler+0x24>)
 80024a0:	f003 fc6f 	bl	8005d82 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 80024a4:	2120      	movs	r1, #32
 80024a6:	4804      	ldr	r0, [pc, #16]	@ (80024b8 <Error_Handler+0x24>)
 80024a8:	f003 fc6b 	bl	8005d82 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 80024ac:	2064      	movs	r0, #100	@ 0x64
 80024ae:	f002 fd11 	bl	8004ed4 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 80024b2:	bf00      	nop
 80024b4:	e7f2      	b.n	800249c <Error_Handler+0x8>
 80024b6:	bf00      	nop
 80024b8:	40020400 	.word	0x40020400

080024bc <queue_init>:
} BFSQueue;

static BFSQueue bfs_queue;

/* Queue Operations */
static void queue_init(BFSQueue* q) {
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    q->head = q->tail = 0;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <queue_empty>:

static int queue_empty(BFSQueue* q) {
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    return q->head == q->tail;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8d3 2880 	ldr.w	r2, [r3, #2176]	@ 0x880
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
 80024f8:	429a      	cmp	r2, r3
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <queue_push>:

static void queue_push(BFSQueue* q, Position pos) {
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	e883 0006 	stmia.w	r3, {r1, r2}
    if (q->tail < QUEUE_MAX_SIZE) {
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
 8002522:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8002526:	da0e      	bge.n	8002546 <queue_push+0x38>
        q->queue[q->tail++] = pos;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
 800252e:	1c59      	adds	r1, r3, #1
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	f8c2 1884 	str.w	r1, [r2, #2180]	@ 0x884
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	1d3a      	adds	r2, r7, #4
 800253e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002542:	e883 0003 	stmia.w	r3, {r0, r1}
    }
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <queue_pop>:

static Position queue_pop(BFSQueue* q) {
 8002552:	b490      	push	{r4, r7}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
    return q->queue[q->head++];
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	f8c2 1880 	str.w	r1, [r2, #2176]	@ 0x880
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	460c      	mov	r4, r1
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002578:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bc90      	pop	{r4, r7}
 8002584:	4770      	bx	lr
	...

08002588 <dwt_delay_us>:
static uint32_t dwt_cycles_per_us;

void dwt_delay_us(uint32_t us) {
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <dwt_delay_us+0x3c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * dwt_cycles_per_us;
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <dwt_delay_us+0x40>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	fb02 f303 	mul.w	r3, r2, r3
 80025a0:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks) { __NOP(); }
 80025a2:	e000      	b.n	80025a6 <dwt_delay_us+0x1e>
 80025a4:	bf00      	nop
 80025a6:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <dwt_delay_us+0x3c>)
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8f7      	bhi.n	80025a4 <dwt_delay_us+0x1c>
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e0001000 	.word	0xe0001000
 80025c8:	20001490 	.word	0x20001490

080025cc <dwt_delay_init>:
void dwt_delay_init(uint32_t cpu_hz) {
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <dwt_delay_init+0x3c>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002608 <dwt_delay_init+0x3c>)
 80025da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025de:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <dwt_delay_init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a09      	ldr	r2, [pc, #36]	@ (800260c <dwt_delay_init+0x40>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6013      	str	r3, [r2, #0]
    dwt_cycles_per_us = cpu_hz / 1000000U; // e.g., 84 for 84 MHz
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a08      	ldr	r2, [pc, #32]	@ (8002610 <dwt_delay_init+0x44>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	0c9b      	lsrs	r3, r3, #18
 80025f6:	4a07      	ldr	r2, [pc, #28]	@ (8002614 <dwt_delay_init+0x48>)
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000edf0 	.word	0xe000edf0
 800260c:	e0001000 	.word	0xe0001000
 8002610:	431bde83 	.word	0x431bde83
 8002614:	20001490 	.word	0x20001490

08002618 <initialize_maze_exploration>:


/**
 * @brief Initialize maze for exploration
 */
void initialize_maze_exploration(void) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n=== INITIALIZING MAZE EXPLORATION ===\r\n");
 800261e:	485a      	ldr	r0, [pc, #360]	@ (8002788 <initialize_maze_exploration+0x170>)
 8002620:	f7fe fd34 	bl	800108c <send_bluetooth_message>

    // Initialize maze structure
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e03e      	b.n	80026a8 <initialize_maze_exploration+0x90>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	e035      	b.n	800269c <initialize_maze_exploration+0x84>
            maze[x][y].distance = MAX_DISTANCE;
 8002630:	4956      	ldr	r1, [pc, #344]	@ (800278c <initialize_maze_exploration+0x174>)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	011a      	lsls	r2, r3, #4
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4413      	add	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	440b      	add	r3, r1
 800263e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002642:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 8002644:	4951      	ldr	r1, [pc, #324]	@ (800278c <initialize_maze_exploration+0x174>)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	011a      	lsls	r2, r3, #4
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4413      	add	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	440b      	add	r3, r1
 8002652:	3304      	adds	r3, #4
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 8002658:	494c      	ldr	r1, [pc, #304]	@ (800278c <initialize_maze_exploration+0x174>)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	011a      	lsls	r2, r3, #4
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4413      	add	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	440b      	add	r3, r1
 8002666:	330c      	adds	r3, #12
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

            // Initialize all walls as unknown (false)
            for (int dir = 0; dir < 4; dir++) {
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	e00e      	b.n	8002690 <initialize_maze_exploration+0x78>
                maze[x][y].walls[dir] = false;
 8002672:	4946      	ldr	r1, [pc, #280]	@ (800278c <initialize_maze_exploration+0x174>)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	011a      	lsls	r2, r3, #4
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4413      	add	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	18ca      	adds	r2, r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	3305      	adds	r3, #5
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
            for (int dir = 0; dir < 4; dir++) {
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3301      	adds	r3, #1
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b03      	cmp	r3, #3
 8002694:	dded      	ble.n	8002672 <initialize_maze_exploration+0x5a>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3301      	adds	r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b0f      	cmp	r3, #15
 80026a0:	ddc6      	ble.n	8002630 <initialize_maze_exploration+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3301      	adds	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	ddbd      	ble.n	800262a <initialize_maze_exploration+0x12>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 80026ae:	2300      	movs	r3, #0
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	e01f      	b.n	80026f4 <initialize_maze_exploration+0xdc>
        maze[i][0].walls[SOUTH] = true;                    // Bottom boundary
 80026b4:	4a35      	ldr	r2, [pc, #212]	@ (800278c <initialize_maze_exploration+0x174>)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	4413      	add	r3, r2
 80026bc:	3307      	adds	r3, #7
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true;          // Top boundary
 80026c2:	4a32      	ldr	r2, [pc, #200]	@ (800278c <initialize_maze_exploration+0x174>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	4413      	add	r3, r2
 80026ca:	33f5      	adds	r3, #245	@ 0xf5
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;                     // Left boundary
 80026d0:	4a2e      	ldr	r2, [pc, #184]	@ (800278c <initialize_maze_exploration+0x174>)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4413      	add	r3, r2
 80026d8:	3308      	adds	r3, #8
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;           // Right boundary
 80026de:	4a2b      	ldr	r2, [pc, #172]	@ (800278c <initialize_maze_exploration+0x174>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	4413      	add	r3, r2
 80026e6:	f603 7306 	addw	r3, r3, #3846	@ 0xf06
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	dddc      	ble.n	80026b4 <initialize_maze_exploration+0x9c>
    }

    // Set maze center coordinates
    maze_center_x1 = MAZE_SIZE / 2 - 1;
 80026fa:	4b25      	ldr	r3, [pc, #148]	@ (8002790 <initialize_maze_exploration+0x178>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
    maze_center_y1 = MAZE_SIZE / 2 - 1;
 8002700:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <initialize_maze_exploration+0x17c>)
 8002702:	2207      	movs	r2, #7
 8002704:	601a      	str	r2, [r3, #0]
    maze_center_x2 = MAZE_SIZE / 2;
 8002706:	4b24      	ldr	r3, [pc, #144]	@ (8002798 <initialize_maze_exploration+0x180>)
 8002708:	2208      	movs	r2, #8
 800270a:	601a      	str	r2, [r3, #0]
    maze_center_y2 = MAZE_SIZE / 2;
 800270c:	4b23      	ldr	r3, [pc, #140]	@ (800279c <initialize_maze_exploration+0x184>)
 800270e:	2208      	movs	r2, #8
 8002710:	601a      	str	r2, [r3, #0]

    // Initialize robot state
    robot.x = 0;
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <initialize_maze_exploration+0x188>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8002718:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <initialize_maze_exploration+0x188>)
 800271a:	2200      	movs	r2, #0
 800271c:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 800271e:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <initialize_maze_exploration+0x188>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 8002724:	4b1e      	ldr	r3, [pc, #120]	@ (80027a0 <initialize_maze_exploration+0x188>)
 8002726:	2200      	movs	r2, #0
 8002728:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 800272a:	4b1d      	ldr	r3, [pc, #116]	@ (80027a0 <initialize_maze_exploration+0x188>)
 800272c:	2200      	movs	r2, #0
 800272e:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 8002730:	4b1b      	ldr	r3, [pc, #108]	@ (80027a0 <initialize_maze_exploration+0x188>)
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]

    // Mark starting position
    maze[0][0].visited = true;
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <initialize_maze_exploration+0x174>)
 8002738:	2201      	movs	r2, #1
 800273a:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <initialize_maze_exploration+0x174>)
 800273e:	2201      	movs	r2, #1
 8002740:	60da      	str	r2, [r3, #12]

    // Reset exploration flags
    exploration_completed = 0;
 8002742:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <initialize_maze_exploration+0x18c>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
    optimal_path_calculated = 0;
 8002748:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <initialize_maze_exploration+0x190>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

    send_bluetooth_printf("Maze Size: %dx%d\r\n", MAZE_SIZE, MAZE_SIZE);
 800274e:	2210      	movs	r2, #16
 8002750:	2110      	movs	r1, #16
 8002752:	4816      	ldr	r0, [pc, #88]	@ (80027ac <initialize_maze_exploration+0x194>)
 8002754:	f7fe fcb0 	bl	80010b8 <send_bluetooth_printf>
    send_bluetooth_printf("Center: (%d,%d) to (%d,%d)\r\n",
 8002758:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <initialize_maze_exploration+0x178>)
 800275a:	6819      	ldr	r1, [r3, #0]
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <initialize_maze_exploration+0x17c>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <initialize_maze_exploration+0x180>)
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <initialize_maze_exploration+0x184>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	4603      	mov	r3, r0
 800276c:	4810      	ldr	r0, [pc, #64]	@ (80027b0 <initialize_maze_exploration+0x198>)
 800276e:	f7fe fca3 	bl	80010b8 <send_bluetooth_printf>
                         maze_center_x1, maze_center_y1, maze_center_x2, maze_center_y2);
    send_bluetooth_message("Maze exploration initialized successfully!\r\n");
 8002772:	4810      	ldr	r0, [pc, #64]	@ (80027b4 <initialize_maze_exploration+0x19c>)
 8002774:	f7fe fc8a 	bl	800108c <send_bluetooth_message>
    send_bluetooth_message("==========================================\r\n");
 8002778:	480f      	ldr	r0, [pc, #60]	@ (80027b8 <initialize_maze_exploration+0x1a0>)
 800277a:	f7fe fc87 	bl	800108c <send_bluetooth_message>
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	0800cea8 	.word	0x0800cea8
 800278c:	20000438 	.word	0x20000438
 8002790:	20001494 	.word	0x20001494
 8002794:	20001498 	.word	0x20001498
 8002798:	2000149c 	.word	0x2000149c
 800279c:	200014a0 	.word	0x200014a0
 80027a0:	20001438 	.word	0x20001438
 80027a4:	200014a4 	.word	0x200014a4
 80027a8:	200014a8 	.word	0x200014a8
 80027ac:	0800ced4 	.word	0x0800ced4
 80027b0:	0800cee8 	.word	0x0800cee8
 80027b4:	0800cf08 	.word	0x0800cf08
 80027b8:	0800cf38 	.word	0x0800cf38

080027bc <flood_fill_algorithm>:

/**
 * @brief Flood fill algorithm implementation
 */
void flood_fill_algorithm(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b098      	sub	sp, #96	@ 0x60
 80027c0:	af00      	add	r7, sp, #0
    // Initialize all distances to MAX_DISTANCE
    for (int x = 0; x < MAZE_SIZE; x++) {
 80027c2:	2300      	movs	r3, #0
 80027c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027c6:	e015      	b.n	80027f4 <flood_fill_algorithm+0x38>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80027c8:	2300      	movs	r3, #0
 80027ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027cc:	e00c      	b.n	80027e8 <flood_fill_algorithm+0x2c>
            maze[x][y].distance = MAX_DISTANCE;
 80027ce:	4984      	ldr	r1, [pc, #528]	@ (80029e0 <flood_fill_algorithm+0x224>)
 80027d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d2:	011a      	lsls	r2, r3, #4
 80027d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d6:	4413      	add	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	440b      	add	r3, r1
 80027dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80027e0:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 80027e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027e4:	3301      	adds	r3, #1
 80027e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	ddef      	ble.n	80027ce <flood_fill_algorithm+0x12>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80027ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f0:	3301      	adds	r3, #1
 80027f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	dde6      	ble.n	80027c8 <flood_fill_algorithm+0xc>
        }
    }

    // Initialize queue
    queue_init(&bfs_queue);
 80027fa:	487a      	ldr	r0, [pc, #488]	@ (80029e4 <flood_fill_algorithm+0x228>)
 80027fc:	f7ff fe5e 	bl	80024bc <queue_init>

    // Set goal distances and add to queue
    if (!robot.center_reached) {
 8002800:	4b79      	ldr	r3, [pc, #484]	@ (80029e8 <flood_fill_algorithm+0x22c>)
 8002802:	7b1b      	ldrb	r3, [r3, #12]
 8002804:	f083 0301 	eor.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d060      	beq.n	80028d0 <flood_fill_algorithm+0x114>
        // Heading to center
        maze[maze_center_x1][maze_center_y1].distance = 0;
 800280e:	4b77      	ldr	r3, [pc, #476]	@ (80029ec <flood_fill_algorithm+0x230>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b77      	ldr	r3, [pc, #476]	@ (80029f0 <flood_fill_algorithm+0x234>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4972      	ldr	r1, [pc, #456]	@ (80029e0 <flood_fill_algorithm+0x224>)
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	4413      	add	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	440b      	add	r3, r1
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
        maze[maze_center_x2][maze_center_y1].distance = 0;
 8002824:	4b73      	ldr	r3, [pc, #460]	@ (80029f4 <flood_fill_algorithm+0x238>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b71      	ldr	r3, [pc, #452]	@ (80029f0 <flood_fill_algorithm+0x234>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	496c      	ldr	r1, [pc, #432]	@ (80029e0 <flood_fill_algorithm+0x224>)
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	4413      	add	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	440b      	add	r3, r1
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
        maze[maze_center_x1][maze_center_y2].distance = 0;
 800283a:	4b6c      	ldr	r3, [pc, #432]	@ (80029ec <flood_fill_algorithm+0x230>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b6e      	ldr	r3, [pc, #440]	@ (80029f8 <flood_fill_algorithm+0x23c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4967      	ldr	r1, [pc, #412]	@ (80029e0 <flood_fill_algorithm+0x224>)
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	4413      	add	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	440b      	add	r3, r1
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
        maze[maze_center_x2][maze_center_y2].distance = 0;
 8002850:	4b68      	ldr	r3, [pc, #416]	@ (80029f4 <flood_fill_algorithm+0x238>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b68      	ldr	r3, [pc, #416]	@ (80029f8 <flood_fill_algorithm+0x23c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4961      	ldr	r1, [pc, #388]	@ (80029e0 <flood_fill_algorithm+0x224>)
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	4413      	add	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	440b      	add	r3, r1
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

        queue_push(&bfs_queue, (Position){maze_center_x1, maze_center_y1});
 8002866:	4b61      	ldr	r3, [pc, #388]	@ (80029ec <flood_fill_algorithm+0x230>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	637b      	str	r3, [r7, #52]	@ 0x34
 800286c:	4b60      	ldr	r3, [pc, #384]	@ (80029f0 <flood_fill_algorithm+0x234>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002872:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002876:	e893 0006 	ldmia.w	r3, {r1, r2}
 800287a:	485a      	ldr	r0, [pc, #360]	@ (80029e4 <flood_fill_algorithm+0x228>)
 800287c:	f7ff fe47 	bl	800250e <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x2, maze_center_y1});
 8002880:	4b5c      	ldr	r3, [pc, #368]	@ (80029f4 <flood_fill_algorithm+0x238>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002886:	4b5a      	ldr	r3, [pc, #360]	@ (80029f0 <flood_fill_algorithm+0x234>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	633b      	str	r3, [r7, #48]	@ 0x30
 800288c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002890:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002894:	4853      	ldr	r0, [pc, #332]	@ (80029e4 <flood_fill_algorithm+0x228>)
 8002896:	f7ff fe3a 	bl	800250e <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x1, maze_center_y2});
 800289a:	4b54      	ldr	r3, [pc, #336]	@ (80029ec <flood_fill_algorithm+0x230>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a0:	4b55      	ldr	r3, [pc, #340]	@ (80029f8 <flood_fill_algorithm+0x23c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028ae:	484d      	ldr	r0, [pc, #308]	@ (80029e4 <flood_fill_algorithm+0x228>)
 80028b0:	f7ff fe2d 	bl	800250e <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x2, maze_center_y2});
 80028b4:	4b4f      	ldr	r3, [pc, #316]	@ (80029f4 <flood_fill_algorithm+0x238>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	4b4f      	ldr	r3, [pc, #316]	@ (80029f8 <flood_fill_algorithm+0x23c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	623b      	str	r3, [r7, #32]
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028c8:	4846      	ldr	r0, [pc, #280]	@ (80029e4 <flood_fill_algorithm+0x228>)
 80028ca:	f7ff fe20 	bl	800250e <queue_push>
 80028ce:	e00d      	b.n	80028ec <flood_fill_algorithm+0x130>
    } else {
        // Returning to start
        maze[0][0].distance = 0;
 80028d0:	4b43      	ldr	r3, [pc, #268]	@ (80029e0 <flood_fill_algorithm+0x224>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
        queue_push(&bfs_queue, (Position){0, 0});
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028e6:	483f      	ldr	r0, [pc, #252]	@ (80029e4 <flood_fill_algorithm+0x228>)
 80028e8:	f7ff fe11 	bl	800250e <queue_push>
    }

    // Flood fill propagation
    int updates = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	657b      	str	r3, [r7, #84]	@ 0x54
    while (!queue_empty(&bfs_queue)) {
 80028f0:	e068      	b.n	80029c4 <flood_fill_algorithm+0x208>
        Position current = queue_pop(&bfs_queue);
 80028f2:	f107 030c 	add.w	r3, r7, #12
 80028f6:	493b      	ldr	r1, [pc, #236]	@ (80029e4 <flood_fill_algorithm+0x228>)
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fe2a 	bl	8002552 <queue_pop>
        int x = current.x;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	64fb      	str	r3, [r7, #76]	@ 0x4c
        int y = current.y;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Check all four directions
        for (int dir = 0; dir < 4; dir++) {
 8002906:	2300      	movs	r3, #0
 8002908:	653b      	str	r3, [r7, #80]	@ 0x50
 800290a:	e058      	b.n	80029be <flood_fill_algorithm+0x202>
            if (maze[x][y].walls[dir]) continue; // Wall blocks this direction
 800290c:	4934      	ldr	r1, [pc, #208]	@ (80029e0 <flood_fill_algorithm+0x224>)
 800290e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002910:	011a      	lsls	r2, r3, #4
 8002912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002914:	4413      	add	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	18ca      	adds	r2, r1, r3
 800291a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800291c:	4413      	add	r3, r2
 800291e:	3305      	adds	r3, #5
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d145      	bne.n	80029b2 <flood_fill_algorithm+0x1f6>

            int nx = x + dx[dir];
 8002926:	4a35      	ldr	r2, [pc, #212]	@ (80029fc <flood_fill_algorithm+0x240>)
 8002928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800292a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002930:	4413      	add	r3, r2
 8002932:	647b      	str	r3, [r7, #68]	@ 0x44
            int ny = y + dy[dir];
 8002934:	4a32      	ldr	r2, [pc, #200]	@ (8002a00 <flood_fill_algorithm+0x244>)
 8002936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800293e:	4413      	add	r3, r2
 8002940:	643b      	str	r3, [r7, #64]	@ 0x40

            // Check bounds
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002944:	2b00      	cmp	r3, #0
 8002946:	db36      	blt.n	80029b6 <flood_fill_algorithm+0x1fa>
 8002948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800294a:	2b0f      	cmp	r3, #15
 800294c:	dc33      	bgt.n	80029b6 <flood_fill_algorithm+0x1fa>
 800294e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	db30      	blt.n	80029b6 <flood_fill_algorithm+0x1fa>
 8002954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002956:	2b0f      	cmp	r3, #15
 8002958:	dc2d      	bgt.n	80029b6 <flood_fill_algorithm+0x1fa>

            int new_distance = maze[x][y].distance + 1;
 800295a:	4921      	ldr	r1, [pc, #132]	@ (80029e0 <flood_fill_algorithm+0x224>)
 800295c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800295e:	011a      	lsls	r2, r3, #4
 8002960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002962:	4413      	add	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	440b      	add	r3, r1
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3301      	adds	r3, #1
 800296c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (new_distance < maze[nx][ny].distance) {
 800296e:	491c      	ldr	r1, [pc, #112]	@ (80029e0 <flood_fill_algorithm+0x224>)
 8002970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002972:	011a      	lsls	r2, r3, #4
 8002974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002976:	4413      	add	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	440b      	add	r3, r1
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002980:	429a      	cmp	r2, r3
 8002982:	da19      	bge.n	80029b8 <flood_fill_algorithm+0x1fc>
                maze[nx][ny].distance = new_distance;
 8002984:	4916      	ldr	r1, [pc, #88]	@ (80029e0 <flood_fill_algorithm+0x224>)
 8002986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002988:	011a      	lsls	r2, r3, #4
 800298a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800298c:	4413      	add	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	440b      	add	r3, r1
 8002992:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002994:	601a      	str	r2, [r3, #0]
                queue_push(&bfs_queue, (Position){nx, ny});
 8002996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80029a4:	480f      	ldr	r0, [pc, #60]	@ (80029e4 <flood_fill_algorithm+0x228>)
 80029a6:	f7ff fdb2 	bl	800250e <queue_push>
                updates++;
 80029aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ac:	3301      	adds	r3, #1
 80029ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80029b0:	e002      	b.n	80029b8 <flood_fill_algorithm+0x1fc>
            if (maze[x][y].walls[dir]) continue; // Wall blocks this direction
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <flood_fill_algorithm+0x1fc>
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 80029b6:	bf00      	nop
        for (int dir = 0; dir < 4; dir++) {
 80029b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ba:	3301      	adds	r3, #1
 80029bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80029be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	dda3      	ble.n	800290c <flood_fill_algorithm+0x150>
    while (!queue_empty(&bfs_queue)) {
 80029c4:	4807      	ldr	r0, [pc, #28]	@ (80029e4 <flood_fill_algorithm+0x228>)
 80029c6:	f7ff fd8d 	bl	80024e4 <queue_empty>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d090      	beq.n	80028f2 <flood_fill_algorithm+0x136>
            }
        }
    }

    send_bluetooth_printf("Flood fill complete: %d updates\r\n", updates);
 80029d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029d2:	480c      	ldr	r0, [pc, #48]	@ (8002a04 <flood_fill_algorithm+0x248>)
 80029d4:	f7fe fb70 	bl	80010b8 <send_bluetooth_printf>
}
 80029d8:	bf00      	nop
 80029da:	3760      	adds	r7, #96	@ 0x60
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000438 	.word	0x20000438
 80029e4:	200014ac 	.word	0x200014ac
 80029e8:	20001438 	.word	0x20001438
 80029ec:	20001494 	.word	0x20001494
 80029f0:	20001498 	.word	0x20001498
 80029f4:	2000149c 	.word	0x2000149c
 80029f8:	200014a0 	.word	0x200014a0
 80029fc:	0800df88 	.word	0x0800df88
 8002a00:	0800df98 	.word	0x0800df98
 8002a04:	0800cf68 	.word	0x0800cf68

08002a08 <get_best_direction>:

/**
 * @brief Get best direction to move based on flood fill values
 */
int get_best_direction(void) {
 8002a08:	b480      	push	{r7}
 8002a0a:	b093      	sub	sp, #76	@ 0x4c
 8002a0c:	af00      	add	r7, sp, #0
    int best_dir = robot.direction;
 8002a0e:	4b89      	ldr	r3, [pc, #548]	@ (8002c34 <get_best_direction+0x22c>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	647b      	str	r3, [r7, #68]	@ 0x44
    int min_distance = MAX_DISTANCE;
 8002a14:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002a18:	643b      	str	r3, [r7, #64]	@ 0x40
    int min_visits = 999;
 8002a1a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    bool found_unvisited = false;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Direction priority: forward, right, left, backward
    int priority[4];
    priority[0] = robot.direction;                    // Forward
 8002a26:	4b83      	ldr	r3, [pc, #524]	@ (8002c34 <get_best_direction+0x22c>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
    priority[1] = (robot.direction + 1) % 4;         // Right
 8002a2c:	4b81      	ldr	r3, [pc, #516]	@ (8002c34 <get_best_direction+0x22c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	3301      	adds	r3, #1
 8002a32:	425a      	negs	r2, r3
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	f002 0203 	and.w	r2, r2, #3
 8002a3c:	bf58      	it	pl
 8002a3e:	4253      	negpl	r3, r2
 8002a40:	607b      	str	r3, [r7, #4]
    priority[2] = (robot.direction + 3) % 4;         // Left
 8002a42:	4b7c      	ldr	r3, [pc, #496]	@ (8002c34 <get_best_direction+0x22c>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	3303      	adds	r3, #3
 8002a48:	425a      	negs	r2, r3
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	f002 0203 	and.w	r2, r2, #3
 8002a52:	bf58      	it	pl
 8002a54:	4253      	negpl	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]
    priority[3] = (robot.direction + 2) % 4;         // Backward
 8002a58:	4b76      	ldr	r3, [pc, #472]	@ (8002c34 <get_best_direction+0x22c>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	425a      	negs	r2, r3
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	f002 0203 	and.w	r2, r2, #3
 8002a68:	bf58      	it	pl
 8002a6a:	4253      	negpl	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

    // First pass: prioritize unvisited cells
    for (int p = 0; p < 4; p++) {
 8002a6e:	2300      	movs	r3, #0
 8002a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a72:	e05c      	b.n	8002b2e <get_best_direction+0x126>
        int dir = priority[p];
 8002a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	3348      	adds	r3, #72	@ 0x48
 8002a7a:	443b      	add	r3, r7
 8002a7c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002a80:	61bb      	str	r3, [r7, #24]

        // Check if there's a wall in this direction
        if (maze[robot.x][robot.y].walls[dir]) continue;
 8002a82:	4b6c      	ldr	r3, [pc, #432]	@ (8002c34 <get_best_direction+0x22c>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b6b      	ldr	r3, [pc, #428]	@ (8002c34 <get_best_direction+0x22c>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	496b      	ldr	r1, [pc, #428]	@ (8002c38 <get_best_direction+0x230>)
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	4413      	add	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	18ca      	adds	r2, r1, r3
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	4413      	add	r3, r2
 8002a98:	3305      	adds	r3, #5
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d140      	bne.n	8002b22 <get_best_direction+0x11a>

        int nx = robot.x + dx[dir];
 8002aa0:	4b64      	ldr	r3, [pc, #400]	@ (8002c34 <get_best_direction+0x22c>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4965      	ldr	r1, [pc, #404]	@ (8002c3c <get_best_direction+0x234>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002aac:	4413      	add	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
        int ny = robot.y + dy[dir];
 8002ab0:	4b60      	ldr	r3, [pc, #384]	@ (8002c34 <get_best_direction+0x22c>)
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	4962      	ldr	r1, [pc, #392]	@ (8002c40 <get_best_direction+0x238>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002abc:	4413      	add	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

        // Check bounds
        if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db2f      	blt.n	8002b26 <get_best_direction+0x11e>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	dc2c      	bgt.n	8002b26 <get_best_direction+0x11e>
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db29      	blt.n	8002b26 <get_best_direction+0x11e>
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b0f      	cmp	r3, #15
 8002ad6:	dc26      	bgt.n	8002b26 <get_best_direction+0x11e>

        // Prioritize unvisited cells
        if (maze[nx][ny].visit_count == 0) {
 8002ad8:	4957      	ldr	r1, [pc, #348]	@ (8002c38 <get_best_direction+0x230>)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	011a      	lsls	r2, r3, #4
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	440b      	add	r3, r1
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11c      	bne.n	8002b28 <get_best_direction+0x120>
            found_unvisited = true;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            if (maze[nx][ny].distance < min_distance) {
 8002af4:	4950      	ldr	r1, [pc, #320]	@ (8002c38 <get_best_direction+0x230>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	011a      	lsls	r2, r3, #4
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	440b      	add	r3, r1
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b06:	429a      	cmp	r2, r3
 8002b08:	dd0e      	ble.n	8002b28 <get_best_direction+0x120>
                min_distance = maze[nx][ny].distance;
 8002b0a:	494b      	ldr	r1, [pc, #300]	@ (8002c38 <get_best_direction+0x230>)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	011a      	lsls	r2, r3, #4
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	440b      	add	r3, r1
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	643b      	str	r3, [r7, #64]	@ 0x40
                best_dir = dir;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b20:	e002      	b.n	8002b28 <get_best_direction+0x120>
        if (maze[robot.x][robot.y].walls[dir]) continue;
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <get_best_direction+0x120>
        if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002b26:	bf00      	nop
    for (int p = 0; p < 4; p++) {
 8002b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	dd9f      	ble.n	8002a74 <get_best_direction+0x6c>
            }
        }
    }

    // Second pass: if no unvisited cells, choose based on distance and visit count
    if (!found_unvisited) {
 8002b34:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d070      	beq.n	8002c24 <get_best_direction+0x21c>
        for (int p = 0; p < 4; p++) {
 8002b42:	2300      	movs	r3, #0
 8002b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b46:	e06a      	b.n	8002c1e <get_best_direction+0x216>
            int dir = priority[p];
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	3348      	adds	r3, #72	@ 0x48
 8002b4e:	443b      	add	r3, r7
 8002b50:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002b54:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (maze[robot.x][robot.y].walls[dir]) continue;
 8002b56:	4b37      	ldr	r3, [pc, #220]	@ (8002c34 <get_best_direction+0x22c>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b36      	ldr	r3, [pc, #216]	@ (8002c34 <get_best_direction+0x22c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4936      	ldr	r1, [pc, #216]	@ (8002c38 <get_best_direction+0x230>)
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	4413      	add	r3, r2
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	18ca      	adds	r2, r1, r3
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3305      	adds	r3, #5
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d14e      	bne.n	8002c12 <get_best_direction+0x20a>

            int nx = robot.x + dx[dir];
 8002b74:	4b2f      	ldr	r3, [pc, #188]	@ (8002c34 <get_best_direction+0x22c>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4930      	ldr	r1, [pc, #192]	@ (8002c3c <get_best_direction+0x234>)
 8002b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b80:	4413      	add	r3, r2
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28
            int ny = robot.y + dy[dir];
 8002b84:	4b2b      	ldr	r3, [pc, #172]	@ (8002c34 <get_best_direction+0x22c>)
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	492d      	ldr	r1, [pc, #180]	@ (8002c40 <get_best_direction+0x238>)
 8002b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b90:	4413      	add	r3, r2
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24

            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db3d      	blt.n	8002c16 <get_best_direction+0x20e>
 8002b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	dc3a      	bgt.n	8002c16 <get_best_direction+0x20e>
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db37      	blt.n	8002c16 <get_best_direction+0x20e>
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	dc34      	bgt.n	8002c16 <get_best_direction+0x20e>

            int nd = maze[nx][ny].distance;
 8002bac:	4922      	ldr	r1, [pc, #136]	@ (8002c38 <get_best_direction+0x230>)
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	011a      	lsls	r2, r3, #4
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	4413      	add	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	440b      	add	r3, r1
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	623b      	str	r3, [r7, #32]
            int nv = maze[nx][ny].visit_count;
 8002bbe:	491e      	ldr	r1, [pc, #120]	@ (8002c38 <get_best_direction+0x230>)
 8002bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc2:	011a      	lsls	r2, r3, #4
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	4413      	add	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	440b      	add	r3, r1
 8002bcc:	330c      	adds	r3, #12
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61fb      	str	r3, [r7, #28]

            // Choose cell with minimum distance, then minimum visits, then prefer forward
            if (nd < min_distance ||
 8002bd2:	6a3a      	ldr	r2, [r7, #32]
 8002bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	db14      	blt.n	8002c04 <get_best_direction+0x1fc>
 8002bda:	6a3a      	ldr	r2, [r7, #32]
 8002bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d103      	bne.n	8002bea <get_best_direction+0x1e2>
                (nd == min_distance && nv < min_visits) ||
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be6:	429a      	cmp	r2, r3
 8002be8:	db0c      	blt.n	8002c04 <get_best_direction+0x1fc>
 8002bea:	6a3a      	ldr	r2, [r7, #32]
 8002bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d112      	bne.n	8002c18 <get_best_direction+0x210>
                (nd == min_distance && nv == min_visits && dir == robot.direction)) {
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d10e      	bne.n	8002c18 <get_best_direction+0x210>
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002c34 <get_best_direction+0x22c>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d109      	bne.n	8002c18 <get_best_direction+0x210>
                min_distance = nd;
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	643b      	str	r3, [r7, #64]	@ 0x40
                min_visits = nv;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                best_dir = dir;
 8002c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c10:	e002      	b.n	8002c18 <get_best_direction+0x210>
            if (maze[robot.x][robot.y].walls[dir]) continue;
 8002c12:	bf00      	nop
 8002c14:	e000      	b.n	8002c18 <get_best_direction+0x210>
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002c16:	bf00      	nop
        for (int p = 0; p < 4; p++) {
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	dd91      	ble.n	8002b48 <get_best_direction+0x140>
            }
        }
    }

    return best_dir;
 8002c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	374c      	adds	r7, #76	@ 0x4c
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20001438 	.word	0x20001438
 8002c38:	20000438 	.word	0x20000438
 8002c3c:	0800df88 	.word	0x0800df88
 8002c40:	0800df98 	.word	0x0800df98

08002c44 <turn_to_direction>:

/**
 * @brief Turn robot to face the specified direction
 */
void turn_to_direction(int target_direction) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
    int current_dir = robot.direction;
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <turn_to_direction+0x84>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	60fb      	str	r3, [r7, #12]
    int turn_diff = (target_direction - current_dir + 4) % 4;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	3304      	adds	r3, #4
 8002c5a:	425a      	negs	r2, r3
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	f002 0203 	and.w	r2, r2, #3
 8002c64:	bf58      	it	pl
 8002c66:	4253      	negpl	r3, r2
 8002c68:	60bb      	str	r3, [r7, #8]

    switch (turn_diff) {
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d823      	bhi.n	8002cb8 <turn_to_direction+0x74>
 8002c70:	a201      	add	r2, pc, #4	@ (adr r2, 8002c78 <turn_to_direction+0x34>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002cb9 	.word	0x08002cb9
 8002c7c:	08002c89 	.word	0x08002c89
 8002c80:	08002c99 	.word	0x08002c99
 8002c84:	08002ca9 	.word	0x08002ca9
        case 0:
            // Already facing correct direction
            break;
        case 1:
            // Turn right (90 degrees clockwise)
            send_bluetooth_message("Turning RIGHT...\r\n");
 8002c88:	4810      	ldr	r0, [pc, #64]	@ (8002ccc <turn_to_direction+0x88>)
 8002c8a:	f7fe f9ff 	bl	800108c <send_bluetooth_message>
            turn_right();
 8002c8e:	f000 fca5 	bl	80035dc <turn_right>
            play_turn_beep();
 8002c92:	f7fe f9f1 	bl	8001078 <play_turn_beep>
            break;
 8002c96:	e00f      	b.n	8002cb8 <turn_to_direction+0x74>
        case 2:
            // Turn around (180 degrees)
            send_bluetooth_message("Turning AROUND...\r\n");
 8002c98:	480d      	ldr	r0, [pc, #52]	@ (8002cd0 <turn_to_direction+0x8c>)
 8002c9a:	f7fe f9f7 	bl	800108c <send_bluetooth_message>
            turn_around();
 8002c9e:	f000 fcb9 	bl	8003614 <turn_around>
            play_turn_beep();
 8002ca2:	f7fe f9e9 	bl	8001078 <play_turn_beep>
            break;
 8002ca6:	e007      	b.n	8002cb8 <turn_to_direction+0x74>
        case 3:
            // Turn left (90 degrees counter-clockwise)
            send_bluetooth_message("Turning LEFT...\r\n");
 8002ca8:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <turn_to_direction+0x90>)
 8002caa:	f7fe f9ef 	bl	800108c <send_bluetooth_message>
            turn_left();
 8002cae:	f000 fc79 	bl	80035a4 <turn_left>
            play_turn_beep();
 8002cb2:	f7fe f9e1 	bl	8001078 <play_turn_beep>
            break;
 8002cb6:	bf00      	nop
    }

    robot.direction = target_direction;
 8002cb8:	4a03      	ldr	r2, [pc, #12]	@ (8002cc8 <turn_to_direction+0x84>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6093      	str	r3, [r2, #8]
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20001438 	.word	0x20001438
 8002ccc:	0800cf8c 	.word	0x0800cf8c
 8002cd0:	0800cfa0 	.word	0x0800cfa0
 8002cd4:	0800cfb4 	.word	0x0800cfb4

08002cd8 <move_forward_one_cell>:

/**
 * @brief Move forward one cell with precise control
 */
bool move_forward_one_cell(void) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
    send_bluetooth_printf("Moving forward from (%d,%d) to ", robot.x, robot.y);
 8002cde:	4b32      	ldr	r3, [pc, #200]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a31      	ldr	r2, [pc, #196]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002ce4:	6852      	ldr	r2, [r2, #4]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4830      	ldr	r0, [pc, #192]	@ (8002dac <move_forward_one_cell+0xd4>)
 8002cea:	f7fe f9e5 	bl	80010b8 <send_bluetooth_printf>

    // Calculate new position
    int new_x = robot.x + dx[robot.direction];
 8002cee:	4b2e      	ldr	r3, [pc, #184]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	492e      	ldr	r1, [pc, #184]	@ (8002db0 <move_forward_one_cell+0xd8>)
 8002cf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	607b      	str	r3, [r7, #4]
    int new_y = robot.y + dy[robot.direction];
 8002d00:	4b29      	ldr	r3, [pc, #164]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4b28      	ldr	r3, [pc, #160]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	492a      	ldr	r1, [pc, #168]	@ (8002db4 <move_forward_one_cell+0xdc>)
 8002d0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d0e:	4413      	add	r3, r2
 8002d10:	603b      	str	r3, [r7, #0]

    // Check bounds
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db08      	blt.n	8002d2a <move_forward_one_cell+0x52>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b0f      	cmp	r3, #15
 8002d1c:	dc05      	bgt.n	8002d2a <move_forward_one_cell+0x52>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db02      	blt.n	8002d2a <move_forward_one_cell+0x52>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	dd04      	ble.n	8002d34 <move_forward_one_cell+0x5c>
        send_bluetooth_message("BLOCKED - Out of bounds!\r\n");
 8002d2a:	4823      	ldr	r0, [pc, #140]	@ (8002db8 <move_forward_one_cell+0xe0>)
 8002d2c:	f7fe f9ae 	bl	800108c <send_bluetooth_message>
        return false;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e035      	b.n	8002da0 <move_forward_one_cell+0xc8>
    }

    send_bluetooth_printf("(%d,%d)\r\n", new_x, new_y);
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4820      	ldr	r0, [pc, #128]	@ (8002dbc <move_forward_one_cell+0xe4>)
 8002d3a:	f7fe f9bd 	bl	80010b8 <send_bluetooth_printf>

    // Reset PID controllers
    moveStraightGyroPID_Reset();
 8002d3e:	f000 fd55 	bl	80037ec <moveStraightGyroPID_Reset>

    // Use precise encoder-based movement
    move_forward_distance(ENCODER_COUNTS_PER_CELL);
 8002d42:	f240 50b5 	movw	r0, #1461	@ 0x5b5
 8002d46:	f000 fca7 	bl	8003698 <move_forward_distance>

    // Update robot position
    robot.x = new_x;
 8002d4a:	4a17      	ldr	r2, [pc, #92]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 8002d50:	4a15      	ldr	r2, [pc, #84]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6053      	str	r3, [r2, #4]
    robot.exploration_steps++;
 8002d56:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	4a12      	ldr	r2, [pc, #72]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002d5e:	6113      	str	r3, [r2, #16]

    // Mark cell as visited
    maze[robot.x][robot.y].visited = true;
 8002d60:	4b11      	ldr	r3, [pc, #68]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b10      	ldr	r3, [pc, #64]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4915      	ldr	r1, [pc, #84]	@ (8002dc0 <move_forward_one_cell+0xe8>)
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	4413      	add	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	440b      	add	r3, r1
 8002d72:	3304      	adds	r3, #4
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <move_forward_one_cell+0xd0>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	480f      	ldr	r0, [pc, #60]	@ (8002dc0 <move_forward_one_cell+0xe8>)
 8002d82:	0111      	lsls	r1, r2, #4
 8002d84:	4419      	add	r1, r3
 8002d86:	0109      	lsls	r1, r1, #4
 8002d88:	4401      	add	r1, r0
 8002d8a:	310c      	adds	r1, #12
 8002d8c:	6809      	ldr	r1, [r1, #0]
 8002d8e:	3101      	adds	r1, #1
 8002d90:	480b      	ldr	r0, [pc, #44]	@ (8002dc0 <move_forward_one_cell+0xe8>)
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	4413      	add	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	4403      	add	r3, r0
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	6019      	str	r1, [r3, #0]

    return true;
 8002d9e:	2301      	movs	r3, #1
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20001438 	.word	0x20001438
 8002dac:	0800cfc8 	.word	0x0800cfc8
 8002db0:	0800df88 	.word	0x0800df88
 8002db4:	0800df98 	.word	0x0800df98
 8002db8:	0800cfe8 	.word	0x0800cfe8
 8002dbc:	0800d004 	.word	0x0800d004
 8002dc0:	20000438 	.word	0x20000438

08002dc4 <is_at_goal>:

/**
 * @brief Check if robot is at goal position
 */
bool is_at_goal(void) {
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
    if (!robot.center_reached) {
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e3c <is_at_goal+0x78>)
 8002dca:	7b1b      	ldrb	r3, [r3, #12]
 8002dcc:	f083 0301 	eor.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01e      	beq.n	8002e14 <is_at_goal+0x50>
        // Check if at center
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 8002dd6:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <is_at_goal+0x78>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <is_at_goal+0x7c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d005      	beq.n	8002dee <is_at_goal+0x2a>
 8002de2:	4b16      	ldr	r3, [pc, #88]	@ (8002e3c <is_at_goal+0x78>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b17      	ldr	r3, [pc, #92]	@ (8002e44 <is_at_goal+0x80>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d10d      	bne.n	8002e0a <is_at_goal+0x46>
                (robot.y == maze_center_y1 || robot.y == maze_center_y2));
 8002dee:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <is_at_goal+0x78>)
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <is_at_goal+0x84>)
 8002df4:	681b      	ldr	r3, [r3, #0]
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d005      	beq.n	8002e06 <is_at_goal+0x42>
                (robot.y == maze_center_y1 || robot.y == maze_center_y2));
 8002dfa:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <is_at_goal+0x78>)
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <is_at_goal+0x88>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d101      	bne.n	8002e0a <is_at_goal+0x46>
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <is_at_goal+0x48>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e00d      	b.n	8002e30 <is_at_goal+0x6c>
    } else {
        // Check if returned to start
        return (robot.x == 0 && robot.y == 0);
 8002e14:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <is_at_goal+0x78>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d105      	bne.n	8002e28 <is_at_goal+0x64>
 8002e1c:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <is_at_goal+0x78>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <is_at_goal+0x64>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <is_at_goal+0x66>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	b2db      	uxtb	r3, r3
    }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20001438 	.word	0x20001438
 8002e40:	20001494 	.word	0x20001494
 8002e44:	2000149c 	.word	0x2000149c
 8002e48:	20001498 	.word	0x20001498
 8002e4c:	200014a0 	.word	0x200014a0

08002e50 <update_maze_walls>:

/**
 * @brief Update walls based on sensor readings
 */
void update_maze_walls(void) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
    // Update sensors first
    update_sensors();
 8002e56:	f001 f8cd 	bl	8003ff4 <update_sensors>

    // Update wall information based on current direction and sensor readings
    if (sensors.wall_front) {
 8002e5a:	4b85      	ldr	r3, [pc, #532]	@ (8003070 <update_maze_walls+0x220>)
 8002e5c:	7a9b      	ldrb	r3, [r3, #10]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d041      	beq.n	8002ee6 <update_maze_walls+0x96>
        maze[robot.x][robot.y].walls[robot.direction] = true;
 8002e62:	4b84      	ldr	r3, [pc, #528]	@ (8003074 <update_maze_walls+0x224>)
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	4b83      	ldr	r3, [pc, #524]	@ (8003074 <update_maze_walls+0x224>)
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	4b82      	ldr	r3, [pc, #520]	@ (8003074 <update_maze_walls+0x224>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	4882      	ldr	r0, [pc, #520]	@ (8003078 <update_maze_walls+0x228>)
 8002e70:	0109      	lsls	r1, r1, #4
 8002e72:	440a      	add	r2, r1
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	4402      	add	r2, r0
 8002e78:	4413      	add	r3, r2
 8002e7a:	3305      	adds	r3, #5
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]

        // Update opposite wall in neighbor cell
        int nx = robot.x + dx[robot.direction];
 8002e80:	4b7c      	ldr	r3, [pc, #496]	@ (8003074 <update_maze_walls+0x224>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b7b      	ldr	r3, [pc, #492]	@ (8003074 <update_maze_walls+0x224>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	497c      	ldr	r1, [pc, #496]	@ (800307c <update_maze_walls+0x22c>)
 8002e8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e8e:	4413      	add	r3, r2
 8002e90:	61fb      	str	r3, [r7, #28]
        int ny = robot.y + dy[robot.direction];
 8002e92:	4b78      	ldr	r3, [pc, #480]	@ (8003074 <update_maze_walls+0x224>)
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4b77      	ldr	r3, [pc, #476]	@ (8003074 <update_maze_walls+0x224>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4979      	ldr	r1, [pc, #484]	@ (8003080 <update_maze_walls+0x230>)
 8002e9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db1d      	blt.n	8002ee6 <update_maze_walls+0x96>
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2b0f      	cmp	r3, #15
 8002eae:	dc1a      	bgt.n	8002ee6 <update_maze_walls+0x96>
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	db17      	blt.n	8002ee6 <update_maze_walls+0x96>
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b0f      	cmp	r3, #15
 8002eba:	dc14      	bgt.n	8002ee6 <update_maze_walls+0x96>
            maze[nx][ny].walls[(robot.direction + 2) % 4] = true;
 8002ebc:	4b6d      	ldr	r3, [pc, #436]	@ (8003074 <update_maze_walls+0x224>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	425a      	negs	r2, r3
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	f002 0203 	and.w	r2, r2, #3
 8002ecc:	bf58      	it	pl
 8002ece:	4253      	negpl	r3, r2
 8002ed0:	4869      	ldr	r0, [pc, #420]	@ (8003078 <update_maze_walls+0x228>)
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	0111      	lsls	r1, r2, #4
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	440a      	add	r2, r1
 8002eda:	0112      	lsls	r2, r2, #4
 8002edc:	4402      	add	r2, r0
 8002ede:	4413      	add	r3, r2
 8002ee0:	3305      	adds	r3, #5
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_left) {
 8002ee6:	4b62      	ldr	r3, [pc, #392]	@ (8003070 <update_maze_walls+0x220>)
 8002ee8:	7adb      	ldrb	r3, [r3, #11]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d048      	beq.n	8002f80 <update_maze_walls+0x130>
        int left_dir = (robot.direction + 3) % 4;
 8002eee:	4b61      	ldr	r3, [pc, #388]	@ (8003074 <update_maze_walls+0x224>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	3303      	adds	r3, #3
 8002ef4:	425a      	negs	r2, r3
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	f002 0203 	and.w	r2, r2, #3
 8002efe:	bf58      	it	pl
 8002f00:	4253      	negpl	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
        maze[robot.x][robot.y].walls[left_dir] = true;
 8002f04:	4b5b      	ldr	r3, [pc, #364]	@ (8003074 <update_maze_walls+0x224>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b5a      	ldr	r3, [pc, #360]	@ (8003074 <update_maze_walls+0x224>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	495a      	ldr	r1, [pc, #360]	@ (8003078 <update_maze_walls+0x228>)
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	4413      	add	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	18ca      	adds	r2, r1, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	4413      	add	r3, r2
 8002f1a:	3305      	adds	r3, #5
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]

        int nx = robot.x + dx[left_dir];
 8002f20:	4b54      	ldr	r3, [pc, #336]	@ (8003074 <update_maze_walls+0x224>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4955      	ldr	r1, [pc, #340]	@ (800307c <update_maze_walls+0x22c>)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        int ny = robot.y + dy[left_dir];
 8002f30:	4b50      	ldr	r3, [pc, #320]	@ (8003074 <update_maze_walls+0x224>)
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4952      	ldr	r1, [pc, #328]	@ (8003080 <update_maze_walls+0x230>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db1c      	blt.n	8002f80 <update_maze_walls+0x130>
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b0f      	cmp	r3, #15
 8002f4a:	dc19      	bgt.n	8002f80 <update_maze_walls+0x130>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db16      	blt.n	8002f80 <update_maze_walls+0x130>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	dc13      	bgt.n	8002f80 <update_maze_walls+0x130>
            maze[nx][ny].walls[(left_dir + 2) % 4] = true;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	425a      	negs	r2, r3
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	f002 0203 	and.w	r2, r2, #3
 8002f66:	bf58      	it	pl
 8002f68:	4253      	negpl	r3, r2
 8002f6a:	4843      	ldr	r0, [pc, #268]	@ (8003078 <update_maze_walls+0x228>)
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	0111      	lsls	r1, r2, #4
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	440a      	add	r2, r1
 8002f74:	0112      	lsls	r2, r2, #4
 8002f76:	4402      	add	r2, r0
 8002f78:	4413      	add	r3, r2
 8002f7a:	3305      	adds	r3, #5
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_right) {
 8002f80:	4b3b      	ldr	r3, [pc, #236]	@ (8003070 <update_maze_walls+0x220>)
 8002f82:	7b1b      	ldrb	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d048      	beq.n	800301a <update_maze_walls+0x1ca>
        int right_dir = (robot.direction + 1) % 4;
 8002f88:	4b3a      	ldr	r3, [pc, #232]	@ (8003074 <update_maze_walls+0x224>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	425a      	negs	r2, r3
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	f002 0203 	and.w	r2, r2, #3
 8002f98:	bf58      	it	pl
 8002f9a:	4253      	negpl	r3, r2
 8002f9c:	60bb      	str	r3, [r7, #8]
        maze[robot.x][robot.y].walls[right_dir] = true;
 8002f9e:	4b35      	ldr	r3, [pc, #212]	@ (8003074 <update_maze_walls+0x224>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <update_maze_walls+0x224>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4934      	ldr	r1, [pc, #208]	@ (8003078 <update_maze_walls+0x228>)
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	4413      	add	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	18ca      	adds	r2, r1, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3305      	adds	r3, #5
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]

        int nx = robot.x + dx[right_dir];
 8002fba:	4b2e      	ldr	r3, [pc, #184]	@ (8003074 <update_maze_walls+0x224>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	492f      	ldr	r1, [pc, #188]	@ (800307c <update_maze_walls+0x22c>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	607b      	str	r3, [r7, #4]
        int ny = robot.y + dy[right_dir];
 8002fca:	4b2a      	ldr	r3, [pc, #168]	@ (8003074 <update_maze_walls+0x224>)
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	492c      	ldr	r1, [pc, #176]	@ (8003080 <update_maze_walls+0x230>)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	603b      	str	r3, [r7, #0]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	db1c      	blt.n	800301a <update_maze_walls+0x1ca>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b0f      	cmp	r3, #15
 8002fe4:	dc19      	bgt.n	800301a <update_maze_walls+0x1ca>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db16      	blt.n	800301a <update_maze_walls+0x1ca>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b0f      	cmp	r3, #15
 8002ff0:	dc13      	bgt.n	800301a <update_maze_walls+0x1ca>
            maze[nx][ny].walls[(right_dir + 2) % 4] = true;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	425a      	negs	r2, r3
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	f002 0203 	and.w	r2, r2, #3
 8003000:	bf58      	it	pl
 8003002:	4253      	negpl	r3, r2
 8003004:	481c      	ldr	r0, [pc, #112]	@ (8003078 <update_maze_walls+0x228>)
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	0111      	lsls	r1, r2, #4
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	440a      	add	r2, r1
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	4402      	add	r2, r0
 8003012:	4413      	add	r3, r2
 8003014:	3305      	adds	r3, #5
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
        }
    }

    // Send wall detection feedback
    if (sensors.wall_front || sensors.wall_left || sensors.wall_right) {
 800301a:	4b15      	ldr	r3, [pc, #84]	@ (8003070 <update_maze_walls+0x220>)
 800301c:	7a9b      	ldrb	r3, [r3, #10]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <update_maze_walls+0x1e2>
 8003022:	4b13      	ldr	r3, [pc, #76]	@ (8003070 <update_maze_walls+0x220>)
 8003024:	7adb      	ldrb	r3, [r3, #11]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d103      	bne.n	8003032 <update_maze_walls+0x1e2>
 800302a:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <update_maze_walls+0x220>)
 800302c:	7b1b      	ldrb	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d019      	beq.n	8003066 <update_maze_walls+0x216>
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s\r\n",
                             sensors.wall_front ? "Y" : "N",
 8003032:	4b0f      	ldr	r3, [pc, #60]	@ (8003070 <update_maze_walls+0x220>)
 8003034:	7a9b      	ldrb	r3, [r3, #10]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s\r\n",
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <update_maze_walls+0x1ee>
 800303a:	4912      	ldr	r1, [pc, #72]	@ (8003084 <update_maze_walls+0x234>)
 800303c:	e000      	b.n	8003040 <update_maze_walls+0x1f0>
 800303e:	4912      	ldr	r1, [pc, #72]	@ (8003088 <update_maze_walls+0x238>)
                             sensors.wall_left ? "Y" : "N",
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <update_maze_walls+0x220>)
 8003042:	7adb      	ldrb	r3, [r3, #11]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s\r\n",
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <update_maze_walls+0x1fc>
 8003048:	4a0e      	ldr	r2, [pc, #56]	@ (8003084 <update_maze_walls+0x234>)
 800304a:	e000      	b.n	800304e <update_maze_walls+0x1fe>
 800304c:	4a0e      	ldr	r2, [pc, #56]	@ (8003088 <update_maze_walls+0x238>)
                             sensors.wall_right ? "Y" : "N");
 800304e:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <update_maze_walls+0x220>)
 8003050:	7b1b      	ldrb	r3, [r3, #12]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s\r\n",
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <update_maze_walls+0x20a>
 8003056:	4b0b      	ldr	r3, [pc, #44]	@ (8003084 <update_maze_walls+0x234>)
 8003058:	e000      	b.n	800305c <update_maze_walls+0x20c>
 800305a:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <update_maze_walls+0x238>)
 800305c:	480b      	ldr	r0, [pc, #44]	@ (800308c <update_maze_walls+0x23c>)
 800305e:	f7fe f82b 	bl	80010b8 <send_bluetooth_printf>
        play_wall_beep();
 8003062:	f7fe f800 	bl	8001066 <play_wall_beep>
    }
}
 8003066:	bf00      	nop
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000144c 	.word	0x2000144c
 8003074:	20001438 	.word	0x20001438
 8003078:	20000438 	.word	0x20000438
 800307c:	0800df88 	.word	0x0800df88
 8003080:	0800df98 	.word	0x0800df98
 8003084:	0800d010 	.word	0x0800d010
 8003088:	0800d014 	.word	0x0800d014
 800308c:	0800d018 	.word	0x0800d018

08003090 <explore_maze>:

/**
 * @brief Main maze exploration function
 */
void explore_maze(void) {
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n🚀 STARTING MAZE EXPLORATION 🚀\r\n");
 8003096:	485b      	ldr	r0, [pc, #364]	@ (8003204 <explore_maze+0x174>)
 8003098:	f7fd fff8 	bl	800108c <send_bluetooth_message>

    int max_steps = MAZE_SIZE * MAZE_SIZE * 3; // Safety limit
 800309c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030a0:	607b      	str	r3, [r7, #4]
    int steps = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]

    while (!is_at_goal() && steps < max_steps) {
 80030a6:	e063      	b.n	8003170 <explore_maze+0xe0>
        // Update wall information
        update_maze_walls();
 80030a8:	f7ff fed2 	bl	8002e50 <update_maze_walls>

        // Run flood fill algorithm
        flood_fill_algorithm();
 80030ac:	f7ff fb86 	bl	80027bc <flood_fill_algorithm>

        // Get best direction to move
        int best_direction = get_best_direction();
 80030b0:	f7ff fcaa 	bl	8002a08 <get_best_direction>
 80030b4:	6038      	str	r0, [r7, #0]

        // Turn to face best direction
        turn_to_direction(best_direction);
 80030b6:	6838      	ldr	r0, [r7, #0]
 80030b8:	f7ff fdc4 	bl	8002c44 <turn_to_direction>

        // Move forward if possible
        if (!move_forward_one_cell()) {
 80030bc:	f7ff fe0c 	bl	8002cd8 <move_forward_one_cell>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f083 0301 	eor.w	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02b      	beq.n	8003124 <explore_maze+0x94>
            send_bluetooth_message("❌ Movement failed! Trying alternative...\r\n");
 80030cc:	484e      	ldr	r0, [pc, #312]	@ (8003208 <explore_maze+0x178>)
 80030ce:	f7fd ffdd 	bl	800108c <send_bluetooth_message>

            // Try alternative directions
            for (int alt_dir = 0; alt_dir < 4; alt_dir++) {
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	e020      	b.n	800311a <explore_maze+0x8a>
                if (alt_dir != best_direction &&
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d019      	beq.n	8003114 <explore_maze+0x84>
                    !maze[robot.x][robot.y].walls[alt_dir]) {
 80030e0:	4b4a      	ldr	r3, [pc, #296]	@ (800320c <explore_maze+0x17c>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b49      	ldr	r3, [pc, #292]	@ (800320c <explore_maze+0x17c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4949      	ldr	r1, [pc, #292]	@ (8003210 <explore_maze+0x180>)
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	4413      	add	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	18ca      	adds	r2, r1, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4413      	add	r3, r2
 80030f6:	3305      	adds	r3, #5
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	f083 0301 	eor.w	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
                if (alt_dir != best_direction &&
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <explore_maze+0x84>

                    turn_to_direction(alt_dir);
 8003104:	68b8      	ldr	r0, [r7, #8]
 8003106:	f7ff fd9d 	bl	8002c44 <turn_to_direction>
                    if (move_forward_one_cell()) {
 800310a:	f7ff fde5 	bl	8002cd8 <move_forward_one_cell>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <explore_maze+0x92>
            for (int alt_dir = 0; alt_dir < 4; alt_dir++) {
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3301      	adds	r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b03      	cmp	r3, #3
 800311e:	dddb      	ble.n	80030d8 <explore_maze+0x48>
 8003120:	e000      	b.n	8003124 <explore_maze+0x94>
                        break;
 8003122:	bf00      	nop
                }
            }
        }

        // Send periodic status updates
        if (steps % 5 == 0) {
 8003124:	68f9      	ldr	r1, [r7, #12]
 8003126:	4b3b      	ldr	r3, [pc, #236]	@ (8003214 <explore_maze+0x184>)
 8003128:	fb83 2301 	smull	r2, r3, r3, r1
 800312c:	105a      	asrs	r2, r3, #1
 800312e:	17cb      	asrs	r3, r1, #31
 8003130:	1ad2      	subs	r2, r2, r3
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	1aca      	subs	r2, r1, r3
 800313a:	2a00      	cmp	r2, #0
 800313c:	d112      	bne.n	8003164 <explore_maze+0xd4>
            send_bluetooth_printf("Step %d: Position (%d,%d), Direction: %s\r\n",
 800313e:	4b33      	ldr	r3, [pc, #204]	@ (800320c <explore_maze+0x17c>)
 8003140:	681c      	ldr	r4, [r3, #0]
 8003142:	4b32      	ldr	r3, [pc, #200]	@ (800320c <explore_maze+0x17c>)
 8003144:	685d      	ldr	r5, [r3, #4]
 8003146:	4b31      	ldr	r3, [pc, #196]	@ (800320c <explore_maze+0x17c>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4618      	mov	r0, r3
 800314c:	f001 fdfa 	bl	8004d44 <get_direction_name>
 8003150:	4603      	mov	r3, r0
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	462b      	mov	r3, r5
 8003156:	4622      	mov	r2, r4
 8003158:	68f9      	ldr	r1, [r7, #12]
 800315a:	482f      	ldr	r0, [pc, #188]	@ (8003218 <explore_maze+0x188>)
 800315c:	f7fd ffac 	bl	80010b8 <send_bluetooth_printf>
                                 steps, robot.x, robot.y, get_direction_name(robot.direction));
            send_maze_state();
 8003160:	f7fd ffd0 	bl	8001104 <send_maze_state>
        }

        steps++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]

        // Brief delay for stability
        HAL_Delay(100);
 800316a:	2064      	movs	r0, #100	@ 0x64
 800316c:	f001 feb2 	bl	8004ed4 <HAL_Delay>
    while (!is_at_goal() && steps < max_steps) {
 8003170:	f7ff fe28 	bl	8002dc4 <is_at_goal>
 8003174:	4603      	mov	r3, r0
 8003176:	f083 0301 	eor.w	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <explore_maze+0xf8>
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	429a      	cmp	r2, r3
 8003186:	db8f      	blt.n	80030a8 <explore_maze+0x18>
    }

    if (is_at_goal()) {
 8003188:	f7ff fe1c 	bl	8002dc4 <is_at_goal>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d026      	beq.n	80031e0 <explore_maze+0x150>
        if (!robot.center_reached) {
 8003192:	4b1e      	ldr	r3, [pc, #120]	@ (800320c <explore_maze+0x17c>)
 8003194:	7b1b      	ldrb	r3, [r3, #12]
 8003196:	f083 0301 	eor.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d011      	beq.n	80031c4 <explore_maze+0x134>
            robot.center_reached = true;
 80031a0:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <explore_maze+0x17c>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	731a      	strb	r2, [r3, #12]
            send_bluetooth_message("🎯 CENTER REACHED! 🎯\r\n");
 80031a6:	481d      	ldr	r0, [pc, #116]	@ (800321c <explore_maze+0x18c>)
 80031a8:	f7fd ff70 	bl	800108c <send_bluetooth_message>
            play_success_tone();
 80031ac:	f7fd ff16 	bl	8000fdc <play_success_tone>

            // Brief celebration
            led_sequence_complete();
 80031b0:	f001 fd8a 	bl	8004cc8 <led_sequence_complete>
            HAL_Delay(2000);
 80031b4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031b8:	f001 fe8c 	bl	8004ed4 <HAL_Delay>

            send_bluetooth_message("Now returning to start...\r\n");
 80031bc:	4818      	ldr	r0, [pc, #96]	@ (8003220 <explore_maze+0x190>)
 80031be:	f7fd ff65 	bl	800108c <send_bluetooth_message>
 80031c2:	e015      	b.n	80031f0 <explore_maze+0x160>
        } else {
            robot.returned_to_start = true;
 80031c4:	4b11      	ldr	r3, [pc, #68]	@ (800320c <explore_maze+0x17c>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	735a      	strb	r2, [r3, #13]
            send_bluetooth_message("🏁 RETURNED TO START! 🏁\r\n");
 80031ca:	4816      	ldr	r0, [pc, #88]	@ (8003224 <explore_maze+0x194>)
 80031cc:	f7fd ff5e 	bl	800108c <send_bluetooth_message>
            play_success_tone();
 80031d0:	f7fd ff04 	bl	8000fdc <play_success_tone>
            led_sequence_complete();
 80031d4:	f001 fd78 	bl	8004cc8 <led_sequence_complete>
            exploration_completed = 1;
 80031d8:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <explore_maze+0x198>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e007      	b.n	80031f0 <explore_maze+0x160>
        }
    } else {
        send_bluetooth_printf("❌ Exploration incomplete after %d steps\r\n", max_steps);
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4812      	ldr	r0, [pc, #72]	@ (800322c <explore_maze+0x19c>)
 80031e4:	f7fd ff68 	bl	80010b8 <send_bluetooth_printf>
        play_error_tone();
 80031e8:	f7fd ff24 	bl	8001034 <play_error_tone>
        led_sequence_error();
 80031ec:	f001 fd8b 	bl	8004d06 <led_sequence_error>
    }

    send_bluetooth_printf("Total exploration steps: %d\r\n", robot.exploration_steps);
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <explore_maze+0x17c>)
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	4619      	mov	r1, r3
 80031f6:	480e      	ldr	r0, [pc, #56]	@ (8003230 <explore_maze+0x1a0>)
 80031f8:	f7fd ff5e 	bl	80010b8 <send_bluetooth_printf>
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bdb0      	pop	{r4, r5, r7, pc}
 8003204:	0800d03c 	.word	0x0800d03c
 8003208:	0800d064 	.word	0x0800d064
 800320c:	20001438 	.word	0x20001438
 8003210:	20000438 	.word	0x20000438
 8003214:	66666667 	.word	0x66666667
 8003218:	0800d094 	.word	0x0800d094
 800321c:	0800d0c0 	.word	0x0800d0c0
 8003220:	0800d0dc 	.word	0x0800d0dc
 8003224:	0800d0f8 	.word	0x0800d0f8
 8003228:	200014a4 	.word	0x200014a4
 800322c:	0800d118 	.word	0x0800d118
 8003230:	0800d144 	.word	0x0800d144

08003234 <run_maze_exploration_sequence>:

/**
 * @brief Run complete maze exploration sequence
 */
void run_maze_exploration_sequence(void) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af02      	add	r7, sp, #8
    //send_bluetooth_message("\r\n" "=" * 50 "\r\n");
    send_bluetooth_message("🐭 MICROMOUSE MAZE EXPLORATION 🐭\r\n");
 800323a:	483e      	ldr	r0, [pc, #248]	@ (8003334 <run_maze_exploration_sequence+0x100>)
 800323c:	f7fd ff26 	bl	800108c <send_bluetooth_message>
    //send_bluetooth_message("=" * 50 "\r\n");

    // Phase 1: Exploration to center
    if (!robot.center_reached) {
 8003240:	4b3d      	ldr	r3, [pc, #244]	@ (8003338 <run_maze_exploration_sequence+0x104>)
 8003242:	7b1b      	ldrb	r3, [r3, #12]
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d006      	beq.n	800325c <run_maze_exploration_sequence+0x28>
        send_bluetooth_message("Phase 1: Exploring to center...\r\n");
 800324e:	483b      	ldr	r0, [pc, #236]	@ (800333c <run_maze_exploration_sequence+0x108>)
 8003250:	f7fd ff1c 	bl	800108c <send_bluetooth_message>
        led_sequence_exploring();
 8003254:	f001 fd28 	bl	8004ca8 <led_sequence_exploring>
        explore_maze();
 8003258:	f7ff ff1a 	bl	8003090 <explore_maze>
    }

    // Phase 2: Return to start
    if (robot.center_reached && !robot.returned_to_start) {
 800325c:	4b36      	ldr	r3, [pc, #216]	@ (8003338 <run_maze_exploration_sequence+0x104>)
 800325e:	7b1b      	ldrb	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d011      	beq.n	8003288 <run_maze_exploration_sequence+0x54>
 8003264:	4b34      	ldr	r3, [pc, #208]	@ (8003338 <run_maze_exploration_sequence+0x104>)
 8003266:	7b5b      	ldrb	r3, [r3, #13]
 8003268:	f083 0301 	eor.w	r3, r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <run_maze_exploration_sequence+0x54>
        send_bluetooth_message("Phase 2: Returning to start...\r\n");
 8003272:	4833      	ldr	r0, [pc, #204]	@ (8003340 <run_maze_exploration_sequence+0x10c>)
 8003274:	f7fd ff0a 	bl	800108c <send_bluetooth_message>
        led_sequence_returning();
 8003278:	f001 fd1e 	bl	8004cb8 <led_sequence_returning>
        HAL_Delay(1000);
 800327c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003280:	f001 fe28 	bl	8004ed4 <HAL_Delay>
        explore_maze();
 8003284:	f7ff ff04 	bl	8003090 <explore_maze>
    }

    // Phase 3: Report results
    if (robot.returned_to_start) {
 8003288:	4b2b      	ldr	r3, [pc, #172]	@ (8003338 <run_maze_exploration_sequence+0x104>)
 800328a:	7b5b      	ldrb	r3, [r3, #13]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d04d      	beq.n	800332c <run_maze_exploration_sequence+0xf8>
        send_bluetooth_message("\r\n" "🏆 EXPLORATION COMPLETE! 🏆" "\r\n");
 8003290:	482c      	ldr	r0, [pc, #176]	@ (8003344 <run_maze_exploration_sequence+0x110>)
 8003292:	f7fd fefb 	bl	800108c <send_bluetooth_message>
        send_performance_metrics();
 8003296:	f7fe f831 	bl	80012fc <send_performance_metrics>

        // Calculate exploration efficiency
        int total_cells = MAZE_SIZE * MAZE_SIZE;
 800329a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800329e:	60bb      	str	r3, [r7, #8]
        int visited_cells = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
        for (int x = 0; x < MAZE_SIZE; x++) {
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	e019      	b.n	80032de <run_maze_exploration_sequence+0xaa>
            for (int y = 0; y < MAZE_SIZE; y++) {
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e010      	b.n	80032d2 <run_maze_exploration_sequence+0x9e>
                if (maze[x][y].visited) visited_cells++;
 80032b0:	4925      	ldr	r1, [pc, #148]	@ (8003348 <run_maze_exploration_sequence+0x114>)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	011a      	lsls	r2, r3, #4
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	440b      	add	r3, r1
 80032be:	3304      	adds	r3, #4
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <run_maze_exploration_sequence+0x98>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3301      	adds	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
            for (int y = 0; y < MAZE_SIZE; y++) {
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b0f      	cmp	r3, #15
 80032d6:	ddeb      	ble.n	80032b0 <run_maze_exploration_sequence+0x7c>
        for (int x = 0; x < MAZE_SIZE; x++) {
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	3301      	adds	r3, #1
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2b0f      	cmp	r3, #15
 80032e2:	dde2      	ble.n	80032aa <run_maze_exploration_sequence+0x76>
            }
        }

        float exploration_percentage = (float)visited_cells / total_cells * 100.0f;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032fc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800334c <run_maze_exploration_sequence+0x118>
 8003300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003304:	edc7 7a01 	vstr	s15, [r7, #4]
        send_bluetooth_printf("Exploration Coverage: %d/%d cells (%.1f%%)\r\n",
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fd f925 	bl	8000558 <__aeabi_f2d>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	e9cd 2300 	strd	r2, r3, [sp]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	6979      	ldr	r1, [r7, #20]
 800331a:	480d      	ldr	r0, [pc, #52]	@ (8003350 <run_maze_exploration_sequence+0x11c>)
 800331c:	f7fd fecc 	bl	80010b8 <send_bluetooth_printf>
                             visited_cells, total_cells, exploration_percentage);

        // Ready for speed run (future implementation)
        send_bluetooth_message("🚀 Ready for speed run optimization! 🚀\r\n");
 8003320:	480c      	ldr	r0, [pc, #48]	@ (8003354 <run_maze_exploration_sequence+0x120>)
 8003322:	f7fd feb3 	bl	800108c <send_bluetooth_message>

        exploration_completed = 1;
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <run_maze_exploration_sequence+0x124>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
    }
}
 800332c:	bf00      	nop
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	0800d164 	.word	0x0800d164
 8003338:	20001438 	.word	0x20001438
 800333c:	0800d18c 	.word	0x0800d18c
 8003340:	0800d1b0 	.word	0x0800d1b0
 8003344:	0800d1d4 	.word	0x0800d1d4
 8003348:	20000438 	.word	0x20000438
 800334c:	42c80000 	.word	0x42c80000
 8003350:	0800d1f8 	.word	0x0800d1f8
 8003354:	0800d228 	.word	0x0800d228
 8003358:	200014a4 	.word	0x200014a4

0800335c <is_exploration_complete>:

/**
 * @brief Check if exploration is complete
 */
bool is_exploration_complete(void) {
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
    return exploration_completed;
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <is_exploration_complete+0x1c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	200014a4 	.word	0x200014a4

0800337c <get_exploration_efficiency>:

/**
 * @brief Get exploration efficiency
 */
float get_exploration_efficiency(void) {
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
    if (robot.exploration_steps == 0) return 0.0f;
 8003382:	4b21      	ldr	r3, [pc, #132]	@ (8003408 <get_exploration_efficiency+0x8c>)
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <get_exploration_efficiency+0x14>
 800338a:	eddf 7a20 	vldr	s15, [pc, #128]	@ 800340c <get_exploration_efficiency+0x90>
 800338e:	e034      	b.n	80033fa <get_exploration_efficiency+0x7e>

    // Calculate theoretical minimum (Manhattan distance)
    int min_to_center = abs(maze_center_x1) + abs(maze_center_y1);
 8003390:	4b1f      	ldr	r3, [pc, #124]	@ (8003410 <get_exploration_efficiency+0x94>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003398:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800339c:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <get_exploration_efficiency+0x98>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bfb8      	it	lt
 80033a4:	425b      	neglt	r3, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
    int min_to_start = abs(maze_center_x1 - 0) + abs(maze_center_y1 - 0);
 80033aa:	4b19      	ldr	r3, [pc, #100]	@ (8003410 <get_exploration_efficiency+0x94>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80033b2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80033b6:	4b17      	ldr	r3, [pc, #92]	@ (8003414 <get_exploration_efficiency+0x98>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bfb8      	it	lt
 80033be:	425b      	neglt	r3, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
    int theoretical_min = min_to_center + min_to_start;
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4413      	add	r3, r2
 80033ca:	607b      	str	r3, [r7, #4]

    if (theoretical_min == 0) return 100.0f;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <get_exploration_efficiency+0x5c>
 80033d2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8003418 <get_exploration_efficiency+0x9c>
 80033d6:	e010      	b.n	80033fa <get_exploration_efficiency+0x7e>

    return ((float)theoretical_min / robot.exploration_steps) * 100.0f;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <get_exploration_efficiency+0x8c>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033f2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003418 <get_exploration_efficiency+0x9c>
 80033f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80033fa:	eeb0 0a67 	vmov.f32	s0, s15
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	20001438 	.word	0x20001438
 800340c:	00000000 	.word	0x00000000
 8003410:	20001494 	.word	0x20001494
 8003414:	20001498 	.word	0x20001498
 8003418:	42c80000 	.word	0x42c80000

0800341c <get_optimal_distance>:

/**
 * @brief Get optimal distance for current maze knowledge
 */
int get_optimal_distance(void) {
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
    // This would implement A* or similar for optimal path calculation
    // For now, return the flood fill distance to center
    return maze[0][0].distance;
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <get_optimal_distance+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000438 	.word	0x20000438

08003434 <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 800343a:	4b19      	ldr	r3, [pc, #100]	@ (80034a0 <update_encoder_totals+0x6c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8003442:	4b18      	ldr	r3, [pc, #96]	@ (80034a4 <update_encoder_totals+0x70>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 800344a:	4b17      	ldr	r3, [pc, #92]	@ (80034a8 <update_encoder_totals+0x74>)
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	b29b      	uxth	r3, r3
 8003454:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 8003456:	4b15      	ldr	r3, [pc, #84]	@ (80034ac <update_encoder_totals+0x78>)
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	88ba      	ldrh	r2, [r7, #4]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	b29b      	uxth	r3, r3
 8003460:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    right_diff = -right_diff;  // Make left encoder positive for forward movement
 8003462:	883b      	ldrh	r3, [r7, #0]
 8003464:	425b      	negs	r3, r3
 8003466:	b29b      	uxth	r3, r3
 8003468:	803b      	strh	r3, [r7, #0]

    // Update totals
    left_total += left_diff;
 800346a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800346e:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <update_encoder_totals+0x7c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4413      	add	r3, r2
 8003474:	4a0e      	ldr	r2, [pc, #56]	@ (80034b0 <update_encoder_totals+0x7c>)
 8003476:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 8003478:	f9b7 2000 	ldrsh.w	r2, [r7]
 800347c:	4b0d      	ldr	r3, [pc, #52]	@ (80034b4 <update_encoder_totals+0x80>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4413      	add	r3, r2
 8003482:	4a0c      	ldr	r2, [pc, #48]	@ (80034b4 <update_encoder_totals+0x80>)
 8003484:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 8003486:	4a08      	ldr	r2, [pc, #32]	@ (80034a8 <update_encoder_totals+0x74>)
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 800348c:	4a07      	ldr	r2, [pc, #28]	@ (80034ac <update_encoder_totals+0x78>)
 800348e:	88bb      	ldrh	r3, [r7, #4]
 8003490:	8013      	strh	r3, [r2, #0]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000318 	.word	0x20000318
 80034a4:	200003a8 	.word	0x200003a8
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000002 	.word	0x20000002
 80034b0:	20001d34 	.word	0x20001d34
 80034b4:	20001d38 	.word	0x20001d38

080034b8 <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
    update_encoder_totals();
 80034bc:	f7ff ffba 	bl	8003434 <update_encoder_totals>
    return left_total;
 80034c0:	4b01      	ldr	r3, [pc, #4]	@ (80034c8 <get_left_encoder_total+0x10>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20001d34 	.word	0x20001d34

080034cc <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
    update_encoder_totals();
 80034d0:	f7ff ffb0 	bl	8003434 <update_encoder_totals>
    return right_total;
 80034d4:	4b01      	ldr	r3, [pc, #4]	@ (80034dc <get_right_encoder_total+0x10>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20001d38 	.word	0x20001d38

080034e0 <reset_encoder_totals>:

/**
 * @brief Reset encoder totals - NEW FUNCTION
 */
void reset_encoder_totals(void) {
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
    left_total = 0;
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <reset_encoder_totals+0x34>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
    right_total = 0;
 80034ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <reset_encoder_totals+0x38>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
    last_left_count = __HAL_TIM_GET_COUNTER(&htim2);
 80034f0:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <reset_encoder_totals+0x3c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <reset_encoder_totals+0x40>)
 80034fa:	801a      	strh	r2, [r3, #0]
    last_right_count = __HAL_TIM_GET_COUNTER(&htim4);
 80034fc:	4b09      	ldr	r3, [pc, #36]	@ (8003524 <reset_encoder_totals+0x44>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	b29a      	uxth	r2, r3
 8003504:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <reset_encoder_totals+0x48>)
 8003506:	801a      	strh	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20001d34 	.word	0x20001d34
 8003518:	20001d38 	.word	0x20001d38
 800351c:	20000318 	.word	0x20000318
 8003520:	20000000 	.word	0x20000000
 8003524:	200003a8 	.word	0x200003a8
 8003528:	20000002 	.word	0x20000002

0800352c <start_encoders>:

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 8003530:	213c      	movs	r1, #60	@ 0x3c
 8003532:	4815      	ldr	r0, [pc, #84]	@ (8003588 <start_encoders+0x5c>)
 8003534:	f004 f8e4 	bl	8007700 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 8003538:	213c      	movs	r1, #60	@ 0x3c
 800353a:	4814      	ldr	r0, [pc, #80]	@ (800358c <start_encoders+0x60>)
 800353c:	f004 f8e0 	bl	8007700 <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 8003540:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <start_encoders+0x5c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <start_encoders+0x60>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 8003554:	2001      	movs	r0, #1
 8003556:	f001 fcbd 	bl	8004ed4 <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 800355a:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <start_encoders+0x64>)
 800355c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003560:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 8003562:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <start_encoders+0x68>)
 8003564:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003568:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 800356a:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <start_encoders+0x6c>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8003570:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <start_encoders+0x70>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 8003576:	4b0a      	ldr	r3, [pc, #40]	@ (80035a0 <start_encoders+0x74>)
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 800357c:	4b08      	ldr	r3, [pc, #32]	@ (80035a0 <start_encoders+0x74>)
 800357e:	2200      	movs	r2, #0
 8003580:	60da      	str	r2, [r3, #12]
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200003a8 	.word	0x200003a8
 800358c:	20000318 	.word	0x20000318
 8003590:	20000000 	.word	0x20000000
 8003594:	20000002 	.word	0x20000002
 8003598:	20001d34 	.word	0x20001d34
 800359c:	20001d38 	.word	0x20001d38
 80035a0:	20001470 	.word	0x20001470

080035a4 <turn_left>:




void turn_left(void) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
    // turn 90 degrees left using gyro PID, 1200 ms timeout for safety
    turn_in_place_gyro(+90.0f, 520, 1200);
 80035a8:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80035ac:	f44f 7002 	mov.w	r0, #520	@ 0x208
 80035b0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80035d4 <turn_left+0x30>
 80035b4:	f000 fb2a 	bl	8003c0c <turn_in_place_gyro>
    robot.direction = (robot.direction + 3) % 4;
 80035b8:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <turn_left+0x34>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	3303      	adds	r3, #3
 80035be:	425a      	negs	r2, r3
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	f002 0203 	and.w	r2, r2, #3
 80035c8:	bf58      	it	pl
 80035ca:	4253      	negpl	r3, r2
 80035cc:	4a02      	ldr	r2, [pc, #8]	@ (80035d8 <turn_left+0x34>)
 80035ce:	6093      	str	r3, [r2, #8]
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	42b40000 	.word	0x42b40000
 80035d8:	20001438 	.word	0x20001438

080035dc <turn_right>:

void turn_right(void) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
    turn_in_place_gyro(-90.0f, 520, 1200);
 80035e0:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80035e4:	f44f 7002 	mov.w	r0, #520	@ 0x208
 80035e8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800360c <turn_right+0x30>
 80035ec:	f000 fb0e 	bl	8003c0c <turn_in_place_gyro>
    robot.direction = (robot.direction + 1) % 4;
 80035f0:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <turn_right+0x34>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	3301      	adds	r3, #1
 80035f6:	425a      	negs	r2, r3
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	f002 0203 	and.w	r2, r2, #3
 8003600:	bf58      	it	pl
 8003602:	4253      	negpl	r3, r2
 8003604:	4a02      	ldr	r2, [pc, #8]	@ (8003610 <turn_right+0x34>)
 8003606:	6093      	str	r3, [r2, #8]
}
 8003608:	bf00      	nop
 800360a:	bd80      	pop	{r7, pc}
 800360c:	c2b40000 	.word	0xc2b40000
 8003610:	20001438 	.word	0x20001438

08003614 <turn_around>:

/**
 * @brief Turn around 180 degrees
 */
void turn_around(void) {
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
    turn_right();
 8003618:	f7ff ffe0 	bl	80035dc <turn_right>
    turn_right();
 800361c:	f7ff ffde 	bl	80035dc <turn_right>
}
 8003620:	bf00      	nop
 8003622:	bd80      	pop	{r7, pc}

08003624 <stop_motors>:

/**
 * @brief Stop both motors
 */
void stop_motors(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // Left motor PWM = 0
 8003628:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <stop_motors+0x30>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // Left motor direction = 0
 8003630:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <stop_motors+0x30>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2200      	movs	r2, #0
 8003636:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);  // Right motor PWM = 0
 8003638:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <stop_motors+0x30>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2200      	movs	r2, #0
 800363e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);  // Right motor direction = 0
 8003640:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <stop_motors+0x30>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2200      	movs	r2, #0
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000360 	.word	0x20000360

08003658 <break_motors>:
void break_motors(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
    // Apply active braking by setting both inputs HIGH for each motor
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);  // Left IN1 = HIGH
 800365c:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <break_motors+0x3c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003664:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);  // Left IN2 = HIGH
 8003666:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <break_motors+0x3c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800366e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);  // Right IN3 = HIGH
 8003670:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <break_motors+0x3c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003678:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);  // Right IN4 = HIGH
 800367a:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <break_motors+0x3c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

    HAL_Delay(200);  // Hold brake briefly
 8003684:	20c8      	movs	r0, #200	@ 0xc8
 8003686:	f001 fc25 	bl	8004ed4 <HAL_Delay>
    stop_motors();   // Then coast
 800368a:	f7ff ffcb 	bl	8003624 <stop_motors>
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000360 	.word	0x20000360

08003698 <move_forward_distance>:


/**
 * @brief Move forward a specific distance - FIXED VERSION
 */
void move_forward_distance(int target_counts) {		// CHECK////////////////////////////////////////
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	@ 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

    // FIXED: Use safe encoder reading
	reset_encoder_totals();
 80036a0:	f7ff ff1e 	bl	80034e0 <reset_encoder_totals>
    int32_t start_left = get_left_encoder_total();
 80036a4:	f7ff ff08 	bl	80034b8 <get_left_encoder_total>
 80036a8:	6278      	str	r0, [r7, #36]	@ 0x24
    int32_t start_right = get_right_encoder_total();
 80036aa:	f7ff ff0f 	bl	80034cc <get_right_encoder_total>
 80036ae:	6238      	str	r0, [r7, #32]


    while (1) {
    	mpu9250_read_gyro();
 80036b0:	f7fe f8b0 	bl	8001814 <mpu9250_read_gyro>
    	moveStraightGyroPID();
 80036b4:	f000 f8be 	bl	8003834 <moveStraightGyroPID>


        int32_t current_left = get_left_encoder_total();
 80036b8:	f7ff fefe 	bl	80034b8 <get_left_encoder_total>
 80036bc:	61f8      	str	r0, [r7, #28]
        int32_t current_right = get_right_encoder_total();
 80036be:	f7ff ff05 	bl	80034cc <get_right_encoder_total>
 80036c2:	61b8      	str	r0, [r7, #24]
        int32_t left_traveled = current_left - start_left;
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	617b      	str	r3, [r7, #20]
        int32_t right_traveled = current_right - start_right;
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	613b      	str	r3, [r7, #16]
        int32_t avg_traveled = (left_traveled + right_traveled) / 2;
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4413      	add	r3, r2
 80036da:	0fda      	lsrs	r2, r3, #31
 80036dc:	4413      	add	r3, r2
 80036de:	105b      	asrs	r3, r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]

        send_bluetooth_printf("L:%ld R:%ld\r\n",current_left,current_right);
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	69f9      	ldr	r1, [r7, #28]
 80036e6:	4809      	ldr	r0, [pc, #36]	@ (800370c <move_forward_distance+0x74>)
 80036e8:	f7fd fce6 	bl	80010b8 <send_bluetooth_printf>

        if (avg_traveled >= target_counts) {
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	da03      	bge.n	80036fc <move_forward_distance+0x64>
            break;
        }
        HAL_Delay(1);
 80036f4:	2001      	movs	r0, #1
 80036f6:	f001 fbed 	bl	8004ed4 <HAL_Delay>
    while (1) {
 80036fa:	e7d9      	b.n	80036b0 <move_forward_distance+0x18>
            break;
 80036fc:	bf00      	nop
    }

    break_motors();		// use a S-curve to apply break/////////////////////
 80036fe:	f7ff ffab 	bl	8003658 <break_motors>
}
 8003702:	bf00      	nop
 8003704:	3728      	adds	r7, #40	@ 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	0800d258 	.word	0x0800d258

08003710 <motor_set>:



// helper to set speed (0–1000 = 0–100%)
// Fixed motor_set function for DRV8833
void motor_set(uint8_t motor, bool forward, uint16_t duty) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
 800371a:	460b      	mov	r3, r1
 800371c:	71bb      	strb	r3, [r7, #6]
 800371e:	4613      	mov	r3, r2
 8003720:	80bb      	strh	r3, [r7, #4]
    if (motor == 0) { // Left motor
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d115      	bne.n	8003754 <motor_set+0x44>
        if (forward) {
 8003728:	79bb      	ldrb	r3, [r7, #6]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <motor_set+0x30>
			// Left reverse: IN1=LOW, IN2=PWM
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty); // PA6 = PWM
 800372e:	4b17      	ldr	r3, [pc, #92]	@ (800378c <motor_set+0x7c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	88ba      	ldrh	r2, [r7, #4]
 8003734:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // PA7 = LOW
 8003736:	4b15      	ldr	r3, [pc, #84]	@ (800378c <motor_set+0x7c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2200      	movs	r2, #0
 800373c:	639a      	str	r2, [r3, #56]	@ 0x38
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM

        }
    }
}
 800373e:	e020      	b.n	8003782 <motor_set+0x72>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty); // PA7 = PWM
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <motor_set+0x7c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	88ba      	ldrh	r2, [r7, #4]
 8003746:	639a      	str	r2, [r3, #56]	@ 0x38
        	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET); // PA6 = LOW
 8003748:	2200      	movs	r2, #0
 800374a:	2140      	movs	r1, #64	@ 0x40
 800374c:	4810      	ldr	r0, [pc, #64]	@ (8003790 <motor_set+0x80>)
 800374e:	f002 faff 	bl	8005d50 <HAL_GPIO_WritePin>
}
 8003752:	e016      	b.n	8003782 <motor_set+0x72>
    	bool actual_forward = forward;  // invert direction
 8003754:	79bb      	ldrb	r3, [r7, #6]
 8003756:	73fb      	strb	r3, [r7, #15]
        if (actual_forward) {
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <motor_set+0x62>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty); // PB1 = PWM
 800375e:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <motor_set+0x7c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	88ba      	ldrh	r2, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	@ 0x40
        	HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_RESET); // PB0 = LOW
 8003766:	2200      	movs	r2, #0
 8003768:	2101      	movs	r1, #1
 800376a:	480a      	ldr	r0, [pc, #40]	@ (8003794 <motor_set+0x84>)
 800376c:	f002 faf0 	bl	8005d50 <HAL_GPIO_WritePin>
}
 8003770:	e007      	b.n	8003782 <motor_set+0x72>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <motor_set+0x7c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM
 800377a:	4b04      	ldr	r3, [pc, #16]	@ (800378c <motor_set+0x7c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	88ba      	ldrh	r2, [r7, #4]
 8003780:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000360 	.word	0x20000360
 8003790:	40020000 	.word	0x40020000
 8003794:	40020400 	.word	0x40020400

08003798 <clampf_local>:
static const int PWM_MIN = 0;
static const int PWM_MAX = 1000;
static const int PWM_MIN_MOVE = 40;                // optional min to overcome stiction

/* Helper clamp */
static inline float clampf_local(float v, float lo, float hi) {
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	ed87 0a03 	vstr	s0, [r7, #12]
 80037a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80037a6:	ed87 1a01 	vstr	s2, [r7, #4]
    return (v < lo) ? lo : (v > hi) ? hi : v;
 80037aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80037ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80037b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ba:	d501      	bpl.n	80037c0 <clampf_local+0x28>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	e00b      	b.n	80037d8 <clampf_local+0x40>
 80037c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80037c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80037c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	dd01      	ble.n	80037d6 <clampf_local+0x3e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	e000      	b.n	80037d8 <clampf_local+0x40>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	ee07 3a90 	vmov	s15, r3
}
 80037dc:	eeb0 0a67 	vmov.f32	s0, s15
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <moveStraightGyroPID_Reset>:
    if (v < lo) return lo;
    if (v > hi) return hi;
    return v;
}

void moveStraightGyroPID_Reset(void) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
    pid_error_prev = 0.0f;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <moveStraightGyroPID_Reset+0x34>)
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
    pid_integral = 0.0f;
 80037f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003824 <moveStraightGyroPID_Reset+0x38>)
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
    pid_deriv_filt = 0.0f;
 8003800:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <moveStraightGyroPID_Reset+0x3c>)
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
    learn_cooldown = 0.0f;
 8003808:	4b08      	ldr	r3, [pc, #32]	@ (800382c <moveStraightGyroPID_Reset+0x40>)
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
    pid_last_ms = HAL_GetTick();
 8003810:	f001 fb54 	bl	8004ebc <HAL_GetTick>
 8003814:	4603      	mov	r3, r0
 8003816:	4a06      	ldr	r2, [pc, #24]	@ (8003830 <moveStraightGyroPID_Reset+0x44>)
 8003818:	6013      	str	r3, [r2, #0]
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20001d40 	.word	0x20001d40
 8003824:	20001d44 	.word	0x20001d44
 8003828:	20001d48 	.word	0x20001d48
 800382c:	20001d4c 	.word	0x20001d4c
 8003830:	20001d3c 	.word	0x20001d3c

08003834 <moveStraightGyroPID>:
    pid_error_prev = rate;
}



void moveStraightGyroPID(void) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 800383a:	f001 fb3f 	bl	8004ebc <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]
    float dt = (now - pid_last_ms) / 1000.0f;
 8003840:	4b6c      	ldr	r3, [pc, #432]	@ (80039f4 <moveStraightGyroPID+0x1c0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	ee07 3a90 	vmov	s15, r3
 800384c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003850:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80039f8 <moveStraightGyroPID+0x1c4>
 8003854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003858:	edc7 7a07 	vstr	s15, [r7, #28]
    if (dt <= 0.0f) dt = 0.001f; // safety small dt if HAL tick didn't advance
 800385c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003860:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003868:	d801      	bhi.n	800386e <moveStraightGyroPID+0x3a>
 800386a:	4b64      	ldr	r3, [pc, #400]	@ (80039fc <moveStraightGyroPID+0x1c8>)
 800386c:	61fb      	str	r3, [r7, #28]
    pid_last_ms = now;
 800386e:	4a61      	ldr	r2, [pc, #388]	@ (80039f4 <moveStraightGyroPID+0x1c0>)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6013      	str	r3, [r2, #0]

    /* READ: your gyro rate (deg/s). Keep original sign convention:
       original code used error_g = mpu9250_get_gyro_z_compensated();
       and motor1 = base - correction; motor2 = base + correction;
       so we preserve that mapping for compatibility. */
    float error = mpu9250_get_gyro_z_compensated();
 8003874:	f7fd ffa0 	bl	80017b8 <mpu9250_get_gyro_z_compensated>
 8003878:	ed87 0a03 	vstr	s0, [r7, #12]

    /* Integral (with dt) + anti-windup clamp */
    pid_integral += error * dt;
 800387c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003880:	edd7 7a07 	vldr	s15, [r7, #28]
 8003884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003888:	4b5d      	ldr	r3, [pc, #372]	@ (8003a00 <moveStraightGyroPID+0x1cc>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003892:	4b5b      	ldr	r3, [pc, #364]	@ (8003a00 <moveStraightGyroPID+0x1cc>)
 8003894:	edc3 7a00 	vstr	s15, [r3]
    pid_integral = clampf_local(pid_integral, -INTEGRAL_LIMIT, INTEGRAL_LIMIT);
 8003898:	4b59      	ldr	r3, [pc, #356]	@ (8003a00 <moveStraightGyroPID+0x1cc>)
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80038a2:	eeb1 7a47 	vneg.f32	s14, s14
 80038a6:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80038aa:	eeb0 1a66 	vmov.f32	s2, s13
 80038ae:	eef0 0a47 	vmov.f32	s1, s14
 80038b2:	eeb0 0a67 	vmov.f32	s0, s15
 80038b6:	f7ff ff6f 	bl	8003798 <clampf_local>
 80038ba:	eef0 7a40 	vmov.f32	s15, s0
 80038be:	4b50      	ldr	r3, [pc, #320]	@ (8003a00 <moveStraightGyroPID+0x1cc>)
 80038c0:	edc3 7a00 	vstr	s15, [r3]

    /* Derivative (on error) and low-pass filter */
    float deriv_raw = (error - pid_error_prev) / dt;    // d(error)/dt
 80038c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a04 <moveStraightGyroPID+0x1d0>)
 80038c6:	edd3 7a00 	vldr	s15, [r3]
 80038ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80038ce:	ee77 6a67 	vsub.f32	s13, s14, s15
 80038d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80038d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038da:	edc7 7a02 	vstr	s15, [r7, #8]
    pid_deriv_filt = DERIV_FILTER_ALPHA * pid_deriv_filt + (1.0f - DERIV_FILTER_ALPHA) * deriv_raw;
 80038de:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8003a08 <moveStraightGyroPID+0x1d4>
 80038e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003a0c <moveStraightGyroPID+0x1d8>)
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ec:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8003a08 <moveStraightGyroPID+0x1d4>
 80038f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80038fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003904:	4b41      	ldr	r3, [pc, #260]	@ (8003a0c <moveStraightGyroPID+0x1d8>)
 8003906:	edc3 7a00 	vstr	s15, [r3]

    /* PID output (correction) */
    float correction = (Kp_g * error) + (Ki_g * pid_integral) + (Kd_g * pid_deriv_filt);
 800390a:	4b41      	ldr	r3, [pc, #260]	@ (8003a10 <moveStraightGyroPID+0x1dc>)
 800390c:	ed93 7a00 	vldr	s14, [r3]
 8003910:	edd7 7a03 	vldr	s15, [r7, #12]
 8003914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003918:	4b3e      	ldr	r3, [pc, #248]	@ (8003a14 <moveStraightGyroPID+0x1e0>)
 800391a:	edd3 6a00 	vldr	s13, [r3]
 800391e:	4b38      	ldr	r3, [pc, #224]	@ (8003a00 <moveStraightGyroPID+0x1cc>)
 8003920:	edd3 7a00 	vldr	s15, [r3]
 8003924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003928:	ee37 7a27 	vadd.f32	s14, s14, s15
 800392c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a18 <moveStraightGyroPID+0x1e4>)
 800392e:	edd3 6a00 	vldr	s13, [r3]
 8003932:	4b36      	ldr	r3, [pc, #216]	@ (8003a0c <moveStraightGyroPID+0x1d8>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800393c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003940:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Base PWM for forward motion (adjust to your nominal cruising PWM) */
    const int base_pwm = 570;
 8003944:	f240 233a 	movw	r3, #570	@ 0x23a
 8003948:	603b      	str	r3, [r7, #0]

    int motor1Speed = (int)roundf((float)base_pwm - correction); // right wheel in your mapping
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003954:	edd7 7a01 	vldr	s15, [r7, #4]
 8003958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800395c:	eeb0 0a67 	vmov.f32	s0, s15
 8003960:	f008 fcba 	bl	800c2d8 <roundf>
 8003964:	eef0 7a40 	vmov.f32	s15, s0
 8003968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800396c:	ee17 3a90 	vmov	r3, s15
 8003970:	61bb      	str	r3, [r7, #24]
    int motor2Speed = (int)roundf((float)base_pwm + correction); // left wheel
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	ee07 3a90 	vmov	s15, r3
 8003978:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800397c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003984:	eeb0 0a67 	vmov.f32	s0, s15
 8003988:	f008 fca6 	bl	800c2d8 <roundf>
 800398c:	eef0 7a40 	vmov.f32	s15, s0
 8003990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003994:	ee17 3a90 	vmov	r3, s15
 8003998:	617b      	str	r3, [r7, #20]

    /* Clamp PWM outputs (and provide a safe top, not full 1000 if you prefer) */
    if (motor1Speed > 1200) motor1Speed = 1200;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80039a0:	dd02      	ble.n	80039a8 <moveStraightGyroPID+0x174>
 80039a2:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80039a6:	61bb      	str	r3, [r7, #24]
    if (motor2Speed > 1200) motor2Speed = 1200;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80039ae:	dd02      	ble.n	80039b6 <moveStraightGyroPID+0x182>
 80039b0:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80039b4:	617b      	str	r3, [r7, #20]
    if (motor1Speed < 0) motor1Speed = 0;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	da01      	bge.n	80039c0 <moveStraightGyroPID+0x18c>
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
    if (motor2Speed < 0) motor2Speed = 0;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	da01      	bge.n	80039ca <moveStraightGyroPID+0x196>
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]



    /* Set motors: adjust direction flags if your wiring uses opposite logic */
    motor_set(0, true, motor2Speed); // Left
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	2101      	movs	r1, #1
 80039d2:	2000      	movs	r0, #0
 80039d4:	f7ff fe9c 	bl	8003710 <motor_set>
    motor_set(1, true, motor1Speed); // Right
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	2101      	movs	r1, #1
 80039e0:	2001      	movs	r0, #1
 80039e2:	f7ff fe95 	bl	8003710 <motor_set>

    /* store previous error for next derivative computation */
    pid_error_prev = error;
 80039e6:	4a07      	ldr	r2, [pc, #28]	@ (8003a04 <moveStraightGyroPID+0x1d0>)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6013      	str	r3, [r2, #0]
}
 80039ec:	bf00      	nop
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20001d3c 	.word	0x20001d3c
 80039f8:	447a0000 	.word	0x447a0000
 80039fc:	3a83126f 	.word	0x3a83126f
 8003a00:	20001d44 	.word	0x20001d44
 8003a04:	20001d40 	.word	0x20001d40
 8003a08:	3f6fd007 	.word	0x3f6fd007
 8003a0c:	20001d48 	.word	0x20001d48
 8003a10:	20000004 	.word	0x20000004
 8003a14:	20000008 	.word	0x20000008
 8003a18:	2000000c 	.word	0x2000000c

08003a1c <signf>:
static const float INTEGRAL_CLAMP = 1000.0f;

// --- PID state ---
static float pid_int = 0.0f, pid_prev_err = 0.0f, pid_deriv_f = 0.0f;

static inline float signf(float x) { return (x >= 0.0f) ? 1.0f : -1.0f; }
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a32:	db02      	blt.n	8003a3a <signf+0x1e>
 8003a34:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003a38:	e000      	b.n	8003a3c <signf+0x20>
 8003a3a:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <signf+0x34>)
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eeb0 0a67 	vmov.f32	s0, s15
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	bf800000 	.word	0xbf800000

08003a54 <gyro_turn_reset>:

static void gyro_turn_reset(void) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
    pid_int = 0.0f;
 8003a58:	4b09      	ldr	r3, [pc, #36]	@ (8003a80 <gyro_turn_reset+0x2c>)
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
    pid_prev_err = 0.0f;
 8003a60:	4b08      	ldr	r3, [pc, #32]	@ (8003a84 <gyro_turn_reset+0x30>)
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
    pid_deriv_f = 0.0f;
 8003a68:	4b07      	ldr	r3, [pc, #28]	@ (8003a88 <gyro_turn_reset+0x34>)
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
    pid_last_ms = HAL_GetTick();
 8003a70:	f001 fa24 	bl	8004ebc <HAL_GetTick>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a05      	ldr	r2, [pc, #20]	@ (8003a8c <gyro_turn_reset+0x38>)
 8003a78:	6013      	str	r3, [r2, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20001d50 	.word	0x20001d50
 8003a84:	20001d54 	.word	0x20001d54
 8003a88:	20001d58 	.word	0x20001d58
 8003a8c:	20001d3c 	.word	0x20001d3c

08003a90 <gyro_rate_pid_step>:

static float gyro_rate_pid_step(float sp_dps, float meas_dps, float *p_dt) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a9e:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8003aa0:	f001 fa0c 	bl	8004ebc <HAL_GetTick>
 8003aa4:	61b8      	str	r0, [r7, #24]
    float dt = (now - pid_last_ms) / 1000.0f;
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8003be0 <gyro_rate_pid_step+0x150>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ab6:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003be4 <gyro_rate_pid_step+0x154>
 8003aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003abe:	edc7 7a07 	vstr	s15, [r7, #28]
    if (dt <= 0.0f) dt = 0.002f;
 8003ac2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ace:	d801      	bhi.n	8003ad4 <gyro_rate_pid_step+0x44>
 8003ad0:	4b45      	ldr	r3, [pc, #276]	@ (8003be8 <gyro_rate_pid_step+0x158>)
 8003ad2:	61fb      	str	r3, [r7, #28]
    pid_last_ms = now;
 8003ad4:	4a42      	ldr	r2, [pc, #264]	@ (8003be0 <gyro_rate_pid_step+0x150>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	6013      	str	r3, [r2, #0]
    if (p_dt) *p_dt = dt;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <gyro_rate_pid_step+0x56>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	601a      	str	r2, [r3, #0]

    float err = sp_dps - meas_dps;
 8003ae6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aea:	edd7 7a02 	vldr	s15, [r7, #8]
 8003aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af2:	edc7 7a05 	vstr	s15, [r7, #20]

    // integral (anti-windup)
    pid_int += err * dt;
 8003af6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003afa:	edd7 7a07 	vldr	s15, [r7, #28]
 8003afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b02:	4b3a      	ldr	r3, [pc, #232]	@ (8003bec <gyro_rate_pid_step+0x15c>)
 8003b04:	edd3 7a00 	vldr	s15, [r3]
 8003b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0c:	4b37      	ldr	r3, [pc, #220]	@ (8003bec <gyro_rate_pid_step+0x15c>)
 8003b0e:	edc3 7a00 	vstr	s15, [r3]
    if (pid_int >  INTEGRAL_CLAMP) pid_int =  INTEGRAL_CLAMP;
 8003b12:	4b36      	ldr	r3, [pc, #216]	@ (8003bec <gyro_rate_pid_step+0x15c>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003be4 <gyro_rate_pid_step+0x154>
 8003b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b24:	dd02      	ble.n	8003b2c <gyro_rate_pid_step+0x9c>
 8003b26:	4a32      	ldr	r2, [pc, #200]	@ (8003bf0 <gyro_rate_pid_step+0x160>)
 8003b28:	4b30      	ldr	r3, [pc, #192]	@ (8003bec <gyro_rate_pid_step+0x15c>)
 8003b2a:	601a      	str	r2, [r3, #0]
    if (pid_int < -INTEGRAL_CLAMP) pid_int = -INTEGRAL_CLAMP;
 8003b2c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8003be4 <gyro_rate_pid_step+0x154>
 8003b30:	eeb1 7a67 	vneg.f32	s14, s15
 8003b34:	4b2d      	ldr	r3, [pc, #180]	@ (8003bec <gyro_rate_pid_step+0x15c>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b42:	dd06      	ble.n	8003b52 <gyro_rate_pid_step+0xc2>
 8003b44:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8003be4 <gyro_rate_pid_step+0x154>
 8003b48:	eef1 7a67 	vneg.f32	s15, s15
 8003b4c:	4b27      	ldr	r3, [pc, #156]	@ (8003bec <gyro_rate_pid_step+0x15c>)
 8003b4e:	edc3 7a00 	vstr	s15, [r3]

    // derivative (filtered)
    float d_raw = (err - pid_prev_err) / dt;
 8003b52:	4b28      	ldr	r3, [pc, #160]	@ (8003bf4 <gyro_rate_pid_step+0x164>)
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b5c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b60:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b68:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_deriv_f = DERIV_ALPHA * pid_deriv_f + (1.0f - DERIV_ALPHA) * d_raw;
 8003b6c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003bf8 <gyro_rate_pid_step+0x168>
 8003b70:	4b22      	ldr	r3, [pc, #136]	@ (8003bfc <gyro_rate_pid_step+0x16c>)
 8003b72:	edd3 7a00 	vldr	s15, [r3]
 8003b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b7a:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003bf8 <gyro_rate_pid_step+0x168>
 8003b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b86:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b92:	4b1a      	ldr	r3, [pc, #104]	@ (8003bfc <gyro_rate_pid_step+0x16c>)
 8003b94:	edc3 7a00 	vstr	s15, [r3]
    pid_prev_err = err;
 8003b98:	4a16      	ldr	r2, [pc, #88]	@ (8003bf4 <gyro_rate_pid_step+0x164>)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	6013      	str	r3, [r2, #0]

    // PID → ΔPWM (right - left)
    return Kp_g*err + Ki_g*pid_int + Kd_g*pid_deriv_f;
 8003b9e:	4b18      	ldr	r3, [pc, #96]	@ (8003c00 <gyro_rate_pid_step+0x170>)
 8003ba0:	ed93 7a00 	vldr	s14, [r3]
 8003ba4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bac:	4b15      	ldr	r3, [pc, #84]	@ (8003c04 <gyro_rate_pid_step+0x174>)
 8003bae:	edd3 6a00 	vldr	s13, [r3]
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <gyro_rate_pid_step+0x15c>)
 8003bb4:	edd3 7a00 	vldr	s15, [r3]
 8003bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc0:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <gyro_rate_pid_step+0x178>)
 8003bc2:	edd3 6a00 	vldr	s13, [r3]
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <gyro_rate_pid_step+0x16c>)
 8003bc8:	edd3 7a00 	vldr	s15, [r3]
 8003bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20001d3c 	.word	0x20001d3c
 8003be4:	447a0000 	.word	0x447a0000
 8003be8:	3b03126f 	.word	0x3b03126f
 8003bec:	20001d50 	.word	0x20001d50
 8003bf0:	447a0000 	.word	0x447a0000
 8003bf4:	20001d54 	.word	0x20001d54
 8003bf8:	3f666666 	.word	0x3f666666
 8003bfc:	20001d58 	.word	0x20001d58
 8003c00:	20000004 	.word	0x20000004
 8003c04:	20000008 	.word	0x20000008
 8003c08:	2000000c 	.word	0x2000000c

08003c0c <turn_in_place_gyro>:
/**
 * In-place turn by angle (deg). +angle = CCW/left, -angle = CW/right.
 * base_pwm = 80..250 is typical. timeout_ms is safety.
 */
void turn_in_place_gyro(float angle_deg, int base_pwm, uint32_t timeout_ms)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	ed2d 8b02 	vpush	{d8}
 8003c12:	b098      	sub	sp, #96	@ 0x60
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	ed87 0a03 	vstr	s0, [r7, #12]
 8003c1a:	60b8      	str	r0, [r7, #8]
 8003c1c:	6079      	str	r1, [r7, #4]
    if (base_pwm < 60)  base_pwm = 60;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b3b      	cmp	r3, #59	@ 0x3b
 8003c22:	dc01      	bgt.n	8003c28 <turn_in_place_gyro+0x1c>
 8003c24:	233c      	movs	r3, #60	@ 0x3c
 8003c26:	60bb      	str	r3, [r7, #8]
    if (base_pwm > 400) base_pwm = 400;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003c2e:	dd02      	ble.n	8003c36 <turn_in_place_gyro+0x2a>
 8003c30:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003c34:	60bb      	str	r3, [r7, #8]

    gyro_turn_reset();
 8003c36:	f7ff ff0d 	bl	8003a54 <gyro_turn_reset>

    float yaw = 0.0f;                  // integrated heading (deg)
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float target = angle_deg;    // signed target
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t t0 = HAL_GetTick();
 8003c44:	f001 f93a 	bl	8004ebc <HAL_GetTick>
 8003c48:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t settle_start = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	65bb      	str	r3, [r7, #88]	@ 0x58

    // last timestamp for yaw integration
    uint32_t last_ms = HAL_GetTick();
 8003c4e:	f001 f935 	bl	8004ebc <HAL_GetTick>
 8003c52:	6578      	str	r0, [r7, #84]	@ 0x54

    while (1) {
        // --- timing ---
        uint32_t now = HAL_GetTick();
 8003c54:	f001 f932 	bl	8004ebc <HAL_GetTick>
 8003c58:	6378      	str	r0, [r7, #52]	@ 0x34
        float dt = (now - last_ms) / 1000.0f;
 8003c5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	ee07 3a90 	vmov	s15, r3
 8003c64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c68:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8003f08 <turn_in_place_gyro+0x2fc>
 8003c6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c70:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        if (dt <= 0.0f) dt = 0.001f;
 8003c74:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003c78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c80:	d801      	bhi.n	8003c86 <turn_in_place_gyro+0x7a>
 8003c82:	4ba2      	ldr	r3, [pc, #648]	@ (8003f0c <turn_in_place_gyro+0x300>)
 8003c84:	653b      	str	r3, [r7, #80]	@ 0x50
        last_ms = now;
 8003c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c88:	657b      	str	r3, [r7, #84]	@ 0x54
        mpu9250_read_gyro();
 8003c8a:	f7fd fdc3 	bl	8001814 <mpu9250_read_gyro>
        // --- sensors ---
        float gz = mpu9250_get_gyro_z_compensated();  // deg/s
 8003c8e:	f7fd fd93 	bl	80017b8 <mpu9250_get_gyro_z_compensated>
 8003c92:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

        // --- integrate heading (keep sign!) ---
        yaw += gz * dt;
 8003c96:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003c9a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003caa:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

        // signed angle error (THIS FIXES THE MAIN BUG)
        float ang_err = target - yaw;
 8003cae:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003cb2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        // desired rate with braking law (changes sign if you overshoot)
        float omega_brake = sqrtf(fmaxf(0.0f, 2.0f * ALPHA_MAX_DPS2 * fabsf(ang_err)));
 8003cbe:	4b94      	ldr	r3, [pc, #592]	@ (8003f10 <turn_in_place_gyro+0x304>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003cc8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003ccc:	eef0 7ae7 	vabs.f32	s15, s15
 8003cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd4:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8003f14 <turn_in_place_gyro+0x308>
 8003cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cdc:	f008 fabe 	bl	800c25c <fmaxf>
 8003ce0:	eef0 7a40 	vmov.f32	s15, s0
 8003ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce8:	f008 fa9a 	bl	800c220 <sqrtf>
 8003cec:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        float omega_des = clampf_local(omega_brake, 0.0f, OMEGA_MAX_DPS) * signf(ang_err);
 8003cf0:	4b89      	ldr	r3, [pc, #548]	@ (8003f18 <turn_in_place_gyro+0x30c>)
 8003cf2:	edd3 7a00 	vldr	s15, [r3]
 8003cf6:	eeb0 1a67 	vmov.f32	s2, s15
 8003cfa:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8003f14 <turn_in_place_gyro+0x308>
 8003cfe:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8003d02:	f7ff fd49 	bl	8003798 <clampf_local>
 8003d06:	eeb0 8a40 	vmov.f32	s16, s0
 8003d0a:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8003d0e:	f7ff fe85 	bl	8003a1c <signf>
 8003d12:	eef0 7a40 	vmov.f32	s15, s0
 8003d16:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003d1a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

        // small deadband on command (avoid micro twitch)
        if (fabsf(omega_des) < OMEGA_CMD_DEADBAND) omega_des = 0.0f;
 8003d1e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003d22:	eeb0 7ae7 	vabs.f32	s14, s15
 8003d26:	4b7d      	ldr	r3, [pc, #500]	@ (8003f1c <turn_in_place_gyro+0x310>)
 8003d28:	edd3 7a00 	vldr	s15, [r3]
 8003d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d34:	d502      	bpl.n	8003d3c <turn_in_place_gyro+0x130>
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c

        // --- inner rate loop ---
        float pid_dt = 0.0f;
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
        float dPWM_pid = gyro_rate_pid_step(omega_des, gz, &pid_dt);  // ΔPWM from PID
 8003d42:	f107 0310 	add.w	r3, r7, #16
 8003d46:	4618      	mov	r0, r3
 8003d48:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 8003d4c:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8003d50:	f7ff fe9e 	bl	8003a90 <gyro_rate_pid_step>
 8003d54:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        float dPWM_ff  = (fabsf(omega_des) > 0.0f) ? (omega_des / GYRO_K_DPS_PER_DPWM) : 0.0f;
 8003d58:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003d5c:	eef0 7ae7 	vabs.f32	s15, s15
 8003d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d68:	dd06      	ble.n	8003d78 <turn_in_place_gyro+0x16c>
 8003d6a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003d6e:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8003f20 <turn_in_place_gyro+0x314>
 8003d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d76:	e001      	b.n	8003d7c <turn_in_place_gyro+0x170>
 8003d78:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8003f14 <turn_in_place_gyro+0x308>
 8003d7c:	edc7 7a08 	vstr	s15, [r7, #32]
        float dPWM     = dPWM_ff + dPWM_pid;   // total ΔPWM (right - left), signed
 8003d80:	ed97 7a08 	vldr	s14, [r7, #32]
 8003d84:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8c:	edc7 7a07 	vstr	s15, [r7, #28]

        // split ΔPWM around base so both sides get torque
        float right_mag = (float)base_pwm + 0.5f * fabsf(dPWM);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d9e:	eef0 7ae7 	vabs.f32	s15, s15
 8003da2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003da6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dae:	edc7 7a06 	vstr	s15, [r7, #24]
        float left_mag  = (float)base_pwm + 0.5f * fabsf(dPWM);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dc0:	eef0 7ae7 	vabs.f32	s15, s15
 8003dc4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003dc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd0:	edc7 7a05 	vstr	s15, [r7, #20]

        // decide directions from CURRENT command sign (not the initial turn dir)
        bool left_forward, right_forward;
        if (dPWM >= 0.0f) {
 8003dd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de0:	db06      	blt.n	8003df0 <turn_in_place_gyro+0x1e4>
            // turn left: left backward, right forward
            left_forward  = false;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            right_forward = true;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003dee:	e005      	b.n	8003dfc <turn_in_place_gyro+0x1f0>
        } else {
            // turn right: left forward, right backward
            left_forward  = true;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            right_forward = false;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        }

        // if command very small AND rate small, cut power to stop cleanly
        if (fabsf(ang_err) <= ANGLE_TOL_DEG && fabsf(gz) <= RATE_TOL_DPS) {
 8003dfc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003e00:	eeb0 7ae7 	vabs.f32	s14, s15
 8003e04:	4b47      	ldr	r3, [pc, #284]	@ (8003f24 <turn_in_place_gyro+0x318>)
 8003e06:	edd3 7a00 	vldr	s15, [r3]
 8003e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e12:	d822      	bhi.n	8003e5a <turn_in_place_gyro+0x24e>
 8003e14:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003e18:	eeb0 7ae7 	vabs.f32	s14, s15
 8003e1c:	4b42      	ldr	r3, [pc, #264]	@ (8003f28 <turn_in_place_gyro+0x31c>)
 8003e1e:	edd3 7a00 	vldr	s15, [r3]
 8003e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2a:	d816      	bhi.n	8003e5a <turn_in_place_gyro+0x24e>
            motor_set(0, true, 0);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2101      	movs	r1, #1
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7ff fc6d 	bl	8003710 <motor_set>
            motor_set(1, true, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2101      	movs	r1, #1
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	f7ff fc68 	bl	8003710 <motor_set>
            if (settle_start == 0) settle_start = now;
 8003e40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <turn_in_place_gyro+0x23e>
 8003e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e48:	65bb      	str	r3, [r7, #88]	@ 0x58
            if ((now - settle_start) >= SETTLE_MS) break;
 8003e4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	4b36      	ldr	r3, [pc, #216]	@ (8003f2c <turn_in_place_gyro+0x320>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d340      	bcc.n	8003eda <turn_in_place_gyro+0x2ce>
 8003e58:	e04a      	b.n	8003ef0 <turn_in_place_gyro+0x2e4>
        } else {
            settle_start = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	65bb      	str	r3, [r7, #88]	@ 0x58

            // Apply PWM (no fake “min move” offsets here—let control truly go to 0 near stop)
            int pwmL = (int)roundf(left_mag);
 8003e5e:	ed97 0a05 	vldr	s0, [r7, #20]
 8003e62:	f008 fa39 	bl	800c2d8 <roundf>
 8003e66:	eef0 7a40 	vmov.f32	s15, s0
 8003e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e6e:	ee17 3a90 	vmov	r3, s15
 8003e72:	647b      	str	r3, [r7, #68]	@ 0x44
            int pwmR = (int)roundf(right_mag);
 8003e74:	ed97 0a06 	vldr	s0, [r7, #24]
 8003e78:	f008 fa2e 	bl	800c2d8 <roundf>
 8003e7c:	eef0 7a40 	vmov.f32	s15, s0
 8003e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e84:	ee17 3a90 	vmov	r3, s15
 8003e88:	643b      	str	r3, [r7, #64]	@ 0x40
            if (pwmL < 0) pwmL = 0;
 8003e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da01      	bge.n	8003e94 <turn_in_place_gyro+0x288>
 8003e90:	2300      	movs	r3, #0
 8003e92:	647b      	str	r3, [r7, #68]	@ 0x44
            if (pwmL > 1000) pwmL = 1000;
 8003e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e9a:	dd02      	ble.n	8003ea2 <turn_in_place_gyro+0x296>
 8003e9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ea0:	647b      	str	r3, [r7, #68]	@ 0x44
            if (pwmR < 0) pwmR = 0;
 8003ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da01      	bge.n	8003eac <turn_in_place_gyro+0x2a0>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	643b      	str	r3, [r7, #64]	@ 0x40
            if (pwmR > 1000) pwmR = 1000;
 8003eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003eb2:	dd02      	ble.n	8003eba <turn_in_place_gyro+0x2ae>
 8003eb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eb8:	643b      	str	r3, [r7, #64]	@ 0x40

            motor_set(0, left_forward,  (uint16_t)pwmL);
 8003eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7ff fc23 	bl	8003710 <motor_set>
            motor_set(1, right_forward, (uint16_t)pwmR);
 8003eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	f7ff fc1b 	bl	8003710 <motor_set>
        }

        if ((now - t0) > timeout_ms) break;
 8003eda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d303      	bcc.n	8003eee <turn_in_place_gyro+0x2e2>

        HAL_Delay(2); // ~500 Hz outer loop
 8003ee6:	2002      	movs	r0, #2
 8003ee8:	f000 fff4 	bl	8004ed4 <HAL_Delay>
    while (1) {
 8003eec:	e6b2      	b.n	8003c54 <turn_in_place_gyro+0x48>
        if ((now - t0) > timeout_ms) break;
 8003eee:	bf00      	nop
    }

    stop_motors();
 8003ef0:	f7ff fb98 	bl	8003624 <stop_motors>
    HAL_Delay(60);
 8003ef4:	203c      	movs	r0, #60	@ 0x3c
 8003ef6:	f000 ffed 	bl	8004ed4 <HAL_Delay>
}
 8003efa:	bf00      	nop
 8003efc:	3760      	adds	r7, #96	@ 0x60
 8003efe:	46bd      	mov	sp, r7
 8003f00:	ecbd 8b02 	vpop	{d8}
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	447a0000 	.word	0x447a0000
 8003f0c:	3a83126f 	.word	0x3a83126f
 8003f10:	20000014 	.word	0x20000014
 8003f14:	00000000 	.word	0x00000000
 8003f18:	20000010 	.word	0x20000010
 8003f1c:	20000024 	.word	0x20000024
 8003f20:	3fb0ff97 	.word	0x3fb0ff97
 8003f24:	20000018 	.word	0x20000018
 8003f28:	2000001c 	.word	0x2000001c
 8003f2c:	20000020 	.word	0x20000020

08003f30 <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 8003f34:	2200      	movs	r2, #0
 8003f36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f3a:	480b      	ldr	r0, [pc, #44]	@ (8003f68 <turn_off_emitters+0x38>)
 8003f3c:	f001 ff08 	bl	8005d50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8003f40:	2200      	movs	r2, #0
 8003f42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f46:	4809      	ldr	r0, [pc, #36]	@ (8003f6c <turn_off_emitters+0x3c>)
 8003f48:	f001 ff02 	bl	8005d50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f52:	4805      	ldr	r0, [pc, #20]	@ (8003f68 <turn_off_emitters+0x38>)
 8003f54:	f001 fefc 	bl	8005d50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f5e:	4803      	ldr	r0, [pc, #12]	@ (8003f6c <turn_off_emitters+0x3c>)
 8003f60:	f001 fef6 	bl	8005d50 <HAL_GPIO_WritePin>
}
 8003f64:	bf00      	nop
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40020400 	.word	0x40020400
 8003f6c:	40020000 	.word	0x40020000

08003f70 <read_adc_channel>:

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef cfg = {0};
 8003f78:	f107 030c 	add.w	r3, r7, #12
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	60da      	str	r2, [r3, #12]
    cfg.Channel = channel;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
    cfg.Rank = 1;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	613b      	str	r3, [r7, #16]
    cfg.SamplingTime = ADC_SAMPLETIME_480CYCLES; // more stable than 84
 8003f8e:	2307      	movs	r3, #7
 8003f90:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &cfg) != HAL_OK) return 0;
 8003f92:	f107 030c 	add.w	r3, r7, #12
 8003f96:	4619      	mov	r1, r3
 8003f98:	4815      	ldr	r0, [pc, #84]	@ (8003ff0 <read_adc_channel+0x80>)
 8003f9a:	f001 f983 	bl	80052a4 <HAL_ADC_ConfigChannel>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <read_adc_channel+0x38>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e01f      	b.n	8003fe8 <read_adc_channel+0x78>

    dwt_delay_us(5);                     // tiny mux settle
 8003fa8:	2005      	movs	r0, #5
 8003faa:	f7fe faed 	bl	8002588 <dwt_delay_us>

    // dummy conversion (discard)
    HAL_ADC_Start(&hadc1);
 8003fae:	4810      	ldr	r0, [pc, #64]	@ (8003ff0 <read_adc_channel+0x80>)
 8003fb0:	f000 fff8 	bl	8004fa4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8003fb4:	210a      	movs	r1, #10
 8003fb6:	480e      	ldr	r0, [pc, #56]	@ (8003ff0 <read_adc_channel+0x80>)
 8003fb8:	f001 f8db 	bl	8005172 <HAL_ADC_PollForConversion>
    (void)HAL_ADC_GetValue(&hadc1);
 8003fbc:	480c      	ldr	r0, [pc, #48]	@ (8003ff0 <read_adc_channel+0x80>)
 8003fbe:	f001 f963 	bl	8005288 <HAL_ADC_GetValue>
    HAL_ADC_Stop(&hadc1);
 8003fc2:	480b      	ldr	r0, [pc, #44]	@ (8003ff0 <read_adc_channel+0x80>)
 8003fc4:	f001 f8a2 	bl	800510c <HAL_ADC_Stop>

    // real conversion
    HAL_ADC_Start(&hadc1);
 8003fc8:	4809      	ldr	r0, [pc, #36]	@ (8003ff0 <read_adc_channel+0x80>)
 8003fca:	f000 ffeb 	bl	8004fa4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8003fce:	210a      	movs	r1, #10
 8003fd0:	4807      	ldr	r0, [pc, #28]	@ (8003ff0 <read_adc_channel+0x80>)
 8003fd2:	f001 f8ce 	bl	8005172 <HAL_ADC_PollForConversion>
    uint16_t v = HAL_ADC_GetValue(&hadc1);
 8003fd6:	4806      	ldr	r0, [pc, #24]	@ (8003ff0 <read_adc_channel+0x80>)
 8003fd8:	f001 f956 	bl	8005288 <HAL_ADC_GetValue>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 8003fe0:	4803      	ldr	r0, [pc, #12]	@ (8003ff0 <read_adc_channel+0x80>)
 8003fe2:	f001 f893 	bl	800510c <HAL_ADC_Stop>
    return v;
 8003fe6:	8bfb      	ldrh	r3, [r7, #30]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000230 	.word	0x20000230

08003ff4 <update_sensors>:
uint32_t FL_buff[5];
uint32_t FR_buff[5];
uint32_t L_buff[5];
uint32_t R_buff[5];

void update_sensors(void){
 8003ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff6:	b093      	sub	sp, #76	@ 0x4c
 8003ff8:	af04      	add	r7, sp, #16
	turn_off_emitters();
 8003ffa:	f7ff ff99 	bl	8003f30 <turn_off_emitters>
	//dwt_delay_us(500);
	uint16_t off_FL = read_adc_channel(ADC_CHANNEL_5);
 8003ffe:	2005      	movs	r0, #5
 8004000:	f7ff ffb6 	bl	8003f70 <read_adc_channel>
 8004004:	4603      	mov	r3, r0
 8004006:	827b      	strh	r3, [r7, #18]
	uint16_t off_FR = read_adc_channel(ADC_CHANNEL_2);
 8004008:	2002      	movs	r0, #2
 800400a:	f7ff ffb1 	bl	8003f70 <read_adc_channel>
 800400e:	4603      	mov	r3, r0
 8004010:	823b      	strh	r3, [r7, #16]
	uint16_t off_L = read_adc_channel(ADC_CHANNEL_4);
 8004012:	2004      	movs	r0, #4
 8004014:	f7ff ffac 	bl	8003f70 <read_adc_channel>
 8004018:	4603      	mov	r3, r0
 800401a:	81fb      	strh	r3, [r7, #14]
	uint16_t off_R = read_adc_channel(ADC_CHANNEL_3);
 800401c:	2003      	movs	r0, #3
 800401e:	f7ff ffa7 	bl	8003f70 <read_adc_channel>
 8004022:	4603      	mov	r3, r0
 8004024:	81bb      	strh	r3, [r7, #12]

	EMIT_ON(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin);
 8004026:	2201      	movs	r2, #1
 8004028:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800402c:	48a0      	ldr	r0, [pc, #640]	@ (80042b0 <update_sensors+0x2bc>)
 800402e:	f001 fe8f 	bl	8005d50 <HAL_GPIO_WritePin>
	EMIT_ON(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin);
 8004032:	2201      	movs	r2, #1
 8004034:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004038:	489e      	ldr	r0, [pc, #632]	@ (80042b4 <update_sensors+0x2c0>)
 800403a:	f001 fe89 	bl	8005d50 <HAL_GPIO_WritePin>
	dwt_delay_us(50);
 800403e:	2032      	movs	r0, #50	@ 0x32
 8004040:	f7fe faa2 	bl	8002588 <dwt_delay_us>
	//HAL_Delay(1);

	uint16_t on_FL = read_adc_channel(ADC_CHANNEL_5);
 8004044:	2005      	movs	r0, #5
 8004046:	f7ff ff93 	bl	8003f70 <read_adc_channel>
 800404a:	4603      	mov	r3, r0
 800404c:	817b      	strh	r3, [r7, #10]
	uint16_t on_FR = read_adc_channel(ADC_CHANNEL_2);
 800404e:	2002      	movs	r0, #2
 8004050:	f7ff ff8e 	bl	8003f70 <read_adc_channel>
 8004054:	4603      	mov	r3, r0
 8004056:	813b      	strh	r3, [r7, #8]

	turn_off_emitters();
 8004058:	f7ff ff6a 	bl	8003f30 <turn_off_emitters>
	EMIT_ON(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin);
 800405c:	2201      	movs	r2, #1
 800405e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004062:	4894      	ldr	r0, [pc, #592]	@ (80042b4 <update_sensors+0x2c0>)
 8004064:	f001 fe74 	bl	8005d50 <HAL_GPIO_WritePin>
	EMIT_ON(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin);
 8004068:	2201      	movs	r2, #1
 800406a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800406e:	4890      	ldr	r0, [pc, #576]	@ (80042b0 <update_sensors+0x2bc>)
 8004070:	f001 fe6e 	bl	8005d50 <HAL_GPIO_WritePin>
	dwt_delay_us(80);
 8004074:	2050      	movs	r0, #80	@ 0x50
 8004076:	f7fe fa87 	bl	8002588 <dwt_delay_us>
	//HAL_Delay(1);

	uint16_t on_L = read_adc_channel(ADC_CHANNEL_4);
 800407a:	2004      	movs	r0, #4
 800407c:	f7ff ff78 	bl	8003f70 <read_adc_channel>
 8004080:	4603      	mov	r3, r0
 8004082:	80fb      	strh	r3, [r7, #6]
	uint16_t on_R = read_adc_channel(ADC_CHANNEL_3);
 8004084:	2003      	movs	r0, #3
 8004086:	f7ff ff73 	bl	8003f70 <read_adc_channel>
 800408a:	4603      	mov	r3, r0
 800408c:	80bb      	strh	r3, [r7, #4]

	turn_off_emitters();
 800408e:	f7ff ff4f 	bl	8003f30 <turn_off_emitters>
	uint32_t diff_FL;
	uint32_t diff_FR;
	uint32_t diff_L;
	uint32_t diff_R;

	if (on_FL>off_FL){
 8004092:	897a      	ldrh	r2, [r7, #10]
 8004094:	8a7b      	ldrh	r3, [r7, #18]
 8004096:	429a      	cmp	r2, r3
 8004098:	d904      	bls.n	80040a4 <update_sensors+0xb0>
		diff_FL = (uint32_t)on_FL-(uint32_t)off_FL;
 800409a:	897a      	ldrh	r2, [r7, #10]
 800409c:	8a7b      	ldrh	r3, [r7, #18]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80040a2:	e001      	b.n	80040a8 <update_sensors+0xb4>
	}else{
		diff_FL =0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	637b      	str	r3, [r7, #52]	@ 0x34
	}
	if (on_FR>off_FR){
 80040a8:	893a      	ldrh	r2, [r7, #8]
 80040aa:	8a3b      	ldrh	r3, [r7, #16]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d904      	bls.n	80040ba <update_sensors+0xc6>
		diff_FR = (uint32_t)on_FR-(uint32_t)off_FR;
 80040b0:	893a      	ldrh	r2, [r7, #8]
 80040b2:	8a3b      	ldrh	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040b8:	e001      	b.n	80040be <update_sensors+0xca>
	}else{
		diff_FR =0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	if (on_L>off_L){
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	89fb      	ldrh	r3, [r7, #14]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d904      	bls.n	80040d0 <update_sensors+0xdc>
		diff_L = (uint32_t)on_L-(uint32_t)off_L;
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	89fb      	ldrh	r3, [r7, #14]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ce:	e001      	b.n	80040d4 <update_sensors+0xe0>
	}else{
		diff_L=0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	if (on_R>off_R){
 80040d4:	88ba      	ldrh	r2, [r7, #4]
 80040d6:	89bb      	ldrh	r3, [r7, #12]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d904      	bls.n	80040e6 <update_sensors+0xf2>
		diff_R = (uint32_t)on_R-(uint32_t)off_R;
 80040dc:	88ba      	ldrh	r2, [r7, #4]
 80040de:	89bb      	ldrh	r3, [r7, #12]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040e4:	e001      	b.n	80040ea <update_sensors+0xf6>
	}else{
		diff_R = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	if (point>=5) point=0;
 80040ea:	4b73      	ldr	r3, [pc, #460]	@ (80042b8 <update_sensors+0x2c4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	dd02      	ble.n	80040f8 <update_sensors+0x104>
 80040f2:	4b71      	ldr	r3, [pc, #452]	@ (80042b8 <update_sensors+0x2c4>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]



	diff_FL=(diff_FL*NOMINAL)/1000;
 80040f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	4a6e      	ldr	r2, [pc, #440]	@ (80042bc <update_sensors+0x2c8>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	637b      	str	r3, [r7, #52]	@ 0x34
	diff_FR=(diff_FR*NOMINAL)/1000;
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	4a69      	ldr	r2, [pc, #420]	@ (80042bc <update_sensors+0x2c8>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	099b      	lsrs	r3, r3, #6
 800411e:	633b      	str	r3, [r7, #48]	@ 0x30
	diff_L=(diff_L*NOMINAL)/1000;
 8004120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004122:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	4a64      	ldr	r2, [pc, #400]	@ (80042bc <update_sensors+0x2c8>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	099b      	lsrs	r3, r3, #6
 8004132:	62fb      	str	r3, [r7, #44]	@ 0x2c
	diff_R=(diff_R*NOMINAL)/1000;
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	4a5f      	ldr	r2, [pc, #380]	@ (80042bc <update_sensors+0x2c8>)
 8004140:	fba2 2303 	umull	r2, r3, r2, r3
 8004144:	099b      	lsrs	r3, r3, #6
 8004146:	62bb      	str	r3, [r7, #40]	@ 0x28




	FL_buff[point]=diff_FL;
 8004148:	4b5b      	ldr	r3, [pc, #364]	@ (80042b8 <update_sensors+0x2c4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	495c      	ldr	r1, [pc, #368]	@ (80042c0 <update_sensors+0x2cc>)
 800414e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	FR_buff[point]=diff_FR;
 8004154:	4b58      	ldr	r3, [pc, #352]	@ (80042b8 <update_sensors+0x2c4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	495a      	ldr	r1, [pc, #360]	@ (80042c4 <update_sensors+0x2d0>)
 800415a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800415c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	L_buff[point]=diff_L;
 8004160:	4b55      	ldr	r3, [pc, #340]	@ (80042b8 <update_sensors+0x2c4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4958      	ldr	r1, [pc, #352]	@ (80042c8 <update_sensors+0x2d4>)
 8004166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	R_buff[point]=diff_R;
 800416c:	4b52      	ldr	r3, [pc, #328]	@ (80042b8 <update_sensors+0x2c4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4956      	ldr	r1, [pc, #344]	@ (80042cc <update_sensors+0x2d8>)
 8004172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	point++;
 8004178:	4b4f      	ldr	r3, [pc, #316]	@ (80042b8 <update_sensors+0x2c4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	4a4e      	ldr	r2, [pc, #312]	@ (80042b8 <update_sensors+0x2c4>)
 8004180:	6013      	str	r3, [r2, #0]

	uint32_t tot_diff_FL=0;
 8004182:	2300      	movs	r3, #0
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t tot_diff_FR=0;
 8004186:	2300      	movs	r3, #0
 8004188:	623b      	str	r3, [r7, #32]
	uint32_t tot_diff_L=0;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
	uint32_t tot_diff_R=0;
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]

	for (int i=0;i<5;i++){
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e01e      	b.n	80041d6 <update_sensors+0x1e2>
		tot_diff_FL+=FL_buff[i];
 8004198:	4a49      	ldr	r2, [pc, #292]	@ (80042c0 <update_sensors+0x2cc>)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a2:	4413      	add	r3, r2
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24
		tot_diff_FR+=FR_buff[i];
 80041a6:	4a47      	ldr	r2, [pc, #284]	@ (80042c4 <update_sensors+0x2d0>)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ae:	6a3a      	ldr	r2, [r7, #32]
 80041b0:	4413      	add	r3, r2
 80041b2:	623b      	str	r3, [r7, #32]
		tot_diff_L+=L_buff[i];
 80041b4:	4a44      	ldr	r2, [pc, #272]	@ (80042c8 <update_sensors+0x2d4>)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	61fb      	str	r3, [r7, #28]
		tot_diff_R+=R_buff[i];
 80041c2:	4a42      	ldr	r2, [pc, #264]	@ (80042cc <update_sensors+0x2d8>)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
	for (int i=0;i<5;i++){
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	3301      	adds	r3, #1
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	dddd      	ble.n	8004198 <update_sensors+0x1a4>
	}

    sensors.front_left  = tot_diff_FL/5; //diff_FL; //
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	4a3c      	ldr	r2, [pc, #240]	@ (80042d0 <update_sensors+0x2dc>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	089b      	lsrs	r3, r3, #2
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	4b3a      	ldr	r3, [pc, #232]	@ (80042d4 <update_sensors+0x2e0>)
 80041ea:	811a      	strh	r2, [r3, #8]
    sensors.front_right = tot_diff_FR/5; //diff_FR; //
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	4a38      	ldr	r2, [pc, #224]	@ (80042d0 <update_sensors+0x2dc>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	089b      	lsrs	r3, r3, #2
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <update_sensors+0x2e0>)
 80041fa:	805a      	strh	r2, [r3, #2]
    sensors.side_left   = tot_diff_L/5;  //diff_L; //
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	4a34      	ldr	r2, [pc, #208]	@ (80042d0 <update_sensors+0x2dc>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	b29a      	uxth	r2, r3
 8004208:	4b32      	ldr	r3, [pc, #200]	@ (80042d4 <update_sensors+0x2e0>)
 800420a:	80da      	strh	r2, [r3, #6]
    sensors.side_right  = tot_diff_R/5;  //diff_R; //
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	4a30      	ldr	r2, [pc, #192]	@ (80042d0 <update_sensors+0x2dc>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	b29a      	uxth	r2, r3
 8004218:	4b2e      	ldr	r3, [pc, #184]	@ (80042d4 <update_sensors+0x2e0>)
 800421a:	809a      	strh	r2, [r3, #4]
    sensors.battery = read_adc_channel(ADC_CHANNEL_0);
 800421c:	2000      	movs	r0, #0
 800421e:	f7ff fea7 	bl	8003f70 <read_adc_channel>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	4b2b      	ldr	r3, [pc, #172]	@ (80042d4 <update_sensors+0x2e0>)
 8004228:	801a      	strh	r2, [r3, #0]

    // Process wall detection using calibrated thresholds
    if (sensor_cal.calibration_valid) {
 800422a:	4b2b      	ldr	r3, [pc, #172]	@ (80042d8 <update_sensors+0x2e4>)
 800422c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004230:	2b00      	cmp	r3, #0
 8004232:	d032      	beq.n	800429a <update_sensors+0x2a6>
        // Use dynamic thresholds
        sensors.wall_front = (sensors.front_left > get_calibrated_threshold(0)) ||
 8004234:	4b27      	ldr	r3, [pc, #156]	@ (80042d4 <update_sensors+0x2e0>)
 8004236:	891c      	ldrh	r4, [r3, #8]
 8004238:	2000      	movs	r0, #0
 800423a:	f000 f88d 	bl	8004358 <get_calibrated_threshold>
 800423e:	4603      	mov	r3, r0
 8004240:	429c      	cmp	r4, r3
 8004242:	d807      	bhi.n	8004254 <update_sensors+0x260>
                            (sensors.front_right > get_calibrated_threshold(1));
 8004244:	4b23      	ldr	r3, [pc, #140]	@ (80042d4 <update_sensors+0x2e0>)
 8004246:	885c      	ldrh	r4, [r3, #2]
 8004248:	2001      	movs	r0, #1
 800424a:	f000 f885 	bl	8004358 <get_calibrated_threshold>
 800424e:	4603      	mov	r3, r0
        sensors.wall_front = (sensors.front_left > get_calibrated_threshold(0)) ||
 8004250:	429c      	cmp	r4, r3
 8004252:	d901      	bls.n	8004258 <update_sensors+0x264>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <update_sensors+0x266>
 8004258:	2300      	movs	r3, #0
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	b2da      	uxtb	r2, r3
 8004260:	4b1c      	ldr	r3, [pc, #112]	@ (80042d4 <update_sensors+0x2e0>)
 8004262:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > get_calibrated_threshold(2));
 8004264:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <update_sensors+0x2e0>)
 8004266:	88dc      	ldrh	r4, [r3, #6]
 8004268:	2002      	movs	r0, #2
 800426a:	f000 f875 	bl	8004358 <get_calibrated_threshold>
 800426e:	4603      	mov	r3, r0
 8004270:	429c      	cmp	r4, r3
 8004272:	bf8c      	ite	hi
 8004274:	2301      	movhi	r3, #1
 8004276:	2300      	movls	r3, #0
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4b16      	ldr	r3, [pc, #88]	@ (80042d4 <update_sensors+0x2e0>)
 800427c:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > get_calibrated_threshold(3));
 800427e:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <update_sensors+0x2e0>)
 8004280:	889c      	ldrh	r4, [r3, #4]
 8004282:	2003      	movs	r0, #3
 8004284:	f000 f868 	bl	8004358 <get_calibrated_threshold>
 8004288:	4603      	mov	r3, r0
 800428a:	429c      	cmp	r4, r3
 800428c:	bf8c      	ite	hi
 800428e:	2301      	movhi	r3, #1
 8004290:	2300      	movls	r3, #0
 8004292:	b2da      	uxtb	r2, r3
 8004294:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <update_sensors+0x2e0>)
 8004296:	731a      	strb	r2, [r3, #12]
 8004298:	e038      	b.n	800430c <update_sensors+0x318>
    } else {
        // Fallback to static thresholds
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 800429a:	4b0e      	ldr	r3, [pc, #56]	@ (80042d4 <update_sensors+0x2e0>)
 800429c:	891b      	ldrh	r3, [r3, #8]
 800429e:	2b32      	cmp	r3, #50	@ 0x32
 80042a0:	d803      	bhi.n	80042aa <update_sensors+0x2b6>
                            (sensors.front_right > WALL_THRESHOLD_FRONT);
 80042a2:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <update_sensors+0x2e0>)
 80042a4:	885b      	ldrh	r3, [r3, #2]
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 80042a6:	2b32      	cmp	r3, #50	@ 0x32
 80042a8:	d918      	bls.n	80042dc <update_sensors+0x2e8>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e017      	b.n	80042de <update_sensors+0x2ea>
 80042ae:	bf00      	nop
 80042b0:	40020400 	.word	0x40020400
 80042b4:	40020000 	.word	0x40020000
 80042b8:	20001d90 	.word	0x20001d90
 80042bc:	10624dd3 	.word	0x10624dd3
 80042c0:	20001d94 	.word	0x20001d94
 80042c4:	20001da8 	.word	0x20001da8
 80042c8:	20001dbc 	.word	0x20001dbc
 80042cc:	20001dd0 	.word	0x20001dd0
 80042d0:	cccccccd 	.word	0xcccccccd
 80042d4:	2000144c 	.word	0x2000144c
 80042d8:	20001d5c 	.word	0x20001d5c
 80042dc:	2300      	movs	r3, #0
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004350 <update_sensors+0x35c>)
 80042e6:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > WALL_THRESHOLD_SIDE);
 80042e8:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <update_sensors+0x35c>)
 80042ea:	88db      	ldrh	r3, [r3, #6]
 80042ec:	2b14      	cmp	r3, #20
 80042ee:	bf8c      	ite	hi
 80042f0:	2301      	movhi	r3, #1
 80042f2:	2300      	movls	r3, #0
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b16      	ldr	r3, [pc, #88]	@ (8004350 <update_sensors+0x35c>)
 80042f8:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > WALL_THRESHOLD_SIDE);
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <update_sensors+0x35c>)
 80042fc:	889b      	ldrh	r3, [r3, #4]
 80042fe:	2b14      	cmp	r3, #20
 8004300:	bf8c      	ite	hi
 8004302:	2301      	movhi	r3, #1
 8004304:	2300      	movls	r3, #0
 8004306:	b2da      	uxtb	r2, r3
 8004308:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <update_sensors+0x35c>)
 800430a:	731a      	strb	r2, [r3, #12]
//	                          on_FL, off_FL, on_FR,off_FR,
//	                          on_L, off_L,on_R, off_R);


	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
		                          sensors.front_left, sensors.front_right,sensors.wall_front,
 800430c:	4b10      	ldr	r3, [pc, #64]	@ (8004350 <update_sensors+0x35c>)
 800430e:	891b      	ldrh	r3, [r3, #8]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8004310:	461c      	mov	r4, r3
		                          sensors.front_left, sensors.front_right,sensors.wall_front,
 8004312:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <update_sensors+0x35c>)
 8004314:	885b      	ldrh	r3, [r3, #2]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8004316:	461d      	mov	r5, r3
		                          sensors.front_left, sensors.front_right,sensors.wall_front,
 8004318:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <update_sensors+0x35c>)
 800431a:	7a9b      	ldrb	r3, [r3, #10]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 800431c:	461e      	mov	r6, r3
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
 800431e:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <update_sensors+0x35c>)
 8004320:	88db      	ldrh	r3, [r3, #6]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8004322:	461a      	mov	r2, r3
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
 8004324:	4b0a      	ldr	r3, [pc, #40]	@ (8004350 <update_sensors+0x35c>)
 8004326:	7adb      	ldrb	r3, [r3, #11]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8004328:	4619      	mov	r1, r3
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
 800432a:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <update_sensors+0x35c>)
 800432c:	889b      	ldrh	r3, [r3, #4]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 800432e:	4618      	mov	r0, r3
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
 8004330:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <update_sensors+0x35c>)
 8004332:	7b1b      	ldrb	r3, [r3, #12]
	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
 8004334:	9303      	str	r3, [sp, #12]
 8004336:	9002      	str	r0, [sp, #8]
 8004338:	9101      	str	r1, [sp, #4]
 800433a:	9200      	str	r2, [sp, #0]
 800433c:	4633      	mov	r3, r6
 800433e:	462a      	mov	r2, r5
 8004340:	4621      	mov	r1, r4
 8004342:	4804      	ldr	r0, [pc, #16]	@ (8004354 <update_sensors+0x360>)
 8004344:	f7fc feb8 	bl	80010b8 <send_bluetooth_printf>

}
 8004348:	bf00      	nop
 800434a:	373c      	adds	r7, #60	@ 0x3c
 800434c:	46bd      	mov	sp, r7
 800434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004350:	2000144c 	.word	0x2000144c
 8004354:	0800d548 	.word	0x0800d548

08004358 <get_calibrated_threshold>:
 * @brief Get calibrated wall threshold for specific sensor
 * @param sensor_index: 0=Front_Left, 1=Front_Right, 2=Side_Left, 3=Side_Right
 * @return Calibrated threshold value
 */
uint16_t get_calibrated_threshold(int sensor_index)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
    if (sensor_index < 0 || sensor_index > 3 || !sensor_cal.calibration_valid) {
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	db0a      	blt.n	800437c <get_calibrated_threshold+0x24>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b03      	cmp	r3, #3
 800436a:	dc07      	bgt.n	800437c <get_calibrated_threshold+0x24>
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <get_calibrated_threshold+0x48>)
 800436e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004372:	f083 0301 	eor.w	r3, r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d006      	beq.n	800438a <get_calibrated_threshold+0x32>
        // Return default thresholds if calibration failed
        return (sensor_index < 2) ? WALL_THRESHOLD_FRONT : WALL_THRESHOLD_SIDE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b01      	cmp	r3, #1
 8004380:	dc01      	bgt.n	8004386 <get_calibrated_threshold+0x2e>
 8004382:	2332      	movs	r3, #50	@ 0x32
 8004384:	e006      	b.n	8004394 <get_calibrated_threshold+0x3c>
 8004386:	2314      	movs	r3, #20
 8004388:	e004      	b.n	8004394 <get_calibrated_threshold+0x3c>
    }

    return sensor_cal.wall_thresholds[sensor_index];
 800438a:	4a05      	ldr	r2, [pc, #20]	@ (80043a0 <get_calibrated_threshold+0x48>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	20001d5c 	.word	0x20001d5c

080043a4 <adc_system_diagnostics>:

    send_bluetooth_message("===============================\r\n");
}


void adc_system_diagnostics(void) {
 80043a4:	b5b0      	push	{r4, r5, r7, lr}
 80043a6:	b08e      	sub	sp, #56	@ 0x38
 80043a8:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 80043aa:	484b      	ldr	r0, [pc, #300]	@ (80044d8 <adc_system_diagnostics+0x134>)
 80043ac:	f7fc fe6e 	bl	800108c <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 80043b0:	4b4a      	ldr	r3, [pc, #296]	@ (80044dc <adc_system_diagnostics+0x138>)
 80043b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 80043bc:	4848      	ldr	r0, [pc, #288]	@ (80044e0 <adc_system_diagnostics+0x13c>)
 80043be:	f7fc fe65 	bl	800108c <send_bluetooth_message>
 80043c2:	e002      	b.n	80043ca <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 80043c4:	4847      	ldr	r0, [pc, #284]	@ (80044e4 <adc_system_diagnostics+0x140>)
 80043c6:	f7fc fe61 	bl	800108c <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 80043ca:	4b44      	ldr	r3, [pc, #272]	@ (80044dc <adc_system_diagnostics+0x138>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 80043d6:	4844      	ldr	r0, [pc, #272]	@ (80044e8 <adc_system_diagnostics+0x144>)
 80043d8:	f7fc fe58 	bl	800108c <send_bluetooth_message>
 80043dc:	e002      	b.n	80043e4 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 80043de:	4843      	ldr	r0, [pc, #268]	@ (80044ec <adc_system_diagnostics+0x148>)
 80043e0:	f7fc fe54 	bl	800108c <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 80043e4:	4b42      	ldr	r3, [pc, #264]	@ (80044f0 <adc_system_diagnostics+0x14c>)
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d103      	bne.n	80043f4 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 80043ec:	4841      	ldr	r0, [pc, #260]	@ (80044f4 <adc_system_diagnostics+0x150>)
 80043ee:	f7fc fe4d 	bl	800108c <send_bluetooth_message>
 80043f2:	e005      	b.n	8004400 <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 80043f4:	4b3e      	ldr	r3, [pc, #248]	@ (80044f0 <adc_system_diagnostics+0x14c>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	4619      	mov	r1, r3
 80043fa:	483f      	ldr	r0, [pc, #252]	@ (80044f8 <adc_system_diagnostics+0x154>)
 80043fc:	f7fc fe5c 	bl	80010b8 <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 8004400:	483e      	ldr	r0, [pc, #248]	@ (80044fc <adc_system_diagnostics+0x158>)
 8004402:	f7fc fe43 	bl	800108c <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 8004406:	4b3e      	ldr	r3, [pc, #248]	@ (8004500 <adc_system_diagnostics+0x15c>)
 8004408:	f107 0420 	add.w	r4, r7, #32
 800440c:	461d      	mov	r5, r3
 800440e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004412:	682b      	ldr	r3, [r5, #0]
 8004414:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 8004416:	4b3b      	ldr	r3, [pc, #236]	@ (8004504 <adc_system_diagnostics+0x160>)
 8004418:	f107 040c 	add.w	r4, r7, #12
 800441c:	461d      	mov	r5, r3
 800441e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004422:	682b      	ldr	r3, [r5, #0]
 8004424:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 8004426:	2300      	movs	r3, #0
 8004428:	637b      	str	r3, [r7, #52]	@ 0x34
 800442a:	e04b      	b.n	80044c4 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 800442c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	3338      	adds	r3, #56	@ 0x38
 8004432:	443b      	add	r3, r7
 8004434:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fd99 	bl	8003f70 <read_adc_channel>
 800443e:	4603      	mov	r3, r0
 8004440:	461a      	mov	r2, r3
 8004442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	3338      	adds	r3, #56	@ 0x38
 8004448:	443b      	add	r3, r7
 800444a:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 800444e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	3338      	adds	r3, #56	@ 0x38
 8004454:	443b      	add	r3, r7
 8004456:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 800445a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	3338      	adds	r3, #56	@ 0x38
 8004460:	443b      	add	r3, r7
 8004462:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01f      	beq.n	80044aa <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 800446a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	3338      	adds	r3, #56	@ 0x38
 8004470:	443b      	add	r3, r7
 8004472:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d015      	beq.n	80044a6 <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 800447a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	3338      	adds	r3, #56	@ 0x38
 8004480:	443b      	add	r3, r7
 8004482:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d00b      	beq.n	80044a2 <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 800448a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	3338      	adds	r3, #56	@ 0x38
 8004490:	443b      	add	r3, r7
 8004492:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d101      	bne.n	800449e <adc_system_diagnostics+0xfa>
 800449a:	2204      	movs	r2, #4
 800449c:	e006      	b.n	80044ac <adc_system_diagnostics+0x108>
 800449e:	2205      	movs	r2, #5
 80044a0:	e004      	b.n	80044ac <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 80044a2:	2203      	movs	r2, #3
 80044a4:	e002      	b.n	80044ac <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80044a6:	2202      	movs	r2, #2
 80044a8:	e000      	b.n	80044ac <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80044aa:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 80044ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	3338      	adds	r3, #56	@ 0x38
 80044b2:	443b      	add	r3, r7
 80044b4:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80044b8:	4813      	ldr	r0, [pc, #76]	@ (8004508 <adc_system_diagnostics+0x164>)
 80044ba:	f7fc fdfd 	bl	80010b8 <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 80044be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c0:	3301      	adds	r3, #1
 80044c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	ddb0      	ble.n	800442c <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 80044ca:	4810      	ldr	r0, [pc, #64]	@ (800450c <adc_system_diagnostics+0x168>)
 80044cc:	f7fc fdde 	bl	800108c <send_bluetooth_message>
}
 80044d0:	bf00      	nop
 80044d2:	3738      	adds	r7, #56	@ 0x38
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bdb0      	pop	{r4, r5, r7, pc}
 80044d8:	0800dcc0 	.word	0x0800dcc0
 80044dc:	40023800 	.word	0x40023800
 80044e0:	0800dce4 	.word	0x0800dce4
 80044e4:	0800dd00 	.word	0x0800dd00
 80044e8:	0800dd1c 	.word	0x0800dd1c
 80044ec:	0800dd38 	.word	0x0800dd38
 80044f0:	20000230 	.word	0x20000230
 80044f4:	0800dd54 	.word	0x0800dd54
 80044f8:	0800dd6c 	.word	0x0800dd6c
 80044fc:	0800dd84 	.word	0x0800dd84
 8004500:	0800ddb4 	.word	0x0800ddb4
 8004504:	0800de00 	.word	0x0800de00
 8004508:	0800dda4 	.word	0x0800dda4
 800450c:	0800dc9c 	.word	0x0800dc9c

08004510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	4b10      	ldr	r3, [pc, #64]	@ (800455c <HAL_MspInit+0x4c>)
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	4a0f      	ldr	r2, [pc, #60]	@ (800455c <HAL_MspInit+0x4c>)
 8004520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004524:	6453      	str	r3, [r2, #68]	@ 0x44
 8004526:	4b0d      	ldr	r3, [pc, #52]	@ (800455c <HAL_MspInit+0x4c>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	4b09      	ldr	r3, [pc, #36]	@ (800455c <HAL_MspInit+0x4c>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	4a08      	ldr	r2, [pc, #32]	@ (800455c <HAL_MspInit+0x4c>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	@ 0x40
 8004542:	4b06      	ldr	r3, [pc, #24]	@ (800455c <HAL_MspInit+0x4c>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800

08004560 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	@ 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a17      	ldr	r2, [pc, #92]	@ (80045dc <HAL_ADC_MspInit+0x7c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d127      	bne.n	80045d2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	4b16      	ldr	r3, [pc, #88]	@ (80045e0 <HAL_ADC_MspInit+0x80>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	4a15      	ldr	r2, [pc, #84]	@ (80045e0 <HAL_ADC_MspInit+0x80>)
 800458c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004590:	6453      	str	r3, [r2, #68]	@ 0x44
 8004592:	4b13      	ldr	r3, [pc, #76]	@ (80045e0 <HAL_ADC_MspInit+0x80>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	4b0f      	ldr	r3, [pc, #60]	@ (80045e0 <HAL_ADC_MspInit+0x80>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	4a0e      	ldr	r2, [pc, #56]	@ (80045e0 <HAL_ADC_MspInit+0x80>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ae:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <HAL_ADC_MspInit+0x80>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 80045ba:	233d      	movs	r3, #61	@ 0x3d
 80045bc:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045be:	2303      	movs	r3, #3
 80045c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c6:	f107 0314 	add.w	r3, r7, #20
 80045ca:	4619      	mov	r1, r3
 80045cc:	4805      	ldr	r0, [pc, #20]	@ (80045e4 <HAL_ADC_MspInit+0x84>)
 80045ce:	f001 fa3b 	bl	8005a48 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80045d2:	bf00      	nop
 80045d4:	3728      	adds	r7, #40	@ 0x28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40012000 	.word	0x40012000
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40020000 	.word	0x40020000

080045e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	@ 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f0:	f107 0314 	add.w	r3, r7, #20
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a19      	ldr	r2, [pc, #100]	@ (800466c <HAL_SPI_MspInit+0x84>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d12c      	bne.n	8004664 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	4b18      	ldr	r3, [pc, #96]	@ (8004670 <HAL_SPI_MspInit+0x88>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	4a17      	ldr	r2, [pc, #92]	@ (8004670 <HAL_SPI_MspInit+0x88>)
 8004614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004618:	6413      	str	r3, [r2, #64]	@ 0x40
 800461a:	4b15      	ldr	r3, [pc, #84]	@ (8004670 <HAL_SPI_MspInit+0x88>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	4b11      	ldr	r3, [pc, #68]	@ (8004670 <HAL_SPI_MspInit+0x88>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	4a10      	ldr	r2, [pc, #64]	@ (8004670 <HAL_SPI_MspInit+0x88>)
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	6313      	str	r3, [r2, #48]	@ 0x30
 8004636:	4b0e      	ldr	r3, [pc, #56]	@ (8004670 <HAL_SPI_MspInit+0x88>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 8004642:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004648:	2302      	movs	r3, #2
 800464a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004650:	2303      	movs	r3, #3
 8004652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004654:	2305      	movs	r3, #5
 8004656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	4619      	mov	r1, r3
 800465e:	4805      	ldr	r0, [pc, #20]	@ (8004674 <HAL_SPI_MspInit+0x8c>)
 8004660:	f001 f9f2 	bl	8005a48 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004664:	bf00      	nop
 8004666:	3728      	adds	r7, #40	@ 0x28
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40003800 	.word	0x40003800
 8004670:	40023800 	.word	0x40023800
 8004674:	40020400 	.word	0x40020400

08004678 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a18      	ldr	r2, [pc, #96]	@ (80046e8 <HAL_TIM_Base_MspInit+0x70>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d116      	bne.n	80046b8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <HAL_TIM_Base_MspInit+0x74>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	4a16      	ldr	r2, [pc, #88]	@ (80046ec <HAL_TIM_Base_MspInit+0x74>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6453      	str	r3, [r2, #68]	@ 0x44
 800469a:	4b14      	ldr	r3, [pc, #80]	@ (80046ec <HAL_TIM_Base_MspInit+0x74>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2107      	movs	r1, #7
 80046aa:	2019      	movs	r0, #25
 80046ac:	f001 f903 	bl	80058b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80046b0:	2019      	movs	r0, #25
 80046b2:	f001 f91c 	bl	80058ee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80046b6:	e012      	b.n	80046de <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0c      	ldr	r2, [pc, #48]	@ (80046f0 <HAL_TIM_Base_MspInit+0x78>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10d      	bne.n	80046de <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <HAL_TIM_Base_MspInit+0x74>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	4a08      	ldr	r2, [pc, #32]	@ (80046ec <HAL_TIM_Base_MspInit+0x74>)
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046d2:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <HAL_TIM_Base_MspInit+0x74>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40000400 	.word	0x40000400

080046f4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08c      	sub	sp, #48	@ 0x30
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 031c 	add.w	r3, r7, #28
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004714:	d14b      	bne.n	80047ae <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	4b3f      	ldr	r3, [pc, #252]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	4a3e      	ldr	r2, [pc, #248]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6413      	str	r3, [r2, #64]	@ 0x40
 8004726:	4b3c      	ldr	r3, [pc, #240]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	4b38      	ldr	r3, [pc, #224]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	4a37      	ldr	r2, [pc, #220]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	6313      	str	r3, [r2, #48]	@ 0x30
 8004742:	4b35      	ldr	r3, [pc, #212]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	4b31      	ldr	r3, [pc, #196]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004756:	4a30      	ldr	r2, [pc, #192]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	6313      	str	r3, [r2, #48]	@ 0x30
 800475e:	4b2e      	ldr	r3, [pc, #184]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 800476a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800476e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004770:	2302      	movs	r3, #2
 8004772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004778:	2300      	movs	r3, #0
 800477a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800477c:	2301      	movs	r3, #1
 800477e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 8004780:	f107 031c 	add.w	r3, r7, #28
 8004784:	4619      	mov	r1, r3
 8004786:	4825      	ldr	r0, [pc, #148]	@ (800481c <HAL_TIM_Encoder_MspInit+0x128>)
 8004788:	f001 f95e 	bl	8005a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 800478c:	2308      	movs	r3, #8
 800478e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004790:	2302      	movs	r3, #2
 8004792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004794:	2300      	movs	r3, #0
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004798:	2300      	movs	r3, #0
 800479a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800479c:	2301      	movs	r3, #1
 800479e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 80047a0:	f107 031c 	add.w	r3, r7, #28
 80047a4:	4619      	mov	r1, r3
 80047a6:	481e      	ldr	r0, [pc, #120]	@ (8004820 <HAL_TIM_Encoder_MspInit+0x12c>)
 80047a8:	f001 f94e 	bl	8005a48 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80047ac:	e030      	b.n	8004810 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004824 <HAL_TIM_Encoder_MspInit+0x130>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d12b      	bne.n	8004810 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	4b16      	ldr	r3, [pc, #88]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	4a15      	ldr	r2, [pc, #84]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 80047c2:	f043 0304 	orr.w	r3, r3, #4
 80047c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80047c8:	4b13      	ldr	r3, [pc, #76]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 80047de:	f043 0302 	orr.w	r3, r3, #2
 80047e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <HAL_TIM_Encoder_MspInit+0x124>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 80047f0:	23c0      	movs	r3, #192	@ 0xc0
 80047f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f4:	2302      	movs	r3, #2
 80047f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fc:	2300      	movs	r3, #0
 80047fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004800:	2302      	movs	r3, #2
 8004802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004804:	f107 031c 	add.w	r3, r7, #28
 8004808:	4619      	mov	r1, r3
 800480a:	4805      	ldr	r0, [pc, #20]	@ (8004820 <HAL_TIM_Encoder_MspInit+0x12c>)
 800480c:	f001 f91c 	bl	8005a48 <HAL_GPIO_Init>
}
 8004810:	bf00      	nop
 8004812:	3730      	adds	r7, #48	@ 0x30
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	40020000 	.word	0x40020000
 8004820:	40020400 	.word	0x40020400
 8004824:	40000800 	.word	0x40000800

08004828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	@ 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	60da      	str	r2, [r3, #12]
 800483e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a33      	ldr	r2, [pc, #204]	@ (8004914 <HAL_TIM_MspPostInit+0xec>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d11f      	bne.n	800488a <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	4b32      	ldr	r3, [pc, #200]	@ (8004918 <HAL_TIM_MspPostInit+0xf0>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004852:	4a31      	ldr	r2, [pc, #196]	@ (8004918 <HAL_TIM_MspPostInit+0xf0>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	6313      	str	r3, [r2, #48]	@ 0x30
 800485a:	4b2f      	ldr	r3, [pc, #188]	@ (8004918 <HAL_TIM_MspPostInit+0xf0>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 8004866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800486a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486c:	2302      	movs	r3, #2
 800486e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004874:	2300      	movs	r3, #0
 8004876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004878:	2301      	movs	r3, #1
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 800487c:	f107 0314 	add.w	r3, r7, #20
 8004880:	4619      	mov	r1, r3
 8004882:	4826      	ldr	r0, [pc, #152]	@ (800491c <HAL_TIM_MspPostInit+0xf4>)
 8004884:	f001 f8e0 	bl	8005a48 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004888:	e040      	b.n	800490c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a24      	ldr	r2, [pc, #144]	@ (8004920 <HAL_TIM_MspPostInit+0xf8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d13b      	bne.n	800490c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	4b1f      	ldr	r3, [pc, #124]	@ (8004918 <HAL_TIM_MspPostInit+0xf0>)
 800489a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489c:	4a1e      	ldr	r2, [pc, #120]	@ (8004918 <HAL_TIM_MspPostInit+0xf0>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80048a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004918 <HAL_TIM_MspPostInit+0xf0>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	4b18      	ldr	r3, [pc, #96]	@ (8004918 <HAL_TIM_MspPostInit+0xf0>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b8:	4a17      	ldr	r2, [pc, #92]	@ (8004918 <HAL_TIM_MspPostInit+0xf0>)
 80048ba:	f043 0302 	orr.w	r3, r3, #2
 80048be:	6313      	str	r3, [r2, #48]	@ 0x30
 80048c0:	4b15      	ldr	r3, [pc, #84]	@ (8004918 <HAL_TIM_MspPostInit+0xf0>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 80048cc:	23c0      	movs	r3, #192	@ 0xc0
 80048ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	2302      	movs	r3, #2
 80048d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d8:	2300      	movs	r3, #0
 80048da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048dc:	2302      	movs	r3, #2
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	4619      	mov	r1, r3
 80048e6:	480d      	ldr	r0, [pc, #52]	@ (800491c <HAL_TIM_MspPostInit+0xf4>)
 80048e8:	f001 f8ae 	bl	8005a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 80048ec:	2303      	movs	r3, #3
 80048ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f0:	2302      	movs	r3, #2
 80048f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f8:	2300      	movs	r3, #0
 80048fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048fc:	2302      	movs	r3, #2
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	4619      	mov	r1, r3
 8004906:	4807      	ldr	r0, [pc, #28]	@ (8004924 <HAL_TIM_MspPostInit+0xfc>)
 8004908:	f001 f89e 	bl	8005a48 <HAL_GPIO_Init>
}
 800490c:	bf00      	nop
 800490e:	3728      	adds	r7, #40	@ 0x28
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40010000 	.word	0x40010000
 8004918:	40023800 	.word	0x40023800
 800491c:	40020000 	.word	0x40020000
 8004920:	40000400 	.word	0x40000400
 8004924:	40020400 	.word	0x40020400

08004928 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	@ 0x28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <HAL_UART_MspInit+0x94>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d134      	bne.n	80049b4 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	4b1c      	ldr	r3, [pc, #112]	@ (80049c0 <HAL_UART_MspInit+0x98>)
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	4a1b      	ldr	r2, [pc, #108]	@ (80049c0 <HAL_UART_MspInit+0x98>)
 8004954:	f043 0320 	orr.w	r3, r3, #32
 8004958:	6453      	str	r3, [r2, #68]	@ 0x44
 800495a:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <HAL_UART_MspInit+0x98>)
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <HAL_UART_MspInit+0x98>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <HAL_UART_MspInit+0x98>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6313      	str	r3, [r2, #48]	@ 0x30
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <HAL_UART_MspInit+0x98>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8004982:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004988:	2302      	movs	r3, #2
 800498a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498c:	2300      	movs	r3, #0
 800498e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004990:	2303      	movs	r3, #3
 8004992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004994:	2308      	movs	r3, #8
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004998:	f107 0314 	add.w	r3, r7, #20
 800499c:	4619      	mov	r1, r3
 800499e:	4809      	ldr	r0, [pc, #36]	@ (80049c4 <HAL_UART_MspInit+0x9c>)
 80049a0:	f001 f852 	bl	8005a48 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80049a4:	2200      	movs	r2, #0
 80049a6:	2106      	movs	r1, #6
 80049a8:	2047      	movs	r0, #71	@ 0x47
 80049aa:	f000 ff84 	bl	80058b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80049ae:	2047      	movs	r0, #71	@ 0x47
 80049b0:	f000 ff9d 	bl	80058ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 80049b4:	bf00      	nop
 80049b6:	3728      	adds	r7, #40	@ 0x28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40011400 	.word	0x40011400
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40020000 	.word	0x40020000

080049c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <NMI_Handler+0x4>

080049d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049d4:	bf00      	nop
 80049d6:	e7fd      	b.n	80049d4 <HardFault_Handler+0x4>

080049d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049dc:	bf00      	nop
 80049de:	e7fd      	b.n	80049dc <MemManage_Handler+0x4>

080049e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049e4:	bf00      	nop
 80049e6:	e7fd      	b.n	80049e4 <BusFault_Handler+0x4>

080049e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <UsageFault_Handler+0x4>

080049f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a1e:	f000 fa39 	bl	8004e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8004a2a:	2002      	movs	r0, #2
 8004a2c:	f001 f9c4 	bl	8005db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004a30:	bf00      	nop
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a38:	4802      	ldr	r0, [pc, #8]	@ (8004a44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a3a:	f002 feef 	bl	800781c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	200002d0 	.word	0x200002d0

08004a48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8004a4c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004a50:	f001 f9b2 	bl	8005db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a54:	bf00      	nop
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004a5c:	4802      	ldr	r0, [pc, #8]	@ (8004a68 <USART6_IRQHandler+0x10>)
 8004a5e:	f003 fe0b 	bl	8008678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	200003f0 	.word	0x200003f0

08004a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return 1;
 8004a70:	2301      	movs	r3, #1
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <_kill>:

int _kill(int pid, int sig)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a86:	f005 fb4f 	bl	800a128 <__errno>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2216      	movs	r2, #22
 8004a8e:	601a      	str	r2, [r3, #0]
  return -1;
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <_exit>:

void _exit (int status)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ffe7 	bl	8004a7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004aae:	bf00      	nop
 8004ab0:	e7fd      	b.n	8004aae <_exit+0x12>

08004ab2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e00a      	b.n	8004ada <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	4601      	mov	r1, r0
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	60ba      	str	r2, [r7, #8]
 8004ad0:	b2ca      	uxtb	r2, r1
 8004ad2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	dbf0      	blt.n	8004ac4 <_read+0x12>
  }

  return len;
 8004ae2:	687b      	ldr	r3, [r7, #4]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e009      	b.n	8004b12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	60ba      	str	r2, [r7, #8]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	dbf1      	blt.n	8004afe <_write+0x12>
  }
  return len;
 8004b1a:	687b      	ldr	r3, [r7, #4]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <_close>:

int _close(int file)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b4c:	605a      	str	r2, [r3, #4]
  return 0;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <_isatty>:

int _isatty(int file)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b64:	2301      	movs	r3, #1
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b94:	4a14      	ldr	r2, [pc, #80]	@ (8004be8 <_sbrk+0x5c>)
 8004b96:	4b15      	ldr	r3, [pc, #84]	@ (8004bec <_sbrk+0x60>)
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ba0:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <_sbrk+0x64>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ba8:	4b11      	ldr	r3, [pc, #68]	@ (8004bf0 <_sbrk+0x64>)
 8004baa:	4a12      	ldr	r2, [pc, #72]	@ (8004bf4 <_sbrk+0x68>)
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bae:	4b10      	ldr	r3, [pc, #64]	@ (8004bf0 <_sbrk+0x64>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d207      	bcs.n	8004bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bbc:	f005 fab4 	bl	800a128 <__errno>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	220c      	movs	r2, #12
 8004bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bca:	e009      	b.n	8004be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bcc:	4b08      	ldr	r3, [pc, #32]	@ (8004bf0 <_sbrk+0x64>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bd2:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <_sbrk+0x64>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	4a05      	ldr	r2, [pc, #20]	@ (8004bf0 <_sbrk+0x64>)
 8004bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bde:	68fb      	ldr	r3, [r7, #12]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20020000 	.word	0x20020000
 8004bec:	00000400 	.word	0x00000400
 8004bf0:	20001de4 	.word	0x20001de4
 8004bf4:	20001f38 	.word	0x20001f38

08004bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bfc:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <SystemInit+0x20>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c02:	4a05      	ldr	r2, [pc, #20]	@ (8004c18 <SystemInit+0x20>)
 8004c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	460a      	mov	r2, r1
 8004c26:	71fb      	strb	r3, [r7, #7]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2110      	movs	r1, #16
 8004c3c:	4808      	ldr	r0, [pc, #32]	@ (8004c60 <led_status+0x44>)
 8004c3e:	f001 f887 	bl	8005d50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004c42:	79bb      	ldrb	r3, [r7, #6]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2120      	movs	r1, #32
 8004c52:	4803      	ldr	r0, [pc, #12]	@ (8004c60 <led_status+0x44>)
 8004c54:	f001 f87c 	bl	8005d50 <HAL_GPIO_WritePin>
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40020400 	.word	0x40020400

08004c64 <led_sequence_startup>:

/**
 * @brief LED sequence for different states
 */
void led_sequence_startup(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	e010      	b.n	8004c92 <led_sequence_startup+0x2e>
        led_status(1, 0);
 8004c70:	2100      	movs	r1, #0
 8004c72:	2001      	movs	r0, #1
 8004c74:	f7ff ffd2 	bl	8004c1c <led_status>
        HAL_Delay(150);
 8004c78:	2096      	movs	r0, #150	@ 0x96
 8004c7a:	f000 f92b 	bl	8004ed4 <HAL_Delay>
        led_status(0, 1);
 8004c7e:	2101      	movs	r1, #1
 8004c80:	2000      	movs	r0, #0
 8004c82:	f7ff ffcb 	bl	8004c1c <led_status>
        HAL_Delay(150);
 8004c86:	2096      	movs	r0, #150	@ 0x96
 8004c88:	f000 f924 	bl	8004ed4 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	ddeb      	ble.n	8004c70 <led_sequence_startup+0xc>
    }
    led_status(0, 0);
 8004c98:	2100      	movs	r1, #0
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f7ff ffbe 	bl	8004c1c <led_status>
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <led_sequence_exploring>:

/**
 * @brief LED sequence for exploration
 */
void led_sequence_exploring(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
    led_status(1, 0); // Left LED on during exploration
 8004cac:	2100      	movs	r1, #0
 8004cae:	2001      	movs	r0, #1
 8004cb0:	f7ff ffb4 	bl	8004c1c <led_status>
}
 8004cb4:	bf00      	nop
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <led_sequence_returning>:

/**
 * @brief LED sequence for returning
 */
void led_sequence_returning(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
    led_status(0, 1); // Right LED on during return
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f7ff ffac 	bl	8004c1c <led_status>
}
 8004cc4:	bf00      	nop
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <led_sequence_complete>:

/**
 * @brief LED sequence for completion
 */
void led_sequence_complete(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 8004cce:	2300      	movs	r3, #0
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	e010      	b.n	8004cf6 <led_sequence_complete+0x2e>
        led_status(1, 1);
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	f7ff ffa0 	bl	8004c1c <led_status>
        HAL_Delay(200);
 8004cdc:	20c8      	movs	r0, #200	@ 0xc8
 8004cde:	f000 f8f9 	bl	8004ed4 <HAL_Delay>
        led_status(0, 0);
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	f7ff ff99 	bl	8004c1c <led_status>
        HAL_Delay(200);
 8004cea:	20c8      	movs	r0, #200	@ 0xc8
 8004cec:	f000 f8f2 	bl	8004ed4 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	ddeb      	ble.n	8004cd4 <led_sequence_complete+0xc>
    }
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <led_sequence_error>:

/**
 * @brief LED sequence for error
 */
void led_sequence_error(void)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	e010      	b.n	8004d34 <led_sequence_error+0x2e>
        led_status(1, 1);
 8004d12:	2101      	movs	r1, #1
 8004d14:	2001      	movs	r0, #1
 8004d16:	f7ff ff81 	bl	8004c1c <led_status>
        HAL_Delay(50);
 8004d1a:	2032      	movs	r0, #50	@ 0x32
 8004d1c:	f000 f8da 	bl	8004ed4 <HAL_Delay>
        led_status(0, 0);
 8004d20:	2100      	movs	r1, #0
 8004d22:	2000      	movs	r0, #0
 8004d24:	f7ff ff7a 	bl	8004c1c <led_status>
        HAL_Delay(50);
 8004d28:	2032      	movs	r0, #50	@ 0x32
 8004d2a:	f000 f8d3 	bl	8004ed4 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3301      	adds	r3, #1
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b09      	cmp	r3, #9
 8004d38:	ddeb      	ble.n	8004d12 <led_sequence_error+0xc>
    }
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <get_direction_name>:

/**
 * @brief Get direction name as string
 */
const char* get_direction_name(int direction)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    switch (direction) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d812      	bhi.n	8004d78 <get_direction_name+0x34>
 8004d52:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <get_direction_name+0x14>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d6d 	.word	0x08004d6d
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d75 	.word	0x08004d75
        case NORTH: return "NORTH";
 8004d68:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <get_direction_name+0x44>)
 8004d6a:	e006      	b.n	8004d7a <get_direction_name+0x36>
        case EAST:  return "EAST";
 8004d6c:	4b07      	ldr	r3, [pc, #28]	@ (8004d8c <get_direction_name+0x48>)
 8004d6e:	e004      	b.n	8004d7a <get_direction_name+0x36>
        case SOUTH: return "SOUTH";
 8004d70:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <get_direction_name+0x4c>)
 8004d72:	e002      	b.n	8004d7a <get_direction_name+0x36>
        case WEST:  return "WEST";
 8004d74:	4b07      	ldr	r3, [pc, #28]	@ (8004d94 <get_direction_name+0x50>)
 8004d76:	e000      	b.n	8004d7a <get_direction_name+0x36>
        default:    return "UNKNOWN";
 8004d78:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <get_direction_name+0x54>)
    }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	0800ded0 	.word	0x0800ded0
 8004d8c:	0800ded8 	.word	0x0800ded8
 8004d90:	0800dee0 	.word	0x0800dee0
 8004d94:	0800dee8 	.word	0x0800dee8
 8004d98:	0800def0 	.word	0x0800def0

08004d9c <Reset_Handler>:
 8004d9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004dd4 <LoopFillZerobss+0xe>
 8004da0:	f7ff ff2a 	bl	8004bf8 <SystemInit>
 8004da4:	480c      	ldr	r0, [pc, #48]	@ (8004dd8 <LoopFillZerobss+0x12>)
 8004da6:	490d      	ldr	r1, [pc, #52]	@ (8004ddc <LoopFillZerobss+0x16>)
 8004da8:	4a0d      	ldr	r2, [pc, #52]	@ (8004de0 <LoopFillZerobss+0x1a>)
 8004daa:	2300      	movs	r3, #0
 8004dac:	e002      	b.n	8004db4 <LoopCopyDataInit>

08004dae <CopyDataInit>:
 8004dae:	58d4      	ldr	r4, [r2, r3]
 8004db0:	50c4      	str	r4, [r0, r3]
 8004db2:	3304      	adds	r3, #4

08004db4 <LoopCopyDataInit>:
 8004db4:	18c4      	adds	r4, r0, r3
 8004db6:	428c      	cmp	r4, r1
 8004db8:	d3f9      	bcc.n	8004dae <CopyDataInit>
 8004dba:	4a0a      	ldr	r2, [pc, #40]	@ (8004de4 <LoopFillZerobss+0x1e>)
 8004dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8004de8 <LoopFillZerobss+0x22>)
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e001      	b.n	8004dc6 <LoopFillZerobss>

08004dc2 <FillZerobss>:
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	3204      	adds	r2, #4

08004dc6 <LoopFillZerobss>:
 8004dc6:	42a2      	cmp	r2, r4
 8004dc8:	d3fb      	bcc.n	8004dc2 <FillZerobss>
 8004dca:	f005 f9b3 	bl	800a134 <__libc_init_array>
 8004dce:	f7fc fe61 	bl	8001a94 <main>
 8004dd2:	4770      	bx	lr
 8004dd4:	20020000 	.word	0x20020000
 8004dd8:	20000000 	.word	0x20000000
 8004ddc:	200001fc 	.word	0x200001fc
 8004de0:	0800e344 	.word	0x0800e344
 8004de4:	200001fc 	.word	0x200001fc
 8004de8:	20001f38 	.word	0x20001f38

08004dec <ADC_IRQHandler>:
 8004dec:	e7fe      	b.n	8004dec <ADC_IRQHandler>
	...

08004df0 <HAL_Init>:
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e30 <HAL_Init+0x40>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a0d      	ldr	r2, [pc, #52]	@ (8004e30 <HAL_Init+0x40>)
 8004dfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <HAL_Init+0x40>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a0a      	ldr	r2, [pc, #40]	@ (8004e30 <HAL_Init+0x40>)
 8004e06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <HAL_Init+0x40>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a07      	ldr	r2, [pc, #28]	@ (8004e30 <HAL_Init+0x40>)
 8004e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	2003      	movs	r0, #3
 8004e1a:	f000 fd41 	bl	80058a0 <HAL_NVIC_SetPriorityGrouping>
 8004e1e:	200f      	movs	r0, #15
 8004e20:	f000 f808 	bl	8004e34 <HAL_InitTick>
 8004e24:	f7ff fb74 	bl	8004510 <HAL_MspInit>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023c00 	.word	0x40023c00

08004e34 <HAL_InitTick>:
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	4b12      	ldr	r3, [pc, #72]	@ (8004e88 <HAL_InitTick+0x54>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <HAL_InitTick+0x58>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	4619      	mov	r1, r3
 8004e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fd59 	bl	800590a <HAL_SYSTICK_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_InitTick+0x2e>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e00e      	b.n	8004e80 <HAL_InitTick+0x4c>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b0f      	cmp	r3, #15
 8004e66:	d80a      	bhi.n	8004e7e <HAL_InitTick+0x4a>
 8004e68:	2200      	movs	r2, #0
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e70:	f000 fd21 	bl	80058b6 <HAL_NVIC_SetPriority>
 8004e74:	4a06      	ldr	r2, [pc, #24]	@ (8004e90 <HAL_InitTick+0x5c>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <HAL_InitTick+0x4c>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000028 	.word	0x20000028
 8004e8c:	20000030 	.word	0x20000030
 8004e90:	2000002c 	.word	0x2000002c

08004e94 <HAL_IncTick>:
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_IncTick+0x20>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <HAL_IncTick+0x24>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	4a04      	ldr	r2, [pc, #16]	@ (8004eb8 <HAL_IncTick+0x24>)
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20000030 	.word	0x20000030
 8004eb8:	20001de8 	.word	0x20001de8

08004ebc <HAL_GetTick>:
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	4b03      	ldr	r3, [pc, #12]	@ (8004ed0 <HAL_GetTick+0x14>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20001de8 	.word	0x20001de8

08004ed4 <HAL_Delay>:
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	f7ff ffee 	bl	8004ebc <HAL_GetTick>
 8004ee0:	60b8      	str	r0, [r7, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eec:	d005      	beq.n	8004efa <HAL_Delay+0x26>
 8004eee:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <HAL_Delay+0x44>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	bf00      	nop
 8004efc:	f7ff ffde 	bl	8004ebc <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d8f7      	bhi.n	8004efc <HAL_Delay+0x28>
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000030 	.word	0x20000030

08004f1c <HAL_ADC_Init>:
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_ADC_Init+0x16>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e033      	b.n	8004f9a <HAL_ADC_Init+0x7e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <HAL_ADC_Init+0x32>
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff fb10 	bl	8004560 <HAL_ADC_MspInit>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d118      	bne.n	8004f8c <HAL_ADC_Init+0x70>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004f62:	f023 0302 	bic.w	r3, r3, #2
 8004f66:	f043 0202 	orr.w	r2, r3, #2
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 faca 	bl	8005508 <ADC_Init>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	f043 0201 	orr.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f8a:	e001      	b.n	8004f90 <HAL_ADC_Init+0x74>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_ADC_Start>:
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	2300      	movs	r3, #0
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_ADC_Start+0x1a>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e097      	b.n	80050ee <HAL_ADC_Start+0x14a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d018      	beq.n	8005006 <HAL_ADC_Start+0x62>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	4b45      	ldr	r3, [pc, #276]	@ (80050fc <HAL_ADC_Start+0x158>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a45      	ldr	r2, [pc, #276]	@ (8005100 <HAL_ADC_Start+0x15c>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0c9a      	lsrs	r2, r3, #18
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	e002      	b.n	8005000 <HAL_ADC_Start+0x5c>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f9      	bne.n	8004ffa <HAL_ADC_Start+0x56>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d15f      	bne.n	80050d4 <HAL_ADC_Start+0x130>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	641a      	str	r2, [r3, #64]	@ 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_ADC_Start+0xa2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800503e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	641a      	str	r2, [r3, #64]	@ 0x40
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005052:	d106      	bne.n	8005062 <HAL_ADC_Start+0xbe>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005058:	f023 0206 	bic.w	r2, r3, #6
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005060:	e002      	b.n	8005068 <HAL_ADC_Start+0xc4>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	645a      	str	r2, [r3, #68]	@ 0x44
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005070:	4b24      	ldr	r3, [pc, #144]	@ (8005104 <HAL_ADC_Start+0x160>)
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10f      	bne.n	80050aa <HAL_ADC_Start+0x106>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d129      	bne.n	80050ec <HAL_ADC_Start+0x148>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80050a6:	609a      	str	r2, [r3, #8]
 80050a8:	e020      	b.n	80050ec <HAL_ADC_Start+0x148>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a16      	ldr	r2, [pc, #88]	@ (8005108 <HAL_ADC_Start+0x164>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d11b      	bne.n	80050ec <HAL_ADC_Start+0x148>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d114      	bne.n	80050ec <HAL_ADC_Start+0x148>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	e00b      	b.n	80050ec <HAL_ADC_Start+0x148>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	f043 0210 	orr.w	r2, r3, #16
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e4:	f043 0201 	orr.w	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80050ec:	2300      	movs	r3, #0
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000028 	.word	0x20000028
 8005100:	431bde83 	.word	0x431bde83
 8005104:	40012300 	.word	0x40012300
 8005108:	40012000 	.word	0x40012000

0800510c <HAL_ADC_Stop>:
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_ADC_Stop+0x16>
 800511e:	2302      	movs	r3, #2
 8005120:	e021      	b.n	8005166 <HAL_ADC_Stop+0x5a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	609a      	str	r2, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <HAL_ADC_Stop+0x50>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	f043 0201 	orr.w	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	641a      	str	r2, [r3, #64]	@ 0x40
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005164:	2300      	movs	r3, #0
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_ADC_PollForConversion>:
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518e:	d113      	bne.n	80051b8 <HAL_ADC_PollForConversion+0x46>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519e:	d10b      	bne.n	80051b8 <HAL_ADC_PollForConversion+0x46>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80051b4:	2301      	movs	r3, #1
 80051b6:	e063      	b.n	8005280 <HAL_ADC_PollForConversion+0x10e>
 80051b8:	f7ff fe80 	bl	8004ebc <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	e021      	b.n	8005204 <HAL_ADC_PollForConversion+0x92>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d01d      	beq.n	8005204 <HAL_ADC_PollForConversion+0x92>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d007      	beq.n	80051de <HAL_ADC_PollForConversion+0x6c>
 80051ce:	f7ff fe75 	bl	8004ebc <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d212      	bcs.n	8005204 <HAL_ADC_PollForConversion+0x92>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d00b      	beq.n	8005204 <HAL_ADC_PollForConversion+0x92>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	f043 0204 	orr.w	r2, r3, #4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005200:	2303      	movs	r3, #3
 8005202:	e03d      	b.n	8005280 <HAL_ADC_PollForConversion+0x10e>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b02      	cmp	r3, #2
 8005210:	d1d6      	bne.n	80051c0 <HAL_ADC_PollForConversion+0x4e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0212 	mvn.w	r2, #18
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005220:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	641a      	str	r2, [r3, #64]	@ 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d123      	bne.n	800527e <HAL_ADC_PollForConversion+0x10c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	7e1b      	ldrb	r3, [r3, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d11f      	bne.n	800527e <HAL_ADC_PollForConversion+0x10c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d006      	beq.n	800525a <HAL_ADC_PollForConversion+0xe8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005256:	2b00      	cmp	r3, #0
 8005258:	d111      	bne.n	800527e <HAL_ADC_PollForConversion+0x10c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	641a      	str	r2, [r3, #64]	@ 0x40
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d105      	bne.n	800527e <HAL_ADC_PollForConversion+0x10c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	f043 0201 	orr.w	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	641a      	str	r2, [r3, #64]	@ 0x40
 800527e:	2300      	movs	r3, #0
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_ADC_GetValue>:
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <HAL_ADC_ConfigChannel>:
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x1c>
 80052bc:	2302      	movs	r3, #2
 80052be:	e113      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x244>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b09      	cmp	r3, #9
 80052ce:	d925      	bls.n	800531c <HAL_ADC_ConfigChannel+0x78>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68d9      	ldr	r1, [r3, #12]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	4613      	mov	r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4413      	add	r3, r2
 80052e4:	3b1e      	subs	r3, #30
 80052e6:	2207      	movs	r2, #7
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43da      	mvns	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	400a      	ands	r2, r1
 80052f4:	60da      	str	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68d9      	ldr	r1, [r3, #12]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	4618      	mov	r0, r3
 8005308:	4603      	mov	r3, r0
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4403      	add	r3, r0
 800530e:	3b1e      	subs	r3, #30
 8005310:	409a      	lsls	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	60da      	str	r2, [r3, #12]
 800531a:	e022      	b.n	8005362 <HAL_ADC_ConfigChannel+0xbe>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6919      	ldr	r1, [r3, #16]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	4613      	mov	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	2207      	movs	r2, #7
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43da      	mvns	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	400a      	ands	r2, r1
 800533e:	611a      	str	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6919      	ldr	r1, [r3, #16]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	4618      	mov	r0, r3
 8005352:	4603      	mov	r3, r0
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	4403      	add	r3, r0
 8005358:	409a      	lsls	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	611a      	str	r2, [r3, #16]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b06      	cmp	r3, #6
 8005368:	d824      	bhi.n	80053b4 <HAL_ADC_ConfigChannel+0x110>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	3b05      	subs	r3, #5
 800537c:	221f      	movs	r2, #31
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	43da      	mvns	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	400a      	ands	r2, r1
 800538a:	635a      	str	r2, [r3, #52]	@ 0x34
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	4618      	mov	r0, r3
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	3b05      	subs	r3, #5
 80053a6:	fa00 f203 	lsl.w	r2, r0, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80053b2:	e04c      	b.n	800544e <HAL_ADC_ConfigChannel+0x1aa>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d824      	bhi.n	8005406 <HAL_ADC_ConfigChannel+0x162>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	3b23      	subs	r3, #35	@ 0x23
 80053ce:	221f      	movs	r2, #31
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43da      	mvns	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	400a      	ands	r2, r1
 80053dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	4618      	mov	r0, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	3b23      	subs	r3, #35	@ 0x23
 80053f8:	fa00 f203 	lsl.w	r2, r0, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30
 8005404:	e023      	b.n	800544e <HAL_ADC_ConfigChannel+0x1aa>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	3b41      	subs	r3, #65	@ 0x41
 8005418:	221f      	movs	r2, #31
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	43da      	mvns	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	400a      	ands	r2, r1
 8005426:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	4618      	mov	r0, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	3b41      	subs	r3, #65	@ 0x41
 8005442:	fa00 f203 	lsl.w	r2, r0, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800544e:	4b29      	ldr	r3, [pc, #164]	@ (80054f4 <HAL_ADC_ConfigChannel+0x250>)
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a28      	ldr	r2, [pc, #160]	@ (80054f8 <HAL_ADC_ConfigChannel+0x254>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10f      	bne.n	800547c <HAL_ADC_ConfigChannel+0x1d8>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b12      	cmp	r3, #18
 8005462:	d10b      	bne.n	800547c <HAL_ADC_ConfigChannel+0x1d8>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	605a      	str	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1d      	ldr	r2, [pc, #116]	@ (80054f8 <HAL_ADC_ConfigChannel+0x254>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d12b      	bne.n	80054de <HAL_ADC_ConfigChannel+0x23a>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1c      	ldr	r2, [pc, #112]	@ (80054fc <HAL_ADC_ConfigChannel+0x258>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d003      	beq.n	8005498 <HAL_ADC_ConfigChannel+0x1f4>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b11      	cmp	r3, #17
 8005496:	d122      	bne.n	80054de <HAL_ADC_ConfigChannel+0x23a>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	605a      	str	r2, [r3, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a11      	ldr	r2, [pc, #68]	@ (80054fc <HAL_ADC_ConfigChannel+0x258>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d111      	bne.n	80054de <HAL_ADC_ConfigChannel+0x23a>
 80054ba:	4b11      	ldr	r3, [pc, #68]	@ (8005500 <HAL_ADC_ConfigChannel+0x25c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a11      	ldr	r2, [pc, #68]	@ (8005504 <HAL_ADC_ConfigChannel+0x260>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	0c9a      	lsrs	r2, r3, #18
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	60bb      	str	r3, [r7, #8]
 80054d0:	e002      	b.n	80054d8 <HAL_ADC_ConfigChannel+0x234>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	60bb      	str	r3, [r7, #8]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f9      	bne.n	80054d2 <HAL_ADC_ConfigChannel+0x22e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80054e6:	2300      	movs	r3, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	40012300 	.word	0x40012300
 80054f8:	40012000 	.word	0x40012000
 80054fc:	10000012 	.word	0x10000012
 8005500:	20000028 	.word	0x20000028
 8005504:	431bde83 	.word	0x431bde83

08005508 <ADC_Init>:
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	4b79      	ldr	r3, [pc, #484]	@ (80056f8 <ADC_Init+0x1f0>)
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	431a      	orrs	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	021a      	lsls	r2, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6859      	ldr	r1, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6899      	ldr	r1, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	609a      	str	r2, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	4a58      	ldr	r2, [pc, #352]	@ (80056fc <ADC_Init+0x1f4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <ADC_Init+0xde>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6899      	ldr	r1, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	609a      	str	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80055d0:	609a      	str	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6899      	ldr	r1, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	609a      	str	r2, [r3, #8]
 80055e4:	e00f      	b.n	8005606 <ADC_Init+0xfe>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80055f4:	609a      	str	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005604:	609a      	str	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0202 	bic.w	r2, r2, #2
 8005614:	609a      	str	r2, [r3, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6899      	ldr	r1, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	7e1b      	ldrb	r3, [r3, #24]
 8005620:	005a      	lsls	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	609a      	str	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01b      	beq.n	800566c <ADC_Init+0x164>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005642:	605a      	str	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005652:	605a      	str	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6859      	ldr	r1, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	3b01      	subs	r3, #1
 8005660:	035a      	lsls	r2, r3, #13
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	e007      	b.n	800567c <ADC_Init+0x174>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800568a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	3b01      	subs	r3, #1
 8005698:	051a      	lsls	r2, r3, #20
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80056b0:	609a      	str	r2, [r3, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6899      	ldr	r1, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056be:	025a      	lsls	r2, r3, #9
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	609a      	str	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056d6:	609a      	str	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6899      	ldr	r1, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	029a      	lsls	r2, r3, #10
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40012300 	.word	0x40012300
 80056fc:	0f000001 	.word	0x0f000001

08005700 <__NVIC_SetPriorityGrouping>:
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	4b0c      	ldr	r3, [pc, #48]	@ (8005744 <__NVIC_SetPriorityGrouping+0x44>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800571c:	4013      	ands	r3, r2
 800571e:	60bb      	str	r3, [r7, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
 8005728:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800572c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	4a04      	ldr	r2, [pc, #16]	@ (8005744 <__NVIC_SetPriorityGrouping+0x44>)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	60d3      	str	r3, [r2, #12]
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	e000ed00 	.word	0xe000ed00

08005748 <__NVIC_GetPriorityGrouping>:
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
 800574c:	4b04      	ldr	r3, [pc, #16]	@ (8005760 <__NVIC_GetPriorityGrouping+0x18>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	0a1b      	lsrs	r3, r3, #8
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	4618      	mov	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	e000ed00 	.word	0xe000ed00

08005764 <__NVIC_EnableIRQ>:
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
 800576e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005772:	2b00      	cmp	r3, #0
 8005774:	db0b      	blt.n	800578e <__NVIC_EnableIRQ+0x2a>
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	f003 021f 	and.w	r2, r3, #31
 800577c:	4907      	ldr	r1, [pc, #28]	@ (800579c <__NVIC_EnableIRQ+0x38>)
 800577e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	2001      	movs	r0, #1
 8005786:	fa00 f202 	lsl.w	r2, r0, r2
 800578a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	e000e100 	.word	0xe000e100

080057a0 <__NVIC_SetPriority>:
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	6039      	str	r1, [r7, #0]
 80057aa:	71fb      	strb	r3, [r7, #7]
 80057ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	db0a      	blt.n	80057ca <__NVIC_SetPriority+0x2a>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	490c      	ldr	r1, [pc, #48]	@ (80057ec <__NVIC_SetPriority+0x4c>)
 80057ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057be:	0112      	lsls	r2, r2, #4
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	440b      	add	r3, r1
 80057c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80057c8:	e00a      	b.n	80057e0 <__NVIC_SetPriority+0x40>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	4908      	ldr	r1, [pc, #32]	@ (80057f0 <__NVIC_SetPriority+0x50>)
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	3b04      	subs	r3, #4
 80057d8:	0112      	lsls	r2, r2, #4
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	440b      	add	r3, r1
 80057de:	761a      	strb	r2, [r3, #24]
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	e000e100 	.word	0xe000e100
 80057f0:	e000ed00 	.word	0xe000ed00

080057f4 <NVIC_EncodePriority>:
 80057f4:	b480      	push	{r7}
 80057f6:	b089      	sub	sp, #36	@ 0x24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f1c3 0307 	rsb	r3, r3, #7
 800580e:	2b04      	cmp	r3, #4
 8005810:	bf28      	it	cs
 8005812:	2304      	movcs	r3, #4
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	3304      	adds	r3, #4
 800581a:	2b06      	cmp	r3, #6
 800581c:	d902      	bls.n	8005824 <NVIC_EncodePriority+0x30>
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3b03      	subs	r3, #3
 8005822:	e000      	b.n	8005826 <NVIC_EncodePriority+0x32>
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	f04f 32ff 	mov.w	r2, #4294967295
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43da      	mvns	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	401a      	ands	r2, r3
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	409a      	lsls	r2, r3
 800583c:	f04f 31ff 	mov.w	r1, #4294967295
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	43d9      	mvns	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	400b      	ands	r3, r1
 800584c:	4313      	orrs	r3, r2
 800584e:	4618      	mov	r0, r3
 8005850:	3724      	adds	r7, #36	@ 0x24
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <SysTick_Config>:
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3b01      	subs	r3, #1
 8005868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800586c:	d301      	bcc.n	8005872 <SysTick_Config+0x16>
 800586e:	2301      	movs	r3, #1
 8005870:	e00f      	b.n	8005892 <SysTick_Config+0x36>
 8005872:	4a0a      	ldr	r2, [pc, #40]	@ (800589c <SysTick_Config+0x40>)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3b01      	subs	r3, #1
 8005878:	6053      	str	r3, [r2, #4]
 800587a:	210f      	movs	r1, #15
 800587c:	f04f 30ff 	mov.w	r0, #4294967295
 8005880:	f7ff ff8e 	bl	80057a0 <__NVIC_SetPriority>
 8005884:	4b05      	ldr	r3, [pc, #20]	@ (800589c <SysTick_Config+0x40>)
 8005886:	2200      	movs	r2, #0
 8005888:	609a      	str	r2, [r3, #8]
 800588a:	4b04      	ldr	r3, [pc, #16]	@ (800589c <SysTick_Config+0x40>)
 800588c:	2207      	movs	r2, #7
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	2300      	movs	r3, #0
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	e000e010 	.word	0xe000e010

080058a0 <HAL_NVIC_SetPriorityGrouping>:
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff ff29 	bl	8005700 <__NVIC_SetPriorityGrouping>
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_NVIC_SetPriority>:
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b086      	sub	sp, #24
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	4603      	mov	r3, r0
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
 80058c2:	73fb      	strb	r3, [r7, #15]
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	f7ff ff3e 	bl	8005748 <__NVIC_GetPriorityGrouping>
 80058cc:	6178      	str	r0, [r7, #20]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	6978      	ldr	r0, [r7, #20]
 80058d4:	f7ff ff8e 	bl	80057f4 <NVIC_EncodePriority>
 80058d8:	4602      	mov	r2, r0
 80058da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058de:	4611      	mov	r1, r2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff ff5d 	bl	80057a0 <__NVIC_SetPriority>
 80058e6:	bf00      	nop
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_NVIC_EnableIRQ>:
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	4603      	mov	r3, r0
 80058f6:	71fb      	strb	r3, [r7, #7]
 80058f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff ff31 	bl	8005764 <__NVIC_EnableIRQ>
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_SYSTICK_Config>:
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff ffa2 	bl	800585c <SysTick_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_DMA_Abort>:
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	f7ff fac4 	bl	8004ebc <HAL_GetTick>
 8005934:	60b8      	str	r0, [r7, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d008      	beq.n	8005954 <HAL_DMA_Abort+0x32>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2280      	movs	r2, #128	@ 0x80
 8005946:	655a      	str	r2, [r3, #84]	@ 0x54
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8005950:	2301      	movs	r3, #1
 8005952:	e052      	b.n	80059fa <HAL_DMA_Abort+0xd8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0216 	bic.w	r2, r2, #22
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695a      	ldr	r2, [r3, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005972:	615a      	str	r2, [r3, #20]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d103      	bne.n	8005984 <HAL_DMA_Abort+0x62>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005980:	2b00      	cmp	r3, #0
 8005982:	d007      	beq.n	8005994 <HAL_DMA_Abort+0x72>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0208 	bic.w	r2, r2, #8
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0201 	bic.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e013      	b.n	80059ce <HAL_DMA_Abort+0xac>
 80059a6:	f7ff fa89 	bl	8004ebc <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b05      	cmp	r3, #5
 80059b2:	d90c      	bls.n	80059ce <HAL_DMA_Abort+0xac>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2203      	movs	r2, #3
 80059be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80059ca:	2303      	movs	r3, #3
 80059cc:	e015      	b.n	80059fa <HAL_DMA_Abort+0xd8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e4      	bne.n	80059a6 <HAL_DMA_Abort+0x84>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e0:	223f      	movs	r2, #63	@ 0x3f
 80059e2:	409a      	lsls	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80059f8:	2300      	movs	r3, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_DMA_Abort_IT>:
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d004      	beq.n	8005a20 <HAL_DMA_Abort_IT+0x1e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2280      	movs	r2, #128	@ 0x80
 8005a1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e00c      	b.n	8005a3a <HAL_DMA_Abort_IT+0x38>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2205      	movs	r2, #5
 8005a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0201 	bic.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <HAL_GPIO_Init>:
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	@ 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	2300      	movs	r3, #0
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	e159      	b.n	8005d18 <HAL_GPIO_Init+0x2d0>
 8005a64:	2201      	movs	r2, #1
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4013      	ands	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	f040 8148 	bne.w	8005d12 <HAL_GPIO_Init+0x2ca>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d005      	beq.n	8005a9a <HAL_GPIO_Init+0x52>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d130      	bne.n	8005afc <HAL_GPIO_Init+0xb4>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	61bb      	str	r3, [r7, #24]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	2203      	movs	r2, #3
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	43db      	mvns	r3, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	609a      	str	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4013      	ands	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	091b      	lsrs	r3, r3, #4
 8005ae6:	f003 0201 	and.w	r2, r3, #1
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d017      	beq.n	8005b38 <HAL_GPIO_Init+0xf0>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	2203      	movs	r2, #3
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	60da      	str	r2, [r3, #12]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d123      	bne.n	8005b8c <HAL_GPIO_Init+0x144>
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	08da      	lsrs	r2, r3, #3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3208      	adds	r2, #8
 8005b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	220f      	movs	r2, #15
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	43db      	mvns	r3, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	08da      	lsrs	r2, r3, #3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3208      	adds	r2, #8
 8005b86:	69b9      	ldr	r1, [r7, #24]
 8005b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	2203      	movs	r2, #3
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f003 0203 	and.w	r2, r3, #3
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80a2 	beq.w	8005d12 <HAL_GPIO_Init+0x2ca>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	4b57      	ldr	r3, [pc, #348]	@ (8005d30 <HAL_GPIO_Init+0x2e8>)
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd6:	4a56      	ldr	r2, [pc, #344]	@ (8005d30 <HAL_GPIO_Init+0x2e8>)
 8005bd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bde:	4b54      	ldr	r3, [pc, #336]	@ (8005d30 <HAL_GPIO_Init+0x2e8>)
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4a52      	ldr	r2, [pc, #328]	@ (8005d34 <HAL_GPIO_Init+0x2ec>)
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	089b      	lsrs	r3, r3, #2
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	220f      	movs	r2, #15
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	43db      	mvns	r3, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a49      	ldr	r2, [pc, #292]	@ (8005d38 <HAL_GPIO_Init+0x2f0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d019      	beq.n	8005c4a <HAL_GPIO_Init+0x202>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a48      	ldr	r2, [pc, #288]	@ (8005d3c <HAL_GPIO_Init+0x2f4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <HAL_GPIO_Init+0x1fe>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a47      	ldr	r2, [pc, #284]	@ (8005d40 <HAL_GPIO_Init+0x2f8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00d      	beq.n	8005c42 <HAL_GPIO_Init+0x1fa>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a46      	ldr	r2, [pc, #280]	@ (8005d44 <HAL_GPIO_Init+0x2fc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d007      	beq.n	8005c3e <HAL_GPIO_Init+0x1f6>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a45      	ldr	r2, [pc, #276]	@ (8005d48 <HAL_GPIO_Init+0x300>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <HAL_GPIO_Init+0x1f2>
 8005c36:	2304      	movs	r3, #4
 8005c38:	e008      	b.n	8005c4c <HAL_GPIO_Init+0x204>
 8005c3a:	2307      	movs	r3, #7
 8005c3c:	e006      	b.n	8005c4c <HAL_GPIO_Init+0x204>
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e004      	b.n	8005c4c <HAL_GPIO_Init+0x204>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e002      	b.n	8005c4c <HAL_GPIO_Init+0x204>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <HAL_GPIO_Init+0x204>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	f002 0203 	and.w	r2, r2, #3
 8005c52:	0092      	lsls	r2, r2, #2
 8005c54:	4093      	lsls	r3, r2
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	4935      	ldr	r1, [pc, #212]	@ (8005d34 <HAL_GPIO_Init+0x2ec>)
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	089b      	lsrs	r3, r3, #2
 8005c62:	3302      	adds	r3, #2
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005c6a:	4b38      	ldr	r3, [pc, #224]	@ (8005d4c <HAL_GPIO_Init+0x304>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_Init+0x246>
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	4a2f      	ldr	r2, [pc, #188]	@ (8005d4c <HAL_GPIO_Init+0x304>)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	6093      	str	r3, [r2, #8]
 8005c94:	4b2d      	ldr	r3, [pc, #180]	@ (8005d4c <HAL_GPIO_Init+0x304>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_GPIO_Init+0x270>
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	4a24      	ldr	r2, [pc, #144]	@ (8005d4c <HAL_GPIO_Init+0x304>)
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	60d3      	str	r3, [r2, #12]
 8005cbe:	4b23      	ldr	r3, [pc, #140]	@ (8005d4c <HAL_GPIO_Init+0x304>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_GPIO_Init+0x29a>
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d4c <HAL_GPIO_Init+0x304>)
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	6053      	str	r3, [r2, #4]
 8005ce8:	4b18      	ldr	r3, [pc, #96]	@ (8005d4c <HAL_GPIO_Init+0x304>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_GPIO_Init+0x2c4>
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
 8005d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8005d4c <HAL_GPIO_Init+0x304>)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	3301      	adds	r3, #1
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b0f      	cmp	r3, #15
 8005d1c:	f67f aea2 	bls.w	8005a64 <HAL_GPIO_Init+0x1c>
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	3724      	adds	r7, #36	@ 0x24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40023800 	.word	0x40023800
 8005d34:	40013800 	.word	0x40013800
 8005d38:	40020000 	.word	0x40020000
 8005d3c:	40020400 	.word	0x40020400
 8005d40:	40020800 	.word	0x40020800
 8005d44:	40020c00 	.word	0x40020c00
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	40013c00 	.word	0x40013c00

08005d50 <HAL_GPIO_WritePin>:
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	807b      	strh	r3, [r7, #2]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	707b      	strb	r3, [r7, #1]
 8005d60:	787b      	ldrb	r3, [r7, #1]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_GPIO_WritePin+0x1e>
 8005d66:	887a      	ldrh	r2, [r7, #2]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	619a      	str	r2, [r3, #24]
 8005d6c:	e003      	b.n	8005d76 <HAL_GPIO_WritePin+0x26>
 8005d6e:	887b      	ldrh	r3, [r7, #2]
 8005d70:	041a      	lsls	r2, r3, #16
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	619a      	str	r2, [r3, #24]
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_GPIO_TogglePin>:
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	807b      	strh	r3, [r7, #2]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	887a      	ldrh	r2, [r7, #2]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	041a      	lsls	r2, r3, #16
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	43d9      	mvns	r1, r3
 8005da0:	887b      	ldrh	r3, [r7, #2]
 8005da2:	400b      	ands	r3, r1
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	619a      	str	r2, [r3, #24]
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <HAL_GPIO_EXTI_IRQHandler>:
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	80fb      	strh	r3, [r7, #6]
 8005dc2:	4b08      	ldr	r3, [pc, #32]	@ (8005de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dc4:	695a      	ldr	r2, [r3, #20]
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d006      	beq.n	8005ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
 8005dce:	4a05      	ldr	r2, [pc, #20]	@ (8005de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dd0:	88fb      	ldrh	r3, [r7, #6]
 8005dd2:	6153      	str	r3, [r2, #20]
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc faea 	bl	80023b0 <HAL_GPIO_EXTI_Callback>
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40013c00 	.word	0x40013c00

08005de8 <HAL_RCC_OscConfig>:
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_RCC_OscConfig+0x12>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e267      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d075      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
 8005e06:	4b88      	ldr	r3, [pc, #544]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d00c      	beq.n	8005e2c <HAL_RCC_OscConfig+0x44>
 8005e12:	4b85      	ldr	r3, [pc, #532]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d112      	bne.n	8005e44 <HAL_RCC_OscConfig+0x5c>
 8005e1e:	4b82      	ldr	r3, [pc, #520]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e2a:	d10b      	bne.n	8005e44 <HAL_RCC_OscConfig+0x5c>
 8005e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05b      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x108>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d157      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x108>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e242      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e4c:	d106      	bne.n	8005e5c <HAL_RCC_OscConfig+0x74>
 8005e4e:	4b76      	ldr	r3, [pc, #472]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a75      	ldr	r2, [pc, #468]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e01d      	b.n	8005e98 <HAL_RCC_OscConfig+0xb0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x98>
 8005e66:	4b70      	ldr	r3, [pc, #448]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a6f      	ldr	r2, [pc, #444]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	4b6d      	ldr	r3, [pc, #436]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6c      	ldr	r2, [pc, #432]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0xb0>
 8005e80:	4b69      	ldr	r3, [pc, #420]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a68      	ldr	r2, [pc, #416]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4b66      	ldr	r3, [pc, #408]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a65      	ldr	r2, [pc, #404]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCC_OscConfig+0xe0>
 8005ea0:	f7ff f80c 	bl	8004ebc <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0xd2>
 8005ea8:	f7ff f808 	bl	8004ebc <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	@ 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0xd2>
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e207      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8005eba:	4b5b      	ldr	r3, [pc, #364]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0xc0>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
 8005ec8:	f7fe fff8 	bl	8004ebc <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
 8005ed0:	f7fe fff4 	bl	8004ebc <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	@ 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1f3      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8005ee2:	4b51      	ldr	r3, [pc, #324]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0xe8>
 8005eee:	e000      	b.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
 8005ef0:	bf00      	nop
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d063      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
 8005efe:	4b4a      	ldr	r3, [pc, #296]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_RCC_OscConfig+0x13a>
 8005f0a:	4b47      	ldr	r3, [pc, #284]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d11c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x168>
 8005f16:	4b44      	ldr	r3, [pc, #272]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <HAL_RCC_OscConfig+0x168>
 8005f22:	4b41      	ldr	r3, [pc, #260]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_RCC_OscConfig+0x152>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_RCC_OscConfig+0x152>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e1c7      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8005f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4937      	ldr	r1, [pc, #220]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]
 8005f4e:	e03a      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_OscConfig+0x1b2>
 8005f58:	4b34      	ldr	r3, [pc, #208]	@ (800602c <HAL_RCC_OscConfig+0x244>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	f7fe ffad 	bl	8004ebc <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x190>
 8005f66:	f7fe ffa9 	bl	8004ebc <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x190>
 8005f74:	2303      	movs	r3, #3
 8005f76:	e1a8      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8005f78:	4b2b      	ldr	r3, [pc, #172]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x17e>
 8005f84:	4b28      	ldr	r3, [pc, #160]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4925      	ldr	r1, [pc, #148]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]
 8005f98:	e015      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
 8005f9a:	4b24      	ldr	r3, [pc, #144]	@ (800602c <HAL_RCC_OscConfig+0x244>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	f7fe ff8c 	bl	8004ebc <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x1d2>
 8005fa8:	f7fe ff88 	bl	8004ebc <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x1d2>
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e187      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8005fba:	4b1b      	ldr	r3, [pc, #108]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x1c0>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d036      	beq.n	8006040 <HAL_RCC_OscConfig+0x258>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d016      	beq.n	8006008 <HAL_RCC_OscConfig+0x220>
 8005fda:	4b15      	ldr	r3, [pc, #84]	@ (8006030 <HAL_RCC_OscConfig+0x248>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	f7fe ff6c 	bl	8004ebc <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x212>
 8005fe8:	f7fe ff68 	bl	8004ebc <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x212>
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e167      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x200>
 8006006:	e01b      	b.n	8006040 <HAL_RCC_OscConfig+0x258>
 8006008:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <HAL_RCC_OscConfig+0x248>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	f7fe ff55 	bl	8004ebc <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]
 8006014:	e00e      	b.n	8006034 <HAL_RCC_OscConfig+0x24c>
 8006016:	f7fe ff51 	bl	8004ebc <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d907      	bls.n	8006034 <HAL_RCC_OscConfig+0x24c>
 8006024:	2303      	movs	r3, #3
 8006026:	e150      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8006028:	40023800 	.word	0x40023800
 800602c:	42470000 	.word	0x42470000
 8006030:	42470e80 	.word	0x42470e80
 8006034:	4b88      	ldr	r3, [pc, #544]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1ea      	bne.n	8006016 <HAL_RCC_OscConfig+0x22e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8097 	beq.w	800617c <HAL_RCC_OscConfig+0x394>
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]
 8006052:	4b81      	ldr	r3, [pc, #516]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <HAL_RCC_OscConfig+0x296>
 800605e:	2300      	movs	r3, #0
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	4b7d      	ldr	r3, [pc, #500]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006066:	4a7c      	ldr	r2, [pc, #496]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800606c:	6413      	str	r3, [r2, #64]	@ 0x40
 800606e:	4b7a      	ldr	r3, [pc, #488]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2301      	movs	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
 800607e:	4b77      	ldr	r3, [pc, #476]	@ (800625c <HAL_RCC_OscConfig+0x474>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d118      	bne.n	80060bc <HAL_RCC_OscConfig+0x2d4>
 800608a:	4b74      	ldr	r3, [pc, #464]	@ (800625c <HAL_RCC_OscConfig+0x474>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a73      	ldr	r2, [pc, #460]	@ (800625c <HAL_RCC_OscConfig+0x474>)
 8006090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	f7fe ff11 	bl	8004ebc <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x2c8>
 800609e:	f7fe ff0d 	bl	8004ebc <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x2c8>
 80060ac:	2303      	movs	r3, #3
 80060ae:	e10c      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 80060b0:	4b6a      	ldr	r3, [pc, #424]	@ (800625c <HAL_RCC_OscConfig+0x474>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0f0      	beq.n	800609e <HAL_RCC_OscConfig+0x2b6>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d106      	bne.n	80060d2 <HAL_RCC_OscConfig+0x2ea>
 80060c4:	4b64      	ldr	r3, [pc, #400]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c8:	4a63      	ldr	r2, [pc, #396]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060ca:	f043 0301 	orr.w	r3, r3, #1
 80060ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d0:	e01c      	b.n	800610c <HAL_RCC_OscConfig+0x324>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d10c      	bne.n	80060f4 <HAL_RCC_OscConfig+0x30c>
 80060da:	4b5f      	ldr	r3, [pc, #380]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060de:	4a5e      	ldr	r2, [pc, #376]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060e0:	f043 0304 	orr.w	r3, r3, #4
 80060e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ea:	4a5b      	ldr	r2, [pc, #364]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f2:	e00b      	b.n	800610c <HAL_RCC_OscConfig+0x324>
 80060f4:	4b58      	ldr	r3, [pc, #352]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f8:	4a57      	ldr	r2, [pc, #348]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060fa:	f023 0301 	bic.w	r3, r3, #1
 80060fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006100:	4b55      	ldr	r3, [pc, #340]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006104:	4a54      	ldr	r2, [pc, #336]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006106:	f023 0304 	bic.w	r3, r3, #4
 800610a:	6713      	str	r3, [r2, #112]	@ 0x70
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d015      	beq.n	8006140 <HAL_RCC_OscConfig+0x358>
 8006114:	f7fe fed2 	bl	8004ebc <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]
 800611a:	e00a      	b.n	8006132 <HAL_RCC_OscConfig+0x34a>
 800611c:	f7fe fece 	bl	8004ebc <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x34a>
 800612e:	2303      	movs	r3, #3
 8006130:	e0cb      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8006132:	4b49      	ldr	r3, [pc, #292]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0ee      	beq.n	800611c <HAL_RCC_OscConfig+0x334>
 800613e:	e014      	b.n	800616a <HAL_RCC_OscConfig+0x382>
 8006140:	f7fe febc 	bl	8004ebc <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]
 8006146:	e00a      	b.n	800615e <HAL_RCC_OscConfig+0x376>
 8006148:	f7fe feb8 	bl	8004ebc <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x376>
 800615a:	2303      	movs	r3, #3
 800615c:	e0b5      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 800615e:	4b3e      	ldr	r3, [pc, #248]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1ee      	bne.n	8006148 <HAL_RCC_OscConfig+0x360>
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d105      	bne.n	800617c <HAL_RCC_OscConfig+0x394>
 8006170:	4b39      	ldr	r3, [pc, #228]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	4a38      	ldr	r2, [pc, #224]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800617a:	6413      	str	r3, [r2, #64]	@ 0x40
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 80a1 	beq.w	80062c8 <HAL_RCC_OscConfig+0x4e0>
 8006186:	4b34      	ldr	r3, [pc, #208]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 030c 	and.w	r3, r3, #12
 800618e:	2b08      	cmp	r3, #8
 8006190:	d05c      	beq.n	800624c <HAL_RCC_OscConfig+0x464>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d141      	bne.n	800621e <HAL_RCC_OscConfig+0x436>
 800619a:	4b31      	ldr	r3, [pc, #196]	@ (8006260 <HAL_RCC_OscConfig+0x478>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	f7fe fe8c 	bl	8004ebc <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x3d2>
 80061a8:	f7fe fe88 	bl	8004ebc <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x3d2>
 80061b6:	2303      	movs	r3, #3
 80061b8:	e087      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 80061ba:	4b27      	ldr	r3, [pc, #156]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x3c0>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69da      	ldr	r2, [r3, #28]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	3b01      	subs	r3, #1
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e8:	061b      	lsls	r3, r3, #24
 80061ea:	491b      	ldr	r1, [pc, #108]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	604b      	str	r3, [r1, #4]
 80061f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006260 <HAL_RCC_OscConfig+0x478>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	f7fe fe61 	bl	8004ebc <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x428>
 80061fe:	f7fe fe5d 	bl	8004ebc <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x428>
 800620c:	2303      	movs	r3, #3
 800620e:	e05c      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8006210:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x416>
 800621c:	e054      	b.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
 800621e:	4b10      	ldr	r3, [pc, #64]	@ (8006260 <HAL_RCC_OscConfig+0x478>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f7fe fe4a 	bl	8004ebc <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x456>
 800622c:	f7fe fe46 	bl	8004ebc <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x456>
 800623a:	2303      	movs	r3, #3
 800623c:	e045      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 800623e:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0x444>
 800624a:	e03d      	b.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d107      	bne.n	8006264 <HAL_RCC_OscConfig+0x47c>
 8006254:	2301      	movs	r3, #1
 8006256:	e038      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8006258:	40023800 	.word	0x40023800
 800625c:	40007000 	.word	0x40007000
 8006260:	42470060 	.word	0x42470060
 8006264:	4b1b      	ldr	r3, [pc, #108]	@ (80062d4 <HAL_RCC_OscConfig+0x4ec>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d028      	beq.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	429a      	cmp	r2, r3
 800627e:	d121      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	429a      	cmp	r2, r3
 800628c:	d11a      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006294:	4013      	ands	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800629a:	0192      	lsls	r2, r2, #6
 800629c:	4293      	cmp	r3, r2
 800629e:	d111      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	3b01      	subs	r3, #1
 80062ae:	041b      	lsls	r3, r3, #16
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	061b      	lsls	r3, r3, #24
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 80062c8:	2300      	movs	r3, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40023800 	.word	0x40023800

080062d8 <HAL_RCC_ClockConfig>:
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_ClockConfig+0x14>
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0cc      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
 80062ec:	4b68      	ldr	r3, [pc, #416]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d90c      	bls.n	8006314 <HAL_RCC_ClockConfig+0x3c>
 80062fa:	4b65      	ldr	r3, [pc, #404]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	4b63      	ldr	r3, [pc, #396]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d001      	beq.n	8006314 <HAL_RCC_ClockConfig+0x3c>
 8006310:	2301      	movs	r3, #1
 8006312:	e0b8      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d020      	beq.n	8006362 <HAL_RCC_ClockConfig+0x8a>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x60>
 800632c:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4a58      	ldr	r2, [pc, #352]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006336:	6093      	str	r3, [r2, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_RCC_ClockConfig+0x78>
 8006344:	4b53      	ldr	r3, [pc, #332]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4a52      	ldr	r2, [pc, #328]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800634e:	6093      	str	r3, [r2, #8]
 8006350:	4b50      	ldr	r3, [pc, #320]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	494d      	ldr	r1, [pc, #308]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	608b      	str	r3, [r1, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d044      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x120>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0xae>
 8006376:	4b47      	ldr	r3, [pc, #284]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d119      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
 8006382:	2301      	movs	r3, #1
 8006384:	e07f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d003      	beq.n	8006396 <HAL_RCC_ClockConfig+0xbe>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b03      	cmp	r3, #3
 8006394:	d107      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xce>
 8006396:	4b3f      	ldr	r3, [pc, #252]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e06f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
 80063a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e067      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
 80063b6:	4b37      	ldr	r3, [pc, #220]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f023 0203 	bic.w	r2, r3, #3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	4934      	ldr	r1, [pc, #208]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	608b      	str	r3, [r1, #8]
 80063c8:	f7fe fd78 	bl	8004ebc <HAL_GetTick>
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	e00a      	b.n	80063e6 <HAL_RCC_ClockConfig+0x10e>
 80063d0:	f7fe fd74 	bl	8004ebc <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_ClockConfig+0x10e>
 80063e2:	2303      	movs	r3, #3
 80063e4:	e04f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
 80063e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 020c 	and.w	r2, r3, #12
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d1eb      	bne.n	80063d0 <HAL_RCC_ClockConfig+0xf8>
 80063f8:	4b25      	ldr	r3, [pc, #148]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d20c      	bcs.n	8006420 <HAL_RCC_ClockConfig+0x148>
 8006406:	4b22      	ldr	r3, [pc, #136]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	4b20      	ldr	r3, [pc, #128]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_ClockConfig+0x148>
 800641c:	2301      	movs	r3, #1
 800641e:	e032      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <HAL_RCC_ClockConfig+0x166>
 800642c:	4b19      	ldr	r3, [pc, #100]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4916      	ldr	r1, [pc, #88]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <HAL_RCC_ClockConfig+0x186>
 800644a:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	490e      	ldr	r1, [pc, #56]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]
 800645e:	f000 f821 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8006462:	4602      	mov	r2, r0
 8006464:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	490a      	ldr	r1, [pc, #40]	@ (8006498 <HAL_RCC_ClockConfig+0x1c0>)
 8006470:	5ccb      	ldrb	r3, [r1, r3]
 8006472:	fa22 f303 	lsr.w	r3, r2, r3
 8006476:	4a09      	ldr	r2, [pc, #36]	@ (800649c <HAL_RCC_ClockConfig+0x1c4>)
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <HAL_RCC_ClockConfig+0x1c8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fcd8 	bl	8004e34 <HAL_InitTick>
 8006484:	2300      	movs	r3, #0
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40023c00 	.word	0x40023c00
 8006494:	40023800 	.word	0x40023800
 8006498:	0800dfa8 	.word	0x0800dfa8
 800649c:	20000028 	.word	0x20000028
 80064a0:	2000002c 	.word	0x2000002c

080064a4 <HAL_RCC_GetSysClockFreq>:
 80064a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a8:	b090      	sub	sp, #64	@ 0x40
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	2300      	movs	r3, #0
 80064ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80064b0:	2300      	movs	r3, #0
 80064b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064b4:	2300      	movs	r3, #0
 80064b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80064b8:	2300      	movs	r3, #0
 80064ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064bc:	4b59      	ldr	r3, [pc, #356]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 030c 	and.w	r3, r3, #12
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d00d      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x40>
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	f200 80a1 	bhi.w	8006610 <HAL_RCC_GetSysClockFreq+0x16c>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x34>
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d003      	beq.n	80064de <HAL_RCC_GetSysClockFreq+0x3a>
 80064d6:	e09b      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x16c>
 80064d8:	4b53      	ldr	r3, [pc, #332]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x184>)
 80064da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064dc:	e09b      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x172>
 80064de:	4b53      	ldr	r3, [pc, #332]	@ (800662c <HAL_RCC_GetSysClockFreq+0x188>)
 80064e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064e2:	e098      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x172>
 80064e4:	4b4f      	ldr	r3, [pc, #316]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d028      	beq.n	800654c <HAL_RCC_GetSysClockFreq+0xa8>
 80064fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	2200      	movs	r2, #0
 8006502:	623b      	str	r3, [r7, #32]
 8006504:	627a      	str	r2, [r7, #36]	@ 0x24
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800650c:	2100      	movs	r1, #0
 800650e:	4b47      	ldr	r3, [pc, #284]	@ (800662c <HAL_RCC_GetSysClockFreq+0x188>)
 8006510:	fb03 f201 	mul.w	r2, r3, r1
 8006514:	2300      	movs	r3, #0
 8006516:	fb00 f303 	mul.w	r3, r0, r3
 800651a:	4413      	add	r3, r2
 800651c:	4a43      	ldr	r2, [pc, #268]	@ (800662c <HAL_RCC_GetSysClockFreq+0x188>)
 800651e:	fba0 1202 	umull	r1, r2, r0, r2
 8006522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006524:	460a      	mov	r2, r1
 8006526:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800652a:	4413      	add	r3, r2
 800652c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800652e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006530:	2200      	movs	r2, #0
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	61fa      	str	r2, [r7, #28]
 8006536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800653a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800653e:	f7fa fb3b 	bl	8000bb8 <__aeabi_uldivmod>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4613      	mov	r3, r2
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654a:	e053      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x150>
 800654c:	4b35      	ldr	r3, [pc, #212]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	099b      	lsrs	r3, r3, #6
 8006552:	2200      	movs	r2, #0
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	617a      	str	r2, [r7, #20]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800655e:	f04f 0b00 	mov.w	fp, #0
 8006562:	4652      	mov	r2, sl
 8006564:	465b      	mov	r3, fp
 8006566:	f04f 0000 	mov.w	r0, #0
 800656a:	f04f 0100 	mov.w	r1, #0
 800656e:	0159      	lsls	r1, r3, #5
 8006570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006574:	0150      	lsls	r0, r2, #5
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	ebb2 080a 	subs.w	r8, r2, sl
 800657e:	eb63 090b 	sbc.w	r9, r3, fp
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800658e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006592:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006596:	ebb2 0408 	subs.w	r4, r2, r8
 800659a:	eb63 0509 	sbc.w	r5, r3, r9
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	00eb      	lsls	r3, r5, #3
 80065a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ac:	00e2      	lsls	r2, r4, #3
 80065ae:	4614      	mov	r4, r2
 80065b0:	461d      	mov	r5, r3
 80065b2:	eb14 030a 	adds.w	r3, r4, sl
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	eb45 030b 	adc.w	r3, r5, fp
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065ca:	4629      	mov	r1, r5
 80065cc:	028b      	lsls	r3, r1, #10
 80065ce:	4621      	mov	r1, r4
 80065d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d4:	4621      	mov	r1, r4
 80065d6:	028a      	lsls	r2, r1, #10
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065de:	2200      	movs	r2, #0
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	60fa      	str	r2, [r7, #12]
 80065e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065e8:	f7fa fae6 	bl	8000bb8 <__aeabi_uldivmod>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4613      	mov	r3, r2
 80065f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x180>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	0c1b      	lsrs	r3, r3, #16
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	3301      	adds	r3, #1
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	633b      	str	r3, [r7, #48]	@ 0x30
 8006604:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800660e:	e002      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x172>
 8006610:	4b05      	ldr	r3, [pc, #20]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x184>)
 8006612:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006614:	bf00      	nop
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	4618      	mov	r0, r3
 800661a:	3740      	adds	r7, #64	@ 0x40
 800661c:	46bd      	mov	sp, r7
 800661e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006622:	bf00      	nop
 8006624:	40023800 	.word	0x40023800
 8006628:	00f42400 	.word	0x00f42400
 800662c:	017d7840 	.word	0x017d7840

08006630 <HAL_RCC_GetHCLKFreq>:
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
 8006634:	4b03      	ldr	r3, [pc, #12]	@ (8006644 <HAL_RCC_GetHCLKFreq+0x14>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000028 	.word	0x20000028

08006648 <HAL_RCC_GetPCLK1Freq>:
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
 800664c:	f7ff fff0 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b05      	ldr	r3, [pc, #20]	@ (8006668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0a9b      	lsrs	r3, r3, #10
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4903      	ldr	r1, [pc, #12]	@ (800666c <HAL_RCC_GetPCLK1Freq+0x24>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40023800 	.word	0x40023800
 800666c:	0800dfb8 	.word	0x0800dfb8

08006670 <HAL_RCC_GetPCLK2Freq>:
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
 8006674:	f7ff ffdc 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006678:	4602      	mov	r2, r0
 800667a:	4b05      	ldr	r3, [pc, #20]	@ (8006690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	0b5b      	lsrs	r3, r3, #13
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	4903      	ldr	r1, [pc, #12]	@ (8006694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006686:	5ccb      	ldrb	r3, [r1, r3]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
 800668c:	4618      	mov	r0, r3
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40023800 	.word	0x40023800
 8006694:	0800dfb8 	.word	0x0800dfb8

08006698 <HAL_SPI_Init>:
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_SPI_Init+0x12>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e07b      	b.n	80067a2 <HAL_SPI_Init+0x10a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d108      	bne.n	80066c4 <HAL_SPI_Init+0x2c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ba:	d009      	beq.n	80066d0 <HAL_SPI_Init+0x38>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	61da      	str	r2, [r3, #28]
 80066c2:	e005      	b.n	80066d0 <HAL_SPI_Init+0x38>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	611a      	str	r2, [r3, #16]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	615a      	str	r2, [r3, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_SPI_Init+0x58>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fd ff7c 	bl	80045e8 <HAL_SPI_MspInit>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006754:	ea42 0103 	orr.w	r1, r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	f003 0104 	and.w	r1, r3, #4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006776:	f003 0210 	and.w	r2, r3, #16
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006790:	61da      	str	r2, [r3, #28]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	655a      	str	r2, [r3, #84]	@ 0x54
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80067a0:	2300      	movs	r3, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_SPI_Transmit>:
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b088      	sub	sp, #32
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	603b      	str	r3, [r7, #0]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
 80067ba:	f7fe fb7f 	bl	8004ebc <HAL_GetTick>
 80067be:	61f8      	str	r0, [r7, #28]
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	837b      	strh	r3, [r7, #26]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d001      	beq.n	80067d4 <HAL_SPI_Transmit+0x2a>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e12a      	b.n	8006a2a <HAL_SPI_Transmit+0x280>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <HAL_SPI_Transmit+0x36>
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_SPI_Transmit+0x3a>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e122      	b.n	8006a2a <HAL_SPI_Transmit+0x280>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_SPI_Transmit+0x48>
 80067ee:	2302      	movs	r3, #2
 80067f0:	e11b      	b.n	8006a2a <HAL_SPI_Transmit+0x280>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2203      	movs	r2, #3
 80067fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	655a      	str	r2, [r3, #84]	@ 0x54
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	88fa      	ldrh	r2, [r7, #6]
 8006812:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	88fa      	ldrh	r2, [r7, #6]
 8006818:	86da      	strh	r2, [r3, #54]	@ 0x36
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	645a      	str	r2, [r3, #68]	@ 0x44
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	641a      	str	r2, [r3, #64]	@ 0x40
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006840:	d10f      	bne.n	8006862 <HAL_SPI_Transmit+0xb8>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686c:	2b40      	cmp	r3, #64	@ 0x40
 800686e:	d007      	beq.n	8006880 <HAL_SPI_Transmit+0xd6>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006888:	d152      	bne.n	8006930 <HAL_SPI_Transmit+0x186>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_SPI_Transmit+0xee>
 8006892:	8b7b      	ldrh	r3, [r7, #26]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d145      	bne.n	8006924 <HAL_SPI_Transmit+0x17a>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	881a      	ldrh	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60da      	str	r2, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a8:	1c9a      	adds	r2, r3, #2
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068bc:	e032      	b.n	8006924 <HAL_SPI_Transmit+0x17a>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d112      	bne.n	80068f2 <HAL_SPI_Transmit+0x148>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d0:	881a      	ldrh	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60da      	str	r2, [r3, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068dc:	1c9a      	adds	r2, r3, #2
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068f0:	e018      	b.n	8006924 <HAL_SPI_Transmit+0x17a>
 80068f2:	f7fe fae3 	bl	8004ebc <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d803      	bhi.n	800690a <HAL_SPI_Transmit+0x160>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006908:	d102      	bne.n	8006910 <HAL_SPI_Transmit+0x166>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d109      	bne.n	8006924 <HAL_SPI_Transmit+0x17a>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006920:	2303      	movs	r3, #3
 8006922:	e082      	b.n	8006a2a <HAL_SPI_Transmit+0x280>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1c7      	bne.n	80068be <HAL_SPI_Transmit+0x114>
 800692e:	e053      	b.n	80069d8 <HAL_SPI_Transmit+0x22e>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_SPI_Transmit+0x194>
 8006938:	8b7b      	ldrh	r3, [r7, #26]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d147      	bne.n	80069ce <HAL_SPI_Transmit+0x224>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	330c      	adds	r3, #12
 8006948:	7812      	ldrb	r2, [r2, #0]
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	631a      	str	r2, [r3, #48]	@ 0x30
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006964:	e033      	b.n	80069ce <HAL_SPI_Transmit+0x224>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b02      	cmp	r3, #2
 8006972:	d113      	bne.n	800699c <HAL_SPI_Transmit+0x1f2>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	7812      	ldrb	r2, [r2, #0]
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	631a      	str	r2, [r3, #48]	@ 0x30
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	86da      	strh	r2, [r3, #54]	@ 0x36
 800699a:	e018      	b.n	80069ce <HAL_SPI_Transmit+0x224>
 800699c:	f7fe fa8e 	bl	8004ebc <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d803      	bhi.n	80069b4 <HAL_SPI_Transmit+0x20a>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b2:	d102      	bne.n	80069ba <HAL_SPI_Transmit+0x210>
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <HAL_SPI_Transmit+0x224>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80069ca:	2303      	movs	r3, #3
 80069cc:	e02d      	b.n	8006a2a <HAL_SPI_Transmit+0x280>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1c6      	bne.n	8006966 <HAL_SPI_Transmit+0x1bc>
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 fbd9 	bl	8007194 <SPI_EndRxTxTransaction>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_SPI_Transmit+0x244>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <HAL_SPI_Transmit+0x262>
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <HAL_SPI_Transmit+0x27e>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <HAL_SPI_Transmit+0x280>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_SPI_Receive>:
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b088      	sub	sp, #32
 8006a36:	af02      	add	r7, sp, #8
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d001      	beq.n	8006a52 <HAL_SPI_Receive+0x20>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e104      	b.n	8006c5c <HAL_SPI_Receive+0x22a>
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_SPI_Receive+0x2c>
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_SPI_Receive+0x30>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e0fc      	b.n	8006c5c <HAL_SPI_Receive+0x22a>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a6a:	d112      	bne.n	8006a92 <HAL_SPI_Receive+0x60>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10e      	bne.n	8006a92 <HAL_SPI_Receive+0x60>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2204      	movs	r2, #4
 8006a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	4613      	mov	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f8eb 	bl	8006c64 <HAL_SPI_TransmitReceive>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	e0e4      	b.n	8006c5c <HAL_SPI_Receive+0x22a>
 8006a92:	f7fe fa13 	bl	8004ebc <HAL_GetTick>
 8006a96:	6178      	str	r0, [r7, #20]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_SPI_Receive+0x74>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e0da      	b.n	8006c5c <HAL_SPI_Receive+0x22a>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	655a      	str	r2, [r3, #84]	@ 0x54
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	88fa      	ldrh	r2, [r7, #6]
 8006ac6:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	645a      	str	r2, [r3, #68]	@ 0x44
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006af4:	d10f      	bne.n	8006b16 <HAL_SPI_Receive+0xe4>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b40      	cmp	r3, #64	@ 0x40
 8006b22:	d007      	beq.n	8006b34 <HAL_SPI_Receive+0x102>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d170      	bne.n	8006c1e <HAL_SPI_Receive+0x1ec>
 8006b3c:	e035      	b.n	8006baa <HAL_SPI_Receive+0x178>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d115      	bne.n	8006b78 <HAL_SPI_Receive+0x146>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f103 020c 	add.w	r2, r3, #12
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b58:	7812      	ldrb	r2, [r2, #0]
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b76:	e018      	b.n	8006baa <HAL_SPI_Receive+0x178>
 8006b78:	f7fe f9a0 	bl	8004ebc <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d803      	bhi.n	8006b90 <HAL_SPI_Receive+0x15e>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8e:	d102      	bne.n	8006b96 <HAL_SPI_Receive+0x164>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <HAL_SPI_Receive+0x178>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e058      	b.n	8006c5c <HAL_SPI_Receive+0x22a>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1c4      	bne.n	8006b3e <HAL_SPI_Receive+0x10c>
 8006bb4:	e038      	b.n	8006c28 <HAL_SPI_Receive+0x1f6>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d113      	bne.n	8006bec <HAL_SPI_Receive+0x1ba>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bce:	b292      	uxth	r2, r2
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd6:	1c9a      	adds	r2, r3, #2
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bea:	e018      	b.n	8006c1e <HAL_SPI_Receive+0x1ec>
 8006bec:	f7fe f966 	bl	8004ebc <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d803      	bhi.n	8006c04 <HAL_SPI_Receive+0x1d2>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c02:	d102      	bne.n	8006c0a <HAL_SPI_Receive+0x1d8>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <HAL_SPI_Receive+0x1ec>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e01e      	b.n	8006c5c <HAL_SPI_Receive+0x22a>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1c6      	bne.n	8006bb6 <HAL_SPI_Receive+0x184>
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fa4b 	bl	80070c8 <SPI_EndRxTransaction>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <HAL_SPI_Receive+0x20c>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_SPI_Receive+0x228>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <HAL_SPI_Receive+0x22a>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_SPI_TransmitReceive>:
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	@ 0x28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	807b      	strh	r3, [r7, #2]
 8006c72:	2301      	movs	r3, #1
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c76:	f7fe f921 	bl	8004ebc <HAL_GetTick>
 8006c7a:	6238      	str	r0, [r7, #32]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	61bb      	str	r3, [r7, #24]
 8006c8a:	887b      	ldrh	r3, [r7, #2]
 8006c8c:	82fb      	strh	r3, [r7, #22]
 8006c8e:	7ffb      	ldrb	r3, [r7, #31]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d00c      	beq.n	8006cae <HAL_SPI_TransmitReceive+0x4a>
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c9a:	d106      	bne.n	8006caa <HAL_SPI_TransmitReceive+0x46>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <HAL_SPI_TransmitReceive+0x46>
 8006ca4:	7ffb      	ldrb	r3, [r7, #31]
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d001      	beq.n	8006cae <HAL_SPI_TransmitReceive+0x4a>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e17f      	b.n	8006fae <HAL_SPI_TransmitReceive+0x34a>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <HAL_SPI_TransmitReceive+0x5c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <HAL_SPI_TransmitReceive+0x5c>
 8006cba:	887b      	ldrh	r3, [r7, #2]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_SPI_TransmitReceive+0x60>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e174      	b.n	8006fae <HAL_SPI_TransmitReceive+0x34a>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_SPI_TransmitReceive+0x6e>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e16d      	b.n	8006fae <HAL_SPI_TransmitReceive+0x34a>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d003      	beq.n	8006cee <HAL_SPI_TransmitReceive+0x8a>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2205      	movs	r2, #5
 8006cea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	655a      	str	r2, [r3, #84]	@ 0x54
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	887a      	ldrh	r2, [r7, #2]
 8006cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	887a      	ldrh	r2, [r7, #2]
 8006d04:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	887a      	ldrh	r2, [r7, #2]
 8006d10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	887a      	ldrh	r2, [r7, #2]
 8006d16:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	645a      	str	r2, [r3, #68]	@ 0x44
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2e:	2b40      	cmp	r3, #64	@ 0x40
 8006d30:	d007      	beq.n	8006d42 <HAL_SPI_TransmitReceive+0xde>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d4a:	d17e      	bne.n	8006e4a <HAL_SPI_TransmitReceive+0x1e6>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_SPI_TransmitReceive+0xf6>
 8006d54:	8afb      	ldrh	r3, [r7, #22]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d16c      	bne.n	8006e34 <HAL_SPI_TransmitReceive+0x1d0>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5e:	881a      	ldrh	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6a:	1c9a      	adds	r2, r3, #2
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d7e:	e059      	b.n	8006e34 <HAL_SPI_TransmitReceive+0x1d0>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d11b      	bne.n	8006dc6 <HAL_SPI_TransmitReceive+0x162>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d016      	beq.n	8006dc6 <HAL_SPI_TransmitReceive+0x162>
 8006d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d113      	bne.n	8006dc6 <HAL_SPI_TransmitReceive+0x162>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da2:	881a      	ldrh	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dae:	1c9a      	adds	r2, r3, #2
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d119      	bne.n	8006e08 <HAL_SPI_TransmitReceive+0x1a4>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d014      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x1a4>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	b292      	uxth	r2, r2
 8006dea:	801a      	strh	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	1c9a      	adds	r2, r3, #2
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e04:	2301      	movs	r3, #1
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e08:	f7fe f858 	bl	8004ebc <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d80d      	bhi.n	8006e34 <HAL_SPI_TransmitReceive+0x1d0>
 8006e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d009      	beq.n	8006e34 <HAL_SPI_TransmitReceive+0x1d0>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006e30:	2303      	movs	r3, #3
 8006e32:	e0bc      	b.n	8006fae <HAL_SPI_TransmitReceive+0x34a>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1a0      	bne.n	8006d80 <HAL_SPI_TransmitReceive+0x11c>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d19b      	bne.n	8006d80 <HAL_SPI_TransmitReceive+0x11c>
 8006e48:	e082      	b.n	8006f50 <HAL_SPI_TransmitReceive+0x2ec>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_SPI_TransmitReceive+0x1f4>
 8006e52:	8afb      	ldrh	r3, [r7, #22]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d171      	bne.n	8006f3c <HAL_SPI_TransmitReceive+0x2d8>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	7812      	ldrb	r2, [r2, #0]
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e7e:	e05d      	b.n	8006f3c <HAL_SPI_TransmitReceive+0x2d8>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d11c      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x264>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d017      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0x264>
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d114      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x264>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	7812      	ldrb	r2, [r2, #0]
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d119      	bne.n	8006f0a <HAL_SPI_TransmitReceive+0x2a6>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d014      	beq.n	8006f0a <HAL_SPI_TransmitReceive+0x2a6>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f06:	2301      	movs	r3, #1
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f0a:	f7fd ffd7 	bl	8004ebc <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d803      	bhi.n	8006f22 <HAL_SPI_TransmitReceive+0x2be>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d102      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x2c4>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d109      	bne.n	8006f3c <HAL_SPI_TransmitReceive+0x2d8>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e038      	b.n	8006fae <HAL_SPI_TransmitReceive+0x34a>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d19c      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x21c>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d197      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x21c>
 8006f50:	6a3a      	ldr	r2, [r7, #32]
 8006f52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f91d 	bl	8007194 <SPI_EndRxTxTransaction>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d008      	beq.n	8006f72 <HAL_SPI_TransmitReceive+0x30e>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	655a      	str	r2, [r3, #84]	@ 0x54
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e01d      	b.n	8006fae <HAL_SPI_TransmitReceive+0x34a>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x32c>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <HAL_SPI_TransmitReceive+0x348>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <HAL_SPI_TransmitReceive+0x34a>
 8006fac:	2300      	movs	r3, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3728      	adds	r7, #40	@ 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <SPI_WaitFlagStateUntilTimeout>:
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	71fb      	strb	r3, [r7, #7]
 8006fc8:	f7fd ff78 	bl	8004ebc <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	f7fd ff70 	bl	8004ebc <HAL_GetTick>
 8006fdc:	61b8      	str	r0, [r7, #24]
 8006fde:	4b39      	ldr	r3, [pc, #228]	@ (80070c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	015b      	lsls	r3, r3, #5
 8006fe4:	0d1b      	lsrs	r3, r3, #20
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	fb02 f303 	mul.w	r3, r2, r3
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	e055      	b.n	800709c <SPI_WaitFlagStateUntilTimeout+0xe4>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff6:	d051      	beq.n	800709c <SPI_WaitFlagStateUntilTimeout+0xe4>
 8006ff8:	f7fd ff60 	bl	8004ebc <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	429a      	cmp	r2, r3
 8007006:	d902      	bls.n	800700e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d13d      	bne.n	800708a <SPI_WaitFlagStateUntilTimeout+0xd2>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800701c:	605a      	str	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007026:	d111      	bne.n	800704c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007030:	d004      	beq.n	800703c <SPI_WaitFlagStateUntilTimeout+0x84>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800703a:	d107      	bne.n	800704c <SPI_WaitFlagStateUntilTimeout+0x94>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007054:	d10f      	bne.n	8007076 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007086:	2303      	movs	r3, #3
 8007088:	e018      	b.n	80070bc <SPI_WaitFlagStateUntilTimeout+0x104>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <SPI_WaitFlagStateUntilTimeout+0xde>
 8007090:	2300      	movs	r3, #0
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	e002      	b.n	800709c <SPI_WaitFlagStateUntilTimeout+0xe4>
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	3b01      	subs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4013      	ands	r3, r2
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	bf0c      	ite	eq
 80070ac:	2301      	moveq	r3, #1
 80070ae:	2300      	movne	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	461a      	mov	r2, r3
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d19a      	bne.n	8006ff0 <SPI_WaitFlagStateUntilTimeout+0x38>
 80070ba:	2300      	movs	r3, #0
 80070bc:	4618      	mov	r0, r3
 80070be:	3720      	adds	r7, #32
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000028 	.word	0x20000028

080070c8 <SPI_EndRxTransaction>:
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070dc:	d111      	bne.n	8007102 <SPI_EndRxTransaction+0x3a>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070e6:	d004      	beq.n	80070f2 <SPI_EndRxTransaction+0x2a>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f0:	d107      	bne.n	8007102 <SPI_EndRxTransaction+0x3a>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800710a:	d12a      	bne.n	8007162 <SPI_EndRxTransaction+0x9a>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007114:	d012      	beq.n	800713c <SPI_EndRxTransaction+0x74>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2200      	movs	r2, #0
 800711e:	2180      	movs	r1, #128	@ 0x80
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff ff49 	bl	8006fb8 <SPI_WaitFlagStateUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d02d      	beq.n	8007188 <SPI_EndRxTransaction+0xc0>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007130:	f043 0220 	orr.w	r2, r3, #32
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	655a      	str	r2, [r3, #84]	@ 0x54
 8007138:	2303      	movs	r3, #3
 800713a:	e026      	b.n	800718a <SPI_EndRxTransaction+0xc2>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2200      	movs	r2, #0
 8007144:	2101      	movs	r1, #1
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff ff36 	bl	8006fb8 <SPI_WaitFlagStateUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01a      	beq.n	8007188 <SPI_EndRxTransaction+0xc0>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007156:	f043 0220 	orr.w	r2, r3, #32
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	655a      	str	r2, [r3, #84]	@ 0x54
 800715e:	2303      	movs	r3, #3
 8007160:	e013      	b.n	800718a <SPI_EndRxTransaction+0xc2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2200      	movs	r2, #0
 800716a:	2101      	movs	r1, #1
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f7ff ff23 	bl	8006fb8 <SPI_WaitFlagStateUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d007      	beq.n	8007188 <SPI_EndRxTransaction+0xc0>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800717c:	f043 0220 	orr.w	r2, r3, #32
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	655a      	str	r2, [r3, #84]	@ 0x54
 8007184:	2303      	movs	r3, #3
 8007186:	e000      	b.n	800718a <SPI_EndRxTransaction+0xc2>
 8007188:	2300      	movs	r3, #0
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <SPI_EndRxTxTransaction>:
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af02      	add	r7, sp, #8
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2201      	movs	r2, #1
 80071a8:	2102      	movs	r1, #2
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7ff ff04 	bl	8006fb8 <SPI_WaitFlagStateUntilTimeout>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d007      	beq.n	80071c6 <SPI_EndRxTxTransaction+0x32>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ba:	f043 0220 	orr.w	r2, r3, #32
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80071c2:	2303      	movs	r3, #3
 80071c4:	e032      	b.n	800722c <SPI_EndRxTxTransaction+0x98>
 80071c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007234 <SPI_EndRxTxTransaction+0xa0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007238 <SPI_EndRxTxTransaction+0xa4>)
 80071cc:	fba2 2303 	umull	r2, r3, r2, r3
 80071d0:	0d5b      	lsrs	r3, r3, #21
 80071d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071e4:	d112      	bne.n	800720c <SPI_EndRxTxTransaction+0x78>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2200      	movs	r2, #0
 80071ee:	2180      	movs	r1, #128	@ 0x80
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff fee1 	bl	8006fb8 <SPI_WaitFlagStateUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d016      	beq.n	800722a <SPI_EndRxTxTransaction+0x96>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	655a      	str	r2, [r3, #84]	@ 0x54
 8007208:	2303      	movs	r3, #3
 800720a:	e00f      	b.n	800722c <SPI_EndRxTxTransaction+0x98>
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <SPI_EndRxTxTransaction+0x94>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	3b01      	subs	r3, #1
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007222:	2b80      	cmp	r3, #128	@ 0x80
 8007224:	d0f2      	beq.n	800720c <SPI_EndRxTxTransaction+0x78>
 8007226:	e000      	b.n	800722a <SPI_EndRxTxTransaction+0x96>
 8007228:	bf00      	nop
 800722a:	2300      	movs	r3, #0
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000028 	.word	0x20000028
 8007238:	165e9f81 	.word	0x165e9f81

0800723c <HAL_TIM_Base_Init>:
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_TIM_Base_Init+0x12>
 800724a:	2301      	movs	r3, #1
 800724c:	e041      	b.n	80072d2 <HAL_TIM_Base_Init+0x96>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_TIM_Base_Init+0x2c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fd fa08 	bl	8004678 <HAL_TIM_Base_MspInit>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3304      	adds	r3, #4
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f000 fd7a 	bl	8007d74 <TIM_Base_SetConfig>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80072d0:	2300      	movs	r3, #0
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <HAL_TIM_PWM_Init>:
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_TIM_PWM_Init+0x12>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e041      	b.n	8007370 <HAL_TIM_PWM_Init+0x96>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <HAL_TIM_PWM_Init+0x2c>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f839 	bl	8007378 <HAL_TIM_PWM_MspInit>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3304      	adds	r3, #4
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f000 fd2b 	bl	8007d74 <TIM_Base_SetConfig>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800736e:	2300      	movs	r3, #0
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_TIM_PWM_MspInit>:
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_TIM_PWM_Start>:
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d109      	bne.n	80073b0 <HAL_TIM_PWM_Start+0x24>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	bf14      	ite	ne
 80073a8:	2301      	movne	r3, #1
 80073aa:	2300      	moveq	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	e022      	b.n	80073f6 <HAL_TIM_PWM_Start+0x6a>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d109      	bne.n	80073ca <HAL_TIM_PWM_Start+0x3e>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b01      	cmp	r3, #1
 80073c0:	bf14      	ite	ne
 80073c2:	2301      	movne	r3, #1
 80073c4:	2300      	moveq	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	e015      	b.n	80073f6 <HAL_TIM_PWM_Start+0x6a>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d109      	bne.n	80073e4 <HAL_TIM_PWM_Start+0x58>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	e008      	b.n	80073f6 <HAL_TIM_PWM_Start+0x6a>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	bf14      	ite	ne
 80073f0:	2301      	movne	r3, #1
 80073f2:	2300      	moveq	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <HAL_TIM_PWM_Start+0x72>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e068      	b.n	80074d0 <HAL_TIM_PWM_Start+0x144>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <HAL_TIM_PWM_Start+0x82>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800740c:	e013      	b.n	8007436 <HAL_TIM_PWM_Start+0xaa>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b04      	cmp	r3, #4
 8007412:	d104      	bne.n	800741e <HAL_TIM_PWM_Start+0x92>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800741c:	e00b      	b.n	8007436 <HAL_TIM_PWM_Start+0xaa>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b08      	cmp	r3, #8
 8007422:	d104      	bne.n	800742e <HAL_TIM_PWM_Start+0xa2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800742c:	e003      	b.n	8007436 <HAL_TIM_PWM_Start+0xaa>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2201      	movs	r2, #1
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 ff44 	bl	80082cc <TIM_CCxChannelCmd>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a23      	ldr	r2, [pc, #140]	@ (80074d8 <HAL_TIM_PWM_Start+0x14c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d107      	bne.n	800745e <HAL_TIM_PWM_Start+0xd2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800745c:	645a      	str	r2, [r3, #68]	@ 0x44
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a1d      	ldr	r2, [pc, #116]	@ (80074d8 <HAL_TIM_PWM_Start+0x14c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d018      	beq.n	800749a <HAL_TIM_PWM_Start+0x10e>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007470:	d013      	beq.n	800749a <HAL_TIM_PWM_Start+0x10e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a19      	ldr	r2, [pc, #100]	@ (80074dc <HAL_TIM_PWM_Start+0x150>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00e      	beq.n	800749a <HAL_TIM_PWM_Start+0x10e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a17      	ldr	r2, [pc, #92]	@ (80074e0 <HAL_TIM_PWM_Start+0x154>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d009      	beq.n	800749a <HAL_TIM_PWM_Start+0x10e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a16      	ldr	r2, [pc, #88]	@ (80074e4 <HAL_TIM_PWM_Start+0x158>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d004      	beq.n	800749a <HAL_TIM_PWM_Start+0x10e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a14      	ldr	r2, [pc, #80]	@ (80074e8 <HAL_TIM_PWM_Start+0x15c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d111      	bne.n	80074be <HAL_TIM_PWM_Start+0x132>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b06      	cmp	r3, #6
 80074aa:	d010      	beq.n	80074ce <HAL_TIM_PWM_Start+0x142>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	e007      	b.n	80074ce <HAL_TIM_PWM_Start+0x142>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0201 	orr.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	2300      	movs	r3, #0
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	40010000 	.word	0x40010000
 80074dc:	40000400 	.word	0x40000400
 80074e0:	40000800 	.word	0x40000800
 80074e4:	40000c00 	.word	0x40000c00
 80074e8:	40014000 	.word	0x40014000

080074ec <HAL_TIM_PWM_Stop>:
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2200      	movs	r2, #0
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fee4 	bl	80082cc <TIM_CCxChannelCmd>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a29      	ldr	r2, [pc, #164]	@ (80075b0 <HAL_TIM_PWM_Stop+0xc4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d117      	bne.n	800753e <HAL_TIM_PWM_Stop+0x52>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6a1a      	ldr	r2, [r3, #32]
 8007514:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10f      	bne.n	800753e <HAL_TIM_PWM_Stop+0x52>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6a1a      	ldr	r2, [r3, #32]
 8007524:	f240 4344 	movw	r3, #1092	@ 0x444
 8007528:	4013      	ands	r3, r2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d107      	bne.n	800753e <HAL_TIM_PWM_Stop+0x52>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800753c:	645a      	str	r2, [r3, #68]	@ 0x44
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6a1a      	ldr	r2, [r3, #32]
 8007544:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007548:	4013      	ands	r3, r2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10f      	bne.n	800756e <HAL_TIM_PWM_Stop+0x82>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	f240 4344 	movw	r3, #1092	@ 0x444
 8007558:	4013      	ands	r3, r2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d107      	bne.n	800756e <HAL_TIM_PWM_Stop+0x82>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0201 	bic.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d104      	bne.n	800757e <HAL_TIM_PWM_Stop+0x92>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800757c:	e013      	b.n	80075a6 <HAL_TIM_PWM_Stop+0xba>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b04      	cmp	r3, #4
 8007582:	d104      	bne.n	800758e <HAL_TIM_PWM_Stop+0xa2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800758c:	e00b      	b.n	80075a6 <HAL_TIM_PWM_Stop+0xba>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d104      	bne.n	800759e <HAL_TIM_PWM_Stop+0xb2>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800759c:	e003      	b.n	80075a6 <HAL_TIM_PWM_Stop+0xba>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075a6:	2300      	movs	r3, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	40010000 	.word	0x40010000

080075b4 <HAL_TIM_Encoder_Init>:
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_TIM_Encoder_Init+0x14>
 80075c4:	2301      	movs	r3, #1
 80075c6:	e097      	b.n	80076f8 <HAL_TIM_Encoder_Init+0x144>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <HAL_TIM_Encoder_Init+0x2e>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7fd f889 	bl	80046f4 <HAL_TIM_Encoder_MspInit>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2202      	movs	r2, #2
 80075e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075f8:	f023 0307 	bic.w	r3, r3, #7
 80075fc:	6093      	str	r3, [r2, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3304      	adds	r3, #4
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f000 fbb3 	bl	8007d74 <TIM_Base_SetConfig>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007636:	f023 0303 	bic.w	r3, r3, #3
 800763a:	613b      	str	r3, [r7, #16]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	4313      	orrs	r3, r2
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007654:	f023 030c 	bic.w	r3, r3, #12
 8007658:	613b      	str	r3, [r7, #16]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007660:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007664:	613b      	str	r3, [r7, #16]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	021b      	lsls	r3, r3, #8
 8007670:	4313      	orrs	r3, r2
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	011a      	lsls	r2, r3, #4
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	031b      	lsls	r3, r3, #12
 8007684:	4313      	orrs	r3, r2
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	4313      	orrs	r3, r2
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	4313      	orrs	r3, r2
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	609a      	str	r2, [r3, #8]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	619a      	str	r2, [r3, #24]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	621a      	str	r2, [r3, #32]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80076f6:	2300      	movs	r3, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_TIM_Encoder_Start>:
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007710:	73fb      	strb	r3, [r7, #15]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007718:	73bb      	strb	r3, [r7, #14]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007720:	737b      	strb	r3, [r7, #13]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007728:	733b      	strb	r3, [r7, #12]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d110      	bne.n	8007752 <HAL_TIM_Encoder_Start+0x52>
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d102      	bne.n	800773c <HAL_TIM_Encoder_Start+0x3c>
 8007736:	7b7b      	ldrb	r3, [r7, #13]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d001      	beq.n	8007740 <HAL_TIM_Encoder_Start+0x40>
 800773c:	2301      	movs	r3, #1
 800773e:	e069      	b.n	8007814 <HAL_TIM_Encoder_Start+0x114>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007750:	e031      	b.n	80077b6 <HAL_TIM_Encoder_Start+0xb6>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b04      	cmp	r3, #4
 8007756:	d110      	bne.n	800777a <HAL_TIM_Encoder_Start+0x7a>
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d102      	bne.n	8007764 <HAL_TIM_Encoder_Start+0x64>
 800775e:	7b3b      	ldrb	r3, [r7, #12]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d001      	beq.n	8007768 <HAL_TIM_Encoder_Start+0x68>
 8007764:	2301      	movs	r3, #1
 8007766:	e055      	b.n	8007814 <HAL_TIM_Encoder_Start+0x114>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007778:	e01d      	b.n	80077b6 <HAL_TIM_Encoder_Start+0xb6>
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d108      	bne.n	8007792 <HAL_TIM_Encoder_Start+0x92>
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d105      	bne.n	8007792 <HAL_TIM_Encoder_Start+0x92>
 8007786:	7b7b      	ldrb	r3, [r7, #13]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d102      	bne.n	8007792 <HAL_TIM_Encoder_Start+0x92>
 800778c:	7b3b      	ldrb	r3, [r7, #12]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d001      	beq.n	8007796 <HAL_TIM_Encoder_Start+0x96>
 8007792:	2301      	movs	r3, #1
 8007794:	e03e      	b.n	8007814 <HAL_TIM_Encoder_Start+0x114>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2202      	movs	r2, #2
 800779a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2202      	movs	r2, #2
 80077a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2202      	movs	r2, #2
 80077aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2202      	movs	r2, #2
 80077b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_TIM_Encoder_Start+0xc4>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d008      	beq.n	80077d4 <HAL_TIM_Encoder_Start+0xd4>
 80077c2:	e00f      	b.n	80077e4 <HAL_TIM_Encoder_Start+0xe4>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2201      	movs	r2, #1
 80077ca:	2100      	movs	r1, #0
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fd7d 	bl	80082cc <TIM_CCxChannelCmd>
 80077d2:	e016      	b.n	8007802 <HAL_TIM_Encoder_Start+0x102>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2201      	movs	r2, #1
 80077da:	2104      	movs	r1, #4
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fd75 	bl	80082cc <TIM_CCxChannelCmd>
 80077e2:	e00e      	b.n	8007802 <HAL_TIM_Encoder_Start+0x102>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2201      	movs	r2, #1
 80077ea:	2100      	movs	r1, #0
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fd6d 	bl	80082cc <TIM_CCxChannelCmd>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2201      	movs	r2, #1
 80077f8:	2104      	movs	r1, #4
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fd66 	bl	80082cc <TIM_CCxChannelCmd>
 8007800:	bf00      	nop
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0201 	orr.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	2300      	movs	r3, #0
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_TIM_IRQHandler>:
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	60bb      	str	r3, [r7, #8]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d020      	beq.n	8007880 <HAL_TIM_IRQHandler+0x64>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01b      	beq.n	8007880 <HAL_TIM_IRQHandler+0x64>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f06f 0202 	mvn.w	r2, #2
 8007850:	611a      	str	r2, [r3, #16]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	771a      	strb	r2, [r3, #28]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_TIM_IRQHandler+0x52>
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa65 	bl	8007d36 <HAL_TIM_IC_CaptureCallback>
 800786c:	e005      	b.n	800787a <HAL_TIM_IRQHandler+0x5e>
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa57 	bl	8007d22 <HAL_TIM_OC_DelayElapsedCallback>
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa68 	bl	8007d4a <HAL_TIM_PWM_PulseFinishedCallback>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	771a      	strb	r2, [r3, #28]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	d020      	beq.n	80078cc <HAL_TIM_IRQHandler+0xb0>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01b      	beq.n	80078cc <HAL_TIM_IRQHandler+0xb0>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0204 	mvn.w	r2, #4
 800789c:	611a      	str	r2, [r3, #16]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2202      	movs	r2, #2
 80078a2:	771a      	strb	r2, [r3, #28]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0x9e>
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa3f 	bl	8007d36 <HAL_TIM_IC_CaptureCallback>
 80078b8:	e005      	b.n	80078c6 <HAL_TIM_IRQHandler+0xaa>
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa31 	bl	8007d22 <HAL_TIM_OC_DelayElapsedCallback>
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa42 	bl	8007d4a <HAL_TIM_PWM_PulseFinishedCallback>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f003 0308 	and.w	r3, r3, #8
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d020      	beq.n	8007918 <HAL_TIM_IRQHandler+0xfc>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01b      	beq.n	8007918 <HAL_TIM_IRQHandler+0xfc>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f06f 0208 	mvn.w	r2, #8
 80078e8:	611a      	str	r2, [r3, #16]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2204      	movs	r2, #4
 80078ee:	771a      	strb	r2, [r3, #28]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <HAL_TIM_IRQHandler+0xea>
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa19 	bl	8007d36 <HAL_TIM_IC_CaptureCallback>
 8007904:	e005      	b.n	8007912 <HAL_TIM_IRQHandler+0xf6>
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa0b 	bl	8007d22 <HAL_TIM_OC_DelayElapsedCallback>
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa1c 	bl	8007d4a <HAL_TIM_PWM_PulseFinishedCallback>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	771a      	strb	r2, [r3, #28]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f003 0310 	and.w	r3, r3, #16
 800791e:	2b00      	cmp	r3, #0
 8007920:	d020      	beq.n	8007964 <HAL_TIM_IRQHandler+0x148>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01b      	beq.n	8007964 <HAL_TIM_IRQHandler+0x148>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0210 	mvn.w	r2, #16
 8007934:	611a      	str	r2, [r3, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2208      	movs	r2, #8
 800793a:	771a      	strb	r2, [r3, #28]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_TIM_IRQHandler+0x136>
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f9f3 	bl	8007d36 <HAL_TIM_IC_CaptureCallback>
 8007950:	e005      	b.n	800795e <HAL_TIM_IRQHandler+0x142>
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f9e5 	bl	8007d22 <HAL_TIM_OC_DelayElapsedCallback>
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f9f6 	bl	8007d4a <HAL_TIM_PWM_PulseFinishedCallback>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	771a      	strb	r2, [r3, #28]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00c      	beq.n	8007988 <HAL_TIM_IRQHandler+0x16c>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d007      	beq.n	8007988 <HAL_TIM_IRQHandler+0x16c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f06f 0201 	mvn.w	r2, #1
 8007980:	611a      	str	r2, [r3, #16]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f9c3 	bl	8007d0e <HAL_TIM_PeriodElapsedCallback>
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00c      	beq.n	80079ac <HAL_TIM_IRQHandler+0x190>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007998:	2b00      	cmp	r3, #0
 800799a:	d007      	beq.n	80079ac <HAL_TIM_IRQHandler+0x190>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80079a4:	611a      	str	r2, [r3, #16]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fd80 	bl	80084ac <HAL_TIMEx_BreakCallback>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00c      	beq.n	80079d0 <HAL_TIM_IRQHandler+0x1b4>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d007      	beq.n	80079d0 <HAL_TIM_IRQHandler+0x1b4>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079c8:	611a      	str	r2, [r3, #16]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f9c7 	bl	8007d5e <HAL_TIM_TriggerCallback>
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00c      	beq.n	80079f4 <HAL_TIM_IRQHandler+0x1d8>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d007      	beq.n	80079f4 <HAL_TIM_IRQHandler+0x1d8>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0220 	mvn.w	r2, #32
 80079ec:	611a      	str	r2, [r3, #16]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fd52 	bl	8008498 <HAL_TIMEx_CommutCallback>
 80079f4:	bf00      	nop
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_TIM_PWM_ConfigChannel>:
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	75fb      	strb	r3, [r7, #23]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e0ae      	b.n	8007b78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b0c      	cmp	r3, #12
 8007a26:	f200 809f 	bhi.w	8007b68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007a65 	.word	0x08007a65
 8007a34:	08007b69 	.word	0x08007b69
 8007a38:	08007b69 	.word	0x08007b69
 8007a3c:	08007b69 	.word	0x08007b69
 8007a40:	08007aa5 	.word	0x08007aa5
 8007a44:	08007b69 	.word	0x08007b69
 8007a48:	08007b69 	.word	0x08007b69
 8007a4c:	08007b69 	.word	0x08007b69
 8007a50:	08007ae7 	.word	0x08007ae7
 8007a54:	08007b69 	.word	0x08007b69
 8007a58:	08007b69 	.word	0x08007b69
 8007a5c:	08007b69 	.word	0x08007b69
 8007a60:	08007b27 	.word	0x08007b27
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fa08 	bl	8007e80 <TIM_OC1_SetConfig>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 0208 	orr.w	r2, r2, #8
 8007a7e:	619a      	str	r2, [r3, #24]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0204 	bic.w	r2, r2, #4
 8007a8e:	619a      	str	r2, [r3, #24]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6999      	ldr	r1, [r3, #24]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	619a      	str	r2, [r3, #24]
 8007aa2:	e064      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fa4e 	bl	8007f4c <TIM_OC2_SetConfig>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007abe:	619a      	str	r2, [r3, #24]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ace:	619a      	str	r2, [r3, #24]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6999      	ldr	r1, [r3, #24]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	021a      	lsls	r2, r3, #8
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	619a      	str	r2, [r3, #24]
 8007ae4:	e043      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fa99 	bl	8008024 <TIM_OC3_SetConfig>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0208 	orr.w	r2, r2, #8
 8007b00:	61da      	str	r2, [r3, #28]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0204 	bic.w	r2, r2, #4
 8007b10:	61da      	str	r2, [r3, #28]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69d9      	ldr	r1, [r3, #28]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	61da      	str	r2, [r3, #28]
 8007b24:	e023      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fae3 	bl	80080f8 <TIM_OC4_SetConfig>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b40:	61da      	str	r2, [r3, #28]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b50:	61da      	str	r2, [r3, #28]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69d9      	ldr	r1, [r3, #28]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	021a      	lsls	r2, r3, #8
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	61da      	str	r2, [r3, #28]
 8007b66:	e002      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	75fb      	strb	r3, [r7, #23]
 8007b6c:	bf00      	nop
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_TIM_ConfigClockSource>:
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_TIM_ConfigClockSource+0x1c>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e0b4      	b.n	8007d06 <HAL_TIM_ConfigClockSource+0x186>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	60bb      	str	r3, [r7, #8]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007bba:	60bb      	str	r3, [r7, #8]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bc2:	60bb      	str	r3, [r7, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	609a      	str	r2, [r3, #8]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bd4:	d03e      	beq.n	8007c54 <HAL_TIM_ConfigClockSource+0xd4>
 8007bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bda:	f200 8087 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be2:	f000 8086 	beq.w	8007cf2 <HAL_TIM_ConfigClockSource+0x172>
 8007be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bea:	d87f      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bec:	2b70      	cmp	r3, #112	@ 0x70
 8007bee:	d01a      	beq.n	8007c26 <HAL_TIM_ConfigClockSource+0xa6>
 8007bf0:	2b70      	cmp	r3, #112	@ 0x70
 8007bf2:	d87b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bf4:	2b60      	cmp	r3, #96	@ 0x60
 8007bf6:	d050      	beq.n	8007c9a <HAL_TIM_ConfigClockSource+0x11a>
 8007bf8:	2b60      	cmp	r3, #96	@ 0x60
 8007bfa:	d877      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bfc:	2b50      	cmp	r3, #80	@ 0x50
 8007bfe:	d03c      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0xfa>
 8007c00:	2b50      	cmp	r3, #80	@ 0x50
 8007c02:	d873      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c04:	2b40      	cmp	r3, #64	@ 0x40
 8007c06:	d058      	beq.n	8007cba <HAL_TIM_ConfigClockSource+0x13a>
 8007c08:	2b40      	cmp	r3, #64	@ 0x40
 8007c0a:	d86f      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c0c:	2b30      	cmp	r3, #48	@ 0x30
 8007c0e:	d064      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c10:	2b30      	cmp	r3, #48	@ 0x30
 8007c12:	d86b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d060      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c18:	2b20      	cmp	r3, #32
 8007c1a:	d867      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d05c      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	d05a      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c24:	e062      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6899      	ldr	r1, [r3, #8]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f000 fb29 	bl	800828c <TIM_ETR_SetConfig>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c48:	60bb      	str	r3, [r7, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	609a      	str	r2, [r3, #8]
 8007c52:	e04f      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6899      	ldr	r1, [r3, #8]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f000 fb12 	bl	800828c <TIM_ETR_SetConfig>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c76:	609a      	str	r2, [r3, #8]
 8007c78:	e03c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	6859      	ldr	r1, [r3, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f000 fa86 	bl	8008198 <TIM_TI1_ConfigInputStage>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2150      	movs	r1, #80	@ 0x50
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fadf 	bl	8008256 <TIM_ITRx_SetConfig>
 8007c98:	e02c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6818      	ldr	r0, [r3, #0]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	6859      	ldr	r1, [r3, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f000 faa5 	bl	80081f6 <TIM_TI2_ConfigInputStage>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2160      	movs	r1, #96	@ 0x60
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 facf 	bl	8008256 <TIM_ITRx_SetConfig>
 8007cb8:	e01c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6859      	ldr	r1, [r3, #4]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f000 fa66 	bl	8008198 <TIM_TI1_ConfigInputStage>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2140      	movs	r1, #64	@ 0x40
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fabf 	bl	8008256 <TIM_ITRx_SetConfig>
 8007cd8:	e00c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f000 fab6 	bl	8008256 <TIM_ITRx_SetConfig>
 8007cea:	e003      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
 8007cf0:	e000      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
 8007cf2:	bf00      	nop
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_TIM_PeriodElapsedCallback>:
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <HAL_TIM_OC_DelayElapsedCallback>:
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_TIM_IC_CaptureCallback>:
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <HAL_TIM_PWM_PulseFinishedCallback>:
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <HAL_TIM_TriggerCallback>:
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
	...

08007d74 <TIM_Base_SetConfig>:
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a37      	ldr	r2, [pc, #220]	@ (8007e64 <TIM_Base_SetConfig+0xf0>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00f      	beq.n	8007dac <TIM_Base_SetConfig+0x38>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d92:	d00b      	beq.n	8007dac <TIM_Base_SetConfig+0x38>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a34      	ldr	r2, [pc, #208]	@ (8007e68 <TIM_Base_SetConfig+0xf4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d007      	beq.n	8007dac <TIM_Base_SetConfig+0x38>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a33      	ldr	r2, [pc, #204]	@ (8007e6c <TIM_Base_SetConfig+0xf8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d003      	beq.n	8007dac <TIM_Base_SetConfig+0x38>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a32      	ldr	r2, [pc, #200]	@ (8007e70 <TIM_Base_SetConfig+0xfc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d108      	bne.n	8007dbe <TIM_Base_SetConfig+0x4a>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a28      	ldr	r2, [pc, #160]	@ (8007e64 <TIM_Base_SetConfig+0xf0>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d01b      	beq.n	8007dfe <TIM_Base_SetConfig+0x8a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dcc:	d017      	beq.n	8007dfe <TIM_Base_SetConfig+0x8a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a25      	ldr	r2, [pc, #148]	@ (8007e68 <TIM_Base_SetConfig+0xf4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d013      	beq.n	8007dfe <TIM_Base_SetConfig+0x8a>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a24      	ldr	r2, [pc, #144]	@ (8007e6c <TIM_Base_SetConfig+0xf8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d00f      	beq.n	8007dfe <TIM_Base_SetConfig+0x8a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a23      	ldr	r2, [pc, #140]	@ (8007e70 <TIM_Base_SetConfig+0xfc>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d00b      	beq.n	8007dfe <TIM_Base_SetConfig+0x8a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a22      	ldr	r2, [pc, #136]	@ (8007e74 <TIM_Base_SetConfig+0x100>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d007      	beq.n	8007dfe <TIM_Base_SetConfig+0x8a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a21      	ldr	r2, [pc, #132]	@ (8007e78 <TIM_Base_SetConfig+0x104>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d003      	beq.n	8007dfe <TIM_Base_SetConfig+0x8a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a20      	ldr	r2, [pc, #128]	@ (8007e7c <TIM_Base_SetConfig+0x108>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d108      	bne.n	8007e10 <TIM_Base_SetConfig+0x9c>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a0c      	ldr	r2, [pc, #48]	@ (8007e64 <TIM_Base_SetConfig+0xf0>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d103      	bne.n	8007e3e <TIM_Base_SetConfig+0xca>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f043 0204 	orr.w	r2, r3, #4
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	615a      	str	r2, [r3, #20]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	bf00      	nop
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40010000 	.word	0x40010000
 8007e68:	40000400 	.word	0x40000400
 8007e6c:	40000800 	.word	0x40000800
 8007e70:	40000c00 	.word	0x40000c00
 8007e74:	40014000 	.word	0x40014000
 8007e78:	40014400 	.word	0x40014400
 8007e7c:	40014800 	.word	0x40014800

08007e80 <TIM_OC1_SetConfig>:
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	f023 0201 	bic.w	r2, r3, #1
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	621a      	str	r2, [r3, #32]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0303 	bic.w	r3, r3, #3
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f023 0302 	bic.w	r3, r3, #2
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8007f48 <TIM_OC1_SetConfig+0xc8>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d10c      	bne.n	8007ef6 <TIM_OC1_SetConfig+0x76>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f023 0308 	bic.w	r3, r3, #8
 8007ee2:	617b      	str	r3, [r7, #20]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f023 0304 	bic.w	r3, r3, #4
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a13      	ldr	r2, [pc, #76]	@ (8007f48 <TIM_OC1_SetConfig+0xc8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d111      	bne.n	8007f22 <TIM_OC1_SetConfig+0xa2>
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f04:	613b      	str	r3, [r7, #16]
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f0c:	613b      	str	r3, [r7, #16]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	605a      	str	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	619a      	str	r2, [r3, #24]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	635a      	str	r2, [r3, #52]	@ 0x34
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	621a      	str	r2, [r3, #32]
 8007f3c:	bf00      	nop
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	40010000 	.word	0x40010000

08007f4c <TIM_OC2_SetConfig>:
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	f023 0210 	bic.w	r2, r3, #16
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	621a      	str	r2, [r3, #32]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f023 0320 	bic.w	r3, r3, #32
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8008020 <TIM_OC2_SetConfig+0xd4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d10d      	bne.n	8007fc8 <TIM_OC2_SetConfig+0x7c>
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a15      	ldr	r2, [pc, #84]	@ (8008020 <TIM_OC2_SetConfig+0xd4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d113      	bne.n	8007ff8 <TIM_OC2_SetConfig+0xac>
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fd6:	613b      	str	r3, [r7, #16]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	605a      	str	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	619a      	str	r2, [r3, #24]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	639a      	str	r2, [r3, #56]	@ 0x38
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	621a      	str	r2, [r3, #32]
 8008012:	bf00      	nop
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	40010000 	.word	0x40010000

08008024 <TIM_OC3_SetConfig>:
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	621a      	str	r2, [r3, #32]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	613b      	str	r3, [r7, #16]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0303 	bic.w	r3, r3, #3
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800806c:	617b      	str	r3, [r7, #20]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	021b      	lsls	r3, r3, #8
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	4313      	orrs	r3, r2
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a1d      	ldr	r2, [pc, #116]	@ (80080f4 <TIM_OC3_SetConfig+0xd0>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d10d      	bne.n	800809e <TIM_OC3_SetConfig+0x7a>
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	021b      	lsls	r3, r3, #8
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a14      	ldr	r2, [pc, #80]	@ (80080f4 <TIM_OC3_SetConfig+0xd0>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d113      	bne.n	80080ce <TIM_OC3_SetConfig+0xaa>
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080ac:	613b      	str	r3, [r7, #16]
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	011b      	lsls	r3, r3, #4
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	605a      	str	r2, [r3, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	61da      	str	r2, [r3, #28]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	621a      	str	r2, [r3, #32]
 80080e8:	bf00      	nop
 80080ea:	371c      	adds	r7, #28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	40010000 	.word	0x40010000

080080f8 <TIM_OC4_SetConfig>:
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	621a      	str	r2, [r3, #32]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	021b      	lsls	r3, r3, #8
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	4313      	orrs	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	031b      	lsls	r3, r3, #12
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	613b      	str	r3, [r7, #16]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a10      	ldr	r2, [pc, #64]	@ (8008194 <TIM_OC4_SetConfig+0x9c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d109      	bne.n	800816c <TIM_OC4_SetConfig+0x74>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	019b      	lsls	r3, r3, #6
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	605a      	str	r2, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	61da      	str	r2, [r3, #28]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	641a      	str	r2, [r3, #64]	@ 0x40
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	621a      	str	r2, [r3, #32]
 8008186:	bf00      	nop
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	40010000 	.word	0x40010000

08008198 <TIM_TI1_ConfigInputStage>:
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	f023 0201 	bic.w	r2, r3, #1
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	621a      	str	r2, [r3, #32]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	613b      	str	r3, [r7, #16]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	011b      	lsls	r3, r3, #4
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	613b      	str	r3, [r7, #16]
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f023 030a 	bic.w	r3, r3, #10
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4313      	orrs	r3, r2
 80081dc:	617b      	str	r3, [r7, #20]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	619a      	str	r2, [r3, #24]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	621a      	str	r2, [r3, #32]
 80081ea:	bf00      	nop
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <TIM_TI2_ConfigInputStage>:
 80081f6:	b480      	push	{r7}
 80081f8:	b087      	sub	sp, #28
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	607a      	str	r2, [r7, #4]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	f023 0210 	bic.w	r2, r3, #16
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	621a      	str	r2, [r3, #32]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	613b      	str	r3, [r7, #16]
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008220:	613b      	str	r3, [r7, #16]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	031b      	lsls	r3, r3, #12
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	4313      	orrs	r3, r2
 800822a:	613b      	str	r3, [r7, #16]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	619a      	str	r2, [r3, #24]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	621a      	str	r2, [r3, #32]
 800824a:	bf00      	nop
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <TIM_ITRx_SetConfig>:
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	f043 0307 	orr.w	r3, r3, #7
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	609a      	str	r2, [r3, #8]
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <TIM_ETR_SetConfig>:
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	021a      	lsls	r2, r3, #8
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	431a      	orrs	r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	609a      	str	r2, [r3, #8]
 80082c0:	bf00      	nop
 80082c2:	371c      	adds	r7, #28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <TIM_CCxChannelCmd>:
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f003 031f 	and.w	r3, r3, #31
 80082de:	2201      	movs	r2, #1
 80082e0:	fa02 f303 	lsl.w	r3, r2, r3
 80082e4:	617b      	str	r3, [r7, #20]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a1a      	ldr	r2, [r3, #32]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	43db      	mvns	r3, r3
 80082ee:	401a      	ands	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	621a      	str	r2, [r3, #32]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a1a      	ldr	r2, [r3, #32]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	f003 031f 	and.w	r3, r3, #31
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	fa01 f303 	lsl.w	r3, r1, r3
 8008304:	431a      	orrs	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	621a      	str	r2, [r3, #32]
 800830a:	bf00      	nop
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
	...

08008318 <HAL_TIMEx_MasterConfigSynchronization>:
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800832c:	2302      	movs	r3, #2
 800832e:	e050      	b.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	60bb      	str	r3, [r7, #8]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a1c      	ldr	r2, [pc, #112]	@ (80083e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d018      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800837c:	d013      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a18      	ldr	r2, [pc, #96]	@ (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00e      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a16      	ldr	r2, [pc, #88]	@ (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d009      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a15      	ldr	r2, [pc, #84]	@ (80083ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d004      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a13      	ldr	r2, [pc, #76]	@ (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d10c      	bne.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083ac:	60bb      	str	r3, [r7, #8]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	60bb      	str	r3, [r7, #8]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	609a      	str	r2, [r3, #8]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80083d0:	2300      	movs	r3, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	40010000 	.word	0x40010000
 80083e4:	40000400 	.word	0x40000400
 80083e8:	40000800 	.word	0x40000800
 80083ec:	40000c00 	.word	0x40000c00
 80083f0:	40014000 	.word	0x40014000

080083f4 <HAL_TIMEx_ConfigBreakDeadTime>:
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008408:	2b01      	cmp	r3, #1
 800840a:	d101      	bne.n	8008410 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800840c:	2302      	movs	r3, #2
 800840e:	e03d      	b.n	800848c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4313      	orrs	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	645a      	str	r2, [r3, #68]	@ 0x44
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800848a:	2300      	movs	r3, #0
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_TIMEx_CommutCallback>:
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <HAL_TIMEx_BreakCallback>:
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <HAL_UART_Init>:
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_UART_Init+0x12>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e042      	b.n	8008558 <HAL_UART_Init+0x98>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d106      	bne.n	80084ec <HAL_UART_Init+0x2c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7fc fa1e 	bl	8004928 <HAL_UART_MspInit>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2224      	movs	r2, #36	@ 0x24
 80084f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008502:	60da      	str	r2, [r3, #12]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fd7f 	bl	8009008 <UART_SetConfig>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	691a      	ldr	r2, [r3, #16]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008518:	611a      	str	r2, [r3, #16]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	695a      	ldr	r2, [r3, #20]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008528:	615a      	str	r2, [r3, #20]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008538:	60da      	str	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	645a      	str	r2, [r3, #68]	@ 0x44
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2220      	movs	r2, #32
 800854c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	635a      	str	r2, [r3, #52]	@ 0x34
 8008556:	2300      	movs	r3, #0
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <HAL_UART_Transmit>:
 8008560:	b580      	push	{r7, lr}
 8008562:	b08a      	sub	sp, #40	@ 0x28
 8008564:	af02      	add	r7, sp, #8
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	80fb      	strh	r3, [r7, #6]
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b20      	cmp	r3, #32
 800857e:	d175      	bne.n	800866c <HAL_UART_Transmit+0x10c>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <HAL_UART_Transmit+0x2c>
 8008586:	88fb      	ldrh	r3, [r7, #6]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_UART_Transmit+0x30>
 800858c:	2301      	movs	r3, #1
 800858e:	e06e      	b.n	800866e <HAL_UART_Transmit+0x10e>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	645a      	str	r2, [r3, #68]	@ 0x44
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2221      	movs	r2, #33	@ 0x21
 800859a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800859e:	f7fc fc8d 	bl	8004ebc <HAL_GetTick>
 80085a2:	6178      	str	r0, [r7, #20]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	88fa      	ldrh	r2, [r7, #6]
 80085a8:	849a      	strh	r2, [r3, #36]	@ 0x24
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	88fa      	ldrh	r2, [r7, #6]
 80085ae:	84da      	strh	r2, [r3, #38]	@ 0x26
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085b8:	d108      	bne.n	80085cc <HAL_UART_Transmit+0x6c>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d104      	bne.n	80085cc <HAL_UART_Transmit+0x6c>
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	61bb      	str	r3, [r7, #24]
 80085ca:	e003      	b.n	80085d4 <HAL_UART_Transmit+0x74>
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	61fb      	str	r3, [r7, #28]
 80085d0:	2300      	movs	r3, #0
 80085d2:	61bb      	str	r3, [r7, #24]
 80085d4:	e02e      	b.n	8008634 <HAL_UART_Transmit+0xd4>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2200      	movs	r2, #0
 80085de:	2180      	movs	r1, #128	@ 0x80
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 fb1d 	bl	8008c20 <UART_WaitOnFlagUntilTimeout>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <HAL_UART_Transmit+0x98>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2220      	movs	r2, #32
 80085f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085f4:	2303      	movs	r3, #3
 80085f6:	e03a      	b.n	800866e <HAL_UART_Transmit+0x10e>
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10b      	bne.n	8008616 <HAL_UART_Transmit+0xb6>
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800860c:	605a      	str	r2, [r3, #4]
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	3302      	adds	r3, #2
 8008612:	61bb      	str	r3, [r7, #24]
 8008614:	e007      	b.n	8008626 <HAL_UART_Transmit+0xc6>
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	781a      	ldrb	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	605a      	str	r2, [r3, #4]
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	3301      	adds	r3, #1
 8008624:	61fb      	str	r3, [r7, #28]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008638:	b29b      	uxth	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1cb      	bne.n	80085d6 <HAL_UART_Transmit+0x76>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2200      	movs	r2, #0
 8008646:	2140      	movs	r1, #64	@ 0x40
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 fae9 	bl	8008c20 <UART_WaitOnFlagUntilTimeout>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d005      	beq.n	8008660 <HAL_UART_Transmit+0x100>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2220      	movs	r2, #32
 8008658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800865c:	2303      	movs	r3, #3
 800865e:	e006      	b.n	800866e <HAL_UART_Transmit+0x10e>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2220      	movs	r2, #32
 8008664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008668:	2300      	movs	r3, #0
 800866a:	e000      	b.n	800866e <HAL_UART_Transmit+0x10e>
 800866c:	2302      	movs	r3, #2
 800866e:	4618      	mov	r0, r3
 8008670:	3720      	adds	r7, #32
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <HAL_UART_IRQHandler>:
 8008678:	b580      	push	{r7, lr}
 800867a:	b0ba      	sub	sp, #232	@ 0xe8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800869e:	2300      	movs	r3, #0
 80086a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086a4:	2300      	movs	r3, #0
 80086a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10f      	bne.n	80086de <HAL_UART_IRQHandler+0x66>
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <HAL_UART_IRQHandler+0x66>
 80086ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_UART_IRQHandler+0x66>
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fbd7 	bl	8008e8a <UART_Receive_IT>
 80086dc:	e273      	b.n	8008bc6 <HAL_UART_IRQHandler+0x54e>
 80086de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80de 	beq.w	80088a4 <HAL_UART_IRQHandler+0x22c>
 80086e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d106      	bne.n	8008702 <HAL_UART_IRQHandler+0x8a>
 80086f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 80d1 	beq.w	80088a4 <HAL_UART_IRQHandler+0x22c>
 8008702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00b      	beq.n	8008726 <HAL_UART_IRQHandler+0xae>
 800870e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008716:	2b00      	cmp	r3, #0
 8008718:	d005      	beq.n	8008726 <HAL_UART_IRQHandler+0xae>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800871e:	f043 0201 	orr.w	r2, r3, #1
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	645a      	str	r2, [r3, #68]	@ 0x44
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00b      	beq.n	800874a <HAL_UART_IRQHandler+0xd2>
 8008732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d005      	beq.n	800874a <HAL_UART_IRQHandler+0xd2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008742:	f043 0202 	orr.w	r2, r3, #2
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	645a      	str	r2, [r3, #68]	@ 0x44
 800874a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <HAL_UART_IRQHandler+0xf6>
 8008756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_UART_IRQHandler+0xf6>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008766:	f043 0204 	orr.w	r2, r3, #4
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	645a      	str	r2, [r3, #68]	@ 0x44
 800876e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	2b00      	cmp	r3, #0
 8008778:	d011      	beq.n	800879e <HAL_UART_IRQHandler+0x126>
 800877a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d105      	bne.n	8008792 <HAL_UART_IRQHandler+0x11a>
 8008786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <HAL_UART_IRQHandler+0x126>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008796:	f043 0208 	orr.w	r2, r3, #8
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	645a      	str	r2, [r3, #68]	@ 0x44
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 820a 	beq.w	8008bbc <HAL_UART_IRQHandler+0x544>
 80087a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d008      	beq.n	80087c6 <HAL_UART_IRQHandler+0x14e>
 80087b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087b8:	f003 0320 	and.w	r3, r3, #32
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <HAL_UART_IRQHandler+0x14e>
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fb62 	bl	8008e8a <UART_Receive_IT>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d0:	2b40      	cmp	r3, #64	@ 0x40
 80087d2:	bf0c      	ite	eq
 80087d4:	2301      	moveq	r3, #1
 80087d6:	2300      	movne	r3, #0
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087e2:	f003 0308 	and.w	r3, r3, #8
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d103      	bne.n	80087f2 <HAL_UART_IRQHandler+0x17a>
 80087ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d04f      	beq.n	8008892 <HAL_UART_IRQHandler+0x21a>
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fa6d 	bl	8008cd2 <UART_EndRxTransfer>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008802:	2b40      	cmp	r3, #64	@ 0x40
 8008804:	d141      	bne.n	800888a <HAL_UART_IRQHandler+0x212>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3314      	adds	r3, #20
 800880c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008810:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800881c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3314      	adds	r3, #20
 800882e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008832:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800883a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800883e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800884a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1d9      	bne.n	8008806 <HAL_UART_IRQHandler+0x18e>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d013      	beq.n	8008882 <HAL_UART_IRQHandler+0x20a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885e:	4a8a      	ldr	r2, [pc, #552]	@ (8008a88 <HAL_UART_IRQHandler+0x410>)
 8008860:	651a      	str	r2, [r3, #80]	@ 0x50
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008866:	4618      	mov	r0, r3
 8008868:	f7fd f8cb 	bl	8005a02 <HAL_DMA_Abort_IT>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d016      	beq.n	80088a0 <HAL_UART_IRQHandler+0x228>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
 8008880:	e00e      	b.n	80088a0 <HAL_UART_IRQHandler+0x228>
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f9b6 	bl	8008bf4 <HAL_UART_ErrorCallback>
 8008888:	e00a      	b.n	80088a0 <HAL_UART_IRQHandler+0x228>
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f9b2 	bl	8008bf4 <HAL_UART_ErrorCallback>
 8008890:	e006      	b.n	80088a0 <HAL_UART_IRQHandler+0x228>
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f9ae 	bl	8008bf4 <HAL_UART_ErrorCallback>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	645a      	str	r2, [r3, #68]	@ 0x44
 800889e:	e18d      	b.n	8008bbc <HAL_UART_IRQHandler+0x544>
 80088a0:	bf00      	nop
 80088a2:	e18b      	b.n	8008bbc <HAL_UART_IRQHandler+0x544>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	f040 8167 	bne.w	8008b7c <HAL_UART_IRQHandler+0x504>
 80088ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b2:	f003 0310 	and.w	r3, r3, #16
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 8160 	beq.w	8008b7c <HAL_UART_IRQHandler+0x504>
 80088bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8159 	beq.w	8008b7c <HAL_UART_IRQHandler+0x504>
 80088ca:	2300      	movs	r3, #0
 80088cc:	60bb      	str	r3, [r7, #8]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60bb      	str	r3, [r7, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	60bb      	str	r3, [r7, #8]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ea:	2b40      	cmp	r3, #64	@ 0x40
 80088ec:	f040 80ce 	bne.w	8008a8c <HAL_UART_IRQHandler+0x414>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 80088fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 80a9 	beq.w	8008a58 <HAL_UART_IRQHandler+0x3e0>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800890a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800890e:	429a      	cmp	r2, r3
 8008910:	f080 80a2 	bcs.w	8008a58 <HAL_UART_IRQHandler+0x3e0>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800891a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008926:	f000 8088 	beq.w	8008a3a <HAL_UART_IRQHandler+0x3c2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	330c      	adds	r3, #12
 8008930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008934:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008940:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008948:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	330c      	adds	r3, #12
 8008952:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008956:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800895a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800895e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008962:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800896e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1d9      	bne.n	800892a <HAL_UART_IRQHandler+0x2b2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3314      	adds	r3, #20
 800897c:	677b      	str	r3, [r7, #116]	@ 0x74
 800897e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	673b      	str	r3, [r7, #112]	@ 0x70
 8008986:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008988:	f023 0301 	bic.w	r3, r3, #1
 800898c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3314      	adds	r3, #20
 8008996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800899a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800899e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e1      	bne.n	8008976 <HAL_UART_IRQHandler+0x2fe>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3314      	adds	r3, #20
 80089b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80089ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3314      	adds	r3, #20
 80089d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80089e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e3      	bne.n	80089b2 <HAL_UART_IRQHandler+0x33a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2220      	movs	r2, #32
 80089ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	330c      	adds	r3, #12
 80089fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a0a:	f023 0310 	bic.w	r3, r3, #16
 8008a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	330c      	adds	r3, #12
 8008a18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e3      	bne.n	80089f8 <HAL_UART_IRQHandler+0x380>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fc ff74 	bl	8005922 <HAL_DMA_Abort>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f8d9 	bl	8008c08 <HAL_UARTEx_RxEventCallback>
 8008a56:	e0b3      	b.n	8008bc0 <HAL_UART_IRQHandler+0x548>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a60:	429a      	cmp	r2, r3
 8008a62:	f040 80ad 	bne.w	8008bc0 <HAL_UART_IRQHandler+0x548>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a70:	f040 80a6 	bne.w	8008bc0 <HAL_UART_IRQHandler+0x548>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2202      	movs	r2, #2
 8008a78:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f8c1 	bl	8008c08 <HAL_UARTEx_RxEventCallback>
 8008a86:	e09b      	b.n	8008bc0 <HAL_UART_IRQHandler+0x548>
 8008a88:	08008d99 	.word	0x08008d99
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 808e 	beq.w	8008bc4 <HAL_UART_IRQHandler+0x54c>
 8008aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 8089 	beq.w	8008bc4 <HAL_UART_IRQHandler+0x54c>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	330c      	adds	r3, #12
 8008ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	330c      	adds	r3, #12
 8008ad2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008ad6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ada:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008adc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e3      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x43a>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3314      	adds	r3, #20
 8008af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	623b      	str	r3, [r7, #32]
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	f023 0301 	bic.w	r3, r3, #1
 8008b00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3314      	adds	r3, #20
 8008b0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e3      	bne.n	8008aea <HAL_UART_IRQHandler+0x472>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	613b      	str	r3, [r7, #16]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0310 	bic.w	r3, r3, #16
 8008b46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	330c      	adds	r3, #12
 8008b50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008b54:	61fa      	str	r2, [r7, #28]
 8008b56:	61bb      	str	r3, [r7, #24]
 8008b58:	69b9      	ldr	r1, [r7, #24]
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	617b      	str	r3, [r7, #20]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e3      	bne.n	8008b30 <HAL_UART_IRQHandler+0x4b8>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8008b6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f847 	bl	8008c08 <HAL_UARTEx_RxEventCallback>
 8008b7a:	e023      	b.n	8008bc4 <HAL_UART_IRQHandler+0x54c>
 8008b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d009      	beq.n	8008b9c <HAL_UART_IRQHandler+0x524>
 8008b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d003      	beq.n	8008b9c <HAL_UART_IRQHandler+0x524>
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f910 	bl	8008dba <UART_Transmit_IT>
 8008b9a:	e014      	b.n	8008bc6 <HAL_UART_IRQHandler+0x54e>
 8008b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00e      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x54e>
 8008ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d008      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x54e>
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f950 	bl	8008e5a <UART_EndTransmit_IT>
 8008bba:	e004      	b.n	8008bc6 <HAL_UART_IRQHandler+0x54e>
 8008bbc:	bf00      	nop
 8008bbe:	e002      	b.n	8008bc6 <HAL_UART_IRQHandler+0x54e>
 8008bc0:	bf00      	nop
 8008bc2:	e000      	b.n	8008bc6 <HAL_UART_IRQHandler+0x54e>
 8008bc4:	bf00      	nop
 8008bc6:	37e8      	adds	r7, #232	@ 0xe8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <HAL_UART_TxCpltCallback>:
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_UART_RxCpltCallback>:
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_UART_ErrorCallback>:
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_UARTEx_RxEventCallback>:
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	807b      	strh	r3, [r7, #2]
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <UART_WaitOnFlagUntilTimeout>:
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	71fb      	strb	r3, [r7, #7]
 8008c30:	e03b      	b.n	8008caa <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c38:	d037      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c3a:	f7fc f93f 	bl	8004ebc <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	6a3a      	ldr	r2, [r7, #32]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d302      	bcc.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <UART_WaitOnFlagUntilTimeout+0x34>
 8008c50:	2303      	movs	r3, #3
 8008c52:	e03a      	b.n	8008cca <UART_WaitOnFlagUntilTimeout+0xaa>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d023      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b80      	cmp	r3, #128	@ 0x80
 8008c66:	d020      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2b40      	cmp	r3, #64	@ 0x40
 8008c6c:	d01d      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d116      	bne.n	8008caa <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	617b      	str	r3, [r7, #20]
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f81d 	bl	8008cd2 <UART_EndRxTransfer>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2208      	movs	r2, #8
 8008c9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e00f      	b.n	8008cca <UART_WaitOnFlagUntilTimeout+0xaa>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	bf0c      	ite	eq
 8008cba:	2301      	moveq	r3, #1
 8008cbc:	2300      	movne	r3, #0
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	79fb      	ldrb	r3, [r7, #7]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d0b4      	beq.n	8008c32 <UART_WaitOnFlagUntilTimeout+0x12>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <UART_EndRxTransfer>:
 8008cd2:	b480      	push	{r7}
 8008cd4:	b095      	sub	sp, #84	@ 0x54
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	330c      	adds	r3, #12
 8008ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	330c      	adds	r3, #12
 8008cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008cfa:	643a      	str	r2, [r7, #64]	@ 0x40
 8008cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e5      	bne.n	8008cda <UART_EndRxTransfer+0x8>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3314      	adds	r3, #20
 8008d14:	623b      	str	r3, [r7, #32]
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	61fb      	str	r3, [r7, #28]
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f023 0301 	bic.w	r3, r3, #1
 8008d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3314      	adds	r3, #20
 8008d2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e5      	bne.n	8008d0e <UART_EndRxTransfer+0x3c>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d119      	bne.n	8008d7e <UART_EndRxTransfer+0xac>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	330c      	adds	r3, #12
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	60bb      	str	r3, [r7, #8]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	f023 0310 	bic.w	r3, r3, #16
 8008d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	330c      	adds	r3, #12
 8008d68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d6a:	61ba      	str	r2, [r7, #24]
 8008d6c:	617b      	str	r3, [r7, #20]
 8008d6e:	6979      	ldr	r1, [r7, #20]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	613b      	str	r3, [r7, #16]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e5      	bne.n	8008d4a <UART_EndRxTransfer+0x78>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d8c:	bf00      	nop
 8008d8e:	3754      	adds	r7, #84	@ 0x54
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <UART_DMAAbortOnError>:
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff ff21 	bl	8008bf4 <HAL_UART_ErrorCallback>
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <UART_Transmit_IT>:
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b21      	cmp	r3, #33	@ 0x21
 8008dcc:	d13e      	bne.n	8008e4c <UART_Transmit_IT+0x92>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd6:	d114      	bne.n	8008e02 <UART_Transmit_IT+0x48>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d110      	bne.n	8008e02 <UART_Transmit_IT+0x48>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008df4:	605a      	str	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	1c9a      	adds	r2, r3, #2
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	621a      	str	r2, [r3, #32]
 8008e00:	e008      	b.n	8008e14 <UART_Transmit_IT+0x5a>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	1c59      	adds	r1, r3, #1
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	6211      	str	r1, [r2, #32]
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	605a      	str	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	4619      	mov	r1, r3
 8008e22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10f      	bne.n	8008e48 <UART_Transmit_IT+0x8e>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e36:	60da      	str	r2, [r3, #12]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e46:	60da      	str	r2, [r3, #12]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	e000      	b.n	8008e4e <UART_Transmit_IT+0x94>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <UART_EndTransmit_IT>:
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2220      	movs	r2, #32
 8008e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fea6 	bl	8008bcc <HAL_UART_TxCpltCallback>
 8008e80:	2300      	movs	r3, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <UART_Receive_IT>:
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b08c      	sub	sp, #48	@ 0x30
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	2300      	movs	r3, #0
 8008e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e96:	2300      	movs	r3, #0
 8008e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b22      	cmp	r3, #34	@ 0x22
 8008ea4:	f040 80aa 	bne.w	8008ffc <UART_Receive_IT+0x172>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eb0:	d115      	bne.n	8008ede <UART_Receive_IT+0x54>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d111      	bne.n	8008ede <UART_Receive_IT+0x54>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed0:	801a      	strh	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed6:	1c9a      	adds	r2, r3, #2
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	629a      	str	r2, [r3, #40]	@ 0x28
 8008edc:	e024      	b.n	8008f28 <UART_Receive_IT+0x9e>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eec:	d007      	beq.n	8008efe <UART_Receive_IT+0x74>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <UART_Receive_IT+0x82>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <UART_Receive_IT+0x82>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	e008      	b.n	8008f1e <UART_Receive_IT+0x94>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1c:	701a      	strb	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	4619      	mov	r1, r3
 8008f36:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d15d      	bne.n	8008ff8 <UART_Receive_IT+0x16e>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f022 0220 	bic.w	r2, r2, #32
 8008f4a:	60da      	str	r2, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f5a:	60da      	str	r2, [r3, #12]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	695a      	ldr	r2, [r3, #20]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0201 	bic.w	r2, r2, #1
 8008f6a:	615a      	str	r2, [r3, #20]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d135      	bne.n	8008fee <UART_Receive_IT+0x164>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	330c      	adds	r3, #12
 8008f8e:	617b      	str	r3, [r7, #20]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	e853 3f00 	ldrex	r3, [r3]
 8008f96:	613b      	str	r3, [r7, #16]
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f023 0310 	bic.w	r3, r3, #16
 8008f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	330c      	adds	r3, #12
 8008fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fa8:	623a      	str	r2, [r7, #32]
 8008faa:	61fb      	str	r3, [r7, #28]
 8008fac:	69f9      	ldr	r1, [r7, #28]
 8008fae:	6a3a      	ldr	r2, [r7, #32]
 8008fb0:	e841 2300 	strex	r3, r2, [r1]
 8008fb4:	61bb      	str	r3, [r7, #24]
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e5      	bne.n	8008f88 <UART_Receive_IT+0xfe>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0310 	and.w	r3, r3, #16
 8008fc6:	2b10      	cmp	r3, #16
 8008fc8:	d10a      	bne.n	8008fe0 <UART_Receive_IT+0x156>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7ff fe0e 	bl	8008c08 <HAL_UARTEx_RxEventCallback>
 8008fec:	e002      	b.n	8008ff4 <UART_Receive_IT+0x16a>
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff fdf6 	bl	8008be0 <HAL_UART_RxCpltCallback>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e002      	b.n	8008ffe <UART_Receive_IT+0x174>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	e000      	b.n	8008ffe <UART_Receive_IT+0x174>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	4618      	mov	r0, r3
 8009000:	3730      	adds	r7, #48	@ 0x30
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <UART_SetConfig>:
 8009008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800900c:	b0c0      	sub	sp, #256	@ 0x100
 800900e:	af00      	add	r7, sp, #0
 8009010:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8009014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009024:	68d9      	ldr	r1, [r3, #12]
 8009026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	ea40 0301 	orr.w	r3, r0, r1
 8009030:	6113      	str	r3, [r2, #16]
 8009032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	431a      	orrs	r2, r3
 8009040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	431a      	orrs	r2, r3
 8009048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	4313      	orrs	r3, r2
 8009050:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009060:	f021 010c 	bic.w	r1, r1, #12
 8009064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800906e:	430b      	orrs	r3, r1
 8009070:	60d3      	str	r3, [r2, #12]
 8009072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800907e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009082:	6999      	ldr	r1, [r3, #24]
 8009084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	ea40 0301 	orr.w	r3, r0, r1
 800908e:	6153      	str	r3, [r2, #20]
 8009090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	4b8f      	ldr	r3, [pc, #572]	@ (80092d4 <UART_SetConfig+0x2cc>)
 8009098:	429a      	cmp	r2, r3
 800909a:	d005      	beq.n	80090a8 <UART_SetConfig+0xa0>
 800909c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4b8d      	ldr	r3, [pc, #564]	@ (80092d8 <UART_SetConfig+0x2d0>)
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d104      	bne.n	80090b2 <UART_SetConfig+0xaa>
 80090a8:	f7fd fae2 	bl	8006670 <HAL_RCC_GetPCLK2Freq>
 80090ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80090b0:	e003      	b.n	80090ba <UART_SetConfig+0xb2>
 80090b2:	f7fd fac9 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 80090b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80090ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090c4:	f040 810c 	bne.w	80092e0 <UART_SetConfig+0x2d8>
 80090c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090cc:	2200      	movs	r2, #0
 80090ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80090d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80090da:	4622      	mov	r2, r4
 80090dc:	462b      	mov	r3, r5
 80090de:	1891      	adds	r1, r2, r2
 80090e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80090e2:	415b      	adcs	r3, r3
 80090e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80090ea:	4621      	mov	r1, r4
 80090ec:	eb12 0801 	adds.w	r8, r2, r1
 80090f0:	4629      	mov	r1, r5
 80090f2:	eb43 0901 	adc.w	r9, r3, r1
 80090f6:	f04f 0200 	mov.w	r2, #0
 80090fa:	f04f 0300 	mov.w	r3, #0
 80090fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800910a:	4690      	mov	r8, r2
 800910c:	4699      	mov	r9, r3
 800910e:	4623      	mov	r3, r4
 8009110:	eb18 0303 	adds.w	r3, r8, r3
 8009114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009118:	462b      	mov	r3, r5
 800911a:	eb49 0303 	adc.w	r3, r9, r3
 800911e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800912e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009132:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009136:	460b      	mov	r3, r1
 8009138:	18db      	adds	r3, r3, r3
 800913a:	653b      	str	r3, [r7, #80]	@ 0x50
 800913c:	4613      	mov	r3, r2
 800913e:	eb42 0303 	adc.w	r3, r2, r3
 8009142:	657b      	str	r3, [r7, #84]	@ 0x54
 8009144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009148:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800914c:	f7f7 fd34 	bl	8000bb8 <__aeabi_uldivmod>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4b61      	ldr	r3, [pc, #388]	@ (80092dc <UART_SetConfig+0x2d4>)
 8009156:	fba3 2302 	umull	r2, r3, r3, r2
 800915a:	095b      	lsrs	r3, r3, #5
 800915c:	011c      	lsls	r4, r3, #4
 800915e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009162:	2200      	movs	r2, #0
 8009164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009168:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800916c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009170:	4642      	mov	r2, r8
 8009172:	464b      	mov	r3, r9
 8009174:	1891      	adds	r1, r2, r2
 8009176:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009178:	415b      	adcs	r3, r3
 800917a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800917c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009180:	4641      	mov	r1, r8
 8009182:	eb12 0a01 	adds.w	sl, r2, r1
 8009186:	4649      	mov	r1, r9
 8009188:	eb43 0b01 	adc.w	fp, r3, r1
 800918c:	f04f 0200 	mov.w	r2, #0
 8009190:	f04f 0300 	mov.w	r3, #0
 8009194:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009198:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800919c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091a0:	4692      	mov	sl, r2
 80091a2:	469b      	mov	fp, r3
 80091a4:	4643      	mov	r3, r8
 80091a6:	eb1a 0303 	adds.w	r3, sl, r3
 80091aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091ae:	464b      	mov	r3, r9
 80091b0:	eb4b 0303 	adc.w	r3, fp, r3
 80091b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80091c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80091cc:	460b      	mov	r3, r1
 80091ce:	18db      	adds	r3, r3, r3
 80091d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80091d2:	4613      	mov	r3, r2
 80091d4:	eb42 0303 	adc.w	r3, r2, r3
 80091d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80091da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80091de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80091e2:	f7f7 fce9 	bl	8000bb8 <__aeabi_uldivmod>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4611      	mov	r1, r2
 80091ec:	4b3b      	ldr	r3, [pc, #236]	@ (80092dc <UART_SetConfig+0x2d4>)
 80091ee:	fba3 2301 	umull	r2, r3, r3, r1
 80091f2:	095b      	lsrs	r3, r3, #5
 80091f4:	2264      	movs	r2, #100	@ 0x64
 80091f6:	fb02 f303 	mul.w	r3, r2, r3
 80091fa:	1acb      	subs	r3, r1, r3
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009202:	4b36      	ldr	r3, [pc, #216]	@ (80092dc <UART_SetConfig+0x2d4>)
 8009204:	fba3 2302 	umull	r2, r3, r3, r2
 8009208:	095b      	lsrs	r3, r3, #5
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009210:	441c      	add	r4, r3
 8009212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009216:	2200      	movs	r2, #0
 8009218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800921c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009220:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009224:	4642      	mov	r2, r8
 8009226:	464b      	mov	r3, r9
 8009228:	1891      	adds	r1, r2, r2
 800922a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800922c:	415b      	adcs	r3, r3
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009234:	4641      	mov	r1, r8
 8009236:	1851      	adds	r1, r2, r1
 8009238:	6339      	str	r1, [r7, #48]	@ 0x30
 800923a:	4649      	mov	r1, r9
 800923c:	414b      	adcs	r3, r1
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009240:	f04f 0200 	mov.w	r2, #0
 8009244:	f04f 0300 	mov.w	r3, #0
 8009248:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800924c:	4659      	mov	r1, fp
 800924e:	00cb      	lsls	r3, r1, #3
 8009250:	4651      	mov	r1, sl
 8009252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009256:	4651      	mov	r1, sl
 8009258:	00ca      	lsls	r2, r1, #3
 800925a:	4610      	mov	r0, r2
 800925c:	4619      	mov	r1, r3
 800925e:	4603      	mov	r3, r0
 8009260:	4642      	mov	r2, r8
 8009262:	189b      	adds	r3, r3, r2
 8009264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009268:	464b      	mov	r3, r9
 800926a:	460a      	mov	r2, r1
 800926c:	eb42 0303 	adc.w	r3, r2, r3
 8009270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009280:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009284:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009288:	460b      	mov	r3, r1
 800928a:	18db      	adds	r3, r3, r3
 800928c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800928e:	4613      	mov	r3, r2
 8009290:	eb42 0303 	adc.w	r3, r2, r3
 8009294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800929a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800929e:	f7f7 fc8b 	bl	8000bb8 <__aeabi_uldivmod>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4b0d      	ldr	r3, [pc, #52]	@ (80092dc <UART_SetConfig+0x2d4>)
 80092a8:	fba3 1302 	umull	r1, r3, r3, r2
 80092ac:	095b      	lsrs	r3, r3, #5
 80092ae:	2164      	movs	r1, #100	@ 0x64
 80092b0:	fb01 f303 	mul.w	r3, r1, r3
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	3332      	adds	r3, #50	@ 0x32
 80092ba:	4a08      	ldr	r2, [pc, #32]	@ (80092dc <UART_SetConfig+0x2d4>)
 80092bc:	fba2 2303 	umull	r2, r3, r2, r3
 80092c0:	095b      	lsrs	r3, r3, #5
 80092c2:	f003 0207 	and.w	r2, r3, #7
 80092c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4422      	add	r2, r4
 80092ce:	609a      	str	r2, [r3, #8]
 80092d0:	e106      	b.n	80094e0 <UART_SetConfig+0x4d8>
 80092d2:	bf00      	nop
 80092d4:	40011000 	.word	0x40011000
 80092d8:	40011400 	.word	0x40011400
 80092dc:	51eb851f 	.word	0x51eb851f
 80092e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80092ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80092ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80092f2:	4642      	mov	r2, r8
 80092f4:	464b      	mov	r3, r9
 80092f6:	1891      	adds	r1, r2, r2
 80092f8:	6239      	str	r1, [r7, #32]
 80092fa:	415b      	adcs	r3, r3
 80092fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80092fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009302:	4641      	mov	r1, r8
 8009304:	1854      	adds	r4, r2, r1
 8009306:	4649      	mov	r1, r9
 8009308:	eb43 0501 	adc.w	r5, r3, r1
 800930c:	f04f 0200 	mov.w	r2, #0
 8009310:	f04f 0300 	mov.w	r3, #0
 8009314:	00eb      	lsls	r3, r5, #3
 8009316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800931a:	00e2      	lsls	r2, r4, #3
 800931c:	4614      	mov	r4, r2
 800931e:	461d      	mov	r5, r3
 8009320:	4643      	mov	r3, r8
 8009322:	18e3      	adds	r3, r4, r3
 8009324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009328:	464b      	mov	r3, r9
 800932a:	eb45 0303 	adc.w	r3, r5, r3
 800932e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800933e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009342:	f04f 0200 	mov.w	r2, #0
 8009346:	f04f 0300 	mov.w	r3, #0
 800934a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800934e:	4629      	mov	r1, r5
 8009350:	008b      	lsls	r3, r1, #2
 8009352:	4621      	mov	r1, r4
 8009354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009358:	4621      	mov	r1, r4
 800935a:	008a      	lsls	r2, r1, #2
 800935c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009360:	f7f7 fc2a 	bl	8000bb8 <__aeabi_uldivmod>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4b60      	ldr	r3, [pc, #384]	@ (80094ec <UART_SetConfig+0x4e4>)
 800936a:	fba3 2302 	umull	r2, r3, r3, r2
 800936e:	095b      	lsrs	r3, r3, #5
 8009370:	011c      	lsls	r4, r3, #4
 8009372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009376:	2200      	movs	r2, #0
 8009378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800937c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009384:	4642      	mov	r2, r8
 8009386:	464b      	mov	r3, r9
 8009388:	1891      	adds	r1, r2, r2
 800938a:	61b9      	str	r1, [r7, #24]
 800938c:	415b      	adcs	r3, r3
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009394:	4641      	mov	r1, r8
 8009396:	1851      	adds	r1, r2, r1
 8009398:	6139      	str	r1, [r7, #16]
 800939a:	4649      	mov	r1, r9
 800939c:	414b      	adcs	r3, r1
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093ac:	4659      	mov	r1, fp
 80093ae:	00cb      	lsls	r3, r1, #3
 80093b0:	4651      	mov	r1, sl
 80093b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093b6:	4651      	mov	r1, sl
 80093b8:	00ca      	lsls	r2, r1, #3
 80093ba:	4610      	mov	r0, r2
 80093bc:	4619      	mov	r1, r3
 80093be:	4603      	mov	r3, r0
 80093c0:	4642      	mov	r2, r8
 80093c2:	189b      	adds	r3, r3, r2
 80093c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093c8:	464b      	mov	r3, r9
 80093ca:	460a      	mov	r2, r1
 80093cc:	eb42 0303 	adc.w	r3, r2, r3
 80093d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80093e0:	f04f 0200 	mov.w	r2, #0
 80093e4:	f04f 0300 	mov.w	r3, #0
 80093e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80093ec:	4649      	mov	r1, r9
 80093ee:	008b      	lsls	r3, r1, #2
 80093f0:	4641      	mov	r1, r8
 80093f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093f6:	4641      	mov	r1, r8
 80093f8:	008a      	lsls	r2, r1, #2
 80093fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80093fe:	f7f7 fbdb 	bl	8000bb8 <__aeabi_uldivmod>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4611      	mov	r1, r2
 8009408:	4b38      	ldr	r3, [pc, #224]	@ (80094ec <UART_SetConfig+0x4e4>)
 800940a:	fba3 2301 	umull	r2, r3, r3, r1
 800940e:	095b      	lsrs	r3, r3, #5
 8009410:	2264      	movs	r2, #100	@ 0x64
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	1acb      	subs	r3, r1, r3
 8009418:	011b      	lsls	r3, r3, #4
 800941a:	3332      	adds	r3, #50	@ 0x32
 800941c:	4a33      	ldr	r2, [pc, #204]	@ (80094ec <UART_SetConfig+0x4e4>)
 800941e:	fba2 2303 	umull	r2, r3, r2, r3
 8009422:	095b      	lsrs	r3, r3, #5
 8009424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009428:	441c      	add	r4, r3
 800942a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800942e:	2200      	movs	r2, #0
 8009430:	673b      	str	r3, [r7, #112]	@ 0x70
 8009432:	677a      	str	r2, [r7, #116]	@ 0x74
 8009434:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009438:	4642      	mov	r2, r8
 800943a:	464b      	mov	r3, r9
 800943c:	1891      	adds	r1, r2, r2
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	415b      	adcs	r3, r3
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009448:	4641      	mov	r1, r8
 800944a:	1851      	adds	r1, r2, r1
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	4649      	mov	r1, r9
 8009450:	414b      	adcs	r3, r1
 8009452:	607b      	str	r3, [r7, #4]
 8009454:	f04f 0200 	mov.w	r2, #0
 8009458:	f04f 0300 	mov.w	r3, #0
 800945c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009460:	4659      	mov	r1, fp
 8009462:	00cb      	lsls	r3, r1, #3
 8009464:	4651      	mov	r1, sl
 8009466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800946a:	4651      	mov	r1, sl
 800946c:	00ca      	lsls	r2, r1, #3
 800946e:	4610      	mov	r0, r2
 8009470:	4619      	mov	r1, r3
 8009472:	4603      	mov	r3, r0
 8009474:	4642      	mov	r2, r8
 8009476:	189b      	adds	r3, r3, r2
 8009478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800947a:	464b      	mov	r3, r9
 800947c:	460a      	mov	r2, r1
 800947e:	eb42 0303 	adc.w	r3, r2, r3
 8009482:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	663b      	str	r3, [r7, #96]	@ 0x60
 800948e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800949c:	4649      	mov	r1, r9
 800949e:	008b      	lsls	r3, r1, #2
 80094a0:	4641      	mov	r1, r8
 80094a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094a6:	4641      	mov	r1, r8
 80094a8:	008a      	lsls	r2, r1, #2
 80094aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094ae:	f7f7 fb83 	bl	8000bb8 <__aeabi_uldivmod>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4b0d      	ldr	r3, [pc, #52]	@ (80094ec <UART_SetConfig+0x4e4>)
 80094b8:	fba3 1302 	umull	r1, r3, r3, r2
 80094bc:	095b      	lsrs	r3, r3, #5
 80094be:	2164      	movs	r1, #100	@ 0x64
 80094c0:	fb01 f303 	mul.w	r3, r1, r3
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	3332      	adds	r3, #50	@ 0x32
 80094ca:	4a08      	ldr	r2, [pc, #32]	@ (80094ec <UART_SetConfig+0x4e4>)
 80094cc:	fba2 2303 	umull	r2, r3, r2, r3
 80094d0:	095b      	lsrs	r3, r3, #5
 80094d2:	f003 020f 	and.w	r2, r3, #15
 80094d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4422      	add	r2, r4
 80094de:	609a      	str	r2, [r3, #8]
 80094e0:	bf00      	nop
 80094e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80094e6:	46bd      	mov	sp, r7
 80094e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094ec:	51eb851f 	.word	0x51eb851f

080094f0 <__cvt>:
 80094f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f4:	ec57 6b10 	vmov	r6, r7, d0
 80094f8:	2f00      	cmp	r7, #0
 80094fa:	460c      	mov	r4, r1
 80094fc:	4619      	mov	r1, r3
 80094fe:	463b      	mov	r3, r7
 8009500:	bfbb      	ittet	lt
 8009502:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009506:	461f      	movlt	r7, r3
 8009508:	2300      	movge	r3, #0
 800950a:	232d      	movlt	r3, #45	@ 0x2d
 800950c:	700b      	strb	r3, [r1, #0]
 800950e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009510:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009514:	4691      	mov	r9, r2
 8009516:	f023 0820 	bic.w	r8, r3, #32
 800951a:	bfbc      	itt	lt
 800951c:	4632      	movlt	r2, r6
 800951e:	4616      	movlt	r6, r2
 8009520:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009524:	d005      	beq.n	8009532 <__cvt+0x42>
 8009526:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800952a:	d100      	bne.n	800952e <__cvt+0x3e>
 800952c:	3401      	adds	r4, #1
 800952e:	2102      	movs	r1, #2
 8009530:	e000      	b.n	8009534 <__cvt+0x44>
 8009532:	2103      	movs	r1, #3
 8009534:	ab03      	add	r3, sp, #12
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	ab02      	add	r3, sp, #8
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	ec47 6b10 	vmov	d0, r6, r7
 8009540:	4653      	mov	r3, sl
 8009542:	4622      	mov	r2, r4
 8009544:	f000 fea8 	bl	800a298 <_dtoa_r>
 8009548:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800954c:	4605      	mov	r5, r0
 800954e:	d119      	bne.n	8009584 <__cvt+0x94>
 8009550:	f019 0f01 	tst.w	r9, #1
 8009554:	d00e      	beq.n	8009574 <__cvt+0x84>
 8009556:	eb00 0904 	add.w	r9, r0, r4
 800955a:	2200      	movs	r2, #0
 800955c:	2300      	movs	r3, #0
 800955e:	4630      	mov	r0, r6
 8009560:	4639      	mov	r1, r7
 8009562:	f7f7 fab9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009566:	b108      	cbz	r0, 800956c <__cvt+0x7c>
 8009568:	f8cd 900c 	str.w	r9, [sp, #12]
 800956c:	2230      	movs	r2, #48	@ 0x30
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	454b      	cmp	r3, r9
 8009572:	d31e      	bcc.n	80095b2 <__cvt+0xc2>
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009578:	1b5b      	subs	r3, r3, r5
 800957a:	4628      	mov	r0, r5
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	b004      	add	sp, #16
 8009580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009584:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009588:	eb00 0904 	add.w	r9, r0, r4
 800958c:	d1e5      	bne.n	800955a <__cvt+0x6a>
 800958e:	7803      	ldrb	r3, [r0, #0]
 8009590:	2b30      	cmp	r3, #48	@ 0x30
 8009592:	d10a      	bne.n	80095aa <__cvt+0xba>
 8009594:	2200      	movs	r2, #0
 8009596:	2300      	movs	r3, #0
 8009598:	4630      	mov	r0, r6
 800959a:	4639      	mov	r1, r7
 800959c:	f7f7 fa9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80095a0:	b918      	cbnz	r0, 80095aa <__cvt+0xba>
 80095a2:	f1c4 0401 	rsb	r4, r4, #1
 80095a6:	f8ca 4000 	str.w	r4, [sl]
 80095aa:	f8da 3000 	ldr.w	r3, [sl]
 80095ae:	4499      	add	r9, r3
 80095b0:	e7d3      	b.n	800955a <__cvt+0x6a>
 80095b2:	1c59      	adds	r1, r3, #1
 80095b4:	9103      	str	r1, [sp, #12]
 80095b6:	701a      	strb	r2, [r3, #0]
 80095b8:	e7d9      	b.n	800956e <__cvt+0x7e>

080095ba <__exponent>:
 80095ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095bc:	2900      	cmp	r1, #0
 80095be:	bfba      	itte	lt
 80095c0:	4249      	neglt	r1, r1
 80095c2:	232d      	movlt	r3, #45	@ 0x2d
 80095c4:	232b      	movge	r3, #43	@ 0x2b
 80095c6:	2909      	cmp	r1, #9
 80095c8:	7002      	strb	r2, [r0, #0]
 80095ca:	7043      	strb	r3, [r0, #1]
 80095cc:	dd29      	ble.n	8009622 <__exponent+0x68>
 80095ce:	f10d 0307 	add.w	r3, sp, #7
 80095d2:	461d      	mov	r5, r3
 80095d4:	270a      	movs	r7, #10
 80095d6:	461a      	mov	r2, r3
 80095d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80095dc:	fb07 1416 	mls	r4, r7, r6, r1
 80095e0:	3430      	adds	r4, #48	@ 0x30
 80095e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80095e6:	460c      	mov	r4, r1
 80095e8:	2c63      	cmp	r4, #99	@ 0x63
 80095ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80095ee:	4631      	mov	r1, r6
 80095f0:	dcf1      	bgt.n	80095d6 <__exponent+0x1c>
 80095f2:	3130      	adds	r1, #48	@ 0x30
 80095f4:	1e94      	subs	r4, r2, #2
 80095f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80095fa:	1c41      	adds	r1, r0, #1
 80095fc:	4623      	mov	r3, r4
 80095fe:	42ab      	cmp	r3, r5
 8009600:	d30a      	bcc.n	8009618 <__exponent+0x5e>
 8009602:	f10d 0309 	add.w	r3, sp, #9
 8009606:	1a9b      	subs	r3, r3, r2
 8009608:	42ac      	cmp	r4, r5
 800960a:	bf88      	it	hi
 800960c:	2300      	movhi	r3, #0
 800960e:	3302      	adds	r3, #2
 8009610:	4403      	add	r3, r0
 8009612:	1a18      	subs	r0, r3, r0
 8009614:	b003      	add	sp, #12
 8009616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009618:	f813 6b01 	ldrb.w	r6, [r3], #1
 800961c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009620:	e7ed      	b.n	80095fe <__exponent+0x44>
 8009622:	2330      	movs	r3, #48	@ 0x30
 8009624:	3130      	adds	r1, #48	@ 0x30
 8009626:	7083      	strb	r3, [r0, #2]
 8009628:	70c1      	strb	r1, [r0, #3]
 800962a:	1d03      	adds	r3, r0, #4
 800962c:	e7f1      	b.n	8009612 <__exponent+0x58>
	...

08009630 <_printf_float>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	b08d      	sub	sp, #52	@ 0x34
 8009636:	460c      	mov	r4, r1
 8009638:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800963c:	4616      	mov	r6, r2
 800963e:	461f      	mov	r7, r3
 8009640:	4605      	mov	r5, r0
 8009642:	f000 fd27 	bl	800a094 <_localeconv_r>
 8009646:	6803      	ldr	r3, [r0, #0]
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	4618      	mov	r0, r3
 800964c:	f7f6 fe18 	bl	8000280 <strlen>
 8009650:	2300      	movs	r3, #0
 8009652:	930a      	str	r3, [sp, #40]	@ 0x28
 8009654:	f8d8 3000 	ldr.w	r3, [r8]
 8009658:	9005      	str	r0, [sp, #20]
 800965a:	3307      	adds	r3, #7
 800965c:	f023 0307 	bic.w	r3, r3, #7
 8009660:	f103 0208 	add.w	r2, r3, #8
 8009664:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009668:	f8d4 b000 	ldr.w	fp, [r4]
 800966c:	f8c8 2000 	str.w	r2, [r8]
 8009670:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009674:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009678:	9307      	str	r3, [sp, #28]
 800967a:	f8cd 8018 	str.w	r8, [sp, #24]
 800967e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009686:	4b9c      	ldr	r3, [pc, #624]	@ (80098f8 <_printf_float+0x2c8>)
 8009688:	f04f 32ff 	mov.w	r2, #4294967295
 800968c:	f7f7 fa56 	bl	8000b3c <__aeabi_dcmpun>
 8009690:	bb70      	cbnz	r0, 80096f0 <_printf_float+0xc0>
 8009692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009696:	4b98      	ldr	r3, [pc, #608]	@ (80098f8 <_printf_float+0x2c8>)
 8009698:	f04f 32ff 	mov.w	r2, #4294967295
 800969c:	f7f7 fa30 	bl	8000b00 <__aeabi_dcmple>
 80096a0:	bb30      	cbnz	r0, 80096f0 <_printf_float+0xc0>
 80096a2:	2200      	movs	r2, #0
 80096a4:	2300      	movs	r3, #0
 80096a6:	4640      	mov	r0, r8
 80096a8:	4649      	mov	r1, r9
 80096aa:	f7f7 fa1f 	bl	8000aec <__aeabi_dcmplt>
 80096ae:	b110      	cbz	r0, 80096b6 <_printf_float+0x86>
 80096b0:	232d      	movs	r3, #45	@ 0x2d
 80096b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096b6:	4a91      	ldr	r2, [pc, #580]	@ (80098fc <_printf_float+0x2cc>)
 80096b8:	4b91      	ldr	r3, [pc, #580]	@ (8009900 <_printf_float+0x2d0>)
 80096ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80096be:	bf8c      	ite	hi
 80096c0:	4690      	movhi	r8, r2
 80096c2:	4698      	movls	r8, r3
 80096c4:	2303      	movs	r3, #3
 80096c6:	6123      	str	r3, [r4, #16]
 80096c8:	f02b 0304 	bic.w	r3, fp, #4
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	f04f 0900 	mov.w	r9, #0
 80096d2:	9700      	str	r7, [sp, #0]
 80096d4:	4633      	mov	r3, r6
 80096d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80096d8:	4621      	mov	r1, r4
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 f9d2 	bl	8009a84 <_printf_common>
 80096e0:	3001      	adds	r0, #1
 80096e2:	f040 808d 	bne.w	8009800 <_printf_float+0x1d0>
 80096e6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ea:	b00d      	add	sp, #52	@ 0x34
 80096ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f0:	4642      	mov	r2, r8
 80096f2:	464b      	mov	r3, r9
 80096f4:	4640      	mov	r0, r8
 80096f6:	4649      	mov	r1, r9
 80096f8:	f7f7 fa20 	bl	8000b3c <__aeabi_dcmpun>
 80096fc:	b140      	cbz	r0, 8009710 <_printf_float+0xe0>
 80096fe:	464b      	mov	r3, r9
 8009700:	2b00      	cmp	r3, #0
 8009702:	bfbc      	itt	lt
 8009704:	232d      	movlt	r3, #45	@ 0x2d
 8009706:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800970a:	4a7e      	ldr	r2, [pc, #504]	@ (8009904 <_printf_float+0x2d4>)
 800970c:	4b7e      	ldr	r3, [pc, #504]	@ (8009908 <_printf_float+0x2d8>)
 800970e:	e7d4      	b.n	80096ba <_printf_float+0x8a>
 8009710:	6863      	ldr	r3, [r4, #4]
 8009712:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009716:	9206      	str	r2, [sp, #24]
 8009718:	1c5a      	adds	r2, r3, #1
 800971a:	d13b      	bne.n	8009794 <_printf_float+0x164>
 800971c:	2306      	movs	r3, #6
 800971e:	6063      	str	r3, [r4, #4]
 8009720:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009724:	2300      	movs	r3, #0
 8009726:	6022      	str	r2, [r4, #0]
 8009728:	9303      	str	r3, [sp, #12]
 800972a:	ab0a      	add	r3, sp, #40	@ 0x28
 800972c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009730:	ab09      	add	r3, sp, #36	@ 0x24
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	6861      	ldr	r1, [r4, #4]
 8009736:	ec49 8b10 	vmov	d0, r8, r9
 800973a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800973e:	4628      	mov	r0, r5
 8009740:	f7ff fed6 	bl	80094f0 <__cvt>
 8009744:	9b06      	ldr	r3, [sp, #24]
 8009746:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009748:	2b47      	cmp	r3, #71	@ 0x47
 800974a:	4680      	mov	r8, r0
 800974c:	d129      	bne.n	80097a2 <_printf_float+0x172>
 800974e:	1cc8      	adds	r0, r1, #3
 8009750:	db02      	blt.n	8009758 <_printf_float+0x128>
 8009752:	6863      	ldr	r3, [r4, #4]
 8009754:	4299      	cmp	r1, r3
 8009756:	dd41      	ble.n	80097dc <_printf_float+0x1ac>
 8009758:	f1aa 0a02 	sub.w	sl, sl, #2
 800975c:	fa5f fa8a 	uxtb.w	sl, sl
 8009760:	3901      	subs	r1, #1
 8009762:	4652      	mov	r2, sl
 8009764:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009768:	9109      	str	r1, [sp, #36]	@ 0x24
 800976a:	f7ff ff26 	bl	80095ba <__exponent>
 800976e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009770:	1813      	adds	r3, r2, r0
 8009772:	2a01      	cmp	r2, #1
 8009774:	4681      	mov	r9, r0
 8009776:	6123      	str	r3, [r4, #16]
 8009778:	dc02      	bgt.n	8009780 <_printf_float+0x150>
 800977a:	6822      	ldr	r2, [r4, #0]
 800977c:	07d2      	lsls	r2, r2, #31
 800977e:	d501      	bpl.n	8009784 <_printf_float+0x154>
 8009780:	3301      	adds	r3, #1
 8009782:	6123      	str	r3, [r4, #16]
 8009784:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009788:	2b00      	cmp	r3, #0
 800978a:	d0a2      	beq.n	80096d2 <_printf_float+0xa2>
 800978c:	232d      	movs	r3, #45	@ 0x2d
 800978e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009792:	e79e      	b.n	80096d2 <_printf_float+0xa2>
 8009794:	9a06      	ldr	r2, [sp, #24]
 8009796:	2a47      	cmp	r2, #71	@ 0x47
 8009798:	d1c2      	bne.n	8009720 <_printf_float+0xf0>
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1c0      	bne.n	8009720 <_printf_float+0xf0>
 800979e:	2301      	movs	r3, #1
 80097a0:	e7bd      	b.n	800971e <_printf_float+0xee>
 80097a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80097a6:	d9db      	bls.n	8009760 <_printf_float+0x130>
 80097a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80097ac:	d118      	bne.n	80097e0 <_printf_float+0x1b0>
 80097ae:	2900      	cmp	r1, #0
 80097b0:	6863      	ldr	r3, [r4, #4]
 80097b2:	dd0b      	ble.n	80097cc <_printf_float+0x19c>
 80097b4:	6121      	str	r1, [r4, #16]
 80097b6:	b913      	cbnz	r3, 80097be <_printf_float+0x18e>
 80097b8:	6822      	ldr	r2, [r4, #0]
 80097ba:	07d0      	lsls	r0, r2, #31
 80097bc:	d502      	bpl.n	80097c4 <_printf_float+0x194>
 80097be:	3301      	adds	r3, #1
 80097c0:	440b      	add	r3, r1
 80097c2:	6123      	str	r3, [r4, #16]
 80097c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80097c6:	f04f 0900 	mov.w	r9, #0
 80097ca:	e7db      	b.n	8009784 <_printf_float+0x154>
 80097cc:	b913      	cbnz	r3, 80097d4 <_printf_float+0x1a4>
 80097ce:	6822      	ldr	r2, [r4, #0]
 80097d0:	07d2      	lsls	r2, r2, #31
 80097d2:	d501      	bpl.n	80097d8 <_printf_float+0x1a8>
 80097d4:	3302      	adds	r3, #2
 80097d6:	e7f4      	b.n	80097c2 <_printf_float+0x192>
 80097d8:	2301      	movs	r3, #1
 80097da:	e7f2      	b.n	80097c2 <_printf_float+0x192>
 80097dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80097e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097e2:	4299      	cmp	r1, r3
 80097e4:	db05      	blt.n	80097f2 <_printf_float+0x1c2>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	6121      	str	r1, [r4, #16]
 80097ea:	07d8      	lsls	r0, r3, #31
 80097ec:	d5ea      	bpl.n	80097c4 <_printf_float+0x194>
 80097ee:	1c4b      	adds	r3, r1, #1
 80097f0:	e7e7      	b.n	80097c2 <_printf_float+0x192>
 80097f2:	2900      	cmp	r1, #0
 80097f4:	bfd4      	ite	le
 80097f6:	f1c1 0202 	rsble	r2, r1, #2
 80097fa:	2201      	movgt	r2, #1
 80097fc:	4413      	add	r3, r2
 80097fe:	e7e0      	b.n	80097c2 <_printf_float+0x192>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	055a      	lsls	r2, r3, #21
 8009804:	d407      	bmi.n	8009816 <_printf_float+0x1e6>
 8009806:	6923      	ldr	r3, [r4, #16]
 8009808:	4642      	mov	r2, r8
 800980a:	4631      	mov	r1, r6
 800980c:	4628      	mov	r0, r5
 800980e:	47b8      	blx	r7
 8009810:	3001      	adds	r0, #1
 8009812:	d12b      	bne.n	800986c <_printf_float+0x23c>
 8009814:	e767      	b.n	80096e6 <_printf_float+0xb6>
 8009816:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800981a:	f240 80dd 	bls.w	80099d8 <_printf_float+0x3a8>
 800981e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009822:	2200      	movs	r2, #0
 8009824:	2300      	movs	r3, #0
 8009826:	f7f7 f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800982a:	2800      	cmp	r0, #0
 800982c:	d033      	beq.n	8009896 <_printf_float+0x266>
 800982e:	4a37      	ldr	r2, [pc, #220]	@ (800990c <_printf_float+0x2dc>)
 8009830:	2301      	movs	r3, #1
 8009832:	4631      	mov	r1, r6
 8009834:	4628      	mov	r0, r5
 8009836:	47b8      	blx	r7
 8009838:	3001      	adds	r0, #1
 800983a:	f43f af54 	beq.w	80096e6 <_printf_float+0xb6>
 800983e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009842:	4543      	cmp	r3, r8
 8009844:	db02      	blt.n	800984c <_printf_float+0x21c>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	07d8      	lsls	r0, r3, #31
 800984a:	d50f      	bpl.n	800986c <_printf_float+0x23c>
 800984c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009850:	4631      	mov	r1, r6
 8009852:	4628      	mov	r0, r5
 8009854:	47b8      	blx	r7
 8009856:	3001      	adds	r0, #1
 8009858:	f43f af45 	beq.w	80096e6 <_printf_float+0xb6>
 800985c:	f04f 0900 	mov.w	r9, #0
 8009860:	f108 38ff 	add.w	r8, r8, #4294967295
 8009864:	f104 0a1a 	add.w	sl, r4, #26
 8009868:	45c8      	cmp	r8, r9
 800986a:	dc09      	bgt.n	8009880 <_printf_float+0x250>
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	079b      	lsls	r3, r3, #30
 8009870:	f100 8103 	bmi.w	8009a7a <_printf_float+0x44a>
 8009874:	68e0      	ldr	r0, [r4, #12]
 8009876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009878:	4298      	cmp	r0, r3
 800987a:	bfb8      	it	lt
 800987c:	4618      	movlt	r0, r3
 800987e:	e734      	b.n	80096ea <_printf_float+0xba>
 8009880:	2301      	movs	r3, #1
 8009882:	4652      	mov	r2, sl
 8009884:	4631      	mov	r1, r6
 8009886:	4628      	mov	r0, r5
 8009888:	47b8      	blx	r7
 800988a:	3001      	adds	r0, #1
 800988c:	f43f af2b 	beq.w	80096e6 <_printf_float+0xb6>
 8009890:	f109 0901 	add.w	r9, r9, #1
 8009894:	e7e8      	b.n	8009868 <_printf_float+0x238>
 8009896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009898:	2b00      	cmp	r3, #0
 800989a:	dc39      	bgt.n	8009910 <_printf_float+0x2e0>
 800989c:	4a1b      	ldr	r2, [pc, #108]	@ (800990c <_printf_float+0x2dc>)
 800989e:	2301      	movs	r3, #1
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	47b8      	blx	r7
 80098a6:	3001      	adds	r0, #1
 80098a8:	f43f af1d 	beq.w	80096e6 <_printf_float+0xb6>
 80098ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80098b0:	ea59 0303 	orrs.w	r3, r9, r3
 80098b4:	d102      	bne.n	80098bc <_printf_float+0x28c>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	07d9      	lsls	r1, r3, #31
 80098ba:	d5d7      	bpl.n	800986c <_printf_float+0x23c>
 80098bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098c0:	4631      	mov	r1, r6
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b8      	blx	r7
 80098c6:	3001      	adds	r0, #1
 80098c8:	f43f af0d 	beq.w	80096e6 <_printf_float+0xb6>
 80098cc:	f04f 0a00 	mov.w	sl, #0
 80098d0:	f104 0b1a 	add.w	fp, r4, #26
 80098d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d6:	425b      	negs	r3, r3
 80098d8:	4553      	cmp	r3, sl
 80098da:	dc01      	bgt.n	80098e0 <_printf_float+0x2b0>
 80098dc:	464b      	mov	r3, r9
 80098de:	e793      	b.n	8009808 <_printf_float+0x1d8>
 80098e0:	2301      	movs	r3, #1
 80098e2:	465a      	mov	r2, fp
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	f43f aefb 	beq.w	80096e6 <_printf_float+0xb6>
 80098f0:	f10a 0a01 	add.w	sl, sl, #1
 80098f4:	e7ee      	b.n	80098d4 <_printf_float+0x2a4>
 80098f6:	bf00      	nop
 80098f8:	7fefffff 	.word	0x7fefffff
 80098fc:	0800dfc4 	.word	0x0800dfc4
 8009900:	0800dfc0 	.word	0x0800dfc0
 8009904:	0800dfcc 	.word	0x0800dfcc
 8009908:	0800dfc8 	.word	0x0800dfc8
 800990c:	0800dfd0 	.word	0x0800dfd0
 8009910:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009912:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009916:	4553      	cmp	r3, sl
 8009918:	bfa8      	it	ge
 800991a:	4653      	movge	r3, sl
 800991c:	2b00      	cmp	r3, #0
 800991e:	4699      	mov	r9, r3
 8009920:	dc36      	bgt.n	8009990 <_printf_float+0x360>
 8009922:	f04f 0b00 	mov.w	fp, #0
 8009926:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800992a:	f104 021a 	add.w	r2, r4, #26
 800992e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009930:	9306      	str	r3, [sp, #24]
 8009932:	eba3 0309 	sub.w	r3, r3, r9
 8009936:	455b      	cmp	r3, fp
 8009938:	dc31      	bgt.n	800999e <_printf_float+0x36e>
 800993a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800993c:	459a      	cmp	sl, r3
 800993e:	dc3a      	bgt.n	80099b6 <_printf_float+0x386>
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	07da      	lsls	r2, r3, #31
 8009944:	d437      	bmi.n	80099b6 <_printf_float+0x386>
 8009946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009948:	ebaa 0903 	sub.w	r9, sl, r3
 800994c:	9b06      	ldr	r3, [sp, #24]
 800994e:	ebaa 0303 	sub.w	r3, sl, r3
 8009952:	4599      	cmp	r9, r3
 8009954:	bfa8      	it	ge
 8009956:	4699      	movge	r9, r3
 8009958:	f1b9 0f00 	cmp.w	r9, #0
 800995c:	dc33      	bgt.n	80099c6 <_printf_float+0x396>
 800995e:	f04f 0800 	mov.w	r8, #0
 8009962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009966:	f104 0b1a 	add.w	fp, r4, #26
 800996a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800996c:	ebaa 0303 	sub.w	r3, sl, r3
 8009970:	eba3 0309 	sub.w	r3, r3, r9
 8009974:	4543      	cmp	r3, r8
 8009976:	f77f af79 	ble.w	800986c <_printf_float+0x23c>
 800997a:	2301      	movs	r3, #1
 800997c:	465a      	mov	r2, fp
 800997e:	4631      	mov	r1, r6
 8009980:	4628      	mov	r0, r5
 8009982:	47b8      	blx	r7
 8009984:	3001      	adds	r0, #1
 8009986:	f43f aeae 	beq.w	80096e6 <_printf_float+0xb6>
 800998a:	f108 0801 	add.w	r8, r8, #1
 800998e:	e7ec      	b.n	800996a <_printf_float+0x33a>
 8009990:	4642      	mov	r2, r8
 8009992:	4631      	mov	r1, r6
 8009994:	4628      	mov	r0, r5
 8009996:	47b8      	blx	r7
 8009998:	3001      	adds	r0, #1
 800999a:	d1c2      	bne.n	8009922 <_printf_float+0x2f2>
 800999c:	e6a3      	b.n	80096e6 <_printf_float+0xb6>
 800999e:	2301      	movs	r3, #1
 80099a0:	4631      	mov	r1, r6
 80099a2:	4628      	mov	r0, r5
 80099a4:	9206      	str	r2, [sp, #24]
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	f43f ae9c 	beq.w	80096e6 <_printf_float+0xb6>
 80099ae:	9a06      	ldr	r2, [sp, #24]
 80099b0:	f10b 0b01 	add.w	fp, fp, #1
 80099b4:	e7bb      	b.n	800992e <_printf_float+0x2fe>
 80099b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099ba:	4631      	mov	r1, r6
 80099bc:	4628      	mov	r0, r5
 80099be:	47b8      	blx	r7
 80099c0:	3001      	adds	r0, #1
 80099c2:	d1c0      	bne.n	8009946 <_printf_float+0x316>
 80099c4:	e68f      	b.n	80096e6 <_printf_float+0xb6>
 80099c6:	9a06      	ldr	r2, [sp, #24]
 80099c8:	464b      	mov	r3, r9
 80099ca:	4442      	add	r2, r8
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	d1c3      	bne.n	800995e <_printf_float+0x32e>
 80099d6:	e686      	b.n	80096e6 <_printf_float+0xb6>
 80099d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099dc:	f1ba 0f01 	cmp.w	sl, #1
 80099e0:	dc01      	bgt.n	80099e6 <_printf_float+0x3b6>
 80099e2:	07db      	lsls	r3, r3, #31
 80099e4:	d536      	bpl.n	8009a54 <_printf_float+0x424>
 80099e6:	2301      	movs	r3, #1
 80099e8:	4642      	mov	r2, r8
 80099ea:	4631      	mov	r1, r6
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b8      	blx	r7
 80099f0:	3001      	adds	r0, #1
 80099f2:	f43f ae78 	beq.w	80096e6 <_printf_float+0xb6>
 80099f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099fa:	4631      	mov	r1, r6
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	f43f ae70 	beq.w	80096e6 <_printf_float+0xb6>
 8009a06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a12:	f7f7 f861 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a16:	b9c0      	cbnz	r0, 8009a4a <_printf_float+0x41a>
 8009a18:	4653      	mov	r3, sl
 8009a1a:	f108 0201 	add.w	r2, r8, #1
 8009a1e:	4631      	mov	r1, r6
 8009a20:	4628      	mov	r0, r5
 8009a22:	47b8      	blx	r7
 8009a24:	3001      	adds	r0, #1
 8009a26:	d10c      	bne.n	8009a42 <_printf_float+0x412>
 8009a28:	e65d      	b.n	80096e6 <_printf_float+0xb6>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	465a      	mov	r2, fp
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4628      	mov	r0, r5
 8009a32:	47b8      	blx	r7
 8009a34:	3001      	adds	r0, #1
 8009a36:	f43f ae56 	beq.w	80096e6 <_printf_float+0xb6>
 8009a3a:	f108 0801 	add.w	r8, r8, #1
 8009a3e:	45d0      	cmp	r8, sl
 8009a40:	dbf3      	blt.n	8009a2a <_printf_float+0x3fa>
 8009a42:	464b      	mov	r3, r9
 8009a44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009a48:	e6df      	b.n	800980a <_printf_float+0x1da>
 8009a4a:	f04f 0800 	mov.w	r8, #0
 8009a4e:	f104 0b1a 	add.w	fp, r4, #26
 8009a52:	e7f4      	b.n	8009a3e <_printf_float+0x40e>
 8009a54:	2301      	movs	r3, #1
 8009a56:	4642      	mov	r2, r8
 8009a58:	e7e1      	b.n	8009a1e <_printf_float+0x3ee>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	464a      	mov	r2, r9
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b8      	blx	r7
 8009a64:	3001      	adds	r0, #1
 8009a66:	f43f ae3e 	beq.w	80096e6 <_printf_float+0xb6>
 8009a6a:	f108 0801 	add.w	r8, r8, #1
 8009a6e:	68e3      	ldr	r3, [r4, #12]
 8009a70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a72:	1a5b      	subs	r3, r3, r1
 8009a74:	4543      	cmp	r3, r8
 8009a76:	dcf0      	bgt.n	8009a5a <_printf_float+0x42a>
 8009a78:	e6fc      	b.n	8009874 <_printf_float+0x244>
 8009a7a:	f04f 0800 	mov.w	r8, #0
 8009a7e:	f104 0919 	add.w	r9, r4, #25
 8009a82:	e7f4      	b.n	8009a6e <_printf_float+0x43e>

08009a84 <_printf_common>:
 8009a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a88:	4616      	mov	r6, r2
 8009a8a:	4698      	mov	r8, r3
 8009a8c:	688a      	ldr	r2, [r1, #8]
 8009a8e:	690b      	ldr	r3, [r1, #16]
 8009a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a94:	4293      	cmp	r3, r2
 8009a96:	bfb8      	it	lt
 8009a98:	4613      	movlt	r3, r2
 8009a9a:	6033      	str	r3, [r6, #0]
 8009a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	b10a      	cbz	r2, 8009aaa <_printf_common+0x26>
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	6033      	str	r3, [r6, #0]
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	0699      	lsls	r1, r3, #26
 8009aae:	bf42      	ittt	mi
 8009ab0:	6833      	ldrmi	r3, [r6, #0]
 8009ab2:	3302      	addmi	r3, #2
 8009ab4:	6033      	strmi	r3, [r6, #0]
 8009ab6:	6825      	ldr	r5, [r4, #0]
 8009ab8:	f015 0506 	ands.w	r5, r5, #6
 8009abc:	d106      	bne.n	8009acc <_printf_common+0x48>
 8009abe:	f104 0a19 	add.w	sl, r4, #25
 8009ac2:	68e3      	ldr	r3, [r4, #12]
 8009ac4:	6832      	ldr	r2, [r6, #0]
 8009ac6:	1a9b      	subs	r3, r3, r2
 8009ac8:	42ab      	cmp	r3, r5
 8009aca:	dc26      	bgt.n	8009b1a <_printf_common+0x96>
 8009acc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ad0:	6822      	ldr	r2, [r4, #0]
 8009ad2:	3b00      	subs	r3, #0
 8009ad4:	bf18      	it	ne
 8009ad6:	2301      	movne	r3, #1
 8009ad8:	0692      	lsls	r2, r2, #26
 8009ada:	d42b      	bmi.n	8009b34 <_printf_common+0xb0>
 8009adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	47c8      	blx	r9
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	d01e      	beq.n	8009b28 <_printf_common+0xa4>
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	6922      	ldr	r2, [r4, #16]
 8009aee:	f003 0306 	and.w	r3, r3, #6
 8009af2:	2b04      	cmp	r3, #4
 8009af4:	bf02      	ittt	eq
 8009af6:	68e5      	ldreq	r5, [r4, #12]
 8009af8:	6833      	ldreq	r3, [r6, #0]
 8009afa:	1aed      	subeq	r5, r5, r3
 8009afc:	68a3      	ldr	r3, [r4, #8]
 8009afe:	bf0c      	ite	eq
 8009b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b04:	2500      	movne	r5, #0
 8009b06:	4293      	cmp	r3, r2
 8009b08:	bfc4      	itt	gt
 8009b0a:	1a9b      	subgt	r3, r3, r2
 8009b0c:	18ed      	addgt	r5, r5, r3
 8009b0e:	2600      	movs	r6, #0
 8009b10:	341a      	adds	r4, #26
 8009b12:	42b5      	cmp	r5, r6
 8009b14:	d11a      	bne.n	8009b4c <_printf_common+0xc8>
 8009b16:	2000      	movs	r0, #0
 8009b18:	e008      	b.n	8009b2c <_printf_common+0xa8>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	4652      	mov	r2, sl
 8009b1e:	4641      	mov	r1, r8
 8009b20:	4638      	mov	r0, r7
 8009b22:	47c8      	blx	r9
 8009b24:	3001      	adds	r0, #1
 8009b26:	d103      	bne.n	8009b30 <_printf_common+0xac>
 8009b28:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b30:	3501      	adds	r5, #1
 8009b32:	e7c6      	b.n	8009ac2 <_printf_common+0x3e>
 8009b34:	18e1      	adds	r1, r4, r3
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	2030      	movs	r0, #48	@ 0x30
 8009b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b3e:	4422      	add	r2, r4
 8009b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b48:	3302      	adds	r3, #2
 8009b4a:	e7c7      	b.n	8009adc <_printf_common+0x58>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	4622      	mov	r2, r4
 8009b50:	4641      	mov	r1, r8
 8009b52:	4638      	mov	r0, r7
 8009b54:	47c8      	blx	r9
 8009b56:	3001      	adds	r0, #1
 8009b58:	d0e6      	beq.n	8009b28 <_printf_common+0xa4>
 8009b5a:	3601      	adds	r6, #1
 8009b5c:	e7d9      	b.n	8009b12 <_printf_common+0x8e>
	...

08009b60 <_printf_i>:
 8009b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	7e0f      	ldrb	r7, [r1, #24]
 8009b66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b68:	2f78      	cmp	r7, #120	@ 0x78
 8009b6a:	4691      	mov	r9, r2
 8009b6c:	4680      	mov	r8, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	469a      	mov	sl, r3
 8009b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b76:	d807      	bhi.n	8009b88 <_printf_i+0x28>
 8009b78:	2f62      	cmp	r7, #98	@ 0x62
 8009b7a:	d80a      	bhi.n	8009b92 <_printf_i+0x32>
 8009b7c:	2f00      	cmp	r7, #0
 8009b7e:	f000 80d1 	beq.w	8009d24 <_printf_i+0x1c4>
 8009b82:	2f58      	cmp	r7, #88	@ 0x58
 8009b84:	f000 80b8 	beq.w	8009cf8 <_printf_i+0x198>
 8009b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b90:	e03a      	b.n	8009c08 <_printf_i+0xa8>
 8009b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b96:	2b15      	cmp	r3, #21
 8009b98:	d8f6      	bhi.n	8009b88 <_printf_i+0x28>
 8009b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8009ba0 <_printf_i+0x40>)
 8009b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ba0:	08009bf9 	.word	0x08009bf9
 8009ba4:	08009c0d 	.word	0x08009c0d
 8009ba8:	08009b89 	.word	0x08009b89
 8009bac:	08009b89 	.word	0x08009b89
 8009bb0:	08009b89 	.word	0x08009b89
 8009bb4:	08009b89 	.word	0x08009b89
 8009bb8:	08009c0d 	.word	0x08009c0d
 8009bbc:	08009b89 	.word	0x08009b89
 8009bc0:	08009b89 	.word	0x08009b89
 8009bc4:	08009b89 	.word	0x08009b89
 8009bc8:	08009b89 	.word	0x08009b89
 8009bcc:	08009d0b 	.word	0x08009d0b
 8009bd0:	08009c37 	.word	0x08009c37
 8009bd4:	08009cc5 	.word	0x08009cc5
 8009bd8:	08009b89 	.word	0x08009b89
 8009bdc:	08009b89 	.word	0x08009b89
 8009be0:	08009d2d 	.word	0x08009d2d
 8009be4:	08009b89 	.word	0x08009b89
 8009be8:	08009c37 	.word	0x08009c37
 8009bec:	08009b89 	.word	0x08009b89
 8009bf0:	08009b89 	.word	0x08009b89
 8009bf4:	08009ccd 	.word	0x08009ccd
 8009bf8:	6833      	ldr	r3, [r6, #0]
 8009bfa:	1d1a      	adds	r2, r3, #4
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6032      	str	r2, [r6, #0]
 8009c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e09c      	b.n	8009d46 <_printf_i+0x1e6>
 8009c0c:	6833      	ldr	r3, [r6, #0]
 8009c0e:	6820      	ldr	r0, [r4, #0]
 8009c10:	1d19      	adds	r1, r3, #4
 8009c12:	6031      	str	r1, [r6, #0]
 8009c14:	0606      	lsls	r6, r0, #24
 8009c16:	d501      	bpl.n	8009c1c <_printf_i+0xbc>
 8009c18:	681d      	ldr	r5, [r3, #0]
 8009c1a:	e003      	b.n	8009c24 <_printf_i+0xc4>
 8009c1c:	0645      	lsls	r5, r0, #25
 8009c1e:	d5fb      	bpl.n	8009c18 <_printf_i+0xb8>
 8009c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c24:	2d00      	cmp	r5, #0
 8009c26:	da03      	bge.n	8009c30 <_printf_i+0xd0>
 8009c28:	232d      	movs	r3, #45	@ 0x2d
 8009c2a:	426d      	negs	r5, r5
 8009c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c30:	4858      	ldr	r0, [pc, #352]	@ (8009d94 <_printf_i+0x234>)
 8009c32:	230a      	movs	r3, #10
 8009c34:	e011      	b.n	8009c5a <_printf_i+0xfa>
 8009c36:	6821      	ldr	r1, [r4, #0]
 8009c38:	6833      	ldr	r3, [r6, #0]
 8009c3a:	0608      	lsls	r0, r1, #24
 8009c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c40:	d402      	bmi.n	8009c48 <_printf_i+0xe8>
 8009c42:	0649      	lsls	r1, r1, #25
 8009c44:	bf48      	it	mi
 8009c46:	b2ad      	uxthmi	r5, r5
 8009c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c4a:	4852      	ldr	r0, [pc, #328]	@ (8009d94 <_printf_i+0x234>)
 8009c4c:	6033      	str	r3, [r6, #0]
 8009c4e:	bf14      	ite	ne
 8009c50:	230a      	movne	r3, #10
 8009c52:	2308      	moveq	r3, #8
 8009c54:	2100      	movs	r1, #0
 8009c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c5a:	6866      	ldr	r6, [r4, #4]
 8009c5c:	60a6      	str	r6, [r4, #8]
 8009c5e:	2e00      	cmp	r6, #0
 8009c60:	db05      	blt.n	8009c6e <_printf_i+0x10e>
 8009c62:	6821      	ldr	r1, [r4, #0]
 8009c64:	432e      	orrs	r6, r5
 8009c66:	f021 0104 	bic.w	r1, r1, #4
 8009c6a:	6021      	str	r1, [r4, #0]
 8009c6c:	d04b      	beq.n	8009d06 <_printf_i+0x1a6>
 8009c6e:	4616      	mov	r6, r2
 8009c70:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c74:	fb03 5711 	mls	r7, r3, r1, r5
 8009c78:	5dc7      	ldrb	r7, [r0, r7]
 8009c7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c7e:	462f      	mov	r7, r5
 8009c80:	42bb      	cmp	r3, r7
 8009c82:	460d      	mov	r5, r1
 8009c84:	d9f4      	bls.n	8009c70 <_printf_i+0x110>
 8009c86:	2b08      	cmp	r3, #8
 8009c88:	d10b      	bne.n	8009ca2 <_printf_i+0x142>
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	07df      	lsls	r7, r3, #31
 8009c8e:	d508      	bpl.n	8009ca2 <_printf_i+0x142>
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	6861      	ldr	r1, [r4, #4]
 8009c94:	4299      	cmp	r1, r3
 8009c96:	bfde      	ittt	le
 8009c98:	2330      	movle	r3, #48	@ 0x30
 8009c9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ca2:	1b92      	subs	r2, r2, r6
 8009ca4:	6122      	str	r2, [r4, #16]
 8009ca6:	f8cd a000 	str.w	sl, [sp]
 8009caa:	464b      	mov	r3, r9
 8009cac:	aa03      	add	r2, sp, #12
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	f7ff fee7 	bl	8009a84 <_printf_common>
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	d14a      	bne.n	8009d50 <_printf_i+0x1f0>
 8009cba:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbe:	b004      	add	sp, #16
 8009cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	f043 0320 	orr.w	r3, r3, #32
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	4832      	ldr	r0, [pc, #200]	@ (8009d98 <_printf_i+0x238>)
 8009cce:	2778      	movs	r7, #120	@ 0x78
 8009cd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	6831      	ldr	r1, [r6, #0]
 8009cd8:	061f      	lsls	r7, r3, #24
 8009cda:	f851 5b04 	ldr.w	r5, [r1], #4
 8009cde:	d402      	bmi.n	8009ce6 <_printf_i+0x186>
 8009ce0:	065f      	lsls	r7, r3, #25
 8009ce2:	bf48      	it	mi
 8009ce4:	b2ad      	uxthmi	r5, r5
 8009ce6:	6031      	str	r1, [r6, #0]
 8009ce8:	07d9      	lsls	r1, r3, #31
 8009cea:	bf44      	itt	mi
 8009cec:	f043 0320 	orrmi.w	r3, r3, #32
 8009cf0:	6023      	strmi	r3, [r4, #0]
 8009cf2:	b11d      	cbz	r5, 8009cfc <_printf_i+0x19c>
 8009cf4:	2310      	movs	r3, #16
 8009cf6:	e7ad      	b.n	8009c54 <_printf_i+0xf4>
 8009cf8:	4826      	ldr	r0, [pc, #152]	@ (8009d94 <_printf_i+0x234>)
 8009cfa:	e7e9      	b.n	8009cd0 <_printf_i+0x170>
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	f023 0320 	bic.w	r3, r3, #32
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	e7f6      	b.n	8009cf4 <_printf_i+0x194>
 8009d06:	4616      	mov	r6, r2
 8009d08:	e7bd      	b.n	8009c86 <_printf_i+0x126>
 8009d0a:	6833      	ldr	r3, [r6, #0]
 8009d0c:	6825      	ldr	r5, [r4, #0]
 8009d0e:	6961      	ldr	r1, [r4, #20]
 8009d10:	1d18      	adds	r0, r3, #4
 8009d12:	6030      	str	r0, [r6, #0]
 8009d14:	062e      	lsls	r6, r5, #24
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	d501      	bpl.n	8009d1e <_printf_i+0x1be>
 8009d1a:	6019      	str	r1, [r3, #0]
 8009d1c:	e002      	b.n	8009d24 <_printf_i+0x1c4>
 8009d1e:	0668      	lsls	r0, r5, #25
 8009d20:	d5fb      	bpl.n	8009d1a <_printf_i+0x1ba>
 8009d22:	8019      	strh	r1, [r3, #0]
 8009d24:	2300      	movs	r3, #0
 8009d26:	6123      	str	r3, [r4, #16]
 8009d28:	4616      	mov	r6, r2
 8009d2a:	e7bc      	b.n	8009ca6 <_printf_i+0x146>
 8009d2c:	6833      	ldr	r3, [r6, #0]
 8009d2e:	1d1a      	adds	r2, r3, #4
 8009d30:	6032      	str	r2, [r6, #0]
 8009d32:	681e      	ldr	r6, [r3, #0]
 8009d34:	6862      	ldr	r2, [r4, #4]
 8009d36:	2100      	movs	r1, #0
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7f6 fa51 	bl	80001e0 <memchr>
 8009d3e:	b108      	cbz	r0, 8009d44 <_printf_i+0x1e4>
 8009d40:	1b80      	subs	r0, r0, r6
 8009d42:	6060      	str	r0, [r4, #4]
 8009d44:	6863      	ldr	r3, [r4, #4]
 8009d46:	6123      	str	r3, [r4, #16]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d4e:	e7aa      	b.n	8009ca6 <_printf_i+0x146>
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	4632      	mov	r2, r6
 8009d54:	4649      	mov	r1, r9
 8009d56:	4640      	mov	r0, r8
 8009d58:	47d0      	blx	sl
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	d0ad      	beq.n	8009cba <_printf_i+0x15a>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	079b      	lsls	r3, r3, #30
 8009d62:	d413      	bmi.n	8009d8c <_printf_i+0x22c>
 8009d64:	68e0      	ldr	r0, [r4, #12]
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	4298      	cmp	r0, r3
 8009d6a:	bfb8      	it	lt
 8009d6c:	4618      	movlt	r0, r3
 8009d6e:	e7a6      	b.n	8009cbe <_printf_i+0x15e>
 8009d70:	2301      	movs	r3, #1
 8009d72:	4632      	mov	r2, r6
 8009d74:	4649      	mov	r1, r9
 8009d76:	4640      	mov	r0, r8
 8009d78:	47d0      	blx	sl
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	d09d      	beq.n	8009cba <_printf_i+0x15a>
 8009d7e:	3501      	adds	r5, #1
 8009d80:	68e3      	ldr	r3, [r4, #12]
 8009d82:	9903      	ldr	r1, [sp, #12]
 8009d84:	1a5b      	subs	r3, r3, r1
 8009d86:	42ab      	cmp	r3, r5
 8009d88:	dcf2      	bgt.n	8009d70 <_printf_i+0x210>
 8009d8a:	e7eb      	b.n	8009d64 <_printf_i+0x204>
 8009d8c:	2500      	movs	r5, #0
 8009d8e:	f104 0619 	add.w	r6, r4, #25
 8009d92:	e7f5      	b.n	8009d80 <_printf_i+0x220>
 8009d94:	0800dfd2 	.word	0x0800dfd2
 8009d98:	0800dfe3 	.word	0x0800dfe3

08009d9c <std>:
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	b510      	push	{r4, lr}
 8009da0:	4604      	mov	r4, r0
 8009da2:	e9c0 3300 	strd	r3, r3, [r0]
 8009da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009daa:	6083      	str	r3, [r0, #8]
 8009dac:	8181      	strh	r1, [r0, #12]
 8009dae:	6643      	str	r3, [r0, #100]	@ 0x64
 8009db0:	81c2      	strh	r2, [r0, #14]
 8009db2:	6183      	str	r3, [r0, #24]
 8009db4:	4619      	mov	r1, r3
 8009db6:	2208      	movs	r2, #8
 8009db8:	305c      	adds	r0, #92	@ 0x5c
 8009dba:	f000 f953 	bl	800a064 <memset>
 8009dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009df4 <std+0x58>)
 8009dc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8009dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009df8 <std+0x5c>)
 8009dc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009dfc <std+0x60>)
 8009dc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009dca:	4b0d      	ldr	r3, [pc, #52]	@ (8009e00 <std+0x64>)
 8009dcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8009dce:	4b0d      	ldr	r3, [pc, #52]	@ (8009e04 <std+0x68>)
 8009dd0:	6224      	str	r4, [r4, #32]
 8009dd2:	429c      	cmp	r4, r3
 8009dd4:	d006      	beq.n	8009de4 <std+0x48>
 8009dd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009dda:	4294      	cmp	r4, r2
 8009ddc:	d002      	beq.n	8009de4 <std+0x48>
 8009dde:	33d0      	adds	r3, #208	@ 0xd0
 8009de0:	429c      	cmp	r4, r3
 8009de2:	d105      	bne.n	8009df0 <std+0x54>
 8009de4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dec:	f000 b9c6 	b.w	800a17c <__retarget_lock_init_recursive>
 8009df0:	bd10      	pop	{r4, pc}
 8009df2:	bf00      	nop
 8009df4:	08009f65 	.word	0x08009f65
 8009df8:	08009f87 	.word	0x08009f87
 8009dfc:	08009fbf 	.word	0x08009fbf
 8009e00:	08009fe3 	.word	0x08009fe3
 8009e04:	20001dec 	.word	0x20001dec

08009e08 <stdio_exit_handler>:
 8009e08:	4a02      	ldr	r2, [pc, #8]	@ (8009e14 <stdio_exit_handler+0xc>)
 8009e0a:	4903      	ldr	r1, [pc, #12]	@ (8009e18 <stdio_exit_handler+0x10>)
 8009e0c:	4803      	ldr	r0, [pc, #12]	@ (8009e1c <stdio_exit_handler+0x14>)
 8009e0e:	f000 b869 	b.w	8009ee4 <_fwalk_sglue>
 8009e12:	bf00      	nop
 8009e14:	20000034 	.word	0x20000034
 8009e18:	0800bae5 	.word	0x0800bae5
 8009e1c:	20000044 	.word	0x20000044

08009e20 <cleanup_stdio>:
 8009e20:	6841      	ldr	r1, [r0, #4]
 8009e22:	4b0c      	ldr	r3, [pc, #48]	@ (8009e54 <cleanup_stdio+0x34>)
 8009e24:	4299      	cmp	r1, r3
 8009e26:	b510      	push	{r4, lr}
 8009e28:	4604      	mov	r4, r0
 8009e2a:	d001      	beq.n	8009e30 <cleanup_stdio+0x10>
 8009e2c:	f001 fe5a 	bl	800bae4 <_fflush_r>
 8009e30:	68a1      	ldr	r1, [r4, #8]
 8009e32:	4b09      	ldr	r3, [pc, #36]	@ (8009e58 <cleanup_stdio+0x38>)
 8009e34:	4299      	cmp	r1, r3
 8009e36:	d002      	beq.n	8009e3e <cleanup_stdio+0x1e>
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f001 fe53 	bl	800bae4 <_fflush_r>
 8009e3e:	68e1      	ldr	r1, [r4, #12]
 8009e40:	4b06      	ldr	r3, [pc, #24]	@ (8009e5c <cleanup_stdio+0x3c>)
 8009e42:	4299      	cmp	r1, r3
 8009e44:	d004      	beq.n	8009e50 <cleanup_stdio+0x30>
 8009e46:	4620      	mov	r0, r4
 8009e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e4c:	f001 be4a 	b.w	800bae4 <_fflush_r>
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	bf00      	nop
 8009e54:	20001dec 	.word	0x20001dec
 8009e58:	20001e54 	.word	0x20001e54
 8009e5c:	20001ebc 	.word	0x20001ebc

08009e60 <global_stdio_init.part.0>:
 8009e60:	b510      	push	{r4, lr}
 8009e62:	4b0b      	ldr	r3, [pc, #44]	@ (8009e90 <global_stdio_init.part.0+0x30>)
 8009e64:	4c0b      	ldr	r4, [pc, #44]	@ (8009e94 <global_stdio_init.part.0+0x34>)
 8009e66:	4a0c      	ldr	r2, [pc, #48]	@ (8009e98 <global_stdio_init.part.0+0x38>)
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2104      	movs	r1, #4
 8009e70:	f7ff ff94 	bl	8009d9c <std>
 8009e74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e78:	2201      	movs	r2, #1
 8009e7a:	2109      	movs	r1, #9
 8009e7c:	f7ff ff8e 	bl	8009d9c <std>
 8009e80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e84:	2202      	movs	r2, #2
 8009e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e8a:	2112      	movs	r1, #18
 8009e8c:	f7ff bf86 	b.w	8009d9c <std>
 8009e90:	20001f24 	.word	0x20001f24
 8009e94:	20001dec 	.word	0x20001dec
 8009e98:	08009e09 	.word	0x08009e09

08009e9c <__sfp_lock_acquire>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	@ (8009ea4 <__sfp_lock_acquire+0x8>)
 8009e9e:	f000 b96e 	b.w	800a17e <__retarget_lock_acquire_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	20001f2d 	.word	0x20001f2d

08009ea8 <__sfp_lock_release>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	@ (8009eb0 <__sfp_lock_release+0x8>)
 8009eaa:	f000 b969 	b.w	800a180 <__retarget_lock_release_recursive>
 8009eae:	bf00      	nop
 8009eb0:	20001f2d 	.word	0x20001f2d

08009eb4 <__sinit>:
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	f7ff fff0 	bl	8009e9c <__sfp_lock_acquire>
 8009ebc:	6a23      	ldr	r3, [r4, #32]
 8009ebe:	b11b      	cbz	r3, 8009ec8 <__sinit+0x14>
 8009ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ec4:	f7ff bff0 	b.w	8009ea8 <__sfp_lock_release>
 8009ec8:	4b04      	ldr	r3, [pc, #16]	@ (8009edc <__sinit+0x28>)
 8009eca:	6223      	str	r3, [r4, #32]
 8009ecc:	4b04      	ldr	r3, [pc, #16]	@ (8009ee0 <__sinit+0x2c>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1f5      	bne.n	8009ec0 <__sinit+0xc>
 8009ed4:	f7ff ffc4 	bl	8009e60 <global_stdio_init.part.0>
 8009ed8:	e7f2      	b.n	8009ec0 <__sinit+0xc>
 8009eda:	bf00      	nop
 8009edc:	08009e21 	.word	0x08009e21
 8009ee0:	20001f24 	.word	0x20001f24

08009ee4 <_fwalk_sglue>:
 8009ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee8:	4607      	mov	r7, r0
 8009eea:	4688      	mov	r8, r1
 8009eec:	4614      	mov	r4, r2
 8009eee:	2600      	movs	r6, #0
 8009ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ef8:	d505      	bpl.n	8009f06 <_fwalk_sglue+0x22>
 8009efa:	6824      	ldr	r4, [r4, #0]
 8009efc:	2c00      	cmp	r4, #0
 8009efe:	d1f7      	bne.n	8009ef0 <_fwalk_sglue+0xc>
 8009f00:	4630      	mov	r0, r6
 8009f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f06:	89ab      	ldrh	r3, [r5, #12]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d907      	bls.n	8009f1c <_fwalk_sglue+0x38>
 8009f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f10:	3301      	adds	r3, #1
 8009f12:	d003      	beq.n	8009f1c <_fwalk_sglue+0x38>
 8009f14:	4629      	mov	r1, r5
 8009f16:	4638      	mov	r0, r7
 8009f18:	47c0      	blx	r8
 8009f1a:	4306      	orrs	r6, r0
 8009f1c:	3568      	adds	r5, #104	@ 0x68
 8009f1e:	e7e9      	b.n	8009ef4 <_fwalk_sglue+0x10>

08009f20 <siprintf>:
 8009f20:	b40e      	push	{r1, r2, r3}
 8009f22:	b510      	push	{r4, lr}
 8009f24:	b09d      	sub	sp, #116	@ 0x74
 8009f26:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009f28:	9002      	str	r0, [sp, #8]
 8009f2a:	9006      	str	r0, [sp, #24]
 8009f2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f30:	480a      	ldr	r0, [pc, #40]	@ (8009f5c <siprintf+0x3c>)
 8009f32:	9107      	str	r1, [sp, #28]
 8009f34:	9104      	str	r1, [sp, #16]
 8009f36:	490a      	ldr	r1, [pc, #40]	@ (8009f60 <siprintf+0x40>)
 8009f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f3c:	9105      	str	r1, [sp, #20]
 8009f3e:	2400      	movs	r4, #0
 8009f40:	a902      	add	r1, sp, #8
 8009f42:	6800      	ldr	r0, [r0, #0]
 8009f44:	9301      	str	r3, [sp, #4]
 8009f46:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009f48:	f001 fc4c 	bl	800b7e4 <_svfiprintf_r>
 8009f4c:	9b02      	ldr	r3, [sp, #8]
 8009f4e:	701c      	strb	r4, [r3, #0]
 8009f50:	b01d      	add	sp, #116	@ 0x74
 8009f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f56:	b003      	add	sp, #12
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000040 	.word	0x20000040
 8009f60:	ffff0208 	.word	0xffff0208

08009f64 <__sread>:
 8009f64:	b510      	push	{r4, lr}
 8009f66:	460c      	mov	r4, r1
 8009f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6c:	f000 f8b8 	bl	800a0e0 <_read_r>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	bfab      	itete	ge
 8009f74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f76:	89a3      	ldrhlt	r3, [r4, #12]
 8009f78:	181b      	addge	r3, r3, r0
 8009f7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f7e:	bfac      	ite	ge
 8009f80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f82:	81a3      	strhlt	r3, [r4, #12]
 8009f84:	bd10      	pop	{r4, pc}

08009f86 <__swrite>:
 8009f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8a:	461f      	mov	r7, r3
 8009f8c:	898b      	ldrh	r3, [r1, #12]
 8009f8e:	05db      	lsls	r3, r3, #23
 8009f90:	4605      	mov	r5, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	4616      	mov	r6, r2
 8009f96:	d505      	bpl.n	8009fa4 <__swrite+0x1e>
 8009f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f000 f88c 	bl	800a0bc <_lseek_r>
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009faa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fae:	81a3      	strh	r3, [r4, #12]
 8009fb0:	4632      	mov	r2, r6
 8009fb2:	463b      	mov	r3, r7
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fba:	f000 b8a3 	b.w	800a104 <_write_r>

08009fbe <__sseek>:
 8009fbe:	b510      	push	{r4, lr}
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc6:	f000 f879 	bl	800a0bc <_lseek_r>
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	bf15      	itete	ne
 8009fd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009fd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009fd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009fda:	81a3      	strheq	r3, [r4, #12]
 8009fdc:	bf18      	it	ne
 8009fde:	81a3      	strhne	r3, [r4, #12]
 8009fe0:	bd10      	pop	{r4, pc}

08009fe2 <__sclose>:
 8009fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe6:	f000 b859 	b.w	800a09c <_close_r>

08009fea <_vsniprintf_r>:
 8009fea:	b530      	push	{r4, r5, lr}
 8009fec:	4614      	mov	r4, r2
 8009fee:	2c00      	cmp	r4, #0
 8009ff0:	b09b      	sub	sp, #108	@ 0x6c
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	da05      	bge.n	800a004 <_vsniprintf_r+0x1a>
 8009ff8:	238b      	movs	r3, #139	@ 0x8b
 8009ffa:	6003      	str	r3, [r0, #0]
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	b01b      	add	sp, #108	@ 0x6c
 800a002:	bd30      	pop	{r4, r5, pc}
 800a004:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a008:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a00c:	f04f 0300 	mov.w	r3, #0
 800a010:	9319      	str	r3, [sp, #100]	@ 0x64
 800a012:	bf14      	ite	ne
 800a014:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a018:	4623      	moveq	r3, r4
 800a01a:	9302      	str	r3, [sp, #8]
 800a01c:	9305      	str	r3, [sp, #20]
 800a01e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a022:	9100      	str	r1, [sp, #0]
 800a024:	9104      	str	r1, [sp, #16]
 800a026:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a02a:	4669      	mov	r1, sp
 800a02c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a02e:	f001 fbd9 	bl	800b7e4 <_svfiprintf_r>
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	bfbc      	itt	lt
 800a036:	238b      	movlt	r3, #139	@ 0x8b
 800a038:	602b      	strlt	r3, [r5, #0]
 800a03a:	2c00      	cmp	r4, #0
 800a03c:	d0e0      	beq.n	800a000 <_vsniprintf_r+0x16>
 800a03e:	9b00      	ldr	r3, [sp, #0]
 800a040:	2200      	movs	r2, #0
 800a042:	701a      	strb	r2, [r3, #0]
 800a044:	e7dc      	b.n	800a000 <_vsniprintf_r+0x16>
	...

0800a048 <vsniprintf>:
 800a048:	b507      	push	{r0, r1, r2, lr}
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	4613      	mov	r3, r2
 800a04e:	460a      	mov	r2, r1
 800a050:	4601      	mov	r1, r0
 800a052:	4803      	ldr	r0, [pc, #12]	@ (800a060 <vsniprintf+0x18>)
 800a054:	6800      	ldr	r0, [r0, #0]
 800a056:	f7ff ffc8 	bl	8009fea <_vsniprintf_r>
 800a05a:	b003      	add	sp, #12
 800a05c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a060:	20000040 	.word	0x20000040

0800a064 <memset>:
 800a064:	4402      	add	r2, r0
 800a066:	4603      	mov	r3, r0
 800a068:	4293      	cmp	r3, r2
 800a06a:	d100      	bne.n	800a06e <memset+0xa>
 800a06c:	4770      	bx	lr
 800a06e:	f803 1b01 	strb.w	r1, [r3], #1
 800a072:	e7f9      	b.n	800a068 <memset+0x4>

0800a074 <strcat>:
 800a074:	b510      	push	{r4, lr}
 800a076:	4602      	mov	r2, r0
 800a078:	7814      	ldrb	r4, [r2, #0]
 800a07a:	4613      	mov	r3, r2
 800a07c:	3201      	adds	r2, #1
 800a07e:	2c00      	cmp	r4, #0
 800a080:	d1fa      	bne.n	800a078 <strcat+0x4>
 800a082:	3b01      	subs	r3, #1
 800a084:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a088:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a08c:	2a00      	cmp	r2, #0
 800a08e:	d1f9      	bne.n	800a084 <strcat+0x10>
 800a090:	bd10      	pop	{r4, pc}
	...

0800a094 <_localeconv_r>:
 800a094:	4800      	ldr	r0, [pc, #0]	@ (800a098 <_localeconv_r+0x4>)
 800a096:	4770      	bx	lr
 800a098:	20000180 	.word	0x20000180

0800a09c <_close_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d06      	ldr	r5, [pc, #24]	@ (800a0b8 <_close_r+0x1c>)
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	4608      	mov	r0, r1
 800a0a6:	602b      	str	r3, [r5, #0]
 800a0a8:	f7fa fd3c 	bl	8004b24 <_close>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d102      	bne.n	800a0b6 <_close_r+0x1a>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	b103      	cbz	r3, 800a0b6 <_close_r+0x1a>
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	20001f28 	.word	0x20001f28

0800a0bc <_lseek_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d07      	ldr	r5, [pc, #28]	@ (800a0dc <_lseek_r+0x20>)
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	4608      	mov	r0, r1
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	602a      	str	r2, [r5, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f7fa fd51 	bl	8004b72 <_lseek>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_lseek_r+0x1e>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_lseek_r+0x1e>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	20001f28 	.word	0x20001f28

0800a0e0 <_read_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d07      	ldr	r5, [pc, #28]	@ (800a100 <_read_r+0x20>)
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	4608      	mov	r0, r1
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	602a      	str	r2, [r5, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	f7fa fcdf 	bl	8004ab2 <_read>
 800a0f4:	1c43      	adds	r3, r0, #1
 800a0f6:	d102      	bne.n	800a0fe <_read_r+0x1e>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	b103      	cbz	r3, 800a0fe <_read_r+0x1e>
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	20001f28 	.word	0x20001f28

0800a104 <_write_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d07      	ldr	r5, [pc, #28]	@ (800a124 <_write_r+0x20>)
 800a108:	4604      	mov	r4, r0
 800a10a:	4608      	mov	r0, r1
 800a10c:	4611      	mov	r1, r2
 800a10e:	2200      	movs	r2, #0
 800a110:	602a      	str	r2, [r5, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	f7fa fcea 	bl	8004aec <_write>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_write_r+0x1e>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_write_r+0x1e>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	20001f28 	.word	0x20001f28

0800a128 <__errno>:
 800a128:	4b01      	ldr	r3, [pc, #4]	@ (800a130 <__errno+0x8>)
 800a12a:	6818      	ldr	r0, [r3, #0]
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	20000040 	.word	0x20000040

0800a134 <__libc_init_array>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	4d0d      	ldr	r5, [pc, #52]	@ (800a16c <__libc_init_array+0x38>)
 800a138:	4c0d      	ldr	r4, [pc, #52]	@ (800a170 <__libc_init_array+0x3c>)
 800a13a:	1b64      	subs	r4, r4, r5
 800a13c:	10a4      	asrs	r4, r4, #2
 800a13e:	2600      	movs	r6, #0
 800a140:	42a6      	cmp	r6, r4
 800a142:	d109      	bne.n	800a158 <__libc_init_array+0x24>
 800a144:	4d0b      	ldr	r5, [pc, #44]	@ (800a174 <__libc_init_array+0x40>)
 800a146:	4c0c      	ldr	r4, [pc, #48]	@ (800a178 <__libc_init_array+0x44>)
 800a148:	f002 f8ea 	bl	800c320 <_init>
 800a14c:	1b64      	subs	r4, r4, r5
 800a14e:	10a4      	asrs	r4, r4, #2
 800a150:	2600      	movs	r6, #0
 800a152:	42a6      	cmp	r6, r4
 800a154:	d105      	bne.n	800a162 <__libc_init_array+0x2e>
 800a156:	bd70      	pop	{r4, r5, r6, pc}
 800a158:	f855 3b04 	ldr.w	r3, [r5], #4
 800a15c:	4798      	blx	r3
 800a15e:	3601      	adds	r6, #1
 800a160:	e7ee      	b.n	800a140 <__libc_init_array+0xc>
 800a162:	f855 3b04 	ldr.w	r3, [r5], #4
 800a166:	4798      	blx	r3
 800a168:	3601      	adds	r6, #1
 800a16a:	e7f2      	b.n	800a152 <__libc_init_array+0x1e>
 800a16c:	0800e33c 	.word	0x0800e33c
 800a170:	0800e33c 	.word	0x0800e33c
 800a174:	0800e33c 	.word	0x0800e33c
 800a178:	0800e340 	.word	0x0800e340

0800a17c <__retarget_lock_init_recursive>:
 800a17c:	4770      	bx	lr

0800a17e <__retarget_lock_acquire_recursive>:
 800a17e:	4770      	bx	lr

0800a180 <__retarget_lock_release_recursive>:
 800a180:	4770      	bx	lr

0800a182 <quorem>:
 800a182:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a186:	6903      	ldr	r3, [r0, #16]
 800a188:	690c      	ldr	r4, [r1, #16]
 800a18a:	42a3      	cmp	r3, r4
 800a18c:	4607      	mov	r7, r0
 800a18e:	db7e      	blt.n	800a28e <quorem+0x10c>
 800a190:	3c01      	subs	r4, #1
 800a192:	f101 0814 	add.w	r8, r1, #20
 800a196:	00a3      	lsls	r3, r4, #2
 800a198:	f100 0514 	add.w	r5, r0, #20
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1a2:	9301      	str	r3, [sp, #4]
 800a1a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1b8:	d32e      	bcc.n	800a218 <quorem+0x96>
 800a1ba:	f04f 0a00 	mov.w	sl, #0
 800a1be:	46c4      	mov	ip, r8
 800a1c0:	46ae      	mov	lr, r5
 800a1c2:	46d3      	mov	fp, sl
 800a1c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1c8:	b298      	uxth	r0, r3
 800a1ca:	fb06 a000 	mla	r0, r6, r0, sl
 800a1ce:	0c02      	lsrs	r2, r0, #16
 800a1d0:	0c1b      	lsrs	r3, r3, #16
 800a1d2:	fb06 2303 	mla	r3, r6, r3, r2
 800a1d6:	f8de 2000 	ldr.w	r2, [lr]
 800a1da:	b280      	uxth	r0, r0
 800a1dc:	b292      	uxth	r2, r2
 800a1de:	1a12      	subs	r2, r2, r0
 800a1e0:	445a      	add	r2, fp
 800a1e2:	f8de 0000 	ldr.w	r0, [lr]
 800a1e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1f4:	b292      	uxth	r2, r2
 800a1f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1fa:	45e1      	cmp	r9, ip
 800a1fc:	f84e 2b04 	str.w	r2, [lr], #4
 800a200:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a204:	d2de      	bcs.n	800a1c4 <quorem+0x42>
 800a206:	9b00      	ldr	r3, [sp, #0]
 800a208:	58eb      	ldr	r3, [r5, r3]
 800a20a:	b92b      	cbnz	r3, 800a218 <quorem+0x96>
 800a20c:	9b01      	ldr	r3, [sp, #4]
 800a20e:	3b04      	subs	r3, #4
 800a210:	429d      	cmp	r5, r3
 800a212:	461a      	mov	r2, r3
 800a214:	d32f      	bcc.n	800a276 <quorem+0xf4>
 800a216:	613c      	str	r4, [r7, #16]
 800a218:	4638      	mov	r0, r7
 800a21a:	f001 f97f 	bl	800b51c <__mcmp>
 800a21e:	2800      	cmp	r0, #0
 800a220:	db25      	blt.n	800a26e <quorem+0xec>
 800a222:	4629      	mov	r1, r5
 800a224:	2000      	movs	r0, #0
 800a226:	f858 2b04 	ldr.w	r2, [r8], #4
 800a22a:	f8d1 c000 	ldr.w	ip, [r1]
 800a22e:	fa1f fe82 	uxth.w	lr, r2
 800a232:	fa1f f38c 	uxth.w	r3, ip
 800a236:	eba3 030e 	sub.w	r3, r3, lr
 800a23a:	4403      	add	r3, r0
 800a23c:	0c12      	lsrs	r2, r2, #16
 800a23e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a242:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a246:	b29b      	uxth	r3, r3
 800a248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a24c:	45c1      	cmp	r9, r8
 800a24e:	f841 3b04 	str.w	r3, [r1], #4
 800a252:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a256:	d2e6      	bcs.n	800a226 <quorem+0xa4>
 800a258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a25c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a260:	b922      	cbnz	r2, 800a26c <quorem+0xea>
 800a262:	3b04      	subs	r3, #4
 800a264:	429d      	cmp	r5, r3
 800a266:	461a      	mov	r2, r3
 800a268:	d30b      	bcc.n	800a282 <quorem+0x100>
 800a26a:	613c      	str	r4, [r7, #16]
 800a26c:	3601      	adds	r6, #1
 800a26e:	4630      	mov	r0, r6
 800a270:	b003      	add	sp, #12
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	3b04      	subs	r3, #4
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	d1cb      	bne.n	800a216 <quorem+0x94>
 800a27e:	3c01      	subs	r4, #1
 800a280:	e7c6      	b.n	800a210 <quorem+0x8e>
 800a282:	6812      	ldr	r2, [r2, #0]
 800a284:	3b04      	subs	r3, #4
 800a286:	2a00      	cmp	r2, #0
 800a288:	d1ef      	bne.n	800a26a <quorem+0xe8>
 800a28a:	3c01      	subs	r4, #1
 800a28c:	e7ea      	b.n	800a264 <quorem+0xe2>
 800a28e:	2000      	movs	r0, #0
 800a290:	e7ee      	b.n	800a270 <quorem+0xee>
 800a292:	0000      	movs	r0, r0
 800a294:	0000      	movs	r0, r0
	...

0800a298 <_dtoa_r>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	69c7      	ldr	r7, [r0, #28]
 800a29e:	b097      	sub	sp, #92	@ 0x5c
 800a2a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a2a4:	ec55 4b10 	vmov	r4, r5, d0
 800a2a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a2aa:	9107      	str	r1, [sp, #28]
 800a2ac:	4681      	mov	r9, r0
 800a2ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800a2b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a2b2:	b97f      	cbnz	r7, 800a2d4 <_dtoa_r+0x3c>
 800a2b4:	2010      	movs	r0, #16
 800a2b6:	f000 fe09 	bl	800aecc <malloc>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	f8c9 001c 	str.w	r0, [r9, #28]
 800a2c0:	b920      	cbnz	r0, 800a2cc <_dtoa_r+0x34>
 800a2c2:	4ba9      	ldr	r3, [pc, #676]	@ (800a568 <_dtoa_r+0x2d0>)
 800a2c4:	21ef      	movs	r1, #239	@ 0xef
 800a2c6:	48a9      	ldr	r0, [pc, #676]	@ (800a56c <_dtoa_r+0x2d4>)
 800a2c8:	f001 fc6c 	bl	800bba4 <__assert_func>
 800a2cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a2d0:	6007      	str	r7, [r0, #0]
 800a2d2:	60c7      	str	r7, [r0, #12]
 800a2d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2d8:	6819      	ldr	r1, [r3, #0]
 800a2da:	b159      	cbz	r1, 800a2f4 <_dtoa_r+0x5c>
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	604a      	str	r2, [r1, #4]
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	4093      	lsls	r3, r2
 800a2e4:	608b      	str	r3, [r1, #8]
 800a2e6:	4648      	mov	r0, r9
 800a2e8:	f000 fee6 	bl	800b0b8 <_Bfree>
 800a2ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	1e2b      	subs	r3, r5, #0
 800a2f6:	bfb9      	ittee	lt
 800a2f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2fc:	9305      	strlt	r3, [sp, #20]
 800a2fe:	2300      	movge	r3, #0
 800a300:	6033      	strge	r3, [r6, #0]
 800a302:	9f05      	ldr	r7, [sp, #20]
 800a304:	4b9a      	ldr	r3, [pc, #616]	@ (800a570 <_dtoa_r+0x2d8>)
 800a306:	bfbc      	itt	lt
 800a308:	2201      	movlt	r2, #1
 800a30a:	6032      	strlt	r2, [r6, #0]
 800a30c:	43bb      	bics	r3, r7
 800a30e:	d112      	bne.n	800a336 <_dtoa_r+0x9e>
 800a310:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a312:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a316:	6013      	str	r3, [r2, #0]
 800a318:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a31c:	4323      	orrs	r3, r4
 800a31e:	f000 855a 	beq.w	800add6 <_dtoa_r+0xb3e>
 800a322:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a324:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a584 <_dtoa_r+0x2ec>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 855c 	beq.w	800ade6 <_dtoa_r+0xb4e>
 800a32e:	f10a 0303 	add.w	r3, sl, #3
 800a332:	f000 bd56 	b.w	800ade2 <_dtoa_r+0xb4a>
 800a336:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a33a:	2200      	movs	r2, #0
 800a33c:	ec51 0b17 	vmov	r0, r1, d7
 800a340:	2300      	movs	r3, #0
 800a342:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a346:	f7f6 fbc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a34a:	4680      	mov	r8, r0
 800a34c:	b158      	cbz	r0, 800a366 <_dtoa_r+0xce>
 800a34e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a350:	2301      	movs	r3, #1
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a356:	b113      	cbz	r3, 800a35e <_dtoa_r+0xc6>
 800a358:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a35a:	4b86      	ldr	r3, [pc, #536]	@ (800a574 <_dtoa_r+0x2dc>)
 800a35c:	6013      	str	r3, [r2, #0]
 800a35e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a588 <_dtoa_r+0x2f0>
 800a362:	f000 bd40 	b.w	800ade6 <_dtoa_r+0xb4e>
 800a366:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a36a:	aa14      	add	r2, sp, #80	@ 0x50
 800a36c:	a915      	add	r1, sp, #84	@ 0x54
 800a36e:	4648      	mov	r0, r9
 800a370:	f001 f984 	bl	800b67c <__d2b>
 800a374:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a378:	9002      	str	r0, [sp, #8]
 800a37a:	2e00      	cmp	r6, #0
 800a37c:	d078      	beq.n	800a470 <_dtoa_r+0x1d8>
 800a37e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a380:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a388:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a38c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a390:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a394:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a398:	4619      	mov	r1, r3
 800a39a:	2200      	movs	r2, #0
 800a39c:	4b76      	ldr	r3, [pc, #472]	@ (800a578 <_dtoa_r+0x2e0>)
 800a39e:	f7f5 ff7b 	bl	8000298 <__aeabi_dsub>
 800a3a2:	a36b      	add	r3, pc, #428	@ (adr r3, 800a550 <_dtoa_r+0x2b8>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f7f6 f92e 	bl	8000608 <__aeabi_dmul>
 800a3ac:	a36a      	add	r3, pc, #424	@ (adr r3, 800a558 <_dtoa_r+0x2c0>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f7f5 ff73 	bl	800029c <__adddf3>
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	460d      	mov	r5, r1
 800a3bc:	f7f6 f8ba 	bl	8000534 <__aeabi_i2d>
 800a3c0:	a367      	add	r3, pc, #412	@ (adr r3, 800a560 <_dtoa_r+0x2c8>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f6 f91f 	bl	8000608 <__aeabi_dmul>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	f7f5 ff63 	bl	800029c <__adddf3>
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	460d      	mov	r5, r1
 800a3da:	f7f6 fbc5 	bl	8000b68 <__aeabi_d2iz>
 800a3de:	2200      	movs	r2, #0
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f6 fb80 	bl	8000aec <__aeabi_dcmplt>
 800a3ec:	b140      	cbz	r0, 800a400 <_dtoa_r+0x168>
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f7f6 f8a0 	bl	8000534 <__aeabi_i2d>
 800a3f4:	4622      	mov	r2, r4
 800a3f6:	462b      	mov	r3, r5
 800a3f8:	f7f6 fb6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3fc:	b900      	cbnz	r0, 800a400 <_dtoa_r+0x168>
 800a3fe:	3f01      	subs	r7, #1
 800a400:	2f16      	cmp	r7, #22
 800a402:	d852      	bhi.n	800a4aa <_dtoa_r+0x212>
 800a404:	4b5d      	ldr	r3, [pc, #372]	@ (800a57c <_dtoa_r+0x2e4>)
 800a406:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a412:	f7f6 fb6b 	bl	8000aec <__aeabi_dcmplt>
 800a416:	2800      	cmp	r0, #0
 800a418:	d049      	beq.n	800a4ae <_dtoa_r+0x216>
 800a41a:	3f01      	subs	r7, #1
 800a41c:	2300      	movs	r3, #0
 800a41e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a420:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a422:	1b9b      	subs	r3, r3, r6
 800a424:	1e5a      	subs	r2, r3, #1
 800a426:	bf45      	ittet	mi
 800a428:	f1c3 0301 	rsbmi	r3, r3, #1
 800a42c:	9300      	strmi	r3, [sp, #0]
 800a42e:	2300      	movpl	r3, #0
 800a430:	2300      	movmi	r3, #0
 800a432:	9206      	str	r2, [sp, #24]
 800a434:	bf54      	ite	pl
 800a436:	9300      	strpl	r3, [sp, #0]
 800a438:	9306      	strmi	r3, [sp, #24]
 800a43a:	2f00      	cmp	r7, #0
 800a43c:	db39      	blt.n	800a4b2 <_dtoa_r+0x21a>
 800a43e:	9b06      	ldr	r3, [sp, #24]
 800a440:	970d      	str	r7, [sp, #52]	@ 0x34
 800a442:	443b      	add	r3, r7
 800a444:	9306      	str	r3, [sp, #24]
 800a446:	2300      	movs	r3, #0
 800a448:	9308      	str	r3, [sp, #32]
 800a44a:	9b07      	ldr	r3, [sp, #28]
 800a44c:	2b09      	cmp	r3, #9
 800a44e:	d863      	bhi.n	800a518 <_dtoa_r+0x280>
 800a450:	2b05      	cmp	r3, #5
 800a452:	bfc4      	itt	gt
 800a454:	3b04      	subgt	r3, #4
 800a456:	9307      	strgt	r3, [sp, #28]
 800a458:	9b07      	ldr	r3, [sp, #28]
 800a45a:	f1a3 0302 	sub.w	r3, r3, #2
 800a45e:	bfcc      	ite	gt
 800a460:	2400      	movgt	r4, #0
 800a462:	2401      	movle	r4, #1
 800a464:	2b03      	cmp	r3, #3
 800a466:	d863      	bhi.n	800a530 <_dtoa_r+0x298>
 800a468:	e8df f003 	tbb	[pc, r3]
 800a46c:	2b375452 	.word	0x2b375452
 800a470:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a474:	441e      	add	r6, r3
 800a476:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	bfc1      	itttt	gt
 800a47e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a482:	409f      	lslgt	r7, r3
 800a484:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a488:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a48c:	bfd6      	itet	le
 800a48e:	f1c3 0320 	rsble	r3, r3, #32
 800a492:	ea47 0003 	orrgt.w	r0, r7, r3
 800a496:	fa04 f003 	lslle.w	r0, r4, r3
 800a49a:	f7f6 f83b 	bl	8000514 <__aeabi_ui2d>
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a4a4:	3e01      	subs	r6, #1
 800a4a6:	9212      	str	r2, [sp, #72]	@ 0x48
 800a4a8:	e776      	b.n	800a398 <_dtoa_r+0x100>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e7b7      	b.n	800a41e <_dtoa_r+0x186>
 800a4ae:	9010      	str	r0, [sp, #64]	@ 0x40
 800a4b0:	e7b6      	b.n	800a420 <_dtoa_r+0x188>
 800a4b2:	9b00      	ldr	r3, [sp, #0]
 800a4b4:	1bdb      	subs	r3, r3, r7
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	427b      	negs	r3, r7
 800a4ba:	9308      	str	r3, [sp, #32]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	930d      	str	r3, [sp, #52]	@ 0x34
 800a4c0:	e7c3      	b.n	800a44a <_dtoa_r+0x1b2>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4c8:	eb07 0b03 	add.w	fp, r7, r3
 800a4cc:	f10b 0301 	add.w	r3, fp, #1
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	9303      	str	r3, [sp, #12]
 800a4d4:	bfb8      	it	lt
 800a4d6:	2301      	movlt	r3, #1
 800a4d8:	e006      	b.n	800a4e8 <_dtoa_r+0x250>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dd28      	ble.n	800a536 <_dtoa_r+0x29e>
 800a4e4:	469b      	mov	fp, r3
 800a4e6:	9303      	str	r3, [sp, #12]
 800a4e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	2204      	movs	r2, #4
 800a4f0:	f102 0514 	add.w	r5, r2, #20
 800a4f4:	429d      	cmp	r5, r3
 800a4f6:	d926      	bls.n	800a546 <_dtoa_r+0x2ae>
 800a4f8:	6041      	str	r1, [r0, #4]
 800a4fa:	4648      	mov	r0, r9
 800a4fc:	f000 fd9c 	bl	800b038 <_Balloc>
 800a500:	4682      	mov	sl, r0
 800a502:	2800      	cmp	r0, #0
 800a504:	d142      	bne.n	800a58c <_dtoa_r+0x2f4>
 800a506:	4b1e      	ldr	r3, [pc, #120]	@ (800a580 <_dtoa_r+0x2e8>)
 800a508:	4602      	mov	r2, r0
 800a50a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a50e:	e6da      	b.n	800a2c6 <_dtoa_r+0x2e>
 800a510:	2300      	movs	r3, #0
 800a512:	e7e3      	b.n	800a4dc <_dtoa_r+0x244>
 800a514:	2300      	movs	r3, #0
 800a516:	e7d5      	b.n	800a4c4 <_dtoa_r+0x22c>
 800a518:	2401      	movs	r4, #1
 800a51a:	2300      	movs	r3, #0
 800a51c:	9307      	str	r3, [sp, #28]
 800a51e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a520:	f04f 3bff 	mov.w	fp, #4294967295
 800a524:	2200      	movs	r2, #0
 800a526:	f8cd b00c 	str.w	fp, [sp, #12]
 800a52a:	2312      	movs	r3, #18
 800a52c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a52e:	e7db      	b.n	800a4e8 <_dtoa_r+0x250>
 800a530:	2301      	movs	r3, #1
 800a532:	9309      	str	r3, [sp, #36]	@ 0x24
 800a534:	e7f4      	b.n	800a520 <_dtoa_r+0x288>
 800a536:	f04f 0b01 	mov.w	fp, #1
 800a53a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a53e:	465b      	mov	r3, fp
 800a540:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a544:	e7d0      	b.n	800a4e8 <_dtoa_r+0x250>
 800a546:	3101      	adds	r1, #1
 800a548:	0052      	lsls	r2, r2, #1
 800a54a:	e7d1      	b.n	800a4f0 <_dtoa_r+0x258>
 800a54c:	f3af 8000 	nop.w
 800a550:	636f4361 	.word	0x636f4361
 800a554:	3fd287a7 	.word	0x3fd287a7
 800a558:	8b60c8b3 	.word	0x8b60c8b3
 800a55c:	3fc68a28 	.word	0x3fc68a28
 800a560:	509f79fb 	.word	0x509f79fb
 800a564:	3fd34413 	.word	0x3fd34413
 800a568:	0800e001 	.word	0x0800e001
 800a56c:	0800e018 	.word	0x0800e018
 800a570:	7ff00000 	.word	0x7ff00000
 800a574:	0800dfd1 	.word	0x0800dfd1
 800a578:	3ff80000 	.word	0x3ff80000
 800a57c:	0800e168 	.word	0x0800e168
 800a580:	0800e070 	.word	0x0800e070
 800a584:	0800dffd 	.word	0x0800dffd
 800a588:	0800dfd0 	.word	0x0800dfd0
 800a58c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a590:	6018      	str	r0, [r3, #0]
 800a592:	9b03      	ldr	r3, [sp, #12]
 800a594:	2b0e      	cmp	r3, #14
 800a596:	f200 80a1 	bhi.w	800a6dc <_dtoa_r+0x444>
 800a59a:	2c00      	cmp	r4, #0
 800a59c:	f000 809e 	beq.w	800a6dc <_dtoa_r+0x444>
 800a5a0:	2f00      	cmp	r7, #0
 800a5a2:	dd33      	ble.n	800a60c <_dtoa_r+0x374>
 800a5a4:	4b9c      	ldr	r3, [pc, #624]	@ (800a818 <_dtoa_r+0x580>)
 800a5a6:	f007 020f 	and.w	r2, r7, #15
 800a5aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5ae:	ed93 7b00 	vldr	d7, [r3]
 800a5b2:	05f8      	lsls	r0, r7, #23
 800a5b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a5b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a5bc:	d516      	bpl.n	800a5ec <_dtoa_r+0x354>
 800a5be:	4b97      	ldr	r3, [pc, #604]	@ (800a81c <_dtoa_r+0x584>)
 800a5c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5c8:	f7f6 f948 	bl	800085c <__aeabi_ddiv>
 800a5cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5d0:	f004 040f 	and.w	r4, r4, #15
 800a5d4:	2603      	movs	r6, #3
 800a5d6:	4d91      	ldr	r5, [pc, #580]	@ (800a81c <_dtoa_r+0x584>)
 800a5d8:	b954      	cbnz	r4, 800a5f0 <_dtoa_r+0x358>
 800a5da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a5de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5e2:	f7f6 f93b 	bl	800085c <__aeabi_ddiv>
 800a5e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ea:	e028      	b.n	800a63e <_dtoa_r+0x3a6>
 800a5ec:	2602      	movs	r6, #2
 800a5ee:	e7f2      	b.n	800a5d6 <_dtoa_r+0x33e>
 800a5f0:	07e1      	lsls	r1, r4, #31
 800a5f2:	d508      	bpl.n	800a606 <_dtoa_r+0x36e>
 800a5f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a5f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5fc:	f7f6 f804 	bl	8000608 <__aeabi_dmul>
 800a600:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a604:	3601      	adds	r6, #1
 800a606:	1064      	asrs	r4, r4, #1
 800a608:	3508      	adds	r5, #8
 800a60a:	e7e5      	b.n	800a5d8 <_dtoa_r+0x340>
 800a60c:	f000 80af 	beq.w	800a76e <_dtoa_r+0x4d6>
 800a610:	427c      	negs	r4, r7
 800a612:	4b81      	ldr	r3, [pc, #516]	@ (800a818 <_dtoa_r+0x580>)
 800a614:	4d81      	ldr	r5, [pc, #516]	@ (800a81c <_dtoa_r+0x584>)
 800a616:	f004 020f 	and.w	r2, r4, #15
 800a61a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a626:	f7f5 ffef 	bl	8000608 <__aeabi_dmul>
 800a62a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a62e:	1124      	asrs	r4, r4, #4
 800a630:	2300      	movs	r3, #0
 800a632:	2602      	movs	r6, #2
 800a634:	2c00      	cmp	r4, #0
 800a636:	f040 808f 	bne.w	800a758 <_dtoa_r+0x4c0>
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1d3      	bne.n	800a5e6 <_dtoa_r+0x34e>
 800a63e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a640:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 8094 	beq.w	800a772 <_dtoa_r+0x4da>
 800a64a:	4b75      	ldr	r3, [pc, #468]	@ (800a820 <_dtoa_r+0x588>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	4620      	mov	r0, r4
 800a650:	4629      	mov	r1, r5
 800a652:	f7f6 fa4b 	bl	8000aec <__aeabi_dcmplt>
 800a656:	2800      	cmp	r0, #0
 800a658:	f000 808b 	beq.w	800a772 <_dtoa_r+0x4da>
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 8087 	beq.w	800a772 <_dtoa_r+0x4da>
 800a664:	f1bb 0f00 	cmp.w	fp, #0
 800a668:	dd34      	ble.n	800a6d4 <_dtoa_r+0x43c>
 800a66a:	4620      	mov	r0, r4
 800a66c:	4b6d      	ldr	r3, [pc, #436]	@ (800a824 <_dtoa_r+0x58c>)
 800a66e:	2200      	movs	r2, #0
 800a670:	4629      	mov	r1, r5
 800a672:	f7f5 ffc9 	bl	8000608 <__aeabi_dmul>
 800a676:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a67a:	f107 38ff 	add.w	r8, r7, #4294967295
 800a67e:	3601      	adds	r6, #1
 800a680:	465c      	mov	r4, fp
 800a682:	4630      	mov	r0, r6
 800a684:	f7f5 ff56 	bl	8000534 <__aeabi_i2d>
 800a688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a68c:	f7f5 ffbc 	bl	8000608 <__aeabi_dmul>
 800a690:	4b65      	ldr	r3, [pc, #404]	@ (800a828 <_dtoa_r+0x590>)
 800a692:	2200      	movs	r2, #0
 800a694:	f7f5 fe02 	bl	800029c <__adddf3>
 800a698:	4605      	mov	r5, r0
 800a69a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a69e:	2c00      	cmp	r4, #0
 800a6a0:	d16a      	bne.n	800a778 <_dtoa_r+0x4e0>
 800a6a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6a6:	4b61      	ldr	r3, [pc, #388]	@ (800a82c <_dtoa_r+0x594>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f7f5 fdf5 	bl	8000298 <__aeabi_dsub>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6b6:	462a      	mov	r2, r5
 800a6b8:	4633      	mov	r3, r6
 800a6ba:	f7f6 fa35 	bl	8000b28 <__aeabi_dcmpgt>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	f040 8298 	bne.w	800abf4 <_dtoa_r+0x95c>
 800a6c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6c8:	462a      	mov	r2, r5
 800a6ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a6ce:	f7f6 fa0d 	bl	8000aec <__aeabi_dcmplt>
 800a6d2:	bb38      	cbnz	r0, 800a724 <_dtoa_r+0x48c>
 800a6d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a6d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a6dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f2c0 8157 	blt.w	800a992 <_dtoa_r+0x6fa>
 800a6e4:	2f0e      	cmp	r7, #14
 800a6e6:	f300 8154 	bgt.w	800a992 <_dtoa_r+0x6fa>
 800a6ea:	4b4b      	ldr	r3, [pc, #300]	@ (800a818 <_dtoa_r+0x580>)
 800a6ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6f0:	ed93 7b00 	vldr	d7, [r3]
 800a6f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	ed8d 7b00 	vstr	d7, [sp]
 800a6fc:	f280 80e5 	bge.w	800a8ca <_dtoa_r+0x632>
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	f300 80e1 	bgt.w	800a8ca <_dtoa_r+0x632>
 800a708:	d10c      	bne.n	800a724 <_dtoa_r+0x48c>
 800a70a:	4b48      	ldr	r3, [pc, #288]	@ (800a82c <_dtoa_r+0x594>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	ec51 0b17 	vmov	r0, r1, d7
 800a712:	f7f5 ff79 	bl	8000608 <__aeabi_dmul>
 800a716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a71a:	f7f6 f9fb 	bl	8000b14 <__aeabi_dcmpge>
 800a71e:	2800      	cmp	r0, #0
 800a720:	f000 8266 	beq.w	800abf0 <_dtoa_r+0x958>
 800a724:	2400      	movs	r4, #0
 800a726:	4625      	mov	r5, r4
 800a728:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a72a:	4656      	mov	r6, sl
 800a72c:	ea6f 0803 	mvn.w	r8, r3
 800a730:	2700      	movs	r7, #0
 800a732:	4621      	mov	r1, r4
 800a734:	4648      	mov	r0, r9
 800a736:	f000 fcbf 	bl	800b0b8 <_Bfree>
 800a73a:	2d00      	cmp	r5, #0
 800a73c:	f000 80bd 	beq.w	800a8ba <_dtoa_r+0x622>
 800a740:	b12f      	cbz	r7, 800a74e <_dtoa_r+0x4b6>
 800a742:	42af      	cmp	r7, r5
 800a744:	d003      	beq.n	800a74e <_dtoa_r+0x4b6>
 800a746:	4639      	mov	r1, r7
 800a748:	4648      	mov	r0, r9
 800a74a:	f000 fcb5 	bl	800b0b8 <_Bfree>
 800a74e:	4629      	mov	r1, r5
 800a750:	4648      	mov	r0, r9
 800a752:	f000 fcb1 	bl	800b0b8 <_Bfree>
 800a756:	e0b0      	b.n	800a8ba <_dtoa_r+0x622>
 800a758:	07e2      	lsls	r2, r4, #31
 800a75a:	d505      	bpl.n	800a768 <_dtoa_r+0x4d0>
 800a75c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a760:	f7f5 ff52 	bl	8000608 <__aeabi_dmul>
 800a764:	3601      	adds	r6, #1
 800a766:	2301      	movs	r3, #1
 800a768:	1064      	asrs	r4, r4, #1
 800a76a:	3508      	adds	r5, #8
 800a76c:	e762      	b.n	800a634 <_dtoa_r+0x39c>
 800a76e:	2602      	movs	r6, #2
 800a770:	e765      	b.n	800a63e <_dtoa_r+0x3a6>
 800a772:	9c03      	ldr	r4, [sp, #12]
 800a774:	46b8      	mov	r8, r7
 800a776:	e784      	b.n	800a682 <_dtoa_r+0x3ea>
 800a778:	4b27      	ldr	r3, [pc, #156]	@ (800a818 <_dtoa_r+0x580>)
 800a77a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a77c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a780:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a784:	4454      	add	r4, sl
 800a786:	2900      	cmp	r1, #0
 800a788:	d054      	beq.n	800a834 <_dtoa_r+0x59c>
 800a78a:	4929      	ldr	r1, [pc, #164]	@ (800a830 <_dtoa_r+0x598>)
 800a78c:	2000      	movs	r0, #0
 800a78e:	f7f6 f865 	bl	800085c <__aeabi_ddiv>
 800a792:	4633      	mov	r3, r6
 800a794:	462a      	mov	r2, r5
 800a796:	f7f5 fd7f 	bl	8000298 <__aeabi_dsub>
 800a79a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a79e:	4656      	mov	r6, sl
 800a7a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7a4:	f7f6 f9e0 	bl	8000b68 <__aeabi_d2iz>
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	f7f5 fec3 	bl	8000534 <__aeabi_i2d>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7b6:	f7f5 fd6f 	bl	8000298 <__aeabi_dsub>
 800a7ba:	3530      	adds	r5, #48	@ 0x30
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7c4:	f806 5b01 	strb.w	r5, [r6], #1
 800a7c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a7cc:	f7f6 f98e 	bl	8000aec <__aeabi_dcmplt>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d172      	bne.n	800a8ba <_dtoa_r+0x622>
 800a7d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7d8:	4911      	ldr	r1, [pc, #68]	@ (800a820 <_dtoa_r+0x588>)
 800a7da:	2000      	movs	r0, #0
 800a7dc:	f7f5 fd5c 	bl	8000298 <__aeabi_dsub>
 800a7e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a7e4:	f7f6 f982 	bl	8000aec <__aeabi_dcmplt>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	f040 80b4 	bne.w	800a956 <_dtoa_r+0x6be>
 800a7ee:	42a6      	cmp	r6, r4
 800a7f0:	f43f af70 	beq.w	800a6d4 <_dtoa_r+0x43c>
 800a7f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a824 <_dtoa_r+0x58c>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f7f5 ff04 	bl	8000608 <__aeabi_dmul>
 800a800:	4b08      	ldr	r3, [pc, #32]	@ (800a824 <_dtoa_r+0x58c>)
 800a802:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a806:	2200      	movs	r2, #0
 800a808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a80c:	f7f5 fefc 	bl	8000608 <__aeabi_dmul>
 800a810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a814:	e7c4      	b.n	800a7a0 <_dtoa_r+0x508>
 800a816:	bf00      	nop
 800a818:	0800e168 	.word	0x0800e168
 800a81c:	0800e140 	.word	0x0800e140
 800a820:	3ff00000 	.word	0x3ff00000
 800a824:	40240000 	.word	0x40240000
 800a828:	401c0000 	.word	0x401c0000
 800a82c:	40140000 	.word	0x40140000
 800a830:	3fe00000 	.word	0x3fe00000
 800a834:	4631      	mov	r1, r6
 800a836:	4628      	mov	r0, r5
 800a838:	f7f5 fee6 	bl	8000608 <__aeabi_dmul>
 800a83c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a840:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a842:	4656      	mov	r6, sl
 800a844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a848:	f7f6 f98e 	bl	8000b68 <__aeabi_d2iz>
 800a84c:	4605      	mov	r5, r0
 800a84e:	f7f5 fe71 	bl	8000534 <__aeabi_i2d>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a85a:	f7f5 fd1d 	bl	8000298 <__aeabi_dsub>
 800a85e:	3530      	adds	r5, #48	@ 0x30
 800a860:	f806 5b01 	strb.w	r5, [r6], #1
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	42a6      	cmp	r6, r4
 800a86a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a86e:	f04f 0200 	mov.w	r2, #0
 800a872:	d124      	bne.n	800a8be <_dtoa_r+0x626>
 800a874:	4baf      	ldr	r3, [pc, #700]	@ (800ab34 <_dtoa_r+0x89c>)
 800a876:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a87a:	f7f5 fd0f 	bl	800029c <__adddf3>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a886:	f7f6 f94f 	bl	8000b28 <__aeabi_dcmpgt>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d163      	bne.n	800a956 <_dtoa_r+0x6be>
 800a88e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a892:	49a8      	ldr	r1, [pc, #672]	@ (800ab34 <_dtoa_r+0x89c>)
 800a894:	2000      	movs	r0, #0
 800a896:	f7f5 fcff 	bl	8000298 <__aeabi_dsub>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8a2:	f7f6 f923 	bl	8000aec <__aeabi_dcmplt>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f43f af14 	beq.w	800a6d4 <_dtoa_r+0x43c>
 800a8ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a8ae:	1e73      	subs	r3, r6, #1
 800a8b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8b6:	2b30      	cmp	r3, #48	@ 0x30
 800a8b8:	d0f8      	beq.n	800a8ac <_dtoa_r+0x614>
 800a8ba:	4647      	mov	r7, r8
 800a8bc:	e03b      	b.n	800a936 <_dtoa_r+0x69e>
 800a8be:	4b9e      	ldr	r3, [pc, #632]	@ (800ab38 <_dtoa_r+0x8a0>)
 800a8c0:	f7f5 fea2 	bl	8000608 <__aeabi_dmul>
 800a8c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8c8:	e7bc      	b.n	800a844 <_dtoa_r+0x5ac>
 800a8ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a8ce:	4656      	mov	r6, sl
 800a8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	f7f5 ffc0 	bl	800085c <__aeabi_ddiv>
 800a8dc:	f7f6 f944 	bl	8000b68 <__aeabi_d2iz>
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	f7f5 fe27 	bl	8000534 <__aeabi_i2d>
 800a8e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8ea:	f7f5 fe8d 	bl	8000608 <__aeabi_dmul>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a8fa:	f7f5 fccd 	bl	8000298 <__aeabi_dsub>
 800a8fe:	f806 4b01 	strb.w	r4, [r6], #1
 800a902:	9d03      	ldr	r5, [sp, #12]
 800a904:	eba6 040a 	sub.w	r4, r6, sl
 800a908:	42a5      	cmp	r5, r4
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	d133      	bne.n	800a978 <_dtoa_r+0x6e0>
 800a910:	f7f5 fcc4 	bl	800029c <__adddf3>
 800a914:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a918:	4604      	mov	r4, r0
 800a91a:	460d      	mov	r5, r1
 800a91c:	f7f6 f904 	bl	8000b28 <__aeabi_dcmpgt>
 800a920:	b9c0      	cbnz	r0, 800a954 <_dtoa_r+0x6bc>
 800a922:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a926:	4620      	mov	r0, r4
 800a928:	4629      	mov	r1, r5
 800a92a:	f7f6 f8d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a92e:	b110      	cbz	r0, 800a936 <_dtoa_r+0x69e>
 800a930:	f018 0f01 	tst.w	r8, #1
 800a934:	d10e      	bne.n	800a954 <_dtoa_r+0x6bc>
 800a936:	9902      	ldr	r1, [sp, #8]
 800a938:	4648      	mov	r0, r9
 800a93a:	f000 fbbd 	bl	800b0b8 <_Bfree>
 800a93e:	2300      	movs	r3, #0
 800a940:	7033      	strb	r3, [r6, #0]
 800a942:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a944:	3701      	adds	r7, #1
 800a946:	601f      	str	r7, [r3, #0]
 800a948:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 824b 	beq.w	800ade6 <_dtoa_r+0xb4e>
 800a950:	601e      	str	r6, [r3, #0]
 800a952:	e248      	b.n	800ade6 <_dtoa_r+0xb4e>
 800a954:	46b8      	mov	r8, r7
 800a956:	4633      	mov	r3, r6
 800a958:	461e      	mov	r6, r3
 800a95a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a95e:	2a39      	cmp	r2, #57	@ 0x39
 800a960:	d106      	bne.n	800a970 <_dtoa_r+0x6d8>
 800a962:	459a      	cmp	sl, r3
 800a964:	d1f8      	bne.n	800a958 <_dtoa_r+0x6c0>
 800a966:	2230      	movs	r2, #48	@ 0x30
 800a968:	f108 0801 	add.w	r8, r8, #1
 800a96c:	f88a 2000 	strb.w	r2, [sl]
 800a970:	781a      	ldrb	r2, [r3, #0]
 800a972:	3201      	adds	r2, #1
 800a974:	701a      	strb	r2, [r3, #0]
 800a976:	e7a0      	b.n	800a8ba <_dtoa_r+0x622>
 800a978:	4b6f      	ldr	r3, [pc, #444]	@ (800ab38 <_dtoa_r+0x8a0>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	f7f5 fe44 	bl	8000608 <__aeabi_dmul>
 800a980:	2200      	movs	r2, #0
 800a982:	2300      	movs	r3, #0
 800a984:	4604      	mov	r4, r0
 800a986:	460d      	mov	r5, r1
 800a988:	f7f6 f8a6 	bl	8000ad8 <__aeabi_dcmpeq>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d09f      	beq.n	800a8d0 <_dtoa_r+0x638>
 800a990:	e7d1      	b.n	800a936 <_dtoa_r+0x69e>
 800a992:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a994:	2a00      	cmp	r2, #0
 800a996:	f000 80ea 	beq.w	800ab6e <_dtoa_r+0x8d6>
 800a99a:	9a07      	ldr	r2, [sp, #28]
 800a99c:	2a01      	cmp	r2, #1
 800a99e:	f300 80cd 	bgt.w	800ab3c <_dtoa_r+0x8a4>
 800a9a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a9a4:	2a00      	cmp	r2, #0
 800a9a6:	f000 80c1 	beq.w	800ab2c <_dtoa_r+0x894>
 800a9aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a9ae:	9c08      	ldr	r4, [sp, #32]
 800a9b0:	9e00      	ldr	r6, [sp, #0]
 800a9b2:	9a00      	ldr	r2, [sp, #0]
 800a9b4:	441a      	add	r2, r3
 800a9b6:	9200      	str	r2, [sp, #0]
 800a9b8:	9a06      	ldr	r2, [sp, #24]
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	441a      	add	r2, r3
 800a9be:	4648      	mov	r0, r9
 800a9c0:	9206      	str	r2, [sp, #24]
 800a9c2:	f000 fc2d 	bl	800b220 <__i2b>
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	b166      	cbz	r6, 800a9e4 <_dtoa_r+0x74c>
 800a9ca:	9b06      	ldr	r3, [sp, #24]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	dd09      	ble.n	800a9e4 <_dtoa_r+0x74c>
 800a9d0:	42b3      	cmp	r3, r6
 800a9d2:	9a00      	ldr	r2, [sp, #0]
 800a9d4:	bfa8      	it	ge
 800a9d6:	4633      	movge	r3, r6
 800a9d8:	1ad2      	subs	r2, r2, r3
 800a9da:	9200      	str	r2, [sp, #0]
 800a9dc:	9a06      	ldr	r2, [sp, #24]
 800a9de:	1af6      	subs	r6, r6, r3
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	9306      	str	r3, [sp, #24]
 800a9e4:	9b08      	ldr	r3, [sp, #32]
 800a9e6:	b30b      	cbz	r3, 800aa2c <_dtoa_r+0x794>
 800a9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 80c6 	beq.w	800ab7c <_dtoa_r+0x8e4>
 800a9f0:	2c00      	cmp	r4, #0
 800a9f2:	f000 80c0 	beq.w	800ab76 <_dtoa_r+0x8de>
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	4648      	mov	r0, r9
 800a9fc:	f000 fcc8 	bl	800b390 <__pow5mult>
 800aa00:	9a02      	ldr	r2, [sp, #8]
 800aa02:	4601      	mov	r1, r0
 800aa04:	4605      	mov	r5, r0
 800aa06:	4648      	mov	r0, r9
 800aa08:	f000 fc20 	bl	800b24c <__multiply>
 800aa0c:	9902      	ldr	r1, [sp, #8]
 800aa0e:	4680      	mov	r8, r0
 800aa10:	4648      	mov	r0, r9
 800aa12:	f000 fb51 	bl	800b0b8 <_Bfree>
 800aa16:	9b08      	ldr	r3, [sp, #32]
 800aa18:	1b1b      	subs	r3, r3, r4
 800aa1a:	9308      	str	r3, [sp, #32]
 800aa1c:	f000 80b1 	beq.w	800ab82 <_dtoa_r+0x8ea>
 800aa20:	9a08      	ldr	r2, [sp, #32]
 800aa22:	4641      	mov	r1, r8
 800aa24:	4648      	mov	r0, r9
 800aa26:	f000 fcb3 	bl	800b390 <__pow5mult>
 800aa2a:	9002      	str	r0, [sp, #8]
 800aa2c:	2101      	movs	r1, #1
 800aa2e:	4648      	mov	r0, r9
 800aa30:	f000 fbf6 	bl	800b220 <__i2b>
 800aa34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa36:	4604      	mov	r4, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 81d8 	beq.w	800adee <_dtoa_r+0xb56>
 800aa3e:	461a      	mov	r2, r3
 800aa40:	4601      	mov	r1, r0
 800aa42:	4648      	mov	r0, r9
 800aa44:	f000 fca4 	bl	800b390 <__pow5mult>
 800aa48:	9b07      	ldr	r3, [sp, #28]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	f300 809f 	bgt.w	800ab90 <_dtoa_r+0x8f8>
 800aa52:	9b04      	ldr	r3, [sp, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f040 8097 	bne.w	800ab88 <_dtoa_r+0x8f0>
 800aa5a:	9b05      	ldr	r3, [sp, #20]
 800aa5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f040 8093 	bne.w	800ab8c <_dtoa_r+0x8f4>
 800aa66:	9b05      	ldr	r3, [sp, #20]
 800aa68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa6c:	0d1b      	lsrs	r3, r3, #20
 800aa6e:	051b      	lsls	r3, r3, #20
 800aa70:	b133      	cbz	r3, 800aa80 <_dtoa_r+0x7e8>
 800aa72:	9b00      	ldr	r3, [sp, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	9b06      	ldr	r3, [sp, #24]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	9306      	str	r3, [sp, #24]
 800aa7e:	2301      	movs	r3, #1
 800aa80:	9308      	str	r3, [sp, #32]
 800aa82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 81b8 	beq.w	800adfa <_dtoa_r+0xb62>
 800aa8a:	6923      	ldr	r3, [r4, #16]
 800aa8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa90:	6918      	ldr	r0, [r3, #16]
 800aa92:	f000 fb79 	bl	800b188 <__hi0bits>
 800aa96:	f1c0 0020 	rsb	r0, r0, #32
 800aa9a:	9b06      	ldr	r3, [sp, #24]
 800aa9c:	4418      	add	r0, r3
 800aa9e:	f010 001f 	ands.w	r0, r0, #31
 800aaa2:	f000 8082 	beq.w	800abaa <_dtoa_r+0x912>
 800aaa6:	f1c0 0320 	rsb	r3, r0, #32
 800aaaa:	2b04      	cmp	r3, #4
 800aaac:	dd73      	ble.n	800ab96 <_dtoa_r+0x8fe>
 800aaae:	9b00      	ldr	r3, [sp, #0]
 800aab0:	f1c0 001c 	rsb	r0, r0, #28
 800aab4:	4403      	add	r3, r0
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	9b06      	ldr	r3, [sp, #24]
 800aaba:	4403      	add	r3, r0
 800aabc:	4406      	add	r6, r0
 800aabe:	9306      	str	r3, [sp, #24]
 800aac0:	9b00      	ldr	r3, [sp, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dd05      	ble.n	800aad2 <_dtoa_r+0x83a>
 800aac6:	9902      	ldr	r1, [sp, #8]
 800aac8:	461a      	mov	r2, r3
 800aaca:	4648      	mov	r0, r9
 800aacc:	f000 fcba 	bl	800b444 <__lshift>
 800aad0:	9002      	str	r0, [sp, #8]
 800aad2:	9b06      	ldr	r3, [sp, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dd05      	ble.n	800aae4 <_dtoa_r+0x84c>
 800aad8:	4621      	mov	r1, r4
 800aada:	461a      	mov	r2, r3
 800aadc:	4648      	mov	r0, r9
 800aade:	f000 fcb1 	bl	800b444 <__lshift>
 800aae2:	4604      	mov	r4, r0
 800aae4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d061      	beq.n	800abae <_dtoa_r+0x916>
 800aaea:	9802      	ldr	r0, [sp, #8]
 800aaec:	4621      	mov	r1, r4
 800aaee:	f000 fd15 	bl	800b51c <__mcmp>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	da5b      	bge.n	800abae <_dtoa_r+0x916>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	9902      	ldr	r1, [sp, #8]
 800aafa:	220a      	movs	r2, #10
 800aafc:	4648      	mov	r0, r9
 800aafe:	f000 fafd 	bl	800b0fc <__multadd>
 800ab02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab04:	9002      	str	r0, [sp, #8]
 800ab06:	f107 38ff 	add.w	r8, r7, #4294967295
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 8177 	beq.w	800adfe <_dtoa_r+0xb66>
 800ab10:	4629      	mov	r1, r5
 800ab12:	2300      	movs	r3, #0
 800ab14:	220a      	movs	r2, #10
 800ab16:	4648      	mov	r0, r9
 800ab18:	f000 faf0 	bl	800b0fc <__multadd>
 800ab1c:	f1bb 0f00 	cmp.w	fp, #0
 800ab20:	4605      	mov	r5, r0
 800ab22:	dc6f      	bgt.n	800ac04 <_dtoa_r+0x96c>
 800ab24:	9b07      	ldr	r3, [sp, #28]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	dc49      	bgt.n	800abbe <_dtoa_r+0x926>
 800ab2a:	e06b      	b.n	800ac04 <_dtoa_r+0x96c>
 800ab2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ab32:	e73c      	b.n	800a9ae <_dtoa_r+0x716>
 800ab34:	3fe00000 	.word	0x3fe00000
 800ab38:	40240000 	.word	0x40240000
 800ab3c:	9b03      	ldr	r3, [sp, #12]
 800ab3e:	1e5c      	subs	r4, r3, #1
 800ab40:	9b08      	ldr	r3, [sp, #32]
 800ab42:	42a3      	cmp	r3, r4
 800ab44:	db09      	blt.n	800ab5a <_dtoa_r+0x8c2>
 800ab46:	1b1c      	subs	r4, r3, r4
 800ab48:	9b03      	ldr	r3, [sp, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f6bf af30 	bge.w	800a9b0 <_dtoa_r+0x718>
 800ab50:	9b00      	ldr	r3, [sp, #0]
 800ab52:	9a03      	ldr	r2, [sp, #12]
 800ab54:	1a9e      	subs	r6, r3, r2
 800ab56:	2300      	movs	r3, #0
 800ab58:	e72b      	b.n	800a9b2 <_dtoa_r+0x71a>
 800ab5a:	9b08      	ldr	r3, [sp, #32]
 800ab5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab5e:	9408      	str	r4, [sp, #32]
 800ab60:	1ae3      	subs	r3, r4, r3
 800ab62:	441a      	add	r2, r3
 800ab64:	9e00      	ldr	r6, [sp, #0]
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	920d      	str	r2, [sp, #52]	@ 0x34
 800ab6a:	2400      	movs	r4, #0
 800ab6c:	e721      	b.n	800a9b2 <_dtoa_r+0x71a>
 800ab6e:	9c08      	ldr	r4, [sp, #32]
 800ab70:	9e00      	ldr	r6, [sp, #0]
 800ab72:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ab74:	e728      	b.n	800a9c8 <_dtoa_r+0x730>
 800ab76:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ab7a:	e751      	b.n	800aa20 <_dtoa_r+0x788>
 800ab7c:	9a08      	ldr	r2, [sp, #32]
 800ab7e:	9902      	ldr	r1, [sp, #8]
 800ab80:	e750      	b.n	800aa24 <_dtoa_r+0x78c>
 800ab82:	f8cd 8008 	str.w	r8, [sp, #8]
 800ab86:	e751      	b.n	800aa2c <_dtoa_r+0x794>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	e779      	b.n	800aa80 <_dtoa_r+0x7e8>
 800ab8c:	9b04      	ldr	r3, [sp, #16]
 800ab8e:	e777      	b.n	800aa80 <_dtoa_r+0x7e8>
 800ab90:	2300      	movs	r3, #0
 800ab92:	9308      	str	r3, [sp, #32]
 800ab94:	e779      	b.n	800aa8a <_dtoa_r+0x7f2>
 800ab96:	d093      	beq.n	800aac0 <_dtoa_r+0x828>
 800ab98:	9a00      	ldr	r2, [sp, #0]
 800ab9a:	331c      	adds	r3, #28
 800ab9c:	441a      	add	r2, r3
 800ab9e:	9200      	str	r2, [sp, #0]
 800aba0:	9a06      	ldr	r2, [sp, #24]
 800aba2:	441a      	add	r2, r3
 800aba4:	441e      	add	r6, r3
 800aba6:	9206      	str	r2, [sp, #24]
 800aba8:	e78a      	b.n	800aac0 <_dtoa_r+0x828>
 800abaa:	4603      	mov	r3, r0
 800abac:	e7f4      	b.n	800ab98 <_dtoa_r+0x900>
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	46b8      	mov	r8, r7
 800abb4:	dc20      	bgt.n	800abf8 <_dtoa_r+0x960>
 800abb6:	469b      	mov	fp, r3
 800abb8:	9b07      	ldr	r3, [sp, #28]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	dd1e      	ble.n	800abfc <_dtoa_r+0x964>
 800abbe:	f1bb 0f00 	cmp.w	fp, #0
 800abc2:	f47f adb1 	bne.w	800a728 <_dtoa_r+0x490>
 800abc6:	4621      	mov	r1, r4
 800abc8:	465b      	mov	r3, fp
 800abca:	2205      	movs	r2, #5
 800abcc:	4648      	mov	r0, r9
 800abce:	f000 fa95 	bl	800b0fc <__multadd>
 800abd2:	4601      	mov	r1, r0
 800abd4:	4604      	mov	r4, r0
 800abd6:	9802      	ldr	r0, [sp, #8]
 800abd8:	f000 fca0 	bl	800b51c <__mcmp>
 800abdc:	2800      	cmp	r0, #0
 800abde:	f77f ada3 	ble.w	800a728 <_dtoa_r+0x490>
 800abe2:	4656      	mov	r6, sl
 800abe4:	2331      	movs	r3, #49	@ 0x31
 800abe6:	f806 3b01 	strb.w	r3, [r6], #1
 800abea:	f108 0801 	add.w	r8, r8, #1
 800abee:	e59f      	b.n	800a730 <_dtoa_r+0x498>
 800abf0:	9c03      	ldr	r4, [sp, #12]
 800abf2:	46b8      	mov	r8, r7
 800abf4:	4625      	mov	r5, r4
 800abf6:	e7f4      	b.n	800abe2 <_dtoa_r+0x94a>
 800abf8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800abfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f000 8101 	beq.w	800ae06 <_dtoa_r+0xb6e>
 800ac04:	2e00      	cmp	r6, #0
 800ac06:	dd05      	ble.n	800ac14 <_dtoa_r+0x97c>
 800ac08:	4629      	mov	r1, r5
 800ac0a:	4632      	mov	r2, r6
 800ac0c:	4648      	mov	r0, r9
 800ac0e:	f000 fc19 	bl	800b444 <__lshift>
 800ac12:	4605      	mov	r5, r0
 800ac14:	9b08      	ldr	r3, [sp, #32]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d05c      	beq.n	800acd4 <_dtoa_r+0xa3c>
 800ac1a:	6869      	ldr	r1, [r5, #4]
 800ac1c:	4648      	mov	r0, r9
 800ac1e:	f000 fa0b 	bl	800b038 <_Balloc>
 800ac22:	4606      	mov	r6, r0
 800ac24:	b928      	cbnz	r0, 800ac32 <_dtoa_r+0x99a>
 800ac26:	4b82      	ldr	r3, [pc, #520]	@ (800ae30 <_dtoa_r+0xb98>)
 800ac28:	4602      	mov	r2, r0
 800ac2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ac2e:	f7ff bb4a 	b.w	800a2c6 <_dtoa_r+0x2e>
 800ac32:	692a      	ldr	r2, [r5, #16]
 800ac34:	3202      	adds	r2, #2
 800ac36:	0092      	lsls	r2, r2, #2
 800ac38:	f105 010c 	add.w	r1, r5, #12
 800ac3c:	300c      	adds	r0, #12
 800ac3e:	f000 ffa3 	bl	800bb88 <memcpy>
 800ac42:	2201      	movs	r2, #1
 800ac44:	4631      	mov	r1, r6
 800ac46:	4648      	mov	r0, r9
 800ac48:	f000 fbfc 	bl	800b444 <__lshift>
 800ac4c:	f10a 0301 	add.w	r3, sl, #1
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	eb0a 030b 	add.w	r3, sl, fp
 800ac56:	9308      	str	r3, [sp, #32]
 800ac58:	9b04      	ldr	r3, [sp, #16]
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	462f      	mov	r7, r5
 800ac60:	9306      	str	r3, [sp, #24]
 800ac62:	4605      	mov	r5, r0
 800ac64:	9b00      	ldr	r3, [sp, #0]
 800ac66:	9802      	ldr	r0, [sp, #8]
 800ac68:	4621      	mov	r1, r4
 800ac6a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ac6e:	f7ff fa88 	bl	800a182 <quorem>
 800ac72:	4603      	mov	r3, r0
 800ac74:	3330      	adds	r3, #48	@ 0x30
 800ac76:	9003      	str	r0, [sp, #12]
 800ac78:	4639      	mov	r1, r7
 800ac7a:	9802      	ldr	r0, [sp, #8]
 800ac7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac7e:	f000 fc4d 	bl	800b51c <__mcmp>
 800ac82:	462a      	mov	r2, r5
 800ac84:	9004      	str	r0, [sp, #16]
 800ac86:	4621      	mov	r1, r4
 800ac88:	4648      	mov	r0, r9
 800ac8a:	f000 fc63 	bl	800b554 <__mdiff>
 800ac8e:	68c2      	ldr	r2, [r0, #12]
 800ac90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac92:	4606      	mov	r6, r0
 800ac94:	bb02      	cbnz	r2, 800acd8 <_dtoa_r+0xa40>
 800ac96:	4601      	mov	r1, r0
 800ac98:	9802      	ldr	r0, [sp, #8]
 800ac9a:	f000 fc3f 	bl	800b51c <__mcmp>
 800ac9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca0:	4602      	mov	r2, r0
 800aca2:	4631      	mov	r1, r6
 800aca4:	4648      	mov	r0, r9
 800aca6:	920c      	str	r2, [sp, #48]	@ 0x30
 800aca8:	9309      	str	r3, [sp, #36]	@ 0x24
 800acaa:	f000 fa05 	bl	800b0b8 <_Bfree>
 800acae:	9b07      	ldr	r3, [sp, #28]
 800acb0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800acb2:	9e00      	ldr	r6, [sp, #0]
 800acb4:	ea42 0103 	orr.w	r1, r2, r3
 800acb8:	9b06      	ldr	r3, [sp, #24]
 800acba:	4319      	orrs	r1, r3
 800acbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acbe:	d10d      	bne.n	800acdc <_dtoa_r+0xa44>
 800acc0:	2b39      	cmp	r3, #57	@ 0x39
 800acc2:	d027      	beq.n	800ad14 <_dtoa_r+0xa7c>
 800acc4:	9a04      	ldr	r2, [sp, #16]
 800acc6:	2a00      	cmp	r2, #0
 800acc8:	dd01      	ble.n	800acce <_dtoa_r+0xa36>
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	3331      	adds	r3, #49	@ 0x31
 800acce:	f88b 3000 	strb.w	r3, [fp]
 800acd2:	e52e      	b.n	800a732 <_dtoa_r+0x49a>
 800acd4:	4628      	mov	r0, r5
 800acd6:	e7b9      	b.n	800ac4c <_dtoa_r+0x9b4>
 800acd8:	2201      	movs	r2, #1
 800acda:	e7e2      	b.n	800aca2 <_dtoa_r+0xa0a>
 800acdc:	9904      	ldr	r1, [sp, #16]
 800acde:	2900      	cmp	r1, #0
 800ace0:	db04      	blt.n	800acec <_dtoa_r+0xa54>
 800ace2:	9807      	ldr	r0, [sp, #28]
 800ace4:	4301      	orrs	r1, r0
 800ace6:	9806      	ldr	r0, [sp, #24]
 800ace8:	4301      	orrs	r1, r0
 800acea:	d120      	bne.n	800ad2e <_dtoa_r+0xa96>
 800acec:	2a00      	cmp	r2, #0
 800acee:	ddee      	ble.n	800acce <_dtoa_r+0xa36>
 800acf0:	9902      	ldr	r1, [sp, #8]
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	2201      	movs	r2, #1
 800acf6:	4648      	mov	r0, r9
 800acf8:	f000 fba4 	bl	800b444 <__lshift>
 800acfc:	4621      	mov	r1, r4
 800acfe:	9002      	str	r0, [sp, #8]
 800ad00:	f000 fc0c 	bl	800b51c <__mcmp>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	9b00      	ldr	r3, [sp, #0]
 800ad08:	dc02      	bgt.n	800ad10 <_dtoa_r+0xa78>
 800ad0a:	d1e0      	bne.n	800acce <_dtoa_r+0xa36>
 800ad0c:	07da      	lsls	r2, r3, #31
 800ad0e:	d5de      	bpl.n	800acce <_dtoa_r+0xa36>
 800ad10:	2b39      	cmp	r3, #57	@ 0x39
 800ad12:	d1da      	bne.n	800acca <_dtoa_r+0xa32>
 800ad14:	2339      	movs	r3, #57	@ 0x39
 800ad16:	f88b 3000 	strb.w	r3, [fp]
 800ad1a:	4633      	mov	r3, r6
 800ad1c:	461e      	mov	r6, r3
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ad24:	2a39      	cmp	r2, #57	@ 0x39
 800ad26:	d04e      	beq.n	800adc6 <_dtoa_r+0xb2e>
 800ad28:	3201      	adds	r2, #1
 800ad2a:	701a      	strb	r2, [r3, #0]
 800ad2c:	e501      	b.n	800a732 <_dtoa_r+0x49a>
 800ad2e:	2a00      	cmp	r2, #0
 800ad30:	dd03      	ble.n	800ad3a <_dtoa_r+0xaa2>
 800ad32:	2b39      	cmp	r3, #57	@ 0x39
 800ad34:	d0ee      	beq.n	800ad14 <_dtoa_r+0xa7c>
 800ad36:	3301      	adds	r3, #1
 800ad38:	e7c9      	b.n	800acce <_dtoa_r+0xa36>
 800ad3a:	9a00      	ldr	r2, [sp, #0]
 800ad3c:	9908      	ldr	r1, [sp, #32]
 800ad3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad42:	428a      	cmp	r2, r1
 800ad44:	d028      	beq.n	800ad98 <_dtoa_r+0xb00>
 800ad46:	9902      	ldr	r1, [sp, #8]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	220a      	movs	r2, #10
 800ad4c:	4648      	mov	r0, r9
 800ad4e:	f000 f9d5 	bl	800b0fc <__multadd>
 800ad52:	42af      	cmp	r7, r5
 800ad54:	9002      	str	r0, [sp, #8]
 800ad56:	f04f 0300 	mov.w	r3, #0
 800ad5a:	f04f 020a 	mov.w	r2, #10
 800ad5e:	4639      	mov	r1, r7
 800ad60:	4648      	mov	r0, r9
 800ad62:	d107      	bne.n	800ad74 <_dtoa_r+0xadc>
 800ad64:	f000 f9ca 	bl	800b0fc <__multadd>
 800ad68:	4607      	mov	r7, r0
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	9b00      	ldr	r3, [sp, #0]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	e777      	b.n	800ac64 <_dtoa_r+0x9cc>
 800ad74:	f000 f9c2 	bl	800b0fc <__multadd>
 800ad78:	4629      	mov	r1, r5
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	220a      	movs	r2, #10
 800ad80:	4648      	mov	r0, r9
 800ad82:	f000 f9bb 	bl	800b0fc <__multadd>
 800ad86:	4605      	mov	r5, r0
 800ad88:	e7f0      	b.n	800ad6c <_dtoa_r+0xad4>
 800ad8a:	f1bb 0f00 	cmp.w	fp, #0
 800ad8e:	bfcc      	ite	gt
 800ad90:	465e      	movgt	r6, fp
 800ad92:	2601      	movle	r6, #1
 800ad94:	4456      	add	r6, sl
 800ad96:	2700      	movs	r7, #0
 800ad98:	9902      	ldr	r1, [sp, #8]
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	4648      	mov	r0, r9
 800ada0:	f000 fb50 	bl	800b444 <__lshift>
 800ada4:	4621      	mov	r1, r4
 800ada6:	9002      	str	r0, [sp, #8]
 800ada8:	f000 fbb8 	bl	800b51c <__mcmp>
 800adac:	2800      	cmp	r0, #0
 800adae:	dcb4      	bgt.n	800ad1a <_dtoa_r+0xa82>
 800adb0:	d102      	bne.n	800adb8 <_dtoa_r+0xb20>
 800adb2:	9b00      	ldr	r3, [sp, #0]
 800adb4:	07db      	lsls	r3, r3, #31
 800adb6:	d4b0      	bmi.n	800ad1a <_dtoa_r+0xa82>
 800adb8:	4633      	mov	r3, r6
 800adba:	461e      	mov	r6, r3
 800adbc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adc0:	2a30      	cmp	r2, #48	@ 0x30
 800adc2:	d0fa      	beq.n	800adba <_dtoa_r+0xb22>
 800adc4:	e4b5      	b.n	800a732 <_dtoa_r+0x49a>
 800adc6:	459a      	cmp	sl, r3
 800adc8:	d1a8      	bne.n	800ad1c <_dtoa_r+0xa84>
 800adca:	2331      	movs	r3, #49	@ 0x31
 800adcc:	f108 0801 	add.w	r8, r8, #1
 800add0:	f88a 3000 	strb.w	r3, [sl]
 800add4:	e4ad      	b.n	800a732 <_dtoa_r+0x49a>
 800add6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800add8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ae34 <_dtoa_r+0xb9c>
 800addc:	b11b      	cbz	r3, 800ade6 <_dtoa_r+0xb4e>
 800adde:	f10a 0308 	add.w	r3, sl, #8
 800ade2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ade4:	6013      	str	r3, [r2, #0]
 800ade6:	4650      	mov	r0, sl
 800ade8:	b017      	add	sp, #92	@ 0x5c
 800adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adee:	9b07      	ldr	r3, [sp, #28]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	f77f ae2e 	ble.w	800aa52 <_dtoa_r+0x7ba>
 800adf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adf8:	9308      	str	r3, [sp, #32]
 800adfa:	2001      	movs	r0, #1
 800adfc:	e64d      	b.n	800aa9a <_dtoa_r+0x802>
 800adfe:	f1bb 0f00 	cmp.w	fp, #0
 800ae02:	f77f aed9 	ble.w	800abb8 <_dtoa_r+0x920>
 800ae06:	4656      	mov	r6, sl
 800ae08:	9802      	ldr	r0, [sp, #8]
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	f7ff f9b9 	bl	800a182 <quorem>
 800ae10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ae14:	f806 3b01 	strb.w	r3, [r6], #1
 800ae18:	eba6 020a 	sub.w	r2, r6, sl
 800ae1c:	4593      	cmp	fp, r2
 800ae1e:	ddb4      	ble.n	800ad8a <_dtoa_r+0xaf2>
 800ae20:	9902      	ldr	r1, [sp, #8]
 800ae22:	2300      	movs	r3, #0
 800ae24:	220a      	movs	r2, #10
 800ae26:	4648      	mov	r0, r9
 800ae28:	f000 f968 	bl	800b0fc <__multadd>
 800ae2c:	9002      	str	r0, [sp, #8]
 800ae2e:	e7eb      	b.n	800ae08 <_dtoa_r+0xb70>
 800ae30:	0800e070 	.word	0x0800e070
 800ae34:	0800dff4 	.word	0x0800dff4

0800ae38 <_free_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	2900      	cmp	r1, #0
 800ae3e:	d041      	beq.n	800aec4 <_free_r+0x8c>
 800ae40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae44:	1f0c      	subs	r4, r1, #4
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	bfb8      	it	lt
 800ae4a:	18e4      	addlt	r4, r4, r3
 800ae4c:	f000 f8e8 	bl	800b020 <__malloc_lock>
 800ae50:	4a1d      	ldr	r2, [pc, #116]	@ (800aec8 <_free_r+0x90>)
 800ae52:	6813      	ldr	r3, [r2, #0]
 800ae54:	b933      	cbnz	r3, 800ae64 <_free_r+0x2c>
 800ae56:	6063      	str	r3, [r4, #4]
 800ae58:	6014      	str	r4, [r2, #0]
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae60:	f000 b8e4 	b.w	800b02c <__malloc_unlock>
 800ae64:	42a3      	cmp	r3, r4
 800ae66:	d908      	bls.n	800ae7a <_free_r+0x42>
 800ae68:	6820      	ldr	r0, [r4, #0]
 800ae6a:	1821      	adds	r1, r4, r0
 800ae6c:	428b      	cmp	r3, r1
 800ae6e:	bf01      	itttt	eq
 800ae70:	6819      	ldreq	r1, [r3, #0]
 800ae72:	685b      	ldreq	r3, [r3, #4]
 800ae74:	1809      	addeq	r1, r1, r0
 800ae76:	6021      	streq	r1, [r4, #0]
 800ae78:	e7ed      	b.n	800ae56 <_free_r+0x1e>
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	b10b      	cbz	r3, 800ae84 <_free_r+0x4c>
 800ae80:	42a3      	cmp	r3, r4
 800ae82:	d9fa      	bls.n	800ae7a <_free_r+0x42>
 800ae84:	6811      	ldr	r1, [r2, #0]
 800ae86:	1850      	adds	r0, r2, r1
 800ae88:	42a0      	cmp	r0, r4
 800ae8a:	d10b      	bne.n	800aea4 <_free_r+0x6c>
 800ae8c:	6820      	ldr	r0, [r4, #0]
 800ae8e:	4401      	add	r1, r0
 800ae90:	1850      	adds	r0, r2, r1
 800ae92:	4283      	cmp	r3, r0
 800ae94:	6011      	str	r1, [r2, #0]
 800ae96:	d1e0      	bne.n	800ae5a <_free_r+0x22>
 800ae98:	6818      	ldr	r0, [r3, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	6053      	str	r3, [r2, #4]
 800ae9e:	4408      	add	r0, r1
 800aea0:	6010      	str	r0, [r2, #0]
 800aea2:	e7da      	b.n	800ae5a <_free_r+0x22>
 800aea4:	d902      	bls.n	800aeac <_free_r+0x74>
 800aea6:	230c      	movs	r3, #12
 800aea8:	602b      	str	r3, [r5, #0]
 800aeaa:	e7d6      	b.n	800ae5a <_free_r+0x22>
 800aeac:	6820      	ldr	r0, [r4, #0]
 800aeae:	1821      	adds	r1, r4, r0
 800aeb0:	428b      	cmp	r3, r1
 800aeb2:	bf04      	itt	eq
 800aeb4:	6819      	ldreq	r1, [r3, #0]
 800aeb6:	685b      	ldreq	r3, [r3, #4]
 800aeb8:	6063      	str	r3, [r4, #4]
 800aeba:	bf04      	itt	eq
 800aebc:	1809      	addeq	r1, r1, r0
 800aebe:	6021      	streq	r1, [r4, #0]
 800aec0:	6054      	str	r4, [r2, #4]
 800aec2:	e7ca      	b.n	800ae5a <_free_r+0x22>
 800aec4:	bd38      	pop	{r3, r4, r5, pc}
 800aec6:	bf00      	nop
 800aec8:	20001f34 	.word	0x20001f34

0800aecc <malloc>:
 800aecc:	4b02      	ldr	r3, [pc, #8]	@ (800aed8 <malloc+0xc>)
 800aece:	4601      	mov	r1, r0
 800aed0:	6818      	ldr	r0, [r3, #0]
 800aed2:	f000 b825 	b.w	800af20 <_malloc_r>
 800aed6:	bf00      	nop
 800aed8:	20000040 	.word	0x20000040

0800aedc <sbrk_aligned>:
 800aedc:	b570      	push	{r4, r5, r6, lr}
 800aede:	4e0f      	ldr	r6, [pc, #60]	@ (800af1c <sbrk_aligned+0x40>)
 800aee0:	460c      	mov	r4, r1
 800aee2:	6831      	ldr	r1, [r6, #0]
 800aee4:	4605      	mov	r5, r0
 800aee6:	b911      	cbnz	r1, 800aeee <sbrk_aligned+0x12>
 800aee8:	f000 fe3e 	bl	800bb68 <_sbrk_r>
 800aeec:	6030      	str	r0, [r6, #0]
 800aeee:	4621      	mov	r1, r4
 800aef0:	4628      	mov	r0, r5
 800aef2:	f000 fe39 	bl	800bb68 <_sbrk_r>
 800aef6:	1c43      	adds	r3, r0, #1
 800aef8:	d103      	bne.n	800af02 <sbrk_aligned+0x26>
 800aefa:	f04f 34ff 	mov.w	r4, #4294967295
 800aefe:	4620      	mov	r0, r4
 800af00:	bd70      	pop	{r4, r5, r6, pc}
 800af02:	1cc4      	adds	r4, r0, #3
 800af04:	f024 0403 	bic.w	r4, r4, #3
 800af08:	42a0      	cmp	r0, r4
 800af0a:	d0f8      	beq.n	800aefe <sbrk_aligned+0x22>
 800af0c:	1a21      	subs	r1, r4, r0
 800af0e:	4628      	mov	r0, r5
 800af10:	f000 fe2a 	bl	800bb68 <_sbrk_r>
 800af14:	3001      	adds	r0, #1
 800af16:	d1f2      	bne.n	800aefe <sbrk_aligned+0x22>
 800af18:	e7ef      	b.n	800aefa <sbrk_aligned+0x1e>
 800af1a:	bf00      	nop
 800af1c:	20001f30 	.word	0x20001f30

0800af20 <_malloc_r>:
 800af20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af24:	1ccd      	adds	r5, r1, #3
 800af26:	f025 0503 	bic.w	r5, r5, #3
 800af2a:	3508      	adds	r5, #8
 800af2c:	2d0c      	cmp	r5, #12
 800af2e:	bf38      	it	cc
 800af30:	250c      	movcc	r5, #12
 800af32:	2d00      	cmp	r5, #0
 800af34:	4606      	mov	r6, r0
 800af36:	db01      	blt.n	800af3c <_malloc_r+0x1c>
 800af38:	42a9      	cmp	r1, r5
 800af3a:	d904      	bls.n	800af46 <_malloc_r+0x26>
 800af3c:	230c      	movs	r3, #12
 800af3e:	6033      	str	r3, [r6, #0]
 800af40:	2000      	movs	r0, #0
 800af42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b01c <_malloc_r+0xfc>
 800af4a:	f000 f869 	bl	800b020 <__malloc_lock>
 800af4e:	f8d8 3000 	ldr.w	r3, [r8]
 800af52:	461c      	mov	r4, r3
 800af54:	bb44      	cbnz	r4, 800afa8 <_malloc_r+0x88>
 800af56:	4629      	mov	r1, r5
 800af58:	4630      	mov	r0, r6
 800af5a:	f7ff ffbf 	bl	800aedc <sbrk_aligned>
 800af5e:	1c43      	adds	r3, r0, #1
 800af60:	4604      	mov	r4, r0
 800af62:	d158      	bne.n	800b016 <_malloc_r+0xf6>
 800af64:	f8d8 4000 	ldr.w	r4, [r8]
 800af68:	4627      	mov	r7, r4
 800af6a:	2f00      	cmp	r7, #0
 800af6c:	d143      	bne.n	800aff6 <_malloc_r+0xd6>
 800af6e:	2c00      	cmp	r4, #0
 800af70:	d04b      	beq.n	800b00a <_malloc_r+0xea>
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	4639      	mov	r1, r7
 800af76:	4630      	mov	r0, r6
 800af78:	eb04 0903 	add.w	r9, r4, r3
 800af7c:	f000 fdf4 	bl	800bb68 <_sbrk_r>
 800af80:	4581      	cmp	r9, r0
 800af82:	d142      	bne.n	800b00a <_malloc_r+0xea>
 800af84:	6821      	ldr	r1, [r4, #0]
 800af86:	1a6d      	subs	r5, r5, r1
 800af88:	4629      	mov	r1, r5
 800af8a:	4630      	mov	r0, r6
 800af8c:	f7ff ffa6 	bl	800aedc <sbrk_aligned>
 800af90:	3001      	adds	r0, #1
 800af92:	d03a      	beq.n	800b00a <_malloc_r+0xea>
 800af94:	6823      	ldr	r3, [r4, #0]
 800af96:	442b      	add	r3, r5
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	f8d8 3000 	ldr.w	r3, [r8]
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	bb62      	cbnz	r2, 800affc <_malloc_r+0xdc>
 800afa2:	f8c8 7000 	str.w	r7, [r8]
 800afa6:	e00f      	b.n	800afc8 <_malloc_r+0xa8>
 800afa8:	6822      	ldr	r2, [r4, #0]
 800afaa:	1b52      	subs	r2, r2, r5
 800afac:	d420      	bmi.n	800aff0 <_malloc_r+0xd0>
 800afae:	2a0b      	cmp	r2, #11
 800afb0:	d917      	bls.n	800afe2 <_malloc_r+0xc2>
 800afb2:	1961      	adds	r1, r4, r5
 800afb4:	42a3      	cmp	r3, r4
 800afb6:	6025      	str	r5, [r4, #0]
 800afb8:	bf18      	it	ne
 800afba:	6059      	strne	r1, [r3, #4]
 800afbc:	6863      	ldr	r3, [r4, #4]
 800afbe:	bf08      	it	eq
 800afc0:	f8c8 1000 	streq.w	r1, [r8]
 800afc4:	5162      	str	r2, [r4, r5]
 800afc6:	604b      	str	r3, [r1, #4]
 800afc8:	4630      	mov	r0, r6
 800afca:	f000 f82f 	bl	800b02c <__malloc_unlock>
 800afce:	f104 000b 	add.w	r0, r4, #11
 800afd2:	1d23      	adds	r3, r4, #4
 800afd4:	f020 0007 	bic.w	r0, r0, #7
 800afd8:	1ac2      	subs	r2, r0, r3
 800afda:	bf1c      	itt	ne
 800afdc:	1a1b      	subne	r3, r3, r0
 800afde:	50a3      	strne	r3, [r4, r2]
 800afe0:	e7af      	b.n	800af42 <_malloc_r+0x22>
 800afe2:	6862      	ldr	r2, [r4, #4]
 800afe4:	42a3      	cmp	r3, r4
 800afe6:	bf0c      	ite	eq
 800afe8:	f8c8 2000 	streq.w	r2, [r8]
 800afec:	605a      	strne	r2, [r3, #4]
 800afee:	e7eb      	b.n	800afc8 <_malloc_r+0xa8>
 800aff0:	4623      	mov	r3, r4
 800aff2:	6864      	ldr	r4, [r4, #4]
 800aff4:	e7ae      	b.n	800af54 <_malloc_r+0x34>
 800aff6:	463c      	mov	r4, r7
 800aff8:	687f      	ldr	r7, [r7, #4]
 800affa:	e7b6      	b.n	800af6a <_malloc_r+0x4a>
 800affc:	461a      	mov	r2, r3
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	42a3      	cmp	r3, r4
 800b002:	d1fb      	bne.n	800affc <_malloc_r+0xdc>
 800b004:	2300      	movs	r3, #0
 800b006:	6053      	str	r3, [r2, #4]
 800b008:	e7de      	b.n	800afc8 <_malloc_r+0xa8>
 800b00a:	230c      	movs	r3, #12
 800b00c:	6033      	str	r3, [r6, #0]
 800b00e:	4630      	mov	r0, r6
 800b010:	f000 f80c 	bl	800b02c <__malloc_unlock>
 800b014:	e794      	b.n	800af40 <_malloc_r+0x20>
 800b016:	6005      	str	r5, [r0, #0]
 800b018:	e7d6      	b.n	800afc8 <_malloc_r+0xa8>
 800b01a:	bf00      	nop
 800b01c:	20001f34 	.word	0x20001f34

0800b020 <__malloc_lock>:
 800b020:	4801      	ldr	r0, [pc, #4]	@ (800b028 <__malloc_lock+0x8>)
 800b022:	f7ff b8ac 	b.w	800a17e <__retarget_lock_acquire_recursive>
 800b026:	bf00      	nop
 800b028:	20001f2c 	.word	0x20001f2c

0800b02c <__malloc_unlock>:
 800b02c:	4801      	ldr	r0, [pc, #4]	@ (800b034 <__malloc_unlock+0x8>)
 800b02e:	f7ff b8a7 	b.w	800a180 <__retarget_lock_release_recursive>
 800b032:	bf00      	nop
 800b034:	20001f2c 	.word	0x20001f2c

0800b038 <_Balloc>:
 800b038:	b570      	push	{r4, r5, r6, lr}
 800b03a:	69c6      	ldr	r6, [r0, #28]
 800b03c:	4604      	mov	r4, r0
 800b03e:	460d      	mov	r5, r1
 800b040:	b976      	cbnz	r6, 800b060 <_Balloc+0x28>
 800b042:	2010      	movs	r0, #16
 800b044:	f7ff ff42 	bl	800aecc <malloc>
 800b048:	4602      	mov	r2, r0
 800b04a:	61e0      	str	r0, [r4, #28]
 800b04c:	b920      	cbnz	r0, 800b058 <_Balloc+0x20>
 800b04e:	4b18      	ldr	r3, [pc, #96]	@ (800b0b0 <_Balloc+0x78>)
 800b050:	4818      	ldr	r0, [pc, #96]	@ (800b0b4 <_Balloc+0x7c>)
 800b052:	216b      	movs	r1, #107	@ 0x6b
 800b054:	f000 fda6 	bl	800bba4 <__assert_func>
 800b058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b05c:	6006      	str	r6, [r0, #0]
 800b05e:	60c6      	str	r6, [r0, #12]
 800b060:	69e6      	ldr	r6, [r4, #28]
 800b062:	68f3      	ldr	r3, [r6, #12]
 800b064:	b183      	cbz	r3, 800b088 <_Balloc+0x50>
 800b066:	69e3      	ldr	r3, [r4, #28]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b06e:	b9b8      	cbnz	r0, 800b0a0 <_Balloc+0x68>
 800b070:	2101      	movs	r1, #1
 800b072:	fa01 f605 	lsl.w	r6, r1, r5
 800b076:	1d72      	adds	r2, r6, #5
 800b078:	0092      	lsls	r2, r2, #2
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 fdb0 	bl	800bbe0 <_calloc_r>
 800b080:	b160      	cbz	r0, 800b09c <_Balloc+0x64>
 800b082:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b086:	e00e      	b.n	800b0a6 <_Balloc+0x6e>
 800b088:	2221      	movs	r2, #33	@ 0x21
 800b08a:	2104      	movs	r1, #4
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 fda7 	bl	800bbe0 <_calloc_r>
 800b092:	69e3      	ldr	r3, [r4, #28]
 800b094:	60f0      	str	r0, [r6, #12]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1e4      	bne.n	800b066 <_Balloc+0x2e>
 800b09c:	2000      	movs	r0, #0
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
 800b0a0:	6802      	ldr	r2, [r0, #0]
 800b0a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0ac:	e7f7      	b.n	800b09e <_Balloc+0x66>
 800b0ae:	bf00      	nop
 800b0b0:	0800e001 	.word	0x0800e001
 800b0b4:	0800e081 	.word	0x0800e081

0800b0b8 <_Bfree>:
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	69c6      	ldr	r6, [r0, #28]
 800b0bc:	4605      	mov	r5, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	b976      	cbnz	r6, 800b0e0 <_Bfree+0x28>
 800b0c2:	2010      	movs	r0, #16
 800b0c4:	f7ff ff02 	bl	800aecc <malloc>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	61e8      	str	r0, [r5, #28]
 800b0cc:	b920      	cbnz	r0, 800b0d8 <_Bfree+0x20>
 800b0ce:	4b09      	ldr	r3, [pc, #36]	@ (800b0f4 <_Bfree+0x3c>)
 800b0d0:	4809      	ldr	r0, [pc, #36]	@ (800b0f8 <_Bfree+0x40>)
 800b0d2:	218f      	movs	r1, #143	@ 0x8f
 800b0d4:	f000 fd66 	bl	800bba4 <__assert_func>
 800b0d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0dc:	6006      	str	r6, [r0, #0]
 800b0de:	60c6      	str	r6, [r0, #12]
 800b0e0:	b13c      	cbz	r4, 800b0f2 <_Bfree+0x3a>
 800b0e2:	69eb      	ldr	r3, [r5, #28]
 800b0e4:	6862      	ldr	r2, [r4, #4]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0ec:	6021      	str	r1, [r4, #0]
 800b0ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	0800e001 	.word	0x0800e001
 800b0f8:	0800e081 	.word	0x0800e081

0800b0fc <__multadd>:
 800b0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b100:	690d      	ldr	r5, [r1, #16]
 800b102:	4607      	mov	r7, r0
 800b104:	460c      	mov	r4, r1
 800b106:	461e      	mov	r6, r3
 800b108:	f101 0c14 	add.w	ip, r1, #20
 800b10c:	2000      	movs	r0, #0
 800b10e:	f8dc 3000 	ldr.w	r3, [ip]
 800b112:	b299      	uxth	r1, r3
 800b114:	fb02 6101 	mla	r1, r2, r1, r6
 800b118:	0c1e      	lsrs	r6, r3, #16
 800b11a:	0c0b      	lsrs	r3, r1, #16
 800b11c:	fb02 3306 	mla	r3, r2, r6, r3
 800b120:	b289      	uxth	r1, r1
 800b122:	3001      	adds	r0, #1
 800b124:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b128:	4285      	cmp	r5, r0
 800b12a:	f84c 1b04 	str.w	r1, [ip], #4
 800b12e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b132:	dcec      	bgt.n	800b10e <__multadd+0x12>
 800b134:	b30e      	cbz	r6, 800b17a <__multadd+0x7e>
 800b136:	68a3      	ldr	r3, [r4, #8]
 800b138:	42ab      	cmp	r3, r5
 800b13a:	dc19      	bgt.n	800b170 <__multadd+0x74>
 800b13c:	6861      	ldr	r1, [r4, #4]
 800b13e:	4638      	mov	r0, r7
 800b140:	3101      	adds	r1, #1
 800b142:	f7ff ff79 	bl	800b038 <_Balloc>
 800b146:	4680      	mov	r8, r0
 800b148:	b928      	cbnz	r0, 800b156 <__multadd+0x5a>
 800b14a:	4602      	mov	r2, r0
 800b14c:	4b0c      	ldr	r3, [pc, #48]	@ (800b180 <__multadd+0x84>)
 800b14e:	480d      	ldr	r0, [pc, #52]	@ (800b184 <__multadd+0x88>)
 800b150:	21ba      	movs	r1, #186	@ 0xba
 800b152:	f000 fd27 	bl	800bba4 <__assert_func>
 800b156:	6922      	ldr	r2, [r4, #16]
 800b158:	3202      	adds	r2, #2
 800b15a:	f104 010c 	add.w	r1, r4, #12
 800b15e:	0092      	lsls	r2, r2, #2
 800b160:	300c      	adds	r0, #12
 800b162:	f000 fd11 	bl	800bb88 <memcpy>
 800b166:	4621      	mov	r1, r4
 800b168:	4638      	mov	r0, r7
 800b16a:	f7ff ffa5 	bl	800b0b8 <_Bfree>
 800b16e:	4644      	mov	r4, r8
 800b170:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b174:	3501      	adds	r5, #1
 800b176:	615e      	str	r6, [r3, #20]
 800b178:	6125      	str	r5, [r4, #16]
 800b17a:	4620      	mov	r0, r4
 800b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b180:	0800e070 	.word	0x0800e070
 800b184:	0800e081 	.word	0x0800e081

0800b188 <__hi0bits>:
 800b188:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b18c:	4603      	mov	r3, r0
 800b18e:	bf36      	itet	cc
 800b190:	0403      	lslcc	r3, r0, #16
 800b192:	2000      	movcs	r0, #0
 800b194:	2010      	movcc	r0, #16
 800b196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b19a:	bf3c      	itt	cc
 800b19c:	021b      	lslcc	r3, r3, #8
 800b19e:	3008      	addcc	r0, #8
 800b1a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1a4:	bf3c      	itt	cc
 800b1a6:	011b      	lslcc	r3, r3, #4
 800b1a8:	3004      	addcc	r0, #4
 800b1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ae:	bf3c      	itt	cc
 800b1b0:	009b      	lslcc	r3, r3, #2
 800b1b2:	3002      	addcc	r0, #2
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	db05      	blt.n	800b1c4 <__hi0bits+0x3c>
 800b1b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b1bc:	f100 0001 	add.w	r0, r0, #1
 800b1c0:	bf08      	it	eq
 800b1c2:	2020      	moveq	r0, #32
 800b1c4:	4770      	bx	lr

0800b1c6 <__lo0bits>:
 800b1c6:	6803      	ldr	r3, [r0, #0]
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	f013 0007 	ands.w	r0, r3, #7
 800b1ce:	d00b      	beq.n	800b1e8 <__lo0bits+0x22>
 800b1d0:	07d9      	lsls	r1, r3, #31
 800b1d2:	d421      	bmi.n	800b218 <__lo0bits+0x52>
 800b1d4:	0798      	lsls	r0, r3, #30
 800b1d6:	bf49      	itett	mi
 800b1d8:	085b      	lsrmi	r3, r3, #1
 800b1da:	089b      	lsrpl	r3, r3, #2
 800b1dc:	2001      	movmi	r0, #1
 800b1de:	6013      	strmi	r3, [r2, #0]
 800b1e0:	bf5c      	itt	pl
 800b1e2:	6013      	strpl	r3, [r2, #0]
 800b1e4:	2002      	movpl	r0, #2
 800b1e6:	4770      	bx	lr
 800b1e8:	b299      	uxth	r1, r3
 800b1ea:	b909      	cbnz	r1, 800b1f0 <__lo0bits+0x2a>
 800b1ec:	0c1b      	lsrs	r3, r3, #16
 800b1ee:	2010      	movs	r0, #16
 800b1f0:	b2d9      	uxtb	r1, r3
 800b1f2:	b909      	cbnz	r1, 800b1f8 <__lo0bits+0x32>
 800b1f4:	3008      	adds	r0, #8
 800b1f6:	0a1b      	lsrs	r3, r3, #8
 800b1f8:	0719      	lsls	r1, r3, #28
 800b1fa:	bf04      	itt	eq
 800b1fc:	091b      	lsreq	r3, r3, #4
 800b1fe:	3004      	addeq	r0, #4
 800b200:	0799      	lsls	r1, r3, #30
 800b202:	bf04      	itt	eq
 800b204:	089b      	lsreq	r3, r3, #2
 800b206:	3002      	addeq	r0, #2
 800b208:	07d9      	lsls	r1, r3, #31
 800b20a:	d403      	bmi.n	800b214 <__lo0bits+0x4e>
 800b20c:	085b      	lsrs	r3, r3, #1
 800b20e:	f100 0001 	add.w	r0, r0, #1
 800b212:	d003      	beq.n	800b21c <__lo0bits+0x56>
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	4770      	bx	lr
 800b218:	2000      	movs	r0, #0
 800b21a:	4770      	bx	lr
 800b21c:	2020      	movs	r0, #32
 800b21e:	4770      	bx	lr

0800b220 <__i2b>:
 800b220:	b510      	push	{r4, lr}
 800b222:	460c      	mov	r4, r1
 800b224:	2101      	movs	r1, #1
 800b226:	f7ff ff07 	bl	800b038 <_Balloc>
 800b22a:	4602      	mov	r2, r0
 800b22c:	b928      	cbnz	r0, 800b23a <__i2b+0x1a>
 800b22e:	4b05      	ldr	r3, [pc, #20]	@ (800b244 <__i2b+0x24>)
 800b230:	4805      	ldr	r0, [pc, #20]	@ (800b248 <__i2b+0x28>)
 800b232:	f240 1145 	movw	r1, #325	@ 0x145
 800b236:	f000 fcb5 	bl	800bba4 <__assert_func>
 800b23a:	2301      	movs	r3, #1
 800b23c:	6144      	str	r4, [r0, #20]
 800b23e:	6103      	str	r3, [r0, #16]
 800b240:	bd10      	pop	{r4, pc}
 800b242:	bf00      	nop
 800b244:	0800e070 	.word	0x0800e070
 800b248:	0800e081 	.word	0x0800e081

0800b24c <__multiply>:
 800b24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b250:	4617      	mov	r7, r2
 800b252:	690a      	ldr	r2, [r1, #16]
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	429a      	cmp	r2, r3
 800b258:	bfa8      	it	ge
 800b25a:	463b      	movge	r3, r7
 800b25c:	4689      	mov	r9, r1
 800b25e:	bfa4      	itt	ge
 800b260:	460f      	movge	r7, r1
 800b262:	4699      	movge	r9, r3
 800b264:	693d      	ldr	r5, [r7, #16]
 800b266:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	eb05 060a 	add.w	r6, r5, sl
 800b272:	42b3      	cmp	r3, r6
 800b274:	b085      	sub	sp, #20
 800b276:	bfb8      	it	lt
 800b278:	3101      	addlt	r1, #1
 800b27a:	f7ff fedd 	bl	800b038 <_Balloc>
 800b27e:	b930      	cbnz	r0, 800b28e <__multiply+0x42>
 800b280:	4602      	mov	r2, r0
 800b282:	4b41      	ldr	r3, [pc, #260]	@ (800b388 <__multiply+0x13c>)
 800b284:	4841      	ldr	r0, [pc, #260]	@ (800b38c <__multiply+0x140>)
 800b286:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b28a:	f000 fc8b 	bl	800bba4 <__assert_func>
 800b28e:	f100 0414 	add.w	r4, r0, #20
 800b292:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b296:	4623      	mov	r3, r4
 800b298:	2200      	movs	r2, #0
 800b29a:	4573      	cmp	r3, lr
 800b29c:	d320      	bcc.n	800b2e0 <__multiply+0x94>
 800b29e:	f107 0814 	add.w	r8, r7, #20
 800b2a2:	f109 0114 	add.w	r1, r9, #20
 800b2a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b2aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b2ae:	9302      	str	r3, [sp, #8]
 800b2b0:	1beb      	subs	r3, r5, r7
 800b2b2:	3b15      	subs	r3, #21
 800b2b4:	f023 0303 	bic.w	r3, r3, #3
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	3715      	adds	r7, #21
 800b2bc:	42bd      	cmp	r5, r7
 800b2be:	bf38      	it	cc
 800b2c0:	2304      	movcc	r3, #4
 800b2c2:	9301      	str	r3, [sp, #4]
 800b2c4:	9b02      	ldr	r3, [sp, #8]
 800b2c6:	9103      	str	r1, [sp, #12]
 800b2c8:	428b      	cmp	r3, r1
 800b2ca:	d80c      	bhi.n	800b2e6 <__multiply+0x9a>
 800b2cc:	2e00      	cmp	r6, #0
 800b2ce:	dd03      	ble.n	800b2d8 <__multiply+0x8c>
 800b2d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d055      	beq.n	800b384 <__multiply+0x138>
 800b2d8:	6106      	str	r6, [r0, #16]
 800b2da:	b005      	add	sp, #20
 800b2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e0:	f843 2b04 	str.w	r2, [r3], #4
 800b2e4:	e7d9      	b.n	800b29a <__multiply+0x4e>
 800b2e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b2ea:	f1ba 0f00 	cmp.w	sl, #0
 800b2ee:	d01f      	beq.n	800b330 <__multiply+0xe4>
 800b2f0:	46c4      	mov	ip, r8
 800b2f2:	46a1      	mov	r9, r4
 800b2f4:	2700      	movs	r7, #0
 800b2f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2fa:	f8d9 3000 	ldr.w	r3, [r9]
 800b2fe:	fa1f fb82 	uxth.w	fp, r2
 800b302:	b29b      	uxth	r3, r3
 800b304:	fb0a 330b 	mla	r3, sl, fp, r3
 800b308:	443b      	add	r3, r7
 800b30a:	f8d9 7000 	ldr.w	r7, [r9]
 800b30e:	0c12      	lsrs	r2, r2, #16
 800b310:	0c3f      	lsrs	r7, r7, #16
 800b312:	fb0a 7202 	mla	r2, sl, r2, r7
 800b316:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b320:	4565      	cmp	r5, ip
 800b322:	f849 3b04 	str.w	r3, [r9], #4
 800b326:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b32a:	d8e4      	bhi.n	800b2f6 <__multiply+0xaa>
 800b32c:	9b01      	ldr	r3, [sp, #4]
 800b32e:	50e7      	str	r7, [r4, r3]
 800b330:	9b03      	ldr	r3, [sp, #12]
 800b332:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b336:	3104      	adds	r1, #4
 800b338:	f1b9 0f00 	cmp.w	r9, #0
 800b33c:	d020      	beq.n	800b380 <__multiply+0x134>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	4647      	mov	r7, r8
 800b342:	46a4      	mov	ip, r4
 800b344:	f04f 0a00 	mov.w	sl, #0
 800b348:	f8b7 b000 	ldrh.w	fp, [r7]
 800b34c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b350:	fb09 220b 	mla	r2, r9, fp, r2
 800b354:	4452      	add	r2, sl
 800b356:	b29b      	uxth	r3, r3
 800b358:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b35c:	f84c 3b04 	str.w	r3, [ip], #4
 800b360:	f857 3b04 	ldr.w	r3, [r7], #4
 800b364:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b368:	f8bc 3000 	ldrh.w	r3, [ip]
 800b36c:	fb09 330a 	mla	r3, r9, sl, r3
 800b370:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b374:	42bd      	cmp	r5, r7
 800b376:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b37a:	d8e5      	bhi.n	800b348 <__multiply+0xfc>
 800b37c:	9a01      	ldr	r2, [sp, #4]
 800b37e:	50a3      	str	r3, [r4, r2]
 800b380:	3404      	adds	r4, #4
 800b382:	e79f      	b.n	800b2c4 <__multiply+0x78>
 800b384:	3e01      	subs	r6, #1
 800b386:	e7a1      	b.n	800b2cc <__multiply+0x80>
 800b388:	0800e070 	.word	0x0800e070
 800b38c:	0800e081 	.word	0x0800e081

0800b390 <__pow5mult>:
 800b390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b394:	4615      	mov	r5, r2
 800b396:	f012 0203 	ands.w	r2, r2, #3
 800b39a:	4607      	mov	r7, r0
 800b39c:	460e      	mov	r6, r1
 800b39e:	d007      	beq.n	800b3b0 <__pow5mult+0x20>
 800b3a0:	4c25      	ldr	r4, [pc, #148]	@ (800b438 <__pow5mult+0xa8>)
 800b3a2:	3a01      	subs	r2, #1
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3aa:	f7ff fea7 	bl	800b0fc <__multadd>
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	10ad      	asrs	r5, r5, #2
 800b3b2:	d03d      	beq.n	800b430 <__pow5mult+0xa0>
 800b3b4:	69fc      	ldr	r4, [r7, #28]
 800b3b6:	b97c      	cbnz	r4, 800b3d8 <__pow5mult+0x48>
 800b3b8:	2010      	movs	r0, #16
 800b3ba:	f7ff fd87 	bl	800aecc <malloc>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	61f8      	str	r0, [r7, #28]
 800b3c2:	b928      	cbnz	r0, 800b3d0 <__pow5mult+0x40>
 800b3c4:	4b1d      	ldr	r3, [pc, #116]	@ (800b43c <__pow5mult+0xac>)
 800b3c6:	481e      	ldr	r0, [pc, #120]	@ (800b440 <__pow5mult+0xb0>)
 800b3c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b3cc:	f000 fbea 	bl	800bba4 <__assert_func>
 800b3d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3d4:	6004      	str	r4, [r0, #0]
 800b3d6:	60c4      	str	r4, [r0, #12]
 800b3d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b3dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3e0:	b94c      	cbnz	r4, 800b3f6 <__pow5mult+0x66>
 800b3e2:	f240 2171 	movw	r1, #625	@ 0x271
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f7ff ff1a 	bl	800b220 <__i2b>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	6003      	str	r3, [r0, #0]
 800b3f6:	f04f 0900 	mov.w	r9, #0
 800b3fa:	07eb      	lsls	r3, r5, #31
 800b3fc:	d50a      	bpl.n	800b414 <__pow5mult+0x84>
 800b3fe:	4631      	mov	r1, r6
 800b400:	4622      	mov	r2, r4
 800b402:	4638      	mov	r0, r7
 800b404:	f7ff ff22 	bl	800b24c <__multiply>
 800b408:	4631      	mov	r1, r6
 800b40a:	4680      	mov	r8, r0
 800b40c:	4638      	mov	r0, r7
 800b40e:	f7ff fe53 	bl	800b0b8 <_Bfree>
 800b412:	4646      	mov	r6, r8
 800b414:	106d      	asrs	r5, r5, #1
 800b416:	d00b      	beq.n	800b430 <__pow5mult+0xa0>
 800b418:	6820      	ldr	r0, [r4, #0]
 800b41a:	b938      	cbnz	r0, 800b42c <__pow5mult+0x9c>
 800b41c:	4622      	mov	r2, r4
 800b41e:	4621      	mov	r1, r4
 800b420:	4638      	mov	r0, r7
 800b422:	f7ff ff13 	bl	800b24c <__multiply>
 800b426:	6020      	str	r0, [r4, #0]
 800b428:	f8c0 9000 	str.w	r9, [r0]
 800b42c:	4604      	mov	r4, r0
 800b42e:	e7e4      	b.n	800b3fa <__pow5mult+0x6a>
 800b430:	4630      	mov	r0, r6
 800b432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b436:	bf00      	nop
 800b438:	0800e134 	.word	0x0800e134
 800b43c:	0800e001 	.word	0x0800e001
 800b440:	0800e081 	.word	0x0800e081

0800b444 <__lshift>:
 800b444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b448:	460c      	mov	r4, r1
 800b44a:	6849      	ldr	r1, [r1, #4]
 800b44c:	6923      	ldr	r3, [r4, #16]
 800b44e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b452:	68a3      	ldr	r3, [r4, #8]
 800b454:	4607      	mov	r7, r0
 800b456:	4691      	mov	r9, r2
 800b458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b45c:	f108 0601 	add.w	r6, r8, #1
 800b460:	42b3      	cmp	r3, r6
 800b462:	db0b      	blt.n	800b47c <__lshift+0x38>
 800b464:	4638      	mov	r0, r7
 800b466:	f7ff fde7 	bl	800b038 <_Balloc>
 800b46a:	4605      	mov	r5, r0
 800b46c:	b948      	cbnz	r0, 800b482 <__lshift+0x3e>
 800b46e:	4602      	mov	r2, r0
 800b470:	4b28      	ldr	r3, [pc, #160]	@ (800b514 <__lshift+0xd0>)
 800b472:	4829      	ldr	r0, [pc, #164]	@ (800b518 <__lshift+0xd4>)
 800b474:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b478:	f000 fb94 	bl	800bba4 <__assert_func>
 800b47c:	3101      	adds	r1, #1
 800b47e:	005b      	lsls	r3, r3, #1
 800b480:	e7ee      	b.n	800b460 <__lshift+0x1c>
 800b482:	2300      	movs	r3, #0
 800b484:	f100 0114 	add.w	r1, r0, #20
 800b488:	f100 0210 	add.w	r2, r0, #16
 800b48c:	4618      	mov	r0, r3
 800b48e:	4553      	cmp	r3, sl
 800b490:	db33      	blt.n	800b4fa <__lshift+0xb6>
 800b492:	6920      	ldr	r0, [r4, #16]
 800b494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b498:	f104 0314 	add.w	r3, r4, #20
 800b49c:	f019 091f 	ands.w	r9, r9, #31
 800b4a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4a8:	d02b      	beq.n	800b502 <__lshift+0xbe>
 800b4aa:	f1c9 0e20 	rsb	lr, r9, #32
 800b4ae:	468a      	mov	sl, r1
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	6818      	ldr	r0, [r3, #0]
 800b4b4:	fa00 f009 	lsl.w	r0, r0, r9
 800b4b8:	4310      	orrs	r0, r2
 800b4ba:	f84a 0b04 	str.w	r0, [sl], #4
 800b4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c2:	459c      	cmp	ip, r3
 800b4c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4c8:	d8f3      	bhi.n	800b4b2 <__lshift+0x6e>
 800b4ca:	ebac 0304 	sub.w	r3, ip, r4
 800b4ce:	3b15      	subs	r3, #21
 800b4d0:	f023 0303 	bic.w	r3, r3, #3
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	f104 0015 	add.w	r0, r4, #21
 800b4da:	4560      	cmp	r0, ip
 800b4dc:	bf88      	it	hi
 800b4de:	2304      	movhi	r3, #4
 800b4e0:	50ca      	str	r2, [r1, r3]
 800b4e2:	b10a      	cbz	r2, 800b4e8 <__lshift+0xa4>
 800b4e4:	f108 0602 	add.w	r6, r8, #2
 800b4e8:	3e01      	subs	r6, #1
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	612e      	str	r6, [r5, #16]
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	f7ff fde2 	bl	800b0b8 <_Bfree>
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4fe:	3301      	adds	r3, #1
 800b500:	e7c5      	b.n	800b48e <__lshift+0x4a>
 800b502:	3904      	subs	r1, #4
 800b504:	f853 2b04 	ldr.w	r2, [r3], #4
 800b508:	f841 2f04 	str.w	r2, [r1, #4]!
 800b50c:	459c      	cmp	ip, r3
 800b50e:	d8f9      	bhi.n	800b504 <__lshift+0xc0>
 800b510:	e7ea      	b.n	800b4e8 <__lshift+0xa4>
 800b512:	bf00      	nop
 800b514:	0800e070 	.word	0x0800e070
 800b518:	0800e081 	.word	0x0800e081

0800b51c <__mcmp>:
 800b51c:	690a      	ldr	r2, [r1, #16]
 800b51e:	4603      	mov	r3, r0
 800b520:	6900      	ldr	r0, [r0, #16]
 800b522:	1a80      	subs	r0, r0, r2
 800b524:	b530      	push	{r4, r5, lr}
 800b526:	d10e      	bne.n	800b546 <__mcmp+0x2a>
 800b528:	3314      	adds	r3, #20
 800b52a:	3114      	adds	r1, #20
 800b52c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b530:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b534:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b538:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b53c:	4295      	cmp	r5, r2
 800b53e:	d003      	beq.n	800b548 <__mcmp+0x2c>
 800b540:	d205      	bcs.n	800b54e <__mcmp+0x32>
 800b542:	f04f 30ff 	mov.w	r0, #4294967295
 800b546:	bd30      	pop	{r4, r5, pc}
 800b548:	42a3      	cmp	r3, r4
 800b54a:	d3f3      	bcc.n	800b534 <__mcmp+0x18>
 800b54c:	e7fb      	b.n	800b546 <__mcmp+0x2a>
 800b54e:	2001      	movs	r0, #1
 800b550:	e7f9      	b.n	800b546 <__mcmp+0x2a>
	...

0800b554 <__mdiff>:
 800b554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b558:	4689      	mov	r9, r1
 800b55a:	4606      	mov	r6, r0
 800b55c:	4611      	mov	r1, r2
 800b55e:	4648      	mov	r0, r9
 800b560:	4614      	mov	r4, r2
 800b562:	f7ff ffdb 	bl	800b51c <__mcmp>
 800b566:	1e05      	subs	r5, r0, #0
 800b568:	d112      	bne.n	800b590 <__mdiff+0x3c>
 800b56a:	4629      	mov	r1, r5
 800b56c:	4630      	mov	r0, r6
 800b56e:	f7ff fd63 	bl	800b038 <_Balloc>
 800b572:	4602      	mov	r2, r0
 800b574:	b928      	cbnz	r0, 800b582 <__mdiff+0x2e>
 800b576:	4b3f      	ldr	r3, [pc, #252]	@ (800b674 <__mdiff+0x120>)
 800b578:	f240 2137 	movw	r1, #567	@ 0x237
 800b57c:	483e      	ldr	r0, [pc, #248]	@ (800b678 <__mdiff+0x124>)
 800b57e:	f000 fb11 	bl	800bba4 <__assert_func>
 800b582:	2301      	movs	r3, #1
 800b584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b588:	4610      	mov	r0, r2
 800b58a:	b003      	add	sp, #12
 800b58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b590:	bfbc      	itt	lt
 800b592:	464b      	movlt	r3, r9
 800b594:	46a1      	movlt	r9, r4
 800b596:	4630      	mov	r0, r6
 800b598:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b59c:	bfba      	itte	lt
 800b59e:	461c      	movlt	r4, r3
 800b5a0:	2501      	movlt	r5, #1
 800b5a2:	2500      	movge	r5, #0
 800b5a4:	f7ff fd48 	bl	800b038 <_Balloc>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	b918      	cbnz	r0, 800b5b4 <__mdiff+0x60>
 800b5ac:	4b31      	ldr	r3, [pc, #196]	@ (800b674 <__mdiff+0x120>)
 800b5ae:	f240 2145 	movw	r1, #581	@ 0x245
 800b5b2:	e7e3      	b.n	800b57c <__mdiff+0x28>
 800b5b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b5b8:	6926      	ldr	r6, [r4, #16]
 800b5ba:	60c5      	str	r5, [r0, #12]
 800b5bc:	f109 0310 	add.w	r3, r9, #16
 800b5c0:	f109 0514 	add.w	r5, r9, #20
 800b5c4:	f104 0e14 	add.w	lr, r4, #20
 800b5c8:	f100 0b14 	add.w	fp, r0, #20
 800b5cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b5d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	46d9      	mov	r9, fp
 800b5d8:	f04f 0c00 	mov.w	ip, #0
 800b5dc:	9b01      	ldr	r3, [sp, #4]
 800b5de:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b5e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b5e6:	9301      	str	r3, [sp, #4]
 800b5e8:	fa1f f38a 	uxth.w	r3, sl
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	b283      	uxth	r3, r0
 800b5f0:	1acb      	subs	r3, r1, r3
 800b5f2:	0c00      	lsrs	r0, r0, #16
 800b5f4:	4463      	add	r3, ip
 800b5f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b604:	4576      	cmp	r6, lr
 800b606:	f849 3b04 	str.w	r3, [r9], #4
 800b60a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b60e:	d8e5      	bhi.n	800b5dc <__mdiff+0x88>
 800b610:	1b33      	subs	r3, r6, r4
 800b612:	3b15      	subs	r3, #21
 800b614:	f023 0303 	bic.w	r3, r3, #3
 800b618:	3415      	adds	r4, #21
 800b61a:	3304      	adds	r3, #4
 800b61c:	42a6      	cmp	r6, r4
 800b61e:	bf38      	it	cc
 800b620:	2304      	movcc	r3, #4
 800b622:	441d      	add	r5, r3
 800b624:	445b      	add	r3, fp
 800b626:	461e      	mov	r6, r3
 800b628:	462c      	mov	r4, r5
 800b62a:	4544      	cmp	r4, r8
 800b62c:	d30e      	bcc.n	800b64c <__mdiff+0xf8>
 800b62e:	f108 0103 	add.w	r1, r8, #3
 800b632:	1b49      	subs	r1, r1, r5
 800b634:	f021 0103 	bic.w	r1, r1, #3
 800b638:	3d03      	subs	r5, #3
 800b63a:	45a8      	cmp	r8, r5
 800b63c:	bf38      	it	cc
 800b63e:	2100      	movcc	r1, #0
 800b640:	440b      	add	r3, r1
 800b642:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b646:	b191      	cbz	r1, 800b66e <__mdiff+0x11a>
 800b648:	6117      	str	r7, [r2, #16]
 800b64a:	e79d      	b.n	800b588 <__mdiff+0x34>
 800b64c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b650:	46e6      	mov	lr, ip
 800b652:	0c08      	lsrs	r0, r1, #16
 800b654:	fa1c fc81 	uxtah	ip, ip, r1
 800b658:	4471      	add	r1, lr
 800b65a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b65e:	b289      	uxth	r1, r1
 800b660:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b664:	f846 1b04 	str.w	r1, [r6], #4
 800b668:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b66c:	e7dd      	b.n	800b62a <__mdiff+0xd6>
 800b66e:	3f01      	subs	r7, #1
 800b670:	e7e7      	b.n	800b642 <__mdiff+0xee>
 800b672:	bf00      	nop
 800b674:	0800e070 	.word	0x0800e070
 800b678:	0800e081 	.word	0x0800e081

0800b67c <__d2b>:
 800b67c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b680:	460f      	mov	r7, r1
 800b682:	2101      	movs	r1, #1
 800b684:	ec59 8b10 	vmov	r8, r9, d0
 800b688:	4616      	mov	r6, r2
 800b68a:	f7ff fcd5 	bl	800b038 <_Balloc>
 800b68e:	4604      	mov	r4, r0
 800b690:	b930      	cbnz	r0, 800b6a0 <__d2b+0x24>
 800b692:	4602      	mov	r2, r0
 800b694:	4b23      	ldr	r3, [pc, #140]	@ (800b724 <__d2b+0xa8>)
 800b696:	4824      	ldr	r0, [pc, #144]	@ (800b728 <__d2b+0xac>)
 800b698:	f240 310f 	movw	r1, #783	@ 0x30f
 800b69c:	f000 fa82 	bl	800bba4 <__assert_func>
 800b6a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6a8:	b10d      	cbz	r5, 800b6ae <__d2b+0x32>
 800b6aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	f1b8 0300 	subs.w	r3, r8, #0
 800b6b4:	d023      	beq.n	800b6fe <__d2b+0x82>
 800b6b6:	4668      	mov	r0, sp
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	f7ff fd84 	bl	800b1c6 <__lo0bits>
 800b6be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6c2:	b1d0      	cbz	r0, 800b6fa <__d2b+0x7e>
 800b6c4:	f1c0 0320 	rsb	r3, r0, #32
 800b6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6cc:	430b      	orrs	r3, r1
 800b6ce:	40c2      	lsrs	r2, r0
 800b6d0:	6163      	str	r3, [r4, #20]
 800b6d2:	9201      	str	r2, [sp, #4]
 800b6d4:	9b01      	ldr	r3, [sp, #4]
 800b6d6:	61a3      	str	r3, [r4, #24]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	bf0c      	ite	eq
 800b6dc:	2201      	moveq	r2, #1
 800b6de:	2202      	movne	r2, #2
 800b6e0:	6122      	str	r2, [r4, #16]
 800b6e2:	b1a5      	cbz	r5, 800b70e <__d2b+0x92>
 800b6e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6e8:	4405      	add	r5, r0
 800b6ea:	603d      	str	r5, [r7, #0]
 800b6ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6f0:	6030      	str	r0, [r6, #0]
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	b003      	add	sp, #12
 800b6f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6fa:	6161      	str	r1, [r4, #20]
 800b6fc:	e7ea      	b.n	800b6d4 <__d2b+0x58>
 800b6fe:	a801      	add	r0, sp, #4
 800b700:	f7ff fd61 	bl	800b1c6 <__lo0bits>
 800b704:	9b01      	ldr	r3, [sp, #4]
 800b706:	6163      	str	r3, [r4, #20]
 800b708:	3020      	adds	r0, #32
 800b70a:	2201      	movs	r2, #1
 800b70c:	e7e8      	b.n	800b6e0 <__d2b+0x64>
 800b70e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b712:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b716:	6038      	str	r0, [r7, #0]
 800b718:	6918      	ldr	r0, [r3, #16]
 800b71a:	f7ff fd35 	bl	800b188 <__hi0bits>
 800b71e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b722:	e7e5      	b.n	800b6f0 <__d2b+0x74>
 800b724:	0800e070 	.word	0x0800e070
 800b728:	0800e081 	.word	0x0800e081

0800b72c <__ssputs_r>:
 800b72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b730:	688e      	ldr	r6, [r1, #8]
 800b732:	461f      	mov	r7, r3
 800b734:	42be      	cmp	r6, r7
 800b736:	680b      	ldr	r3, [r1, #0]
 800b738:	4682      	mov	sl, r0
 800b73a:	460c      	mov	r4, r1
 800b73c:	4690      	mov	r8, r2
 800b73e:	d82d      	bhi.n	800b79c <__ssputs_r+0x70>
 800b740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b744:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b748:	d026      	beq.n	800b798 <__ssputs_r+0x6c>
 800b74a:	6965      	ldr	r5, [r4, #20]
 800b74c:	6909      	ldr	r1, [r1, #16]
 800b74e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b752:	eba3 0901 	sub.w	r9, r3, r1
 800b756:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b75a:	1c7b      	adds	r3, r7, #1
 800b75c:	444b      	add	r3, r9
 800b75e:	106d      	asrs	r5, r5, #1
 800b760:	429d      	cmp	r5, r3
 800b762:	bf38      	it	cc
 800b764:	461d      	movcc	r5, r3
 800b766:	0553      	lsls	r3, r2, #21
 800b768:	d527      	bpl.n	800b7ba <__ssputs_r+0x8e>
 800b76a:	4629      	mov	r1, r5
 800b76c:	f7ff fbd8 	bl	800af20 <_malloc_r>
 800b770:	4606      	mov	r6, r0
 800b772:	b360      	cbz	r0, 800b7ce <__ssputs_r+0xa2>
 800b774:	6921      	ldr	r1, [r4, #16]
 800b776:	464a      	mov	r2, r9
 800b778:	f000 fa06 	bl	800bb88 <memcpy>
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	6126      	str	r6, [r4, #16]
 800b78a:	6165      	str	r5, [r4, #20]
 800b78c:	444e      	add	r6, r9
 800b78e:	eba5 0509 	sub.w	r5, r5, r9
 800b792:	6026      	str	r6, [r4, #0]
 800b794:	60a5      	str	r5, [r4, #8]
 800b796:	463e      	mov	r6, r7
 800b798:	42be      	cmp	r6, r7
 800b79a:	d900      	bls.n	800b79e <__ssputs_r+0x72>
 800b79c:	463e      	mov	r6, r7
 800b79e:	6820      	ldr	r0, [r4, #0]
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	4641      	mov	r1, r8
 800b7a4:	f000 f9c6 	bl	800bb34 <memmove>
 800b7a8:	68a3      	ldr	r3, [r4, #8]
 800b7aa:	1b9b      	subs	r3, r3, r6
 800b7ac:	60a3      	str	r3, [r4, #8]
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	4433      	add	r3, r6
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ba:	462a      	mov	r2, r5
 800b7bc:	f000 fa36 	bl	800bc2c <_realloc_r>
 800b7c0:	4606      	mov	r6, r0
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d1e0      	bne.n	800b788 <__ssputs_r+0x5c>
 800b7c6:	6921      	ldr	r1, [r4, #16]
 800b7c8:	4650      	mov	r0, sl
 800b7ca:	f7ff fb35 	bl	800ae38 <_free_r>
 800b7ce:	230c      	movs	r3, #12
 800b7d0:	f8ca 3000 	str.w	r3, [sl]
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7da:	81a3      	strh	r3, [r4, #12]
 800b7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e0:	e7e9      	b.n	800b7b6 <__ssputs_r+0x8a>
	...

0800b7e4 <_svfiprintf_r>:
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	4698      	mov	r8, r3
 800b7ea:	898b      	ldrh	r3, [r1, #12]
 800b7ec:	061b      	lsls	r3, r3, #24
 800b7ee:	b09d      	sub	sp, #116	@ 0x74
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	460d      	mov	r5, r1
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	d510      	bpl.n	800b81a <_svfiprintf_r+0x36>
 800b7f8:	690b      	ldr	r3, [r1, #16]
 800b7fa:	b973      	cbnz	r3, 800b81a <_svfiprintf_r+0x36>
 800b7fc:	2140      	movs	r1, #64	@ 0x40
 800b7fe:	f7ff fb8f 	bl	800af20 <_malloc_r>
 800b802:	6028      	str	r0, [r5, #0]
 800b804:	6128      	str	r0, [r5, #16]
 800b806:	b930      	cbnz	r0, 800b816 <_svfiprintf_r+0x32>
 800b808:	230c      	movs	r3, #12
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295
 800b810:	b01d      	add	sp, #116	@ 0x74
 800b812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b816:	2340      	movs	r3, #64	@ 0x40
 800b818:	616b      	str	r3, [r5, #20]
 800b81a:	2300      	movs	r3, #0
 800b81c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b81e:	2320      	movs	r3, #32
 800b820:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b824:	f8cd 800c 	str.w	r8, [sp, #12]
 800b828:	2330      	movs	r3, #48	@ 0x30
 800b82a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9c8 <_svfiprintf_r+0x1e4>
 800b82e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b832:	f04f 0901 	mov.w	r9, #1
 800b836:	4623      	mov	r3, r4
 800b838:	469a      	mov	sl, r3
 800b83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b83e:	b10a      	cbz	r2, 800b844 <_svfiprintf_r+0x60>
 800b840:	2a25      	cmp	r2, #37	@ 0x25
 800b842:	d1f9      	bne.n	800b838 <_svfiprintf_r+0x54>
 800b844:	ebba 0b04 	subs.w	fp, sl, r4
 800b848:	d00b      	beq.n	800b862 <_svfiprintf_r+0x7e>
 800b84a:	465b      	mov	r3, fp
 800b84c:	4622      	mov	r2, r4
 800b84e:	4629      	mov	r1, r5
 800b850:	4638      	mov	r0, r7
 800b852:	f7ff ff6b 	bl	800b72c <__ssputs_r>
 800b856:	3001      	adds	r0, #1
 800b858:	f000 80a7 	beq.w	800b9aa <_svfiprintf_r+0x1c6>
 800b85c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b85e:	445a      	add	r2, fp
 800b860:	9209      	str	r2, [sp, #36]	@ 0x24
 800b862:	f89a 3000 	ldrb.w	r3, [sl]
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 809f 	beq.w	800b9aa <_svfiprintf_r+0x1c6>
 800b86c:	2300      	movs	r3, #0
 800b86e:	f04f 32ff 	mov.w	r2, #4294967295
 800b872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b876:	f10a 0a01 	add.w	sl, sl, #1
 800b87a:	9304      	str	r3, [sp, #16]
 800b87c:	9307      	str	r3, [sp, #28]
 800b87e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b882:	931a      	str	r3, [sp, #104]	@ 0x68
 800b884:	4654      	mov	r4, sl
 800b886:	2205      	movs	r2, #5
 800b888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b88c:	484e      	ldr	r0, [pc, #312]	@ (800b9c8 <_svfiprintf_r+0x1e4>)
 800b88e:	f7f4 fca7 	bl	80001e0 <memchr>
 800b892:	9a04      	ldr	r2, [sp, #16]
 800b894:	b9d8      	cbnz	r0, 800b8ce <_svfiprintf_r+0xea>
 800b896:	06d0      	lsls	r0, r2, #27
 800b898:	bf44      	itt	mi
 800b89a:	2320      	movmi	r3, #32
 800b89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8a0:	0711      	lsls	r1, r2, #28
 800b8a2:	bf44      	itt	mi
 800b8a4:	232b      	movmi	r3, #43	@ 0x2b
 800b8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8b0:	d015      	beq.n	800b8de <_svfiprintf_r+0xfa>
 800b8b2:	9a07      	ldr	r2, [sp, #28]
 800b8b4:	4654      	mov	r4, sl
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	f04f 0c0a 	mov.w	ip, #10
 800b8bc:	4621      	mov	r1, r4
 800b8be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8c2:	3b30      	subs	r3, #48	@ 0x30
 800b8c4:	2b09      	cmp	r3, #9
 800b8c6:	d94b      	bls.n	800b960 <_svfiprintf_r+0x17c>
 800b8c8:	b1b0      	cbz	r0, 800b8f8 <_svfiprintf_r+0x114>
 800b8ca:	9207      	str	r2, [sp, #28]
 800b8cc:	e014      	b.n	800b8f8 <_svfiprintf_r+0x114>
 800b8ce:	eba0 0308 	sub.w	r3, r0, r8
 800b8d2:	fa09 f303 	lsl.w	r3, r9, r3
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	9304      	str	r3, [sp, #16]
 800b8da:	46a2      	mov	sl, r4
 800b8dc:	e7d2      	b.n	800b884 <_svfiprintf_r+0xa0>
 800b8de:	9b03      	ldr	r3, [sp, #12]
 800b8e0:	1d19      	adds	r1, r3, #4
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	9103      	str	r1, [sp, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	bfbb      	ittet	lt
 800b8ea:	425b      	neglt	r3, r3
 800b8ec:	f042 0202 	orrlt.w	r2, r2, #2
 800b8f0:	9307      	strge	r3, [sp, #28]
 800b8f2:	9307      	strlt	r3, [sp, #28]
 800b8f4:	bfb8      	it	lt
 800b8f6:	9204      	strlt	r2, [sp, #16]
 800b8f8:	7823      	ldrb	r3, [r4, #0]
 800b8fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8fc:	d10a      	bne.n	800b914 <_svfiprintf_r+0x130>
 800b8fe:	7863      	ldrb	r3, [r4, #1]
 800b900:	2b2a      	cmp	r3, #42	@ 0x2a
 800b902:	d132      	bne.n	800b96a <_svfiprintf_r+0x186>
 800b904:	9b03      	ldr	r3, [sp, #12]
 800b906:	1d1a      	adds	r2, r3, #4
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	9203      	str	r2, [sp, #12]
 800b90c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b910:	3402      	adds	r4, #2
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9d8 <_svfiprintf_r+0x1f4>
 800b918:	7821      	ldrb	r1, [r4, #0]
 800b91a:	2203      	movs	r2, #3
 800b91c:	4650      	mov	r0, sl
 800b91e:	f7f4 fc5f 	bl	80001e0 <memchr>
 800b922:	b138      	cbz	r0, 800b934 <_svfiprintf_r+0x150>
 800b924:	9b04      	ldr	r3, [sp, #16]
 800b926:	eba0 000a 	sub.w	r0, r0, sl
 800b92a:	2240      	movs	r2, #64	@ 0x40
 800b92c:	4082      	lsls	r2, r0
 800b92e:	4313      	orrs	r3, r2
 800b930:	3401      	adds	r4, #1
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b938:	4824      	ldr	r0, [pc, #144]	@ (800b9cc <_svfiprintf_r+0x1e8>)
 800b93a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b93e:	2206      	movs	r2, #6
 800b940:	f7f4 fc4e 	bl	80001e0 <memchr>
 800b944:	2800      	cmp	r0, #0
 800b946:	d036      	beq.n	800b9b6 <_svfiprintf_r+0x1d2>
 800b948:	4b21      	ldr	r3, [pc, #132]	@ (800b9d0 <_svfiprintf_r+0x1ec>)
 800b94a:	bb1b      	cbnz	r3, 800b994 <_svfiprintf_r+0x1b0>
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	3307      	adds	r3, #7
 800b950:	f023 0307 	bic.w	r3, r3, #7
 800b954:	3308      	adds	r3, #8
 800b956:	9303      	str	r3, [sp, #12]
 800b958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b95a:	4433      	add	r3, r6
 800b95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b95e:	e76a      	b.n	800b836 <_svfiprintf_r+0x52>
 800b960:	fb0c 3202 	mla	r2, ip, r2, r3
 800b964:	460c      	mov	r4, r1
 800b966:	2001      	movs	r0, #1
 800b968:	e7a8      	b.n	800b8bc <_svfiprintf_r+0xd8>
 800b96a:	2300      	movs	r3, #0
 800b96c:	3401      	adds	r4, #1
 800b96e:	9305      	str	r3, [sp, #20]
 800b970:	4619      	mov	r1, r3
 800b972:	f04f 0c0a 	mov.w	ip, #10
 800b976:	4620      	mov	r0, r4
 800b978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b97c:	3a30      	subs	r2, #48	@ 0x30
 800b97e:	2a09      	cmp	r2, #9
 800b980:	d903      	bls.n	800b98a <_svfiprintf_r+0x1a6>
 800b982:	2b00      	cmp	r3, #0
 800b984:	d0c6      	beq.n	800b914 <_svfiprintf_r+0x130>
 800b986:	9105      	str	r1, [sp, #20]
 800b988:	e7c4      	b.n	800b914 <_svfiprintf_r+0x130>
 800b98a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b98e:	4604      	mov	r4, r0
 800b990:	2301      	movs	r3, #1
 800b992:	e7f0      	b.n	800b976 <_svfiprintf_r+0x192>
 800b994:	ab03      	add	r3, sp, #12
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	462a      	mov	r2, r5
 800b99a:	4b0e      	ldr	r3, [pc, #56]	@ (800b9d4 <_svfiprintf_r+0x1f0>)
 800b99c:	a904      	add	r1, sp, #16
 800b99e:	4638      	mov	r0, r7
 800b9a0:	f7fd fe46 	bl	8009630 <_printf_float>
 800b9a4:	1c42      	adds	r2, r0, #1
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	d1d6      	bne.n	800b958 <_svfiprintf_r+0x174>
 800b9aa:	89ab      	ldrh	r3, [r5, #12]
 800b9ac:	065b      	lsls	r3, r3, #25
 800b9ae:	f53f af2d 	bmi.w	800b80c <_svfiprintf_r+0x28>
 800b9b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9b4:	e72c      	b.n	800b810 <_svfiprintf_r+0x2c>
 800b9b6:	ab03      	add	r3, sp, #12
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	462a      	mov	r2, r5
 800b9bc:	4b05      	ldr	r3, [pc, #20]	@ (800b9d4 <_svfiprintf_r+0x1f0>)
 800b9be:	a904      	add	r1, sp, #16
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	f7fe f8cd 	bl	8009b60 <_printf_i>
 800b9c6:	e7ed      	b.n	800b9a4 <_svfiprintf_r+0x1c0>
 800b9c8:	0800e0da 	.word	0x0800e0da
 800b9cc:	0800e0e4 	.word	0x0800e0e4
 800b9d0:	08009631 	.word	0x08009631
 800b9d4:	0800b72d 	.word	0x0800b72d
 800b9d8:	0800e0e0 	.word	0x0800e0e0

0800b9dc <__sflush_r>:
 800b9dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e4:	0716      	lsls	r6, r2, #28
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	d454      	bmi.n	800ba96 <__sflush_r+0xba>
 800b9ec:	684b      	ldr	r3, [r1, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	dc02      	bgt.n	800b9f8 <__sflush_r+0x1c>
 800b9f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	dd48      	ble.n	800ba8a <__sflush_r+0xae>
 800b9f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9fa:	2e00      	cmp	r6, #0
 800b9fc:	d045      	beq.n	800ba8a <__sflush_r+0xae>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba04:	682f      	ldr	r7, [r5, #0]
 800ba06:	6a21      	ldr	r1, [r4, #32]
 800ba08:	602b      	str	r3, [r5, #0]
 800ba0a:	d030      	beq.n	800ba6e <__sflush_r+0x92>
 800ba0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba0e:	89a3      	ldrh	r3, [r4, #12]
 800ba10:	0759      	lsls	r1, r3, #29
 800ba12:	d505      	bpl.n	800ba20 <__sflush_r+0x44>
 800ba14:	6863      	ldr	r3, [r4, #4]
 800ba16:	1ad2      	subs	r2, r2, r3
 800ba18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba1a:	b10b      	cbz	r3, 800ba20 <__sflush_r+0x44>
 800ba1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba1e:	1ad2      	subs	r2, r2, r3
 800ba20:	2300      	movs	r3, #0
 800ba22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba24:	6a21      	ldr	r1, [r4, #32]
 800ba26:	4628      	mov	r0, r5
 800ba28:	47b0      	blx	r6
 800ba2a:	1c43      	adds	r3, r0, #1
 800ba2c:	89a3      	ldrh	r3, [r4, #12]
 800ba2e:	d106      	bne.n	800ba3e <__sflush_r+0x62>
 800ba30:	6829      	ldr	r1, [r5, #0]
 800ba32:	291d      	cmp	r1, #29
 800ba34:	d82b      	bhi.n	800ba8e <__sflush_r+0xb2>
 800ba36:	4a2a      	ldr	r2, [pc, #168]	@ (800bae0 <__sflush_r+0x104>)
 800ba38:	40ca      	lsrs	r2, r1
 800ba3a:	07d6      	lsls	r6, r2, #31
 800ba3c:	d527      	bpl.n	800ba8e <__sflush_r+0xb2>
 800ba3e:	2200      	movs	r2, #0
 800ba40:	6062      	str	r2, [r4, #4]
 800ba42:	04d9      	lsls	r1, r3, #19
 800ba44:	6922      	ldr	r2, [r4, #16]
 800ba46:	6022      	str	r2, [r4, #0]
 800ba48:	d504      	bpl.n	800ba54 <__sflush_r+0x78>
 800ba4a:	1c42      	adds	r2, r0, #1
 800ba4c:	d101      	bne.n	800ba52 <__sflush_r+0x76>
 800ba4e:	682b      	ldr	r3, [r5, #0]
 800ba50:	b903      	cbnz	r3, 800ba54 <__sflush_r+0x78>
 800ba52:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba56:	602f      	str	r7, [r5, #0]
 800ba58:	b1b9      	cbz	r1, 800ba8a <__sflush_r+0xae>
 800ba5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba5e:	4299      	cmp	r1, r3
 800ba60:	d002      	beq.n	800ba68 <__sflush_r+0x8c>
 800ba62:	4628      	mov	r0, r5
 800ba64:	f7ff f9e8 	bl	800ae38 <_free_r>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba6c:	e00d      	b.n	800ba8a <__sflush_r+0xae>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	4628      	mov	r0, r5
 800ba72:	47b0      	blx	r6
 800ba74:	4602      	mov	r2, r0
 800ba76:	1c50      	adds	r0, r2, #1
 800ba78:	d1c9      	bne.n	800ba0e <__sflush_r+0x32>
 800ba7a:	682b      	ldr	r3, [r5, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d0c6      	beq.n	800ba0e <__sflush_r+0x32>
 800ba80:	2b1d      	cmp	r3, #29
 800ba82:	d001      	beq.n	800ba88 <__sflush_r+0xac>
 800ba84:	2b16      	cmp	r3, #22
 800ba86:	d11e      	bne.n	800bac6 <__sflush_r+0xea>
 800ba88:	602f      	str	r7, [r5, #0]
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	e022      	b.n	800bad4 <__sflush_r+0xf8>
 800ba8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba92:	b21b      	sxth	r3, r3
 800ba94:	e01b      	b.n	800bace <__sflush_r+0xf2>
 800ba96:	690f      	ldr	r7, [r1, #16]
 800ba98:	2f00      	cmp	r7, #0
 800ba9a:	d0f6      	beq.n	800ba8a <__sflush_r+0xae>
 800ba9c:	0793      	lsls	r3, r2, #30
 800ba9e:	680e      	ldr	r6, [r1, #0]
 800baa0:	bf08      	it	eq
 800baa2:	694b      	ldreq	r3, [r1, #20]
 800baa4:	600f      	str	r7, [r1, #0]
 800baa6:	bf18      	it	ne
 800baa8:	2300      	movne	r3, #0
 800baaa:	eba6 0807 	sub.w	r8, r6, r7
 800baae:	608b      	str	r3, [r1, #8]
 800bab0:	f1b8 0f00 	cmp.w	r8, #0
 800bab4:	dde9      	ble.n	800ba8a <__sflush_r+0xae>
 800bab6:	6a21      	ldr	r1, [r4, #32]
 800bab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800baba:	4643      	mov	r3, r8
 800babc:	463a      	mov	r2, r7
 800babe:	4628      	mov	r0, r5
 800bac0:	47b0      	blx	r6
 800bac2:	2800      	cmp	r0, #0
 800bac4:	dc08      	bgt.n	800bad8 <__sflush_r+0xfc>
 800bac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bace:	81a3      	strh	r3, [r4, #12]
 800bad0:	f04f 30ff 	mov.w	r0, #4294967295
 800bad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bad8:	4407      	add	r7, r0
 800bada:	eba8 0800 	sub.w	r8, r8, r0
 800bade:	e7e7      	b.n	800bab0 <__sflush_r+0xd4>
 800bae0:	20400001 	.word	0x20400001

0800bae4 <_fflush_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	690b      	ldr	r3, [r1, #16]
 800bae8:	4605      	mov	r5, r0
 800baea:	460c      	mov	r4, r1
 800baec:	b913      	cbnz	r3, 800baf4 <_fflush_r+0x10>
 800baee:	2500      	movs	r5, #0
 800baf0:	4628      	mov	r0, r5
 800baf2:	bd38      	pop	{r3, r4, r5, pc}
 800baf4:	b118      	cbz	r0, 800bafe <_fflush_r+0x1a>
 800baf6:	6a03      	ldr	r3, [r0, #32]
 800baf8:	b90b      	cbnz	r3, 800bafe <_fflush_r+0x1a>
 800bafa:	f7fe f9db 	bl	8009eb4 <__sinit>
 800bafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0f3      	beq.n	800baee <_fflush_r+0xa>
 800bb06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb08:	07d0      	lsls	r0, r2, #31
 800bb0a:	d404      	bmi.n	800bb16 <_fflush_r+0x32>
 800bb0c:	0599      	lsls	r1, r3, #22
 800bb0e:	d402      	bmi.n	800bb16 <_fflush_r+0x32>
 800bb10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb12:	f7fe fb34 	bl	800a17e <__retarget_lock_acquire_recursive>
 800bb16:	4628      	mov	r0, r5
 800bb18:	4621      	mov	r1, r4
 800bb1a:	f7ff ff5f 	bl	800b9dc <__sflush_r>
 800bb1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb20:	07da      	lsls	r2, r3, #31
 800bb22:	4605      	mov	r5, r0
 800bb24:	d4e4      	bmi.n	800baf0 <_fflush_r+0xc>
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	059b      	lsls	r3, r3, #22
 800bb2a:	d4e1      	bmi.n	800baf0 <_fflush_r+0xc>
 800bb2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb2e:	f7fe fb27 	bl	800a180 <__retarget_lock_release_recursive>
 800bb32:	e7dd      	b.n	800baf0 <_fflush_r+0xc>

0800bb34 <memmove>:
 800bb34:	4288      	cmp	r0, r1
 800bb36:	b510      	push	{r4, lr}
 800bb38:	eb01 0402 	add.w	r4, r1, r2
 800bb3c:	d902      	bls.n	800bb44 <memmove+0x10>
 800bb3e:	4284      	cmp	r4, r0
 800bb40:	4623      	mov	r3, r4
 800bb42:	d807      	bhi.n	800bb54 <memmove+0x20>
 800bb44:	1e43      	subs	r3, r0, #1
 800bb46:	42a1      	cmp	r1, r4
 800bb48:	d008      	beq.n	800bb5c <memmove+0x28>
 800bb4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb52:	e7f8      	b.n	800bb46 <memmove+0x12>
 800bb54:	4402      	add	r2, r0
 800bb56:	4601      	mov	r1, r0
 800bb58:	428a      	cmp	r2, r1
 800bb5a:	d100      	bne.n	800bb5e <memmove+0x2a>
 800bb5c:	bd10      	pop	{r4, pc}
 800bb5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb66:	e7f7      	b.n	800bb58 <memmove+0x24>

0800bb68 <_sbrk_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4d06      	ldr	r5, [pc, #24]	@ (800bb84 <_sbrk_r+0x1c>)
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4604      	mov	r4, r0
 800bb70:	4608      	mov	r0, r1
 800bb72:	602b      	str	r3, [r5, #0]
 800bb74:	f7f9 f80a 	bl	8004b8c <_sbrk>
 800bb78:	1c43      	adds	r3, r0, #1
 800bb7a:	d102      	bne.n	800bb82 <_sbrk_r+0x1a>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	b103      	cbz	r3, 800bb82 <_sbrk_r+0x1a>
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	20001f28 	.word	0x20001f28

0800bb88 <memcpy>:
 800bb88:	440a      	add	r2, r1
 800bb8a:	4291      	cmp	r1, r2
 800bb8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb90:	d100      	bne.n	800bb94 <memcpy+0xc>
 800bb92:	4770      	bx	lr
 800bb94:	b510      	push	{r4, lr}
 800bb96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb9e:	4291      	cmp	r1, r2
 800bba0:	d1f9      	bne.n	800bb96 <memcpy+0xe>
 800bba2:	bd10      	pop	{r4, pc}

0800bba4 <__assert_func>:
 800bba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bba6:	4614      	mov	r4, r2
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4b09      	ldr	r3, [pc, #36]	@ (800bbd0 <__assert_func+0x2c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4605      	mov	r5, r0
 800bbb0:	68d8      	ldr	r0, [r3, #12]
 800bbb2:	b14c      	cbz	r4, 800bbc8 <__assert_func+0x24>
 800bbb4:	4b07      	ldr	r3, [pc, #28]	@ (800bbd4 <__assert_func+0x30>)
 800bbb6:	9100      	str	r1, [sp, #0]
 800bbb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbbc:	4906      	ldr	r1, [pc, #24]	@ (800bbd8 <__assert_func+0x34>)
 800bbbe:	462b      	mov	r3, r5
 800bbc0:	f000 f870 	bl	800bca4 <fiprintf>
 800bbc4:	f000 f880 	bl	800bcc8 <abort>
 800bbc8:	4b04      	ldr	r3, [pc, #16]	@ (800bbdc <__assert_func+0x38>)
 800bbca:	461c      	mov	r4, r3
 800bbcc:	e7f3      	b.n	800bbb6 <__assert_func+0x12>
 800bbce:	bf00      	nop
 800bbd0:	20000040 	.word	0x20000040
 800bbd4:	0800e0f5 	.word	0x0800e0f5
 800bbd8:	0800e102 	.word	0x0800e102
 800bbdc:	0800e130 	.word	0x0800e130

0800bbe0 <_calloc_r>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	fba1 5402 	umull	r5, r4, r1, r2
 800bbe6:	b934      	cbnz	r4, 800bbf6 <_calloc_r+0x16>
 800bbe8:	4629      	mov	r1, r5
 800bbea:	f7ff f999 	bl	800af20 <_malloc_r>
 800bbee:	4606      	mov	r6, r0
 800bbf0:	b928      	cbnz	r0, 800bbfe <_calloc_r+0x1e>
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	bd70      	pop	{r4, r5, r6, pc}
 800bbf6:	220c      	movs	r2, #12
 800bbf8:	6002      	str	r2, [r0, #0]
 800bbfa:	2600      	movs	r6, #0
 800bbfc:	e7f9      	b.n	800bbf2 <_calloc_r+0x12>
 800bbfe:	462a      	mov	r2, r5
 800bc00:	4621      	mov	r1, r4
 800bc02:	f7fe fa2f 	bl	800a064 <memset>
 800bc06:	e7f4      	b.n	800bbf2 <_calloc_r+0x12>

0800bc08 <__ascii_mbtowc>:
 800bc08:	b082      	sub	sp, #8
 800bc0a:	b901      	cbnz	r1, 800bc0e <__ascii_mbtowc+0x6>
 800bc0c:	a901      	add	r1, sp, #4
 800bc0e:	b142      	cbz	r2, 800bc22 <__ascii_mbtowc+0x1a>
 800bc10:	b14b      	cbz	r3, 800bc26 <__ascii_mbtowc+0x1e>
 800bc12:	7813      	ldrb	r3, [r2, #0]
 800bc14:	600b      	str	r3, [r1, #0]
 800bc16:	7812      	ldrb	r2, [r2, #0]
 800bc18:	1e10      	subs	r0, r2, #0
 800bc1a:	bf18      	it	ne
 800bc1c:	2001      	movne	r0, #1
 800bc1e:	b002      	add	sp, #8
 800bc20:	4770      	bx	lr
 800bc22:	4610      	mov	r0, r2
 800bc24:	e7fb      	b.n	800bc1e <__ascii_mbtowc+0x16>
 800bc26:	f06f 0001 	mvn.w	r0, #1
 800bc2a:	e7f8      	b.n	800bc1e <__ascii_mbtowc+0x16>

0800bc2c <_realloc_r>:
 800bc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc30:	4607      	mov	r7, r0
 800bc32:	4614      	mov	r4, r2
 800bc34:	460d      	mov	r5, r1
 800bc36:	b921      	cbnz	r1, 800bc42 <_realloc_r+0x16>
 800bc38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	f7ff b96f 	b.w	800af20 <_malloc_r>
 800bc42:	b92a      	cbnz	r2, 800bc50 <_realloc_r+0x24>
 800bc44:	f7ff f8f8 	bl	800ae38 <_free_r>
 800bc48:	4625      	mov	r5, r4
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc50:	f000 f841 	bl	800bcd6 <_malloc_usable_size_r>
 800bc54:	4284      	cmp	r4, r0
 800bc56:	4606      	mov	r6, r0
 800bc58:	d802      	bhi.n	800bc60 <_realloc_r+0x34>
 800bc5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc5e:	d8f4      	bhi.n	800bc4a <_realloc_r+0x1e>
 800bc60:	4621      	mov	r1, r4
 800bc62:	4638      	mov	r0, r7
 800bc64:	f7ff f95c 	bl	800af20 <_malloc_r>
 800bc68:	4680      	mov	r8, r0
 800bc6a:	b908      	cbnz	r0, 800bc70 <_realloc_r+0x44>
 800bc6c:	4645      	mov	r5, r8
 800bc6e:	e7ec      	b.n	800bc4a <_realloc_r+0x1e>
 800bc70:	42b4      	cmp	r4, r6
 800bc72:	4622      	mov	r2, r4
 800bc74:	4629      	mov	r1, r5
 800bc76:	bf28      	it	cs
 800bc78:	4632      	movcs	r2, r6
 800bc7a:	f7ff ff85 	bl	800bb88 <memcpy>
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff f8d9 	bl	800ae38 <_free_r>
 800bc86:	e7f1      	b.n	800bc6c <_realloc_r+0x40>

0800bc88 <__ascii_wctomb>:
 800bc88:	4603      	mov	r3, r0
 800bc8a:	4608      	mov	r0, r1
 800bc8c:	b141      	cbz	r1, 800bca0 <__ascii_wctomb+0x18>
 800bc8e:	2aff      	cmp	r2, #255	@ 0xff
 800bc90:	d904      	bls.n	800bc9c <__ascii_wctomb+0x14>
 800bc92:	228a      	movs	r2, #138	@ 0x8a
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9a:	4770      	bx	lr
 800bc9c:	700a      	strb	r2, [r1, #0]
 800bc9e:	2001      	movs	r0, #1
 800bca0:	4770      	bx	lr
	...

0800bca4 <fiprintf>:
 800bca4:	b40e      	push	{r1, r2, r3}
 800bca6:	b503      	push	{r0, r1, lr}
 800bca8:	4601      	mov	r1, r0
 800bcaa:	ab03      	add	r3, sp, #12
 800bcac:	4805      	ldr	r0, [pc, #20]	@ (800bcc4 <fiprintf+0x20>)
 800bcae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcb2:	6800      	ldr	r0, [r0, #0]
 800bcb4:	9301      	str	r3, [sp, #4]
 800bcb6:	f000 f83f 	bl	800bd38 <_vfiprintf_r>
 800bcba:	b002      	add	sp, #8
 800bcbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcc0:	b003      	add	sp, #12
 800bcc2:	4770      	bx	lr
 800bcc4:	20000040 	.word	0x20000040

0800bcc8 <abort>:
 800bcc8:	b508      	push	{r3, lr}
 800bcca:	2006      	movs	r0, #6
 800bccc:	f000 fa08 	bl	800c0e0 <raise>
 800bcd0:	2001      	movs	r0, #1
 800bcd2:	f7f8 fee3 	bl	8004a9c <_exit>

0800bcd6 <_malloc_usable_size_r>:
 800bcd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcda:	1f18      	subs	r0, r3, #4
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	bfbc      	itt	lt
 800bce0:	580b      	ldrlt	r3, [r1, r0]
 800bce2:	18c0      	addlt	r0, r0, r3
 800bce4:	4770      	bx	lr

0800bce6 <__sfputc_r>:
 800bce6:	6893      	ldr	r3, [r2, #8]
 800bce8:	3b01      	subs	r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	b410      	push	{r4}
 800bcee:	6093      	str	r3, [r2, #8]
 800bcf0:	da08      	bge.n	800bd04 <__sfputc_r+0x1e>
 800bcf2:	6994      	ldr	r4, [r2, #24]
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	db01      	blt.n	800bcfc <__sfputc_r+0x16>
 800bcf8:	290a      	cmp	r1, #10
 800bcfa:	d103      	bne.n	800bd04 <__sfputc_r+0x1e>
 800bcfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd00:	f000 b932 	b.w	800bf68 <__swbuf_r>
 800bd04:	6813      	ldr	r3, [r2, #0]
 800bd06:	1c58      	adds	r0, r3, #1
 800bd08:	6010      	str	r0, [r2, #0]
 800bd0a:	7019      	strb	r1, [r3, #0]
 800bd0c:	4608      	mov	r0, r1
 800bd0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <__sfputs_r>:
 800bd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd16:	4606      	mov	r6, r0
 800bd18:	460f      	mov	r7, r1
 800bd1a:	4614      	mov	r4, r2
 800bd1c:	18d5      	adds	r5, r2, r3
 800bd1e:	42ac      	cmp	r4, r5
 800bd20:	d101      	bne.n	800bd26 <__sfputs_r+0x12>
 800bd22:	2000      	movs	r0, #0
 800bd24:	e007      	b.n	800bd36 <__sfputs_r+0x22>
 800bd26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2a:	463a      	mov	r2, r7
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff ffda 	bl	800bce6 <__sfputc_r>
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	d1f3      	bne.n	800bd1e <__sfputs_r+0xa>
 800bd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd38 <_vfiprintf_r>:
 800bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3c:	460d      	mov	r5, r1
 800bd3e:	b09d      	sub	sp, #116	@ 0x74
 800bd40:	4614      	mov	r4, r2
 800bd42:	4698      	mov	r8, r3
 800bd44:	4606      	mov	r6, r0
 800bd46:	b118      	cbz	r0, 800bd50 <_vfiprintf_r+0x18>
 800bd48:	6a03      	ldr	r3, [r0, #32]
 800bd4a:	b90b      	cbnz	r3, 800bd50 <_vfiprintf_r+0x18>
 800bd4c:	f7fe f8b2 	bl	8009eb4 <__sinit>
 800bd50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd52:	07d9      	lsls	r1, r3, #31
 800bd54:	d405      	bmi.n	800bd62 <_vfiprintf_r+0x2a>
 800bd56:	89ab      	ldrh	r3, [r5, #12]
 800bd58:	059a      	lsls	r2, r3, #22
 800bd5a:	d402      	bmi.n	800bd62 <_vfiprintf_r+0x2a>
 800bd5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd5e:	f7fe fa0e 	bl	800a17e <__retarget_lock_acquire_recursive>
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	071b      	lsls	r3, r3, #28
 800bd66:	d501      	bpl.n	800bd6c <_vfiprintf_r+0x34>
 800bd68:	692b      	ldr	r3, [r5, #16]
 800bd6a:	b99b      	cbnz	r3, 800bd94 <_vfiprintf_r+0x5c>
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f000 f938 	bl	800bfe4 <__swsetup_r>
 800bd74:	b170      	cbz	r0, 800bd94 <_vfiprintf_r+0x5c>
 800bd76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd78:	07dc      	lsls	r4, r3, #31
 800bd7a:	d504      	bpl.n	800bd86 <_vfiprintf_r+0x4e>
 800bd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd80:	b01d      	add	sp, #116	@ 0x74
 800bd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd86:	89ab      	ldrh	r3, [r5, #12]
 800bd88:	0598      	lsls	r0, r3, #22
 800bd8a:	d4f7      	bmi.n	800bd7c <_vfiprintf_r+0x44>
 800bd8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd8e:	f7fe f9f7 	bl	800a180 <__retarget_lock_release_recursive>
 800bd92:	e7f3      	b.n	800bd7c <_vfiprintf_r+0x44>
 800bd94:	2300      	movs	r3, #0
 800bd96:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd98:	2320      	movs	r3, #32
 800bd9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bda2:	2330      	movs	r3, #48	@ 0x30
 800bda4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf54 <_vfiprintf_r+0x21c>
 800bda8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdac:	f04f 0901 	mov.w	r9, #1
 800bdb0:	4623      	mov	r3, r4
 800bdb2:	469a      	mov	sl, r3
 800bdb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdb8:	b10a      	cbz	r2, 800bdbe <_vfiprintf_r+0x86>
 800bdba:	2a25      	cmp	r2, #37	@ 0x25
 800bdbc:	d1f9      	bne.n	800bdb2 <_vfiprintf_r+0x7a>
 800bdbe:	ebba 0b04 	subs.w	fp, sl, r4
 800bdc2:	d00b      	beq.n	800bddc <_vfiprintf_r+0xa4>
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	4622      	mov	r2, r4
 800bdc8:	4629      	mov	r1, r5
 800bdca:	4630      	mov	r0, r6
 800bdcc:	f7ff ffa2 	bl	800bd14 <__sfputs_r>
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	f000 80a7 	beq.w	800bf24 <_vfiprintf_r+0x1ec>
 800bdd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdd8:	445a      	add	r2, fp
 800bdda:	9209      	str	r2, [sp, #36]	@ 0x24
 800bddc:	f89a 3000 	ldrb.w	r3, [sl]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f000 809f 	beq.w	800bf24 <_vfiprintf_r+0x1ec>
 800bde6:	2300      	movs	r3, #0
 800bde8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdf0:	f10a 0a01 	add.w	sl, sl, #1
 800bdf4:	9304      	str	r3, [sp, #16]
 800bdf6:	9307      	str	r3, [sp, #28]
 800bdf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdfc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdfe:	4654      	mov	r4, sl
 800be00:	2205      	movs	r2, #5
 800be02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be06:	4853      	ldr	r0, [pc, #332]	@ (800bf54 <_vfiprintf_r+0x21c>)
 800be08:	f7f4 f9ea 	bl	80001e0 <memchr>
 800be0c:	9a04      	ldr	r2, [sp, #16]
 800be0e:	b9d8      	cbnz	r0, 800be48 <_vfiprintf_r+0x110>
 800be10:	06d1      	lsls	r1, r2, #27
 800be12:	bf44      	itt	mi
 800be14:	2320      	movmi	r3, #32
 800be16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be1a:	0713      	lsls	r3, r2, #28
 800be1c:	bf44      	itt	mi
 800be1e:	232b      	movmi	r3, #43	@ 0x2b
 800be20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be24:	f89a 3000 	ldrb.w	r3, [sl]
 800be28:	2b2a      	cmp	r3, #42	@ 0x2a
 800be2a:	d015      	beq.n	800be58 <_vfiprintf_r+0x120>
 800be2c:	9a07      	ldr	r2, [sp, #28]
 800be2e:	4654      	mov	r4, sl
 800be30:	2000      	movs	r0, #0
 800be32:	f04f 0c0a 	mov.w	ip, #10
 800be36:	4621      	mov	r1, r4
 800be38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be3c:	3b30      	subs	r3, #48	@ 0x30
 800be3e:	2b09      	cmp	r3, #9
 800be40:	d94b      	bls.n	800beda <_vfiprintf_r+0x1a2>
 800be42:	b1b0      	cbz	r0, 800be72 <_vfiprintf_r+0x13a>
 800be44:	9207      	str	r2, [sp, #28]
 800be46:	e014      	b.n	800be72 <_vfiprintf_r+0x13a>
 800be48:	eba0 0308 	sub.w	r3, r0, r8
 800be4c:	fa09 f303 	lsl.w	r3, r9, r3
 800be50:	4313      	orrs	r3, r2
 800be52:	9304      	str	r3, [sp, #16]
 800be54:	46a2      	mov	sl, r4
 800be56:	e7d2      	b.n	800bdfe <_vfiprintf_r+0xc6>
 800be58:	9b03      	ldr	r3, [sp, #12]
 800be5a:	1d19      	adds	r1, r3, #4
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	9103      	str	r1, [sp, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	bfbb      	ittet	lt
 800be64:	425b      	neglt	r3, r3
 800be66:	f042 0202 	orrlt.w	r2, r2, #2
 800be6a:	9307      	strge	r3, [sp, #28]
 800be6c:	9307      	strlt	r3, [sp, #28]
 800be6e:	bfb8      	it	lt
 800be70:	9204      	strlt	r2, [sp, #16]
 800be72:	7823      	ldrb	r3, [r4, #0]
 800be74:	2b2e      	cmp	r3, #46	@ 0x2e
 800be76:	d10a      	bne.n	800be8e <_vfiprintf_r+0x156>
 800be78:	7863      	ldrb	r3, [r4, #1]
 800be7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be7c:	d132      	bne.n	800bee4 <_vfiprintf_r+0x1ac>
 800be7e:	9b03      	ldr	r3, [sp, #12]
 800be80:	1d1a      	adds	r2, r3, #4
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	9203      	str	r2, [sp, #12]
 800be86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be8a:	3402      	adds	r4, #2
 800be8c:	9305      	str	r3, [sp, #20]
 800be8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf64 <_vfiprintf_r+0x22c>
 800be92:	7821      	ldrb	r1, [r4, #0]
 800be94:	2203      	movs	r2, #3
 800be96:	4650      	mov	r0, sl
 800be98:	f7f4 f9a2 	bl	80001e0 <memchr>
 800be9c:	b138      	cbz	r0, 800beae <_vfiprintf_r+0x176>
 800be9e:	9b04      	ldr	r3, [sp, #16]
 800bea0:	eba0 000a 	sub.w	r0, r0, sl
 800bea4:	2240      	movs	r2, #64	@ 0x40
 800bea6:	4082      	lsls	r2, r0
 800bea8:	4313      	orrs	r3, r2
 800beaa:	3401      	adds	r4, #1
 800beac:	9304      	str	r3, [sp, #16]
 800beae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb2:	4829      	ldr	r0, [pc, #164]	@ (800bf58 <_vfiprintf_r+0x220>)
 800beb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800beb8:	2206      	movs	r2, #6
 800beba:	f7f4 f991 	bl	80001e0 <memchr>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d03f      	beq.n	800bf42 <_vfiprintf_r+0x20a>
 800bec2:	4b26      	ldr	r3, [pc, #152]	@ (800bf5c <_vfiprintf_r+0x224>)
 800bec4:	bb1b      	cbnz	r3, 800bf0e <_vfiprintf_r+0x1d6>
 800bec6:	9b03      	ldr	r3, [sp, #12]
 800bec8:	3307      	adds	r3, #7
 800beca:	f023 0307 	bic.w	r3, r3, #7
 800bece:	3308      	adds	r3, #8
 800bed0:	9303      	str	r3, [sp, #12]
 800bed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed4:	443b      	add	r3, r7
 800bed6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bed8:	e76a      	b.n	800bdb0 <_vfiprintf_r+0x78>
 800beda:	fb0c 3202 	mla	r2, ip, r2, r3
 800bede:	460c      	mov	r4, r1
 800bee0:	2001      	movs	r0, #1
 800bee2:	e7a8      	b.n	800be36 <_vfiprintf_r+0xfe>
 800bee4:	2300      	movs	r3, #0
 800bee6:	3401      	adds	r4, #1
 800bee8:	9305      	str	r3, [sp, #20]
 800beea:	4619      	mov	r1, r3
 800beec:	f04f 0c0a 	mov.w	ip, #10
 800bef0:	4620      	mov	r0, r4
 800bef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bef6:	3a30      	subs	r2, #48	@ 0x30
 800bef8:	2a09      	cmp	r2, #9
 800befa:	d903      	bls.n	800bf04 <_vfiprintf_r+0x1cc>
 800befc:	2b00      	cmp	r3, #0
 800befe:	d0c6      	beq.n	800be8e <_vfiprintf_r+0x156>
 800bf00:	9105      	str	r1, [sp, #20]
 800bf02:	e7c4      	b.n	800be8e <_vfiprintf_r+0x156>
 800bf04:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf08:	4604      	mov	r4, r0
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e7f0      	b.n	800bef0 <_vfiprintf_r+0x1b8>
 800bf0e:	ab03      	add	r3, sp, #12
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	462a      	mov	r2, r5
 800bf14:	4b12      	ldr	r3, [pc, #72]	@ (800bf60 <_vfiprintf_r+0x228>)
 800bf16:	a904      	add	r1, sp, #16
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f7fd fb89 	bl	8009630 <_printf_float>
 800bf1e:	4607      	mov	r7, r0
 800bf20:	1c78      	adds	r0, r7, #1
 800bf22:	d1d6      	bne.n	800bed2 <_vfiprintf_r+0x19a>
 800bf24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf26:	07d9      	lsls	r1, r3, #31
 800bf28:	d405      	bmi.n	800bf36 <_vfiprintf_r+0x1fe>
 800bf2a:	89ab      	ldrh	r3, [r5, #12]
 800bf2c:	059a      	lsls	r2, r3, #22
 800bf2e:	d402      	bmi.n	800bf36 <_vfiprintf_r+0x1fe>
 800bf30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf32:	f7fe f925 	bl	800a180 <__retarget_lock_release_recursive>
 800bf36:	89ab      	ldrh	r3, [r5, #12]
 800bf38:	065b      	lsls	r3, r3, #25
 800bf3a:	f53f af1f 	bmi.w	800bd7c <_vfiprintf_r+0x44>
 800bf3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf40:	e71e      	b.n	800bd80 <_vfiprintf_r+0x48>
 800bf42:	ab03      	add	r3, sp, #12
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	462a      	mov	r2, r5
 800bf48:	4b05      	ldr	r3, [pc, #20]	@ (800bf60 <_vfiprintf_r+0x228>)
 800bf4a:	a904      	add	r1, sp, #16
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	f7fd fe07 	bl	8009b60 <_printf_i>
 800bf52:	e7e4      	b.n	800bf1e <_vfiprintf_r+0x1e6>
 800bf54:	0800e0da 	.word	0x0800e0da
 800bf58:	0800e0e4 	.word	0x0800e0e4
 800bf5c:	08009631 	.word	0x08009631
 800bf60:	0800bd15 	.word	0x0800bd15
 800bf64:	0800e0e0 	.word	0x0800e0e0

0800bf68 <__swbuf_r>:
 800bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6a:	460e      	mov	r6, r1
 800bf6c:	4614      	mov	r4, r2
 800bf6e:	4605      	mov	r5, r0
 800bf70:	b118      	cbz	r0, 800bf7a <__swbuf_r+0x12>
 800bf72:	6a03      	ldr	r3, [r0, #32]
 800bf74:	b90b      	cbnz	r3, 800bf7a <__swbuf_r+0x12>
 800bf76:	f7fd ff9d 	bl	8009eb4 <__sinit>
 800bf7a:	69a3      	ldr	r3, [r4, #24]
 800bf7c:	60a3      	str	r3, [r4, #8]
 800bf7e:	89a3      	ldrh	r3, [r4, #12]
 800bf80:	071a      	lsls	r2, r3, #28
 800bf82:	d501      	bpl.n	800bf88 <__swbuf_r+0x20>
 800bf84:	6923      	ldr	r3, [r4, #16]
 800bf86:	b943      	cbnz	r3, 800bf9a <__swbuf_r+0x32>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f000 f82a 	bl	800bfe4 <__swsetup_r>
 800bf90:	b118      	cbz	r0, 800bf9a <__swbuf_r+0x32>
 800bf92:	f04f 37ff 	mov.w	r7, #4294967295
 800bf96:	4638      	mov	r0, r7
 800bf98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	6922      	ldr	r2, [r4, #16]
 800bf9e:	1a98      	subs	r0, r3, r2
 800bfa0:	6963      	ldr	r3, [r4, #20]
 800bfa2:	b2f6      	uxtb	r6, r6
 800bfa4:	4283      	cmp	r3, r0
 800bfa6:	4637      	mov	r7, r6
 800bfa8:	dc05      	bgt.n	800bfb6 <__swbuf_r+0x4e>
 800bfaa:	4621      	mov	r1, r4
 800bfac:	4628      	mov	r0, r5
 800bfae:	f7ff fd99 	bl	800bae4 <_fflush_r>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d1ed      	bne.n	800bf92 <__swbuf_r+0x2a>
 800bfb6:	68a3      	ldr	r3, [r4, #8]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	60a3      	str	r3, [r4, #8]
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	1c5a      	adds	r2, r3, #1
 800bfc0:	6022      	str	r2, [r4, #0]
 800bfc2:	701e      	strb	r6, [r3, #0]
 800bfc4:	6962      	ldr	r2, [r4, #20]
 800bfc6:	1c43      	adds	r3, r0, #1
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d004      	beq.n	800bfd6 <__swbuf_r+0x6e>
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	07db      	lsls	r3, r3, #31
 800bfd0:	d5e1      	bpl.n	800bf96 <__swbuf_r+0x2e>
 800bfd2:	2e0a      	cmp	r6, #10
 800bfd4:	d1df      	bne.n	800bf96 <__swbuf_r+0x2e>
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f7ff fd83 	bl	800bae4 <_fflush_r>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d0d9      	beq.n	800bf96 <__swbuf_r+0x2e>
 800bfe2:	e7d6      	b.n	800bf92 <__swbuf_r+0x2a>

0800bfe4 <__swsetup_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4b29      	ldr	r3, [pc, #164]	@ (800c08c <__swsetup_r+0xa8>)
 800bfe8:	4605      	mov	r5, r0
 800bfea:	6818      	ldr	r0, [r3, #0]
 800bfec:	460c      	mov	r4, r1
 800bfee:	b118      	cbz	r0, 800bff8 <__swsetup_r+0x14>
 800bff0:	6a03      	ldr	r3, [r0, #32]
 800bff2:	b90b      	cbnz	r3, 800bff8 <__swsetup_r+0x14>
 800bff4:	f7fd ff5e 	bl	8009eb4 <__sinit>
 800bff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bffc:	0719      	lsls	r1, r3, #28
 800bffe:	d422      	bmi.n	800c046 <__swsetup_r+0x62>
 800c000:	06da      	lsls	r2, r3, #27
 800c002:	d407      	bmi.n	800c014 <__swsetup_r+0x30>
 800c004:	2209      	movs	r2, #9
 800c006:	602a      	str	r2, [r5, #0]
 800c008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c00c:	81a3      	strh	r3, [r4, #12]
 800c00e:	f04f 30ff 	mov.w	r0, #4294967295
 800c012:	e033      	b.n	800c07c <__swsetup_r+0x98>
 800c014:	0758      	lsls	r0, r3, #29
 800c016:	d512      	bpl.n	800c03e <__swsetup_r+0x5a>
 800c018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c01a:	b141      	cbz	r1, 800c02e <__swsetup_r+0x4a>
 800c01c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c020:	4299      	cmp	r1, r3
 800c022:	d002      	beq.n	800c02a <__swsetup_r+0x46>
 800c024:	4628      	mov	r0, r5
 800c026:	f7fe ff07 	bl	800ae38 <_free_r>
 800c02a:	2300      	movs	r3, #0
 800c02c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c02e:	89a3      	ldrh	r3, [r4, #12]
 800c030:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c034:	81a3      	strh	r3, [r4, #12]
 800c036:	2300      	movs	r3, #0
 800c038:	6063      	str	r3, [r4, #4]
 800c03a:	6923      	ldr	r3, [r4, #16]
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	89a3      	ldrh	r3, [r4, #12]
 800c040:	f043 0308 	orr.w	r3, r3, #8
 800c044:	81a3      	strh	r3, [r4, #12]
 800c046:	6923      	ldr	r3, [r4, #16]
 800c048:	b94b      	cbnz	r3, 800c05e <__swsetup_r+0x7a>
 800c04a:	89a3      	ldrh	r3, [r4, #12]
 800c04c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c054:	d003      	beq.n	800c05e <__swsetup_r+0x7a>
 800c056:	4621      	mov	r1, r4
 800c058:	4628      	mov	r0, r5
 800c05a:	f000 f883 	bl	800c164 <__smakebuf_r>
 800c05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c062:	f013 0201 	ands.w	r2, r3, #1
 800c066:	d00a      	beq.n	800c07e <__swsetup_r+0x9a>
 800c068:	2200      	movs	r2, #0
 800c06a:	60a2      	str	r2, [r4, #8]
 800c06c:	6962      	ldr	r2, [r4, #20]
 800c06e:	4252      	negs	r2, r2
 800c070:	61a2      	str	r2, [r4, #24]
 800c072:	6922      	ldr	r2, [r4, #16]
 800c074:	b942      	cbnz	r2, 800c088 <__swsetup_r+0xa4>
 800c076:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c07a:	d1c5      	bne.n	800c008 <__swsetup_r+0x24>
 800c07c:	bd38      	pop	{r3, r4, r5, pc}
 800c07e:	0799      	lsls	r1, r3, #30
 800c080:	bf58      	it	pl
 800c082:	6962      	ldrpl	r2, [r4, #20]
 800c084:	60a2      	str	r2, [r4, #8]
 800c086:	e7f4      	b.n	800c072 <__swsetup_r+0x8e>
 800c088:	2000      	movs	r0, #0
 800c08a:	e7f7      	b.n	800c07c <__swsetup_r+0x98>
 800c08c:	20000040 	.word	0x20000040

0800c090 <_raise_r>:
 800c090:	291f      	cmp	r1, #31
 800c092:	b538      	push	{r3, r4, r5, lr}
 800c094:	4605      	mov	r5, r0
 800c096:	460c      	mov	r4, r1
 800c098:	d904      	bls.n	800c0a4 <_raise_r+0x14>
 800c09a:	2316      	movs	r3, #22
 800c09c:	6003      	str	r3, [r0, #0]
 800c09e:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a2:	bd38      	pop	{r3, r4, r5, pc}
 800c0a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0a6:	b112      	cbz	r2, 800c0ae <_raise_r+0x1e>
 800c0a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0ac:	b94b      	cbnz	r3, 800c0c2 <_raise_r+0x32>
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f000 f830 	bl	800c114 <_getpid_r>
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	4601      	mov	r1, r0
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0be:	f000 b817 	b.w	800c0f0 <_kill_r>
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d00a      	beq.n	800c0dc <_raise_r+0x4c>
 800c0c6:	1c59      	adds	r1, r3, #1
 800c0c8:	d103      	bne.n	800c0d2 <_raise_r+0x42>
 800c0ca:	2316      	movs	r3, #22
 800c0cc:	6003      	str	r3, [r0, #0]
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	e7e7      	b.n	800c0a2 <_raise_r+0x12>
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0d8:	4620      	mov	r0, r4
 800c0da:	4798      	blx	r3
 800c0dc:	2000      	movs	r0, #0
 800c0de:	e7e0      	b.n	800c0a2 <_raise_r+0x12>

0800c0e0 <raise>:
 800c0e0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ec <raise+0xc>)
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	6818      	ldr	r0, [r3, #0]
 800c0e6:	f7ff bfd3 	b.w	800c090 <_raise_r>
 800c0ea:	bf00      	nop
 800c0ec:	20000040 	.word	0x20000040

0800c0f0 <_kill_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4d07      	ldr	r5, [pc, #28]	@ (800c110 <_kill_r+0x20>)
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	602b      	str	r3, [r5, #0]
 800c0fe:	f7f8 fcbd 	bl	8004a7c <_kill>
 800c102:	1c43      	adds	r3, r0, #1
 800c104:	d102      	bne.n	800c10c <_kill_r+0x1c>
 800c106:	682b      	ldr	r3, [r5, #0]
 800c108:	b103      	cbz	r3, 800c10c <_kill_r+0x1c>
 800c10a:	6023      	str	r3, [r4, #0]
 800c10c:	bd38      	pop	{r3, r4, r5, pc}
 800c10e:	bf00      	nop
 800c110:	20001f28 	.word	0x20001f28

0800c114 <_getpid_r>:
 800c114:	f7f8 bcaa 	b.w	8004a6c <_getpid>

0800c118 <__swhatbuf_r>:
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	460c      	mov	r4, r1
 800c11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c120:	2900      	cmp	r1, #0
 800c122:	b096      	sub	sp, #88	@ 0x58
 800c124:	4615      	mov	r5, r2
 800c126:	461e      	mov	r6, r3
 800c128:	da0d      	bge.n	800c146 <__swhatbuf_r+0x2e>
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c130:	f04f 0100 	mov.w	r1, #0
 800c134:	bf14      	ite	ne
 800c136:	2340      	movne	r3, #64	@ 0x40
 800c138:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c13c:	2000      	movs	r0, #0
 800c13e:	6031      	str	r1, [r6, #0]
 800c140:	602b      	str	r3, [r5, #0]
 800c142:	b016      	add	sp, #88	@ 0x58
 800c144:	bd70      	pop	{r4, r5, r6, pc}
 800c146:	466a      	mov	r2, sp
 800c148:	f000 f848 	bl	800c1dc <_fstat_r>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	dbec      	blt.n	800c12a <__swhatbuf_r+0x12>
 800c150:	9901      	ldr	r1, [sp, #4]
 800c152:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c156:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c15a:	4259      	negs	r1, r3
 800c15c:	4159      	adcs	r1, r3
 800c15e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c162:	e7eb      	b.n	800c13c <__swhatbuf_r+0x24>

0800c164 <__smakebuf_r>:
 800c164:	898b      	ldrh	r3, [r1, #12]
 800c166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c168:	079d      	lsls	r5, r3, #30
 800c16a:	4606      	mov	r6, r0
 800c16c:	460c      	mov	r4, r1
 800c16e:	d507      	bpl.n	800c180 <__smakebuf_r+0x1c>
 800c170:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	6123      	str	r3, [r4, #16]
 800c178:	2301      	movs	r3, #1
 800c17a:	6163      	str	r3, [r4, #20]
 800c17c:	b003      	add	sp, #12
 800c17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c180:	ab01      	add	r3, sp, #4
 800c182:	466a      	mov	r2, sp
 800c184:	f7ff ffc8 	bl	800c118 <__swhatbuf_r>
 800c188:	9f00      	ldr	r7, [sp, #0]
 800c18a:	4605      	mov	r5, r0
 800c18c:	4639      	mov	r1, r7
 800c18e:	4630      	mov	r0, r6
 800c190:	f7fe fec6 	bl	800af20 <_malloc_r>
 800c194:	b948      	cbnz	r0, 800c1aa <__smakebuf_r+0x46>
 800c196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19a:	059a      	lsls	r2, r3, #22
 800c19c:	d4ee      	bmi.n	800c17c <__smakebuf_r+0x18>
 800c19e:	f023 0303 	bic.w	r3, r3, #3
 800c1a2:	f043 0302 	orr.w	r3, r3, #2
 800c1a6:	81a3      	strh	r3, [r4, #12]
 800c1a8:	e7e2      	b.n	800c170 <__smakebuf_r+0xc>
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	6020      	str	r0, [r4, #0]
 800c1ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1b2:	81a3      	strh	r3, [r4, #12]
 800c1b4:	9b01      	ldr	r3, [sp, #4]
 800c1b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1ba:	b15b      	cbz	r3, 800c1d4 <__smakebuf_r+0x70>
 800c1bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	f000 f81d 	bl	800c200 <_isatty_r>
 800c1c6:	b128      	cbz	r0, 800c1d4 <__smakebuf_r+0x70>
 800c1c8:	89a3      	ldrh	r3, [r4, #12]
 800c1ca:	f023 0303 	bic.w	r3, r3, #3
 800c1ce:	f043 0301 	orr.w	r3, r3, #1
 800c1d2:	81a3      	strh	r3, [r4, #12]
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	431d      	orrs	r5, r3
 800c1d8:	81a5      	strh	r5, [r4, #12]
 800c1da:	e7cf      	b.n	800c17c <__smakebuf_r+0x18>

0800c1dc <_fstat_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	4d07      	ldr	r5, [pc, #28]	@ (800c1fc <_fstat_r+0x20>)
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	602b      	str	r3, [r5, #0]
 800c1ea:	f7f8 fca7 	bl	8004b3c <_fstat>
 800c1ee:	1c43      	adds	r3, r0, #1
 800c1f0:	d102      	bne.n	800c1f8 <_fstat_r+0x1c>
 800c1f2:	682b      	ldr	r3, [r5, #0]
 800c1f4:	b103      	cbz	r3, 800c1f8 <_fstat_r+0x1c>
 800c1f6:	6023      	str	r3, [r4, #0]
 800c1f8:	bd38      	pop	{r3, r4, r5, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20001f28 	.word	0x20001f28

0800c200 <_isatty_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4d06      	ldr	r5, [pc, #24]	@ (800c21c <_isatty_r+0x1c>)
 800c204:	2300      	movs	r3, #0
 800c206:	4604      	mov	r4, r0
 800c208:	4608      	mov	r0, r1
 800c20a:	602b      	str	r3, [r5, #0]
 800c20c:	f7f8 fca6 	bl	8004b5c <_isatty>
 800c210:	1c43      	adds	r3, r0, #1
 800c212:	d102      	bne.n	800c21a <_isatty_r+0x1a>
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	b103      	cbz	r3, 800c21a <_isatty_r+0x1a>
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	bd38      	pop	{r3, r4, r5, pc}
 800c21c:	20001f28 	.word	0x20001f28

0800c220 <sqrtf>:
 800c220:	b508      	push	{r3, lr}
 800c222:	ed2d 8b02 	vpush	{d8}
 800c226:	eeb0 8a40 	vmov.f32	s16, s0
 800c22a:	f000 f851 	bl	800c2d0 <__ieee754_sqrtf>
 800c22e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c236:	d60c      	bvs.n	800c252 <sqrtf+0x32>
 800c238:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c258 <sqrtf+0x38>
 800c23c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c244:	d505      	bpl.n	800c252 <sqrtf+0x32>
 800c246:	f7fd ff6f 	bl	800a128 <__errno>
 800c24a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c24e:	2321      	movs	r3, #33	@ 0x21
 800c250:	6003      	str	r3, [r0, #0]
 800c252:	ecbd 8b02 	vpop	{d8}
 800c256:	bd08      	pop	{r3, pc}
 800c258:	00000000 	.word	0x00000000

0800c25c <fmaxf>:
 800c25c:	b508      	push	{r3, lr}
 800c25e:	ed2d 8b02 	vpush	{d8}
 800c262:	eeb0 8a40 	vmov.f32	s16, s0
 800c266:	eef0 8a60 	vmov.f32	s17, s1
 800c26a:	f000 f815 	bl	800c298 <__fpclassifyf>
 800c26e:	b930      	cbnz	r0, 800c27e <fmaxf+0x22>
 800c270:	eeb0 8a68 	vmov.f32	s16, s17
 800c274:	eeb0 0a48 	vmov.f32	s0, s16
 800c278:	ecbd 8b02 	vpop	{d8}
 800c27c:	bd08      	pop	{r3, pc}
 800c27e:	eeb0 0a68 	vmov.f32	s0, s17
 800c282:	f000 f809 	bl	800c298 <__fpclassifyf>
 800c286:	2800      	cmp	r0, #0
 800c288:	d0f4      	beq.n	800c274 <fmaxf+0x18>
 800c28a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c292:	dded      	ble.n	800c270 <fmaxf+0x14>
 800c294:	e7ee      	b.n	800c274 <fmaxf+0x18>
	...

0800c298 <__fpclassifyf>:
 800c298:	ee10 3a10 	vmov	r3, s0
 800c29c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c2a0:	d00d      	beq.n	800c2be <__fpclassifyf+0x26>
 800c2a2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c2a6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c2aa:	d30a      	bcc.n	800c2c2 <__fpclassifyf+0x2a>
 800c2ac:	4b07      	ldr	r3, [pc, #28]	@ (800c2cc <__fpclassifyf+0x34>)
 800c2ae:	1e42      	subs	r2, r0, #1
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d908      	bls.n	800c2c6 <__fpclassifyf+0x2e>
 800c2b4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c2b8:	4258      	negs	r0, r3
 800c2ba:	4158      	adcs	r0, r3
 800c2bc:	4770      	bx	lr
 800c2be:	2002      	movs	r0, #2
 800c2c0:	4770      	bx	lr
 800c2c2:	2004      	movs	r0, #4
 800c2c4:	4770      	bx	lr
 800c2c6:	2003      	movs	r0, #3
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	007ffffe 	.word	0x007ffffe

0800c2d0 <__ieee754_sqrtf>:
 800c2d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c2d4:	4770      	bx	lr
	...

0800c2d8 <roundf>:
 800c2d8:	ee10 0a10 	vmov	r0, s0
 800c2dc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c2e0:	3a7f      	subs	r2, #127	@ 0x7f
 800c2e2:	2a16      	cmp	r2, #22
 800c2e4:	dc15      	bgt.n	800c312 <roundf+0x3a>
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	da08      	bge.n	800c2fc <roundf+0x24>
 800c2ea:	3201      	adds	r2, #1
 800c2ec:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800c2f0:	d101      	bne.n	800c2f6 <roundf+0x1e>
 800c2f2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800c2f6:	ee00 3a10 	vmov	s0, r3
 800c2fa:	4770      	bx	lr
 800c2fc:	4907      	ldr	r1, [pc, #28]	@ (800c31c <roundf+0x44>)
 800c2fe:	4111      	asrs	r1, r2
 800c300:	4201      	tst	r1, r0
 800c302:	d0fa      	beq.n	800c2fa <roundf+0x22>
 800c304:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c308:	4113      	asrs	r3, r2
 800c30a:	4403      	add	r3, r0
 800c30c:	ea23 0301 	bic.w	r3, r3, r1
 800c310:	e7f1      	b.n	800c2f6 <roundf+0x1e>
 800c312:	2a80      	cmp	r2, #128	@ 0x80
 800c314:	d1f1      	bne.n	800c2fa <roundf+0x22>
 800c316:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c31a:	4770      	bx	lr
 800c31c:	007fffff 	.word	0x007fffff

0800c320 <_init>:
 800c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c322:	bf00      	nop
 800c324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c326:	bc08      	pop	{r3}
 800c328:	469e      	mov	lr, r3
 800c32a:	4770      	bx	lr

0800c32c <_fini>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	bf00      	nop
 800c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c332:	bc08      	pop	{r3}
 800c334:	469e      	mov	lr, r3
 800c336:	4770      	bx	lr
