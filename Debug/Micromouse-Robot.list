
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021bc  0800d018  0800d018  0000e018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1d4  0800f1d4  00011228  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f1d4  0800f1d4  000101d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1dc  0800f1dc  00011228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1dc  0800f1dc  000101dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f1e0  0800f1e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  0800f1e4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ccc  20000228  0800f40c  00011228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ef4  0800f40c  00011ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173bb  00000000  00000000  00011258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003908  00000000  00000000  00028613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0002bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001010  00000000  00000000  0002d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aaa2  00000000  00000000  0002e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192ed  00000000  00000000  00048e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a074d  00000000  00000000  00062147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102894  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006818  00000000  00000000  001028d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001090f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d000 	.word	0x0800d000

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	0800d000 	.word	0x0800d000

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 fe2d 	bl	8005b60 <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f007 f865 	bl	8008018 <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fe05 	bl	8005b60 <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f007 f90d 	bl	8008178 <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	200002f4 	.word	0x200002f4

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f007 f900 	bl	8008178 <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002f4 	.word	0x200002f4

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <play_confirmation_tone>:

/**
 * @brief Play confirmation tone
 */
void play_confirmation_tone(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    play_tone(784, 150);  // G5
 8000fbc:	2196      	movs	r1, #150	@ 0x96
 8000fbe:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fc2:	f7ff ff8f 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fc6:	2132      	movs	r1, #50	@ 0x32
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff8b 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000fce:	21c8      	movs	r1, #200	@ 0xc8
 8000fd0:	f240 4017 	movw	r0, #1047	@ 0x417
 8000fd4:	f7ff ff86 	bl	8000ee4 <play_tone>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <play_success_tone>:

/**
 * @brief Play success tone sequence
 */
void play_success_tone(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    play_tone(523, 100);  // C5
 8000fe0:	2164      	movs	r1, #100	@ 0x64
 8000fe2:	f240 200b 	movw	r0, #523	@ 0x20b
 8000fe6:	f7ff ff7d 	bl	8000ee4 <play_tone>
    play_tone(659, 100);  // E5
 8000fea:	2164      	movs	r1, #100	@ 0x64
 8000fec:	f240 2093 	movw	r0, #659	@ 0x293
 8000ff0:	f7ff ff78 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 8000ff4:	2164      	movs	r1, #100	@ 0x64
 8000ff6:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000ffa:	f7ff ff73 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000ffe:	21c8      	movs	r1, #200	@ 0xc8
 8001000:	f240 4017 	movw	r0, #1047	@ 0x417
 8001004:	f7ff ff6e 	bl	8000ee4 <play_tone>
    play_tone(0, 100);    // Pause
 8001008:	2164      	movs	r1, #100	@ 0x64
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ff6a 	bl	8000ee4 <play_tone>
    play_tone(1047, 100); // C6
 8001010:	2164      	movs	r1, #100	@ 0x64
 8001012:	f240 4017 	movw	r0, #1047	@ 0x417
 8001016:	f7ff ff65 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 800101a:	2164      	movs	r1, #100	@ 0x64
 800101c:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001020:	f7ff ff60 	bl	8000ee4 <play_tone>
    play_tone(1047, 300); // C6
 8001024:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001028:	f240 4017 	movw	r0, #1047	@ 0x417
 800102c:	f7ff ff5a 	bl	8000ee4 <play_tone>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <play_error_tone>:

/**
 * @brief Play error tone sequence
 */
void play_error_tone(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e00a      	b.n	8001056 <play_error_tone+0x22>
        play_tone(220, 200);  // A3
 8001040:	21c8      	movs	r1, #200	@ 0xc8
 8001042:	20dc      	movs	r0, #220	@ 0xdc
 8001044:	f7ff ff4e 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 8001048:	2164      	movs	r1, #100	@ 0x64
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff4a 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 3; i++) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	ddf1      	ble.n	8001040 <play_error_tone+0xc>
    }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <play_wall_beep>:

/**
 * @brief Play wall detection beep
 */
void play_wall_beep(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
    play_tone(1000, 50);
 800106a:	2132      	movs	r1, #50	@ 0x32
 800106c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001070:	f7ff ff38 	bl	8000ee4 <play_tone>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <play_turn_beep>:

/**
 * @brief Play turn signal beep
 */
void play_turn_beep(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    play_tone(800, 30);
 800107c:	211e      	movs	r1, #30
 800107e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001082:	f7ff ff2f 	bl	8000ee4 <play_tone>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <play_battery_warning>:

/**
 * @brief Play battery low warning
 */
void play_battery_warning(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	e00b      	b.n	80010ae <play_battery_warning+0x24>
        play_tone(440, 100);  // A4
 8001096:	2164      	movs	r1, #100	@ 0x64
 8001098:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 800109c:	f7ff ff22 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 80010a0:	2164      	movs	r1, #100	@ 0x64
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff ff1e 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 5; i++) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	ddf0      	ble.n	8001096 <play_battery_warning+0xc>
    }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff f8d9 	bl	8000280 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <send_bluetooth_message+0x28>)
 80010da:	f008 f887 	bl	80091ec <HAL_UART_Transmit>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000414 	.word	0x20000414

080010ec <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 80010ec:	b40f      	push	{r0, r1, r2, r3}
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b0c2      	sub	sp, #264	@ 0x108
 80010f2:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 80010f4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80010f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001100:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800110a:	f107 0008 	add.w	r0, r7, #8
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001114:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001118:	f009 fddc 	bl	800acd4 <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffcd 	bl	80010c0 <send_bluetooth_message>
}
 8001126:	bf00      	nop
 8001128:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800112c:	46bd      	mov	sp, r7
 800112e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001132:	b004      	add	sp, #16
 8001134:	4770      	bx	lr
	...

08001138 <send_maze_state>:

/**
 * @brief Send current maze state
 */
void send_maze_state(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	@ 0x50
 800113c:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== MAZE STATE ===\r\n");
 800113e:	4844      	ldr	r0, [pc, #272]	@ (8001250 <send_maze_state+0x118>)
 8001140:	f7ff ffbe 	bl	80010c0 <send_bluetooth_message>

    // Send maze in ASCII format
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 8001144:	230f      	movs	r3, #15
 8001146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001148:	e058      	b.n	80011fc <send_maze_state+0xc4>
        char line[64] = "";
 800114a:	463b      	mov	r3, r7
 800114c:	2240      	movs	r2, #64	@ 0x40
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f009 fdcd 	bl	800acf0 <memset>
        for (int x = 0; x < MAZE_SIZE; x++) {
 8001156:	2300      	movs	r3, #0
 8001158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800115a:	e038      	b.n	80011ce <send_maze_state+0x96>
            char cell[8];
            if (maze[x][y].visited) {
 800115c:	493d      	ldr	r1, [pc, #244]	@ (8001254 <send_maze_state+0x11c>)
 800115e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001160:	011a      	lsls	r2, r3, #4
 8001162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001164:	4413      	add	r3, r2
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	440b      	add	r3, r1
 800116a:	3304      	adds	r3, #4
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d01d      	beq.n	80011ae <send_maze_state+0x76>
                sprintf(cell, "%3d ", maze[x][y].distance < MAX_DISTANCE ? maze[x][y].distance : 999);
 8001172:	4938      	ldr	r1, [pc, #224]	@ (8001254 <send_maze_state+0x11c>)
 8001174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001176:	011a      	lsls	r2, r3, #4
 8001178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800117a:	4413      	add	r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001186:	4293      	cmp	r3, r2
 8001188:	dc08      	bgt.n	800119c <send_maze_state+0x64>
 800118a:	4932      	ldr	r1, [pc, #200]	@ (8001254 <send_maze_state+0x11c>)
 800118c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800118e:	011a      	lsls	r2, r3, #4
 8001190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001192:	4413      	add	r3, r2
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	440b      	add	r3, r1
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	e001      	b.n	80011a0 <send_maze_state+0x68>
 800119c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80011a0:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80011a4:	461a      	mov	r2, r3
 80011a6:	492c      	ldr	r1, [pc, #176]	@ (8001258 <send_maze_state+0x120>)
 80011a8:	f009 fd00 	bl	800abac <siprintf>
 80011ac:	e005      	b.n	80011ba <send_maze_state+0x82>
            } else {
                sprintf(cell, " -- ");
 80011ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011b2:	492a      	ldr	r1, [pc, #168]	@ (800125c <send_maze_state+0x124>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f009 fcf9 	bl	800abac <siprintf>
            }
            strcat(line, cell);
 80011ba:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80011be:	463b      	mov	r3, r7
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f009 fd9c 	bl	800ad00 <strcat>
        for (int x = 0; x < MAZE_SIZE; x++) {
 80011c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011ca:	3301      	adds	r3, #1
 80011cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	ddc3      	ble.n	800115c <send_maze_state+0x24>
        }
        strcat(line, "\r\n");
 80011d4:	463b      	mov	r3, r7
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f852 	bl	8000280 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	463b      	mov	r3, r7
 80011e2:	4413      	add	r3, r2
 80011e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001260 <send_maze_state+0x128>)
 80011e6:	8811      	ldrh	r1, [r2, #0]
 80011e8:	7892      	ldrb	r2, [r2, #2]
 80011ea:	8019      	strh	r1, [r3, #0]
 80011ec:	709a      	strb	r2, [r3, #2]
        send_bluetooth_message(line);
 80011ee:	463b      	mov	r3, r7
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff65 	bl	80010c0 <send_bluetooth_message>
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 80011f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011f8:	3b01      	subs	r3, #1
 80011fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011fe:	2b00      	cmp	r3, #0
 8001200:	daa3      	bge.n	800114a <send_maze_state+0x12>
    }

    send_bluetooth_printf("Robot Position: (%d,%d) Direction: %d\r\n",
 8001202:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <send_maze_state+0x12c>)
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <send_maze_state+0x12c>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <send_maze_state+0x12c>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	4816      	ldr	r0, [pc, #88]	@ (8001268 <send_maze_state+0x130>)
 8001210:	f7ff ff6c 	bl	80010ec <send_bluetooth_printf>
                         robot.x, robot.y, robot.direction);
    send_bluetooth_printf("Center Reached: %s\r\n", robot.center_reached ? "YES" : "NO");
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <send_maze_state+0x12c>)
 8001216:	7b1b      	ldrb	r3, [r3, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <send_maze_state+0xe8>
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <send_maze_state+0x134>)
 800121e:	e000      	b.n	8001222 <send_maze_state+0xea>
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <send_maze_state+0x138>)
 8001222:	4619      	mov	r1, r3
 8001224:	4813      	ldr	r0, [pc, #76]	@ (8001274 <send_maze_state+0x13c>)
 8001226:	f7ff ff61 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Returned to Start: %s\r\n", robot.returned_to_start ? "YES" : "NO");
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <send_maze_state+0x12c>)
 800122c:	7b5b      	ldrb	r3, [r3, #13]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <send_maze_state+0xfe>
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <send_maze_state+0x134>)
 8001234:	e000      	b.n	8001238 <send_maze_state+0x100>
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <send_maze_state+0x138>)
 8001238:	4619      	mov	r1, r3
 800123a:	480f      	ldr	r0, [pc, #60]	@ (8001278 <send_maze_state+0x140>)
 800123c:	f7ff ff56 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_message("==================\r\n");
 8001240:	480e      	ldr	r0, [pc, #56]	@ (800127c <send_maze_state+0x144>)
 8001242:	f7ff ff3d 	bl	80010c0 <send_bluetooth_message>
}
 8001246:	bf00      	nop
 8001248:	3750      	adds	r7, #80	@ 0x50
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	0800d018 	.word	0x0800d018
 8001254:	2000045c 	.word	0x2000045c
 8001258:	0800d030 	.word	0x0800d030
 800125c:	0800d038 	.word	0x0800d038
 8001260:	0800d040 	.word	0x0800d040
 8001264:	2000145c 	.word	0x2000145c
 8001268:	0800d044 	.word	0x0800d044
 800126c:	0800d06c 	.word	0x0800d06c
 8001270:	0800d070 	.word	0x0800d070
 8001274:	0800d074 	.word	0x0800d074
 8001278:	0800d08c 	.word	0x0800d08c
 800127c:	0800d0a4 	.word	0x0800d0a4

08001280 <send_sensor_data>:

/**
 * @brief Send current sensor data
 */
void send_sensor_data(void)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af06      	add	r7, sp, #24
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001286:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <send_sensor_data+0x54>)
 8001288:	881b      	ldrh	r3, [r3, #0]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800128a:	461d      	mov	r5, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <send_sensor_data+0x54>)
 800128e:	891b      	ldrh	r3, [r3, #8]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001290:	461e      	mov	r6, r3
                         sensors.battery, sensors.front_left, sensors.front_right,
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <send_sensor_data+0x54>)
 8001294:	885b      	ldrh	r3, [r3, #2]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 8001296:	469c      	mov	ip, r3
                         sensors.side_left, sensors.side_right,
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <send_sensor_data+0x54>)
 800129a:	88db      	ldrh	r3, [r3, #6]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 800129c:	461a      	mov	r2, r3
                         sensors.side_left, sensors.side_right,
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <send_sensor_data+0x54>)
 80012a0:	889b      	ldrh	r3, [r3, #4]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012a2:	4619      	mov	r1, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <send_sensor_data+0x54>)
 80012a6:	7a9b      	ldrb	r3, [r3, #10]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012a8:	4618      	mov	r0, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <send_sensor_data+0x54>)
 80012ac:	7adb      	ldrb	r3, [r3, #11]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012ae:	461c      	mov	r4, r3
                         sensors.wall_front ? 1 : 0, sensors.wall_left ? 1 : 0, sensors.wall_right ? 1 : 0);
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <send_sensor_data+0x54>)
 80012b2:	7b1b      	ldrb	r3, [r3, #12]
    send_bluetooth_printf("SENSORS - Battery:%d FL:%d FR:%d SL:%d SR:%d Walls:F%d L%d R%d\r\n",
 80012b4:	9304      	str	r3, [sp, #16]
 80012b6:	9403      	str	r4, [sp, #12]
 80012b8:	9002      	str	r0, [sp, #8]
 80012ba:	9101      	str	r1, [sp, #4]
 80012bc:	9200      	str	r2, [sp, #0]
 80012be:	4663      	mov	r3, ip
 80012c0:	4632      	mov	r2, r6
 80012c2:	4629      	mov	r1, r5
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <send_sensor_data+0x58>)
 80012c6:	f7ff ff11 	bl	80010ec <send_bluetooth_printf>
}
 80012ca:	bf00      	nop
 80012cc:	3704      	adds	r7, #4
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20001470 	.word	0x20001470
 80012d8:	0800d0bc 	.word	0x0800d0bc

080012dc <send_position_data>:

/**
 * @brief Send current position and encoder data
 */
void send_position_data(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af02      	add	r7, sp, #8
    int32_t left_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <send_position_data+0x44>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80012ec:	607b      	str	r3, [r7, #4]
    int32_t right_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim4) - 32768;
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <send_position_data+0x48>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80012f8:	603b      	str	r3, [r7, #0]

    send_bluetooth_printf("POSITION - X:%d Y:%d Dir:%d EncL:%ld EncR:%ld\r\n",
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <send_position_data+0x4c>)
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <send_position_data+0x4c>)
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <send_position_data+0x4c>)
 8001304:	6898      	ldr	r0, [r3, #8]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4603      	mov	r3, r0
 8001310:	4806      	ldr	r0, [pc, #24]	@ (800132c <send_position_data+0x50>)
 8001312:	f7ff feeb 	bl	80010ec <send_bluetooth_printf>
                         robot.x, robot.y, robot.direction, left_count, right_count);
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000033c 	.word	0x2000033c
 8001324:	200003cc 	.word	0x200003cc
 8001328:	2000145c 	.word	0x2000145c
 800132c:	0800d100 	.word	0x0800d100

08001330 <send_performance_metrics>:

/**
 * @brief Send performance metrics
 */
void send_performance_metrics(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
    float efficiency = get_exploration_efficiency();  // make functions
 8001336:	f002 fa05 	bl	8003744 <get_exploration_efficiency>
 800133a:	ed87 0a01 	vstr	s0, [r7, #4]
    int optimal_distance = get_optimal_distance();		// make functions
 800133e:	f002 fa51 	bl	80037e4 <get_optimal_distance>
 8001342:	6038      	str	r0, [r7, #0]

    send_bluetooth_message("\r\n=== PERFORMANCE METRICS ===\r\n");
 8001344:	4824      	ldr	r0, [pc, #144]	@ (80013d8 <send_performance_metrics+0xa8>)
 8001346:	f7ff febb 	bl	80010c0 <send_bluetooth_message>
    send_bluetooth_printf("Exploration Steps: %d\r\n", robot.exploration_steps);
 800134a:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <send_performance_metrics+0xac>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4619      	mov	r1, r3
 8001350:	4823      	ldr	r0, [pc, #140]	@ (80013e0 <send_performance_metrics+0xb0>)
 8001352:	f7ff fecb 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Exploration Efficiency: %.1f%%\r\n", efficiency);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff f8fe 	bl	8000558 <__aeabi_f2d>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4820      	ldr	r0, [pc, #128]	@ (80013e4 <send_performance_metrics+0xb4>)
 8001362:	f7ff fec3 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Optimal Path Distance: %d steps\r\n", optimal_distance);
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	481f      	ldr	r0, [pc, #124]	@ (80013e8 <send_performance_metrics+0xb8>)
 800136a:	f7ff febf 	bl	80010ec <send_bluetooth_printf>

    // Performance rating
    if (efficiency <= 50.0f && optimal_distance > 0) {
 800136e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001372:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80013ec <send_performance_metrics+0xbc>
 8001376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137e:	d806      	bhi.n	800138e <send_performance_metrics+0x5e>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	dd03      	ble.n	800138e <send_performance_metrics+0x5e>
        send_bluetooth_message("Rating: ⭐⭐⭐⭐⭐ LEVEL\r\n");
 8001386:	481a      	ldr	r0, [pc, #104]	@ (80013f0 <send_performance_metrics+0xc0>)
 8001388:	f7ff fe9a 	bl	80010c0 <send_bluetooth_message>
 800138c:	e01c      	b.n	80013c8 <send_performance_metrics+0x98>
    } else if (efficiency <= 65.0f) {
 800138e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001392:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80013f4 <send_performance_metrics+0xc4>
 8001396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	d803      	bhi.n	80013a8 <send_performance_metrics+0x78>
        send_bluetooth_message("Rating: ⭐⭐⭐⭐ COMPETITION READY\r\n");
 80013a0:	4815      	ldr	r0, [pc, #84]	@ (80013f8 <send_performance_metrics+0xc8>)
 80013a2:	f7ff fe8d 	bl	80010c0 <send_bluetooth_message>
 80013a6:	e00f      	b.n	80013c8 <send_performance_metrics+0x98>
    } else if (efficiency <= 80.0f) {
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80013fc <send_performance_metrics+0xcc>
 80013b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	d803      	bhi.n	80013c2 <send_performance_metrics+0x92>
        send_bluetooth_message("Rating: ⭐⭐⭐ GOOD PERFORMANCE\r\n");
 80013ba:	4811      	ldr	r0, [pc, #68]	@ (8001400 <send_performance_metrics+0xd0>)
 80013bc:	f7ff fe80 	bl	80010c0 <send_bluetooth_message>
 80013c0:	e002      	b.n	80013c8 <send_performance_metrics+0x98>
    } else {
        send_bluetooth_message("Rating: ⭐⭐ NEEDS OPTIMIZATION\r\n");
 80013c2:	4810      	ldr	r0, [pc, #64]	@ (8001404 <send_performance_metrics+0xd4>)
 80013c4:	f7ff fe7c 	bl	80010c0 <send_bluetooth_message>
    }
    send_bluetooth_message("===========================\r\n");
 80013c8:	480f      	ldr	r0, [pc, #60]	@ (8001408 <send_performance_metrics+0xd8>)
 80013ca:	f7ff fe79 	bl	80010c0 <send_bluetooth_message>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	0800d130 	.word	0x0800d130
 80013dc:	2000145c 	.word	0x2000145c
 80013e0:	0800d150 	.word	0x0800d150
 80013e4:	0800d168 	.word	0x0800d168
 80013e8:	0800d18c 	.word	0x0800d18c
 80013ec:	42480000 	.word	0x42480000
 80013f0:	0800d1b0 	.word	0x0800d1b0
 80013f4:	42820000 	.word	0x42820000
 80013f8:	0800d1d0 	.word	0x0800d1d0
 80013fc:	42a00000 	.word	0x42a00000
 8001400:	0800d1fc 	.word	0x0800d1fc
 8001404:	0800d224 	.word	0x0800d224
 8001408:	0800d248 	.word	0x0800d248

0800140c <send_battery_status>:

/**
 * @brief Send battery status
 */
void send_battery_status(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
    // Convert ADC reading to voltage (assuming 3.3V reference)
    float voltage = (sensors.battery * 3.3f) / 4096.0f;
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <send_battery_status+0x60>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001470 <send_battery_status+0x64>
 8001422:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001426:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001474 <send_battery_status+0x68>
 800142a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142e:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_printf("Battery: %.2fV (ADC:%d)", voltage, sensors.battery);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff f890 	bl	8000558 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	490b      	ldr	r1, [pc, #44]	@ (800146c <send_battery_status+0x60>)
 800143e:	8809      	ldrh	r1, [r1, #0]
 8001440:	9100      	str	r1, [sp, #0]
 8001442:	480d      	ldr	r0, [pc, #52]	@ (8001478 <send_battery_status+0x6c>)
 8001444:	f7ff fe52 	bl	80010ec <send_bluetooth_printf>

    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <send_battery_status+0x60>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001450:	4293      	cmp	r3, r2
 8001452:	d803      	bhi.n	800145c <send_battery_status+0x50>
        send_bluetooth_message(" - LOW BATTERY WARNING!\r\n");
 8001454:	4809      	ldr	r0, [pc, #36]	@ (800147c <send_battery_status+0x70>)
 8001456:	f7ff fe33 	bl	80010c0 <send_bluetooth_message>
    } else {
        send_bluetooth_message(" - OK\r\n");
    }
}
 800145a:	e002      	b.n	8001462 <send_battery_status+0x56>
        send_bluetooth_message(" - OK\r\n");
 800145c:	4808      	ldr	r0, [pc, #32]	@ (8001480 <send_battery_status+0x74>)
 800145e:	f7ff fe2f 	bl	80010c0 <send_bluetooth_message>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20001470 	.word	0x20001470
 8001470:	40533333 	.word	0x40533333
 8001474:	45800000 	.word	0x45800000
 8001478:	0800d268 	.word	0x0800d268
 800147c:	0800d280 	.word	0x0800d280
 8001480:	0800d29c 	.word	0x0800d29c

08001484 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001494:	b2db      	uxtb	r3, r3
 8001496:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014a2:	4817      	ldr	r0, [pc, #92]	@ (8001500 <mpu9250_read_register+0x7c>)
 80014a4:	f005 fa9a 	bl	80069dc <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 80014a8:	f107 010d 	add.w	r1, r7, #13
 80014ac:	2364      	movs	r3, #100	@ 0x64
 80014ae:	2201      	movs	r2, #1
 80014b0:	4814      	ldr	r0, [pc, #80]	@ (8001504 <mpu9250_read_register+0x80>)
 80014b2:	f005 ffc0 	bl	8007436 <HAL_SPI_Transmit>
 80014b6:	4603      	mov	r3, r0
 80014b8:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 80014ba:	f107 010c 	add.w	r1, r7, #12
 80014be:	2364      	movs	r3, #100	@ 0x64
 80014c0:	2201      	movs	r2, #1
 80014c2:	4810      	ldr	r0, [pc, #64]	@ (8001504 <mpu9250_read_register+0x80>)
 80014c4:	f006 f8fb 	bl	80076be <HAL_SPI_Receive>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d2:	480b      	ldr	r0, [pc, #44]	@ (8001500 <mpu9250_read_register+0x7c>)
 80014d4:	f005 fa82 	bl	80069dc <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <mpu9250_read_register+0x60>
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 80014e4:	4808      	ldr	r0, [pc, #32]	@ (8001508 <mpu9250_read_register+0x84>)
 80014e6:	f7ff fdeb 	bl	80010c0 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <mpu9250_read_register+0x88>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 80014f0:	23ff      	movs	r3, #255	@ 0xff
 80014f2:	e000      	b.n	80014f6 <mpu9250_read_register+0x72>
    }

    return rx_data;
 80014f4:	7b3b      	ldrb	r3, [r7, #12]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020400 	.word	0x40020400
 8001504:	2000029c 	.word	0x2000029c
 8001508:	0800d3bc 	.word	0x0800d3bc
 800150c:	20000244 	.word	0x20000244

08001510 <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	460a      	mov	r2, r1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	733b      	strb	r3, [r7, #12]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800152e:	4811      	ldr	r0, [pc, #68]	@ (8001574 <mpu9250_write_register+0x64>)
 8001530:	f005 fa54 	bl	80069dc <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 8001534:	f107 010c 	add.w	r1, r7, #12
 8001538:	2364      	movs	r3, #100	@ 0x64
 800153a:	2202      	movs	r2, #2
 800153c:	480e      	ldr	r0, [pc, #56]	@ (8001578 <mpu9250_write_register+0x68>)
 800153e:	f005 ff7a 	bl	8007436 <HAL_SPI_Transmit>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800154c:	4809      	ldr	r0, [pc, #36]	@ (8001574 <mpu9250_write_register+0x64>)
 800154e:	f005 fa45 	bl	80069dc <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 8001558:	4808      	ldr	r0, [pc, #32]	@ (800157c <mpu9250_write_register+0x6c>)
 800155a:	f7ff fdb1 	bl	80010c0 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <mpu9250_write_register+0x70>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8001564:	2001      	movs	r0, #1
 8001566:	f004 fafb 	bl	8005b60 <HAL_Delay>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40020400 	.word	0x40020400
 8001578:	2000029c 	.word	0x2000029c
 800157c:	0800d3e0 	.word	0x0800d3e0
 8001580:	20000244 	.word	0x20000244

08001584 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 800158a:	483c      	ldr	r0, [pc, #240]	@ (800167c <mpu9250_init+0xf8>)
 800158c:	f7ff fd98 	bl	80010c0 <send_bluetooth_message>
    HAL_Delay(200);
 8001590:	20c8      	movs	r0, #200	@ 0xc8
 8001592:	f004 fae5 	bl	8005b60 <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 8001596:	2180      	movs	r1, #128	@ 0x80
 8001598:	206b      	movs	r0, #107	@ 0x6b
 800159a:	f7ff ffb9 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 800159e:	20fa      	movs	r0, #250	@ 0xfa
 80015a0:	f004 fade 	bl	8005b60 <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 80015a4:	2100      	movs	r1, #0
 80015a6:	206b      	movs	r0, #107	@ 0x6b
 80015a8:	f7ff ffb2 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(50);
 80015ac:	2032      	movs	r0, #50	@ 0x32
 80015ae:	f004 fad7 	bl	8005b60 <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 80015b2:	2101      	movs	r1, #1
 80015b4:	206b      	movs	r0, #107	@ 0x6b
 80015b6:	f7ff ffab 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(50);
 80015ba:	2032      	movs	r0, #50	@ 0x32
 80015bc:	f004 fad0 	bl	8005b60 <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 80015c0:	2100      	movs	r1, #0
 80015c2:	206c      	movs	r0, #108	@ 0x6c
 80015c4:	f7ff ffa4 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 80015c8:	200a      	movs	r0, #10
 80015ca:	f004 fac9 	bl	8005b60 <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 80015ce:	206a      	movs	r0, #106	@ 0x6a
 80015d0:	f7ff ff58 	bl	8001484 <mpu9250_read_register>
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4619      	mov	r1, r3
 80015e4:	206a      	movs	r0, #106	@ 0x6a
 80015e6:	f7ff ff93 	bl	8001510 <mpu9250_write_register>
     HAL_Delay(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f004 fab8 	bl	8005b60 <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 80015f0:	2104      	movs	r1, #4
 80015f2:	2019      	movs	r0, #25
 80015f4:	f7ff ff8c 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 80015f8:	200a      	movs	r0, #10
 80015fa:	f004 fab1 	bl	8005b60 <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 80015fe:	2102      	movs	r1, #2
 8001600:	201a      	movs	r0, #26
 8001602:	f7ff ff85 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 8001606:	200a      	movs	r0, #10
 8001608:	f004 faaa 	bl	8005b60 <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 800160c:	2108      	movs	r1, #8
 800160e:	201b      	movs	r0, #27
 8001610:	f7ff ff7e 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 8001614:	200a      	movs	r0, #10
 8001616:	f004 faa3 	bl	8005b60 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 800161a:	2108      	movs	r1, #8
 800161c:	201c      	movs	r0, #28
 800161e:	f7ff ff77 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 8001622:	200a      	movs	r0, #10
 8001624:	f004 fa9c 	bl	8005b60 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 8001628:	2102      	movs	r1, #2
 800162a:	201d      	movs	r0, #29
 800162c:	f7ff ff70 	bl	8001510 <mpu9250_write_register>
    HAL_Delay(10);
 8001630:	200a      	movs	r0, #10
 8001632:	f004 fa95 	bl	8005b60 <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001636:	2075      	movs	r0, #117	@ 0x75
 8001638:	f7ff ff24 	bl	8001484 <mpu9250_read_register>
 800163c:	4603      	mov	r3, r0
 800163e:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	4619      	mov	r1, r3
 8001644:	480e      	ldr	r0, [pc, #56]	@ (8001680 <mpu9250_init+0xfc>)
 8001646:	f7ff fd51 	bl	80010ec <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	2b70      	cmp	r3, #112	@ 0x70
 800164e:	d009      	beq.n	8001664 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	4619      	mov	r1, r3
 8001654:	480b      	ldr	r0, [pc, #44]	@ (8001684 <mpu9250_init+0x100>)
 8001656:	f7ff fd49 	bl	80010ec <send_bluetooth_printf>
        mpu9250_initialized=false;
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <mpu9250_init+0x104>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
        return false;
 8001660:	2300      	movs	r3, #0
 8001662:	e006      	b.n	8001672 <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8001664:	4809      	ldr	r0, [pc, #36]	@ (800168c <mpu9250_init+0x108>)
 8001666:	f7ff fd2b 	bl	80010c0 <send_bluetooth_message>
    mpu9250_initialized=true;
 800166a:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <mpu9250_init+0x104>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
    return true;
 8001670:	2301      	movs	r3, #1
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	0800d408 	.word	0x0800d408
 8001680:	0800d434 	.word	0x0800d434
 8001684:	0800d448 	.word	0x0800d448
 8001688:	20000244 	.word	0x20000244
 800168c:	0800d470 	.word	0x0800d470

08001690 <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 8001696:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <mpu9250_calibrate_bias+0xa4>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	f083 0301 	eor.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <mpu9250_calibrate_bias+0x1c>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 80016a4:	4824      	ldr	r0, [pc, #144]	@ (8001738 <mpu9250_calibrate_bias+0xa8>)
 80016a6:	f7ff fd0b 	bl	80010c0 <send_bluetooth_message>
        return;
 80016aa:	e03f      	b.n	800172c <mpu9250_calibrate_bias+0x9c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 80016ac:	4823      	ldr	r0, [pc, #140]	@ (800173c <mpu9250_calibrate_bias+0xac>)
 80016ae:	f7ff fd07 	bl	80010c0 <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 100;
 80016b2:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <mpu9250_calibrate_bias+0xb0>)
 80016b4:	2264      	movs	r2, #100	@ 0x64
 80016b6:	609a      	str	r2, [r3, #8]
    //float sum_x = 0, sum_y = 0, sum_z = 0;
    float sum_z = 0;
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	e014      	b.n	80016ee <mpu9250_calibrate_bias+0x5e>
        mpu9250_read_gyro();
 80016c4:	f000 f87c 	bl	80017c0 <mpu9250_read_gyro>
        //sum_x += gyro.gyro_x;
        //sum_y += gyro.gyro_y;
        sum_z += gyro.gyro_z;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <mpu9250_calibrate_bias+0xb4>)
 80016ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016de:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 80016e2:	2003      	movs	r0, #3
 80016e4:	f004 fa3c 	bl	8005b60 <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <mpu9250_calibrate_bias+0xb0>)
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d8e5      	bhi.n	80016c4 <mpu9250_calibrate_bias+0x34>
    }

    //enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
    //enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <mpu9250_calibrate_bias+0xb0>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001704:	edd7 6a01 	vldr	s13, [r7, #4]
 8001708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <mpu9250_calibrate_bias+0xb0>)
 800170e:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.calibrated = true;
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <mpu9250_calibrate_bias+0xb0>)
 8001714:	2201      	movs	r2, #1
 8001716:	711a      	strb	r2, [r3, #4]

//    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
//                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
    send_bluetooth_printf("Gyro bias calibrated: Z:%.1f\r\n", enhanced_gyro.gyro_bias_z);
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <mpu9250_calibrate_bias+0xb0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff1b 	bl	8000558 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4808      	ldr	r0, [pc, #32]	@ (8001748 <mpu9250_calibrate_bias+0xb8>)
 8001728:	f7ff fce0 	bl	80010ec <send_bluetooth_printf>
}
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000244 	.word	0x20000244
 8001738:	0800d484 	.word	0x0800d484
 800173c:	0800d4b0 	.word	0x0800d4b0
 8001740:	20000248 	.word	0x20000248
 8001744:	20001480 	.word	0x20001480
 8001748:	0800d4e4 	.word	0x0800d4e4

0800174c <mpu9250_get_gyro_z_compensated>:

/**
 * @brief Get bias-compensated gyro Z value in degrees per second
 */
float mpu9250_get_gyro_z_compensated(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
    if (!enhanced_gyro.calibrated) {
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <mpu9250_get_gyro_z_compensated+0x50>)
 8001754:	791b      	ldrb	r3, [r3, #4]
 8001756:	f083 0301 	eor.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <mpu9250_get_gyro_z_compensated+0x1e>
        return mpu9250_get_gyro_z_dps(); // Fall back to uncompensated
 8001760:	f000 f902 	bl	8001968 <mpu9250_get_gyro_z_dps>
 8001764:	eef0 7a40 	vmov.f32	s15, s0
 8001768:	e013      	b.n	8001792 <mpu9250_get_gyro_z_compensated+0x46>
    }

    float raw_z_dps = (float)(gyro.gyro_z - enhanced_gyro.gyro_bias_z) / 65.5f;
 800176a:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <mpu9250_get_gyro_z_compensated+0x54>)
 800176c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <mpu9250_get_gyro_z_compensated+0x50>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001782:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80017a4 <mpu9250_get_gyro_z_compensated+0x58>
 8001786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178a:	edc7 7a01 	vstr	s15, [r7, #4]
    return raw_z_dps;
 800178e:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000248 	.word	0x20000248
 80017a0:	20001480 	.word	0x20001480
 80017a4:	42830000 	.word	0x42830000

080017a8 <mpu9250_is_initialized>:

/**
 * @brief Check if MPU9250 is initialized - NEW FUNCTION
 */
bool mpu9250_is_initialized(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
    return mpu9250_initialized;
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <mpu9250_is_initialized+0x14>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000244 	.word	0x20000244

080017c0 <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 80017c6:	4b25      	ldr	r3, [pc, #148]	@ (800185c <mpu9250_read_gyro+0x9c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	f083 0301 	eor.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 80017d4:	4822      	ldr	r0, [pc, #136]	@ (8001860 <mpu9250_read_gyro+0xa0>)
 80017d6:	f7ff fc73 	bl	80010c0 <send_bluetooth_message>
        return;
 80017da:	e03c      	b.n	8001856 <mpu9250_read_gyro+0x96>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 80017dc:	23c3      	movs	r3, #195	@ 0xc3
 80017de:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017e6:	481f      	ldr	r0, [pc, #124]	@ (8001864 <mpu9250_read_gyro+0xa4>)
 80017e8:	f005 f8f8 	bl	80069dc <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80017ec:	1df9      	adds	r1, r7, #7
 80017ee:	2364      	movs	r3, #100	@ 0x64
 80017f0:	2201      	movs	r2, #1
 80017f2:	481d      	ldr	r0, [pc, #116]	@ (8001868 <mpu9250_read_gyro+0xa8>)
 80017f4:	f005 fe1f 	bl	8007436 <HAL_SPI_Transmit>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001808:	4816      	ldr	r0, [pc, #88]	@ (8001864 <mpu9250_read_gyro+0xa4>)
 800180a:	f005 f8e7 	bl	80069dc <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 800180e:	4817      	ldr	r0, [pc, #92]	@ (800186c <mpu9250_read_gyro+0xac>)
 8001810:	f7ff fc56 	bl	80010c0 <send_bluetooth_message>
        return;
 8001814:	e01f      	b.n	8001856 <mpu9250_read_gyro+0x96>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 8001816:	f107 0108 	add.w	r1, r7, #8
 800181a:	2364      	movs	r3, #100	@ 0x64
 800181c:	2206      	movs	r2, #6
 800181e:	4812      	ldr	r0, [pc, #72]	@ (8001868 <mpu9250_read_gyro+0xa8>)
 8001820:	f005 ff4d 	bl	80076be <HAL_SPI_Receive>
 8001824:	4603      	mov	r3, r0
 8001826:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800182e:	480d      	ldr	r0, [pc, #52]	@ (8001864 <mpu9250_read_gyro+0xa4>)
 8001830:	f005 f8d4 	bl	80069dc <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 800183a:	480d      	ldr	r0, [pc, #52]	@ (8001870 <mpu9250_read_gyro+0xb0>)
 800183c:	f7ff fc40 	bl	80010c0 <send_bluetooth_message>
        return;
 8001840:	e009      	b.n	8001856 <mpu9250_read_gyro+0x96>
    }

    // Convert to signed 16-bit values
    //gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
    //gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001842:	7b3b      	ldrb	r3, [r7, #12]
 8001844:	b21b      	sxth	r3, r3
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b21a      	sxth	r2, r3
 800184a:	7b7b      	ldrb	r3, [r7, #13]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b21a      	sxth	r2, r3
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <mpu9250_read_gyro+0xb4>)
 8001854:	809a      	strh	r2, [r3, #4]
}
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000244 	.word	0x20000244
 8001860:	0800d504 	.word	0x0800d504
 8001864:	40020400 	.word	0x40020400
 8001868:	2000029c 	.word	0x2000029c
 800186c:	0800d538 	.word	0x0800d538
 8001870:	0800d55c 	.word	0x0800d55c
 8001874:	20001480 	.word	0x20001480

08001878 <mpu9250_read_accel>:

/**
 * @brief Read raw accelerometer data - FIXED with error checking
 */
void mpu9250_read_accel(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 800187e:	4b2f      	ldr	r3, [pc, #188]	@ (800193c <mpu9250_read_accel+0xc4>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	f083 0301 	eor.w	r3, r3, #1
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <mpu9250_read_accel+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read accel\r\n");
 800188c:	482c      	ldr	r0, [pc, #176]	@ (8001940 <mpu9250_read_accel+0xc8>)
 800188e:	f7ff fc17 	bl	80010c0 <send_bluetooth_message>
        return;
 8001892:	e050      	b.n	8001936 <mpu9250_read_accel+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_ACCEL_XOUT_H | 0x80; // Set read bit
 8001894:	23bb      	movs	r3, #187	@ 0xbb
 8001896:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800189e:	4829      	ldr	r0, [pc, #164]	@ (8001944 <mpu9250_read_accel+0xcc>)
 80018a0:	f005 f89c 	bl	80069dc <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80018a4:	1df9      	adds	r1, r7, #7
 80018a6:	2364      	movs	r3, #100	@ 0x64
 80018a8:	2201      	movs	r2, #1
 80018aa:	4827      	ldr	r0, [pc, #156]	@ (8001948 <mpu9250_read_accel+0xd0>)
 80018ac:	f005 fdc3 	bl	8007436 <HAL_SPI_Transmit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <mpu9250_read_accel+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018c0:	4820      	ldr	r0, [pc, #128]	@ (8001944 <mpu9250_read_accel+0xcc>)
 80018c2:	f005 f88b 	bl	80069dc <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in accel read\r\n");
 80018c6:	4821      	ldr	r0, [pc, #132]	@ (800194c <mpu9250_read_accel+0xd4>)
 80018c8:	f7ff fbfa 	bl	80010c0 <send_bluetooth_message>
        return;
 80018cc:	e033      	b.n	8001936 <mpu9250_read_accel+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 80018ce:	f107 0108 	add.w	r1, r7, #8
 80018d2:	2364      	movs	r3, #100	@ 0x64
 80018d4:	2206      	movs	r2, #6
 80018d6:	481c      	ldr	r0, [pc, #112]	@ (8001948 <mpu9250_read_accel+0xd0>)
 80018d8:	f005 fef1 	bl	80076be <HAL_SPI_Receive>
 80018dc:	4603      	mov	r3, r0
 80018de:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018e6:	4817      	ldr	r0, [pc, #92]	@ (8001944 <mpu9250_read_accel+0xcc>)
 80018e8:	f005 f878 	bl	80069dc <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <mpu9250_read_accel+0x82>
        send_bluetooth_message("SPI receive error in accel read\r\n");
 80018f2:	4817      	ldr	r0, [pc, #92]	@ (8001950 <mpu9250_read_accel+0xd8>)
 80018f4:	f7ff fbe4 	bl	80010c0 <send_bluetooth_message>
        return;
 80018f8:	e01d      	b.n	8001936 <mpu9250_read_accel+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.accel_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 80018fa:	7a3b      	ldrb	r3, [r7, #8]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b21a      	sxth	r2, r3
 8001902:	7a7b      	ldrb	r3, [r7, #9]
 8001904:	b21b      	sxth	r3, r3
 8001906:	4313      	orrs	r3, r2
 8001908:	b21a      	sxth	r2, r3
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <mpu9250_read_accel+0xdc>)
 800190c:	80da      	strh	r2, [r3, #6]
    gyro.accel_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 800190e:	7abb      	ldrb	r3, [r7, #10]
 8001910:	b21b      	sxth	r3, r3
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	b21a      	sxth	r2, r3
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	b21b      	sxth	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b21a      	sxth	r2, r3
 800191e:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <mpu9250_read_accel+0xdc>)
 8001920:	811a      	strh	r2, [r3, #8]
    gyro.accel_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001922:	7b3b      	ldrb	r3, [r7, #12]
 8001924:	b21b      	sxth	r3, r3
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21a      	sxth	r2, r3
 800192a:	7b7b      	ldrb	r3, [r7, #13]
 800192c:	b21b      	sxth	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b21a      	sxth	r2, r3
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <mpu9250_read_accel+0xdc>)
 8001934:	815a      	strh	r2, [r3, #10]
}
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000244 	.word	0x20000244
 8001940:	0800d580 	.word	0x0800d580
 8001944:	40020400 	.word	0x40020400
 8001948:	2000029c 	.word	0x2000029c
 800194c:	0800d5b8 	.word	0x0800d5b8
 8001950:	0800d5dc 	.word	0x0800d5dc
 8001954:	20001480 	.word	0x20001480

08001958 <mpu9250_read_all>:

/**
 * @brief Read all IMU data
 */
void mpu9250_read_all(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
    mpu9250_read_accel();
 800195c:	f7ff ff8c 	bl	8001878 <mpu9250_read_accel>
    mpu9250_read_gyro();
 8001960:	f7ff ff2e 	bl	80017c0 <mpu9250_read_gyro>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <mpu9250_get_gyro_z_dps>:

/**
 * @brief Get gyro Z-axis in degrees per second
 */
float mpu9250_get_gyro_z_dps(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
    // ±500 dps range, 16-bit resolution
    // Sensitivity: 65.5 LSB/(dps)

    return (float)gyro.gyro_z / 65.5f;
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <mpu9250_get_gyro_z_dps+0x2c>)
 800196e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001998 <mpu9250_get_gyro_z_dps+0x30>
 800197e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001982:	eef0 7a66 	vmov.f32	s15, s13
}
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20001480 	.word	0x20001480
 8001998:	42830000 	.word	0x42830000

0800199c <mpu9250_send_status>:

/**
 * @brief Get MPU9250 status for debugging - NEW FUNCTION
 */
void mpu9250_send_status(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
                         mpu9250_initialized ? "OK" : "FAILED");
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <mpu9250_send_status+0xa8>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <mpu9250_send_status+0x12>
 80019aa:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <mpu9250_send_status+0xac>)
 80019ac:	e000      	b.n	80019b0 <mpu9250_send_status+0x14>
 80019ae:	4b27      	ldr	r3, [pc, #156]	@ (8001a4c <mpu9250_send_status+0xb0>)
 80019b0:	4619      	mov	r1, r3
 80019b2:	4827      	ldr	r0, [pc, #156]	@ (8001a50 <mpu9250_send_status+0xb4>)
 80019b4:	f7ff fb9a 	bl	80010ec <send_bluetooth_printf>

    if (mpu9250_initialized) {
 80019b8:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <mpu9250_send_status+0xa8>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d03c      	beq.n	8001a3a <mpu9250_send_status+0x9e>
        uint8_t who_am_i = mpu9250_read_register(MPU9250_WHO_AM_I);
 80019c0:	2075      	movs	r0, #117	@ 0x75
 80019c2:	f7ff fd5f 	bl	8001484 <mpu9250_read_register>
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
        uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 80019ca:	206a      	movs	r0, #106	@ 0x6a
 80019cc:	f7ff fd5a 	bl	8001484 <mpu9250_read_register>
 80019d0:	4603      	mov	r3, r0
 80019d2:	71bb      	strb	r3, [r7, #6]
        uint8_t pwr_mgmt = mpu9250_read_register(MPU9250_PWR_MGMT_1);
 80019d4:	206b      	movs	r0, #107	@ 0x6b
 80019d6:	f7ff fd55 	bl	8001484 <mpu9250_read_register>
 80019da:	4603      	mov	r3, r0
 80019dc:	717b      	strb	r3, [r7, #5]

        send_bluetooth_printf("WHO_AM_I:0x%02X USER_CTRL:0x%02X PWR_MGMT:0x%02X\r\n",
 80019de:	79f9      	ldrb	r1, [r7, #7]
 80019e0:	79ba      	ldrb	r2, [r7, #6]
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	481b      	ldr	r0, [pc, #108]	@ (8001a54 <mpu9250_send_status+0xb8>)
 80019e6:	f7ff fb81 	bl	80010ec <send_bluetooth_printf>
                             who_am_i, user_ctrl, pwr_mgmt);

        if (user_ctrl & 0x10) {
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <mpu9250_send_status+0x60>
            send_bluetooth_message("I2C disabled: ✅\r\n");
 80019f4:	4818      	ldr	r0, [pc, #96]	@ (8001a58 <mpu9250_send_status+0xbc>)
 80019f6:	f7ff fb63 	bl	80010c0 <send_bluetooth_message>
 80019fa:	e002      	b.n	8001a02 <mpu9250_send_status+0x66>
        } else {
            send_bluetooth_message("I2C disabled: ❌\r\n");
 80019fc:	4817      	ldr	r0, [pc, #92]	@ (8001a5c <mpu9250_send_status+0xc0>)
 80019fe:	f7ff fb5f 	bl	80010c0 <send_bluetooth_message>
        }

        // Read current sensor values
        mpu9250_read_all();
 8001a02:	f7ff ffa9 	bl	8001958 <mpu9250_read_all>
//        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
//                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <mpu9250_send_status+0xc4>)
 8001a08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001a0c:	4619      	mov	r1, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <mpu9250_send_status+0xc4>)
 8001a10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001a14:	461a      	mov	r2, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <mpu9250_send_status+0xc4>)
 8001a18:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001a1c:	4811      	ldr	r0, [pc, #68]	@ (8001a64 <mpu9250_send_status+0xc8>)
 8001a1e:	f7ff fb65 	bl	80010ec <send_bluetooth_printf>
        send_bluetooth_printf("Gyro Z:%.1f°/s\r\n",mpu9250_get_gyro_z_dps());
 8001a22:	f7ff ffa1 	bl	8001968 <mpu9250_get_gyro_z_dps>
 8001a26:	ee10 3a10 	vmov	r3, s0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fd94 	bl	8000558 <__aeabi_f2d>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <mpu9250_send_status+0xcc>)
 8001a36:	f7ff fb59 	bl	80010ec <send_bluetooth_printf>
    }
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000244 	.word	0x20000244
 8001a48:	0800d600 	.word	0x0800d600
 8001a4c:	0800d604 	.word	0x0800d604
 8001a50:	0800d60c 	.word	0x0800d60c
 8001a54:	0800d628 	.word	0x0800d628
 8001a58:	0800d65c 	.word	0x0800d65c
 8001a5c:	0800d670 	.word	0x0800d670
 8001a60:	20001480 	.word	0x20001480
 8001a64:	0800d684 	.word	0x0800d684
 8001a68:	0800d69c 	.word	0x0800d69c

08001a6c <initialize_hardware_systems>:


/**
 * @brief Initialize all hardware systems and perform diagnostics
 */
static void initialize_hardware_systems(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
    //send_bluetooth_message("\r\n" "="*60 "\r\n");
    send_bluetooth_message("🤖 CHAMPIONSHIP MICROMOUSE INITIALIZATION 🤖\r\n");
 8001a70:	4828      	ldr	r0, [pc, #160]	@ (8001b14 <initialize_hardware_systems+0xa8>)
 8001a72:	f7ff fb25 	bl	80010c0 <send_bluetooth_message>
    //send_bluetooth_message("="*60 "\r\n");

    // Initialize PWM for motors
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6 (MOTOR_IN1)
 8001a76:	2100      	movs	r1, #0
 8001a78:	4827      	ldr	r0, [pc, #156]	@ (8001b18 <initialize_hardware_systems+0xac>)
 8001a7a:	f006 facd 	bl	8008018 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // PA7 (MOTOR_IN2)
 8001a7e:	2104      	movs	r1, #4
 8001a80:	4825      	ldr	r0, [pc, #148]	@ (8001b18 <initialize_hardware_systems+0xac>)
 8001a82:	f006 fac9 	bl	8008018 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // PB0 (MOTOR_IN3)
 8001a86:	2108      	movs	r1, #8
 8001a88:	4823      	ldr	r0, [pc, #140]	@ (8001b18 <initialize_hardware_systems+0xac>)
 8001a8a:	f006 fac5 	bl	8008018 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PB1 (MOTOR_IN4)
 8001a8e:	210c      	movs	r1, #12
 8001a90:	4821      	ldr	r0, [pc, #132]	@ (8001b18 <initialize_hardware_systems+0xac>)
 8001a92:	f006 fac1 	bl	8008018 <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET); // Enable DRV8833
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a9c:	481f      	ldr	r0, [pc, #124]	@ (8001b1c <initialize_hardware_systems+0xb0>)
 8001a9e:	f004 ff9d 	bl	80069dc <HAL_GPIO_WritePin>

    // Verify ADC GPIO configuration
    verify_adc_gpio_configuration();
 8001aa2:	f000 fd95 	bl	80025d0 <verify_adc_gpio_configuration>
    adc_system_diagnostics();
 8001aa6:	f002 fe2d 	bl	8004704 <adc_system_diagnostics>

    // Initialize and test MPU9250 gyroscope
    if (mpu9250_init()) {
 8001aaa:	f7ff fd6b 	bl	8001584 <mpu9250_init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00f      	beq.n	8001ad4 <initialize_hardware_systems+0x68>
        send_bluetooth_message("✅ MPU9250 gyroscope initialized successfully\r\n");
 8001ab4:	481a      	ldr	r0, [pc, #104]	@ (8001b20 <initialize_hardware_systems+0xb4>)
 8001ab6:	f7ff fb03 	bl	80010c0 <send_bluetooth_message>
        send_bluetooth_message("⚠️ KEEP ROBOT STATIONARY during gyro calibration!\r\n");
 8001aba:	481a      	ldr	r0, [pc, #104]	@ (8001b24 <initialize_hardware_systems+0xb8>)
 8001abc:	f7ff fb00 	bl	80010c0 <send_bluetooth_message>
        HAL_Delay(2000);
 8001ac0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ac4:	f004 f84c 	bl	8005b60 <HAL_Delay>
        mpu9250_calibrate_bias();
 8001ac8:	f7ff fde2 	bl	8001690 <mpu9250_calibrate_bias>
        send_bluetooth_message("✅ Gyro calibration complete\r\n");
 8001acc:	4816      	ldr	r0, [pc, #88]	@ (8001b28 <initialize_hardware_systems+0xbc>)
 8001ace:	f7ff faf7 	bl	80010c0 <send_bluetooth_message>
 8001ad2:	e002      	b.n	8001ada <initialize_hardware_systems+0x6e>
    } else {
        send_bluetooth_message("⚠️ Gyro initialization failed - using basic movement\r\n");
 8001ad4:	4815      	ldr	r0, [pc, #84]	@ (8001b2c <initialize_hardware_systems+0xc0>)
 8001ad6:	f7ff faf3 	bl	80010c0 <send_bluetooth_message>
    }

    // Initialize encoders
    start_encoders();
 8001ada:	f001 ff0b 	bl	80038f4 <start_encoders>
    HAL_Delay(100);
 8001ade:	2064      	movs	r0, #100	@ 0x64
 8001ae0:	f004 f83e 	bl	8005b60 <HAL_Delay>

    // Test encoder functionality
    if (get_left_encoder_total() == 0 && get_right_encoder_total() == 0) {
 8001ae4:	f001 fecc 	bl	8003880 <get_left_encoder_total>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d108      	bne.n	8001b00 <initialize_hardware_systems+0x94>
 8001aee:	f001 fed1 	bl	8003894 <get_right_encoder_total>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d103      	bne.n	8001b00 <initialize_hardware_systems+0x94>
        send_bluetooth_message("⚠️ WARNING: Encoders may not be working properly\r\n");
 8001af8:	480d      	ldr	r0, [pc, #52]	@ (8001b30 <initialize_hardware_systems+0xc4>)
 8001afa:	f7ff fae1 	bl	80010c0 <send_bluetooth_message>
 8001afe:	e002      	b.n	8001b06 <initialize_hardware_systems+0x9a>
    } else {
        send_bluetooth_message("✅ Encoders initialized and responding\r\n");
 8001b00:	480c      	ldr	r0, [pc, #48]	@ (8001b34 <initialize_hardware_systems+0xc8>)
 8001b02:	f7ff fadd 	bl	80010c0 <send_bluetooth_message>
    }

    // Initialize maze exploration system
    initialize_maze_exploration();
 8001b06:	f000 fe61 	bl	80027cc <initialize_maze_exploration>

    send_bluetooth_message("✅ All systems initialized successfully!\r\n");
 8001b0a:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <initialize_hardware_systems+0xcc>)
 8001b0c:	f7ff fad8 	bl	80010c0 <send_bluetooth_message>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	0800d6b0 	.word	0x0800d6b0
 8001b18:	20000384 	.word	0x20000384
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	0800d6e4 	.word	0x0800d6e4
 8001b24:	0800d718 	.word	0x0800d718
 8001b28:	0800d750 	.word	0x0800d750
 8001b2c:	0800d770 	.word	0x0800d770
 8001b30:	0800d7ac 	.word	0x0800d7ac
 8001b34:	0800d7e4 	.word	0x0800d7e4
 8001b38:	0800d810 	.word	0x0800d810

08001b3c <run_system_diagnostics>:

/**
 * @brief Run comprehensive system diagnostics
 */
static void run_system_diagnostics(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🔧 SYSTEM DIAGNOSTICS 🔧\r\n");
 8001b40:	4821      	ldr	r0, [pc, #132]	@ (8001bc8 <run_system_diagnostics+0x8c>)
 8001b42:	f7ff fabd 	bl	80010c0 <send_bluetooth_message>

    // Test sensors
    update_sensors();
 8001b46:	f002 fcf5 	bl	8004534 <update_sensors>
    if (sensors.battery == 0 && sensors.front_left == 0 &&
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <run_system_diagnostics+0x90>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d113      	bne.n	8001b7a <run_system_diagnostics+0x3e>
 8001b52:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <run_system_diagnostics+0x90>)
 8001b54:	891b      	ldrh	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <run_system_diagnostics+0x3e>
        sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <run_system_diagnostics+0x90>)
 8001b5c:	885b      	ldrh	r3, [r3, #2]
    if (sensors.battery == 0 && sensors.front_left == 0 &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <run_system_diagnostics+0x3e>
        sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <run_system_diagnostics+0x90>)
 8001b64:	88db      	ldrh	r3, [r3, #6]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d107      	bne.n	8001b7a <run_system_diagnostics+0x3e>
 8001b6a:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <run_system_diagnostics+0x90>)
 8001b6c:	889b      	ldrh	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <run_system_diagnostics+0x3e>
        send_bluetooth_message("❌ CRITICAL: All sensors reading zero - check connections!\r\n");
 8001b72:	4817      	ldr	r0, [pc, #92]	@ (8001bd0 <run_system_diagnostics+0x94>)
 8001b74:	f7ff faa4 	bl	80010c0 <send_bluetooth_message>
 8001b78:	e004      	b.n	8001b84 <run_system_diagnostics+0x48>
    } else {
        send_bluetooth_message("✅ Sensors responding normally\r\n");
 8001b7a:	4816      	ldr	r0, [pc, #88]	@ (8001bd4 <run_system_diagnostics+0x98>)
 8001b7c:	f7ff faa0 	bl	80010c0 <send_bluetooth_message>
        send_sensor_data();
 8001b80:	f7ff fb7e 	bl	8001280 <send_sensor_data>
    }

    // Test battery
    send_battery_status();
 8001b84:	f7ff fc42 	bl	800140c <send_battery_status>

    // Test gyro if available
    if (mpu9250_is_initialized()) {
 8001b88:	f7ff fe0e 	bl	80017a8 <mpu9250_is_initialized>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <run_system_diagnostics+0x5a>
        mpu9250_send_status();
 8001b92:	f7ff ff03 	bl	800199c <mpu9250_send_status>
    }

    // Test encoders
    send_encoder_status();
 8001b96:	f002 f87d 	bl	8003c94 <send_encoder_status>

    // System health check
    if (system_health_check()) {
 8001b9a:	f003 faaf 	bl	80050fc <system_health_check>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <run_system_diagnostics+0x76>
        send_bluetooth_message("✅ System health check PASSED\r\n");
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <run_system_diagnostics+0x9c>)
 8001ba6:	f7ff fa8b 	bl	80010c0 <send_bluetooth_message>
        system_ready = true;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <run_system_diagnostics+0xa0>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e005      	b.n	8001bbe <run_system_diagnostics+0x82>
    } else {
        send_bluetooth_message("⚠️ System health check FAILED - check warnings above\r\n");
 8001bb2:	480b      	ldr	r0, [pc, #44]	@ (8001be0 <run_system_diagnostics+0xa4>)
 8001bb4:	f7ff fa84 	bl	80010c0 <send_bluetooth_message>
        system_ready = true;//false;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <run_system_diagnostics+0xa0>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
    }

    send_bluetooth_message("🔧 Diagnostics complete!\r\n");
 8001bbe:	4809      	ldr	r0, [pc, #36]	@ (8001be4 <run_system_diagnostics+0xa8>)
 8001bc0:	f7ff fa7e 	bl	80010c0 <send_bluetooth_message>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	0800d83c 	.word	0x0800d83c
 8001bcc:	20001470 	.word	0x20001470
 8001bd0:	0800d860 	.word	0x0800d860
 8001bd4:	0800d8a0 	.word	0x0800d8a0
 8001bd8:	0800d8c4 	.word	0x0800d8c4
 8001bdc:	200014a6 	.word	0x200014a6
 8001be0:	0800d8e8 	.word	0x0800d8e8
 8001be4:	0800d924 	.word	0x0800d924

08001be8 <send_periodic_status>:


/**
 * @brief Send periodic status updates
 */
static void send_periodic_status(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8001bee:	f003 ffab 	bl	8005b48 <HAL_GetTick>
 8001bf2:	6078      	str	r0, [r7, #4]

    // Send status every 10 seconds when not exploring
    if (current_time - last_status_time > 10000 && !exploration_started) {
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <send_periodic_status+0x80>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d916      	bls.n	8001c32 <send_periodic_status+0x4a>
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <send_periodic_status+0x84>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	f083 0301 	eor.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00f      	beq.n	8001c32 <send_periodic_status+0x4a>
        send_battery_status();
 8001c12:	f7ff fbfb 	bl	800140c <send_battery_status>

        if (system_ready) {
 8001c16:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <send_periodic_status+0x88>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <send_periodic_status+0x3e>
            send_bluetooth_message("💚 System ready - Press LEFT button to start exploration\r\n");
 8001c1e:	4815      	ldr	r0, [pc, #84]	@ (8001c74 <send_periodic_status+0x8c>)
 8001c20:	f7ff fa4e 	bl	80010c0 <send_bluetooth_message>
 8001c24:	e002      	b.n	8001c2c <send_periodic_status+0x44>
        } else {
            send_bluetooth_message("🔴 System not ready - Check diagnostics\r\n");
 8001c26:	4814      	ldr	r0, [pc, #80]	@ (8001c78 <send_periodic_status+0x90>)
 8001c28:	f7ff fa4a 	bl	80010c0 <send_bluetooth_message>
        }

        last_status_time = current_time;
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c68 <send_periodic_status+0x80>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
    }

    // Blink LED to show system is alive
    if (current_time - last_blink_time > 2000) {
 8001c32:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <send_periodic_status+0x94>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c3e:	d90f      	bls.n	8001c60 <send_periodic_status+0x78>
        if (system_ready) {
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <send_periodic_status+0x88>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <send_periodic_status+0x6a>
            HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8001c48:	2110      	movs	r1, #16
 8001c4a:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <send_periodic_status+0x98>)
 8001c4c:	f004 fedf 	bl	8006a0e <HAL_GPIO_TogglePin>
 8001c50:	e003      	b.n	8001c5a <send_periodic_status+0x72>
        } else {
            // Fast blink if system not ready
            HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8001c52:	2120      	movs	r1, #32
 8001c54:	480a      	ldr	r0, [pc, #40]	@ (8001c80 <send_periodic_status+0x98>)
 8001c56:	f004 feda 	bl	8006a0e <HAL_GPIO_TogglePin>
        }
        last_blink_time = current_time;
 8001c5a:	4a08      	ldr	r2, [pc, #32]	@ (8001c7c <send_periodic_status+0x94>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6013      	str	r3, [r2, #0]
    }
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200014a8 	.word	0x200014a8
 8001c6c:	200014a7 	.word	0x200014a7
 8001c70:	200014a6 	.word	0x200014a6
 8001c74:	0800d944 	.word	0x0800d944
 8001c78:	0800d984 	.word	0x0800d984
 8001c7c:	200014ac 	.word	0x200014ac
 8001c80:	40020400 	.word	0x40020400

08001c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c88:	f003 fef8 	bl	8005a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c8c:	f000 f8c4 	bl	8001e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c90:	f000 fbbc 	bl	800240c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c94:	f000 f928 	bl	8001ee8 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001c98:	f000 f978 	bl	8001f8c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001c9c:	f000 f9ac 	bl	8001ff8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ca0:	f000 fa4a 	bl	8002138 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001ca4:	f000 fb34 	bl	8002310 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001ca8:	f000 fb86 	bl	80023b8 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001cac:	f000 fa98 	bl	80021e0 <MX_TIM3_Init>


  // main.c — after SystemClock_Config();


  dwt_delay_init(HAL_RCC_GetHCLKFreq());
 8001cb0:	f005 fb04 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fd62 	bl	8002780 <dwt_delay_init>


  /* USER CODE BEGIN 2 */
  // Initialize all hardware systems
  initialize_hardware_systems();
 8001cbc:	f7ff fed6 	bl	8001a6c <initialize_hardware_systems>

  // Run system diagnostics
  run_system_diagnostics();
 8001cc0:	f7ff ff3c 	bl	8001b3c <run_system_diagnostics>

  // Play startup sequence
  play_startup_tone();
 8001cc4:	f7ff f95c 	bl	8000f80 <play_startup_tone>
  led_sequence_startup();
 8001cc8:	f003 f97c 	bl	8004fc4 <led_sequence_startup>

  // Send startup message
  send_bluetooth_message("\r\n🎮 MICROMOUSE CONTROL READY 🎮\r\n");
 8001ccc:	4844      	ldr	r0, [pc, #272]	@ (8001de0 <main+0x15c>)
 8001cce:	f7ff f9f7 	bl	80010c0 <send_bluetooth_message>
  send_bluetooth_message("LEFT button: Start exploration\r\n");
 8001cd2:	4844      	ldr	r0, [pc, #272]	@ (8001de4 <main+0x160>)
 8001cd4:	f7ff f9f4 	bl	80010c0 <send_bluetooth_message>
  send_bluetooth_message("RIGHT button: Status/Emergency stop\r\n");
 8001cd8:	4843      	ldr	r0, [pc, #268]	@ (8001de8 <main+0x164>)
 8001cda:	f7ff f9f1 	bl	80010c0 <send_bluetooth_message>
  send_bluetooth_message("Waiting for user input...\r\n");
 8001cde:	4843      	ldr	r0, [pc, #268]	@ (8001dec <main+0x168>)
 8001ce0:	f7ff f9ee 	bl	80010c0 <send_bluetooth_message>

    // Initial status
  last_status_time = HAL_GetTick();
 8001ce4:	f003 ff30 	bl	8005b48 <HAL_GetTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a41      	ldr	r2, [pc, #260]	@ (8001df0 <main+0x16c>)
 8001cec:	6013      	str	r3, [r2, #0]
  last_blink_time = HAL_GetTick();
 8001cee:	f003 ff2b 	bl	8005b48 <HAL_GetTick>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8001df4 <main+0x170>)
 8001cf6:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN 3 */

	//update_sensors();
	// Handle button events
	if (button_pressed == 1) {
 8001cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8001df8 <main+0x174>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d133      	bne.n	8001d6a <main+0xe6>
		button_pressed = 0;
 8001d02:	4b3d      	ldr	r3, [pc, #244]	@ (8001df8 <main+0x174>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]

		if (!exploration_started && system_ready) {
 8001d08:	4b3c      	ldr	r3, [pc, #240]	@ (8001dfc <main+0x178>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d012      	beq.n	8001d3c <main+0xb8>
 8001d16:	4b3a      	ldr	r3, [pc, #232]	@ (8001e00 <main+0x17c>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00e      	beq.n	8001d3c <main+0xb8>
			send_bluetooth_message("\r\n🚀 STARTING MAZE EXPLORATION! 🚀\r\n");
 8001d1e:	4839      	ldr	r0, [pc, #228]	@ (8001e04 <main+0x180>)
 8001d20:	f7ff f9ce 	bl	80010c0 <send_bluetooth_message>
			play_confirmation_tone();
 8001d24:	f7ff f948 	bl	8000fb8 <play_confirmation_tone>
			HAL_Delay(1000);
 8001d28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d2c:	f003 ff18 	bl	8005b60 <HAL_Delay>

			exploration_started = true;
 8001d30:	4b32      	ldr	r3, [pc, #200]	@ (8001dfc <main+0x178>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
			run_maze_exploration_sequence();
 8001d36:	f001 fc61 	bl	80035fc <run_maze_exploration_sequence>
 8001d3a:	e016      	b.n	8001d6a <main+0xe6>

		} else if (is_exploration_complete()) {
 8001d3c:	f001 fcf2 	bl	8003724 <is_exploration_complete>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <main+0xce>
			send_bluetooth_message("\r\n🏁 EXPLORATION COMPLETE - Ready for speed run! 🏁\r\n");
 8001d46:	4830      	ldr	r0, [pc, #192]	@ (8001e08 <main+0x184>)
 8001d48:	f7ff f9ba 	bl	80010c0 <send_bluetooth_message>
			send_performance_metrics();
 8001d4c:	f7ff faf0 	bl	8001330 <send_performance_metrics>
 8001d50:	e00b      	b.n	8001d6a <main+0xe6>

		} else if (!system_ready) {
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <main+0x17c>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	f083 0301 	eor.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <main+0xe6>
			send_bluetooth_message("⚠️ System not ready - check diagnostics!\r\n");
 8001d60:	482a      	ldr	r0, [pc, #168]	@ (8001e0c <main+0x188>)
 8001d62:	f7ff f9ad 	bl	80010c0 <send_bluetooth_message>
			play_error_tone();
 8001d66:	f7ff f965 	bl	8001034 <play_error_tone>
		}
	}

	if (button_pressed == 2) {
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <main+0x174>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d128      	bne.n	8001dc6 <main+0x142>
		button_pressed = 0;
 8001d74:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <main+0x174>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]

		// Right button - emergency stop or reset
		if (exploration_started && !is_exploration_complete()) {
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <main+0x178>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d012      	beq.n	8001da8 <main+0x124>
 8001d82:	f001 fccf 	bl	8003724 <is_exploration_complete>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <main+0x124>
			send_bluetooth_message("🛑 EMERGENCY STOP!\r\n");
 8001d92:	481f      	ldr	r0, [pc, #124]	@ (8001e10 <main+0x18c>)
 8001d94:	f7ff f994 	bl	80010c0 <send_bluetooth_message>
			stop_motors();
 8001d98:	f001 fe90 	bl	8003abc <stop_motors>
			play_error_tone();
 8001d9c:	f7ff f94a 	bl	8001034 <play_error_tone>
			exploration_started = false;
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <main+0x178>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	e00e      	b.n	8001dc6 <main+0x142>
		} else {
			// Send detailed status
			send_bluetooth_message("\r\n📊 DETAILED STATUS REPORT 📊\r\n");
 8001da8:	481a      	ldr	r0, [pc, #104]	@ (8001e14 <main+0x190>)
 8001daa:	f7ff f989 	bl	80010c0 <send_bluetooth_message>
			send_maze_state();
 8001dae:	f7ff f9c3 	bl	8001138 <send_maze_state>
			send_sensor_data();
 8001db2:	f7ff fa65 	bl	8001280 <send_sensor_data>
			send_position_data();
 8001db6:	f7ff fa91 	bl	80012dc <send_position_data>
			if (exploration_started) {
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <main+0x178>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <main+0x142>
				send_performance_metrics();
 8001dc2:	f7ff fab5 	bl	8001330 <send_performance_metrics>
			}
		}
	}

	// Send periodic status updates
	send_periodic_status();
 8001dc6:	f7ff ff0f 	bl	8001be8 <send_periodic_status>

	// If exploration is running, let it continue
	if (exploration_started && !is_exploration_complete()) {
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <main+0x178>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <main+0x152>
 8001dd2:	f001 fca7 	bl	8003724 <is_exploration_complete>
		// The exploration runs in run_maze_exploration_sequence()
		// and handles its own loop until complete
	}

	// Small delay to prevent overwhelming the system
	HAL_Delay(50);
 8001dd6:	2032      	movs	r0, #50	@ 0x32
 8001dd8:	f003 fec2 	bl	8005b60 <HAL_Delay>
	if (button_pressed == 1) {
 8001ddc:	e78c      	b.n	8001cf8 <main+0x74>
 8001dde:	bf00      	nop
 8001de0:	0800d9b0 	.word	0x0800d9b0
 8001de4:	0800d9d8 	.word	0x0800d9d8
 8001de8:	0800d9fc 	.word	0x0800d9fc
 8001dec:	0800da24 	.word	0x0800da24
 8001df0:	200014a8 	.word	0x200014a8
 8001df4:	200014ac 	.word	0x200014ac
 8001df8:	200014a4 	.word	0x200014a4
 8001dfc:	200014a7 	.word	0x200014a7
 8001e00:	200014a6 	.word	0x200014a6
 8001e04:	0800da40 	.word	0x0800da40
 8001e08:	0800da6c 	.word	0x0800da6c
 8001e0c:	0800daa8 	.word	0x0800daa8
 8001e10:	0800dad8 	.word	0x0800dad8
 8001e14:	0800daf0 	.word	0x0800daf0

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b094      	sub	sp, #80	@ 0x50
 8001e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	2230      	movs	r2, #48	@ 0x30
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f008 ff62 	bl	800acf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <SystemClock_Config+0xc8>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <SystemClock_Config+0xc8>)
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <SystemClock_Config+0xc8>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <SystemClock_Config+0xcc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a20      	ldr	r2, [pc, #128]	@ (8001ee4 <SystemClock_Config+0xcc>)
 8001e62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <SystemClock_Config+0xcc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e80:	2302      	movs	r3, #2
 8001e82:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e84:	2300      	movs	r3, #0
 8001e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e88:	2310      	movs	r3, #16
 8001e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e8c:	23a8      	movs	r3, #168	@ 0xa8
 8001e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e94:	2304      	movs	r3, #4
 8001e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e98:	f107 0320 	add.w	r3, r7, #32
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 fde9 	bl	8006a74 <HAL_RCC_OscConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ea8:	f000 fbce 	bl	8002648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eac:	230f      	movs	r3, #15
 8001eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 f84b 	bl	8006f64 <HAL_RCC_ClockConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ed4:	f000 fbb8 	bl	8002648 <Error_Handler>
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3750      	adds	r7, #80	@ 0x50
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40007000 	.word	0x40007000

08001ee8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001efa:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001efc:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <MX_ADC1_Init+0x9c>)
 8001efe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f00:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f08:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f22:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f28:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f2a:	4a17      	ldr	r2, [pc, #92]	@ (8001f88 <MX_ADC1_Init+0xa0>)
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f48:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f4a:	f003 fe2d 	bl	8005ba8 <HAL_ADC_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f54:	f000 fb78 	bl	8002648 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001f60:	2304      	movs	r3, #4
 8001f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f64:	463b      	mov	r3, r7
 8001f66:	4619      	mov	r1, r3
 8001f68:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_ADC1_Init+0x98>)
 8001f6a:	f003 ffe1 	bl	8005f30 <HAL_ADC_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f74:	f000 fb68 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000254 	.word	0x20000254
 8001f84:	40012000 	.word	0x40012000
 8001f88:	0f000001 	.word	0x0f000001

08001f8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f90:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001f92:	4a18      	ldr	r2, [pc, #96]	@ (8001ff4 <MX_SPI2_Init+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f96:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001f98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001faa:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fc0:	2230      	movs	r2, #48	@ 0x30
 8001fc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fd8:	220a      	movs	r2, #10
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fdc:	4804      	ldr	r0, [pc, #16]	@ (8001ff0 <MX_SPI2_Init+0x64>)
 8001fde:	f005 f9a1 	bl	8007324 <HAL_SPI_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fe8:	f000 fb2e 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	2000029c 	.word	0x2000029c
 8001ff4:	40003800 	.word	0x40003800

08001ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b096      	sub	sp, #88	@ 0x58
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	615a      	str	r2, [r3, #20]
 8002028:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2220      	movs	r2, #32
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f008 fe5d 	bl	800acf0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002036:	4b3e      	ldr	r3, [pc, #248]	@ (8002130 <MX_TIM1_Init+0x138>)
 8002038:	4a3e      	ldr	r2, [pc, #248]	@ (8002134 <MX_TIM1_Init+0x13c>)
 800203a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 800203c:	4b3c      	ldr	r3, [pc, #240]	@ (8002130 <MX_TIM1_Init+0x138>)
 800203e:	2214      	movs	r2, #20
 8002040:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002042:	4b3b      	ldr	r3, [pc, #236]	@ (8002130 <MX_TIM1_Init+0x138>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8002048:	4b39      	ldr	r3, [pc, #228]	@ (8002130 <MX_TIM1_Init+0x138>)
 800204a:	22c8      	movs	r2, #200	@ 0xc8
 800204c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204e:	4b38      	ldr	r3, [pc, #224]	@ (8002130 <MX_TIM1_Init+0x138>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002054:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <MX_TIM1_Init+0x138>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800205a:	4b35      	ldr	r3, [pc, #212]	@ (8002130 <MX_TIM1_Init+0x138>)
 800205c:	2280      	movs	r2, #128	@ 0x80
 800205e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002060:	4833      	ldr	r0, [pc, #204]	@ (8002130 <MX_TIM1_Init+0x138>)
 8002062:	f005 ff31 	bl	8007ec8 <HAL_TIM_Base_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800206c:	f000 faec 	bl	8002648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002074:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002076:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800207a:	4619      	mov	r1, r3
 800207c:	482c      	ldr	r0, [pc, #176]	@ (8002130 <MX_TIM1_Init+0x138>)
 800207e:	f006 fbc5 	bl	800880c <HAL_TIM_ConfigClockSource>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002088:	f000 fade 	bl	8002648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800208c:	4828      	ldr	r0, [pc, #160]	@ (8002130 <MX_TIM1_Init+0x138>)
 800208e:	f005 ff6a 	bl	8007f66 <HAL_TIM_PWM_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002098:	f000 fad6 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020a8:	4619      	mov	r1, r3
 80020aa:	4821      	ldr	r0, [pc, #132]	@ (8002130 <MX_TIM1_Init+0x138>)
 80020ac:	f006 ff7a 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80020b6:	f000 fac7 	bl	8002648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ba:	2360      	movs	r3, #96	@ 0x60
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 80020be:	2364      	movs	r3, #100	@ 0x64
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020c6:	2300      	movs	r3, #0
 80020c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020da:	2208      	movs	r2, #8
 80020dc:	4619      	mov	r1, r3
 80020de:	4814      	ldr	r0, [pc, #80]	@ (8002130 <MX_TIM1_Init+0x138>)
 80020e0:	f006 fad2 	bl	8008688 <HAL_TIM_PWM_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80020ea:	f000 faad 	bl	8002648 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002102:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002106:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	4619      	mov	r1, r3
 8002110:	4807      	ldr	r0, [pc, #28]	@ (8002130 <MX_TIM1_Init+0x138>)
 8002112:	f006 ffb5 	bl	8009080 <HAL_TIMEx_ConfigBreakDeadTime>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800211c:	f000 fa94 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002120:	4803      	ldr	r0, [pc, #12]	@ (8002130 <MX_TIM1_Init+0x138>)
 8002122:	f002 fd31 	bl	8004b88 <HAL_TIM_MspPostInit>

}
 8002126:	bf00      	nop
 8002128:	3758      	adds	r7, #88	@ 0x58
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200002f4 	.word	0x200002f4
 8002134:	40010000 	.word	0x40010000

08002138 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	@ 0x30
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	2224      	movs	r2, #36	@ 0x24
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f008 fdd2 	bl	800acf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002154:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <MX_TIM2_Init+0xa4>)
 8002156:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800215a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800215c:	4b1f      	ldr	r3, [pc, #124]	@ (80021dc <MX_TIM2_Init+0xa4>)
 800215e:	2200      	movs	r2, #0
 8002160:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002162:	4b1e      	ldr	r3, [pc, #120]	@ (80021dc <MX_TIM2_Init+0xa4>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002168:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <MX_TIM2_Init+0xa4>)
 800216a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800216e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002170:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <MX_TIM2_Init+0xa4>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002176:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <MX_TIM2_Init+0xa4>)
 8002178:	2280      	movs	r2, #128	@ 0x80
 800217a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800217c:	2303      	movs	r3, #3
 800217e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002184:	2301      	movs	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002194:	2301      	movs	r3, #1
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	4619      	mov	r1, r3
 80021a6:	480d      	ldr	r0, [pc, #52]	@ (80021dc <MX_TIM2_Init+0xa4>)
 80021a8:	f006 f84a 	bl	8008240 <HAL_TIM_Encoder_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80021b2:	f000 fa49 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	4806      	ldr	r0, [pc, #24]	@ (80021dc <MX_TIM2_Init+0xa4>)
 80021c4:	f006 feee 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80021ce:	f000 fa3b 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	3730      	adds	r7, #48	@ 0x30
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000033c 	.word	0x2000033c

080021e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08e      	sub	sp, #56	@ 0x38
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f4:	f107 0320 	add.w	r3, r7, #32
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
 800220c:	615a      	str	r2, [r3, #20]
 800220e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002210:	4b3d      	ldr	r3, [pc, #244]	@ (8002308 <MX_TIM3_Init+0x128>)
 8002212:	4a3e      	ldr	r2, [pc, #248]	@ (800230c <MX_TIM3_Init+0x12c>)
 8002214:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8002216:	4b3c      	ldr	r3, [pc, #240]	@ (8002308 <MX_TIM3_Init+0x128>)
 8002218:	2204      	movs	r2, #4
 800221a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221c:	4b3a      	ldr	r3, [pc, #232]	@ (8002308 <MX_TIM3_Init+0x128>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 8002222:	4b39      	ldr	r3, [pc, #228]	@ (8002308 <MX_TIM3_Init+0x128>)
 8002224:	f240 3246 	movw	r2, #838	@ 0x346
 8002228:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222a:	4b37      	ldr	r3, [pc, #220]	@ (8002308 <MX_TIM3_Init+0x128>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002230:	4b35      	ldr	r3, [pc, #212]	@ (8002308 <MX_TIM3_Init+0x128>)
 8002232:	2280      	movs	r2, #128	@ 0x80
 8002234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002236:	4834      	ldr	r0, [pc, #208]	@ (8002308 <MX_TIM3_Init+0x128>)
 8002238:	f005 fe46 	bl	8007ec8 <HAL_TIM_Base_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002242:	f000 fa01 	bl	8002648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800224a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800224c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002250:	4619      	mov	r1, r3
 8002252:	482d      	ldr	r0, [pc, #180]	@ (8002308 <MX_TIM3_Init+0x128>)
 8002254:	f006 fada 	bl	800880c <HAL_TIM_ConfigClockSource>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800225e:	f000 f9f3 	bl	8002648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002262:	4829      	ldr	r0, [pc, #164]	@ (8002308 <MX_TIM3_Init+0x128>)
 8002264:	f005 fe7f 	bl	8007f66 <HAL_TIM_PWM_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800226e:	f000 f9eb 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800227a:	f107 0320 	add.w	r3, r7, #32
 800227e:	4619      	mov	r1, r3
 8002280:	4821      	ldr	r0, [pc, #132]	@ (8002308 <MX_TIM3_Init+0x128>)
 8002282:	f006 fe8f 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800228c:	f000 f9dc 	bl	8002648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002290:	2360      	movs	r3, #96	@ 0x60
 8002292:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	4619      	mov	r1, r3
 80022a6:	4818      	ldr	r0, [pc, #96]	@ (8002308 <MX_TIM3_Init+0x128>)
 80022a8:	f006 f9ee 	bl	8008688 <HAL_TIM_PWM_ConfigChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022b2:	f000 f9c9 	bl	8002648 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	2204      	movs	r2, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4812      	ldr	r0, [pc, #72]	@ (8002308 <MX_TIM3_Init+0x128>)
 80022be:	f006 f9e3 	bl	8008688 <HAL_TIM_PWM_ConfigChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80022c8:	f000 f9be 	bl	8002648 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	2208      	movs	r2, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	480d      	ldr	r0, [pc, #52]	@ (8002308 <MX_TIM3_Init+0x128>)
 80022d4:	f006 f9d8 	bl	8008688 <HAL_TIM_PWM_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80022de:	f000 f9b3 	bl	8002648 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	220c      	movs	r2, #12
 80022e6:	4619      	mov	r1, r3
 80022e8:	4807      	ldr	r0, [pc, #28]	@ (8002308 <MX_TIM3_Init+0x128>)
 80022ea:	f006 f9cd 	bl	8008688 <HAL_TIM_PWM_ConfigChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80022f4:	f000 f9a8 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022f8:	4803      	ldr	r0, [pc, #12]	@ (8002308 <MX_TIM3_Init+0x128>)
 80022fa:	f002 fc45 	bl	8004b88 <HAL_TIM_MspPostInit>

}
 80022fe:	bf00      	nop
 8002300:	3738      	adds	r7, #56	@ 0x38
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000384 	.word	0x20000384
 800230c:	40000400 	.word	0x40000400

08002310 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	@ 0x30
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	2224      	movs	r2, #36	@ 0x24
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f008 fce6 	bl	800acf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800232c:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <MX_TIM4_Init+0xa0>)
 800232e:	4a21      	ldr	r2, [pc, #132]	@ (80023b4 <MX_TIM4_Init+0xa4>)
 8002330:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002332:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <MX_TIM4_Init+0xa0>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <MX_TIM4_Init+0xa0>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800233e:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <MX_TIM4_Init+0xa0>)
 8002340:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002344:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b1a      	ldr	r3, [pc, #104]	@ (80023b0 <MX_TIM4_Init+0xa0>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800234c:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <MX_TIM4_Init+0xa0>)
 800234e:	2280      	movs	r2, #128	@ 0x80
 8002350:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002352:	2303      	movs	r3, #3
 8002354:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800235a:	2301      	movs	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800236a:	2301      	movs	r3, #1
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800236e:	2300      	movs	r3, #0
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	4619      	mov	r1, r3
 800237c:	480c      	ldr	r0, [pc, #48]	@ (80023b0 <MX_TIM4_Init+0xa0>)
 800237e:	f005 ff5f 	bl	8008240 <HAL_TIM_Encoder_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002388:	f000 f95e 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	@ (80023b0 <MX_TIM4_Init+0xa0>)
 800239a:	f006 fe03 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80023a4:	f000 f950 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	3730      	adds	r7, #48	@ 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200003cc 	.word	0x200003cc
 80023b4:	40000800 	.word	0x40000800

080023b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023bc:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <MX_USART6_UART_Init+0x4c>)
 80023be:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <MX_USART6_UART_Init+0x50>)
 80023c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <MX_USART6_UART_Init+0x4c>)
 80023c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <MX_USART6_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <MX_USART6_UART_Init+0x4c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <MX_USART6_UART_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023dc:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <MX_USART6_UART_Init+0x4c>)
 80023de:	220c      	movs	r2, #12
 80023e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e2:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <MX_USART6_UART_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <MX_USART6_UART_Init+0x4c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	@ (8002404 <MX_USART6_UART_Init+0x4c>)
 80023f0:	f006 feac 	bl	800914c <HAL_UART_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023fa:	f000 f925 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000414 	.word	0x20000414
 8002408:	40011400 	.word	0x40011400

0800240c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	4b4b      	ldr	r3, [pc, #300]	@ (8002554 <MX_GPIO_Init+0x148>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a4a      	ldr	r2, [pc, #296]	@ (8002554 <MX_GPIO_Init+0x148>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b48      	ldr	r3, [pc, #288]	@ (8002554 <MX_GPIO_Init+0x148>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	4b44      	ldr	r3, [pc, #272]	@ (8002554 <MX_GPIO_Init+0x148>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a43      	ldr	r2, [pc, #268]	@ (8002554 <MX_GPIO_Init+0x148>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b41      	ldr	r3, [pc, #260]	@ (8002554 <MX_GPIO_Init+0x148>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4b3d      	ldr	r3, [pc, #244]	@ (8002554 <MX_GPIO_Init+0x148>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a3c      	ldr	r2, [pc, #240]	@ (8002554 <MX_GPIO_Init+0x148>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b3a      	ldr	r3, [pc, #232]	@ (8002554 <MX_GPIO_Init+0x148>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 8002476:	2200      	movs	r2, #0
 8002478:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800247c:	4836      	ldr	r0, [pc, #216]	@ (8002558 <MX_GPIO_Init+0x14c>)
 800247e:	f004 faad 	bl	80069dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 8002482:	2200      	movs	r2, #0
 8002484:	f241 3130 	movw	r1, #4912	@ 0x1330
 8002488:	4834      	ldr	r0, [pc, #208]	@ (800255c <MX_GPIO_Init+0x150>)
 800248a:	f004 faa7 	bl	80069dc <HAL_GPIO_WritePin>
                          |EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002494:	4832      	ldr	r0, [pc, #200]	@ (8002560 <MX_GPIO_Init+0x154>)
 8002496:	f004 faa1 	bl	80069dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 800249a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800249e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	4619      	mov	r1, r3
 80024b2:	4829      	ldr	r0, [pc, #164]	@ (8002558 <MX_GPIO_Init+0x14c>)
 80024b4:	f004 f90e 	bl	80066d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 80024b8:	2302      	movs	r3, #2
 80024ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	4619      	mov	r1, r3
 80024cc:	4824      	ldr	r0, [pc, #144]	@ (8002560 <MX_GPIO_Init+0x154>)
 80024ce:	f004 f901 	bl	80066d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 80024d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	4619      	mov	r1, r3
 80024e8:	481c      	ldr	r0, [pc, #112]	@ (800255c <MX_GPIO_Init+0x150>)
 80024ea:	f004 f8f3 	bl	80066d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_LEFT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 80024ee:	f241 3330 	movw	r3, #4912	@ 0x1330
 80024f2:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	4619      	mov	r1, r3
 8002506:	4815      	ldr	r0, [pc, #84]	@ (800255c <MX_GPIO_Init+0x150>)
 8002508:	f004 f8e4 	bl	80066d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_RIGHT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin;
 800250c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002512:	2301      	movs	r3, #1
 8002514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	4619      	mov	r1, r3
 8002524:	480e      	ldr	r0, [pc, #56]	@ (8002560 <MX_GPIO_Init+0x154>)
 8002526:	f004 f8d5 	bl	80066d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2105      	movs	r1, #5
 800252e:	2007      	movs	r0, #7
 8002530:	f004 f807 	bl	8006542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002534:	2007      	movs	r0, #7
 8002536:	f004 f820 	bl	800657a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2105      	movs	r1, #5
 800253e:	2028      	movs	r0, #40	@ 0x28
 8002540:	f003 ffff 	bl	8006542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002544:	2028      	movs	r0, #40	@ 0x28
 8002546:	f004 f818 	bl	800657a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800254a:	bf00      	nop
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40020800 	.word	0x40020800
 800255c:	40020400 	.word	0x40020400
 8002560:	40020000 	.word	0x40020000

08002564 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 800256e:	f003 faeb 	bl	8005b48 <HAL_GetTick>
 8002572:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_GPIO_EXTI_Callback+0x58>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2bc8      	cmp	r3, #200	@ 0xc8
 800257e:	d919      	bls.n	80025b4 <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d109      	bne.n	800259a <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 800258c:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x60>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 8002592:	480d      	ldr	r0, [pc, #52]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x64>)
 8002594:	f7fe fd94 	bl	80010c0 <send_bluetooth_message>
 8002598:	e009      	b.n	80025ae <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a0:	d105      	bne.n	80025ae <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 80025a2:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 80025a8:	4808      	ldr	r0, [pc, #32]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x68>)
 80025aa:	f7fe fd89 	bl	80010c0 <send_bluetooth_message>
        }
        last_press = current_time;
 80025ae:	4a03      	ldr	r2, [pc, #12]	@ (80025bc <HAL_GPIO_EXTI_Callback+0x58>)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6013      	str	r3, [r2, #0]
    }
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	200014b0 	.word	0x200014b0
 80025c0:	200014a4 	.word	0x200014a4
 80025c4:	200014a5 	.word	0x200014a5
 80025c8:	0800db18 	.word	0x0800db18
 80025cc:	0800db30 	.word	0x0800db30

080025d0 <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025e4:	2301      	movs	r3, #1
 80025e6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e8:	2303      	movs	r3, #3
 80025ea:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4812      	ldr	r0, [pc, #72]	@ (8002640 <verify_adc_gpio_configuration+0x70>)
 80025f6:	f004 f86d 	bl	80066d4 <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025fa:	2304      	movs	r3, #4
 80025fc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	4619      	mov	r1, r3
 8002602:	480f      	ldr	r0, [pc, #60]	@ (8002640 <verify_adc_gpio_configuration+0x70>)
 8002604:	f004 f866 	bl	80066d4 <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002608:	2308      	movs	r3, #8
 800260a:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	4619      	mov	r1, r3
 8002610:	480b      	ldr	r0, [pc, #44]	@ (8002640 <verify_adc_gpio_configuration+0x70>)
 8002612:	f004 f85f 	bl	80066d4 <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002616:	2310      	movs	r3, #16
 8002618:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	4619      	mov	r1, r3
 800261e:	4808      	ldr	r0, [pc, #32]	@ (8002640 <verify_adc_gpio_configuration+0x70>)
 8002620:	f004 f858 	bl	80066d4 <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002624:	2320      	movs	r3, #32
 8002626:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	4619      	mov	r1, r3
 800262c:	4804      	ldr	r0, [pc, #16]	@ (8002640 <verify_adc_gpio_configuration+0x70>)
 800262e:	f004 f851 	bl	80066d4 <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 8002632:	4804      	ldr	r0, [pc, #16]	@ (8002644 <verify_adc_gpio_configuration+0x74>)
 8002634:	f7fe fd44 	bl	80010c0 <send_bluetooth_message>
}
 8002638:	bf00      	nop
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40020000 	.word	0x40020000
 8002644:	0800db48 	.word	0x0800db48

08002648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800264c:	b672      	cpsid	i
}
 800264e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002650:	2110      	movs	r1, #16
 8002652:	4806      	ldr	r0, [pc, #24]	@ (800266c <Error_Handler+0x24>)
 8002654:	f004 f9db 	bl	8006a0e <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8002658:	2120      	movs	r1, #32
 800265a:	4804      	ldr	r0, [pc, #16]	@ (800266c <Error_Handler+0x24>)
 800265c:	f004 f9d7 	bl	8006a0e <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8002660:	2064      	movs	r0, #100	@ 0x64
 8002662:	f003 fa7d 	bl	8005b60 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002666:	bf00      	nop
 8002668:	e7f2      	b.n	8002650 <Error_Handler+0x8>
 800266a:	bf00      	nop
 800266c:	40020400 	.word	0x40020400

08002670 <queue_init>:
} BFSQueue;

static BFSQueue bfs_queue;

/* Queue Operations */
static void queue_init(BFSQueue* q) {
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    q->head = q->tail = 0;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <queue_empty>:

static int queue_empty(BFSQueue* q) {
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
    return q->head == q->tail;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 2880 	ldr.w	r2, [r3, #2176]	@ 0x880
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
 80026ac:	429a      	cmp	r2, r3
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <queue_push>:

static void queue_push(BFSQueue* q, Position pos) {
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	e883 0006 	stmia.w	r3, {r1, r2}
    if (q->tail < QUEUE_MAX_SIZE) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
 80026d6:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80026da:	da0e      	bge.n	80026fa <queue_push+0x38>
        q->queue[q->tail++] = pos;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	f8c2 1884 	str.w	r1, [r2, #2180]	@ 0x884
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	1d3a      	adds	r2, r7, #4
 80026f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026f6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <queue_pop>:

static Position queue_pop(BFSQueue* q) {
 8002706:	b490      	push	{r4, r7}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
    return q->queue[q->head++];
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
 8002716:	1c59      	adds	r1, r3, #1
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	f8c2 1880 	str.w	r1, [r2, #2176]	@ 0x880
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	460c      	mov	r4, r1
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	e893 0003 	ldmia.w	r3, {r0, r1}
 800272c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bc90      	pop	{r4, r7}
 8002738:	4770      	bx	lr
	...

0800273c <dwt_delay_us>:
static uint32_t dwt_cycles_per_us;

void dwt_delay_us(uint32_t us) {
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8002744:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <dwt_delay_us+0x3c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * dwt_cycles_per_us;
 800274a:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <dwt_delay_us+0x40>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks) { __NOP(); }
 8002756:	e000      	b.n	800275a <dwt_delay_us+0x1e>
 8002758:	bf00      	nop
 800275a:	4b07      	ldr	r3, [pc, #28]	@ (8002778 <dwt_delay_us+0x3c>)
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	429a      	cmp	r2, r3
 8002766:	d8f7      	bhi.n	8002758 <dwt_delay_us+0x1c>
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e0001000 	.word	0xe0001000
 800277c:	20001d54 	.word	0x20001d54

08002780 <dwt_delay_init>:
void dwt_delay_init(uint32_t cpu_hz) {
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <dwt_delay_init+0x3c>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a0b      	ldr	r2, [pc, #44]	@ (80027bc <dwt_delay_init+0x3c>)
 800278e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002792:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002794:	4b0a      	ldr	r3, [pc, #40]	@ (80027c0 <dwt_delay_init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a09      	ldr	r2, [pc, #36]	@ (80027c0 <dwt_delay_init+0x40>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6013      	str	r3, [r2, #0]
    dwt_cycles_per_us = cpu_hz / 1000000U; // e.g., 84 for 84 MHz
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a08      	ldr	r2, [pc, #32]	@ (80027c4 <dwt_delay_init+0x44>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	0c9b      	lsrs	r3, r3, #18
 80027aa:	4a07      	ldr	r2, [pc, #28]	@ (80027c8 <dwt_delay_init+0x48>)
 80027ac:	6013      	str	r3, [r2, #0]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000edf0 	.word	0xe000edf0
 80027c0:	e0001000 	.word	0xe0001000
 80027c4:	431bde83 	.word	0x431bde83
 80027c8:	20001d54 	.word	0x20001d54

080027cc <initialize_maze_exploration>:


/**
 * @brief Initialize maze for exploration
 */
void initialize_maze_exploration(void) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n=== INITIALIZING MAZE EXPLORATION ===\r\n");
 80027d2:	485a      	ldr	r0, [pc, #360]	@ (800293c <initialize_maze_exploration+0x170>)
 80027d4:	f7fe fc74 	bl	80010c0 <send_bluetooth_message>

    // Initialize maze structure
    for (int x = 0; x < MAZE_SIZE; x++) {
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e03e      	b.n	800285c <initialize_maze_exploration+0x90>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	e035      	b.n	8002850 <initialize_maze_exploration+0x84>
            maze[x][y].distance = MAX_DISTANCE;
 80027e4:	4956      	ldr	r1, [pc, #344]	@ (8002940 <initialize_maze_exploration+0x174>)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	011a      	lsls	r2, r3, #4
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4413      	add	r3, r2
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	440b      	add	r3, r1
 80027f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80027f6:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 80027f8:	4951      	ldr	r1, [pc, #324]	@ (8002940 <initialize_maze_exploration+0x174>)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	011a      	lsls	r2, r3, #4
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4413      	add	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	440b      	add	r3, r1
 8002806:	3304      	adds	r3, #4
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 800280c:	494c      	ldr	r1, [pc, #304]	@ (8002940 <initialize_maze_exploration+0x174>)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	011a      	lsls	r2, r3, #4
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4413      	add	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	440b      	add	r3, r1
 800281a:	330c      	adds	r3, #12
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

            // Initialize all walls as unknown (false)
            for (int dir = 0; dir < 4; dir++) {
 8002820:	2300      	movs	r3, #0
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	e00e      	b.n	8002844 <initialize_maze_exploration+0x78>
                maze[x][y].walls[dir] = false;
 8002826:	4946      	ldr	r1, [pc, #280]	@ (8002940 <initialize_maze_exploration+0x174>)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	011a      	lsls	r2, r3, #4
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4413      	add	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	18ca      	adds	r2, r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	3305      	adds	r3, #5
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
            for (int dir = 0; dir < 4; dir++) {
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3301      	adds	r3, #1
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b03      	cmp	r3, #3
 8002848:	dded      	ble.n	8002826 <initialize_maze_exploration+0x5a>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3301      	adds	r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b0f      	cmp	r3, #15
 8002854:	ddc6      	ble.n	80027e4 <initialize_maze_exploration+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3301      	adds	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	ddbd      	ble.n	80027de <initialize_maze_exploration+0x12>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002862:	2300      	movs	r3, #0
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	e01f      	b.n	80028a8 <initialize_maze_exploration+0xdc>
        maze[i][0].walls[SOUTH] = true;                    // Bottom boundary
 8002868:	4a35      	ldr	r2, [pc, #212]	@ (8002940 <initialize_maze_exploration+0x174>)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	4413      	add	r3, r2
 8002870:	3307      	adds	r3, #7
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true;          // Top boundary
 8002876:	4a32      	ldr	r2, [pc, #200]	@ (8002940 <initialize_maze_exploration+0x174>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	4413      	add	r3, r2
 800287e:	33f5      	adds	r3, #245	@ 0xf5
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;                     // Left boundary
 8002884:	4a2e      	ldr	r2, [pc, #184]	@ (8002940 <initialize_maze_exploration+0x174>)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	4413      	add	r3, r2
 800288c:	3308      	adds	r3, #8
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;           // Right boundary
 8002892:	4a2b      	ldr	r2, [pc, #172]	@ (8002940 <initialize_maze_exploration+0x174>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	4413      	add	r3, r2
 800289a:	f603 7306 	addw	r3, r3, #3846	@ 0xf06
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	dddc      	ble.n	8002868 <initialize_maze_exploration+0x9c>
    }

    // Set maze center coordinates
    maze_center_x1 = MAZE_SIZE / 2 - 1;
 80028ae:	4b25      	ldr	r3, [pc, #148]	@ (8002944 <initialize_maze_exploration+0x178>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
    maze_center_y1 = MAZE_SIZE / 2 - 1;
 80028b4:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <initialize_maze_exploration+0x17c>)
 80028b6:	2207      	movs	r2, #7
 80028b8:	601a      	str	r2, [r3, #0]
    maze_center_x2 = MAZE_SIZE / 2;
 80028ba:	4b24      	ldr	r3, [pc, #144]	@ (800294c <initialize_maze_exploration+0x180>)
 80028bc:	2208      	movs	r2, #8
 80028be:	601a      	str	r2, [r3, #0]
    maze_center_y2 = MAZE_SIZE / 2;
 80028c0:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <initialize_maze_exploration+0x184>)
 80028c2:	2208      	movs	r2, #8
 80028c4:	601a      	str	r2, [r3, #0]

    // Initialize robot state
    robot.x = 0;
 80028c6:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <initialize_maze_exploration+0x188>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 80028cc:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <initialize_maze_exploration+0x188>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 80028d2:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <initialize_maze_exploration+0x188>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 80028d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <initialize_maze_exploration+0x188>)
 80028da:	2200      	movs	r2, #0
 80028dc:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 80028de:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <initialize_maze_exploration+0x188>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <initialize_maze_exploration+0x188>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]

    // Mark starting position
    maze[0][0].visited = true;
 80028ea:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <initialize_maze_exploration+0x174>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 80028f0:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <initialize_maze_exploration+0x174>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	60da      	str	r2, [r3, #12]

    // Reset exploration flags
    exploration_completed = 0;
 80028f6:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <initialize_maze_exploration+0x18c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
    optimal_path_calculated = 0;
 80028fc:	4b17      	ldr	r3, [pc, #92]	@ (800295c <initialize_maze_exploration+0x190>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

    send_bluetooth_printf("Maze Size: %dx%d\r\n", MAZE_SIZE, MAZE_SIZE);
 8002902:	2210      	movs	r2, #16
 8002904:	2110      	movs	r1, #16
 8002906:	4816      	ldr	r0, [pc, #88]	@ (8002960 <initialize_maze_exploration+0x194>)
 8002908:	f7fe fbf0 	bl	80010ec <send_bluetooth_printf>
    send_bluetooth_printf("Center: (%d,%d) to (%d,%d)\r\n",
 800290c:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <initialize_maze_exploration+0x178>)
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <initialize_maze_exploration+0x17c>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b0d      	ldr	r3, [pc, #52]	@ (800294c <initialize_maze_exploration+0x180>)
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <initialize_maze_exploration+0x184>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4603      	mov	r3, r0
 8002920:	4810      	ldr	r0, [pc, #64]	@ (8002964 <initialize_maze_exploration+0x198>)
 8002922:	f7fe fbe3 	bl	80010ec <send_bluetooth_printf>
                         maze_center_x1, maze_center_y1, maze_center_x2, maze_center_y2);
    send_bluetooth_message("Maze exploration initialized successfully!\r\n");
 8002926:	4810      	ldr	r0, [pc, #64]	@ (8002968 <initialize_maze_exploration+0x19c>)
 8002928:	f7fe fbca 	bl	80010c0 <send_bluetooth_message>
    send_bluetooth_message("==========================================\r\n");
 800292c:	480f      	ldr	r0, [pc, #60]	@ (800296c <initialize_maze_exploration+0x1a0>)
 800292e:	f7fe fbc7 	bl	80010c0 <send_bluetooth_message>
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	0800db70 	.word	0x0800db70
 8002940:	2000045c 	.word	0x2000045c
 8002944:	200014b4 	.word	0x200014b4
 8002948:	200014b8 	.word	0x200014b8
 800294c:	200014bc 	.word	0x200014bc
 8002950:	200014c0 	.word	0x200014c0
 8002954:	2000145c 	.word	0x2000145c
 8002958:	200014c4 	.word	0x200014c4
 800295c:	200014c8 	.word	0x200014c8
 8002960:	0800db9c 	.word	0x0800db9c
 8002964:	0800dbb0 	.word	0x0800dbb0
 8002968:	0800dbd0 	.word	0x0800dbd0
 800296c:	0800dc00 	.word	0x0800dc00

08002970 <flood_fill_algorithm>:

/**
 * @brief Flood fill algorithm implementation
 */
void flood_fill_algorithm(void) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b098      	sub	sp, #96	@ 0x60
 8002974:	af00      	add	r7, sp, #0
    // Initialize all distances to MAX_DISTANCE
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002976:	2300      	movs	r3, #0
 8002978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800297a:	e015      	b.n	80029a8 <flood_fill_algorithm+0x38>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800297c:	2300      	movs	r3, #0
 800297e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002980:	e00c      	b.n	800299c <flood_fill_algorithm+0x2c>
            maze[x][y].distance = MAX_DISTANCE;
 8002982:	4984      	ldr	r1, [pc, #528]	@ (8002b94 <flood_fill_algorithm+0x224>)
 8002984:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002986:	011a      	lsls	r2, r3, #4
 8002988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800298a:	4413      	add	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	440b      	add	r3, r1
 8002990:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002994:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002998:	3301      	adds	r3, #1
 800299a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800299c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	ddef      	ble.n	8002982 <flood_fill_algorithm+0x12>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80029a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a4:	3301      	adds	r3, #1
 80029a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029aa:	2b0f      	cmp	r3, #15
 80029ac:	dde6      	ble.n	800297c <flood_fill_algorithm+0xc>
        }
    }

    // Initialize queue
    queue_init(&bfs_queue);
 80029ae:	487a      	ldr	r0, [pc, #488]	@ (8002b98 <flood_fill_algorithm+0x228>)
 80029b0:	f7ff fe5e 	bl	8002670 <queue_init>

    // Set goal distances and add to queue
    if (!robot.center_reached) {
 80029b4:	4b79      	ldr	r3, [pc, #484]	@ (8002b9c <flood_fill_algorithm+0x22c>)
 80029b6:	7b1b      	ldrb	r3, [r3, #12]
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d060      	beq.n	8002a84 <flood_fill_algorithm+0x114>
        // Heading to center
        maze[maze_center_x1][maze_center_y1].distance = 0;
 80029c2:	4b77      	ldr	r3, [pc, #476]	@ (8002ba0 <flood_fill_algorithm+0x230>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b77      	ldr	r3, [pc, #476]	@ (8002ba4 <flood_fill_algorithm+0x234>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4972      	ldr	r1, [pc, #456]	@ (8002b94 <flood_fill_algorithm+0x224>)
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	4413      	add	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	440b      	add	r3, r1
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
        maze[maze_center_x2][maze_center_y1].distance = 0;
 80029d8:	4b73      	ldr	r3, [pc, #460]	@ (8002ba8 <flood_fill_algorithm+0x238>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b71      	ldr	r3, [pc, #452]	@ (8002ba4 <flood_fill_algorithm+0x234>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	496c      	ldr	r1, [pc, #432]	@ (8002b94 <flood_fill_algorithm+0x224>)
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	4413      	add	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	440b      	add	r3, r1
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
        maze[maze_center_x1][maze_center_y2].distance = 0;
 80029ee:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba0 <flood_fill_algorithm+0x230>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4b6e      	ldr	r3, [pc, #440]	@ (8002bac <flood_fill_algorithm+0x23c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4967      	ldr	r1, [pc, #412]	@ (8002b94 <flood_fill_algorithm+0x224>)
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	440b      	add	r3, r1
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
        maze[maze_center_x2][maze_center_y2].distance = 0;
 8002a04:	4b68      	ldr	r3, [pc, #416]	@ (8002ba8 <flood_fill_algorithm+0x238>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b68      	ldr	r3, [pc, #416]	@ (8002bac <flood_fill_algorithm+0x23c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4961      	ldr	r1, [pc, #388]	@ (8002b94 <flood_fill_algorithm+0x224>)
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	4413      	add	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	440b      	add	r3, r1
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        queue_push(&bfs_queue, (Position){maze_center_x1, maze_center_y1});
 8002a1a:	4b61      	ldr	r3, [pc, #388]	@ (8002ba0 <flood_fill_algorithm+0x230>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a20:	4b60      	ldr	r3, [pc, #384]	@ (8002ba4 <flood_fill_algorithm+0x234>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a2e:	485a      	ldr	r0, [pc, #360]	@ (8002b98 <flood_fill_algorithm+0x228>)
 8002a30:	f7ff fe47 	bl	80026c2 <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x2, maze_center_y1});
 8002a34:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba8 <flood_fill_algorithm+0x238>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ba4 <flood_fill_algorithm+0x234>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a44:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a48:	4853      	ldr	r0, [pc, #332]	@ (8002b98 <flood_fill_algorithm+0x228>)
 8002a4a:	f7ff fe3a 	bl	80026c2 <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x1, maze_center_y2});
 8002a4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ba0 <flood_fill_algorithm+0x230>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	4b55      	ldr	r3, [pc, #340]	@ (8002bac <flood_fill_algorithm+0x23c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a62:	484d      	ldr	r0, [pc, #308]	@ (8002b98 <flood_fill_algorithm+0x228>)
 8002a64:	f7ff fe2d 	bl	80026c2 <queue_push>
        queue_push(&bfs_queue, (Position){maze_center_x2, maze_center_y2});
 8002a68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba8 <flood_fill_algorithm+0x238>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8002bac <flood_fill_algorithm+0x23c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a7c:	4846      	ldr	r0, [pc, #280]	@ (8002b98 <flood_fill_algorithm+0x228>)
 8002a7e:	f7ff fe20 	bl	80026c2 <queue_push>
 8002a82:	e00d      	b.n	8002aa0 <flood_fill_algorithm+0x130>
    } else {
        // Returning to start
        maze[0][0].distance = 0;
 8002a84:	4b43      	ldr	r3, [pc, #268]	@ (8002b94 <flood_fill_algorithm+0x224>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
        queue_push(&bfs_queue, (Position){0, 0});
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a9a:	483f      	ldr	r0, [pc, #252]	@ (8002b98 <flood_fill_algorithm+0x228>)
 8002a9c:	f7ff fe11 	bl	80026c2 <queue_push>
    }

    // Flood fill propagation
    int updates = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	657b      	str	r3, [r7, #84]	@ 0x54
    while (!queue_empty(&bfs_queue)) {
 8002aa4:	e068      	b.n	8002b78 <flood_fill_algorithm+0x208>
        Position current = queue_pop(&bfs_queue);
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	493b      	ldr	r1, [pc, #236]	@ (8002b98 <flood_fill_algorithm+0x228>)
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fe2a 	bl	8002706 <queue_pop>
        int x = current.x;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        int y = current.y;
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Check all four directions
        for (int dir = 0; dir < 4; dir++) {
 8002aba:	2300      	movs	r3, #0
 8002abc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002abe:	e058      	b.n	8002b72 <flood_fill_algorithm+0x202>
            if (maze[x][y].walls[dir]) continue; // Wall blocks this direction
 8002ac0:	4934      	ldr	r1, [pc, #208]	@ (8002b94 <flood_fill_algorithm+0x224>)
 8002ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ac4:	011a      	lsls	r2, r3, #4
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ac8:	4413      	add	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	18ca      	adds	r2, r1, r3
 8002ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3305      	adds	r3, #5
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d145      	bne.n	8002b66 <flood_fill_algorithm+0x1f6>

            int nx = x + dx[dir];
 8002ada:	4a35      	ldr	r2, [pc, #212]	@ (8002bb0 <flood_fill_algorithm+0x240>)
 8002adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ae4:	4413      	add	r3, r2
 8002ae6:	647b      	str	r3, [r7, #68]	@ 0x44
            int ny = y + dy[dir];
 8002ae8:	4a32      	ldr	r2, [pc, #200]	@ (8002bb4 <flood_fill_algorithm+0x244>)
 8002aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002af2:	4413      	add	r3, r2
 8002af4:	643b      	str	r3, [r7, #64]	@ 0x40

            // Check bounds
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db36      	blt.n	8002b6a <flood_fill_algorithm+0x1fa>
 8002afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	dc33      	bgt.n	8002b6a <flood_fill_algorithm+0x1fa>
 8002b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	db30      	blt.n	8002b6a <flood_fill_algorithm+0x1fa>
 8002b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	dc2d      	bgt.n	8002b6a <flood_fill_algorithm+0x1fa>

            int new_distance = maze[x][y].distance + 1;
 8002b0e:	4921      	ldr	r1, [pc, #132]	@ (8002b94 <flood_fill_algorithm+0x224>)
 8002b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b12:	011a      	lsls	r2, r3, #4
 8002b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b16:	4413      	add	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	440b      	add	r3, r1
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (new_distance < maze[nx][ny].distance) {
 8002b22:	491c      	ldr	r1, [pc, #112]	@ (8002b94 <flood_fill_algorithm+0x224>)
 8002b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b26:	011a      	lsls	r2, r3, #4
 8002b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2a:	4413      	add	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	440b      	add	r3, r1
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b34:	429a      	cmp	r2, r3
 8002b36:	da19      	bge.n	8002b6c <flood_fill_algorithm+0x1fc>
                maze[nx][ny].distance = new_distance;
 8002b38:	4916      	ldr	r1, [pc, #88]	@ (8002b94 <flood_fill_algorithm+0x224>)
 8002b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b3c:	011a      	lsls	r2, r3, #4
 8002b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b40:	4413      	add	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	440b      	add	r3, r1
 8002b46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b48:	601a      	str	r2, [r3, #0]
                queue_push(&bfs_queue, (Position){nx, ny});
 8002b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b58:	480f      	ldr	r0, [pc, #60]	@ (8002b98 <flood_fill_algorithm+0x228>)
 8002b5a:	f7ff fdb2 	bl	80026c2 <queue_push>
                updates++;
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b60:	3301      	adds	r3, #1
 8002b62:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b64:	e002      	b.n	8002b6c <flood_fill_algorithm+0x1fc>
            if (maze[x][y].walls[dir]) continue; // Wall blocks this direction
 8002b66:	bf00      	nop
 8002b68:	e000      	b.n	8002b6c <flood_fill_algorithm+0x1fc>
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002b6a:	bf00      	nop
        for (int dir = 0; dir < 4; dir++) {
 8002b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b6e:	3301      	adds	r3, #1
 8002b70:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	dda3      	ble.n	8002ac0 <flood_fill_algorithm+0x150>
    while (!queue_empty(&bfs_queue)) {
 8002b78:	4807      	ldr	r0, [pc, #28]	@ (8002b98 <flood_fill_algorithm+0x228>)
 8002b7a:	f7ff fd8d 	bl	8002698 <queue_empty>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d090      	beq.n	8002aa6 <flood_fill_algorithm+0x136>
            }
        }
    }

    send_bluetooth_printf("Flood fill complete: %d updates\r\n", updates);
 8002b84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b86:	480c      	ldr	r0, [pc, #48]	@ (8002bb8 <flood_fill_algorithm+0x248>)
 8002b88:	f7fe fab0 	bl	80010ec <send_bluetooth_printf>
}
 8002b8c:	bf00      	nop
 8002b8e:	3760      	adds	r7, #96	@ 0x60
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2000045c 	.word	0x2000045c
 8002b98:	200014cc 	.word	0x200014cc
 8002b9c:	2000145c 	.word	0x2000145c
 8002ba0:	200014b4 	.word	0x200014b4
 8002ba4:	200014b8 	.word	0x200014b8
 8002ba8:	200014bc 	.word	0x200014bc
 8002bac:	200014c0 	.word	0x200014c0
 8002bb0:	0800ec1c 	.word	0x0800ec1c
 8002bb4:	0800ec2c 	.word	0x0800ec2c
 8002bb8:	0800dc30 	.word	0x0800dc30

08002bbc <get_best_direction>:

/**
 * @brief Get best direction to move based on flood fill values
 */
int get_best_direction(void) {
 8002bbc:	b480      	push	{r7}
 8002bbe:	b093      	sub	sp, #76	@ 0x4c
 8002bc0:	af00      	add	r7, sp, #0
    int best_dir = robot.direction;
 8002bc2:	4b89      	ldr	r3, [pc, #548]	@ (8002de8 <get_best_direction+0x22c>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	647b      	str	r3, [r7, #68]	@ 0x44
    int min_distance = MAX_DISTANCE;
 8002bc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002bcc:	643b      	str	r3, [r7, #64]	@ 0x40
    int min_visits = 999;
 8002bce:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    bool found_unvisited = false;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Direction priority: forward, right, left, backward
    int priority[4];
    priority[0] = robot.direction;                    // Forward
 8002bda:	4b83      	ldr	r3, [pc, #524]	@ (8002de8 <get_best_direction+0x22c>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	603b      	str	r3, [r7, #0]
    priority[1] = (robot.direction + 1) % 4;         // Right
 8002be0:	4b81      	ldr	r3, [pc, #516]	@ (8002de8 <get_best_direction+0x22c>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	3301      	adds	r3, #1
 8002be6:	425a      	negs	r2, r3
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	f002 0203 	and.w	r2, r2, #3
 8002bf0:	bf58      	it	pl
 8002bf2:	4253      	negpl	r3, r2
 8002bf4:	607b      	str	r3, [r7, #4]
    priority[2] = (robot.direction + 3) % 4;         // Left
 8002bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8002de8 <get_best_direction+0x22c>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	3303      	adds	r3, #3
 8002bfc:	425a      	negs	r2, r3
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	f002 0203 	and.w	r2, r2, #3
 8002c06:	bf58      	it	pl
 8002c08:	4253      	negpl	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
    priority[3] = (robot.direction + 2) % 4;         // Backward
 8002c0c:	4b76      	ldr	r3, [pc, #472]	@ (8002de8 <get_best_direction+0x22c>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	3302      	adds	r3, #2
 8002c12:	425a      	negs	r2, r3
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	f002 0203 	and.w	r2, r2, #3
 8002c1c:	bf58      	it	pl
 8002c1e:	4253      	negpl	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

    // First pass: prioritize unvisited cells
    for (int p = 0; p < 4; p++) {
 8002c22:	2300      	movs	r3, #0
 8002c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c26:	e05c      	b.n	8002ce2 <get_best_direction+0x126>
        int dir = priority[p];
 8002c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	3348      	adds	r3, #72	@ 0x48
 8002c2e:	443b      	add	r3, r7
 8002c30:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002c34:	61bb      	str	r3, [r7, #24]

        // Check if there's a wall in this direction
        if (maze[robot.x][robot.y].walls[dir]) continue;
 8002c36:	4b6c      	ldr	r3, [pc, #432]	@ (8002de8 <get_best_direction+0x22c>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8002de8 <get_best_direction+0x22c>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	496b      	ldr	r1, [pc, #428]	@ (8002dec <get_best_direction+0x230>)
 8002c40:	0112      	lsls	r2, r2, #4
 8002c42:	4413      	add	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	18ca      	adds	r2, r1, r3
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3305      	adds	r3, #5
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d140      	bne.n	8002cd6 <get_best_direction+0x11a>

        int nx = robot.x + dx[dir];
 8002c54:	4b64      	ldr	r3, [pc, #400]	@ (8002de8 <get_best_direction+0x22c>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4965      	ldr	r1, [pc, #404]	@ (8002df0 <get_best_direction+0x234>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c60:	4413      	add	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
        int ny = robot.y + dy[dir];
 8002c64:	4b60      	ldr	r3, [pc, #384]	@ (8002de8 <get_best_direction+0x22c>)
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	4962      	ldr	r1, [pc, #392]	@ (8002df4 <get_best_direction+0x238>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c70:	4413      	add	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

        // Check bounds
        if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	db2f      	blt.n	8002cda <get_best_direction+0x11e>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	dc2c      	bgt.n	8002cda <get_best_direction+0x11e>
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	db29      	blt.n	8002cda <get_best_direction+0x11e>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b0f      	cmp	r3, #15
 8002c8a:	dc26      	bgt.n	8002cda <get_best_direction+0x11e>

        // Prioritize unvisited cells
        if (maze[nx][ny].visit_count == 0) {
 8002c8c:	4957      	ldr	r1, [pc, #348]	@ (8002dec <get_best_direction+0x230>)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	011a      	lsls	r2, r3, #4
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	440b      	add	r3, r1
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11c      	bne.n	8002cdc <get_best_direction+0x120>
            found_unvisited = true;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            if (maze[nx][ny].distance < min_distance) {
 8002ca8:	4950      	ldr	r1, [pc, #320]	@ (8002dec <get_best_direction+0x230>)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	011a      	lsls	r2, r3, #4
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	440b      	add	r3, r1
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	dd0e      	ble.n	8002cdc <get_best_direction+0x120>
                min_distance = maze[nx][ny].distance;
 8002cbe:	494b      	ldr	r1, [pc, #300]	@ (8002dec <get_best_direction+0x230>)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	011a      	lsls	r2, r3, #4
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	440b      	add	r3, r1
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	643b      	str	r3, [r7, #64]	@ 0x40
                best_dir = dir;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd4:	e002      	b.n	8002cdc <get_best_direction+0x120>
        if (maze[robot.x][robot.y].walls[dir]) continue;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <get_best_direction+0x120>
        if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002cda:	bf00      	nop
    for (int p = 0; p < 4; p++) {
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cde:	3301      	adds	r3, #1
 8002ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	dd9f      	ble.n	8002c28 <get_best_direction+0x6c>
            }
        }
    }

    // Second pass: if no unvisited cells, choose based on distance and visit count
    if (!found_unvisited) {
 8002ce8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002cec:	f083 0301 	eor.w	r3, r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d070      	beq.n	8002dd8 <get_best_direction+0x21c>
        for (int p = 0; p < 4; p++) {
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cfa:	e06a      	b.n	8002dd2 <get_best_direction+0x216>
            int dir = priority[p];
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	3348      	adds	r3, #72	@ 0x48
 8002d02:	443b      	add	r3, r7
 8002d04:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (maze[robot.x][robot.y].walls[dir]) continue;
 8002d0a:	4b37      	ldr	r3, [pc, #220]	@ (8002de8 <get_best_direction+0x22c>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4b36      	ldr	r3, [pc, #216]	@ (8002de8 <get_best_direction+0x22c>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4936      	ldr	r1, [pc, #216]	@ (8002dec <get_best_direction+0x230>)
 8002d14:	0112      	lsls	r2, r2, #4
 8002d16:	4413      	add	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	18ca      	adds	r2, r1, r3
 8002d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1e:	4413      	add	r3, r2
 8002d20:	3305      	adds	r3, #5
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d14e      	bne.n	8002dc6 <get_best_direction+0x20a>

            int nx = robot.x + dx[dir];
 8002d28:	4b2f      	ldr	r3, [pc, #188]	@ (8002de8 <get_best_direction+0x22c>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4930      	ldr	r1, [pc, #192]	@ (8002df0 <get_best_direction+0x234>)
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d34:	4413      	add	r3, r2
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28
            int ny = robot.y + dy[dir];
 8002d38:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <get_best_direction+0x22c>)
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	492d      	ldr	r1, [pc, #180]	@ (8002df4 <get_best_direction+0x238>)
 8002d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d44:	4413      	add	r3, r2
 8002d46:	627b      	str	r3, [r7, #36]	@ 0x24

            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	db3d      	blt.n	8002dca <get_best_direction+0x20e>
 8002d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	dc3a      	bgt.n	8002dca <get_best_direction+0x20e>
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db37      	blt.n	8002dca <get_best_direction+0x20e>
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	2b0f      	cmp	r3, #15
 8002d5e:	dc34      	bgt.n	8002dca <get_best_direction+0x20e>

            int nd = maze[nx][ny].distance;
 8002d60:	4922      	ldr	r1, [pc, #136]	@ (8002dec <get_best_direction+0x230>)
 8002d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d64:	011a      	lsls	r2, r3, #4
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	4413      	add	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	440b      	add	r3, r1
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	623b      	str	r3, [r7, #32]
            int nv = maze[nx][ny].visit_count;
 8002d72:	491e      	ldr	r1, [pc, #120]	@ (8002dec <get_best_direction+0x230>)
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	011a      	lsls	r2, r3, #4
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	4413      	add	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	440b      	add	r3, r1
 8002d80:	330c      	adds	r3, #12
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61fb      	str	r3, [r7, #28]

            // Choose cell with minimum distance, then minimum visits, then prefer forward
            if (nd < min_distance ||
 8002d86:	6a3a      	ldr	r2, [r7, #32]
 8002d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	db14      	blt.n	8002db8 <get_best_direction+0x1fc>
 8002d8e:	6a3a      	ldr	r2, [r7, #32]
 8002d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d103      	bne.n	8002d9e <get_best_direction+0x1e2>
                (nd == min_distance && nv < min_visits) ||
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	db0c      	blt.n	8002db8 <get_best_direction+0x1fc>
 8002d9e:	6a3a      	ldr	r2, [r7, #32]
 8002da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d112      	bne.n	8002dcc <get_best_direction+0x210>
                (nd == min_distance && nv == min_visits && dir == robot.direction)) {
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d10e      	bne.n	8002dcc <get_best_direction+0x210>
 8002dae:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <get_best_direction+0x22c>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d109      	bne.n	8002dcc <get_best_direction+0x210>
                min_distance = nd;
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	643b      	str	r3, [r7, #64]	@ 0x40
                min_visits = nv;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
                best_dir = dir;
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc4:	e002      	b.n	8002dcc <get_best_direction+0x210>
            if (maze[robot.x][robot.y].walls[dir]) continue;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <get_best_direction+0x210>
            if (nx < 0 || nx >= MAZE_SIZE || ny < 0 || ny >= MAZE_SIZE) continue;
 8002dca:	bf00      	nop
        for (int p = 0; p < 4; p++) {
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	3301      	adds	r3, #1
 8002dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	dd91      	ble.n	8002cfc <get_best_direction+0x140>
            }
        }
    }

    return best_dir;
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	374c      	adds	r7, #76	@ 0x4c
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	2000145c 	.word	0x2000145c
 8002dec:	2000045c 	.word	0x2000045c
 8002df0:	0800ec1c 	.word	0x0800ec1c
 8002df4:	0800ec2c 	.word	0x0800ec2c

08002df8 <turn_to_direction>:
int r=0;

/**
 * @brief Turn robot to face the specified direction
 */
void turn_to_direction(int target_direction) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
    int current_dir = robot.direction;
 8002e00:	4b2a      	ldr	r3, [pc, #168]	@ (8002eac <turn_to_direction+0xb4>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	60fb      	str	r3, [r7, #12]
    int turn_diff = (target_direction - current_dir + 4) % 4;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	425a      	negs	r2, r3
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	f002 0203 	and.w	r2, r2, #3
 8002e18:	bf58      	it	pl
 8002e1a:	4253      	negpl	r3, r2
 8002e1c:	60bb      	str	r3, [r7, #8]

    switch (turn_diff) {
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d83b      	bhi.n	8002e9c <turn_to_direction+0xa4>
 8002e24:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <turn_to_direction+0x34>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e9d 	.word	0x08002e9d
 8002e30:	08002e3d 	.word	0x08002e3d
 8002e34:	08002e5d 	.word	0x08002e5d
 8002e38:	08002e7d 	.word	0x08002e7d
        case 0:
            // Already facing correct direction
            break;
        case 1:
            // Turn right (90 degrees clockwise)
            send_bluetooth_message("Turning RIGHT...\r\n");
 8002e3c:	481c      	ldr	r0, [pc, #112]	@ (8002eb0 <turn_to_direction+0xb8>)
 8002e3e:	f7fe f93f 	bl	80010c0 <send_bluetooth_message>
            turn_right();
 8002e42:	f000 fdc5 	bl	80039d0 <turn_right>
            l=1549;
 8002e46:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <turn_to_direction+0xbc>)
 8002e48:	f240 620d 	movw	r2, #1549	@ 0x60d
 8002e4c:	601a      	str	r2, [r3, #0]
            r=1537;
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <turn_to_direction+0xc0>)
 8002e50:	f240 6201 	movw	r2, #1537	@ 0x601
 8002e54:	601a      	str	r2, [r3, #0]
            play_turn_beep();
 8002e56:	f7fe f90f 	bl	8001078 <play_turn_beep>
            break;
 8002e5a:	e01f      	b.n	8002e9c <turn_to_direction+0xa4>
        case 2:
            // Turn around (180 degrees)
            send_bluetooth_message("Turning AROUND...\r\n");
 8002e5c:	4817      	ldr	r0, [pc, #92]	@ (8002ebc <turn_to_direction+0xc4>)
 8002e5e:	f7fe f92f 	bl	80010c0 <send_bluetooth_message>
            turn_around();
 8002e62:	f000 fde7 	bl	8003a34 <turn_around>
            l=1530;
 8002e66:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <turn_to_direction+0xbc>)
 8002e68:	f240 52fa 	movw	r2, #1530	@ 0x5fa
 8002e6c:	601a      	str	r2, [r3, #0]
            r=1562;
 8002e6e:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <turn_to_direction+0xc0>)
 8002e70:	f240 621a 	movw	r2, #1562	@ 0x61a
 8002e74:	601a      	str	r2, [r3, #0]
            play_turn_beep();
 8002e76:	f7fe f8ff 	bl	8001078 <play_turn_beep>
            break;
 8002e7a:	e00f      	b.n	8002e9c <turn_to_direction+0xa4>
        case 3:
            // Turn left (90 degrees counter-clockwise)
            send_bluetooth_message("Turning LEFT...\r\n");
 8002e7c:	4810      	ldr	r0, [pc, #64]	@ (8002ec0 <turn_to_direction+0xc8>)
 8002e7e:	f7fe f91f 	bl	80010c0 <send_bluetooth_message>
            turn_left();
 8002e82:	f000 fd73 	bl	800396c <turn_left>
            l=1330;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <turn_to_direction+0xbc>)
 8002e88:	f240 5232 	movw	r2, #1330	@ 0x532
 8002e8c:	601a      	str	r2, [r3, #0]
            r=1352;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <turn_to_direction+0xc0>)
 8002e90:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 8002e94:	601a      	str	r2, [r3, #0]
            play_turn_beep();
 8002e96:	f7fe f8ef 	bl	8001078 <play_turn_beep>
            break;
 8002e9a:	bf00      	nop
    }

    robot.direction = target_direction;
 8002e9c:	4a03      	ldr	r2, [pc, #12]	@ (8002eac <turn_to_direction+0xb4>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6093      	str	r3, [r2, #8]
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000145c 	.word	0x2000145c
 8002eb0:	0800dc54 	.word	0x0800dc54
 8002eb4:	20001d58 	.word	0x20001d58
 8002eb8:	20001d5c 	.word	0x20001d5c
 8002ebc:	0800dc68 	.word	0x0800dc68
 8002ec0:	0800dc7c 	.word	0x0800dc7c

08002ec4 <move_forward_one_cell>:

/**
 * @brief Move forward one cell with precise control
 */
bool move_forward_one_cell(void) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
    send_bluetooth_printf("Moving forward from (%d,%d) to ", robot.x, robot.y);
 8002eca:	4b32      	ldr	r3, [pc, #200]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a31      	ldr	r2, [pc, #196]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002ed0:	6852      	ldr	r2, [r2, #4]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4830      	ldr	r0, [pc, #192]	@ (8002f98 <move_forward_one_cell+0xd4>)
 8002ed6:	f7fe f909 	bl	80010ec <send_bluetooth_printf>

    // Calculate new position
    int new_x = robot.x + dx[robot.direction];
 8002eda:	4b2e      	ldr	r3, [pc, #184]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4b2d      	ldr	r3, [pc, #180]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	492e      	ldr	r1, [pc, #184]	@ (8002f9c <move_forward_one_cell+0xd8>)
 8002ee4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ee8:	4413      	add	r3, r2
 8002eea:	607b      	str	r3, [r7, #4]
    int new_y = robot.y + dy[robot.direction];
 8002eec:	4b29      	ldr	r3, [pc, #164]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	492a      	ldr	r1, [pc, #168]	@ (8002fa0 <move_forward_one_cell+0xdc>)
 8002ef6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002efa:	4413      	add	r3, r2
 8002efc:	603b      	str	r3, [r7, #0]

    // Check bounds
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db08      	blt.n	8002f16 <move_forward_one_cell+0x52>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b0f      	cmp	r3, #15
 8002f08:	dc05      	bgt.n	8002f16 <move_forward_one_cell+0x52>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	db02      	blt.n	8002f16 <move_forward_one_cell+0x52>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	dd04      	ble.n	8002f20 <move_forward_one_cell+0x5c>
        send_bluetooth_message("BLOCKED - Out of bounds!\r\n");
 8002f16:	4823      	ldr	r0, [pc, #140]	@ (8002fa4 <move_forward_one_cell+0xe0>)
 8002f18:	f7fe f8d2 	bl	80010c0 <send_bluetooth_message>
        return false;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e035      	b.n	8002f8c <move_forward_one_cell+0xc8>
    }

    send_bluetooth_printf("(%d,%d)\r\n", new_x, new_y);
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4820      	ldr	r0, [pc, #128]	@ (8002fa8 <move_forward_one_cell+0xe4>)
 8002f26:	f7fe f8e1 	bl	80010ec <send_bluetooth_printf>


    // Use precise encoder-based movement
    move_forward_distance(LEFT_ENCODER_COUNTS_PER_CELL ,RIGHT_ENCODER_COUNTS_PER_CELL);
 8002f2a:	f640 119c 	movw	r1, #2460	@ 0x99c
 8002f2e:	f640 109c 	movw	r0, #2460	@ 0x99c
 8002f32:	f000 fdfd 	bl	8003b30 <move_forward_distance>

    // Update robot position
    robot.x = new_x;
 8002f36:	4a17      	ldr	r2, [pc, #92]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 8002f3c:	4a15      	ldr	r2, [pc, #84]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6053      	str	r3, [r2, #4]
    robot.exploration_steps++;
 8002f42:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a12      	ldr	r2, [pc, #72]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002f4a:	6113      	str	r3, [r2, #16]

    // Mark cell as visited
    maze[robot.x][robot.y].visited = true;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4915      	ldr	r1, [pc, #84]	@ (8002fac <move_forward_one_cell+0xe8>)
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	4413      	add	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3304      	adds	r3, #4
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 8002f64:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <move_forward_one_cell+0xd0>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	480f      	ldr	r0, [pc, #60]	@ (8002fac <move_forward_one_cell+0xe8>)
 8002f6e:	0111      	lsls	r1, r2, #4
 8002f70:	4419      	add	r1, r3
 8002f72:	0109      	lsls	r1, r1, #4
 8002f74:	4401      	add	r1, r0
 8002f76:	310c      	adds	r1, #12
 8002f78:	6809      	ldr	r1, [r1, #0]
 8002f7a:	3101      	adds	r1, #1
 8002f7c:	480b      	ldr	r0, [pc, #44]	@ (8002fac <move_forward_one_cell+0xe8>)
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	4413      	add	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	4403      	add	r3, r0
 8002f86:	330c      	adds	r3, #12
 8002f88:	6019      	str	r1, [r3, #0]

    return true;
 8002f8a:	2301      	movs	r3, #1
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	2000145c 	.word	0x2000145c
 8002f98:	0800dc90 	.word	0x0800dc90
 8002f9c:	0800ec1c 	.word	0x0800ec1c
 8002fa0:	0800ec2c 	.word	0x0800ec2c
 8002fa4:	0800dcb0 	.word	0x0800dcb0
 8002fa8:	0800dccc 	.word	0x0800dccc
 8002fac:	2000045c 	.word	0x2000045c

08002fb0 <move_forward_one_cell_truns>:
int flag=1;

bool move_forward_one_cell_truns(void){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
    send_bluetooth_printf("Moving forward from (%d,%d) to ", robot.x, robot.y);
 8002fb6:	4b53      	ldr	r3, [pc, #332]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a52      	ldr	r2, [pc, #328]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 8002fbc:	6852      	ldr	r2, [r2, #4]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4851      	ldr	r0, [pc, #324]	@ (8003108 <move_forward_one_cell_truns+0x158>)
 8002fc2:	f7fe f893 	bl	80010ec <send_bluetooth_printf>

    // Calculate new position
    int new_x = robot.x + dx[robot.direction];
 8002fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b4e      	ldr	r3, [pc, #312]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	494f      	ldr	r1, [pc, #316]	@ (800310c <move_forward_one_cell_truns+0x15c>)
 8002fd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	607b      	str	r3, [r7, #4]
    int new_y = robot.y + dy[robot.direction];
 8002fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	4b49      	ldr	r3, [pc, #292]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	494b      	ldr	r1, [pc, #300]	@ (8003110 <move_forward_one_cell_truns+0x160>)
 8002fe2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	603b      	str	r3, [r7, #0]

    // Check bounds
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	db08      	blt.n	8003002 <move_forward_one_cell_truns+0x52>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	dc05      	bgt.n	8003002 <move_forward_one_cell_truns+0x52>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	db02      	blt.n	8003002 <move_forward_one_cell_truns+0x52>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	dd04      	ble.n	800300c <move_forward_one_cell_truns+0x5c>
        send_bluetooth_message("BLOCKED - Out of bounds!\r\n");
 8003002:	4844      	ldr	r0, [pc, #272]	@ (8003114 <move_forward_one_cell_truns+0x164>)
 8003004:	f7fe f85c 	bl	80010c0 <send_bluetooth_message>
        return false;
 8003008:	2300      	movs	r3, #0
 800300a:	e077      	b.n	80030fc <move_forward_one_cell_truns+0x14c>
    }

    send_bluetooth_printf("(%d,%d)\r\n", new_x, new_y);
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4841      	ldr	r0, [pc, #260]	@ (8003118 <move_forward_one_cell_truns+0x168>)
 8003012:	f7fe f86b 	bl	80010ec <send_bluetooth_printf>
    if (l!=0 && r!=0){
 8003016:	4b41      	ldr	r3, [pc, #260]	@ (800311c <move_forward_one_cell_truns+0x16c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d012      	beq.n	8003044 <move_forward_one_cell_truns+0x94>
 800301e:	4b40      	ldr	r3, [pc, #256]	@ (8003120 <move_forward_one_cell_truns+0x170>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <move_forward_one_cell_truns+0x94>
    	move_forward_distance(l,r);
 8003026:	4b3d      	ldr	r3, [pc, #244]	@ (800311c <move_forward_one_cell_truns+0x16c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a3d      	ldr	r2, [pc, #244]	@ (8003120 <move_forward_one_cell_truns+0x170>)
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fd7d 	bl	8003b30 <move_forward_distance>
    	l=0;
 8003036:	4b39      	ldr	r3, [pc, #228]	@ (800311c <move_forward_one_cell_truns+0x16c>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    	r=0;
 800303c:	4b38      	ldr	r3, [pc, #224]	@ (8003120 <move_forward_one_cell_truns+0x170>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e030      	b.n	80030a6 <move_forward_one_cell_truns+0xf6>
    }
    else if (sensors.wall_left || sensors.wall_right){
 8003044:	4b37      	ldr	r3, [pc, #220]	@ (8003124 <move_forward_one_cell_truns+0x174>)
 8003046:	7adb      	ldrb	r3, [r3, #11]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d103      	bne.n	8003054 <move_forward_one_cell_truns+0xa4>
 800304c:	4b35      	ldr	r3, [pc, #212]	@ (8003124 <move_forward_one_cell_truns+0x174>)
 800304e:	7b1b      	ldrb	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d014      	beq.n	800307e <move_forward_one_cell_truns+0xce>
    	if (flag==1){
 8003054:	4b34      	ldr	r3, [pc, #208]	@ (8003128 <move_forward_one_cell_truns+0x178>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d109      	bne.n	8003070 <move_forward_one_cell_truns+0xc0>
    		move_forward_WF_distance(1200,1200);
 800305c:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003060:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003064:	f000 fd97 	bl	8003b96 <move_forward_WF_distance>
    		flag=0;
 8003068:	4b2f      	ldr	r3, [pc, #188]	@ (8003128 <move_forward_one_cell_truns+0x178>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
    	if (flag==1){
 800306e:	e01a      	b.n	80030a6 <move_forward_one_cell_truns+0xf6>
    	}else{
    		move_forward_WF_distance(LEFT_ENCODER_COUNTS_PER_CELL ,RIGHT_ENCODER_COUNTS_PER_CELL);
 8003070:	f640 119c 	movw	r1, #2460	@ 0x99c
 8003074:	f640 109c 	movw	r0, #2460	@ 0x99c
 8003078:	f000 fd8d 	bl	8003b96 <move_forward_WF_distance>
    	if (flag==1){
 800307c:	e013      	b.n	80030a6 <move_forward_one_cell_truns+0xf6>
    	}



    }else{
    	if (flag==1){
 800307e:	4b2a      	ldr	r3, [pc, #168]	@ (8003128 <move_forward_one_cell_truns+0x178>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d109      	bne.n	800309a <move_forward_one_cell_truns+0xea>
			move_forward_distance(1200 ,1200);
 8003086:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 800308a:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800308e:	f000 fd4f 	bl	8003b30 <move_forward_distance>
			flag=0;
 8003092:	4b25      	ldr	r3, [pc, #148]	@ (8003128 <move_forward_one_cell_truns+0x178>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e005      	b.n	80030a6 <move_forward_one_cell_truns+0xf6>
    	}else{
    		move_forward_distance(LEFT_ENCODER_COUNTS_PER_CELL ,RIGHT_ENCODER_COUNTS_PER_CELL);
 800309a:	f640 119c 	movw	r1, #2460	@ 0x99c
 800309e:	f640 109c 	movw	r0, #2460	@ 0x99c
 80030a2:	f000 fd45 	bl	8003b30 <move_forward_distance>

    // Use precise encoder-based movement


    // Update robot position
    robot.x = new_x;
 80030a6:	4a17      	ldr	r2, [pc, #92]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 80030ac:	4a15      	ldr	r2, [pc, #84]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6053      	str	r3, [r2, #4]
    robot.exploration_steps++;
 80030b2:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	3301      	adds	r3, #1
 80030b8:	4a12      	ldr	r2, [pc, #72]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 80030ba:	6113      	str	r3, [r2, #16]

    // Mark cell as visited
    maze[robot.x][robot.y].visited = true;
 80030bc:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4919      	ldr	r1, [pc, #100]	@ (800312c <move_forward_one_cell_truns+0x17c>)
 80030c6:	0112      	lsls	r2, r2, #4
 80030c8:	4413      	add	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	440b      	add	r3, r1
 80030ce:	3304      	adds	r3, #4
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <move_forward_one_cell_truns+0x154>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4813      	ldr	r0, [pc, #76]	@ (800312c <move_forward_one_cell_truns+0x17c>)
 80030de:	0111      	lsls	r1, r2, #4
 80030e0:	4419      	add	r1, r3
 80030e2:	0109      	lsls	r1, r1, #4
 80030e4:	4401      	add	r1, r0
 80030e6:	310c      	adds	r1, #12
 80030e8:	6809      	ldr	r1, [r1, #0]
 80030ea:	3101      	adds	r1, #1
 80030ec:	480f      	ldr	r0, [pc, #60]	@ (800312c <move_forward_one_cell_truns+0x17c>)
 80030ee:	0112      	lsls	r2, r2, #4
 80030f0:	4413      	add	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	4403      	add	r3, r0
 80030f6:	330c      	adds	r3, #12
 80030f8:	6019      	str	r1, [r3, #0]

    return true;
 80030fa:	2301      	movs	r3, #1
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	2000145c 	.word	0x2000145c
 8003108:	0800dc90 	.word	0x0800dc90
 800310c:	0800ec1c 	.word	0x0800ec1c
 8003110:	0800ec2c 	.word	0x0800ec2c
 8003114:	0800dcb0 	.word	0x0800dcb0
 8003118:	0800dccc 	.word	0x0800dccc
 800311c:	20001d58 	.word	0x20001d58
 8003120:	20001d5c 	.word	0x20001d5c
 8003124:	20001470 	.word	0x20001470
 8003128:	20000000 	.word	0x20000000
 800312c:	2000045c 	.word	0x2000045c

08003130 <is_at_goal>:

/**
 * @brief Check if robot is at goal position
 */
bool is_at_goal(void) {
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
    if (!robot.center_reached) {
 8003134:	4b1c      	ldr	r3, [pc, #112]	@ (80031a8 <is_at_goal+0x78>)
 8003136:	7b1b      	ldrb	r3, [r3, #12]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01e      	beq.n	8003180 <is_at_goal+0x50>
        // Check if at center
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 8003142:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <is_at_goal+0x78>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b19      	ldr	r3, [pc, #100]	@ (80031ac <is_at_goal+0x7c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d005      	beq.n	800315a <is_at_goal+0x2a>
 800314e:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <is_at_goal+0x78>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <is_at_goal+0x80>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d10d      	bne.n	8003176 <is_at_goal+0x46>
                (robot.y == maze_center_y1 || robot.y == maze_center_y2));
 800315a:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <is_at_goal+0x78>)
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <is_at_goal+0x84>)
 8003160:	681b      	ldr	r3, [r3, #0]
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 8003162:	429a      	cmp	r2, r3
 8003164:	d005      	beq.n	8003172 <is_at_goal+0x42>
                (robot.y == maze_center_y1 || robot.y == maze_center_y2));
 8003166:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <is_at_goal+0x78>)
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <is_at_goal+0x88>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d101      	bne.n	8003176 <is_at_goal+0x46>
        return ((robot.x == maze_center_x1 || robot.x == maze_center_x2) &&
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <is_at_goal+0x48>
 8003176:	2300      	movs	r3, #0
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e00d      	b.n	800319c <is_at_goal+0x6c>
    } else {
        // Check if returned to start
        return (robot.x == 0 && robot.y == 0);
 8003180:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <is_at_goal+0x78>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <is_at_goal+0x64>
 8003188:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <is_at_goal+0x78>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <is_at_goal+0x64>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <is_at_goal+0x66>
 8003194:	2300      	movs	r3, #0
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
    }
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	2000145c 	.word	0x2000145c
 80031ac:	200014b4 	.word	0x200014b4
 80031b0:	200014bc 	.word	0x200014bc
 80031b4:	200014b8 	.word	0x200014b8
 80031b8:	200014c0 	.word	0x200014c0

080031bc <update_maze_walls>:

/**
 * @brief Update walls based on sensor readings
 */
void update_maze_walls(void) {
 80031bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031be:	b08d      	sub	sp, #52	@ 0x34
 80031c0:	af04      	add	r7, sp, #16
    // Update sensors first
    update_sensors();
 80031c2:	f001 f9b7 	bl	8004534 <update_sensors>

    // Update wall information based on current direction and sensor readings
    if (sensors.wall_front) {
 80031c6:	4b9c      	ldr	r3, [pc, #624]	@ (8003438 <update_maze_walls+0x27c>)
 80031c8:	7a9b      	ldrb	r3, [r3, #10]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d041      	beq.n	8003252 <update_maze_walls+0x96>
        maze[robot.x][robot.y].walls[robot.direction] = true;
 80031ce:	4b9b      	ldr	r3, [pc, #620]	@ (800343c <update_maze_walls+0x280>)
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	4b9a      	ldr	r3, [pc, #616]	@ (800343c <update_maze_walls+0x280>)
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4b99      	ldr	r3, [pc, #612]	@ (800343c <update_maze_walls+0x280>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	4899      	ldr	r0, [pc, #612]	@ (8003440 <update_maze_walls+0x284>)
 80031dc:	0109      	lsls	r1, r1, #4
 80031de:	440a      	add	r2, r1
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	4402      	add	r2, r0
 80031e4:	4413      	add	r3, r2
 80031e6:	3305      	adds	r3, #5
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]

        // Update opposite wall in neighbor cell
        int nx = robot.x + dx[robot.direction];
 80031ec:	4b93      	ldr	r3, [pc, #588]	@ (800343c <update_maze_walls+0x280>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b92      	ldr	r3, [pc, #584]	@ (800343c <update_maze_walls+0x280>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4993      	ldr	r1, [pc, #588]	@ (8003444 <update_maze_walls+0x288>)
 80031f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031fa:	4413      	add	r3, r2
 80031fc:	61fb      	str	r3, [r7, #28]
        int ny = robot.y + dy[robot.direction];
 80031fe:	4b8f      	ldr	r3, [pc, #572]	@ (800343c <update_maze_walls+0x280>)
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4b8e      	ldr	r3, [pc, #568]	@ (800343c <update_maze_walls+0x280>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4990      	ldr	r1, [pc, #576]	@ (8003448 <update_maze_walls+0x28c>)
 8003208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800320c:	4413      	add	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db1d      	blt.n	8003252 <update_maze_walls+0x96>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	dc1a      	bgt.n	8003252 <update_maze_walls+0x96>
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db17      	blt.n	8003252 <update_maze_walls+0x96>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b0f      	cmp	r3, #15
 8003226:	dc14      	bgt.n	8003252 <update_maze_walls+0x96>
            maze[nx][ny].walls[(robot.direction + 2) % 4] = true;
 8003228:	4b84      	ldr	r3, [pc, #528]	@ (800343c <update_maze_walls+0x280>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	3302      	adds	r3, #2
 800322e:	425a      	negs	r2, r3
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	f002 0203 	and.w	r2, r2, #3
 8003238:	bf58      	it	pl
 800323a:	4253      	negpl	r3, r2
 800323c:	4880      	ldr	r0, [pc, #512]	@ (8003440 <update_maze_walls+0x284>)
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	0111      	lsls	r1, r2, #4
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	440a      	add	r2, r1
 8003246:	0112      	lsls	r2, r2, #4
 8003248:	4402      	add	r2, r0
 800324a:	4413      	add	r3, r2
 800324c:	3305      	adds	r3, #5
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_left) {
 8003252:	4b79      	ldr	r3, [pc, #484]	@ (8003438 <update_maze_walls+0x27c>)
 8003254:	7adb      	ldrb	r3, [r3, #11]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d048      	beq.n	80032ec <update_maze_walls+0x130>
        int left_dir = (robot.direction + 3) % 4;
 800325a:	4b78      	ldr	r3, [pc, #480]	@ (800343c <update_maze_walls+0x280>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	3303      	adds	r3, #3
 8003260:	425a      	negs	r2, r3
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	f002 0203 	and.w	r2, r2, #3
 800326a:	bf58      	it	pl
 800326c:	4253      	negpl	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
        maze[robot.x][robot.y].walls[left_dir] = true;
 8003270:	4b72      	ldr	r3, [pc, #456]	@ (800343c <update_maze_walls+0x280>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4b71      	ldr	r3, [pc, #452]	@ (800343c <update_maze_walls+0x280>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4971      	ldr	r1, [pc, #452]	@ (8003440 <update_maze_walls+0x284>)
 800327a:	0112      	lsls	r2, r2, #4
 800327c:	4413      	add	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	18ca      	adds	r2, r1, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4413      	add	r3, r2
 8003286:	3305      	adds	r3, #5
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]

        int nx = robot.x + dx[left_dir];
 800328c:	4b6b      	ldr	r3, [pc, #428]	@ (800343c <update_maze_walls+0x280>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	496c      	ldr	r1, [pc, #432]	@ (8003444 <update_maze_walls+0x288>)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003298:	4413      	add	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        int ny = robot.y + dy[left_dir];
 800329c:	4b67      	ldr	r3, [pc, #412]	@ (800343c <update_maze_walls+0x280>)
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	4969      	ldr	r1, [pc, #420]	@ (8003448 <update_maze_walls+0x28c>)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032a8:	4413      	add	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	db1c      	blt.n	80032ec <update_maze_walls+0x130>
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b0f      	cmp	r3, #15
 80032b6:	dc19      	bgt.n	80032ec <update_maze_walls+0x130>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db16      	blt.n	80032ec <update_maze_walls+0x130>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	dc13      	bgt.n	80032ec <update_maze_walls+0x130>
            maze[nx][ny].walls[(left_dir + 2) % 4] = true;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3302      	adds	r3, #2
 80032c8:	425a      	negs	r2, r3
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	f002 0203 	and.w	r2, r2, #3
 80032d2:	bf58      	it	pl
 80032d4:	4253      	negpl	r3, r2
 80032d6:	485a      	ldr	r0, [pc, #360]	@ (8003440 <update_maze_walls+0x284>)
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	0111      	lsls	r1, r2, #4
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	440a      	add	r2, r1
 80032e0:	0112      	lsls	r2, r2, #4
 80032e2:	4402      	add	r2, r0
 80032e4:	4413      	add	r3, r2
 80032e6:	3305      	adds	r3, #5
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_right) {
 80032ec:	4b52      	ldr	r3, [pc, #328]	@ (8003438 <update_maze_walls+0x27c>)
 80032ee:	7b1b      	ldrb	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d048      	beq.n	8003386 <update_maze_walls+0x1ca>
        int right_dir = (robot.direction + 1) % 4;
 80032f4:	4b51      	ldr	r3, [pc, #324]	@ (800343c <update_maze_walls+0x280>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	3301      	adds	r3, #1
 80032fa:	425a      	negs	r2, r3
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	f002 0203 	and.w	r2, r2, #3
 8003304:	bf58      	it	pl
 8003306:	4253      	negpl	r3, r2
 8003308:	60bb      	str	r3, [r7, #8]
        maze[robot.x][robot.y].walls[right_dir] = true;
 800330a:	4b4c      	ldr	r3, [pc, #304]	@ (800343c <update_maze_walls+0x280>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b4b      	ldr	r3, [pc, #300]	@ (800343c <update_maze_walls+0x280>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	494b      	ldr	r1, [pc, #300]	@ (8003440 <update_maze_walls+0x284>)
 8003314:	0112      	lsls	r2, r2, #4
 8003316:	4413      	add	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	18ca      	adds	r2, r1, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4413      	add	r3, r2
 8003320:	3305      	adds	r3, #5
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]

        int nx = robot.x + dx[right_dir];
 8003326:	4b45      	ldr	r3, [pc, #276]	@ (800343c <update_maze_walls+0x280>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4946      	ldr	r1, [pc, #280]	@ (8003444 <update_maze_walls+0x288>)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003332:	4413      	add	r3, r2
 8003334:	607b      	str	r3, [r7, #4]
        int ny = robot.y + dy[right_dir];
 8003336:	4b41      	ldr	r3, [pc, #260]	@ (800343c <update_maze_walls+0x280>)
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	4943      	ldr	r1, [pc, #268]	@ (8003448 <update_maze_walls+0x28c>)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003342:	4413      	add	r3, r2
 8003344:	603b      	str	r3, [r7, #0]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db1c      	blt.n	8003386 <update_maze_walls+0x1ca>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	dc19      	bgt.n	8003386 <update_maze_walls+0x1ca>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	db16      	blt.n	8003386 <update_maze_walls+0x1ca>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b0f      	cmp	r3, #15
 800335c:	dc13      	bgt.n	8003386 <update_maze_walls+0x1ca>
            maze[nx][ny].walls[(right_dir + 2) % 4] = true;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	3302      	adds	r3, #2
 8003362:	425a      	negs	r2, r3
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	f002 0203 	and.w	r2, r2, #3
 800336c:	bf58      	it	pl
 800336e:	4253      	negpl	r3, r2
 8003370:	4833      	ldr	r0, [pc, #204]	@ (8003440 <update_maze_walls+0x284>)
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	0111      	lsls	r1, r2, #4
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	440a      	add	r2, r1
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	4402      	add	r2, r0
 800337e:	4413      	add	r3, r2
 8003380:	3305      	adds	r3, #5
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
        }
    }

    // Send wall detection feedback
    // Send wall detection feedback
    if (sensors.wall_front || sensors.wall_left || sensors.wall_right) {
 8003386:	4b2c      	ldr	r3, [pc, #176]	@ (8003438 <update_maze_walls+0x27c>)
 8003388:	7a9b      	ldrb	r3, [r3, #10]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d107      	bne.n	800339e <update_maze_walls+0x1e2>
 800338e:	4b2a      	ldr	r3, [pc, #168]	@ (8003438 <update_maze_walls+0x27c>)
 8003390:	7adb      	ldrb	r3, [r3, #11]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <update_maze_walls+0x1e2>
 8003396:	4b28      	ldr	r3, [pc, #160]	@ (8003438 <update_maze_walls+0x27c>)
 8003398:	7b1b      	ldrb	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d028      	beq.n	80033f0 <update_maze_walls+0x234>
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
                             sensors.wall_front ? "Y" : "N",
 800339e:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <update_maze_walls+0x27c>)
 80033a0:	7a9b      	ldrb	r3, [r3, #10]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <update_maze_walls+0x1ee>
 80033a6:	4929      	ldr	r1, [pc, #164]	@ (800344c <update_maze_walls+0x290>)
 80033a8:	e000      	b.n	80033ac <update_maze_walls+0x1f0>
 80033aa:	4929      	ldr	r1, [pc, #164]	@ (8003450 <update_maze_walls+0x294>)
                             sensors.wall_left ? "Y" : "N",
 80033ac:	4b22      	ldr	r3, [pc, #136]	@ (8003438 <update_maze_walls+0x27c>)
 80033ae:	7adb      	ldrb	r3, [r3, #11]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <update_maze_walls+0x1fc>
 80033b4:	4a25      	ldr	r2, [pc, #148]	@ (800344c <update_maze_walls+0x290>)
 80033b6:	e000      	b.n	80033ba <update_maze_walls+0x1fe>
 80033b8:	4a25      	ldr	r2, [pc, #148]	@ (8003450 <update_maze_walls+0x294>)
                             sensors.wall_right ? "Y" : "N",
 80033ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <update_maze_walls+0x27c>)
 80033bc:	7b1b      	ldrb	r3, [r3, #12]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <update_maze_walls+0x20a>
 80033c2:	4b22      	ldr	r3, [pc, #136]	@ (800344c <update_maze_walls+0x290>)
 80033c4:	e000      	b.n	80033c8 <update_maze_walls+0x20c>
 80033c6:	4b22      	ldr	r3, [pc, #136]	@ (8003450 <update_maze_walls+0x294>)
                             sensors.front_left, sensors.front_right,
 80033c8:	481b      	ldr	r0, [pc, #108]	@ (8003438 <update_maze_walls+0x27c>)
 80033ca:	8900      	ldrh	r0, [r0, #8]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80033cc:	4604      	mov	r4, r0
                             sensors.front_left, sensors.front_right,
 80033ce:	481a      	ldr	r0, [pc, #104]	@ (8003438 <update_maze_walls+0x27c>)
 80033d0:	8840      	ldrh	r0, [r0, #2]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80033d2:	4605      	mov	r5, r0
                             sensors.side_left, sensors.side_right);
 80033d4:	4818      	ldr	r0, [pc, #96]	@ (8003438 <update_maze_walls+0x27c>)
 80033d6:	88c0      	ldrh	r0, [r0, #6]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80033d8:	4606      	mov	r6, r0
                             sensors.side_left, sensors.side_right);
 80033da:	4817      	ldr	r0, [pc, #92]	@ (8003438 <update_maze_walls+0x27c>)
 80033dc:	8880      	ldrh	r0, [r0, #4]
        send_bluetooth_printf("Walls detected: F:%s L:%s R:%s  [FL:%d FR:%d SL:%d SR:%d]\r\n",
 80033de:	9003      	str	r0, [sp, #12]
 80033e0:	9602      	str	r6, [sp, #8]
 80033e2:	9501      	str	r5, [sp, #4]
 80033e4:	9400      	str	r4, [sp, #0]
 80033e6:	481b      	ldr	r0, [pc, #108]	@ (8003454 <update_maze_walls+0x298>)
 80033e8:	f7fd fe80 	bl	80010ec <send_bluetooth_printf>

        play_wall_beep();
 80033ec:	f7fd fe3b 	bl	8001066 <play_wall_beep>
    }

    // Mark current cell as visited
    maze[robot.x][robot.y].visited = true;
 80033f0:	4b12      	ldr	r3, [pc, #72]	@ (800343c <update_maze_walls+0x280>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b11      	ldr	r3, [pc, #68]	@ (800343c <update_maze_walls+0x280>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4911      	ldr	r1, [pc, #68]	@ (8003440 <update_maze_walls+0x284>)
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	4413      	add	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	440b      	add	r3, r1
 8003402:	3304      	adds	r3, #4
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 8003408:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <update_maze_walls+0x280>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <update_maze_walls+0x280>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	480b      	ldr	r0, [pc, #44]	@ (8003440 <update_maze_walls+0x284>)
 8003412:	0111      	lsls	r1, r2, #4
 8003414:	4419      	add	r1, r3
 8003416:	0109      	lsls	r1, r1, #4
 8003418:	4401      	add	r1, r0
 800341a:	310c      	adds	r1, #12
 800341c:	6809      	ldr	r1, [r1, #0]
 800341e:	3101      	adds	r1, #1
 8003420:	4807      	ldr	r0, [pc, #28]	@ (8003440 <update_maze_walls+0x284>)
 8003422:	0112      	lsls	r2, r2, #4
 8003424:	4413      	add	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	4403      	add	r3, r0
 800342a:	330c      	adds	r3, #12
 800342c:	6019      	str	r1, [r3, #0]
}
 800342e:	bf00      	nop
 8003430:	3724      	adds	r7, #36	@ 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003436:	bf00      	nop
 8003438:	20001470 	.word	0x20001470
 800343c:	2000145c 	.word	0x2000145c
 8003440:	2000045c 	.word	0x2000045c
 8003444:	0800ec1c 	.word	0x0800ec1c
 8003448:	0800ec2c 	.word	0x0800ec2c
 800344c:	0800dcd8 	.word	0x0800dcd8
 8003450:	0800dcdc 	.word	0x0800dcdc
 8003454:	0800dce0 	.word	0x0800dce0

08003458 <explore_maze>:

/**
 * @brief Main maze exploration function
 */
void explore_maze(void) {
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n🚀 STARTING MAZE EXPLORATION 🚀\r\n");
 800345e:	485b      	ldr	r0, [pc, #364]	@ (80035cc <explore_maze+0x174>)
 8003460:	f7fd fe2e 	bl	80010c0 <send_bluetooth_message>

    int max_steps = MAZE_SIZE * MAZE_SIZE * 3; // Safety limit
 8003464:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003468:	607b      	str	r3, [r7, #4]
    int steps = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]

    while (!is_at_goal() && steps < max_steps) {
 800346e:	e063      	b.n	8003538 <explore_maze+0xe0>
        // Update wall information
        update_maze_walls();
 8003470:	f7ff fea4 	bl	80031bc <update_maze_walls>
        HAL_Delay(10);
 8003474:	200a      	movs	r0, #10
 8003476:	f002 fb73 	bl	8005b60 <HAL_Delay>

        // Run flood fill algorithm
        flood_fill_algorithm();
 800347a:	f7ff fa79 	bl	8002970 <flood_fill_algorithm>

        // Get best direction to move
        int best_direction = get_best_direction();
 800347e:	f7ff fb9d 	bl	8002bbc <get_best_direction>
 8003482:	6038      	str	r0, [r7, #0]

        // Turn to face best direction
        turn_to_direction(best_direction);
 8003484:	6838      	ldr	r0, [r7, #0]
 8003486:	f7ff fcb7 	bl	8002df8 <turn_to_direction>

        // Move forward if possible
        if (!move_forward_one_cell_truns()){
 800348a:	f7ff fd91 	bl	8002fb0 <move_forward_one_cell_truns>
 800348e:	4603      	mov	r3, r0
 8003490:	f083 0301 	eor.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d02b      	beq.n	80034f2 <explore_maze+0x9a>
            send_bluetooth_message("❌ Movement failed! Trying alternative...\r\n");
 800349a:	484d      	ldr	r0, [pc, #308]	@ (80035d0 <explore_maze+0x178>)
 800349c:	f7fd fe10 	bl	80010c0 <send_bluetooth_message>

            // Try alternative directions
            for (int alt_dir = 0; alt_dir < 4; alt_dir++) {
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	e020      	b.n	80034e8 <explore_maze+0x90>
                if (alt_dir != best_direction &&
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d019      	beq.n	80034e2 <explore_maze+0x8a>
                    !maze[robot.x][robot.y].walls[alt_dir]) {
 80034ae:	4b49      	ldr	r3, [pc, #292]	@ (80035d4 <explore_maze+0x17c>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b48      	ldr	r3, [pc, #288]	@ (80035d4 <explore_maze+0x17c>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4948      	ldr	r1, [pc, #288]	@ (80035d8 <explore_maze+0x180>)
 80034b8:	0112      	lsls	r2, r2, #4
 80034ba:	4413      	add	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	18ca      	adds	r2, r1, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4413      	add	r3, r2
 80034c4:	3305      	adds	r3, #5
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	f083 0301 	eor.w	r3, r3, #1
 80034cc:	b2db      	uxtb	r3, r3
                if (alt_dir != best_direction &&
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <explore_maze+0x8a>

                    turn_to_direction(alt_dir);
 80034d2:	68b8      	ldr	r0, [r7, #8]
 80034d4:	f7ff fc90 	bl	8002df8 <turn_to_direction>
                    if (move_forward_one_cell()) {
 80034d8:	f7ff fcf4 	bl	8002ec4 <move_forward_one_cell>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <explore_maze+0x98>
            for (int alt_dir = 0; alt_dir < 4; alt_dir++) {
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	3301      	adds	r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	dddb      	ble.n	80034a6 <explore_maze+0x4e>
 80034ee:	e000      	b.n	80034f2 <explore_maze+0x9a>
                        break;
 80034f0:	bf00      	nop
                }
            }
        }

        // Send periodic status updates
        if (steps % 5 == 0) {
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	4b39      	ldr	r3, [pc, #228]	@ (80035dc <explore_maze+0x184>)
 80034f6:	fb83 2301 	smull	r2, r3, r3, r1
 80034fa:	105a      	asrs	r2, r3, #1
 80034fc:	17cb      	asrs	r3, r1, #31
 80034fe:	1ad2      	subs	r2, r2, r3
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	1aca      	subs	r2, r1, r3
 8003508:	2a00      	cmp	r2, #0
 800350a:	d112      	bne.n	8003532 <explore_maze+0xda>
            send_bluetooth_printf("Step %d: Position (%d,%d), Direction: %s\r\n",
 800350c:	4b31      	ldr	r3, [pc, #196]	@ (80035d4 <explore_maze+0x17c>)
 800350e:	681c      	ldr	r4, [r3, #0]
 8003510:	4b30      	ldr	r3, [pc, #192]	@ (80035d4 <explore_maze+0x17c>)
 8003512:	685d      	ldr	r5, [r3, #4]
 8003514:	4b2f      	ldr	r3, [pc, #188]	@ (80035d4 <explore_maze+0x17c>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4618      	mov	r0, r3
 800351a:	f001 fdc3 	bl	80050a4 <get_direction_name>
 800351e:	4603      	mov	r3, r0
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	462b      	mov	r3, r5
 8003524:	4622      	mov	r2, r4
 8003526:	68f9      	ldr	r1, [r7, #12]
 8003528:	482d      	ldr	r0, [pc, #180]	@ (80035e0 <explore_maze+0x188>)
 800352a:	f7fd fddf 	bl	80010ec <send_bluetooth_printf>
                                 steps, robot.x, robot.y, get_direction_name(robot.direction));
            send_maze_state();
 800352e:	f7fd fe03 	bl	8001138 <send_maze_state>
        }

        steps++;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3301      	adds	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
    while (!is_at_goal() && steps < max_steps) {
 8003538:	f7ff fdfa 	bl	8003130 <is_at_goal>
 800353c:	4603      	mov	r3, r0
 800353e:	f083 0301 	eor.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <explore_maze+0xf8>
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	db8f      	blt.n	8003470 <explore_maze+0x18>

        // Brief delay for stability
        //HAL_Delay(100);
    }

    if (is_at_goal()) {
 8003550:	f7ff fdee 	bl	8003130 <is_at_goal>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d026      	beq.n	80035a8 <explore_maze+0x150>
        if (!robot.center_reached) {
 800355a:	4b1e      	ldr	r3, [pc, #120]	@ (80035d4 <explore_maze+0x17c>)
 800355c:	7b1b      	ldrb	r3, [r3, #12]
 800355e:	f083 0301 	eor.w	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d011      	beq.n	800358c <explore_maze+0x134>
            robot.center_reached = true;
 8003568:	4b1a      	ldr	r3, [pc, #104]	@ (80035d4 <explore_maze+0x17c>)
 800356a:	2201      	movs	r2, #1
 800356c:	731a      	strb	r2, [r3, #12]
            send_bluetooth_message("🎯 CENTER REACHED! 🎯\r\n");
 800356e:	481d      	ldr	r0, [pc, #116]	@ (80035e4 <explore_maze+0x18c>)
 8003570:	f7fd fda6 	bl	80010c0 <send_bluetooth_message>
            play_success_tone();
 8003574:	f7fd fd32 	bl	8000fdc <play_success_tone>

            // Brief celebration
            led_sequence_complete();
 8003578:	f001 fd56 	bl	8005028 <led_sequence_complete>
            HAL_Delay(2000);
 800357c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003580:	f002 faee 	bl	8005b60 <HAL_Delay>

            send_bluetooth_message("Now returning to start...\r\n");
 8003584:	4818      	ldr	r0, [pc, #96]	@ (80035e8 <explore_maze+0x190>)
 8003586:	f7fd fd9b 	bl	80010c0 <send_bluetooth_message>
 800358a:	e015      	b.n	80035b8 <explore_maze+0x160>
        } else {
            robot.returned_to_start = true;
 800358c:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <explore_maze+0x17c>)
 800358e:	2201      	movs	r2, #1
 8003590:	735a      	strb	r2, [r3, #13]
            send_bluetooth_message("🏁 RETURNED TO START! 🏁\r\n");
 8003592:	4816      	ldr	r0, [pc, #88]	@ (80035ec <explore_maze+0x194>)
 8003594:	f7fd fd94 	bl	80010c0 <send_bluetooth_message>
            play_success_tone();
 8003598:	f7fd fd20 	bl	8000fdc <play_success_tone>
            led_sequence_complete();
 800359c:	f001 fd44 	bl	8005028 <led_sequence_complete>
            exploration_completed = 1;
 80035a0:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <explore_maze+0x198>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e007      	b.n	80035b8 <explore_maze+0x160>
        }
    } else {
        send_bluetooth_printf("❌ Exploration incomplete after %d steps\r\n", max_steps);
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4812      	ldr	r0, [pc, #72]	@ (80035f4 <explore_maze+0x19c>)
 80035ac:	f7fd fd9e 	bl	80010ec <send_bluetooth_printf>
        play_error_tone();
 80035b0:	f7fd fd40 	bl	8001034 <play_error_tone>
        led_sequence_error();
 80035b4:	f001 fd57 	bl	8005066 <led_sequence_error>
    }

    send_bluetooth_printf("Total exploration steps: %d\r\n", robot.exploration_steps);
 80035b8:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <explore_maze+0x17c>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	4619      	mov	r1, r3
 80035be:	480e      	ldr	r0, [pc, #56]	@ (80035f8 <explore_maze+0x1a0>)
 80035c0:	f7fd fd94 	bl	80010ec <send_bluetooth_printf>
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bdb0      	pop	{r4, r5, r7, pc}
 80035cc:	0800dd1c 	.word	0x0800dd1c
 80035d0:	0800dd44 	.word	0x0800dd44
 80035d4:	2000145c 	.word	0x2000145c
 80035d8:	2000045c 	.word	0x2000045c
 80035dc:	66666667 	.word	0x66666667
 80035e0:	0800dd74 	.word	0x0800dd74
 80035e4:	0800dda0 	.word	0x0800dda0
 80035e8:	0800ddbc 	.word	0x0800ddbc
 80035ec:	0800ddd8 	.word	0x0800ddd8
 80035f0:	200014c4 	.word	0x200014c4
 80035f4:	0800ddf8 	.word	0x0800ddf8
 80035f8:	0800de24 	.word	0x0800de24

080035fc <run_maze_exploration_sequence>:

/**
 * @brief Run complete maze exploration sequence
 */
void run_maze_exploration_sequence(void) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
    //send_bluetooth_message("\r\n" "=" * 50 "\r\n");
    send_bluetooth_message("🐭 MICROMOUSE MAZE EXPLORATION 🐭\r\n");
 8003602:	483e      	ldr	r0, [pc, #248]	@ (80036fc <run_maze_exploration_sequence+0x100>)
 8003604:	f7fd fd5c 	bl	80010c0 <send_bluetooth_message>
    //send_bluetooth_message("=" * 50 "\r\n");

    // Phase 1: Exploration to center
    if (!robot.center_reached) {
 8003608:	4b3d      	ldr	r3, [pc, #244]	@ (8003700 <run_maze_exploration_sequence+0x104>)
 800360a:	7b1b      	ldrb	r3, [r3, #12]
 800360c:	f083 0301 	eor.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <run_maze_exploration_sequence+0x28>
        send_bluetooth_message("Phase 1: Exploring to center...\r\n");
 8003616:	483b      	ldr	r0, [pc, #236]	@ (8003704 <run_maze_exploration_sequence+0x108>)
 8003618:	f7fd fd52 	bl	80010c0 <send_bluetooth_message>
        led_sequence_exploring();
 800361c:	f001 fcf4 	bl	8005008 <led_sequence_exploring>
        explore_maze();
 8003620:	f7ff ff1a 	bl	8003458 <explore_maze>
    }

    // Phase 2: Return to start
    if (robot.center_reached && !robot.returned_to_start) {
 8003624:	4b36      	ldr	r3, [pc, #216]	@ (8003700 <run_maze_exploration_sequence+0x104>)
 8003626:	7b1b      	ldrb	r3, [r3, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d011      	beq.n	8003650 <run_maze_exploration_sequence+0x54>
 800362c:	4b34      	ldr	r3, [pc, #208]	@ (8003700 <run_maze_exploration_sequence+0x104>)
 800362e:	7b5b      	ldrb	r3, [r3, #13]
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <run_maze_exploration_sequence+0x54>
        send_bluetooth_message("Phase 2: Returning to start...\r\n");
 800363a:	4833      	ldr	r0, [pc, #204]	@ (8003708 <run_maze_exploration_sequence+0x10c>)
 800363c:	f7fd fd40 	bl	80010c0 <send_bluetooth_message>
        led_sequence_returning();
 8003640:	f001 fcea 	bl	8005018 <led_sequence_returning>
        HAL_Delay(1000);
 8003644:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003648:	f002 fa8a 	bl	8005b60 <HAL_Delay>
        explore_maze();
 800364c:	f7ff ff04 	bl	8003458 <explore_maze>
    }

    // Phase 3: Report results
    if (robot.returned_to_start) {
 8003650:	4b2b      	ldr	r3, [pc, #172]	@ (8003700 <run_maze_exploration_sequence+0x104>)
 8003652:	7b5b      	ldrb	r3, [r3, #13]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d04d      	beq.n	80036f4 <run_maze_exploration_sequence+0xf8>
        send_bluetooth_message("\r\n" "🏆 EXPLORATION COMPLETE! 🏆" "\r\n");
 8003658:	482c      	ldr	r0, [pc, #176]	@ (800370c <run_maze_exploration_sequence+0x110>)
 800365a:	f7fd fd31 	bl	80010c0 <send_bluetooth_message>
        send_performance_metrics();
 800365e:	f7fd fe67 	bl	8001330 <send_performance_metrics>

        // Calculate exploration efficiency
        int total_cells = MAZE_SIZE * MAZE_SIZE;
 8003662:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003666:	60bb      	str	r3, [r7, #8]
        int visited_cells = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
        for (int x = 0; x < MAZE_SIZE; x++) {
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	e019      	b.n	80036a6 <run_maze_exploration_sequence+0xaa>
            for (int y = 0; y < MAZE_SIZE; y++) {
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e010      	b.n	800369a <run_maze_exploration_sequence+0x9e>
                if (maze[x][y].visited) visited_cells++;
 8003678:	4925      	ldr	r1, [pc, #148]	@ (8003710 <run_maze_exploration_sequence+0x114>)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	011a      	lsls	r2, r3, #4
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	440b      	add	r3, r1
 8003686:	3304      	adds	r3, #4
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <run_maze_exploration_sequence+0x98>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	3301      	adds	r3, #1
 8003692:	617b      	str	r3, [r7, #20]
            for (int y = 0; y < MAZE_SIZE; y++) {
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	ddeb      	ble.n	8003678 <run_maze_exploration_sequence+0x7c>
        for (int x = 0; x < MAZE_SIZE; x++) {
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	3301      	adds	r3, #1
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b0f      	cmp	r3, #15
 80036aa:	dde2      	ble.n	8003672 <run_maze_exploration_sequence+0x76>
            }
        }

        float exploration_percentage = (float)visited_cells / total_cells * 100.0f;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003714 <run_maze_exploration_sequence+0x118>
 80036c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036cc:	edc7 7a01 	vstr	s15, [r7, #4]
        send_bluetooth_printf("Exploration Coverage: %d/%d cells (%.1f%%)\r\n",
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7fc ff41 	bl	8000558 <__aeabi_f2d>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	e9cd 2300 	strd	r2, r3, [sp]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	6979      	ldr	r1, [r7, #20]
 80036e2:	480d      	ldr	r0, [pc, #52]	@ (8003718 <run_maze_exploration_sequence+0x11c>)
 80036e4:	f7fd fd02 	bl	80010ec <send_bluetooth_printf>
                             visited_cells, total_cells, exploration_percentage);

        // Ready for speed run (future implementation)
        send_bluetooth_message("🚀 Ready for speed run optimization! 🚀\r\n");
 80036e8:	480c      	ldr	r0, [pc, #48]	@ (800371c <run_maze_exploration_sequence+0x120>)
 80036ea:	f7fd fce9 	bl	80010c0 <send_bluetooth_message>

        exploration_completed = 1;
 80036ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003720 <run_maze_exploration_sequence+0x124>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
    }
}
 80036f4:	bf00      	nop
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	0800de44 	.word	0x0800de44
 8003700:	2000145c 	.word	0x2000145c
 8003704:	0800de6c 	.word	0x0800de6c
 8003708:	0800de90 	.word	0x0800de90
 800370c:	0800deb4 	.word	0x0800deb4
 8003710:	2000045c 	.word	0x2000045c
 8003714:	42c80000 	.word	0x42c80000
 8003718:	0800ded8 	.word	0x0800ded8
 800371c:	0800df08 	.word	0x0800df08
 8003720:	200014c4 	.word	0x200014c4

08003724 <is_exploration_complete>:

/**
 * @brief Check if exploration is complete
 */
bool is_exploration_complete(void) {
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
    return exploration_completed;
 8003728:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <is_exploration_complete+0x1c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	200014c4 	.word	0x200014c4

08003744 <get_exploration_efficiency>:

/**
 * @brief Get exploration efficiency
 */
float get_exploration_efficiency(void) {
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
    if (robot.exploration_steps == 0) return 0.0f;
 800374a:	4b21      	ldr	r3, [pc, #132]	@ (80037d0 <get_exploration_efficiency+0x8c>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <get_exploration_efficiency+0x14>
 8003752:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80037d4 <get_exploration_efficiency+0x90>
 8003756:	e034      	b.n	80037c2 <get_exploration_efficiency+0x7e>

    // Calculate theoretical minimum (Manhattan distance)
    int min_to_center = abs(maze_center_x1) + abs(maze_center_y1);
 8003758:	4b1f      	ldr	r3, [pc, #124]	@ (80037d8 <get_exploration_efficiency+0x94>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003760:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003764:	4b1d      	ldr	r3, [pc, #116]	@ (80037dc <get_exploration_efficiency+0x98>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	bfb8      	it	lt
 800376c:	425b      	neglt	r3, r3
 800376e:	4413      	add	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
    int min_to_start = abs(maze_center_x1 - 0) + abs(maze_center_y1 - 0);
 8003772:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <get_exploration_efficiency+0x94>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800377a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800377e:	4b17      	ldr	r3, [pc, #92]	@ (80037dc <get_exploration_efficiency+0x98>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	bfb8      	it	lt
 8003786:	425b      	neglt	r3, r3
 8003788:	4413      	add	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
    int theoretical_min = min_to_center + min_to_start;
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4413      	add	r3, r2
 8003792:	607b      	str	r3, [r7, #4]

    if (theoretical_min == 0) return 100.0f;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <get_exploration_efficiency+0x5c>
 800379a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80037e0 <get_exploration_efficiency+0x9c>
 800379e:	e010      	b.n	80037c2 <get_exploration_efficiency+0x7e>

    return ((float)theoretical_min / robot.exploration_steps) * 100.0f;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <get_exploration_efficiency+0x8c>)
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ba:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80037e0 <get_exploration_efficiency+0x9c>
 80037be:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80037c2:	eeb0 0a67 	vmov.f32	s0, s15
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	2000145c 	.word	0x2000145c
 80037d4:	00000000 	.word	0x00000000
 80037d8:	200014b4 	.word	0x200014b4
 80037dc:	200014b8 	.word	0x200014b8
 80037e0:	42c80000 	.word	0x42c80000

080037e4 <get_optimal_distance>:

/**
 * @brief Get optimal distance for current maze knowledge
 */
int get_optimal_distance(void) {
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
    // This would implement A* or similar for optimal path calculation
    // For now, return the flood fill distance to center
    return maze[0][0].distance;
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <get_optimal_distance+0x14>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	2000045c 	.word	0x2000045c

080037fc <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 8003802:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <update_encoder_totals+0x6c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 800380a:	4b18      	ldr	r3, [pc, #96]	@ (800386c <update_encoder_totals+0x70>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 8003812:	4b17      	ldr	r3, [pc, #92]	@ (8003870 <update_encoder_totals+0x74>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	b29b      	uxth	r3, r3
 800381c:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 800381e:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <update_encoder_totals+0x78>)
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	88ba      	ldrh	r2, [r7, #4]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	b29b      	uxth	r3, r3
 8003828:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    right_diff = -right_diff;  // Make left encoder positive for forward movement
 800382a:	883b      	ldrh	r3, [r7, #0]
 800382c:	425b      	negs	r3, r3
 800382e:	b29b      	uxth	r3, r3
 8003830:	803b      	strh	r3, [r7, #0]

    // Update totals
    left_total += left_diff;
 8003832:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <update_encoder_totals+0x7c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4413      	add	r3, r2
 800383c:	4a0e      	ldr	r2, [pc, #56]	@ (8003878 <update_encoder_totals+0x7c>)
 800383e:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 8003840:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003844:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <update_encoder_totals+0x80>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4413      	add	r3, r2
 800384a:	4a0c      	ldr	r2, [pc, #48]	@ (800387c <update_encoder_totals+0x80>)
 800384c:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 800384e:	4a08      	ldr	r2, [pc, #32]	@ (8003870 <update_encoder_totals+0x74>)
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 8003854:	4a07      	ldr	r2, [pc, #28]	@ (8003874 <update_encoder_totals+0x78>)
 8003856:	88bb      	ldrh	r3, [r7, #4]
 8003858:	8013      	strh	r3, [r2, #0]
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	2000033c 	.word	0x2000033c
 800386c:	200003cc 	.word	0x200003cc
 8003870:	20000004 	.word	0x20000004
 8003874:	20000006 	.word	0x20000006
 8003878:	20001d60 	.word	0x20001d60
 800387c:	20001d64 	.word	0x20001d64

08003880 <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8003884:	f7ff ffba 	bl	80037fc <update_encoder_totals>
    return left_total;
 8003888:	4b01      	ldr	r3, [pc, #4]	@ (8003890 <get_left_encoder_total+0x10>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20001d60 	.word	0x20001d60

08003894 <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8003898:	f7ff ffb0 	bl	80037fc <update_encoder_totals>
    return right_total;
 800389c:	4b01      	ldr	r3, [pc, #4]	@ (80038a4 <get_right_encoder_total+0x10>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20001d64 	.word	0x20001d64

080038a8 <reset_encoder_totals>:

/**
 * @brief Reset encoder totals - NEW FUNCTION
 */
void reset_encoder_totals(void) {
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
    left_total = 0;
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <reset_encoder_totals+0x34>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
    right_total = 0;
 80038b2:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <reset_encoder_totals+0x38>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
    last_left_count = __HAL_TIM_GET_COUNTER(&htim2);
 80038b8:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <reset_encoder_totals+0x3c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	b29a      	uxth	r2, r3
 80038c0:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <reset_encoder_totals+0x40>)
 80038c2:	801a      	strh	r2, [r3, #0]
    last_right_count = __HAL_TIM_GET_COUNTER(&htim4);
 80038c4:	4b09      	ldr	r3, [pc, #36]	@ (80038ec <reset_encoder_totals+0x44>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	4b08      	ldr	r3, [pc, #32]	@ (80038f0 <reset_encoder_totals+0x48>)
 80038ce:	801a      	strh	r2, [r3, #0]
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20001d60 	.word	0x20001d60
 80038e0:	20001d64 	.word	0x20001d64
 80038e4:	2000033c 	.word	0x2000033c
 80038e8:	20000004 	.word	0x20000004
 80038ec:	200003cc 	.word	0x200003cc
 80038f0:	20000006 	.word	0x20000006

080038f4 <start_encoders>:

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 80038f8:	213c      	movs	r1, #60	@ 0x3c
 80038fa:	4815      	ldr	r0, [pc, #84]	@ (8003950 <start_encoders+0x5c>)
 80038fc:	f004 fd46 	bl	800838c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 8003900:	213c      	movs	r1, #60	@ 0x3c
 8003902:	4814      	ldr	r0, [pc, #80]	@ (8003954 <start_encoders+0x60>)
 8003904:	f004 fd42 	bl	800838c <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 8003908:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <start_encoders+0x5c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003910:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <start_encoders+0x60>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800391a:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 800391c:	2001      	movs	r0, #1
 800391e:	f002 f91f 	bl	8005b60 <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 8003922:	4b0d      	ldr	r3, [pc, #52]	@ (8003958 <start_encoders+0x64>)
 8003924:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003928:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 800392a:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <start_encoders+0x68>)
 800392c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003930:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 8003932:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <start_encoders+0x6c>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8003938:	4b0a      	ldr	r3, [pc, #40]	@ (8003964 <start_encoders+0x70>)
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 800393e:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <start_encoders+0x74>)
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 8003944:	4b08      	ldr	r3, [pc, #32]	@ (8003968 <start_encoders+0x74>)
 8003946:	2200      	movs	r2, #0
 8003948:	60da      	str	r2, [r3, #12]
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200003cc 	.word	0x200003cc
 8003954:	2000033c 	.word	0x2000033c
 8003958:	20000004 	.word	0x20000004
 800395c:	20000006 	.word	0x20000006
 8003960:	20001d60 	.word	0x20001d60
 8003964:	20001d64 	.word	0x20001d64
 8003968:	20001494 	.word	0x20001494

0800396c <turn_left>:

static const int16_t S_CURVE_LUT[S_CURVE_LUT_LEN] = {
    700, 700, 700, 699, 698, 697, 695, 692, 689, 685, 680, 674, 667, 660, 652, 643, 633, 623, 612, 601, 589, 577, 564, 551, 538, 525, 512, 499, 486, 473, 461, 449, 438, 427, 417, 407, 398, 390, 383, 376, 370, 365, 361, 358, 355, 353, 352, 351, 350, 350, 350
};

void turn_left(void) {
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0

    // turn 90 degrees left using gyro PID, 1200 ms timeout for safety
	if (sensors.wall_front){
 8003970:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <turn_left+0x58>)
 8003972:	7a9b      	ldrb	r3, [r3, #10]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d006      	beq.n	8003986 <turn_left+0x1a>
		align_front_to_wall(600,4000);
 8003978:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800397c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003980:	f001 fc16 	bl	80051b0 <align_front_to_wall>
 8003984:	e005      	b.n	8003992 <turn_left+0x26>
	}else{

		move_forward_distance(957,957);
 8003986:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800398a:	f240 30bd 	movw	r0, #957	@ 0x3bd
 800398e:	f000 f8cf 	bl	8003b30 <move_forward_distance>

		//dwt_delay_us(100);
	}


    gyro_turn_reset();
 8003992:	f000 faff 	bl	8003f94 <gyro_turn_reset>
    turn_in_place_gyro(+90.0f, 520, 1200);
 8003996:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 800399a:	f44f 7002 	mov.w	r0, #520	@ 0x208
 800399e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80039c8 <turn_left+0x5c>
 80039a2:	f000 fbd3 	bl	800414c <turn_in_place_gyro>

    //move_forward_distance(1549,1537);//////////////
    robot.direction = (robot.direction + 3) % 4;
 80039a6:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <turn_left+0x60>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	3303      	adds	r3, #3
 80039ac:	425a      	negs	r2, r3
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	f002 0203 	and.w	r2, r2, #3
 80039b6:	bf58      	it	pl
 80039b8:	4253      	negpl	r3, r2
 80039ba:	4a04      	ldr	r2, [pc, #16]	@ (80039cc <turn_left+0x60>)
 80039bc:	6093      	str	r3, [r2, #8]

}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20001470 	.word	0x20001470
 80039c8:	42b40000 	.word	0x42b40000
 80039cc:	2000145c 	.word	0x2000145c

080039d0 <turn_right>:

void turn_right(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	if (sensors.wall_front){
 80039d4:	4b14      	ldr	r3, [pc, #80]	@ (8003a28 <turn_right+0x58>)
 80039d6:	7a9b      	ldrb	r3, [r3, #10]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <turn_right+0x1a>
		align_front_to_wall(600,3000);
 80039dc:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80039e0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80039e4:	f001 fbe4 	bl	80051b0 <align_front_to_wall>
 80039e8:	e005      	b.n	80039f6 <turn_right+0x26>
	}else{
		move_forward_distance(957,957);
 80039ea:	f240 31bd 	movw	r1, #957	@ 0x3bd
 80039ee:	f240 30bd 	movw	r0, #957	@ 0x3bd
 80039f2:	f000 f89d 	bl	8003b30 <move_forward_distance>
	}
	gyro_turn_reset();
 80039f6:	f000 facd 	bl	8003f94 <gyro_turn_reset>
    turn_in_place_gyro(-90.0f, 520, 1200);
 80039fa:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80039fe:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003a02:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003a2c <turn_right+0x5c>
 8003a06:	f000 fba1 	bl	800414c <turn_in_place_gyro>
    //move_forward_distance(1530,1562);
    robot.direction = (robot.direction + 1) % 4;
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <turn_right+0x60>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	425a      	negs	r2, r3
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	f002 0203 	and.w	r2, r2, #3
 8003a1a:	bf58      	it	pl
 8003a1c:	4253      	negpl	r3, r2
 8003a1e:	4a04      	ldr	r2, [pc, #16]	@ (8003a30 <turn_right+0x60>)
 8003a20:	6093      	str	r3, [r2, #8]
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20001470 	.word	0x20001470
 8003a2c:	c2b40000 	.word	0xc2b40000
 8003a30:	2000145c 	.word	0x2000145c

08003a34 <turn_around>:

/**
 * @brief Turn around 180 degrees
 */
void turn_around(void) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
	if (sensors.wall_front){
 8003a38:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab0 <turn_around+0x7c>)
 8003a3a:	7a9b      	ldrb	r3, [r3, #10]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <turn_around+0x1a>
		align_front_to_wall(600,3000);
 8003a40:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8003a44:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003a48:	f001 fbb2 	bl	80051b0 <align_front_to_wall>
 8003a4c:	e005      	b.n	8003a5a <turn_around+0x26>
	}else{
		move_forward_distance(957,957);
 8003a4e:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8003a52:	f240 30bd 	movw	r0, #957	@ 0x3bd
 8003a56:	f000 f86b 	bl	8003b30 <move_forward_distance>
	}
	turn_in_place_gyro(-90.0f, 520, 1200);
 8003a5a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003a5e:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003a62:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8003ab4 <turn_around+0x80>
 8003a66:	f000 fb71 	bl	800414c <turn_in_place_gyro>
	turn_in_place_gyro(-90.0f, 520, 1200);
 8003a6a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003a6e:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8003a72:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003ab4 <turn_around+0x80>
 8003a76:	f000 fb69 	bl	800414c <turn_in_place_gyro>

	//move_forward_distance(1330,1352);/////////////////

	robot.direction = (robot.direction + 1) % 4;
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab8 <turn_around+0x84>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	425a      	negs	r2, r3
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	f002 0203 	and.w	r2, r2, #3
 8003a8a:	bf58      	it	pl
 8003a8c:	4253      	negpl	r3, r2
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab8 <turn_around+0x84>)
 8003a90:	6093      	str	r3, [r2, #8]
	robot.direction = (robot.direction + 1) % 4;
 8003a92:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <turn_around+0x84>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	3301      	adds	r3, #1
 8003a98:	425a      	negs	r2, r3
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	f002 0203 	and.w	r2, r2, #3
 8003aa2:	bf58      	it	pl
 8003aa4:	4253      	negpl	r3, r2
 8003aa6:	4a04      	ldr	r2, [pc, #16]	@ (8003ab8 <turn_around+0x84>)
 8003aa8:	6093      	str	r3, [r2, #8]


}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20001470 	.word	0x20001470
 8003ab4:	c2b40000 	.word	0xc2b40000
 8003ab8:	2000145c 	.word	0x2000145c

08003abc <stop_motors>:

/**
 * @brief Stop both motors
 */
void stop_motors(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // Left motor PWM = 0
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <stop_motors+0x30>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // Left motor direction = 0
 8003ac8:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <stop_motors+0x30>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);  // Right motor PWM = 0
 8003ad0:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <stop_motors+0x30>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);  // Right motor direction = 0
 8003ad8:	4b04      	ldr	r3, [pc, #16]	@ (8003aec <stop_motors+0x30>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000384 	.word	0x20000384

08003af0 <break_motors>:
void break_motors(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
    // Apply active braking by setting both inputs HIGH for each motor
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);  // Left IN1 = HIGH
 8003af4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b2c <break_motors+0x3c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003afc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);  // Left IN2 = HIGH
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <break_motors+0x3c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b06:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);  // Right IN3 = HIGH
 8003b08:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <break_motors+0x3c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b10:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);  // Right IN4 = HIGH
 8003b12:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <break_motors+0x3c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40

    HAL_Delay(20);  // Hold brake briefly
 8003b1c:	2014      	movs	r0, #20
 8003b1e:	f002 f81f 	bl	8005b60 <HAL_Delay>
    stop_motors();   // Then coast
 8003b22:	f7ff ffcb 	bl	8003abc <stop_motors>
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000384 	.word	0x20000384

08003b30 <move_forward_distance>:


/**
 * @brief Move forward a specific distance - FIXED VERSION
 */
void move_forward_distance(int Left_target_counts,int Right_target_counts) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]

    // FIXED: Use safe encoder reading
	reset_encoder_totals();
 8003b3a:	f7ff feb5 	bl	80038a8 <reset_encoder_totals>
    int32_t start_left = get_left_encoder_total();
 8003b3e:	f7ff fe9f 	bl	8003880 <get_left_encoder_total>
 8003b42:	61f8      	str	r0, [r7, #28]
    int32_t start_right = get_right_encoder_total();
 8003b44:	f7ff fea6 	bl	8003894 <get_right_encoder_total>
 8003b48:	61b8      	str	r0, [r7, #24]
    moveStraightGyroPID_Reset();
 8003b4a:	f000 f8ef 	bl	8003d2c <moveStraightGyroPID_Reset>


    while (1) {
    	mpu9250_read_gyro();
 8003b4e:	f7fd fe37 	bl	80017c0 <mpu9250_read_gyro>
    	moveStraightGyroPID();
 8003b52:	f000 f90f 	bl	8003d74 <moveStraightGyroPID>


        int32_t current_left = get_left_encoder_total();
 8003b56:	f7ff fe93 	bl	8003880 <get_left_encoder_total>
 8003b5a:	6178      	str	r0, [r7, #20]
        int32_t current_right = get_right_encoder_total();
 8003b5c:	f7ff fe9a 	bl	8003894 <get_right_encoder_total>
 8003b60:	6138      	str	r0, [r7, #16]
        int32_t left_traveled =  start_left-current_left;
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	60fb      	str	r3, [r7, #12]
        int32_t right_traveled = start_right-current_right;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	60bb      	str	r3, [r7, #8]
        //int32_t avg_traveled = (left_traveled + right_traveled) / 2;

        //send_bluetooth_printf("L:%ld R:%ld\r\n",current_left,current_right);

        if (left_traveled>=Left_target_counts || right_traveled>=Right_target_counts) {
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	da07      	bge.n	8003b8a <move_forward_distance+0x5a>
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	da03      	bge.n	8003b8a <move_forward_distance+0x5a>
            break;
        }
        HAL_Delay(1);
 8003b82:	2001      	movs	r0, #1
 8003b84:	f001 ffec 	bl	8005b60 <HAL_Delay>
    while (1) {
 8003b88:	e7e1      	b.n	8003b4e <move_forward_distance+0x1e>
    }

    break_motors();		// use a S-curve to apply break/////////////////////
 8003b8a:	f7ff ffb1 	bl	8003af0 <break_motors>
}
 8003b8e:	bf00      	nop
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <move_forward_WF_distance>:

/**
 * @brief Move forward a specific distance - FIXED VERSION
 */
void move_forward_WF_distance(int Left_target_counts,int Right_target_counts) {
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b08a      	sub	sp, #40	@ 0x28
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]

    // FIXED: Use safe encoder reading
	reset_encoder_totals();
 8003ba0:	f7ff fe82 	bl	80038a8 <reset_encoder_totals>
    int32_t start_left = get_left_encoder_total();
 8003ba4:	f7ff fe6c 	bl	8003880 <get_left_encoder_total>
 8003ba8:	6278      	str	r0, [r7, #36]	@ 0x24
    int32_t start_right = get_right_encoder_total();
 8003baa:	f7ff fe73 	bl	8003894 <get_right_encoder_total>
 8003bae:	6238      	str	r0, [r7, #32]
    // 0 = auto (both → center; else follow visible side), 1 = left, 2 = right
    int mode = 0;               // WF_AUTO
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
    int base_pwm = 600;         // UPDATEDDDDDDDDDDDDDDDDDD
 8003bb4:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8003bb8:	61bb      	str	r3, [r7, #24]

    // bootstrap targets & reset integrators
    wall_follow_reset_int(mode, base_pwm);
 8003bba:	69b9      	ldr	r1, [r7, #24]
 8003bbc:	69f8      	ldr	r0, [r7, #28]
 8003bbe:	f001 fd77 	bl	80056b0 <wall_follow_reset_int>

    while (1) {
    	wall_follow_step();     // computes e, PID, sets motor PWMs
 8003bc2:	f001 fdad 	bl	8005720 <wall_follow_step>
		//HAL_Delay(200);           // keep a steady loop
		dwt_delay_us(50);
 8003bc6:	2032      	movs	r0, #50	@ 0x32
 8003bc8:	f7fe fdb8 	bl	800273c <dwt_delay_us>


        int32_t current_left = get_left_encoder_total();
 8003bcc:	f7ff fe58 	bl	8003880 <get_left_encoder_total>
 8003bd0:	6178      	str	r0, [r7, #20]
        int32_t current_right = get_right_encoder_total();
 8003bd2:	f7ff fe5f 	bl	8003894 <get_right_encoder_total>
 8003bd6:	6138      	str	r0, [r7, #16]
        int32_t left_traveled =  start_left-current_left;
 8003bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	60fb      	str	r3, [r7, #12]
        int32_t right_traveled = start_right-current_right;
 8003be0:	6a3a      	ldr	r2, [r7, #32]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	60bb      	str	r3, [r7, #8]
        //int32_t avg_traveled = (left_traveled + right_traveled) / 2;

        //send_bluetooth_printf("L:%ld R:%ld\r\n",current_left,current_right);

        if (left_traveled>=Left_target_counts || right_traveled>=Right_target_counts) {
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	da07      	bge.n	8003c00 <move_forward_WF_distance+0x6a>
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	da03      	bge.n	8003c00 <move_forward_WF_distance+0x6a>
            break;
        }
        HAL_Delay(1);
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f001 ffb1 	bl	8005b60 <HAL_Delay>
    while (1) {
 8003bfe:	e7e0      	b.n	8003bc2 <move_forward_WF_distance+0x2c>
    }

    break_motors();		// use a S-curve to apply break/////////////////////
 8003c00:	f7ff ff76 	bl	8003af0 <break_motors>
}
 8003c04:	bf00      	nop
 8003c06:	3728      	adds	r7, #40	@ 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <motor_set>:



// helper to set speed (0–1000 = 0–100%)
// Fixed motor_set function for DRV8833
void motor_set(uint8_t motor, bool forward, uint16_t duty) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
 8003c16:	460b      	mov	r3, r1
 8003c18:	71bb      	strb	r3, [r7, #6]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80bb      	strh	r3, [r7, #4]
    if (motor == 0) { // Left motor
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d115      	bne.n	8003c50 <motor_set+0x44>
        if (forward) {
 8003c24:	79bb      	ldrb	r3, [r7, #6]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <motor_set+0x30>
			// Left reverse: IN1=LOW, IN2=PWM
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty); // PA6 = PWM
 8003c2a:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <motor_set+0x7c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	88ba      	ldrh	r2, [r7, #4]
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // PA7 = LOW
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <motor_set+0x7c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	639a      	str	r2, [r3, #56]	@ 0x38
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM

        }
    }
}
 8003c3a:	e020      	b.n	8003c7e <motor_set+0x72>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty); // PA7 = PWM
 8003c3c:	4b12      	ldr	r3, [pc, #72]	@ (8003c88 <motor_set+0x7c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	88ba      	ldrh	r2, [r7, #4]
 8003c42:	639a      	str	r2, [r3, #56]	@ 0x38
        	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET); // PA6 = LOW
 8003c44:	2200      	movs	r2, #0
 8003c46:	2140      	movs	r1, #64	@ 0x40
 8003c48:	4810      	ldr	r0, [pc, #64]	@ (8003c8c <motor_set+0x80>)
 8003c4a:	f002 fec7 	bl	80069dc <HAL_GPIO_WritePin>
}
 8003c4e:	e016      	b.n	8003c7e <motor_set+0x72>
    	bool actual_forward = forward;  // invert direction
 8003c50:	79bb      	ldrb	r3, [r7, #6]
 8003c52:	73fb      	strb	r3, [r7, #15]
        if (actual_forward) {
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <motor_set+0x62>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty); // PB1 = PWM
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <motor_set+0x7c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	88ba      	ldrh	r2, [r7, #4]
 8003c60:	641a      	str	r2, [r3, #64]	@ 0x40
        	HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_RESET); // PB0 = LOW
 8003c62:	2200      	movs	r2, #0
 8003c64:	2101      	movs	r1, #1
 8003c66:	480a      	ldr	r0, [pc, #40]	@ (8003c90 <motor_set+0x84>)
 8003c68:	f002 feb8 	bl	80069dc <HAL_GPIO_WritePin>
}
 8003c6c:	e007      	b.n	8003c7e <motor_set+0x72>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
 8003c6e:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <motor_set+0x7c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM
 8003c76:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <motor_set+0x7c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	88ba      	ldrh	r2, [r7, #4]
 8003c7c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000384 	.word	0x20000384
 8003c8c:	40020000 	.word	0x40020000
 8003c90:	40020400 	.word	0x40020400

08003c94 <send_encoder_status>:


/**
 * @brief Get encoder status for debugging - NEW FUNCTION
 */
void send_encoder_status(void) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af02      	add	r7, sp, #8
    update_encoder_totals();
 8003c9a:	f7ff fdaf 	bl	80037fc <update_encoder_totals>
    send_bluetooth_printf("Encoders - Left:%ld Right:%ld Raw_L:%d Raw_R:%d\r\n",
 8003c9e:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <send_encoder_status+0x30>)
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	4b09      	ldr	r3, [pc, #36]	@ (8003cc8 <send_encoder_status+0x34>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
                         left_total, right_total,
                         __HAL_TIM_GET_COUNTER(&htim2), __HAL_TIM_GET_COUNTER(&htim4));
 8003ca6:	4b09      	ldr	r3, [pc, #36]	@ (8003ccc <send_encoder_status+0x38>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003cac:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <send_encoder_status+0x3c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    send_bluetooth_printf("Encoders - Left:%ld Right:%ld Raw_L:%d Raw_R:%d\r\n",
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4807      	ldr	r0, [pc, #28]	@ (8003cd4 <send_encoder_status+0x40>)
 8003cb8:	f7fd fa18 	bl	80010ec <send_bluetooth_printf>
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20001d60 	.word	0x20001d60
 8003cc8:	20001d64 	.word	0x20001d64
 8003ccc:	2000033c 	.word	0x2000033c
 8003cd0:	200003cc 	.word	0x200003cc
 8003cd4:	0800dfdc 	.word	0x0800dfdc

08003cd8 <clampf_local>:
static const int PWM_MIN = 0;
static const int PWM_MAX = 1000;
static const int PWM_MIN_MOVE = 40;                // optional min to overcome stiction

/* Helper clamp */
static inline float clampf_local(float v, float lo, float hi) {
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ce2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ce6:	ed87 1a01 	vstr	s2, [r7, #4]
    return (v < lo) ? lo : (v > hi) ? hi : v;
 8003cea:	ed97 7a03 	vldr	s14, [r7, #12]
 8003cee:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfa:	d501      	bpl.n	8003d00 <clampf_local+0x28>
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	e00b      	b.n	8003d18 <clampf_local+0x40>
 8003d00:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d10:	dd01      	ble.n	8003d16 <clampf_local+0x3e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	e000      	b.n	8003d18 <clampf_local+0x40>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	ee07 3a90 	vmov	s15, r3
}
 8003d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <moveStraightGyroPID_Reset>:
    if (v < lo) return lo;
    if (v > hi) return hi;
    return v;
}

void moveStraightGyroPID_Reset(void) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
    pid_error_prev = 0.0f;
 8003d30:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <moveStraightGyroPID_Reset+0x34>)
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
    pid_integral = 0.0f;
 8003d38:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <moveStraightGyroPID_Reset+0x38>)
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
    pid_deriv_filt = 0.0f;
 8003d40:	4b09      	ldr	r3, [pc, #36]	@ (8003d68 <moveStraightGyroPID_Reset+0x3c>)
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
    learn_cooldown = 0.0f;
 8003d48:	4b08      	ldr	r3, [pc, #32]	@ (8003d6c <moveStraightGyroPID_Reset+0x40>)
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
    pid_last_ms = HAL_GetTick();
 8003d50:	f001 fefa 	bl	8005b48 <HAL_GetTick>
 8003d54:	4603      	mov	r3, r0
 8003d56:	4a06      	ldr	r2, [pc, #24]	@ (8003d70 <moveStraightGyroPID_Reset+0x44>)
 8003d58:	6013      	str	r3, [r2, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20001d6c 	.word	0x20001d6c
 8003d64:	20001d70 	.word	0x20001d70
 8003d68:	20001d74 	.word	0x20001d74
 8003d6c:	20001d78 	.word	0x20001d78
 8003d70:	20001d68 	.word	0x20001d68

08003d74 <moveStraightGyroPID>:




void moveStraightGyroPID(void) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8003d7a:	f001 fee5 	bl	8005b48 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]
    float dt = (now - pid_last_ms) / 1000.0f;
 8003d80:	4b6c      	ldr	r3, [pc, #432]	@ (8003f34 <moveStraightGyroPID+0x1c0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	ee07 3a90 	vmov	s15, r3
 8003d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d90:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8003f38 <moveStraightGyroPID+0x1c4>
 8003d94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d98:	edc7 7a07 	vstr	s15, [r7, #28]
    if (dt <= 0.0f) dt = 0.001f; // safety small dt if HAL tick didn't advance
 8003d9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003da0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da8:	d801      	bhi.n	8003dae <moveStraightGyroPID+0x3a>
 8003daa:	4b64      	ldr	r3, [pc, #400]	@ (8003f3c <moveStraightGyroPID+0x1c8>)
 8003dac:	61fb      	str	r3, [r7, #28]
    pid_last_ms = now;
 8003dae:	4a61      	ldr	r2, [pc, #388]	@ (8003f34 <moveStraightGyroPID+0x1c0>)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6013      	str	r3, [r2, #0]

    /* READ: your gyro rate (deg/s). Keep original sign convention:
       original code used error_g = mpu9250_get_gyro_z_compensated();
       and motor1 = base - correction; motor2 = base + correction;
       so we preserve that mapping for compatibility. */
    float error = mpu9250_get_gyro_z_compensated();
 8003db4:	f7fd fcca 	bl	800174c <mpu9250_get_gyro_z_compensated>
 8003db8:	ed87 0a03 	vstr	s0, [r7, #12]

    /* Integral (with dt) + anti-windup clamp */
    pid_integral += error * dt;
 8003dbc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003dc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dc8:	4b5d      	ldr	r3, [pc, #372]	@ (8003f40 <moveStraightGyroPID+0x1cc>)
 8003dca:	edd3 7a00 	vldr	s15, [r3]
 8003dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f40 <moveStraightGyroPID+0x1cc>)
 8003dd4:	edc3 7a00 	vstr	s15, [r3]
    pid_integral = clampf_local(pid_integral, -INTEGRAL_LIMIT, INTEGRAL_LIMIT);
 8003dd8:	4b59      	ldr	r3, [pc, #356]	@ (8003f40 <moveStraightGyroPID+0x1cc>)
 8003dda:	edd3 7a00 	vldr	s15, [r3]
 8003dde:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003de2:	eeb1 7a47 	vneg.f32	s14, s14
 8003de6:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003dea:	eeb0 1a66 	vmov.f32	s2, s13
 8003dee:	eef0 0a47 	vmov.f32	s1, s14
 8003df2:	eeb0 0a67 	vmov.f32	s0, s15
 8003df6:	f7ff ff6f 	bl	8003cd8 <clampf_local>
 8003dfa:	eef0 7a40 	vmov.f32	s15, s0
 8003dfe:	4b50      	ldr	r3, [pc, #320]	@ (8003f40 <moveStraightGyroPID+0x1cc>)
 8003e00:	edc3 7a00 	vstr	s15, [r3]

    /* Derivative (on error) and low-pass filter */
    float deriv_raw = (error - pid_error_prev) / dt;    // d(error)/dt
 8003e04:	4b4f      	ldr	r3, [pc, #316]	@ (8003f44 <moveStraightGyroPID+0x1d0>)
 8003e06:	edd3 7a00 	vldr	s15, [r3]
 8003e0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e0e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e12:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1a:	edc7 7a02 	vstr	s15, [r7, #8]
    pid_deriv_filt = DERIV_FILTER_ALPHA * pid_deriv_filt + (1.0f - DERIV_FILTER_ALPHA) * deriv_raw;
 8003e1e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8003f48 <moveStraightGyroPID+0x1d4>
 8003e22:	4b4a      	ldr	r3, [pc, #296]	@ (8003f4c <moveStraightGyroPID+0x1d8>)
 8003e24:	edd3 7a00 	vldr	s15, [r3]
 8003e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e2c:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8003f48 <moveStraightGyroPID+0x1d4>
 8003e30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e34:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e38:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e44:	4b41      	ldr	r3, [pc, #260]	@ (8003f4c <moveStraightGyroPID+0x1d8>)
 8003e46:	edc3 7a00 	vstr	s15, [r3]

    /* PID output (correction) */
    float correction = (Kp_g * error) + (Ki_g * pid_integral) + (Kd_g * pid_deriv_filt);
 8003e4a:	4b41      	ldr	r3, [pc, #260]	@ (8003f50 <moveStraightGyroPID+0x1dc>)
 8003e4c:	ed93 7a00 	vldr	s14, [r3]
 8003e50:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e58:	4b3e      	ldr	r3, [pc, #248]	@ (8003f54 <moveStraightGyroPID+0x1e0>)
 8003e5a:	edd3 6a00 	vldr	s13, [r3]
 8003e5e:	4b38      	ldr	r3, [pc, #224]	@ (8003f40 <moveStraightGyroPID+0x1cc>)
 8003e60:	edd3 7a00 	vldr	s15, [r3]
 8003e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f58 <moveStraightGyroPID+0x1e4>)
 8003e6e:	edd3 6a00 	vldr	s13, [r3]
 8003e72:	4b36      	ldr	r3, [pc, #216]	@ (8003f4c <moveStraightGyroPID+0x1d8>)
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e80:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Base PWM for forward motion (adjust to your nominal cruising PWM) */
    const int base_pwm = 570;
 8003e84:	f240 233a 	movw	r3, #570	@ 0x23a
 8003e88:	603b      	str	r3, [r7, #0]

    int motor1Speed = (int)roundf((float)base_pwm - correction); // right wheel in your mapping
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea0:	f009 f88a 	bl	800cfb8 <roundf>
 8003ea4:	eef0 7a40 	vmov.f32	s15, s0
 8003ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eac:	ee17 3a90 	vmov	r3, s15
 8003eb0:	61bb      	str	r3, [r7, #24]
    int motor2Speed = (int)roundf((float)base_pwm + correction); // left wheel
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec8:	f009 f876 	bl	800cfb8 <roundf>
 8003ecc:	eef0 7a40 	vmov.f32	s15, s0
 8003ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed4:	ee17 3a90 	vmov	r3, s15
 8003ed8:	617b      	str	r3, [r7, #20]

    /* Clamp PWM outputs (and provide a safe top, not full 1000 if you prefer) */
    if (motor1Speed > 1200) motor1Speed = 1200;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8003ee0:	dd02      	ble.n	8003ee8 <moveStraightGyroPID+0x174>
 8003ee2:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8003ee6:	61bb      	str	r3, [r7, #24]
    if (motor2Speed > 1200) motor2Speed = 1200;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8003eee:	dd02      	ble.n	8003ef6 <moveStraightGyroPID+0x182>
 8003ef0:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8003ef4:	617b      	str	r3, [r7, #20]
    if (motor1Speed < 0) motor1Speed = 0;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da01      	bge.n	8003f00 <moveStraightGyroPID+0x18c>
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
    if (motor2Speed < 0) motor2Speed = 0;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da01      	bge.n	8003f0a <moveStraightGyroPID+0x196>
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]



    /* Set motors: adjust direction flags if your wiring uses opposite logic */
    motor_set(0, true, motor2Speed); // Left
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2101      	movs	r1, #1
 8003f12:	2000      	movs	r0, #0
 8003f14:	f7ff fe7a 	bl	8003c0c <motor_set>
    motor_set(1, true, motor1Speed); // Right
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2101      	movs	r1, #1
 8003f20:	2001      	movs	r0, #1
 8003f22:	f7ff fe73 	bl	8003c0c <motor_set>

    /* store previous error for next derivative computation */
    pid_error_prev = error;
 8003f26:	4a07      	ldr	r2, [pc, #28]	@ (8003f44 <moveStraightGyroPID+0x1d0>)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6013      	str	r3, [r2, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20001d68 	.word	0x20001d68
 8003f38:	447a0000 	.word	0x447a0000
 8003f3c:	3a83126f 	.word	0x3a83126f
 8003f40:	20001d70 	.word	0x20001d70
 8003f44:	20001d6c 	.word	0x20001d6c
 8003f48:	3f6fd007 	.word	0x3f6fd007
 8003f4c:	20001d74 	.word	0x20001d74
 8003f50:	20000008 	.word	0x20000008
 8003f54:	2000000c 	.word	0x2000000c
 8003f58:	20000010 	.word	0x20000010

08003f5c <signf>:
static const float INTEGRAL_CLAMP = 10.0f;

// --- PID state ---
static float pid_int = 0.0f, pid_prev_err = 0.0f, pid_deriv_f = 0.0f;

static inline float signf(float x) { return (x >= 0.0f) ? 1.0f : -1.0f; }
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f72:	db02      	blt.n	8003f7a <signf+0x1e>
 8003f74:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003f78:	e000      	b.n	8003f7c <signf+0x20>
 8003f7a:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <signf+0x34>)
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eeb0 0a67 	vmov.f32	s0, s15
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	bf800000 	.word	0xbf800000

08003f94 <gyro_turn_reset>:

void gyro_turn_reset(void) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
    pid_int = 0.0f;
 8003f98:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <gyro_turn_reset+0x2c>)
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
    pid_prev_err = 0.0f;
 8003fa0:	4b08      	ldr	r3, [pc, #32]	@ (8003fc4 <gyro_turn_reset+0x30>)
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
    pid_deriv_f = 0.0f;
 8003fa8:	4b07      	ldr	r3, [pc, #28]	@ (8003fc8 <gyro_turn_reset+0x34>)
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
    pid_last_ms = HAL_GetTick();
 8003fb0:	f001 fdca 	bl	8005b48 <HAL_GetTick>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4a05      	ldr	r2, [pc, #20]	@ (8003fcc <gyro_turn_reset+0x38>)
 8003fb8:	6013      	str	r3, [r2, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20001d7c 	.word	0x20001d7c
 8003fc4:	20001d80 	.word	0x20001d80
 8003fc8:	20001d84 	.word	0x20001d84
 8003fcc:	20001d68 	.word	0x20001d68

08003fd0 <gyro_rate_pid_step>:

static float gyro_rate_pid_step(float sp_dps, float meas_dps, float *p_dt) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003fda:	edc7 0a02 	vstr	s1, [r7, #8]
 8003fde:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8003fe0:	f001 fdb2 	bl	8005b48 <HAL_GetTick>
 8003fe4:	61b8      	str	r0, [r7, #24]
    float dt = (now - pid_last_ms) / 1000.0f;
 8003fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8004120 <gyro_rate_pid_step+0x150>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ff6:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8004124 <gyro_rate_pid_step+0x154>
 8003ffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ffe:	edc7 7a07 	vstr	s15, [r7, #28]
    if (dt <= 0.0f) dt = 0.002f;
 8004002:	edd7 7a07 	vldr	s15, [r7, #28]
 8004006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	d801      	bhi.n	8004014 <gyro_rate_pid_step+0x44>
 8004010:	4b45      	ldr	r3, [pc, #276]	@ (8004128 <gyro_rate_pid_step+0x158>)
 8004012:	61fb      	str	r3, [r7, #28]
    pid_last_ms = now;
 8004014:	4a42      	ldr	r2, [pc, #264]	@ (8004120 <gyro_rate_pid_step+0x150>)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	6013      	str	r3, [r2, #0]
    if (p_dt) *p_dt = dt;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <gyro_rate_pid_step+0x56>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	601a      	str	r2, [r3, #0]

    float err = sp_dps - meas_dps;
 8004026:	ed97 7a03 	vldr	s14, [r7, #12]
 800402a:	edd7 7a02 	vldr	s15, [r7, #8]
 800402e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004032:	edc7 7a05 	vstr	s15, [r7, #20]

    // integral (anti-windup)
    pid_int += err * dt;
 8004036:	ed97 7a05 	vldr	s14, [r7, #20]
 800403a:	edd7 7a07 	vldr	s15, [r7, #28]
 800403e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004042:	4b3a      	ldr	r3, [pc, #232]	@ (800412c <gyro_rate_pid_step+0x15c>)
 8004044:	edd3 7a00 	vldr	s15, [r3]
 8004048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800404c:	4b37      	ldr	r3, [pc, #220]	@ (800412c <gyro_rate_pid_step+0x15c>)
 800404e:	edc3 7a00 	vstr	s15, [r3]
    if (pid_int >  INTEGRAL_CLAMP) pid_int =  INTEGRAL_CLAMP;
 8004052:	4b36      	ldr	r3, [pc, #216]	@ (800412c <gyro_rate_pid_step+0x15c>)
 8004054:	edd3 7a00 	vldr	s15, [r3]
 8004058:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800405c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004064:	dd02      	ble.n	800406c <gyro_rate_pid_step+0x9c>
 8004066:	4a32      	ldr	r2, [pc, #200]	@ (8004130 <gyro_rate_pid_step+0x160>)
 8004068:	4b30      	ldr	r3, [pc, #192]	@ (800412c <gyro_rate_pid_step+0x15c>)
 800406a:	601a      	str	r2, [r3, #0]
    if (pid_int < -INTEGRAL_CLAMP) pid_int = -INTEGRAL_CLAMP;
 800406c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004070:	eeb1 7a67 	vneg.f32	s14, s15
 8004074:	4b2d      	ldr	r3, [pc, #180]	@ (800412c <gyro_rate_pid_step+0x15c>)
 8004076:	edd3 7a00 	vldr	s15, [r3]
 800407a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800407e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004082:	dd06      	ble.n	8004092 <gyro_rate_pid_step+0xc2>
 8004084:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004088:	eef1 7a67 	vneg.f32	s15, s15
 800408c:	4b27      	ldr	r3, [pc, #156]	@ (800412c <gyro_rate_pid_step+0x15c>)
 800408e:	edc3 7a00 	vstr	s15, [r3]

    // derivative (filtered)
    float d_raw = (err - pid_prev_err) / dt;
 8004092:	4b28      	ldr	r3, [pc, #160]	@ (8004134 <gyro_rate_pid_step+0x164>)
 8004094:	edd3 7a00 	vldr	s15, [r3]
 8004098:	ed97 7a05 	vldr	s14, [r7, #20]
 800409c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80040a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80040a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a8:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_deriv_f = DERIV_ALPHA * pid_deriv_f + (1.0f - DERIV_ALPHA) * d_raw;
 80040ac:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004138 <gyro_rate_pid_step+0x168>
 80040b0:	4b22      	ldr	r3, [pc, #136]	@ (800413c <gyro_rate_pid_step+0x16c>)
 80040b2:	edd3 7a00 	vldr	s15, [r3]
 80040b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ba:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8004138 <gyro_rate_pid_step+0x168>
 80040be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80040ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d2:	4b1a      	ldr	r3, [pc, #104]	@ (800413c <gyro_rate_pid_step+0x16c>)
 80040d4:	edc3 7a00 	vstr	s15, [r3]
    pid_prev_err = err;
 80040d8:	4a16      	ldr	r2, [pc, #88]	@ (8004134 <gyro_rate_pid_step+0x164>)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	6013      	str	r3, [r2, #0]

    // PID → ΔPWM (right - left)
    return Kp_g*err + Ki_g*pid_int + Kd_g*pid_deriv_f;
 80040de:	4b18      	ldr	r3, [pc, #96]	@ (8004140 <gyro_rate_pid_step+0x170>)
 80040e0:	ed93 7a00 	vldr	s14, [r3]
 80040e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80040e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ec:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <gyro_rate_pid_step+0x174>)
 80040ee:	edd3 6a00 	vldr	s13, [r3]
 80040f2:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <gyro_rate_pid_step+0x15c>)
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004100:	4b11      	ldr	r3, [pc, #68]	@ (8004148 <gyro_rate_pid_step+0x178>)
 8004102:	edd3 6a00 	vldr	s13, [r3]
 8004106:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <gyro_rate_pid_step+0x16c>)
 8004108:	edd3 7a00 	vldr	s15, [r3]
 800410c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004110:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004114:	eeb0 0a67 	vmov.f32	s0, s15
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20001d68 	.word	0x20001d68
 8004124:	447a0000 	.word	0x447a0000
 8004128:	3b03126f 	.word	0x3b03126f
 800412c:	20001d7c 	.word	0x20001d7c
 8004130:	41200000 	.word	0x41200000
 8004134:	20001d80 	.word	0x20001d80
 8004138:	3f666666 	.word	0x3f666666
 800413c:	20001d84 	.word	0x20001d84
 8004140:	20000008 	.word	0x20000008
 8004144:	2000000c 	.word	0x2000000c
 8004148:	20000010 	.word	0x20000010

0800414c <turn_in_place_gyro>:
/**
 * In-place turn by angle (deg). +angle = CCW/left, -angle = CW/right.
 * base_pwm = 80..250 is typical. timeout_ms is safety.
 */
void turn_in_place_gyro(float angle_deg, int base_pwm, uint32_t timeout_ms)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	ed2d 8b02 	vpush	{d8}
 8004152:	b098      	sub	sp, #96	@ 0x60
 8004154:	af00      	add	r7, sp, #0
 8004156:	ed87 0a03 	vstr	s0, [r7, #12]
 800415a:	60b8      	str	r0, [r7, #8]
 800415c:	6079      	str	r1, [r7, #4]
    if (base_pwm < 60)  base_pwm = 60;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b3b      	cmp	r3, #59	@ 0x3b
 8004162:	dc01      	bgt.n	8004168 <turn_in_place_gyro+0x1c>
 8004164:	233c      	movs	r3, #60	@ 0x3c
 8004166:	60bb      	str	r3, [r7, #8]
    if (base_pwm > 400) base_pwm = 400;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800416e:	dd02      	ble.n	8004176 <turn_in_place_gyro+0x2a>
 8004170:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004174:	60bb      	str	r3, [r7, #8]

    gyro_turn_reset();
 8004176:	f7ff ff0d 	bl	8003f94 <gyro_turn_reset>

    float yaw = 0.0f;                  // integrated heading (deg)
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float target = angle_deg;    // signed target
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t t0 = HAL_GetTick();
 8004184:	f001 fce0 	bl	8005b48 <HAL_GetTick>
 8004188:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t settle_start = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	65bb      	str	r3, [r7, #88]	@ 0x58

    // last timestamp for yaw integration
    uint32_t last_ms = HAL_GetTick();
 800418e:	f001 fcdb 	bl	8005b48 <HAL_GetTick>
 8004192:	6578      	str	r0, [r7, #84]	@ 0x54

    while (1) {
        // --- timing ---
        uint32_t now = HAL_GetTick();
 8004194:	f001 fcd8 	bl	8005b48 <HAL_GetTick>
 8004198:	6378      	str	r0, [r7, #52]	@ 0x34
        float dt = (now - last_ms) / 1000.0f;
 800419a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800419c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041a8:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8004448 <turn_in_place_gyro+0x2fc>
 80041ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041b0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        if (dt <= 0.0f) dt = 0.001f;
 80041b4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80041b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c0:	d801      	bhi.n	80041c6 <turn_in_place_gyro+0x7a>
 80041c2:	4ba2      	ldr	r3, [pc, #648]	@ (800444c <turn_in_place_gyro+0x300>)
 80041c4:	653b      	str	r3, [r7, #80]	@ 0x50
        last_ms = now;
 80041c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c8:	657b      	str	r3, [r7, #84]	@ 0x54
        mpu9250_read_gyro();
 80041ca:	f7fd faf9 	bl	80017c0 <mpu9250_read_gyro>
        // --- sensors ---
        float gz = mpu9250_get_gyro_z_compensated();  // deg/s
 80041ce:	f7fd fabd 	bl	800174c <mpu9250_get_gyro_z_compensated>
 80041d2:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

        // --- integrate heading (keep sign!) ---
        yaw += gz * dt;
 80041d6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80041da:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80041de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80041e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ea:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

        // signed angle error (THIS FIXES THE MAIN BUG)
        float ang_err = target - yaw;
 80041ee:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80041f2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80041f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041fa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        // desired rate with braking law (changes sign if you overshoot)
        float omega_brake = sqrtf(fmaxf(0.0f, 2.0f * ALPHA_MAX_DPS2 * fabsf(ang_err)));
 80041fe:	4b94      	ldr	r3, [pc, #592]	@ (8004450 <turn_in_place_gyro+0x304>)
 8004200:	edd3 7a00 	vldr	s15, [r3]
 8004204:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004208:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800420c:	eef0 7ae7 	vabs.f32	s15, s15
 8004210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004214:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8004454 <turn_in_place_gyro+0x308>
 8004218:	eeb0 0a67 	vmov.f32	s0, s15
 800421c:	f008 fe62 	bl	800cee4 <fmaxf>
 8004220:	eef0 7a40 	vmov.f32	s15, s0
 8004224:	eeb0 0a67 	vmov.f32	s0, s15
 8004228:	f008 fe3e 	bl	800cea8 <sqrtf>
 800422c:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        float omega_des = clampf_local(omega_brake, 0.0f, OMEGA_MAX_DPS) * signf(ang_err);
 8004230:	4b89      	ldr	r3, [pc, #548]	@ (8004458 <turn_in_place_gyro+0x30c>)
 8004232:	edd3 7a00 	vldr	s15, [r3]
 8004236:	eeb0 1a67 	vmov.f32	s2, s15
 800423a:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8004454 <turn_in_place_gyro+0x308>
 800423e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8004242:	f7ff fd49 	bl	8003cd8 <clampf_local>
 8004246:	eeb0 8a40 	vmov.f32	s16, s0
 800424a:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800424e:	f7ff fe85 	bl	8003f5c <signf>
 8004252:	eef0 7a40 	vmov.f32	s15, s0
 8004256:	ee68 7a27 	vmul.f32	s15, s16, s15
 800425a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

        // small deadband on command (avoid micro twitch)
        if (fabsf(omega_des) < OMEGA_CMD_DEADBAND) omega_des = 0.0f;
 800425e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004262:	eeb0 7ae7 	vabs.f32	s14, s15
 8004266:	4b7d      	ldr	r3, [pc, #500]	@ (800445c <turn_in_place_gyro+0x310>)
 8004268:	edd3 7a00 	vldr	s15, [r3]
 800426c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004274:	d502      	bpl.n	800427c <turn_in_place_gyro+0x130>
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	64fb      	str	r3, [r7, #76]	@ 0x4c

        // --- inner rate loop ---
        float pid_dt = 0.0f;
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
        float dPWM_pid = gyro_rate_pid_step(omega_des, gz, &pid_dt);  // ΔPWM from PID
 8004282:	f107 0310 	add.w	r3, r7, #16
 8004286:	4618      	mov	r0, r3
 8004288:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 800428c:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8004290:	f7ff fe9e 	bl	8003fd0 <gyro_rate_pid_step>
 8004294:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        float dPWM_ff  = (fabsf(omega_des) > 0.0f) ? (omega_des / GYRO_K_DPS_PER_DPWM) : 0.0f;
 8004298:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800429c:	eef0 7ae7 	vabs.f32	s15, s15
 80042a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	dd06      	ble.n	80042b8 <turn_in_place_gyro+0x16c>
 80042aa:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80042ae:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8004460 <turn_in_place_gyro+0x314>
 80042b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042b6:	e001      	b.n	80042bc <turn_in_place_gyro+0x170>
 80042b8:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8004454 <turn_in_place_gyro+0x308>
 80042bc:	edc7 7a08 	vstr	s15, [r7, #32]
        float dPWM     = dPWM_ff + dPWM_pid;   // total ΔPWM (right - left), signed
 80042c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80042c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80042c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042cc:	edc7 7a07 	vstr	s15, [r7, #28]

        // split ΔPWM around base so both sides get torque
        float right_mag = (float)base_pwm + 0.5f * fabsf(dPWM);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042da:	edd7 7a07 	vldr	s15, [r7, #28]
 80042de:	eef0 7ae7 	vabs.f32	s15, s15
 80042e2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80042e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80042ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ee:	edc7 7a06 	vstr	s15, [r7, #24]
        float left_mag  = (float)base_pwm + 0.5f * fabsf(dPWM);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	ee07 3a90 	vmov	s15, r3
 80042f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004300:	eef0 7ae7 	vabs.f32	s15, s15
 8004304:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004308:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800430c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004310:	edc7 7a05 	vstr	s15, [r7, #20]

        // decide directions from CURRENT command sign (not the initial turn dir)
        bool left_forward, right_forward;
        if (dPWM >= 0.0f) {
 8004314:	edd7 7a07 	vldr	s15, [r7, #28]
 8004318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800431c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004320:	db06      	blt.n	8004330 <turn_in_place_gyro+0x1e4>
            // turn left: left backward, right forward
            left_forward  = false;
 8004322:	2300      	movs	r3, #0
 8004324:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            right_forward = true;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800432e:	e005      	b.n	800433c <turn_in_place_gyro+0x1f0>
        } else {
            // turn right: left forward, right backward
            left_forward  = true;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            right_forward = false;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        }

        // if command very small AND rate small, cut power to stop cleanly
        if (fabsf(ang_err) <= ANGLE_TOL_DEG && fabsf(gz) <= RATE_TOL_DPS) {
 800433c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004340:	eeb0 7ae7 	vabs.f32	s14, s15
 8004344:	4b47      	ldr	r3, [pc, #284]	@ (8004464 <turn_in_place_gyro+0x318>)
 8004346:	edd3 7a00 	vldr	s15, [r3]
 800434a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004352:	d822      	bhi.n	800439a <turn_in_place_gyro+0x24e>
 8004354:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004358:	eeb0 7ae7 	vabs.f32	s14, s15
 800435c:	4b42      	ldr	r3, [pc, #264]	@ (8004468 <turn_in_place_gyro+0x31c>)
 800435e:	edd3 7a00 	vldr	s15, [r3]
 8004362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436a:	d816      	bhi.n	800439a <turn_in_place_gyro+0x24e>
            motor_set(0, true, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	2101      	movs	r1, #1
 8004370:	2000      	movs	r0, #0
 8004372:	f7ff fc4b 	bl	8003c0c <motor_set>
            motor_set(1, true, 0);
 8004376:	2200      	movs	r2, #0
 8004378:	2101      	movs	r1, #1
 800437a:	2001      	movs	r0, #1
 800437c:	f7ff fc46 	bl	8003c0c <motor_set>
            if (settle_start == 0) settle_start = now;
 8004380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <turn_in_place_gyro+0x23e>
 8004386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004388:	65bb      	str	r3, [r7, #88]	@ 0x58
            if ((now - settle_start) >= SETTLE_MS) break;
 800438a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800438c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	4b36      	ldr	r3, [pc, #216]	@ (800446c <turn_in_place_gyro+0x320>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d340      	bcc.n	800441a <turn_in_place_gyro+0x2ce>
 8004398:	e04a      	b.n	8004430 <turn_in_place_gyro+0x2e4>
        } else {
            settle_start = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	65bb      	str	r3, [r7, #88]	@ 0x58

            // Apply PWM (no fake “min move” offsets here—let control truly go to 0 near stop)
            int pwmL = (int)roundf(left_mag);
 800439e:	ed97 0a05 	vldr	s0, [r7, #20]
 80043a2:	f008 fe09 	bl	800cfb8 <roundf>
 80043a6:	eef0 7a40 	vmov.f32	s15, s0
 80043aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043ae:	ee17 3a90 	vmov	r3, s15
 80043b2:	647b      	str	r3, [r7, #68]	@ 0x44
            int pwmR = (int)roundf(right_mag);
 80043b4:	ed97 0a06 	vldr	s0, [r7, #24]
 80043b8:	f008 fdfe 	bl	800cfb8 <roundf>
 80043bc:	eef0 7a40 	vmov.f32	s15, s0
 80043c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043c4:	ee17 3a90 	vmov	r3, s15
 80043c8:	643b      	str	r3, [r7, #64]	@ 0x40
            if (pwmL < 0) pwmL = 0;
 80043ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	da01      	bge.n	80043d4 <turn_in_place_gyro+0x288>
 80043d0:	2300      	movs	r3, #0
 80043d2:	647b      	str	r3, [r7, #68]	@ 0x44
            if (pwmL > 1000) pwmL = 1000;
 80043d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043da:	dd02      	ble.n	80043e2 <turn_in_place_gyro+0x296>
 80043dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043e0:	647b      	str	r3, [r7, #68]	@ 0x44
            if (pwmR < 0) pwmR = 0;
 80043e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	da01      	bge.n	80043ec <turn_in_place_gyro+0x2a0>
 80043e8:	2300      	movs	r3, #0
 80043ea:	643b      	str	r3, [r7, #64]	@ 0x40
            if (pwmR > 1000) pwmR = 1000;
 80043ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043f2:	dd02      	ble.n	80043fa <turn_in_place_gyro+0x2ae>
 80043f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043f8:	643b      	str	r3, [r7, #64]	@ 0x40

            motor_set(0, left_forward,  (uint16_t)pwmL);
 80043fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004402:	4619      	mov	r1, r3
 8004404:	2000      	movs	r0, #0
 8004406:	f7ff fc01 	bl	8003c0c <motor_set>
            motor_set(1, right_forward, (uint16_t)pwmR);
 800440a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800440c:	b29a      	uxth	r2, r3
 800440e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8004412:	4619      	mov	r1, r3
 8004414:	2001      	movs	r0, #1
 8004416:	f7ff fbf9 	bl	8003c0c <motor_set>
        }

        if ((now - t0) > timeout_ms) break;
 800441a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800441c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	429a      	cmp	r2, r3
 8004424:	d303      	bcc.n	800442e <turn_in_place_gyro+0x2e2>

        HAL_Delay(2); // ~500 Hz outer loop
 8004426:	2002      	movs	r0, #2
 8004428:	f001 fb9a 	bl	8005b60 <HAL_Delay>
    while (1) {
 800442c:	e6b2      	b.n	8004194 <turn_in_place_gyro+0x48>
        if ((now - t0) > timeout_ms) break;
 800442e:	bf00      	nop
    }

    break_motors();
 8004430:	f7ff fb5e 	bl	8003af0 <break_motors>
    HAL_Delay(60);
 8004434:	203c      	movs	r0, #60	@ 0x3c
 8004436:	f001 fb93 	bl	8005b60 <HAL_Delay>
}
 800443a:	bf00      	nop
 800443c:	3760      	adds	r7, #96	@ 0x60
 800443e:	46bd      	mov	sp, r7
 8004440:	ecbd 8b02 	vpop	{d8}
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	447a0000 	.word	0x447a0000
 800444c:	3a83126f 	.word	0x3a83126f
 8004450:	20000018 	.word	0x20000018
 8004454:	00000000 	.word	0x00000000
 8004458:	20000014 	.word	0x20000014
 800445c:	20000028 	.word	0x20000028
 8004460:	3fb0ff97 	.word	0x3fb0ff97
 8004464:	2000001c 	.word	0x2000001c
 8004468:	20000020 	.word	0x20000020
 800446c:	20000024 	.word	0x20000024

08004470 <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 8004474:	2200      	movs	r2, #0
 8004476:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800447a:	480b      	ldr	r0, [pc, #44]	@ (80044a8 <turn_off_emitters+0x38>)
 800447c:	f002 faae 	bl	80069dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8004480:	2200      	movs	r2, #0
 8004482:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004486:	4809      	ldr	r0, [pc, #36]	@ (80044ac <turn_off_emitters+0x3c>)
 8004488:	f002 faa8 	bl	80069dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 800448c:	2200      	movs	r2, #0
 800448e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004492:	4805      	ldr	r0, [pc, #20]	@ (80044a8 <turn_off_emitters+0x38>)
 8004494:	f002 faa2 	bl	80069dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 8004498:	2200      	movs	r2, #0
 800449a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800449e:	4803      	ldr	r0, [pc, #12]	@ (80044ac <turn_off_emitters+0x3c>)
 80044a0:	f002 fa9c 	bl	80069dc <HAL_GPIO_WritePin>
}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40020400 	.word	0x40020400
 80044ac:	40020000 	.word	0x40020000

080044b0 <read_adc_channel>:

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef cfg = {0};
 80044b8:	f107 030c 	add.w	r3, r7, #12
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
    cfg.Channel = channel;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
    cfg.Rank = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	613b      	str	r3, [r7, #16]
    cfg.SamplingTime = ADC_SAMPLETIME_480CYCLES; // more stable than 84
 80044ce:	2307      	movs	r3, #7
 80044d0:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &cfg) != HAL_OK) return 0;
 80044d2:	f107 030c 	add.w	r3, r7, #12
 80044d6:	4619      	mov	r1, r3
 80044d8:	4815      	ldr	r0, [pc, #84]	@ (8004530 <read_adc_channel+0x80>)
 80044da:	f001 fd29 	bl	8005f30 <HAL_ADC_ConfigChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <read_adc_channel+0x38>
 80044e4:	2300      	movs	r3, #0
 80044e6:	e01f      	b.n	8004528 <read_adc_channel+0x78>

    dwt_delay_us(5);                     // tiny mux settle
 80044e8:	2005      	movs	r0, #5
 80044ea:	f7fe f927 	bl	800273c <dwt_delay_us>

    // dummy conversion (discard)
    HAL_ADC_Start(&hadc1);
 80044ee:	4810      	ldr	r0, [pc, #64]	@ (8004530 <read_adc_channel+0x80>)
 80044f0:	f001 fb9e 	bl	8005c30 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 80044f4:	210a      	movs	r1, #10
 80044f6:	480e      	ldr	r0, [pc, #56]	@ (8004530 <read_adc_channel+0x80>)
 80044f8:	f001 fc81 	bl	8005dfe <HAL_ADC_PollForConversion>
    (void)HAL_ADC_GetValue(&hadc1);
 80044fc:	480c      	ldr	r0, [pc, #48]	@ (8004530 <read_adc_channel+0x80>)
 80044fe:	f001 fd09 	bl	8005f14 <HAL_ADC_GetValue>
    HAL_ADC_Stop(&hadc1);
 8004502:	480b      	ldr	r0, [pc, #44]	@ (8004530 <read_adc_channel+0x80>)
 8004504:	f001 fc48 	bl	8005d98 <HAL_ADC_Stop>

    // real conversion
    HAL_ADC_Start(&hadc1);
 8004508:	4809      	ldr	r0, [pc, #36]	@ (8004530 <read_adc_channel+0x80>)
 800450a:	f001 fb91 	bl	8005c30 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 800450e:	210a      	movs	r1, #10
 8004510:	4807      	ldr	r0, [pc, #28]	@ (8004530 <read_adc_channel+0x80>)
 8004512:	f001 fc74 	bl	8005dfe <HAL_ADC_PollForConversion>
    uint16_t v = HAL_ADC_GetValue(&hadc1);
 8004516:	4806      	ldr	r0, [pc, #24]	@ (8004530 <read_adc_channel+0x80>)
 8004518:	f001 fcfc 	bl	8005f14 <HAL_ADC_GetValue>
 800451c:	4603      	mov	r3, r0
 800451e:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 8004520:	4803      	ldr	r0, [pc, #12]	@ (8004530 <read_adc_channel+0x80>)
 8004522:	f001 fc39 	bl	8005d98 <HAL_ADC_Stop>
    return v;
 8004526:	8bfb      	ldrh	r3, [r7, #30]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000254 	.word	0x20000254

08004534 <update_sensors>:
		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);
}



void update_sensors(void){
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
	turn_off_emitters();
 800453a:	f7ff ff99 	bl	8004470 <turn_off_emitters>
	//dwt_delay_us(500);
	uint16_t off_FL = read_adc_channel(ADC_CHANNEL_5);
 800453e:	2005      	movs	r0, #5
 8004540:	f7ff ffb6 	bl	80044b0 <read_adc_channel>
 8004544:	4603      	mov	r3, r0
 8004546:	83bb      	strh	r3, [r7, #28]
	uint16_t off_FR = read_adc_channel(ADC_CHANNEL_2);
 8004548:	2002      	movs	r0, #2
 800454a:	f7ff ffb1 	bl	80044b0 <read_adc_channel>
 800454e:	4603      	mov	r3, r0
 8004550:	83fb      	strh	r3, [r7, #30]
	uint16_t off_L = read_adc_channel(ADC_CHANNEL_4);
 8004552:	2004      	movs	r0, #4
 8004554:	f7ff ffac 	bl	80044b0 <read_adc_channel>
 8004558:	4603      	mov	r3, r0
 800455a:	817b      	strh	r3, [r7, #10]
	uint16_t off_R = read_adc_channel(ADC_CHANNEL_3);
 800455c:	2003      	movs	r0, #3
 800455e:	f7ff ffa7 	bl	80044b0 <read_adc_channel>
 8004562:	4603      	mov	r3, r0
 8004564:	813b      	strh	r3, [r7, #8]

	EMIT_ON(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin);
 8004566:	2201      	movs	r2, #1
 8004568:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800456c:	4861      	ldr	r0, [pc, #388]	@ (80046f4 <update_sensors+0x1c0>)
 800456e:	f002 fa35 	bl	80069dc <HAL_GPIO_WritePin>
	EMIT_ON(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin);
 8004572:	2201      	movs	r2, #1
 8004574:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004578:	485f      	ldr	r0, [pc, #380]	@ (80046f8 <update_sensors+0x1c4>)
 800457a:	f002 fa2f 	bl	80069dc <HAL_GPIO_WritePin>
	dwt_delay_us(50);
 800457e:	2032      	movs	r0, #50	@ 0x32
 8004580:	f7fe f8dc 	bl	800273c <dwt_delay_us>
	//HAL_Delay(1);

	uint16_t on_FL = read_adc_channel(ADC_CHANNEL_5);
 8004584:	2005      	movs	r0, #5
 8004586:	f7ff ff93 	bl	80044b0 <read_adc_channel>
 800458a:	4603      	mov	r3, r0
 800458c:	80fb      	strh	r3, [r7, #6]
	uint16_t on_FR = read_adc_channel(ADC_CHANNEL_2);
 800458e:	2002      	movs	r0, #2
 8004590:	f7ff ff8e 	bl	80044b0 <read_adc_channel>
 8004594:	4603      	mov	r3, r0
 8004596:	80bb      	strh	r3, [r7, #4]

	turn_off_emitters();
 8004598:	f7ff ff6a 	bl	8004470 <turn_off_emitters>
	EMIT_ON(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin);
 800459c:	2201      	movs	r2, #1
 800459e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045a2:	4855      	ldr	r0, [pc, #340]	@ (80046f8 <update_sensors+0x1c4>)
 80045a4:	f002 fa1a 	bl	80069dc <HAL_GPIO_WritePin>
	EMIT_ON(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin);
 80045a8:	2201      	movs	r2, #1
 80045aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045ae:	4851      	ldr	r0, [pc, #324]	@ (80046f4 <update_sensors+0x1c0>)
 80045b0:	f002 fa14 	bl	80069dc <HAL_GPIO_WritePin>
	dwt_delay_us(80);
 80045b4:	2050      	movs	r0, #80	@ 0x50
 80045b6:	f7fe f8c1 	bl	800273c <dwt_delay_us>
	//HAL_Delay(1);

	uint16_t on_L = read_adc_channel(ADC_CHANNEL_4);
 80045ba:	2004      	movs	r0, #4
 80045bc:	f7ff ff78 	bl	80044b0 <read_adc_channel>
 80045c0:	4603      	mov	r3, r0
 80045c2:	807b      	strh	r3, [r7, #2]
	uint16_t on_R = read_adc_channel(ADC_CHANNEL_3);
 80045c4:	2003      	movs	r0, #3
 80045c6:	f7ff ff73 	bl	80044b0 <read_adc_channel>
 80045ca:	4603      	mov	r3, r0
 80045cc:	803b      	strh	r3, [r7, #0]

	turn_off_emitters();
 80045ce:	f7ff ff4f 	bl	8004470 <turn_off_emitters>
	uint32_t diff_FL;
	uint32_t diff_FR;
	uint32_t diff_L;
	uint32_t diff_R;

	if (on_FL>off_FL){
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	8bbb      	ldrh	r3, [r7, #28]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d904      	bls.n	80045e4 <update_sensors+0xb0>
		diff_FL = (uint32_t)on_FL-(uint32_t)off_FL;
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	8bbb      	ldrh	r3, [r7, #28]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	e001      	b.n	80045e8 <update_sensors+0xb4>
	}else{
		diff_FL =0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61bb      	str	r3, [r7, #24]
	}
	if (on_FR>off_FR){
 80045e8:	88ba      	ldrh	r2, [r7, #4]
 80045ea:	8bfb      	ldrh	r3, [r7, #30]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d904      	bls.n	80045fa <update_sensors+0xc6>
		diff_FR = (uint32_t)on_FR-(uint32_t)off_FR;
 80045f0:	88ba      	ldrh	r2, [r7, #4]
 80045f2:	8bfb      	ldrh	r3, [r7, #30]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e001      	b.n	80045fe <update_sensors+0xca>
	}else{
		diff_FR =0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
	}
	if (on_L>off_L){
 80045fe:	887a      	ldrh	r2, [r7, #2]
 8004600:	897b      	ldrh	r3, [r7, #10]
 8004602:	429a      	cmp	r2, r3
 8004604:	d904      	bls.n	8004610 <update_sensors+0xdc>
		diff_L = (uint32_t)on_L-(uint32_t)off_L;
 8004606:	887a      	ldrh	r2, [r7, #2]
 8004608:	897b      	ldrh	r3, [r7, #10]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e001      	b.n	8004614 <update_sensors+0xe0>
	}else{
		diff_L=0;
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]
	}
	if (on_R>off_R){
 8004614:	883a      	ldrh	r2, [r7, #0]
 8004616:	893b      	ldrh	r3, [r7, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	d904      	bls.n	8004626 <update_sensors+0xf2>
		diff_R = (uint32_t)on_R-(uint32_t)off_R;
 800461c:	883a      	ldrh	r2, [r7, #0]
 800461e:	893b      	ldrh	r3, [r7, #8]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e001      	b.n	800462a <update_sensors+0xf6>
	}else{
		diff_R = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
	}

	diff_FL=(diff_FL*NOMINAL)/1000;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004630:	fb02 f303 	mul.w	r3, r2, r3
 8004634:	4a31      	ldr	r2, [pc, #196]	@ (80046fc <update_sensors+0x1c8>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	099b      	lsrs	r3, r3, #6
 800463c:	61bb      	str	r3, [r7, #24]
	diff_FR=(diff_FR*NOMINAL)/1000;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004644:	fb02 f303 	mul.w	r3, r2, r3
 8004648:	4a2c      	ldr	r2, [pc, #176]	@ (80046fc <update_sensors+0x1c8>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	617b      	str	r3, [r7, #20]
	diff_L=(diff_L*NOMINAL)/1000;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004658:	fb02 f303 	mul.w	r3, r2, r3
 800465c:	4a27      	ldr	r2, [pc, #156]	@ (80046fc <update_sensors+0x1c8>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	099b      	lsrs	r3, r3, #6
 8004664:	613b      	str	r3, [r7, #16]
	diff_R=(diff_R*NOMINAL)/1000;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800466c:	fb02 f303 	mul.w	r3, r2, r3
 8004670:	4a22      	ldr	r2, [pc, #136]	@ (80046fc <update_sensors+0x1c8>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	60fb      	str	r3, [r7, #12]


    sensors.front_left  = diff_FL;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	b29a      	uxth	r2, r3
 800467e:	4b20      	ldr	r3, [pc, #128]	@ (8004700 <update_sensors+0x1cc>)
 8004680:	811a      	strh	r2, [r3, #8]
    sensors.front_right = diff_FR;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	b29a      	uxth	r2, r3
 8004686:	4b1e      	ldr	r3, [pc, #120]	@ (8004700 <update_sensors+0x1cc>)
 8004688:	805a      	strh	r2, [r3, #2]
    sensors.side_left   = diff_L;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	b29a      	uxth	r2, r3
 800468e:	4b1c      	ldr	r3, [pc, #112]	@ (8004700 <update_sensors+0x1cc>)
 8004690:	80da      	strh	r2, [r3, #6]
    sensors.side_right  = diff_R; //tot_diff_R/5;  //
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	b29a      	uxth	r2, r3
 8004696:	4b1a      	ldr	r3, [pc, #104]	@ (8004700 <update_sensors+0x1cc>)
 8004698:	809a      	strh	r2, [r3, #4]
    sensors.battery = read_adc_channel(ADC_CHANNEL_0);
 800469a:	2000      	movs	r0, #0
 800469c:	f7ff ff08 	bl	80044b0 <read_adc_channel>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b16      	ldr	r3, [pc, #88]	@ (8004700 <update_sensors+0x1cc>)
 80046a6:	801a      	strh	r2, [r3, #0]
                            (sensors.front_right > get_calibrated_threshold(1));
        sensors.wall_left = (sensors.side_left > get_calibrated_threshold(2));
        sensors.wall_right = (sensors.side_right > get_calibrated_threshold(3));
    } else {
        // Fallback to static thresholds
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT_L) ||
 80046a8:	4b15      	ldr	r3, [pc, #84]	@ (8004700 <update_sensors+0x1cc>)
 80046aa:	891b      	ldrh	r3, [r3, #8]
 80046ac:	2b06      	cmp	r3, #6
 80046ae:	d803      	bhi.n	80046b8 <update_sensors+0x184>
                            (sensors.front_right > WALL_THRESHOLD_FRONT_R);
 80046b0:	4b13      	ldr	r3, [pc, #76]	@ (8004700 <update_sensors+0x1cc>)
 80046b2:	885b      	ldrh	r3, [r3, #2]
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT_L) ||
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d901      	bls.n	80046bc <update_sensors+0x188>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <update_sensors+0x18a>
 80046bc:	2300      	movs	r3, #0
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004700 <update_sensors+0x1cc>)
 80046c6:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > WALL_THRESHOLD_SIDE_L);
 80046c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <update_sensors+0x1cc>)
 80046ca:	88db      	ldrh	r3, [r3, #6]
 80046cc:	2b0b      	cmp	r3, #11
 80046ce:	bf8c      	ite	hi
 80046d0:	2301      	movhi	r3, #1
 80046d2:	2300      	movls	r3, #0
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004700 <update_sensors+0x1cc>)
 80046d8:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > WALL_THRESHOLD_SIDE_R);
 80046da:	4b09      	ldr	r3, [pc, #36]	@ (8004700 <update_sensors+0x1cc>)
 80046dc:	889b      	ldrh	r3, [r3, #4]
 80046de:	2b0e      	cmp	r3, #14
 80046e0:	bf8c      	ite	hi
 80046e2:	2301      	movhi	r3, #1
 80046e4:	2300      	movls	r3, #0
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <update_sensors+0x1cc>)
 80046ea:	731a      	strb	r2, [r3, #12]

//	send_bluetooth_printf("FL:%u   FR:%u  Fwall: %d SL:%u Lwall: %d  SR:%u  Rwall: %d  \r\n",
//		                          sensors.front_left, sensors.front_right,sensors.wall_front,
//		                          sensors.side_left, sensors.wall_left, sensors.side_right, sensors.wall_right);

}
 80046ec:	bf00      	nop
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40020400 	.word	0x40020400
 80046f8:	40020000 	.word	0x40020000
 80046fc:	10624dd3 	.word	0x10624dd3
 8004700:	20001470 	.word	0x20001470

08004704 <adc_system_diagnostics>:

    send_bluetooth_message("===============================\r\n");
}


void adc_system_diagnostics(void) {
 8004704:	b5b0      	push	{r4, r5, r7, lr}
 8004706:	b08e      	sub	sp, #56	@ 0x38
 8004708:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 800470a:	484b      	ldr	r0, [pc, #300]	@ (8004838 <adc_system_diagnostics+0x134>)
 800470c:	f7fc fcd8 	bl	80010c0 <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 8004710:	4b4a      	ldr	r3, [pc, #296]	@ (800483c <adc_system_diagnostics+0x138>)
 8004712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 800471c:	4848      	ldr	r0, [pc, #288]	@ (8004840 <adc_system_diagnostics+0x13c>)
 800471e:	f7fc fccf 	bl	80010c0 <send_bluetooth_message>
 8004722:	e002      	b.n	800472a <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 8004724:	4847      	ldr	r0, [pc, #284]	@ (8004844 <adc_system_diagnostics+0x140>)
 8004726:	f7fc fccb 	bl	80010c0 <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 800472a:	4b44      	ldr	r3, [pc, #272]	@ (800483c <adc_system_diagnostics+0x138>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 8004736:	4844      	ldr	r0, [pc, #272]	@ (8004848 <adc_system_diagnostics+0x144>)
 8004738:	f7fc fcc2 	bl	80010c0 <send_bluetooth_message>
 800473c:	e002      	b.n	8004744 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 800473e:	4843      	ldr	r0, [pc, #268]	@ (800484c <adc_system_diagnostics+0x148>)
 8004740:	f7fc fcbe 	bl	80010c0 <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 8004744:	4b42      	ldr	r3, [pc, #264]	@ (8004850 <adc_system_diagnostics+0x14c>)
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	2b01      	cmp	r3, #1
 800474a:	d103      	bne.n	8004754 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 800474c:	4841      	ldr	r0, [pc, #260]	@ (8004854 <adc_system_diagnostics+0x150>)
 800474e:	f7fc fcb7 	bl	80010c0 <send_bluetooth_message>
 8004752:	e005      	b.n	8004760 <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 8004754:	4b3e      	ldr	r3, [pc, #248]	@ (8004850 <adc_system_diagnostics+0x14c>)
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	4619      	mov	r1, r3
 800475a:	483f      	ldr	r0, [pc, #252]	@ (8004858 <adc_system_diagnostics+0x154>)
 800475c:	f7fc fcc6 	bl	80010ec <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 8004760:	483e      	ldr	r0, [pc, #248]	@ (800485c <adc_system_diagnostics+0x158>)
 8004762:	f7fc fcad 	bl	80010c0 <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 8004766:	4b3e      	ldr	r3, [pc, #248]	@ (8004860 <adc_system_diagnostics+0x15c>)
 8004768:	f107 0420 	add.w	r4, r7, #32
 800476c:	461d      	mov	r5, r3
 800476e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004772:	682b      	ldr	r3, [r5, #0]
 8004774:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 8004776:	4b3b      	ldr	r3, [pc, #236]	@ (8004864 <adc_system_diagnostics+0x160>)
 8004778:	f107 040c 	add.w	r4, r7, #12
 800477c:	461d      	mov	r5, r3
 800477e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 8004786:	2300      	movs	r3, #0
 8004788:	637b      	str	r3, [r7, #52]	@ 0x34
 800478a:	e04b      	b.n	8004824 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 800478c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	3338      	adds	r3, #56	@ 0x38
 8004792:	443b      	add	r3, r7
 8004794:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fe89 	bl	80044b0 <read_adc_channel>
 800479e:	4603      	mov	r3, r0
 80047a0:	461a      	mov	r2, r3
 80047a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	3338      	adds	r3, #56	@ 0x38
 80047a8:	443b      	add	r3, r7
 80047aa:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80047ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	3338      	adds	r3, #56	@ 0x38
 80047b4:	443b      	add	r3, r7
 80047b6:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 80047ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	3338      	adds	r3, #56	@ 0x38
 80047c0:	443b      	add	r3, r7
 80047c2:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01f      	beq.n	800480a <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80047ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	3338      	adds	r3, #56	@ 0x38
 80047d0:	443b      	add	r3, r7
 80047d2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d015      	beq.n	8004806 <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 80047da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	3338      	adds	r3, #56	@ 0x38
 80047e0:	443b      	add	r3, r7
 80047e2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d00b      	beq.n	8004802 <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 80047ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	3338      	adds	r3, #56	@ 0x38
 80047f0:	443b      	add	r3, r7
 80047f2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d101      	bne.n	80047fe <adc_system_diagnostics+0xfa>
 80047fa:	2204      	movs	r2, #4
 80047fc:	e006      	b.n	800480c <adc_system_diagnostics+0x108>
 80047fe:	2205      	movs	r2, #5
 8004800:	e004      	b.n	800480c <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 8004802:	2203      	movs	r2, #3
 8004804:	e002      	b.n	800480c <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 8004806:	2202      	movs	r2, #2
 8004808:	e000      	b.n	800480c <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 800480a:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 800480c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	3338      	adds	r3, #56	@ 0x38
 8004812:	443b      	add	r3, r7
 8004814:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004818:	4813      	ldr	r0, [pc, #76]	@ (8004868 <adc_system_diagnostics+0x164>)
 800481a:	f7fc fc67 	bl	80010ec <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 800481e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004820:	3301      	adds	r3, #1
 8004822:	637b      	str	r3, [r7, #52]	@ 0x34
 8004824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004826:	2b04      	cmp	r3, #4
 8004828:	ddb0      	ble.n	800478c <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 800482a:	4810      	ldr	r0, [pc, #64]	@ (800486c <adc_system_diagnostics+0x168>)
 800482c:	f7fc fc48 	bl	80010c0 <send_bluetooth_message>
}
 8004830:	bf00      	nop
 8004832:	3738      	adds	r7, #56	@ 0x38
 8004834:	46bd      	mov	sp, r7
 8004836:	bdb0      	pop	{r4, r5, r7, pc}
 8004838:	0800e954 	.word	0x0800e954
 800483c:	40023800 	.word	0x40023800
 8004840:	0800e978 	.word	0x0800e978
 8004844:	0800e994 	.word	0x0800e994
 8004848:	0800e9b0 	.word	0x0800e9b0
 800484c:	0800e9cc 	.word	0x0800e9cc
 8004850:	20000254 	.word	0x20000254
 8004854:	0800e9e8 	.word	0x0800e9e8
 8004858:	0800ea00 	.word	0x0800ea00
 800485c:	0800ea18 	.word	0x0800ea18
 8004860:	0800ea48 	.word	0x0800ea48
 8004864:	0800ea94 	.word	0x0800ea94
 8004868:	0800ea38 	.word	0x0800ea38
 800486c:	0800e930 	.word	0x0800e930

08004870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	4b10      	ldr	r3, [pc, #64]	@ (80048bc <HAL_MspInit+0x4c>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487e:	4a0f      	ldr	r2, [pc, #60]	@ (80048bc <HAL_MspInit+0x4c>)
 8004880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004884:	6453      	str	r3, [r2, #68]	@ 0x44
 8004886:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <HAL_MspInit+0x4c>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	4b09      	ldr	r3, [pc, #36]	@ (80048bc <HAL_MspInit+0x4c>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	4a08      	ldr	r2, [pc, #32]	@ (80048bc <HAL_MspInit+0x4c>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048a2:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <HAL_MspInit+0x4c>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800

080048c0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	@ 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a17      	ldr	r2, [pc, #92]	@ (800493c <HAL_ADC_MspInit+0x7c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d127      	bne.n	8004932 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	4b16      	ldr	r3, [pc, #88]	@ (8004940 <HAL_ADC_MspInit+0x80>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	4a15      	ldr	r2, [pc, #84]	@ (8004940 <HAL_ADC_MspInit+0x80>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80048f2:	4b13      	ldr	r3, [pc, #76]	@ (8004940 <HAL_ADC_MspInit+0x80>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	4b0f      	ldr	r3, [pc, #60]	@ (8004940 <HAL_ADC_MspInit+0x80>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	4a0e      	ldr	r2, [pc, #56]	@ (8004940 <HAL_ADC_MspInit+0x80>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	6313      	str	r3, [r2, #48]	@ 0x30
 800490e:	4b0c      	ldr	r3, [pc, #48]	@ (8004940 <HAL_ADC_MspInit+0x80>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 800491a:	233d      	movs	r3, #61	@ 0x3d
 800491c:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800491e:	2303      	movs	r3, #3
 8004920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004926:	f107 0314 	add.w	r3, r7, #20
 800492a:	4619      	mov	r1, r3
 800492c:	4805      	ldr	r0, [pc, #20]	@ (8004944 <HAL_ADC_MspInit+0x84>)
 800492e:	f001 fed1 	bl	80066d4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004932:	bf00      	nop
 8004934:	3728      	adds	r7, #40	@ 0x28
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40012000 	.word	0x40012000
 8004940:	40023800 	.word	0x40023800
 8004944:	40020000 	.word	0x40020000

08004948 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	@ 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004950:	f107 0314 	add.w	r3, r7, #20
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a19      	ldr	r2, [pc, #100]	@ (80049cc <HAL_SPI_MspInit+0x84>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d12c      	bne.n	80049c4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	4b18      	ldr	r3, [pc, #96]	@ (80049d0 <HAL_SPI_MspInit+0x88>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	4a17      	ldr	r2, [pc, #92]	@ (80049d0 <HAL_SPI_MspInit+0x88>)
 8004974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004978:	6413      	str	r3, [r2, #64]	@ 0x40
 800497a:	4b15      	ldr	r3, [pc, #84]	@ (80049d0 <HAL_SPI_MspInit+0x88>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	4b11      	ldr	r3, [pc, #68]	@ (80049d0 <HAL_SPI_MspInit+0x88>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498e:	4a10      	ldr	r2, [pc, #64]	@ (80049d0 <HAL_SPI_MspInit+0x88>)
 8004990:	f043 0302 	orr.w	r3, r3, #2
 8004994:	6313      	str	r3, [r2, #48]	@ 0x30
 8004996:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <HAL_SPI_MspInit+0x88>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 80049a2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80049a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a8:	2302      	movs	r3, #2
 80049aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b0:	2303      	movs	r3, #3
 80049b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049b4:	2305      	movs	r3, #5
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b8:	f107 0314 	add.w	r3, r7, #20
 80049bc:	4619      	mov	r1, r3
 80049be:	4805      	ldr	r0, [pc, #20]	@ (80049d4 <HAL_SPI_MspInit+0x8c>)
 80049c0:	f001 fe88 	bl	80066d4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80049c4:	bf00      	nop
 80049c6:	3728      	adds	r7, #40	@ 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40003800 	.word	0x40003800
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40020400 	.word	0x40020400

080049d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a18      	ldr	r2, [pc, #96]	@ (8004a48 <HAL_TIM_Base_MspInit+0x70>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d116      	bne.n	8004a18 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	4b17      	ldr	r3, [pc, #92]	@ (8004a4c <HAL_TIM_Base_MspInit+0x74>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f2:	4a16      	ldr	r2, [pc, #88]	@ (8004a4c <HAL_TIM_Base_MspInit+0x74>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80049fa:	4b14      	ldr	r3, [pc, #80]	@ (8004a4c <HAL_TIM_Base_MspInit+0x74>)
 80049fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8004a06:	2200      	movs	r2, #0
 8004a08:	2107      	movs	r1, #7
 8004a0a:	2019      	movs	r0, #25
 8004a0c:	f001 fd99 	bl	8006542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004a10:	2019      	movs	r0, #25
 8004a12:	f001 fdb2 	bl	800657a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004a16:	e012      	b.n	8004a3e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a50 <HAL_TIM_Base_MspInit+0x78>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d10d      	bne.n	8004a3e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <HAL_TIM_Base_MspInit+0x74>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	4a08      	ldr	r2, [pc, #32]	@ (8004a4c <HAL_TIM_Base_MspInit+0x74>)
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <HAL_TIM_Base_MspInit+0x74>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	60bb      	str	r3, [r7, #8]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	40000400 	.word	0x40000400

08004a54 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	@ 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5c:	f107 031c 	add.w	r3, r7, #28
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a74:	d14b      	bne.n	8004b0e <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a86:	4b3c      	ldr	r3, [pc, #240]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	4b38      	ldr	r3, [pc, #224]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9a:	4a37      	ldr	r2, [pc, #220]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aa2:	4b35      	ldr	r3, [pc, #212]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	4b31      	ldr	r3, [pc, #196]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	4a30      	ldr	r2, [pc, #192]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ab8:	f043 0302 	orr.w	r3, r3, #2
 8004abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004abe:	4b2e      	ldr	r3, [pc, #184]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 8004aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004adc:	2301      	movs	r3, #1
 8004ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 8004ae0:	f107 031c 	add.w	r3, r7, #28
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4825      	ldr	r0, [pc, #148]	@ (8004b7c <HAL_TIM_Encoder_MspInit+0x128>)
 8004ae8:	f001 fdf4 	bl	80066d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 8004aec:	2308      	movs	r3, #8
 8004aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af0:	2302      	movs	r3, #2
 8004af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af8:	2300      	movs	r3, #0
 8004afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004afc:	2301      	movs	r3, #1
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 8004b00:	f107 031c 	add.w	r3, r7, #28
 8004b04:	4619      	mov	r1, r3
 8004b06:	481e      	ldr	r0, [pc, #120]	@ (8004b80 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004b08:	f001 fde4 	bl	80066d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004b0c:	e030      	b.n	8004b70 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1c      	ldr	r2, [pc, #112]	@ (8004b84 <HAL_TIM_Encoder_MspInit+0x130>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d12b      	bne.n	8004b70 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	4b16      	ldr	r3, [pc, #88]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b22:	f043 0304 	orr.w	r3, r3, #4
 8004b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b28:	4b13      	ldr	r3, [pc, #76]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b34:	2300      	movs	r3, #0
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	4b0f      	ldr	r3, [pc, #60]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b3e:	f043 0302 	orr.w	r3, r3, #2
 8004b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b44:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 8004b50:	23c0      	movs	r3, #192	@ 0xc0
 8004b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b54:	2302      	movs	r3, #2
 8004b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004b60:	2302      	movs	r3, #2
 8004b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b64:	f107 031c 	add.w	r3, r7, #28
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4805      	ldr	r0, [pc, #20]	@ (8004b80 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004b6c:	f001 fdb2 	bl	80066d4 <HAL_GPIO_Init>
}
 8004b70:	bf00      	nop
 8004b72:	3730      	adds	r7, #48	@ 0x30
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40020000 	.word	0x40020000
 8004b80:	40020400 	.word	0x40020400
 8004b84:	40000800 	.word	0x40000800

08004b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	@ 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	f107 0314 	add.w	r3, r7, #20
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a33      	ldr	r2, [pc, #204]	@ (8004c74 <HAL_TIM_MspPostInit+0xec>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d11f      	bne.n	8004bea <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	4b32      	ldr	r3, [pc, #200]	@ (8004c78 <HAL_TIM_MspPostInit+0xf0>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	4a31      	ldr	r2, [pc, #196]	@ (8004c78 <HAL_TIM_MspPostInit+0xf0>)
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bba:	4b2f      	ldr	r3, [pc, #188]	@ (8004c78 <HAL_TIM_MspPostInit+0xf0>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 8004bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 8004bdc:	f107 0314 	add.w	r3, r7, #20
 8004be0:	4619      	mov	r1, r3
 8004be2:	4826      	ldr	r0, [pc, #152]	@ (8004c7c <HAL_TIM_MspPostInit+0xf4>)
 8004be4:	f001 fd76 	bl	80066d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004be8:	e040      	b.n	8004c6c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a24      	ldr	r2, [pc, #144]	@ (8004c80 <HAL_TIM_MspPostInit+0xf8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d13b      	bne.n	8004c6c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c78 <HAL_TIM_MspPostInit+0xf0>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8004c78 <HAL_TIM_MspPostInit+0xf0>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c04:	4b1c      	ldr	r3, [pc, #112]	@ (8004c78 <HAL_TIM_MspPostInit+0xf0>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c10:	2300      	movs	r3, #0
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	4b18      	ldr	r3, [pc, #96]	@ (8004c78 <HAL_TIM_MspPostInit+0xf0>)
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c18:	4a17      	ldr	r2, [pc, #92]	@ (8004c78 <HAL_TIM_MspPostInit+0xf0>)
 8004c1a:	f043 0302 	orr.w	r3, r3, #2
 8004c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c20:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <HAL_TIM_MspPostInit+0xf0>)
 8004c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8004c2c:	23c0      	movs	r3, #192	@ 0xc0
 8004c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c30:	2302      	movs	r3, #2
 8004c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c40:	f107 0314 	add.w	r3, r7, #20
 8004c44:	4619      	mov	r1, r3
 8004c46:	480d      	ldr	r0, [pc, #52]	@ (8004c7c <HAL_TIM_MspPostInit+0xf4>)
 8004c48:	f001 fd44 	bl	80066d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c50:	2302      	movs	r3, #2
 8004c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	4619      	mov	r1, r3
 8004c66:	4807      	ldr	r0, [pc, #28]	@ (8004c84 <HAL_TIM_MspPostInit+0xfc>)
 8004c68:	f001 fd34 	bl	80066d4 <HAL_GPIO_Init>
}
 8004c6c:	bf00      	nop
 8004c6e:	3728      	adds	r7, #40	@ 0x28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40020000 	.word	0x40020000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40020400 	.word	0x40020400

08004c88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	@ 0x28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d1c <HAL_UART_MspInit+0x94>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d134      	bne.n	8004d14 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	4b1c      	ldr	r3, [pc, #112]	@ (8004d20 <HAL_UART_MspInit+0x98>)
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d20 <HAL_UART_MspInit+0x98>)
 8004cb4:	f043 0320 	orr.w	r3, r3, #32
 8004cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cba:	4b19      	ldr	r3, [pc, #100]	@ (8004d20 <HAL_UART_MspInit+0x98>)
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	4b15      	ldr	r3, [pc, #84]	@ (8004d20 <HAL_UART_MspInit+0x98>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cce:	4a14      	ldr	r2, [pc, #80]	@ (8004d20 <HAL_UART_MspInit+0x98>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cd6:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <HAL_UART_MspInit+0x98>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8004ce2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf8:	f107 0314 	add.w	r3, r7, #20
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4809      	ldr	r0, [pc, #36]	@ (8004d24 <HAL_UART_MspInit+0x9c>)
 8004d00:	f001 fce8 	bl	80066d4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8004d04:	2200      	movs	r2, #0
 8004d06:	2106      	movs	r1, #6
 8004d08:	2047      	movs	r0, #71	@ 0x47
 8004d0a:	f001 fc1a 	bl	8006542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004d0e:	2047      	movs	r0, #71	@ 0x47
 8004d10:	f001 fc33 	bl	800657a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8004d14:	bf00      	nop
 8004d16:	3728      	adds	r7, #40	@ 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40011400 	.word	0x40011400
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40020000 	.word	0x40020000

08004d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d2c:	bf00      	nop
 8004d2e:	e7fd      	b.n	8004d2c <NMI_Handler+0x4>

08004d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <HardFault_Handler+0x4>

08004d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d3c:	bf00      	nop
 8004d3e:	e7fd      	b.n	8004d3c <MemManage_Handler+0x4>

08004d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <BusFault_Handler+0x4>

08004d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d4c:	bf00      	nop
 8004d4e:	e7fd      	b.n	8004d4c <UsageFault_Handler+0x4>

08004d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d7e:	f000 fecf 	bl	8005b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8004d8a:	2002      	movs	r0, #2
 8004d8c:	f001 fe5a 	bl	8006a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d98:	4802      	ldr	r0, [pc, #8]	@ (8004da4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004d9a:	f003 fb85 	bl	80084a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	200002f4 	.word	0x200002f4

08004da8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8004dac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004db0:	f001 fe48 	bl	8006a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004dbc:	4802      	ldr	r0, [pc, #8]	@ (8004dc8 <USART6_IRQHandler+0x10>)
 8004dbe:	f004 faa1 	bl	8009304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000414 	.word	0x20000414

08004dcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return 1;
 8004dd0:	2301      	movs	r3, #1
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <_kill>:

int _kill(int pid, int sig)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004de6:	f005 ffe5 	bl	800adb4 <__errno>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2216      	movs	r2, #22
 8004dee:	601a      	str	r2, [r3, #0]
  return -1;
 8004df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <_exit>:

void _exit (int status)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e04:	f04f 31ff 	mov.w	r1, #4294967295
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff ffe7 	bl	8004ddc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <_exit+0x12>

08004e12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b086      	sub	sp, #24
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e00a      	b.n	8004e3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e24:	f3af 8000 	nop.w
 8004e28:	4601      	mov	r1, r0
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	60ba      	str	r2, [r7, #8]
 8004e30:	b2ca      	uxtb	r2, r1
 8004e32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	3301      	adds	r3, #1
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	dbf0      	blt.n	8004e24 <_read+0x12>
  }

  return len;
 8004e42:	687b      	ldr	r3, [r7, #4]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e009      	b.n	8004e72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	60ba      	str	r2, [r7, #8]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	dbf1      	blt.n	8004e5e <_write+0x12>
  }
  return len;
 8004e7a:	687b      	ldr	r3, [r7, #4]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <_close>:

int _close(int file)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004eac:	605a      	str	r2, [r3, #4]
  return 0;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <_isatty>:

int _isatty(int file)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ec4:	2301      	movs	r3, #1
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ef4:	4a14      	ldr	r2, [pc, #80]	@ (8004f48 <_sbrk+0x5c>)
 8004ef6:	4b15      	ldr	r3, [pc, #84]	@ (8004f4c <_sbrk+0x60>)
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f00:	4b13      	ldr	r3, [pc, #76]	@ (8004f50 <_sbrk+0x64>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f08:	4b11      	ldr	r3, [pc, #68]	@ (8004f50 <_sbrk+0x64>)
 8004f0a:	4a12      	ldr	r2, [pc, #72]	@ (8004f54 <_sbrk+0x68>)
 8004f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f0e:	4b10      	ldr	r3, [pc, #64]	@ (8004f50 <_sbrk+0x64>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d207      	bcs.n	8004f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f1c:	f005 ff4a 	bl	800adb4 <__errno>
 8004f20:	4603      	mov	r3, r0
 8004f22:	220c      	movs	r2, #12
 8004f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f26:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2a:	e009      	b.n	8004f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f2c:	4b08      	ldr	r3, [pc, #32]	@ (8004f50 <_sbrk+0x64>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f32:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <_sbrk+0x64>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4413      	add	r3, r2
 8004f3a:	4a05      	ldr	r2, [pc, #20]	@ (8004f50 <_sbrk+0x64>)
 8004f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20020000 	.word	0x20020000
 8004f4c:	00000400 	.word	0x00000400
 8004f50:	20001d88 	.word	0x20001d88
 8004f54:	20001ef8 	.word	0x20001ef8

08004f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f5c:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <SystemInit+0x20>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	4a05      	ldr	r2, [pc, #20]	@ (8004f78 <SystemInit+0x20>)
 8004f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f6c:	bf00      	nop
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	460a      	mov	r2, r1
 8004f86:	71fb      	strb	r3, [r7, #7]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bf14      	ite	ne
 8004f92:	2301      	movne	r3, #1
 8004f94:	2300      	moveq	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	2110      	movs	r1, #16
 8004f9c:	4808      	ldr	r0, [pc, #32]	@ (8004fc0 <led_status+0x44>)
 8004f9e:	f001 fd1d 	bl	80069dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004fa2:	79bb      	ldrb	r3, [r7, #6]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	4803      	ldr	r0, [pc, #12]	@ (8004fc0 <led_status+0x44>)
 8004fb4:	f001 fd12 	bl	80069dc <HAL_GPIO_WritePin>
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40020400 	.word	0x40020400

08004fc4 <led_sequence_startup>:

/**
 * @brief LED sequence for different states
 */
void led_sequence_startup(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 8004fca:	2300      	movs	r3, #0
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	e010      	b.n	8004ff2 <led_sequence_startup+0x2e>
        led_status(1, 0);
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	f7ff ffd2 	bl	8004f7c <led_status>
        HAL_Delay(150);
 8004fd8:	2096      	movs	r0, #150	@ 0x96
 8004fda:	f000 fdc1 	bl	8005b60 <HAL_Delay>
        led_status(0, 1);
 8004fde:	2101      	movs	r1, #1
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f7ff ffcb 	bl	8004f7c <led_status>
        HAL_Delay(150);
 8004fe6:	2096      	movs	r0, #150	@ 0x96
 8004fe8:	f000 fdba 	bl	8005b60 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	ddeb      	ble.n	8004fd0 <led_sequence_startup+0xc>
    }
    led_status(0, 0);
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	f7ff ffbe 	bl	8004f7c <led_status>
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <led_sequence_exploring>:

/**
 * @brief LED sequence for exploration
 */
void led_sequence_exploring(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
    led_status(1, 0); // Left LED on during exploration
 800500c:	2100      	movs	r1, #0
 800500e:	2001      	movs	r0, #1
 8005010:	f7ff ffb4 	bl	8004f7c <led_status>
}
 8005014:	bf00      	nop
 8005016:	bd80      	pop	{r7, pc}

08005018 <led_sequence_returning>:

/**
 * @brief LED sequence for returning
 */
void led_sequence_returning(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
    led_status(0, 1); // Right LED on during return
 800501c:	2101      	movs	r1, #1
 800501e:	2000      	movs	r0, #0
 8005020:	f7ff ffac 	bl	8004f7c <led_status>
}
 8005024:	bf00      	nop
 8005026:	bd80      	pop	{r7, pc}

08005028 <led_sequence_complete>:

/**
 * @brief LED sequence for completion
 */
void led_sequence_complete(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 800502e:	2300      	movs	r3, #0
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	e010      	b.n	8005056 <led_sequence_complete+0x2e>
        led_status(1, 1);
 8005034:	2101      	movs	r1, #1
 8005036:	2001      	movs	r0, #1
 8005038:	f7ff ffa0 	bl	8004f7c <led_status>
        HAL_Delay(200);
 800503c:	20c8      	movs	r0, #200	@ 0xc8
 800503e:	f000 fd8f 	bl	8005b60 <HAL_Delay>
        led_status(0, 0);
 8005042:	2100      	movs	r1, #0
 8005044:	2000      	movs	r0, #0
 8005046:	f7ff ff99 	bl	8004f7c <led_status>
        HAL_Delay(200);
 800504a:	20c8      	movs	r0, #200	@ 0xc8
 800504c:	f000 fd88 	bl	8005b60 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3301      	adds	r3, #1
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b04      	cmp	r3, #4
 800505a:	ddeb      	ble.n	8005034 <led_sequence_complete+0xc>
    }
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <led_sequence_error>:

/**
 * @brief LED sequence for error
 */
void led_sequence_error(void)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {
 800506c:	2300      	movs	r3, #0
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	e010      	b.n	8005094 <led_sequence_error+0x2e>
        led_status(1, 1);
 8005072:	2101      	movs	r1, #1
 8005074:	2001      	movs	r0, #1
 8005076:	f7ff ff81 	bl	8004f7c <led_status>
        HAL_Delay(50);
 800507a:	2032      	movs	r0, #50	@ 0x32
 800507c:	f000 fd70 	bl	8005b60 <HAL_Delay>
        led_status(0, 0);
 8005080:	2100      	movs	r1, #0
 8005082:	2000      	movs	r0, #0
 8005084:	f7ff ff7a 	bl	8004f7c <led_status>
        HAL_Delay(50);
 8005088:	2032      	movs	r0, #50	@ 0x32
 800508a:	f000 fd69 	bl	8005b60 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3301      	adds	r3, #1
 8005092:	607b      	str	r3, [r7, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b09      	cmp	r3, #9
 8005098:	ddeb      	ble.n	8005072 <led_sequence_error+0xc>
    }
}
 800509a:	bf00      	nop
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <get_direction_name>:

/**
 * @brief Get direction name as string
 */
const char* get_direction_name(int direction)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
    switch (direction) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d812      	bhi.n	80050d8 <get_direction_name+0x34>
 80050b2:	a201      	add	r2, pc, #4	@ (adr r2, 80050b8 <get_direction_name+0x14>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050cd 	.word	0x080050cd
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050d5 	.word	0x080050d5
        case NORTH: return "NORTH";
 80050c8:	4b07      	ldr	r3, [pc, #28]	@ (80050e8 <get_direction_name+0x44>)
 80050ca:	e006      	b.n	80050da <get_direction_name+0x36>
        case EAST:  return "EAST";
 80050cc:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <get_direction_name+0x48>)
 80050ce:	e004      	b.n	80050da <get_direction_name+0x36>
        case SOUTH: return "SOUTH";
 80050d0:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <get_direction_name+0x4c>)
 80050d2:	e002      	b.n	80050da <get_direction_name+0x36>
        case WEST:  return "WEST";
 80050d4:	4b07      	ldr	r3, [pc, #28]	@ (80050f4 <get_direction_name+0x50>)
 80050d6:	e000      	b.n	80050da <get_direction_name+0x36>
        default:    return "UNKNOWN";
 80050d8:	4b07      	ldr	r3, [pc, #28]	@ (80050f8 <get_direction_name+0x54>)
    }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	0800eb64 	.word	0x0800eb64
 80050ec:	0800eb6c 	.word	0x0800eb6c
 80050f0:	0800eb74 	.word	0x0800eb74
 80050f4:	0800eb7c 	.word	0x0800eb7c
 80050f8:	0800eb84 	.word	0x0800eb84

080050fc <system_health_check>:

/**
 * @brief System health check
 */
bool system_health_check(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
    bool health_ok = true;
 8005102:	2301      	movs	r3, #1
 8005104:	71fb      	strb	r3, [r7, #7]

    // Check battery voltage
    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 8005106:	4b1a      	ldr	r3, [pc, #104]	@ (8005170 <system_health_check+0x74>)
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800510e:	4293      	cmp	r3, r2
 8005110:	d806      	bhi.n	8005120 <system_health_check+0x24>
        send_bluetooth_message("WARNING: Low battery detected!\r\n");
 8005112:	4818      	ldr	r0, [pc, #96]	@ (8005174 <system_health_check+0x78>)
 8005114:	f7fb ffd4 	bl	80010c0 <send_bluetooth_message>
        play_battery_warning();
 8005118:	f7fb ffb7 	bl	800108a <play_battery_warning>
        health_ok = false;
 800511c:	2300      	movs	r3, #0
 800511e:	71fb      	strb	r3, [r7, #7]
    }

    // Check sensor readings
    if (sensors.front_left == 0 && sensors.front_right == 0 &&
 8005120:	4b13      	ldr	r3, [pc, #76]	@ (8005170 <system_health_check+0x74>)
 8005122:	891b      	ldrh	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d110      	bne.n	800514a <system_health_check+0x4e>
 8005128:	4b11      	ldr	r3, [pc, #68]	@ (8005170 <system_health_check+0x74>)
 800512a:	885b      	ldrh	r3, [r3, #2]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10c      	bne.n	800514a <system_health_check+0x4e>
        sensors.side_left == 0 && sensors.side_right == 0) {
 8005130:	4b0f      	ldr	r3, [pc, #60]	@ (8005170 <system_health_check+0x74>)
 8005132:	88db      	ldrh	r3, [r3, #6]
    if (sensors.front_left == 0 && sensors.front_right == 0 &&
 8005134:	2b00      	cmp	r3, #0
 8005136:	d108      	bne.n	800514a <system_health_check+0x4e>
        sensors.side_left == 0 && sensors.side_right == 0) {
 8005138:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <system_health_check+0x74>)
 800513a:	889b      	ldrh	r3, [r3, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <system_health_check+0x4e>
        send_bluetooth_message("WARNING: All sensors reading zero!\r\n");
 8005140:	480d      	ldr	r0, [pc, #52]	@ (8005178 <system_health_check+0x7c>)
 8005142:	f7fb ffbd 	bl	80010c0 <send_bluetooth_message>
        health_ok = false;
 8005146:	2300      	movs	r3, #0
 8005148:	71fb      	strb	r3, [r7, #7]
    }

    // Check gyroscope communication
    uint8_t gyro_id = mpu9250_read_register(0x75);
 800514a:	2075      	movs	r0, #117	@ 0x75
 800514c:	f7fc f99a 	bl	8001484 <mpu9250_read_register>
 8005150:	4603      	mov	r3, r0
 8005152:	71bb      	strb	r3, [r7, #6]
    if (gyro_id != 0x71) {
 8005154:	79bb      	ldrb	r3, [r7, #6]
 8005156:	2b71      	cmp	r3, #113	@ 0x71
 8005158:	d004      	beq.n	8005164 <system_health_check+0x68>
        send_bluetooth_message("WARNING: Gyroscope communication issue!\r\n");
 800515a:	4808      	ldr	r0, [pc, #32]	@ (800517c <system_health_check+0x80>)
 800515c:	f7fb ffb0 	bl	80010c0 <send_bluetooth_message>
        health_ok = false;
 8005160:	2300      	movs	r3, #0
 8005162:	71fb      	strb	r3, [r7, #7]
    }

    return health_ok;
 8005164:	79fb      	ldrb	r3, [r7, #7]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20001470 	.word	0x20001470
 8005174:	0800eb8c 	.word	0x0800eb8c
 8005178:	0800ebb0 	.word	0x0800ebb0
 800517c:	0800ebd8 	.word	0x0800ebd8

08005180 <clampi_local>:
//            return false;
//        }
//    }
//}

static inline int clampi_local(int v, int lo, int hi) {
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
    return (v < lo) ? lo : (v > hi) ? hi : v;
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	db05      	blt.n	80051a0 <clampi_local+0x20>
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4293      	cmp	r3, r2
 800519a:	bfa8      	it	ge
 800519c:	4613      	movge	r3, r2
 800519e:	e000      	b.n	80051a2 <clampi_local+0x22>
 80051a0:	68bb      	ldr	r3, [r7, #8]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <align_front_to_wall>:

#define target_align 80

bool align_front_to_wall(int base_pwm, uint32_t timeout_ms)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b0a0      	sub	sp, #128	@ 0x80
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
    // ---- Your gains (unchanged) ----
    const float Kp_d = 30.0f, Ki_d = 0.3f;   // distance PI
 80051ba:	4bb0      	ldr	r3, [pc, #704]	@ (800547c <align_front_to_wall+0x2cc>)
 80051bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80051be:	4bb0      	ldr	r3, [pc, #704]	@ (8005480 <align_front_to_wall+0x2d0>)
 80051c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float Kp_a = 10.5f, Ki_a = 0.1f;   // angle PI
 80051c2:	4bb0      	ldr	r3, [pc, #704]	@ (8005484 <align_front_to_wall+0x2d4>)
 80051c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051c6:	4bb0      	ldr	r3, [pc, #704]	@ (8005488 <align_front_to_wall+0x2d8>)
 80051c8:	657b      	str	r3, [r7, #84]	@ 0x54

    // ---- Small bias to kill steady left drift (counts). Try 0, then -1 or -2 if it still nudges left. ----
    const int   ANG_BIAS = 0;    // negative -> adds a tiny right-turn tendency
 80051ca:	2300      	movs	r3, #0
 80051cc:	653b      	str	r3, [r7, #80]	@ 0x50

    // ---- Finish criteria (unchanged) ----
    const int   DIST_TOL = 10;         // counts
 80051ce:	230a      	movs	r3, #10
 80051d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const int   ANG_TOL  = 12;         // counts
 80051d2:	230c      	movs	r3, #12
 80051d4:	64bb      	str	r3, [r7, #72]	@ 0x48
    const uint32_t STABLE_DWELL_MS = 150;
 80051d6:	2396      	movs	r3, #150	@ 0x96
 80051d8:	647b      	str	r3, [r7, #68]	@ 0x44

    // ---- Output constraints (unchanged idea) ----
    const int PWM_MAX = base_pwm;      // clamp final wheel cmds
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	643b      	str	r3, [r7, #64]	@ 0x40
    const int PWM_MIN_MOVE = 500;      // measured deadzone threshold
 80051de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Integrators
    float I_d = 0.0f, I_a = 0.0f;
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	67bb      	str	r3, [r7, #120]	@ 0x78

    uint32_t t0 = HAL_GetTick();
 80051f0:	f000 fcaa 	bl	8005b48 <HAL_GetTick>
 80051f4:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t last_ok = 0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t last_tick = HAL_GetTick();
 80051fa:	f000 fca5 	bl	8005b48 <HAL_GetTick>
 80051fe:	6738      	str	r0, [r7, #112]	@ 0x70

    // reset motors
    motor_set(0, true, 0);
 8005200:	2200      	movs	r2, #0
 8005202:	2101      	movs	r1, #1
 8005204:	2000      	movs	r0, #0
 8005206:	f7fe fd01 	bl	8003c0c <motor_set>
    motor_set(1, true, 0);
 800520a:	2200      	movs	r2, #0
 800520c:	2101      	movs	r1, #1
 800520e:	2001      	movs	r0, #1
 8005210:	f7fe fcfc 	bl	8003c0c <motor_set>

    while (1) {
        // --- timing / dt ---
        uint32_t now = HAL_GetTick();
 8005214:	f000 fc98 	bl	8005b48 <HAL_GetTick>
 8005218:	6378      	str	r0, [r7, #52]	@ 0x34
        float dt = (now - last_tick) / 1000.0f;
 800521a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800521c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	ee07 3a90 	vmov	s15, r3
 8005224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005228:	eddf 6a98 	vldr	s13, [pc, #608]	@ 800548c <align_front_to_wall+0x2dc>
 800522c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005230:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
        if (dt <= 0) dt = 0.001f;
 8005234:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8005238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800523c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005240:	d801      	bhi.n	8005246 <align_front_to_wall+0x96>
 8005242:	4b93      	ldr	r3, [pc, #588]	@ (8005490 <align_front_to_wall+0x2e0>)
 8005244:	66fb      	str	r3, [r7, #108]	@ 0x6c
        last_tick = now;
 8005246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005248:	673b      	str	r3, [r7, #112]	@ 0x70

        // --- sensors ---
        update_sensors();
 800524a:	f7ff f973 	bl	8004534 <update_sensors>
        int FL = (int)sensors.front_left;
 800524e:	4b91      	ldr	r3, [pc, #580]	@ (8005494 <align_front_to_wall+0x2e4>)
 8005250:	891b      	ldrh	r3, [r3, #8]
 8005252:	633b      	str	r3, [r7, #48]	@ 0x30
        int FR = (int)sensors.front_right;
 8005254:	4b8f      	ldr	r3, [pc, #572]	@ (8005494 <align_front_to_wall+0x2e4>)
 8005256:	885b      	ldrh	r3, [r3, #2]
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // --- errors (raw counts) ---
        int eL = FL - (int)target_align;
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	3b50      	subs	r3, #80	@ 0x50
 800525e:	62bb      	str	r3, [r7, #40]	@ 0x28
        int eR = FR - (int)target_align;
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005262:	3b50      	subs	r3, #80	@ 0x50
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24

        // distance = average; angle = left-right diff (+ means left closer). Add tiny bias to cancel drift.
        float e_dist = 0.5f * (eL + eR);
 8005266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	4413      	add	r3, r2
 800526c:	ee07 3a90 	vmov	s15, r3
 8005270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005274:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800527c:	edc7 7a08 	vstr	s15, [r7, #32]
        float e_ang  = (float)(eL - eR + ANG_BIAS);
 8005280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	1ad2      	subs	r2, r2, r3
 8005286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005288:	4413      	add	r3, r2
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005292:	edc7 7a07 	vstr	s15, [r7, #28]

        // --- PI controllers ---
        I_d += e_dist * dt;
 8005296:	ed97 7a08 	vldr	s14, [r7, #32]
 800529a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80052a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052aa:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        I_a += e_ang  * dt;
 80052ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80052b2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80052b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ba:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80052be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c2:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

        // simple clamps to keep integrators sane
        if (I_d > 100.0f) I_d = 100.0f;
 80052c6:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80052ca:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8005498 <align_front_to_wall+0x2e8>
 80052ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d6:	dd01      	ble.n	80052dc <align_front_to_wall+0x12c>
 80052d8:	4b70      	ldr	r3, [pc, #448]	@ (800549c <align_front_to_wall+0x2ec>)
 80052da:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (I_d < -100.0f) I_d = -100.0f;
 80052dc:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80052e0:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80054a0 <align_front_to_wall+0x2f0>
 80052e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ec:	d501      	bpl.n	80052f2 <align_front_to_wall+0x142>
 80052ee:	4b6d      	ldr	r3, [pc, #436]	@ (80054a4 <align_front_to_wall+0x2f4>)
 80052f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (I_a > 100.0f) I_a = 100.0f;
 80052f2:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80052f6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005498 <align_front_to_wall+0x2e8>
 80052fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005302:	dd01      	ble.n	8005308 <align_front_to_wall+0x158>
 8005304:	4b65      	ldr	r3, [pc, #404]	@ (800549c <align_front_to_wall+0x2ec>)
 8005306:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (I_a < -100.0f) I_a = -100.0f;
 8005308:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800530c:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80054a0 <align_front_to_wall+0x2f0>
 8005310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005318:	d501      	bpl.n	800531e <align_front_to_wall+0x16e>
 800531a:	4b62      	ldr	r3, [pc, #392]	@ (80054a4 <align_front_to_wall+0x2f4>)
 800531c:	67bb      	str	r3, [r7, #120]	@ 0x78

        float v = Kp_d * e_dist + Ki_d * I_d;  // forward/back command  (- = back, + = forward)
 800531e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005322:	edd7 7a08 	vldr	s15, [r7, #32]
 8005326:	ee27 7a27 	vmul.f32	s14, s14, s15
 800532a:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800532e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8005332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800533a:	edc7 7a06 	vstr	s15, [r7, #24]
        float w = Kp_a * e_ang  + Ki_a * I_a;  // turn command          (- = turn right, + = left)
 800533e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8005342:	edd7 7a07 	vldr	s15, [r7, #28]
 8005346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800534a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800534e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8005352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800535a:	edc7 7a05 	vstr	s15, [r7, #20]

        // per-wheel raw commands (signed) — keep your mixing/signs
        int cmd_left  = (int)lroundf(-v - w);
 800535e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005362:	eeb1 7a67 	vneg.f32	s14, s15
 8005366:	edd7 7a05 	vldr	s15, [r7, #20]
 800536a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800536e:	eeb0 0a67 	vmov.f32	s0, s15
 8005372:	f007 fdf1 	bl	800cf58 <lroundf>
 8005376:	66b8      	str	r0, [r7, #104]	@ 0x68
        int cmd_right = (int)lroundf(-v + w);
 8005378:	ed97 7a05 	vldr	s14, [r7, #20]
 800537c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005384:	eeb0 0a67 	vmov.f32	s0, s15
 8005388:	f007 fde6 	bl	800cf58 <lroundf>
 800538c:	6678      	str	r0, [r7, #100]	@ 0x64

        // saturate
        cmd_left  = clampi_local(cmd_left,  -PWM_MAX, PWM_MAX);
 800538e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005390:	425b      	negs	r3, r3
 8005392:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005394:	4619      	mov	r1, r3
 8005396:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005398:	f7ff fef2 	bl	8005180 <clampi_local>
 800539c:	66b8      	str	r0, [r7, #104]	@ 0x68
        cmd_right = clampi_local(cmd_right, -PWM_MAX, PWM_MAX);
 800539e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a0:	425b      	negs	r3, r3
 80053a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053a4:	4619      	mov	r1, r3
 80053a6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80053a8:	f7ff feea 	bl	8005180 <clampi_local>
 80053ac:	6678      	str	r0, [r7, #100]	@ 0x64

        // --- convergence check *before* applying min-move ---
        bool dist_ok = (abs((int)lroundf(e_dist)) <= DIST_TOL);
 80053ae:	ed97 0a08 	vldr	s0, [r7, #32]
 80053b2:	f007 fdd1 	bl	800cf58 <lroundf>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bfb8      	it	lt
 80053bc:	425b      	neglt	r3, r3
 80053be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053c0:	429a      	cmp	r2, r3
 80053c2:	bfac      	ite	ge
 80053c4:	2301      	movge	r3, #1
 80053c6:	2300      	movlt	r3, #0
 80053c8:	74fb      	strb	r3, [r7, #19]
        bool ang_ok  = (abs((int)lroundf(e_ang))  <= ANG_TOL);
 80053ca:	ed97 0a07 	vldr	s0, [r7, #28]
 80053ce:	f007 fdc3 	bl	800cf58 <lroundf>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bfb8      	it	lt
 80053d8:	425b      	neglt	r3, r3
 80053da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053dc:	429a      	cmp	r2, r3
 80053de:	bfac      	ite	ge
 80053e0:	2301      	movge	r3, #1
 80053e2:	2300      	movlt	r3, #0
 80053e4:	74bb      	strb	r3, [r7, #18]
        bool nearly_done = (dist_ok && ang_ok);
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d004      	beq.n	80053f6 <align_front_to_wall+0x246>
 80053ec:	7cbb      	ldrb	r3, [r7, #18]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <align_front_to_wall+0x246>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <align_front_to_wall+0x248>
 80053f6:	2300      	movs	r3, #0
 80053f8:	747b      	strb	r3, [r7, #17]
 80053fa:	7c7b      	ldrb	r3, [r7, #17]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	747b      	strb	r3, [r7, #17]

        // --- stiction handling ---
        // If we're NOT nearly done, enforce a minimum to break deadzone.
        // If we ARE nearly done, DON'T enforce min move — brake instead to avoid creeping.
        if (!nearly_done) {
 8005402:	7c7b      	ldrb	r3, [r7, #17]
 8005404:	f083 0301 	eor.w	r3, r3, #1
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d028      	beq.n	8005460 <align_front_to_wall+0x2b0>
            if (cmd_left > 0  && cmd_left  < PWM_MIN_MOVE) cmd_left  = PWM_MIN_MOVE;
 800540e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005410:	2b00      	cmp	r3, #0
 8005412:	dd05      	ble.n	8005420 <align_front_to_wall+0x270>
 8005414:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005418:	429a      	cmp	r2, r3
 800541a:	da01      	bge.n	8005420 <align_front_to_wall+0x270>
 800541c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541e:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (cmd_left < 0  && -cmd_left < PWM_MIN_MOVE) cmd_left  = -PWM_MIN_MOVE;
 8005420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005422:	2b00      	cmp	r3, #0
 8005424:	da07      	bge.n	8005436 <align_front_to_wall+0x286>
 8005426:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005428:	425b      	negs	r3, r3
 800542a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800542c:	429a      	cmp	r2, r3
 800542e:	dd02      	ble.n	8005436 <align_front_to_wall+0x286>
 8005430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005432:	425b      	negs	r3, r3
 8005434:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (cmd_right > 0 && cmd_right < PWM_MIN_MOVE) cmd_right = PWM_MIN_MOVE;
 8005436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005438:	2b00      	cmp	r3, #0
 800543a:	dd05      	ble.n	8005448 <align_front_to_wall+0x298>
 800543c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800543e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005440:	429a      	cmp	r2, r3
 8005442:	da01      	bge.n	8005448 <align_front_to_wall+0x298>
 8005444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005446:	667b      	str	r3, [r7, #100]	@ 0x64
            if (cmd_right < 0 && -cmd_right < PWM_MIN_MOVE) cmd_right = -PWM_MIN_MOVE;
 8005448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800544a:	2b00      	cmp	r3, #0
 800544c:	da0c      	bge.n	8005468 <align_front_to_wall+0x2b8>
 800544e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005450:	425b      	negs	r3, r3
 8005452:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005454:	429a      	cmp	r2, r3
 8005456:	dd07      	ble.n	8005468 <align_front_to_wall+0x2b8>
 8005458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800545a:	425b      	negs	r3, r3
 800545c:	667b      	str	r3, [r7, #100]	@ 0x64
 800545e:	e003      	b.n	8005468 <align_front_to_wall+0x2b8>
        } else {
            // close enough: stop and actively brake so it doesn't coast/creep left
            cmd_left = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	66bb      	str	r3, [r7, #104]	@ 0x68
            cmd_right = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	667b      	str	r3, [r7, #100]	@ 0x64
        }

        // --- drive / brake ---
        if (cmd_left == 0 && cmd_right == 0) {
 8005468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800546a:	2b00      	cmp	r3, #0
 800546c:	d11c      	bne.n	80054a8 <align_front_to_wall+0x2f8>
 800546e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005470:	2b00      	cmp	r3, #0
 8005472:	d119      	bne.n	80054a8 <align_front_to_wall+0x2f8>
            break_motors();  // actively short the motors to kill drift
 8005474:	f7fe fb3c 	bl	8003af0 <break_motors>
 8005478:	e034      	b.n	80054e4 <align_front_to_wall+0x334>
 800547a:	bf00      	nop
 800547c:	41f00000 	.word	0x41f00000
 8005480:	3e99999a 	.word	0x3e99999a
 8005484:	41280000 	.word	0x41280000
 8005488:	3dcccccd 	.word	0x3dcccccd
 800548c:	447a0000 	.word	0x447a0000
 8005490:	3a83126f 	.word	0x3a83126f
 8005494:	20001470 	.word	0x20001470
 8005498:	42c80000 	.word	0x42c80000
 800549c:	42c80000 	.word	0x42c80000
 80054a0:	c2c80000 	.word	0xc2c80000
 80054a4:	c2c80000 	.word	0xc2c80000
        } else {
            bool lfwd = (cmd_left  >= 0);
 80054a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054aa:	43db      	mvns	r3, r3
 80054ac:	0fdb      	lsrs	r3, r3, #31
 80054ae:	743b      	strb	r3, [r7, #16]
            bool rfwd = (cmd_right >= 0);
 80054b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054b2:	43db      	mvns	r3, r3
 80054b4:	0fdb      	lsrs	r3, r3, #31
 80054b6:	73fb      	strb	r3, [r7, #15]
            uint16_t lduty = (uint16_t)abs(cmd_left);
 80054b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bfb8      	it	lt
 80054be:	425b      	neglt	r3, r3
 80054c0:	81bb      	strh	r3, [r7, #12]
            uint16_t rduty = (uint16_t)abs(cmd_right);
 80054c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bfb8      	it	lt
 80054c8:	425b      	neglt	r3, r3
 80054ca:	817b      	strh	r3, [r7, #10]
            motor_set(0, lfwd, lduty);
 80054cc:	89ba      	ldrh	r2, [r7, #12]
 80054ce:	7c3b      	ldrb	r3, [r7, #16]
 80054d0:	4619      	mov	r1, r3
 80054d2:	2000      	movs	r0, #0
 80054d4:	f7fe fb9a 	bl	8003c0c <motor_set>
            motor_set(1, rfwd, rduty);
 80054d8:	897a      	ldrh	r2, [r7, #10]
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	4619      	mov	r1, r3
 80054de:	2001      	movs	r0, #1
 80054e0:	f7fe fb94 	bl	8003c0c <motor_set>
        }

        // --- dwell-based success ---
        if (nearly_done) {
 80054e4:	7c7b      	ldrb	r3, [r7, #17]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00e      	beq.n	8005508 <align_front_to_wall+0x358>
            if (last_ok == 0) last_ok = now;
 80054ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <align_front_to_wall+0x344>
 80054f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f2:	677b      	str	r3, [r7, #116]	@ 0x74
            if ((now - last_ok) >= STABLE_DWELL_MS) {
 80054f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d805      	bhi.n	800550c <align_front_to_wall+0x35c>
                break_motors();
 8005500:	f7fe faf6 	bl	8003af0 <break_motors>
                return true;
 8005504:	2301      	movs	r3, #1
 8005506:	e00b      	b.n	8005520 <align_front_to_wall+0x370>
            }
        } else {
            last_ok = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        // --- timeout ---
        if ((now - t0) > timeout_ms) {
 800550c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800550e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	f4bf ae7d 	bcs.w	8005214 <align_front_to_wall+0x64>
            break_motors();
 800551a:	f7fe fae9 	bl	8003af0 <break_motors>
            return false;
 800551e:	2300      	movs	r3, #0
        }
    }
}
 8005520:	4618      	mov	r0, r3
 8005522:	3780      	adds	r7, #128	@ 0x80
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <lut_lookup>:


// ---------- Helper: Linear interpolation lookup ----------
// ---------- Helper: Linear interpolation lookup ----------
static float lut_lookup(int raw, const int *adc_table, const float *dist_table, int size)
{
 8005528:	b480      	push	{r7}
 800552a:	b08b      	sub	sp, #44	@ 0x2c
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
    if (raw >= adc_table[0]){
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	429a      	cmp	r2, r3
 800553e:	db03      	blt.n	8005548 <lut_lookup+0x20>
    	return dist_table[0];
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	edd3 7a00 	vldr	s15, [r3]
 8005546:	e06b      	b.n	8005620 <lut_lookup+0xf8>
    }
    if (raw <= adc_table[size-1]){
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800554e:	3b01      	subs	r3, #1
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4413      	add	r3, r2
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	429a      	cmp	r2, r3
 800555c:	dc09      	bgt.n	8005572 <lut_lookup+0x4a>
    	return dist_table[size-1];
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005564:	3b01      	subs	r3, #1
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	4413      	add	r3, r2
 800556c:	edd3 7a00 	vldr	s15, [r3]
 8005570:	e056      	b.n	8005620 <lut_lookup+0xf8>
    }

    for (int i = 0; i < size - 1; ++i) {
 8005572:	2300      	movs	r3, #0
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
 8005576:	e045      	b.n	8005604 <lut_lookup+0xdc>
        int a_hi = adc_table[i], a_lo = adc_table[i+1];
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	4413      	add	r3, r2
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	3301      	adds	r3, #1
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	4413      	add	r3, r2
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	61fb      	str	r3, [r7, #28]
        if (raw <= a_hi && raw >= a_lo) {
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	429a      	cmp	r2, r3
 8005598:	dc31      	bgt.n	80055fe <lut_lookup+0xd6>
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	429a      	cmp	r2, r3
 80055a0:	db2d      	blt.n	80055fe <lut_lookup+0xd6>
            float t   = (float)(raw - a_lo) / (float)(a_hi - a_lo); // 0..1
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	ee07 3a90 	vmov	s15, r3
 80055ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c2:	edc7 7a06 	vstr	s15, [r7, #24]
            float dhi = dist_table[i], dlo = dist_table[i+1];
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	3301      	adds	r3, #1
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	4413      	add	r3, r2
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	613b      	str	r3, [r7, #16]
            return dlo + t * (dhi - dlo);
 80055e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80055e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80055e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80055f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80055f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055fc:	e010      	b.n	8005620 <lut_lookup+0xf8>
    for (int i = 0; i < size - 1; ++i) {
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	3301      	adds	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	3b01      	subs	r3, #1
 8005608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800560a:	429a      	cmp	r2, r3
 800560c:	dbb4      	blt.n	8005578 <lut_lookup+0x50>
        }
    }
    return dist_table[size-1];
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005614:	3b01      	subs	r3, #1
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4413      	add	r3, r2
 800561c:	edd3 7a00 	vldr	s15, [r3]
}
 8005620:	eeb0 0a67 	vmov.f32	s0, s15
 8005624:	372c      	adds	r7, #44	@ 0x2c
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <clampi>:
static uint32_t wf_last_ms = 0;

static float target_left  = 2.5f;   // desired left wall distance (cm)
static float target_right = 2.5f;// desired right wall distance (cm)

static inline int clampi(int v, int lo, int hi) { return v < lo ? lo : (v > hi ? hi : v); }
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	db05      	blt.n	800564e <clampi+0x20>
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4293      	cmp	r3, r2
 8005648:	bfa8      	it	ge
 800564a:	4613      	movge	r3, r2
 800564c:	e000      	b.n	8005650 <clampi+0x22>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <clampf>:
static inline float clampf(float v, float lo, float hi){ return v < lo ? lo : (v > hi ? hi : v); }
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	ed87 0a03 	vstr	s0, [r7, #12]
 8005666:	edc7 0a02 	vstr	s1, [r7, #8]
 800566a:	ed87 1a01 	vstr	s2, [r7, #4]
 800566e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005672:	edd7 7a02 	vldr	s15, [r7, #8]
 8005676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800567a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567e:	d501      	bpl.n	8005684 <clampf+0x28>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	e00b      	b.n	800569c <clampf+0x40>
 8005684:	ed97 7a03 	vldr	s14, [r7, #12]
 8005688:	edd7 7a01 	vldr	s15, [r7, #4]
 800568c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005694:	dd01      	ble.n	800569a <clampf+0x3e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	e000      	b.n	800569c <clampf+0x40>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	ee07 3a90 	vmov	s15, r3
 80056a0:	eeb0 0a67 	vmov.f32	s0, s15
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <wall_follow_reset_int>:
//void wall_follow_reset_int(int mode, int base_pwm);   // forward decl
//void wall_follow_step(void);                          // forward decl

// Call once before starting wall-follow
void wall_follow_reset_int(int mode, int base_pwm)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
    wf_mode = (mode == 1) ? WF_LEFT : (mode == 2) ? WF_RIGHT : WF_AUTO;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d006      	beq.n	80056ce <wall_follow_reset_int+0x1e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d101      	bne.n	80056ca <wall_follow_reset_int+0x1a>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e002      	b.n	80056d0 <wall_follow_reset_int+0x20>
 80056ca:	2300      	movs	r3, #0
 80056cc:	e000      	b.n	80056d0 <wall_follow_reset_int+0x20>
 80056ce:	2301      	movs	r3, #1
 80056d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005708 <wall_follow_reset_int+0x58>)
 80056d2:	7013      	strb	r3, [r2, #0]
    WF_BASE_PWM = base_pwm;
 80056d4:	4a0d      	ldr	r2, [pc, #52]	@ (800570c <wall_follow_reset_int+0x5c>)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6013      	str	r3, [r2, #0]

    e_int = 0.0f; e_prev = 0.0f; d_filt = 0.0f;
 80056da:	4b0d      	ldr	r3, [pc, #52]	@ (8005710 <wall_follow_reset_int+0x60>)
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005714 <wall_follow_reset_int+0x64>)
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <wall_follow_reset_int+0x68>)
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
    wf_last_ms = HAL_GetTick();
 80056f2:	f000 fa29 	bl	8005b48 <HAL_GetTick>
 80056f6:	4603      	mov	r3, r0
 80056f8:	4a08      	ldr	r2, [pc, #32]	@ (800571c <wall_follow_reset_int+0x6c>)
 80056fa:	6013      	str	r3, [r2, #0]
    update_sensors();
 80056fc:	f7fe ff1a 	bl	8004534 <update_sensors>

    // bootstrap targets from current readings (prevents initial jump)
    //target_left  = (float)sensors.side_left;
    //target_right = (float)sensors.side_right;
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20001d90 	.word	0x20001d90
 800570c:	20000030 	.word	0x20000030
 8005710:	20001d94 	.word	0x20001d94
 8005714:	20001d98 	.word	0x20001d98
 8005718:	20001d9c 	.word	0x20001d9c
 800571c:	20001da0 	.word	0x20001da0

08005720 <wall_follow_step>:

// One control step; call at ~200–500 Hz inside your loop
void wall_follow_step(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08c      	sub	sp, #48	@ 0x30
 8005724:	af00      	add	r7, sp, #0
    // Get fresh sensors (uses your emitter-sync diff scheme)
    update_sensors();  // reads FL/FR/SL/SR and sets wall flags
 8005726:	f7fe ff05 	bl	8004534 <update_sensors>

    // dt
    uint32_t now = HAL_GetTick();
 800572a:	f000 fa0d 	bl	8005b48 <HAL_GetTick>
 800572e:	61f8      	str	r0, [r7, #28]
    float dt = (now - wf_last_ms) / 1000.0f;
 8005730:	4ba6      	ldr	r3, [pc, #664]	@ (80059cc <wall_follow_step+0x2ac>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	ee07 3a90 	vmov	s15, r3
 800573c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005740:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80059d0 <wall_follow_step+0x2b0>
 8005744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005748:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dt <= 0.0f) dt = 0.001f;
 800574c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005758:	d801      	bhi.n	800575e <wall_follow_step+0x3e>
 800575a:	4b9e      	ldr	r3, [pc, #632]	@ (80059d4 <wall_follow_step+0x2b4>)
 800575c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    wf_last_ms = now;
 800575e:	4a9b      	ldr	r2, [pc, #620]	@ (80059cc <wall_follow_step+0x2ac>)
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	6013      	str	r3, [r2, #0]

    // Determine mode automatically if requested
    bool Lw = sensors.wall_left;
 8005764:	4b9c      	ldr	r3, [pc, #624]	@ (80059d8 <wall_follow_step+0x2b8>)
 8005766:	7adb      	ldrb	r3, [r3, #11]
 8005768:	76fb      	strb	r3, [r7, #27]
    bool Rw = sensors.wall_right;
 800576a:	4b9b      	ldr	r3, [pc, #620]	@ (80059d8 <wall_follow_step+0x2b8>)
 800576c:	7b1b      	ldrb	r3, [r3, #12]
 800576e:	76bb      	strb	r3, [r7, #26]
    bool Fw = sensors.wall_front;
 8005770:	4b99      	ldr	r3, [pc, #612]	@ (80059d8 <wall_follow_step+0x2b8>)
 8005772:	7a9b      	ldrb	r3, [r3, #10]
 8005774:	767b      	strb	r3, [r7, #25]

    if (wf_mode == WF_AUTO) {
 8005776:	4b99      	ldr	r3, [pc, #612]	@ (80059dc <wall_follow_step+0x2bc>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d11a      	bne.n	80057b4 <wall_follow_step+0x94>
        if (Lw && Rw)       wf_mode = WF_AUTO;   // center using both
 800577e:	7efb      	ldrb	r3, [r7, #27]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d006      	beq.n	8005792 <wall_follow_step+0x72>
 8005784:	7ebb      	ldrb	r3, [r7, #26]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <wall_follow_step+0x72>
 800578a:	4b94      	ldr	r3, [pc, #592]	@ (80059dc <wall_follow_step+0x2bc>)
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	e010      	b.n	80057b4 <wall_follow_step+0x94>
        else if (Lw)        wf_mode = WF_LEFT;
 8005792:	7efb      	ldrb	r3, [r7, #27]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <wall_follow_step+0x80>
 8005798:	4b90      	ldr	r3, [pc, #576]	@ (80059dc <wall_follow_step+0x2bc>)
 800579a:	2201      	movs	r2, #1
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	e009      	b.n	80057b4 <wall_follow_step+0x94>
        else if (Rw)        wf_mode = WF_RIGHT;
 80057a0:	7ebb      	ldrb	r3, [r7, #26]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <wall_follow_step+0x8e>
 80057a6:	4b8d      	ldr	r3, [pc, #564]	@ (80059dc <wall_follow_step+0x2bc>)
 80057a8:	2202      	movs	r2, #2
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	e002      	b.n	80057b4 <wall_follow_step+0x94>
        else                wf_mode = WF_AUTO;   // nothing: just go straight
 80057ae:	4b8b      	ldr	r3, [pc, #556]	@ (80059dc <wall_follow_step+0x2bc>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	701a      	strb	r2, [r3, #0]
    }

    // Log-ratio error; positive => closer to LEFT (so slow left / speed right)
    // Add +1.0f to avoid log(0). Use both-wall centering if available, else single-wall track.
    float e = 0.0f;
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    //float L=3.4f;
    float L = lut_lookup(sensors.side_left,  left_adc,  left_dist,  L_LUT_SIZE);
 80057ba:	4b87      	ldr	r3, [pc, #540]	@ (80059d8 <wall_follow_step+0x2b8>)
 80057bc:	88db      	ldrh	r3, [r3, #6]
 80057be:	4618      	mov	r0, r3
 80057c0:	2320      	movs	r3, #32
 80057c2:	4a87      	ldr	r2, [pc, #540]	@ (80059e0 <wall_follow_step+0x2c0>)
 80057c4:	4987      	ldr	r1, [pc, #540]	@ (80059e4 <wall_follow_step+0x2c4>)
 80057c6:	f7ff feaf 	bl	8005528 <lut_lookup>
 80057ca:	ed87 0a05 	vstr	s0, [r7, #20]
    float R = lut_lookup(sensors.side_right, right_adc, right_dist, R_LUT_SIZE);
 80057ce:	4b82      	ldr	r3, [pc, #520]	@ (80059d8 <wall_follow_step+0x2b8>)
 80057d0:	889b      	ldrh	r3, [r3, #4]
 80057d2:	4618      	mov	r0, r3
 80057d4:	2321      	movs	r3, #33	@ 0x21
 80057d6:	4a84      	ldr	r2, [pc, #528]	@ (80059e8 <wall_follow_step+0x2c8>)
 80057d8:	4984      	ldr	r1, [pc, #528]	@ (80059ec <wall_follow_step+0x2cc>)
 80057da:	f7ff fea5 	bl	8005528 <lut_lookup>
 80057de:	ed87 0a04 	vstr	s0, [r7, #16]

    if (Lw && Rw ){
 80057e2:	7efb      	ldrb	r3, [r7, #27]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00c      	beq.n	8005802 <wall_follow_step+0xe2>
 80057e8:	7ebb      	ldrb	r3, [r7, #26]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d009      	beq.n	8005802 <wall_follow_step+0xe2>
    	// Both walls: balance distances
    	//L = lut_lookup(sensors.side_left,  left_adc,  left_dist,  L_LUT_SIZE);
    	//float R = lut_lookup(sensors.side_right, right_adc, right_dist, R_LUT_SIZE);
    	e = target_left - L;
 80057ee:	4b80      	ldr	r3, [pc, #512]	@ (80059f0 <wall_follow_step+0x2d0>)
 80057f0:	ed93 7a00 	vldr	s14, [r3]
 80057f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80057f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8005800:	e01c      	b.n	800583c <wall_follow_step+0x11c>



    } else if (Lw) {
 8005802:	7efb      	ldrb	r3, [r7, #27]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <wall_follow_step+0xfc>
    	// Left wall only: hold target distance
    	//L = lut_lookup(sensors.side_left, left_adc, left_dist, L_LUT_SIZE);
    	e = target_left - L;
 8005808:	4b79      	ldr	r3, [pc, #484]	@ (80059f0 <wall_follow_step+0x2d0>)
 800580a:	ed93 7a00 	vldr	s14, [r3]
 800580e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005816:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 800581a:	e00f      	b.n	800583c <wall_follow_step+0x11c>


    } else if (Rw) {
 800581c:	7ebb      	ldrb	r3, [r7, #26]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d009      	beq.n	8005836 <wall_follow_step+0x116>
    	// Right wall only: hold target distance
    	//float R = lut_lookup(sensors.side_right, right_adc, right_dist, R_LUT_SIZE);
    	e = R - target_right;
 8005822:	4b74      	ldr	r3, [pc, #464]	@ (80059f4 <wall_follow_step+0x2d4>)
 8005824:	edd3 7a00 	vldr	s15, [r3]
 8005828:	ed97 7a04 	vldr	s14, [r7, #16]
 800582c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005830:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8005834:	e002      	b.n	800583c <wall_follow_step+0x11c>

      } else {
        // No side walls -> no correction (let heading/gyro PID handle straightness if you run it)
        e = 0.0f;
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	62bb      	str	r3, [r7, #40]	@ 0x28

      }

    // PID on error
    e_int += e * dt;
 800583c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005840:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005848:	4b6b      	ldr	r3, [pc, #428]	@ (80059f8 <wall_follow_step+0x2d8>)
 800584a:	edd3 7a00 	vldr	s15, [r3]
 800584e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005852:	4b69      	ldr	r3, [pc, #420]	@ (80059f8 <wall_follow_step+0x2d8>)
 8005854:	edc3 7a00 	vstr	s15, [r3]
    e_int  = clampf(e_int, -WF_INT_LIMIT, WF_INT_LIMIT);
 8005858:	4b67      	ldr	r3, [pc, #412]	@ (80059f8 <wall_follow_step+0x2d8>)
 800585a:	ed93 7a00 	vldr	s14, [r3]
 800585e:	4b67      	ldr	r3, [pc, #412]	@ (80059fc <wall_follow_step+0x2dc>)
 8005860:	edd3 7a00 	vldr	s15, [r3]
 8005864:	eef1 7a67 	vneg.f32	s15, s15
 8005868:	4b64      	ldr	r3, [pc, #400]	@ (80059fc <wall_follow_step+0x2dc>)
 800586a:	edd3 6a00 	vldr	s13, [r3]
 800586e:	eeb0 1a66 	vmov.f32	s2, s13
 8005872:	eef0 0a67 	vmov.f32	s1, s15
 8005876:	eeb0 0a47 	vmov.f32	s0, s14
 800587a:	f7ff feef 	bl	800565c <clampf>
 800587e:	eef0 7a40 	vmov.f32	s15, s0
 8005882:	4b5d      	ldr	r3, [pc, #372]	@ (80059f8 <wall_follow_step+0x2d8>)
 8005884:	edc3 7a00 	vstr	s15, [r3]

    float d_raw = (e - e_prev) / dt;
 8005888:	4b5d      	ldr	r3, [pc, #372]	@ (8005a00 <wall_follow_step+0x2e0>)
 800588a:	edd3 7a00 	vldr	s15, [r3]
 800588e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005892:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005896:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800589a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800589e:	edc7 7a03 	vstr	s15, [r7, #12]
    d_filt = WF_DERIV_ALPHA * d_filt + (1.0f - WF_DERIV_ALPHA) * d_raw;
 80058a2:	4b58      	ldr	r3, [pc, #352]	@ (8005a04 <wall_follow_step+0x2e4>)
 80058a4:	ed93 7a00 	vldr	s14, [r3]
 80058a8:	4b57      	ldr	r3, [pc, #348]	@ (8005a08 <wall_follow_step+0x2e8>)
 80058aa:	edd3 7a00 	vldr	s15, [r3]
 80058ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058b2:	4b54      	ldr	r3, [pc, #336]	@ (8005a04 <wall_follow_step+0x2e4>)
 80058b4:	edd3 7a00 	vldr	s15, [r3]
 80058b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80058c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80058c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058cc:	4b4e      	ldr	r3, [pc, #312]	@ (8005a08 <wall_follow_step+0x2e8>)
 80058ce:	edc3 7a00 	vstr	s15, [r3]

    float u_norm = WF_KP*e + WF_KI*e_int + WF_KD*d_filt;  // u > 0 => speed up right / slow left
 80058d2:	4b4e      	ldr	r3, [pc, #312]	@ (8005a0c <wall_follow_step+0x2ec>)
 80058d4:	ed93 7a00 	vldr	s14, [r3]
 80058d8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80058dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005a10 <wall_follow_step+0x2f0>)
 80058e2:	edd3 6a00 	vldr	s13, [r3]
 80058e6:	4b44      	ldr	r3, [pc, #272]	@ (80059f8 <wall_follow_step+0x2d8>)
 80058e8:	edd3 7a00 	vldr	s15, [r3]
 80058ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058f4:	4b47      	ldr	r3, [pc, #284]	@ (8005a14 <wall_follow_step+0x2f4>)
 80058f6:	edd3 6a00 	vldr	s13, [r3]
 80058fa:	4b43      	ldr	r3, [pc, #268]	@ (8005a08 <wall_follow_step+0x2e8>)
 80058fc:	edd3 7a00 	vldr	s15, [r3]
 8005900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005908:	edc7 7a02 	vstr	s15, [r7, #8]
    float u = u_norm * WF_U_SCALE;
 800590c:	4b42      	ldr	r3, [pc, #264]	@ (8005a18 <wall_follow_step+0x2f8>)
 800590e:	edd3 7a00 	vldr	s15, [r3]
 8005912:	ed97 7a02 	vldr	s14, [r7, #8]
 8005916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591a:	edc7 7a01 	vstr	s15, [r7, #4]
    e_prev = e;
 800591e:	4a38      	ldr	r2, [pc, #224]	@ (8005a00 <wall_follow_step+0x2e0>)
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	6013      	str	r3, [r2, #0]

    // Front wall policy
    int base = WF_BASE_PWM;
 8005924:	4b3d      	ldr	r3, [pc, #244]	@ (8005a1c <wall_follow_step+0x2fc>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	603b      	str	r3, [r7, #0]
//        // If you want a hard stop, uncomment:
//        // motor_set(0, true, 0); motor_set(1, true, 0); HAL_Delay(WF_FRONT_HOLD_MS); return;
//    }

    // Map correction to wheel PWMs (right = base+u, left = base-u)
    int pwm_right = clampi((int)lroundf((float)base - u), 0, WF_PWM_MAX);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005934:	edd7 7a01 	vldr	s15, [r7, #4]
 8005938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800593c:	eeb0 0a67 	vmov.f32	s0, s15
 8005940:	f007 fb0a 	bl	800cf58 <lroundf>
 8005944:	4b36      	ldr	r3, [pc, #216]	@ (8005a20 <wall_follow_step+0x300>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	2100      	movs	r1, #0
 800594c:	f7ff fe6f 	bl	800562e <clampi>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24
    int pwm_left  = clampi((int)lroundf((float)base + u), 0, WF_PWM_MAX);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800595c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005964:	eeb0 0a67 	vmov.f32	s0, s15
 8005968:	f007 faf6 	bl	800cf58 <lroundf>
 800596c:	4b2c      	ldr	r3, [pc, #176]	@ (8005a20 <wall_follow_step+0x300>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	2100      	movs	r1, #0
 8005974:	f7ff fe5b 	bl	800562e <clampi>
 8005978:	6238      	str	r0, [r7, #32]

    if (pwm_right > 0 && pwm_right < WF_PWM_MIN_MOVE) pwm_right = WF_PWM_MIN_MOVE;
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	dd07      	ble.n	8005990 <wall_follow_step+0x270>
 8005980:	4b28      	ldr	r3, [pc, #160]	@ (8005a24 <wall_follow_step+0x304>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005986:	429a      	cmp	r2, r3
 8005988:	da02      	bge.n	8005990 <wall_follow_step+0x270>
 800598a:	4b26      	ldr	r3, [pc, #152]	@ (8005a24 <wall_follow_step+0x304>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (pwm_left  > 0 && pwm_left  < WF_PWM_MIN_MOVE) pwm_left  = WF_PWM_MIN_MOVE;
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	2b00      	cmp	r3, #0
 8005994:	dd07      	ble.n	80059a6 <wall_follow_step+0x286>
 8005996:	4b23      	ldr	r3, [pc, #140]	@ (8005a24 <wall_follow_step+0x304>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	429a      	cmp	r2, r3
 800599e:	da02      	bge.n	80059a6 <wall_follow_step+0x286>
 80059a0:	4b20      	ldr	r3, [pc, #128]	@ (8005a24 <wall_follow_step+0x304>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	623b      	str	r3, [r7, #32]

    // Apply (both forward)
    motor_set(0, true, (uint16_t)pwm_left);   // Left
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	2101      	movs	r1, #1
 80059ae:	2000      	movs	r0, #0
 80059b0:	f7fe f92c 	bl	8003c0c <motor_set>
    motor_set(1, true, (uint16_t)pwm_right);  // Right
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	2101      	movs	r1, #1
 80059bc:	2001      	movs	r0, #1
 80059be:	f7fe f925 	bl	8003c0c <motor_set>

//    send_bluetooth_printf("# L:%d R:%d e=%.3f u_norm=%.3f u=%.1f\n",
//        sensors.side_left, sensors.side_right, e, u_norm, u);
	//send_bluetooth_printf("L:%f    e:%f      pwm_right: %d     pwm_left:%d  \r\n", L, e,pwm_right,pwm_left);

}
 80059c2:	bf00      	nop
 80059c4:	3730      	adds	r7, #48	@ 0x30
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20001da0 	.word	0x20001da0
 80059d0:	447a0000 	.word	0x447a0000
 80059d4:	3a83126f 	.word	0x3a83126f
 80059d8:	20001470 	.word	0x20001470
 80059dc:	20001d90 	.word	0x20001d90
 80059e0:	0800eddc 	.word	0x0800eddc
 80059e4:	0800ed5c 	.word	0x0800ed5c
 80059e8:	0800ecd8 	.word	0x0800ecd8
 80059ec:	0800ec54 	.word	0x0800ec54
 80059f0:	20000050 	.word	0x20000050
 80059f4:	20000054 	.word	0x20000054
 80059f8:	20001d94 	.word	0x20001d94
 80059fc:	20000048 	.word	0x20000048
 8005a00:	20001d98 	.word	0x20001d98
 8005a04:	20000044 	.word	0x20000044
 8005a08:	20001d9c 	.word	0x20001d9c
 8005a0c:	2000003c 	.word	0x2000003c
 8005a10:	20001d8c 	.word	0x20001d8c
 8005a14:	20000040 	.word	0x20000040
 8005a18:	2000004c 	.word	0x2000004c
 8005a1c:	20000030 	.word	0x20000030
 8005a20:	20000038 	.word	0x20000038
 8005a24:	20000034 	.word	0x20000034

08005a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005a60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a2c:	f7ff fa94 	bl	8004f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a30:	480c      	ldr	r0, [pc, #48]	@ (8005a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a32:	490d      	ldr	r1, [pc, #52]	@ (8005a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a34:	4a0d      	ldr	r2, [pc, #52]	@ (8005a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a38:	e002      	b.n	8005a40 <LoopCopyDataInit>

08005a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a3e:	3304      	adds	r3, #4

08005a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a44:	d3f9      	bcc.n	8005a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a46:	4a0a      	ldr	r2, [pc, #40]	@ (8005a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a48:	4c0a      	ldr	r4, [pc, #40]	@ (8005a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a4c:	e001      	b.n	8005a52 <LoopFillZerobss>

08005a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a50:	3204      	adds	r2, #4

08005a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a54:	d3fb      	bcc.n	8005a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a56:	f005 f9b3 	bl	800adc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a5a:	f7fc f913 	bl	8001c84 <main>
  bx  lr    
 8005a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a68:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8005a6c:	0800f1e4 	.word	0x0800f1e4
  ldr r2, =_sbss
 8005a70:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8005a74:	20001ef4 	.word	0x20001ef4

08005a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a78:	e7fe      	b.n	8005a78 <ADC_IRQHandler>
	...

08005a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a80:	4b0e      	ldr	r3, [pc, #56]	@ (8005abc <HAL_Init+0x40>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a0d      	ldr	r2, [pc, #52]	@ (8005abc <HAL_Init+0x40>)
 8005a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005abc <HAL_Init+0x40>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a0a      	ldr	r2, [pc, #40]	@ (8005abc <HAL_Init+0x40>)
 8005a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a98:	4b08      	ldr	r3, [pc, #32]	@ (8005abc <HAL_Init+0x40>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a07      	ldr	r2, [pc, #28]	@ (8005abc <HAL_Init+0x40>)
 8005a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005aa4:	2003      	movs	r0, #3
 8005aa6:	f000 fd41 	bl	800652c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005aaa:	200f      	movs	r0, #15
 8005aac:	f000 f808 	bl	8005ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ab0:	f7fe fede 	bl	8004870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40023c00 	.word	0x40023c00

08005ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ac8:	4b12      	ldr	r3, [pc, #72]	@ (8005b14 <HAL_InitTick+0x54>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	4b12      	ldr	r3, [pc, #72]	@ (8005b18 <HAL_InitTick+0x58>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fd59 	bl	8006596 <HAL_SYSTICK_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e00e      	b.n	8005b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b0f      	cmp	r3, #15
 8005af2:	d80a      	bhi.n	8005b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005af4:	2200      	movs	r2, #0
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	f000 fd21 	bl	8006542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b00:	4a06      	ldr	r2, [pc, #24]	@ (8005b1c <HAL_InitTick+0x5c>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	2000002c 	.word	0x2000002c
 8005b18:	2000005c 	.word	0x2000005c
 8005b1c:	20000058 	.word	0x20000058

08005b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b24:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <HAL_IncTick+0x20>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <HAL_IncTick+0x24>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4413      	add	r3, r2
 8005b30:	4a04      	ldr	r2, [pc, #16]	@ (8005b44 <HAL_IncTick+0x24>)
 8005b32:	6013      	str	r3, [r2, #0]
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	2000005c 	.word	0x2000005c
 8005b44:	20001da4 	.word	0x20001da4

08005b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8005b4c:	4b03      	ldr	r3, [pc, #12]	@ (8005b5c <HAL_GetTick+0x14>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20001da4 	.word	0x20001da4

08005b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b68:	f7ff ffee 	bl	8005b48 <HAL_GetTick>
 8005b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b78:	d005      	beq.n	8005b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <HAL_Delay+0x44>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b86:	bf00      	nop
 8005b88:	f7ff ffde 	bl	8005b48 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d8f7      	bhi.n	8005b88 <HAL_Delay+0x28>
  {
  }
}
 8005b98:	bf00      	nop
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	2000005c 	.word	0x2000005c

08005ba8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e033      	b.n	8005c26 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fe fe7a 	bl	80048c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d118      	bne.n	8005c18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005bee:	f023 0302 	bic.w	r3, r3, #2
 8005bf2:	f043 0202 	orr.w	r2, r3, #2
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 faca 	bl	8006194 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	f023 0303 	bic.w	r3, r3, #3
 8005c0e:	f043 0201 	orr.w	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c16:	e001      	b.n	8005c1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_ADC_Start+0x1a>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e097      	b.n	8005d7a <HAL_ADC_Start+0x14a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d018      	beq.n	8005c92 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005c70:	4b45      	ldr	r3, [pc, #276]	@ (8005d88 <HAL_ADC_Start+0x158>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a45      	ldr	r2, [pc, #276]	@ (8005d8c <HAL_ADC_Start+0x15c>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	0c9a      	lsrs	r2, r3, #18
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	4413      	add	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005c84:	e002      	b.n	8005c8c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f9      	bne.n	8005c86 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d15f      	bne.n	8005d60 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005cca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cde:	d106      	bne.n	8005cee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce4:	f023 0206 	bic.w	r2, r3, #6
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	645a      	str	r2, [r3, #68]	@ 0x44
 8005cec:	e002      	b.n	8005cf4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cfc:	4b24      	ldr	r3, [pc, #144]	@ (8005d90 <HAL_ADC_Start+0x160>)
 8005cfe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005d08:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10f      	bne.n	8005d36 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d129      	bne.n	8005d78 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	e020      	b.n	8005d78 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a16      	ldr	r2, [pc, #88]	@ (8005d94 <HAL_ADC_Start+0x164>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d11b      	bne.n	8005d78 <HAL_ADC_Start+0x148>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d114      	bne.n	8005d78 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005d5c:	609a      	str	r2, [r3, #8]
 8005d5e:	e00b      	b.n	8005d78 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	f043 0210 	orr.w	r2, r3, #16
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d70:	f043 0201 	orr.w	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	2000002c 	.word	0x2000002c
 8005d8c:	431bde83 	.word	0x431bde83
 8005d90:	40012300 	.word	0x40012300
 8005d94:	40012000 	.word	0x40012000

08005d98 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_ADC_Stop+0x16>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e021      	b.n	8005df2 <HAL_ADC_Stop+0x5a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d109      	bne.n	8005de8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	f043 0201 	orr.w	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e1a:	d113      	bne.n	8005e44 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e2a:	d10b      	bne.n	8005e44 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e063      	b.n	8005f0c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e44:	f7ff fe80 	bl	8005b48 <HAL_GetTick>
 8005e48:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005e4a:	e021      	b.n	8005e90 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e52:	d01d      	beq.n	8005e90 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <HAL_ADC_PollForConversion+0x6c>
 8005e5a:	f7ff fe75 	bl	8005b48 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d212      	bcs.n	8005e90 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d00b      	beq.n	8005e90 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7c:	f043 0204 	orr.w	r2, r3, #4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e03d      	b.n	8005f0c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d1d6      	bne.n	8005e4c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0212 	mvn.w	r2, #18
 8005ea6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d123      	bne.n	8005f0a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d11f      	bne.n	8005f0a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d006      	beq.n	8005ee6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d111      	bne.n	8005f0a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	f043 0201 	orr.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_ADC_ConfigChannel+0x1c>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e113      	b.n	8006174 <HAL_ADC_ConfigChannel+0x244>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	d925      	bls.n	8005fa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68d9      	ldr	r1, [r3, #12]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	4413      	add	r3, r2
 8005f70:	3b1e      	subs	r3, #30
 8005f72:	2207      	movs	r2, #7
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	43da      	mvns	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	400a      	ands	r2, r1
 8005f80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68d9      	ldr	r1, [r3, #12]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	4618      	mov	r0, r3
 8005f94:	4603      	mov	r3, r0
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	4403      	add	r3, r0
 8005f9a:	3b1e      	subs	r3, #30
 8005f9c:	409a      	lsls	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	e022      	b.n	8005fee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6919      	ldr	r1, [r3, #16]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	4413      	add	r3, r2
 8005fbc:	2207      	movs	r2, #7
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43da      	mvns	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	400a      	ands	r2, r1
 8005fca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6919      	ldr	r1, [r3, #16]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	4618      	mov	r0, r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	4403      	add	r3, r0
 8005fe4:	409a      	lsls	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b06      	cmp	r3, #6
 8005ff4:	d824      	bhi.n	8006040 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	3b05      	subs	r3, #5
 8006008:	221f      	movs	r2, #31
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	43da      	mvns	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	400a      	ands	r2, r1
 8006016:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	4618      	mov	r0, r3
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	3b05      	subs	r3, #5
 8006032:	fa00 f203 	lsl.w	r2, r0, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	635a      	str	r2, [r3, #52]	@ 0x34
 800603e:	e04c      	b.n	80060da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b0c      	cmp	r3, #12
 8006046:	d824      	bhi.n	8006092 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	3b23      	subs	r3, #35	@ 0x23
 800605a:	221f      	movs	r2, #31
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	43da      	mvns	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	400a      	ands	r2, r1
 8006068:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	4618      	mov	r0, r3
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	3b23      	subs	r3, #35	@ 0x23
 8006084:	fa00 f203 	lsl.w	r2, r0, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006090:	e023      	b.n	80060da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	3b41      	subs	r3, #65	@ 0x41
 80060a4:	221f      	movs	r2, #31
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43da      	mvns	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	400a      	ands	r2, r1
 80060b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	4618      	mov	r0, r3
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	3b41      	subs	r3, #65	@ 0x41
 80060ce:	fa00 f203 	lsl.w	r2, r0, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060da:	4b29      	ldr	r3, [pc, #164]	@ (8006180 <HAL_ADC_ConfigChannel+0x250>)
 80060dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a28      	ldr	r2, [pc, #160]	@ (8006184 <HAL_ADC_ConfigChannel+0x254>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d10f      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x1d8>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b12      	cmp	r3, #18
 80060ee:	d10b      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1d      	ldr	r2, [pc, #116]	@ (8006184 <HAL_ADC_ConfigChannel+0x254>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d12b      	bne.n	800616a <HAL_ADC_ConfigChannel+0x23a>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1c      	ldr	r2, [pc, #112]	@ (8006188 <HAL_ADC_ConfigChannel+0x258>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <HAL_ADC_ConfigChannel+0x1f4>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b11      	cmp	r3, #17
 8006122:	d122      	bne.n	800616a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a11      	ldr	r2, [pc, #68]	@ (8006188 <HAL_ADC_ConfigChannel+0x258>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d111      	bne.n	800616a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006146:	4b11      	ldr	r3, [pc, #68]	@ (800618c <HAL_ADC_ConfigChannel+0x25c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a11      	ldr	r2, [pc, #68]	@ (8006190 <HAL_ADC_ConfigChannel+0x260>)
 800614c:	fba2 2303 	umull	r2, r3, r2, r3
 8006150:	0c9a      	lsrs	r2, r3, #18
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800615c:	e002      	b.n	8006164 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	3b01      	subs	r3, #1
 8006162:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f9      	bne.n	800615e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	40012300 	.word	0x40012300
 8006184:	40012000 	.word	0x40012000
 8006188:	10000012 	.word	0x10000012
 800618c:	2000002c 	.word	0x2000002c
 8006190:	431bde83 	.word	0x431bde83

08006194 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800619c:	4b79      	ldr	r3, [pc, #484]	@ (8006384 <ADC_Init+0x1f0>)
 800619e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6859      	ldr	r1, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	021a      	lsls	r2, r3, #8
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80061ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6859      	ldr	r1, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800620e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6899      	ldr	r1, [r3, #8]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006226:	4a58      	ldr	r2, [pc, #352]	@ (8006388 <ADC_Init+0x1f4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d022      	beq.n	8006272 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800623a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6899      	ldr	r1, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800625c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6899      	ldr	r1, [r3, #8]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]
 8006270:	e00f      	b.n	8006292 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006290:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0202 	bic.w	r2, r2, #2
 80062a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6899      	ldr	r1, [r3, #8]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	7e1b      	ldrb	r3, [r3, #24]
 80062ac:	005a      	lsls	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01b      	beq.n	80062f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80062de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6859      	ldr	r1, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	3b01      	subs	r3, #1
 80062ec:	035a      	lsls	r2, r3, #13
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	e007      	b.n	8006308 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006306:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006316:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	3b01      	subs	r3, #1
 8006324:	051a      	lsls	r2, r3, #20
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800633c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6899      	ldr	r1, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800634a:	025a      	lsls	r2, r3, #9
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6899      	ldr	r1, [r3, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	029a      	lsls	r2, r3, #10
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	609a      	str	r2, [r3, #8]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	40012300 	.word	0x40012300
 8006388:	0f000001 	.word	0x0f000001

0800638c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800639c:	4b0c      	ldr	r3, [pc, #48]	@ (80063d0 <__NVIC_SetPriorityGrouping+0x44>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80063a8:	4013      	ands	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80063b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063be:	4a04      	ldr	r2, [pc, #16]	@ (80063d0 <__NVIC_SetPriorityGrouping+0x44>)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	60d3      	str	r3, [r2, #12]
}
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	e000ed00 	.word	0xe000ed00

080063d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063d8:	4b04      	ldr	r3, [pc, #16]	@ (80063ec <__NVIC_GetPriorityGrouping+0x18>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	0a1b      	lsrs	r3, r3, #8
 80063de:	f003 0307 	and.w	r3, r3, #7
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	e000ed00 	.word	0xe000ed00

080063f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	db0b      	blt.n	800641a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	f003 021f 	and.w	r2, r3, #31
 8006408:	4907      	ldr	r1, [pc, #28]	@ (8006428 <__NVIC_EnableIRQ+0x38>)
 800640a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	2001      	movs	r0, #1
 8006412:	fa00 f202 	lsl.w	r2, r0, r2
 8006416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	e000e100 	.word	0xe000e100

0800642c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	6039      	str	r1, [r7, #0]
 8006436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800643c:	2b00      	cmp	r3, #0
 800643e:	db0a      	blt.n	8006456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	490c      	ldr	r1, [pc, #48]	@ (8006478 <__NVIC_SetPriority+0x4c>)
 8006446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644a:	0112      	lsls	r2, r2, #4
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	440b      	add	r3, r1
 8006450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006454:	e00a      	b.n	800646c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	b2da      	uxtb	r2, r3
 800645a:	4908      	ldr	r1, [pc, #32]	@ (800647c <__NVIC_SetPriority+0x50>)
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	3b04      	subs	r3, #4
 8006464:	0112      	lsls	r2, r2, #4
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	440b      	add	r3, r1
 800646a:	761a      	strb	r2, [r3, #24]
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	e000e100 	.word	0xe000e100
 800647c:	e000ed00 	.word	0xe000ed00

08006480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006480:	b480      	push	{r7}
 8006482:	b089      	sub	sp, #36	@ 0x24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f1c3 0307 	rsb	r3, r3, #7
 800649a:	2b04      	cmp	r3, #4
 800649c:	bf28      	it	cs
 800649e:	2304      	movcs	r3, #4
 80064a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	3304      	adds	r3, #4
 80064a6:	2b06      	cmp	r3, #6
 80064a8:	d902      	bls.n	80064b0 <NVIC_EncodePriority+0x30>
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	3b03      	subs	r3, #3
 80064ae:	e000      	b.n	80064b2 <NVIC_EncodePriority+0x32>
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064b4:	f04f 32ff 	mov.w	r2, #4294967295
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	43da      	mvns	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	401a      	ands	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064c8:	f04f 31ff 	mov.w	r1, #4294967295
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	fa01 f303 	lsl.w	r3, r1, r3
 80064d2:	43d9      	mvns	r1, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064d8:	4313      	orrs	r3, r2
         );
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3724      	adds	r7, #36	@ 0x24
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064f8:	d301      	bcc.n	80064fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064fa:	2301      	movs	r3, #1
 80064fc:	e00f      	b.n	800651e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006528 <SysTick_Config+0x40>)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3b01      	subs	r3, #1
 8006504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006506:	210f      	movs	r1, #15
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	f7ff ff8e 	bl	800642c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006510:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <SysTick_Config+0x40>)
 8006512:	2200      	movs	r2, #0
 8006514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006516:	4b04      	ldr	r3, [pc, #16]	@ (8006528 <SysTick_Config+0x40>)
 8006518:	2207      	movs	r2, #7
 800651a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	e000e010 	.word	0xe000e010

0800652c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff ff29 	bl	800638c <__NVIC_SetPriorityGrouping>
}
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006542:	b580      	push	{r7, lr}
 8006544:	b086      	sub	sp, #24
 8006546:	af00      	add	r7, sp, #0
 8006548:	4603      	mov	r3, r0
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
 800654e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006554:	f7ff ff3e 	bl	80063d4 <__NVIC_GetPriorityGrouping>
 8006558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	6978      	ldr	r0, [r7, #20]
 8006560:	f7ff ff8e 	bl	8006480 <NVIC_EncodePriority>
 8006564:	4602      	mov	r2, r0
 8006566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800656a:	4611      	mov	r1, r2
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff ff5d 	bl	800642c <__NVIC_SetPriority>
}
 8006572:	bf00      	nop
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	4603      	mov	r3, r0
 8006582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff ff31 	bl	80063f0 <__NVIC_EnableIRQ>
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff ffa2 	bl	80064e8 <SysTick_Config>
 80065a4:	4603      	mov	r3, r0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80065bc:	f7ff fac4 	bl	8005b48 <HAL_GetTick>
 80065c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d008      	beq.n	80065e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2280      	movs	r2, #128	@ 0x80
 80065d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e052      	b.n	8006686 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0216 	bic.w	r2, r2, #22
 80065ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695a      	ldr	r2, [r3, #20]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	d103      	bne.n	8006610 <HAL_DMA_Abort+0x62>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0208 	bic.w	r2, r2, #8
 800661e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0201 	bic.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006630:	e013      	b.n	800665a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006632:	f7ff fa89 	bl	8005b48 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b05      	cmp	r3, #5
 800663e:	d90c      	bls.n	800665a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e015      	b.n	8006686 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e4      	bne.n	8006632 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666c:	223f      	movs	r2, #63	@ 0x3f
 800666e:	409a      	lsls	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d004      	beq.n	80066ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2280      	movs	r2, #128	@ 0x80
 80066a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e00c      	b.n	80066c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2205      	movs	r2, #5
 80066b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b089      	sub	sp, #36	@ 0x24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066ea:	2300      	movs	r3, #0
 80066ec:	61fb      	str	r3, [r7, #28]
 80066ee:	e159      	b.n	80069a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80066f0:	2201      	movs	r2, #1
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4013      	ands	r3, r2
 8006702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	429a      	cmp	r2, r3
 800670a:	f040 8148 	bne.w	800699e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	2b01      	cmp	r3, #1
 8006718:	d005      	beq.n	8006726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006722:	2b02      	cmp	r3, #2
 8006724:	d130      	bne.n	8006788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	2203      	movs	r2, #3
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	43db      	mvns	r3, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	4313      	orrs	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800675c:	2201      	movs	r2, #1
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	fa02 f303 	lsl.w	r3, r2, r3
 8006764:	43db      	mvns	r3, r3
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	4013      	ands	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	091b      	lsrs	r3, r3, #4
 8006772:	f003 0201 	and.w	r2, r3, #1
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	4313      	orrs	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	2b03      	cmp	r3, #3
 8006792:	d017      	beq.n	80067c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	2203      	movs	r2, #3
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	43db      	mvns	r3, r3
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	4013      	ands	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f003 0303 	and.w	r3, r3, #3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d123      	bne.n	8006818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	08da      	lsrs	r2, r3, #3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3208      	adds	r2, #8
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	220f      	movs	r2, #15
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	43db      	mvns	r3, r3
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	4013      	ands	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	4313      	orrs	r3, r2
 8006808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	08da      	lsrs	r2, r3, #3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3208      	adds	r2, #8
 8006812:	69b9      	ldr	r1, [r7, #24]
 8006814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	2203      	movs	r2, #3
 8006824:	fa02 f303 	lsl.w	r3, r2, r3
 8006828:	43db      	mvns	r3, r3
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	4013      	ands	r3, r2
 800682e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f003 0203 	and.w	r2, r3, #3
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	fa02 f303 	lsl.w	r3, r2, r3
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	4313      	orrs	r3, r2
 8006844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 80a2 	beq.w	800699e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	4b57      	ldr	r3, [pc, #348]	@ (80069bc <HAL_GPIO_Init+0x2e8>)
 8006860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006862:	4a56      	ldr	r2, [pc, #344]	@ (80069bc <HAL_GPIO_Init+0x2e8>)
 8006864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006868:	6453      	str	r3, [r2, #68]	@ 0x44
 800686a:	4b54      	ldr	r3, [pc, #336]	@ (80069bc <HAL_GPIO_Init+0x2e8>)
 800686c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006876:	4a52      	ldr	r2, [pc, #328]	@ (80069c0 <HAL_GPIO_Init+0x2ec>)
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	089b      	lsrs	r3, r3, #2
 800687c:	3302      	adds	r3, #2
 800687e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	220f      	movs	r2, #15
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	43db      	mvns	r3, r3
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	4013      	ands	r3, r2
 8006898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a49      	ldr	r2, [pc, #292]	@ (80069c4 <HAL_GPIO_Init+0x2f0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d019      	beq.n	80068d6 <HAL_GPIO_Init+0x202>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a48      	ldr	r2, [pc, #288]	@ (80069c8 <HAL_GPIO_Init+0x2f4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_GPIO_Init+0x1fe>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a47      	ldr	r2, [pc, #284]	@ (80069cc <HAL_GPIO_Init+0x2f8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00d      	beq.n	80068ce <HAL_GPIO_Init+0x1fa>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a46      	ldr	r2, [pc, #280]	@ (80069d0 <HAL_GPIO_Init+0x2fc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <HAL_GPIO_Init+0x1f6>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a45      	ldr	r2, [pc, #276]	@ (80069d4 <HAL_GPIO_Init+0x300>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d101      	bne.n	80068c6 <HAL_GPIO_Init+0x1f2>
 80068c2:	2304      	movs	r3, #4
 80068c4:	e008      	b.n	80068d8 <HAL_GPIO_Init+0x204>
 80068c6:	2307      	movs	r3, #7
 80068c8:	e006      	b.n	80068d8 <HAL_GPIO_Init+0x204>
 80068ca:	2303      	movs	r3, #3
 80068cc:	e004      	b.n	80068d8 <HAL_GPIO_Init+0x204>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e002      	b.n	80068d8 <HAL_GPIO_Init+0x204>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <HAL_GPIO_Init+0x204>
 80068d6:	2300      	movs	r3, #0
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	f002 0203 	and.w	r2, r2, #3
 80068de:	0092      	lsls	r2, r2, #2
 80068e0:	4093      	lsls	r3, r2
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068e8:	4935      	ldr	r1, [pc, #212]	@ (80069c0 <HAL_GPIO_Init+0x2ec>)
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	089b      	lsrs	r3, r3, #2
 80068ee:	3302      	adds	r3, #2
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068f6:	4b38      	ldr	r3, [pc, #224]	@ (80069d8 <HAL_GPIO_Init+0x304>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	43db      	mvns	r3, r3
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	4013      	ands	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800691a:	4a2f      	ldr	r2, [pc, #188]	@ (80069d8 <HAL_GPIO_Init+0x304>)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006920:	4b2d      	ldr	r3, [pc, #180]	@ (80069d8 <HAL_GPIO_Init+0x304>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	43db      	mvns	r3, r3
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	4013      	ands	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006944:	4a24      	ldr	r2, [pc, #144]	@ (80069d8 <HAL_GPIO_Init+0x304>)
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800694a:	4b23      	ldr	r3, [pc, #140]	@ (80069d8 <HAL_GPIO_Init+0x304>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	43db      	mvns	r3, r3
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	4013      	ands	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800696e:	4a1a      	ldr	r2, [pc, #104]	@ (80069d8 <HAL_GPIO_Init+0x304>)
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006974:	4b18      	ldr	r3, [pc, #96]	@ (80069d8 <HAL_GPIO_Init+0x304>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	43db      	mvns	r3, r3
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	4013      	ands	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006998:	4a0f      	ldr	r2, [pc, #60]	@ (80069d8 <HAL_GPIO_Init+0x304>)
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3301      	adds	r3, #1
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2b0f      	cmp	r3, #15
 80069a8:	f67f aea2 	bls.w	80066f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	3724      	adds	r7, #36	@ 0x24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40023800 	.word	0x40023800
 80069c0:	40013800 	.word	0x40013800
 80069c4:	40020000 	.word	0x40020000
 80069c8:	40020400 	.word	0x40020400
 80069cc:	40020800 	.word	0x40020800
 80069d0:	40020c00 	.word	0x40020c00
 80069d4:	40021000 	.word	0x40021000
 80069d8:	40013c00 	.word	0x40013c00

080069dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	807b      	strh	r3, [r7, #2]
 80069e8:	4613      	mov	r3, r2
 80069ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069ec:	787b      	ldrb	r3, [r7, #1]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069f2:	887a      	ldrh	r2, [r7, #2]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069f8:	e003      	b.n	8006a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069fa:	887b      	ldrh	r3, [r7, #2]
 80069fc:	041a      	lsls	r2, r3, #16
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	619a      	str	r2, [r3, #24]
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	460b      	mov	r3, r1
 8006a18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a20:	887a      	ldrh	r2, [r7, #2]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4013      	ands	r3, r2
 8006a26:	041a      	lsls	r2, r3, #16
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	43d9      	mvns	r1, r3
 8006a2c:	887b      	ldrh	r3, [r7, #2]
 8006a2e:	400b      	ands	r3, r1
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	619a      	str	r2, [r3, #24]
}
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
	...

08006a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a4e:	4b08      	ldr	r3, [pc, #32]	@ (8006a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d006      	beq.n	8006a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a5a:	4a05      	ldr	r2, [pc, #20]	@ (8006a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fb fd7e 	bl	8002564 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40013c00 	.word	0x40013c00

08006a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e267      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d075      	beq.n	8006b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a92:	4b88      	ldr	r3, [pc, #544]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 030c 	and.w	r3, r3, #12
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d00c      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a9e:	4b85      	ldr	r3, [pc, #532]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d112      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aaa:	4b82      	ldr	r3, [pc, #520]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ab2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ab6:	d10b      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab8:	4b7e      	ldr	r3, [pc, #504]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d05b      	beq.n	8006b7c <HAL_RCC_OscConfig+0x108>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d157      	bne.n	8006b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e242      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ad8:	d106      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x74>
 8006ada:	4b76      	ldr	r3, [pc, #472]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a75      	ldr	r2, [pc, #468]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e01d      	b.n	8006b24 <HAL_RCC_OscConfig+0xb0>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x98>
 8006af2:	4b70      	ldr	r3, [pc, #448]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a6f      	ldr	r2, [pc, #444]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	4b6d      	ldr	r3, [pc, #436]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a6c      	ldr	r2, [pc, #432]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e00b      	b.n	8006b24 <HAL_RCC_OscConfig+0xb0>
 8006b0c:	4b69      	ldr	r3, [pc, #420]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a68      	ldr	r2, [pc, #416]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	4b66      	ldr	r3, [pc, #408]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a65      	ldr	r2, [pc, #404]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d013      	beq.n	8006b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b2c:	f7ff f80c 	bl	8005b48 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b34:	f7ff f808 	bl	8005b48 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b64      	cmp	r3, #100	@ 0x64
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e207      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b46:	4b5b      	ldr	r3, [pc, #364]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f0      	beq.n	8006b34 <HAL_RCC_OscConfig+0xc0>
 8006b52:	e014      	b.n	8006b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b54:	f7fe fff8 	bl	8005b48 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b5c:	f7fe fff4 	bl	8005b48 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b64      	cmp	r3, #100	@ 0x64
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e1f3      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b6e:	4b51      	ldr	r3, [pc, #324]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f0      	bne.n	8006b5c <HAL_RCC_OscConfig+0xe8>
 8006b7a:	e000      	b.n	8006b7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d063      	beq.n	8006c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b96:	4b47      	ldr	r3, [pc, #284]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d11c      	bne.n	8006bdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ba2:	4b44      	ldr	r3, [pc, #272]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d116      	bne.n	8006bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bae:	4b41      	ldr	r3, [pc, #260]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x152>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d001      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e1c7      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	4937      	ldr	r1, [pc, #220]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bda:	e03a      	b.n	8006c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d020      	beq.n	8006c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006be4:	4b34      	ldr	r3, [pc, #208]	@ (8006cb8 <HAL_RCC_OscConfig+0x244>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bea:	f7fe ffad 	bl	8005b48 <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bf2:	f7fe ffa9 	bl	8005b48 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e1a8      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c04:	4b2b      	ldr	r3, [pc, #172]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0f0      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c10:	4b28      	ldr	r3, [pc, #160]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	4925      	ldr	r1, [pc, #148]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	600b      	str	r3, [r1, #0]
 8006c24:	e015      	b.n	8006c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c26:	4b24      	ldr	r3, [pc, #144]	@ (8006cb8 <HAL_RCC_OscConfig+0x244>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2c:	f7fe ff8c 	bl	8005b48 <HAL_GetTick>
 8006c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c34:	f7fe ff88 	bl	8005b48 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e187      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c46:	4b1b      	ldr	r3, [pc, #108]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f0      	bne.n	8006c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d036      	beq.n	8006ccc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d016      	beq.n	8006c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c66:	4b15      	ldr	r3, [pc, #84]	@ (8006cbc <HAL_RCC_OscConfig+0x248>)
 8006c68:	2201      	movs	r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6c:	f7fe ff6c 	bl	8005b48 <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c74:	f7fe ff68 	bl	8005b48 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e167      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c86:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb4 <HAL_RCC_OscConfig+0x240>)
 8006c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0f0      	beq.n	8006c74 <HAL_RCC_OscConfig+0x200>
 8006c92:	e01b      	b.n	8006ccc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c94:	4b09      	ldr	r3, [pc, #36]	@ (8006cbc <HAL_RCC_OscConfig+0x248>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c9a:	f7fe ff55 	bl	8005b48 <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca0:	e00e      	b.n	8006cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ca2:	f7fe ff51 	bl	8005b48 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d907      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e150      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	42470000 	.word	0x42470000
 8006cbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc0:	4b88      	ldr	r3, [pc, #544]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1ea      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 8097 	beq.w	8006e08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cde:	4b81      	ldr	r3, [pc, #516]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10f      	bne.n	8006d0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]
 8006cee:	4b7d      	ldr	r3, [pc, #500]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d06:	2301      	movs	r3, #1
 8006d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0a:	4b77      	ldr	r3, [pc, #476]	@ (8006ee8 <HAL_RCC_OscConfig+0x474>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d118      	bne.n	8006d48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d16:	4b74      	ldr	r3, [pc, #464]	@ (8006ee8 <HAL_RCC_OscConfig+0x474>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a73      	ldr	r2, [pc, #460]	@ (8006ee8 <HAL_RCC_OscConfig+0x474>)
 8006d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d22:	f7fe ff11 	bl	8005b48 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d2a:	f7fe ff0d 	bl	8005b48 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e10c      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8006ee8 <HAL_RCC_OscConfig+0x474>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f0      	beq.n	8006d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d106      	bne.n	8006d5e <HAL_RCC_OscConfig+0x2ea>
 8006d50:	4b64      	ldr	r3, [pc, #400]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d54:	4a63      	ldr	r2, [pc, #396]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006d56:	f043 0301 	orr.w	r3, r3, #1
 8006d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d5c:	e01c      	b.n	8006d98 <HAL_RCC_OscConfig+0x324>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	d10c      	bne.n	8006d80 <HAL_RCC_OscConfig+0x30c>
 8006d66:	4b5f      	ldr	r3, [pc, #380]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6a:	4a5e      	ldr	r2, [pc, #376]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006d6c:	f043 0304 	orr.w	r3, r3, #4
 8006d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d72:	4b5c      	ldr	r3, [pc, #368]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d76:	4a5b      	ldr	r2, [pc, #364]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006d78:	f043 0301 	orr.w	r3, r3, #1
 8006d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d7e:	e00b      	b.n	8006d98 <HAL_RCC_OscConfig+0x324>
 8006d80:	4b58      	ldr	r3, [pc, #352]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d84:	4a57      	ldr	r2, [pc, #348]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006d86:	f023 0301 	bic.w	r3, r3, #1
 8006d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d8c:	4b55      	ldr	r3, [pc, #340]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d90:	4a54      	ldr	r2, [pc, #336]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006d92:	f023 0304 	bic.w	r3, r3, #4
 8006d96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d015      	beq.n	8006dcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da0:	f7fe fed2 	bl	8005b48 <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da6:	e00a      	b.n	8006dbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006da8:	f7fe fece 	bl	8005b48 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e0cb      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dbe:	4b49      	ldr	r3, [pc, #292]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0ee      	beq.n	8006da8 <HAL_RCC_OscConfig+0x334>
 8006dca:	e014      	b.n	8006df6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dcc:	f7fe febc 	bl	8005b48 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dd2:	e00a      	b.n	8006dea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd4:	f7fe feb8 	bl	8005b48 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e0b5      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dea:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1ee      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d105      	bne.n	8006e08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dfc:	4b39      	ldr	r3, [pc, #228]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e00:	4a38      	ldr	r2, [pc, #224]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80a1 	beq.w	8006f54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e12:	4b34      	ldr	r3, [pc, #208]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 030c 	and.w	r3, r3, #12
 8006e1a:	2b08      	cmp	r3, #8
 8006e1c:	d05c      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d141      	bne.n	8006eaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e26:	4b31      	ldr	r3, [pc, #196]	@ (8006eec <HAL_RCC_OscConfig+0x478>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e2c:	f7fe fe8c 	bl	8005b48 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e34:	f7fe fe88 	bl	8005b48 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e087      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e46:	4b27      	ldr	r3, [pc, #156]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f0      	bne.n	8006e34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69da      	ldr	r2, [r3, #28]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e60:	019b      	lsls	r3, r3, #6
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e68:	085b      	lsrs	r3, r3, #1
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	041b      	lsls	r3, r3, #16
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e74:	061b      	lsls	r3, r3, #24
 8006e76:	491b      	ldr	r1, [pc, #108]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006eec <HAL_RCC_OscConfig+0x478>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e82:	f7fe fe61 	bl	8005b48 <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e8a:	f7fe fe5d 	bl	8005b48 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e05c      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e9c:	4b11      	ldr	r3, [pc, #68]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0f0      	beq.n	8006e8a <HAL_RCC_OscConfig+0x416>
 8006ea8:	e054      	b.n	8006f54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eaa:	4b10      	ldr	r3, [pc, #64]	@ (8006eec <HAL_RCC_OscConfig+0x478>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb0:	f7fe fe4a 	bl	8005b48 <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb8:	f7fe fe46 	bl	8005b48 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e045      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eca:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <HAL_RCC_OscConfig+0x470>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f0      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x444>
 8006ed6:	e03d      	b.n	8006f54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e038      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	40007000 	.word	0x40007000
 8006eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f60 <HAL_RCC_OscConfig+0x4ec>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d028      	beq.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d121      	bne.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d11a      	bne.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f20:	4013      	ands	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d111      	bne.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d107      	bne.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d001      	beq.n	8006f54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	40023800 	.word	0x40023800

08006f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e0cc      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f78:	4b68      	ldr	r3, [pc, #416]	@ (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d90c      	bls.n	8006fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f86:	4b65      	ldr	r3, [pc, #404]	@ (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8e:	4b63      	ldr	r3, [pc, #396]	@ (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d001      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e0b8      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d020      	beq.n	8006fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fb8:	4b59      	ldr	r3, [pc, #356]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	4a58      	ldr	r2, [pc, #352]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006fc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fd0:	4b53      	ldr	r3, [pc, #332]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	4a52      	ldr	r2, [pc, #328]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fdc:	4b50      	ldr	r3, [pc, #320]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	494d      	ldr	r1, [pc, #308]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d044      	beq.n	8007084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d107      	bne.n	8007012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007002:	4b47      	ldr	r3, [pc, #284]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d119      	bne.n	8007042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e07f      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d003      	beq.n	8007022 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800701e:	2b03      	cmp	r3, #3
 8007020:	d107      	bne.n	8007032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007022:	4b3f      	ldr	r3, [pc, #252]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e06f      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007032:	4b3b      	ldr	r3, [pc, #236]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e067      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007042:	4b37      	ldr	r3, [pc, #220]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f023 0203 	bic.w	r2, r3, #3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	4934      	ldr	r1, [pc, #208]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	4313      	orrs	r3, r2
 8007052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007054:	f7fe fd78 	bl	8005b48 <HAL_GetTick>
 8007058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800705a:	e00a      	b.n	8007072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800705c:	f7fe fd74 	bl	8005b48 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800706a:	4293      	cmp	r3, r2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e04f      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007072:	4b2b      	ldr	r3, [pc, #172]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 020c 	and.w	r2, r3, #12
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	429a      	cmp	r2, r3
 8007082:	d1eb      	bne.n	800705c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007084:	4b25      	ldr	r3, [pc, #148]	@ (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d20c      	bcs.n	80070ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007092:	4b22      	ldr	r3, [pc, #136]	@ (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800709a:	4b20      	ldr	r3, [pc, #128]	@ (800711c <HAL_RCC_ClockConfig+0x1b8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d001      	beq.n	80070ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e032      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070b8:	4b19      	ldr	r3, [pc, #100]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	4916      	ldr	r1, [pc, #88]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070d6:	4b12      	ldr	r3, [pc, #72]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	490e      	ldr	r1, [pc, #56]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070ea:	f000 f821 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 80070ee:	4602      	mov	r2, r0
 80070f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	091b      	lsrs	r3, r3, #4
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	490a      	ldr	r1, [pc, #40]	@ (8007124 <HAL_RCC_ClockConfig+0x1c0>)
 80070fc:	5ccb      	ldrb	r3, [r1, r3]
 80070fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007102:	4a09      	ldr	r2, [pc, #36]	@ (8007128 <HAL_RCC_ClockConfig+0x1c4>)
 8007104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007106:	4b09      	ldr	r3, [pc, #36]	@ (800712c <HAL_RCC_ClockConfig+0x1c8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fcd8 	bl	8005ac0 <HAL_InitTick>

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40023c00 	.word	0x40023c00
 8007120:	40023800 	.word	0x40023800
 8007124:	0800ec3c 	.word	0x0800ec3c
 8007128:	2000002c 	.word	0x2000002c
 800712c:	20000058 	.word	0x20000058

08007130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007134:	b090      	sub	sp, #64	@ 0x40
 8007136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007148:	4b59      	ldr	r3, [pc, #356]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f003 030c 	and.w	r3, r3, #12
 8007150:	2b08      	cmp	r3, #8
 8007152:	d00d      	beq.n	8007170 <HAL_RCC_GetSysClockFreq+0x40>
 8007154:	2b08      	cmp	r3, #8
 8007156:	f200 80a1 	bhi.w	800729c <HAL_RCC_GetSysClockFreq+0x16c>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_RCC_GetSysClockFreq+0x34>
 800715e:	2b04      	cmp	r3, #4
 8007160:	d003      	beq.n	800716a <HAL_RCC_GetSysClockFreq+0x3a>
 8007162:	e09b      	b.n	800729c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007164:	4b53      	ldr	r3, [pc, #332]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007166:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007168:	e09b      	b.n	80072a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800716a:	4b53      	ldr	r3, [pc, #332]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800716c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800716e:	e098      	b.n	80072a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007170:	4b4f      	ldr	r3, [pc, #316]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007178:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800717a:	4b4d      	ldr	r3, [pc, #308]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d028      	beq.n	80071d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007186:	4b4a      	ldr	r3, [pc, #296]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	099b      	lsrs	r3, r3, #6
 800718c:	2200      	movs	r2, #0
 800718e:	623b      	str	r3, [r7, #32]
 8007190:	627a      	str	r2, [r7, #36]	@ 0x24
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007198:	2100      	movs	r1, #0
 800719a:	4b47      	ldr	r3, [pc, #284]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800719c:	fb03 f201 	mul.w	r2, r3, r1
 80071a0:	2300      	movs	r3, #0
 80071a2:	fb00 f303 	mul.w	r3, r0, r3
 80071a6:	4413      	add	r3, r2
 80071a8:	4a43      	ldr	r2, [pc, #268]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80071aa:	fba0 1202 	umull	r1, r2, r0, r2
 80071ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071b0:	460a      	mov	r2, r1
 80071b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80071b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071b6:	4413      	add	r3, r2
 80071b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071bc:	2200      	movs	r2, #0
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	61fa      	str	r2, [r7, #28]
 80071c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80071ca:	f7f9 fcf5 	bl	8000bb8 <__aeabi_uldivmod>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4613      	mov	r3, r2
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071d6:	e053      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071d8:	4b35      	ldr	r3, [pc, #212]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	099b      	lsrs	r3, r3, #6
 80071de:	2200      	movs	r2, #0
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	617a      	str	r2, [r7, #20]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80071ea:	f04f 0b00 	mov.w	fp, #0
 80071ee:	4652      	mov	r2, sl
 80071f0:	465b      	mov	r3, fp
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f04f 0100 	mov.w	r1, #0
 80071fa:	0159      	lsls	r1, r3, #5
 80071fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007200:	0150      	lsls	r0, r2, #5
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	ebb2 080a 	subs.w	r8, r2, sl
 800720a:	eb63 090b 	sbc.w	r9, r3, fp
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800721a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800721e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007222:	ebb2 0408 	subs.w	r4, r2, r8
 8007226:	eb63 0509 	sbc.w	r5, r3, r9
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	00eb      	lsls	r3, r5, #3
 8007234:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007238:	00e2      	lsls	r2, r4, #3
 800723a:	4614      	mov	r4, r2
 800723c:	461d      	mov	r5, r3
 800723e:	eb14 030a 	adds.w	r3, r4, sl
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	eb45 030b 	adc.w	r3, r5, fp
 8007248:	607b      	str	r3, [r7, #4]
 800724a:	f04f 0200 	mov.w	r2, #0
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007256:	4629      	mov	r1, r5
 8007258:	028b      	lsls	r3, r1, #10
 800725a:	4621      	mov	r1, r4
 800725c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007260:	4621      	mov	r1, r4
 8007262:	028a      	lsls	r2, r1, #10
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726a:	2200      	movs	r2, #0
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	60fa      	str	r2, [r7, #12]
 8007270:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007274:	f7f9 fca0 	bl	8000bb8 <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4613      	mov	r3, r2
 800727e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007280:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	0c1b      	lsrs	r3, r3, #16
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	3301      	adds	r3, #1
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007290:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	fbb2 f3f3 	udiv	r3, r2, r3
 8007298:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800729a:	e002      	b.n	80072a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800729c:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800729e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3740      	adds	r7, #64	@ 0x40
 80072a8:	46bd      	mov	sp, r7
 80072aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ae:	bf00      	nop
 80072b0:	40023800 	.word	0x40023800
 80072b4:	00f42400 	.word	0x00f42400
 80072b8:	017d7840 	.word	0x017d7840

080072bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c0:	4b03      	ldr	r3, [pc, #12]	@ (80072d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072c2:	681b      	ldr	r3, [r3, #0]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	2000002c 	.word	0x2000002c

080072d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072d8:	f7ff fff0 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 80072dc:	4602      	mov	r2, r0
 80072de:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	0a9b      	lsrs	r3, r3, #10
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	4903      	ldr	r1, [pc, #12]	@ (80072f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ea:	5ccb      	ldrb	r3, [r1, r3]
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40023800 	.word	0x40023800
 80072f8:	0800ec4c 	.word	0x0800ec4c

080072fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007300:	f7ff ffdc 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 8007304:	4602      	mov	r2, r0
 8007306:	4b05      	ldr	r3, [pc, #20]	@ (800731c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	0b5b      	lsrs	r3, r3, #13
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	4903      	ldr	r1, [pc, #12]	@ (8007320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007312:	5ccb      	ldrb	r3, [r1, r3]
 8007314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007318:	4618      	mov	r0, r3
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40023800 	.word	0x40023800
 8007320:	0800ec4c 	.word	0x0800ec4c

08007324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e07b      	b.n	800742e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733a:	2b00      	cmp	r3, #0
 800733c:	d108      	bne.n	8007350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007346:	d009      	beq.n	800735c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	61da      	str	r2, [r3, #28]
 800734e:	e005      	b.n	800735c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fd fae6 	bl	8004948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e0:	ea42 0103 	orr.w	r1, r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	0c1b      	lsrs	r3, r3, #16
 80073fa:	f003 0104 	and.w	r1, r3, #4
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007402:	f003 0210 	and.w	r2, r3, #16
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69da      	ldr	r2, [r3, #28]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800741c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b088      	sub	sp, #32
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	603b      	str	r3, [r7, #0]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007446:	f7fe fb7f 	bl	8005b48 <HAL_GetTick>
 800744a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b01      	cmp	r3, #1
 800745a:	d001      	beq.n	8007460 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800745c:	2302      	movs	r3, #2
 800745e:	e12a      	b.n	80076b6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_SPI_Transmit+0x36>
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e122      	b.n	80076b6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_SPI_Transmit+0x48>
 800747a:	2302      	movs	r3, #2
 800747c:	e11b      	b.n	80076b6 <HAL_SPI_Transmit+0x280>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2203      	movs	r2, #3
 800748a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	88fa      	ldrh	r2, [r7, #6]
 800749e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074cc:	d10f      	bne.n	80074ee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f8:	2b40      	cmp	r3, #64	@ 0x40
 80074fa:	d007      	beq.n	800750c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800750a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007514:	d152      	bne.n	80075bc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <HAL_SPI_Transmit+0xee>
 800751e:	8b7b      	ldrh	r3, [r7, #26]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d145      	bne.n	80075b0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007528:	881a      	ldrh	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007534:	1c9a      	adds	r2, r3, #2
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007548:	e032      	b.n	80075b0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b02      	cmp	r3, #2
 8007556:	d112      	bne.n	800757e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755c:	881a      	ldrh	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007568:	1c9a      	adds	r2, r3, #2
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800757c:	e018      	b.n	80075b0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800757e:	f7fe fae3 	bl	8005b48 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d803      	bhi.n	8007596 <HAL_SPI_Transmit+0x160>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d102      	bne.n	800759c <HAL_SPI_Transmit+0x166>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d109      	bne.n	80075b0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e082      	b.n	80076b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1c7      	bne.n	800754a <HAL_SPI_Transmit+0x114>
 80075ba:	e053      	b.n	8007664 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_SPI_Transmit+0x194>
 80075c4:	8b7b      	ldrh	r3, [r7, #26]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d147      	bne.n	800765a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	330c      	adds	r3, #12
 80075d4:	7812      	ldrb	r2, [r2, #0]
 80075d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075f0:	e033      	b.n	800765a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d113      	bne.n	8007628 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	7812      	ldrb	r2, [r2, #0]
 800760c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007626:	e018      	b.n	800765a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007628:	f7fe fa8e 	bl	8005b48 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d803      	bhi.n	8007640 <HAL_SPI_Transmit+0x20a>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763e:	d102      	bne.n	8007646 <HAL_SPI_Transmit+0x210>
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e02d      	b.n	80076b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1c6      	bne.n	80075f2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fbd9 	bl	8007e20 <SPI_EndRxTxTransaction>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e000      	b.n	80076b6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80076b4:	2300      	movs	r3, #0
  }
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b088      	sub	sp, #32
 80076c2:	af02      	add	r7, sp, #8
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	60b9      	str	r1, [r7, #8]
 80076c8:	603b      	str	r3, [r7, #0]
 80076ca:	4613      	mov	r3, r2
 80076cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d001      	beq.n	80076de <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80076da:	2302      	movs	r3, #2
 80076dc:	e104      	b.n	80078e8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <HAL_SPI_Receive+0x2c>
 80076e4:	88fb      	ldrh	r3, [r7, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e0fc      	b.n	80078e8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076f6:	d112      	bne.n	800771e <HAL_SPI_Receive+0x60>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10e      	bne.n	800771e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2204      	movs	r2, #4
 8007704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007708:	88fa      	ldrh	r2, [r7, #6]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	4613      	mov	r3, r2
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f8eb 	bl	80078f0 <HAL_SPI_TransmitReceive>
 800771a:	4603      	mov	r3, r0
 800771c:	e0e4      	b.n	80078e8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800771e:	f7fe fa13 	bl	8005b48 <HAL_GetTick>
 8007722:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_SPI_Receive+0x74>
 800772e:	2302      	movs	r3, #2
 8007730:	e0da      	b.n	80078e8 <HAL_SPI_Receive+0x22a>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2204      	movs	r2, #4
 800773e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	88fa      	ldrh	r2, [r7, #6]
 8007752:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	88fa      	ldrh	r2, [r7, #6]
 8007758:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007780:	d10f      	bne.n	80077a2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007790:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ac:	2b40      	cmp	r3, #64	@ 0x40
 80077ae:	d007      	beq.n	80077c0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d170      	bne.n	80078aa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80077c8:	e035      	b.n	8007836 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d115      	bne.n	8007804 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f103 020c 	add.w	r2, r3, #12
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e4:	7812      	ldrb	r2, [r2, #0]
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007802:	e018      	b.n	8007836 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007804:	f7fe f9a0 	bl	8005b48 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d803      	bhi.n	800781c <HAL_SPI_Receive+0x15e>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781a:	d102      	bne.n	8007822 <HAL_SPI_Receive+0x164>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d109      	bne.n	8007836 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e058      	b.n	80078e8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1c4      	bne.n	80077ca <HAL_SPI_Receive+0x10c>
 8007840:	e038      	b.n	80078b4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b01      	cmp	r3, #1
 800784e:	d113      	bne.n	8007878 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785a:	b292      	uxth	r2, r2
 800785c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007862:	1c9a      	adds	r2, r3, #2
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007876:	e018      	b.n	80078aa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007878:	f7fe f966 	bl	8005b48 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d803      	bhi.n	8007890 <HAL_SPI_Receive+0x1d2>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788e:	d102      	bne.n	8007896 <HAL_SPI_Receive+0x1d8>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e01e      	b.n	80078e8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1c6      	bne.n	8007842 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fa4b 	bl	8007d54 <SPI_EndRxTransaction>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e000      	b.n	80078e8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80078e6:	2300      	movs	r3, #0
  }
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	@ 0x28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078fe:	2301      	movs	r3, #1
 8007900:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007902:	f7fe f921 	bl	8005b48 <HAL_GetTick>
 8007906:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800790e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007916:	887b      	ldrh	r3, [r7, #2]
 8007918:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800791a:	7ffb      	ldrb	r3, [r7, #31]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d00c      	beq.n	800793a <HAL_SPI_TransmitReceive+0x4a>
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007926:	d106      	bne.n	8007936 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d102      	bne.n	8007936 <HAL_SPI_TransmitReceive+0x46>
 8007930:	7ffb      	ldrb	r3, [r7, #31]
 8007932:	2b04      	cmp	r3, #4
 8007934:	d001      	beq.n	800793a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007936:	2302      	movs	r3, #2
 8007938:	e17f      	b.n	8007c3a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <HAL_SPI_TransmitReceive+0x5c>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_SPI_TransmitReceive+0x5c>
 8007946:	887b      	ldrh	r3, [r7, #2]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e174      	b.n	8007c3a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_SPI_TransmitReceive+0x6e>
 800795a:	2302      	movs	r3, #2
 800795c:	e16d      	b.n	8007c3a <HAL_SPI_TransmitReceive+0x34a>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b04      	cmp	r3, #4
 8007970:	d003      	beq.n	800797a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2205      	movs	r2, #5
 8007976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	887a      	ldrh	r2, [r7, #2]
 800798a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	887a      	ldrh	r2, [r7, #2]
 8007990:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	887a      	ldrh	r2, [r7, #2]
 800799c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	887a      	ldrh	r2, [r7, #2]
 80079a2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ba:	2b40      	cmp	r3, #64	@ 0x40
 80079bc:	d007      	beq.n	80079ce <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d6:	d17e      	bne.n	8007ad6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <HAL_SPI_TransmitReceive+0xf6>
 80079e0:	8afb      	ldrh	r3, [r7, #22]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d16c      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ea:	881a      	ldrh	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f6:	1c9a      	adds	r2, r3, #2
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a0a:	e059      	b.n	8007ac0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d11b      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0x162>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d016      	beq.n	8007a52 <HAL_SPI_TransmitReceive+0x162>
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d113      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2e:	881a      	ldrh	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3a:	1c9a      	adds	r2, r3, #2
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d119      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x1a4>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d014      	beq.n	8007a94 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68da      	ldr	r2, [r3, #12]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a74:	b292      	uxth	r2, r2
 8007a76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7c:	1c9a      	adds	r2, r3, #2
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a90:	2301      	movs	r3, #1
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a94:	f7fe f858 	bl	8005b48 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d80d      	bhi.n	8007ac0 <HAL_SPI_TransmitReceive+0x1d0>
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d009      	beq.n	8007ac0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e0bc      	b.n	8007c3a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1a0      	bne.n	8007a0c <HAL_SPI_TransmitReceive+0x11c>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d19b      	bne.n	8007a0c <HAL_SPI_TransmitReceive+0x11c>
 8007ad4:	e082      	b.n	8007bdc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <HAL_SPI_TransmitReceive+0x1f4>
 8007ade:	8afb      	ldrh	r3, [r7, #22]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d171      	bne.n	8007bc8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	330c      	adds	r3, #12
 8007aee:	7812      	ldrb	r2, [r2, #0]
 8007af0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b0a:	e05d      	b.n	8007bc8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d11c      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x264>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d017      	beq.n	8007b54 <HAL_SPI_TransmitReceive+0x264>
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d114      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	330c      	adds	r3, #12
 8007b34:	7812      	ldrb	r2, [r2, #0]
 8007b36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d119      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x2a6>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d014      	beq.n	8007b96 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b92:	2301      	movs	r3, #1
 8007b94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b96:	f7fd ffd7 	bl	8005b48 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d803      	bhi.n	8007bae <HAL_SPI_TransmitReceive+0x2be>
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bac:	d102      	bne.n	8007bb4 <HAL_SPI_TransmitReceive+0x2c4>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e038      	b.n	8007c3a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d19c      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x21c>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d197      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bdc:	6a3a      	ldr	r2, [r7, #32]
 8007bde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f91d 	bl	8007e20 <SPI_EndRxTxTransaction>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e01d      	b.n	8007c3a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c06:	2300      	movs	r3, #0
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	613b      	str	r3, [r7, #16]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e000      	b.n	8007c3a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007c38:	2300      	movs	r3, #0
  }
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3728      	adds	r7, #40	@ 0x28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	4613      	mov	r3, r2
 8007c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c54:	f7fd ff78 	bl	8005b48 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	4413      	add	r3, r2
 8007c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c64:	f7fd ff70 	bl	8005b48 <HAL_GetTick>
 8007c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c6a:	4b39      	ldr	r3, [pc, #228]	@ (8007d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	015b      	lsls	r3, r3, #5
 8007c70:	0d1b      	lsrs	r3, r3, #20
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	fb02 f303 	mul.w	r3, r2, r3
 8007c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c7a:	e055      	b.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d051      	beq.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c84:	f7fd ff60 	bl	8005b48 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d902      	bls.n	8007c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d13d      	bne.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cb2:	d111      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cbc:	d004      	beq.n	8007cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cc6:	d107      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ce0:	d10f      	bne.n	8007d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e018      	b.n	8007d48 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d102      	bne.n	8007d22 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	61fb      	str	r3, [r7, #28]
 8007d20:	e002      	b.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	4013      	ands	r3, r2
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	bf0c      	ite	eq
 8007d38:	2301      	moveq	r3, #1
 8007d3a:	2300      	movne	r3, #0
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d19a      	bne.n	8007c7c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3720      	adds	r7, #32
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	2000002c 	.word	0x2000002c

08007d54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d68:	d111      	bne.n	8007d8e <SPI_EndRxTransaction+0x3a>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d72:	d004      	beq.n	8007d7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d7c:	d107      	bne.n	8007d8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d96:	d12a      	bne.n	8007dee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007da0:	d012      	beq.n	8007dc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2200      	movs	r2, #0
 8007daa:	2180      	movs	r1, #128	@ 0x80
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff ff49 	bl	8007c44 <SPI_WaitFlagStateUntilTimeout>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d02d      	beq.n	8007e14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dbc:	f043 0220 	orr.w	r2, r3, #32
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e026      	b.n	8007e16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7ff ff36 	bl	8007c44 <SPI_WaitFlagStateUntilTimeout>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01a      	beq.n	8007e14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de2:	f043 0220 	orr.w	r2, r3, #32
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e013      	b.n	8007e16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2200      	movs	r2, #0
 8007df6:	2101      	movs	r1, #1
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff ff23 	bl	8007c44 <SPI_WaitFlagStateUntilTimeout>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d007      	beq.n	8007e14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e08:	f043 0220 	orr.w	r2, r3, #32
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e000      	b.n	8007e16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2201      	movs	r2, #1
 8007e34:	2102      	movs	r1, #2
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff ff04 	bl	8007c44 <SPI_WaitFlagStateUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d007      	beq.n	8007e52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e46:	f043 0220 	orr.w	r2, r3, #32
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e032      	b.n	8007eb8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e52:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec0 <SPI_EndRxTxTransaction+0xa0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a1b      	ldr	r2, [pc, #108]	@ (8007ec4 <SPI_EndRxTxTransaction+0xa4>)
 8007e58:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5c:	0d5b      	lsrs	r3, r3, #21
 8007e5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007e62:	fb02 f303 	mul.w	r3, r2, r3
 8007e66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e70:	d112      	bne.n	8007e98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2180      	movs	r1, #128	@ 0x80
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff fee1 	bl	8007c44 <SPI_WaitFlagStateUntilTimeout>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d016      	beq.n	8007eb6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8c:	f043 0220 	orr.w	r2, r3, #32
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e00f      	b.n	8007eb8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00a      	beq.n	8007eb4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eae:	2b80      	cmp	r3, #128	@ 0x80
 8007eb0:	d0f2      	beq.n	8007e98 <SPI_EndRxTxTransaction+0x78>
 8007eb2:	e000      	b.n	8007eb6 <SPI_EndRxTxTransaction+0x96>
        break;
 8007eb4:	bf00      	nop
  }

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	2000002c 	.word	0x2000002c
 8007ec4:	165e9f81 	.word	0x165e9f81

08007ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e041      	b.n	8007f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7fc fd72 	bl	80049d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4619      	mov	r1, r3
 8007f06:	4610      	mov	r0, r2
 8007f08:	f000 fd7a 	bl	8008a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e041      	b.n	8007ffc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f839 	bl	8008004 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	f000 fd2b 	bl	8008a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d109      	bne.n	800803c <HAL_TIM_PWM_Start+0x24>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b01      	cmp	r3, #1
 8008032:	bf14      	ite	ne
 8008034:	2301      	movne	r3, #1
 8008036:	2300      	moveq	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	e022      	b.n	8008082 <HAL_TIM_PWM_Start+0x6a>
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2b04      	cmp	r3, #4
 8008040:	d109      	bne.n	8008056 <HAL_TIM_PWM_Start+0x3e>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b01      	cmp	r3, #1
 800804c:	bf14      	ite	ne
 800804e:	2301      	movne	r3, #1
 8008050:	2300      	moveq	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	e015      	b.n	8008082 <HAL_TIM_PWM_Start+0x6a>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b08      	cmp	r3, #8
 800805a:	d109      	bne.n	8008070 <HAL_TIM_PWM_Start+0x58>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b01      	cmp	r3, #1
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	e008      	b.n	8008082 <HAL_TIM_PWM_Start+0x6a>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b01      	cmp	r3, #1
 800807a:	bf14      	ite	ne
 800807c:	2301      	movne	r3, #1
 800807e:	2300      	moveq	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e068      	b.n	800815c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d104      	bne.n	800809a <HAL_TIM_PWM_Start+0x82>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008098:	e013      	b.n	80080c2 <HAL_TIM_PWM_Start+0xaa>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b04      	cmp	r3, #4
 800809e:	d104      	bne.n	80080aa <HAL_TIM_PWM_Start+0x92>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080a8:	e00b      	b.n	80080c2 <HAL_TIM_PWM_Start+0xaa>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d104      	bne.n	80080ba <HAL_TIM_PWM_Start+0xa2>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080b8:	e003      	b.n	80080c2 <HAL_TIM_PWM_Start+0xaa>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2201      	movs	r2, #1
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 ff44 	bl	8008f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a23      	ldr	r2, [pc, #140]	@ (8008164 <HAL_TIM_PWM_Start+0x14c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d107      	bne.n	80080ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008164 <HAL_TIM_PWM_Start+0x14c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d018      	beq.n	8008126 <HAL_TIM_PWM_Start+0x10e>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080fc:	d013      	beq.n	8008126 <HAL_TIM_PWM_Start+0x10e>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a19      	ldr	r2, [pc, #100]	@ (8008168 <HAL_TIM_PWM_Start+0x150>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00e      	beq.n	8008126 <HAL_TIM_PWM_Start+0x10e>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a17      	ldr	r2, [pc, #92]	@ (800816c <HAL_TIM_PWM_Start+0x154>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d009      	beq.n	8008126 <HAL_TIM_PWM_Start+0x10e>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a16      	ldr	r2, [pc, #88]	@ (8008170 <HAL_TIM_PWM_Start+0x158>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d004      	beq.n	8008126 <HAL_TIM_PWM_Start+0x10e>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a14      	ldr	r2, [pc, #80]	@ (8008174 <HAL_TIM_PWM_Start+0x15c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d111      	bne.n	800814a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 0307 	and.w	r3, r3, #7
 8008130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b06      	cmp	r3, #6
 8008136:	d010      	beq.n	800815a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0201 	orr.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008148:	e007      	b.n	800815a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0201 	orr.w	r2, r2, #1
 8008158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40010000 	.word	0x40010000
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40014000 	.word	0x40014000

08008178 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2200      	movs	r2, #0
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fee4 	bl	8008f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a29      	ldr	r2, [pc, #164]	@ (800823c <HAL_TIM_PWM_Stop+0xc4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d117      	bne.n	80081ca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6a1a      	ldr	r2, [r3, #32]
 80081a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80081a4:	4013      	ands	r3, r2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10f      	bne.n	80081ca <HAL_TIM_PWM_Stop+0x52>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6a1a      	ldr	r2, [r3, #32]
 80081b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80081b4:	4013      	ands	r3, r2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d107      	bne.n	80081ca <HAL_TIM_PWM_Stop+0x52>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6a1a      	ldr	r2, [r3, #32]
 80081d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80081d4:	4013      	ands	r3, r2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10f      	bne.n	80081fa <HAL_TIM_PWM_Stop+0x82>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6a1a      	ldr	r2, [r3, #32]
 80081e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80081e4:	4013      	ands	r3, r2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d107      	bne.n	80081fa <HAL_TIM_PWM_Stop+0x82>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0201 	bic.w	r2, r2, #1
 80081f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <HAL_TIM_PWM_Stop+0x92>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008208:	e013      	b.n	8008232 <HAL_TIM_PWM_Stop+0xba>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b04      	cmp	r3, #4
 800820e:	d104      	bne.n	800821a <HAL_TIM_PWM_Stop+0xa2>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008218:	e00b      	b.n	8008232 <HAL_TIM_PWM_Stop+0xba>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b08      	cmp	r3, #8
 800821e:	d104      	bne.n	800822a <HAL_TIM_PWM_Stop+0xb2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008228:	e003      	b.n	8008232 <HAL_TIM_PWM_Stop+0xba>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	40010000 	.word	0x40010000

08008240 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e097      	b.n	8008384 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d106      	bne.n	800826e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7fc fbf3 	bl	8004a54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2202      	movs	r2, #2
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008284:	f023 0307 	bic.w	r3, r3, #7
 8008288:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3304      	adds	r3, #4
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f000 fbb3 	bl	8008a00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	021b      	lsls	r3, r3, #8
 80082d2:	4313      	orrs	r3, r2
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80082e0:	f023 030c 	bic.w	r3, r3, #12
 80082e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	021b      	lsls	r3, r3, #8
 80082fc:	4313      	orrs	r3, r2
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	4313      	orrs	r3, r2
 8008302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	011a      	lsls	r2, r3, #4
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	031b      	lsls	r3, r3, #12
 8008310:	4313      	orrs	r3, r2
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	4313      	orrs	r3, r2
 8008316:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800831e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008326:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	4313      	orrs	r3, r2
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800839c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80083b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d110      	bne.n	80083de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d102      	bne.n	80083c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80083c2:	7b7b      	ldrb	r3, [r7, #13]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d001      	beq.n	80083cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e069      	b.n	80084a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2202      	movs	r2, #2
 80083d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083dc:	e031      	b.n	8008442 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d110      	bne.n	8008406 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d102      	bne.n	80083f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80083ea:	7b3b      	ldrb	r3, [r7, #12]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d001      	beq.n	80083f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e055      	b.n	80084a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008404:	e01d      	b.n	8008442 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d108      	bne.n	800841e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d105      	bne.n	800841e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008412:	7b7b      	ldrb	r3, [r7, #13]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d102      	bne.n	800841e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008418:	7b3b      	ldrb	r3, [r7, #12]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d001      	beq.n	8008422 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e03e      	b.n	80084a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2202      	movs	r2, #2
 8008426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2202      	movs	r2, #2
 800842e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2202      	movs	r2, #2
 800843e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <HAL_TIM_Encoder_Start+0xc4>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b04      	cmp	r3, #4
 800844c:	d008      	beq.n	8008460 <HAL_TIM_Encoder_Start+0xd4>
 800844e:	e00f      	b.n	8008470 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2201      	movs	r2, #1
 8008456:	2100      	movs	r1, #0
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fd7d 	bl	8008f58 <TIM_CCxChannelCmd>
      break;
 800845e:	e016      	b.n	800848e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2201      	movs	r2, #1
 8008466:	2104      	movs	r1, #4
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fd75 	bl	8008f58 <TIM_CCxChannelCmd>
      break;
 800846e:	e00e      	b.n	800848e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2201      	movs	r2, #1
 8008476:	2100      	movs	r1, #0
 8008478:	4618      	mov	r0, r3
 800847a:	f000 fd6d 	bl	8008f58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2201      	movs	r2, #1
 8008484:	2104      	movs	r1, #4
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fd66 	bl	8008f58 <TIM_CCxChannelCmd>
      break;
 800848c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f042 0201 	orr.w	r2, r2, #1
 800849c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d020      	beq.n	800850c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d01b      	beq.n	800850c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f06f 0202 	mvn.w	r2, #2
 80084dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa65 	bl	80089c2 <HAL_TIM_IC_CaptureCallback>
 80084f8:	e005      	b.n	8008506 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa57 	bl	80089ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fa68 	bl	80089d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	2b00      	cmp	r3, #0
 8008514:	d020      	beq.n	8008558 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01b      	beq.n	8008558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f06f 0204 	mvn.w	r2, #4
 8008528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2202      	movs	r2, #2
 800852e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa3f 	bl	80089c2 <HAL_TIM_IC_CaptureCallback>
 8008544:	e005      	b.n	8008552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fa31 	bl	80089ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa42 	bl	80089d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f003 0308 	and.w	r3, r3, #8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d020      	beq.n	80085a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f003 0308 	and.w	r3, r3, #8
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01b      	beq.n	80085a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0208 	mvn.w	r2, #8
 8008574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2204      	movs	r2, #4
 800857a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa19 	bl	80089c2 <HAL_TIM_IC_CaptureCallback>
 8008590:	e005      	b.n	800859e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fa0b 	bl	80089ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa1c 	bl	80089d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f003 0310 	and.w	r3, r3, #16
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d020      	beq.n	80085f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f003 0310 	and.w	r3, r3, #16
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01b      	beq.n	80085f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f06f 0210 	mvn.w	r2, #16
 80085c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2208      	movs	r2, #8
 80085c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f9f3 	bl	80089c2 <HAL_TIM_IC_CaptureCallback>
 80085dc:	e005      	b.n	80085ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f9e5 	bl	80089ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f9f6 	bl	80089d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00c      	beq.n	8008614 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d007      	beq.n	8008614 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f06f 0201 	mvn.w	r2, #1
 800860c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f9c3 	bl	800899a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00c      	beq.n	8008638 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008624:	2b00      	cmp	r3, #0
 8008626:	d007      	beq.n	8008638 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fd80 	bl	8009138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00c      	beq.n	800865c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f9c7 	bl	80089ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00c      	beq.n	8008680 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	2b00      	cmp	r3, #0
 800866e:	d007      	beq.n	8008680 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0220 	mvn.w	r2, #32
 8008678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fd52 	bl	8009124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008680:	bf00      	nop
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d101      	bne.n	80086a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086a2:	2302      	movs	r3, #2
 80086a4:	e0ae      	b.n	8008804 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b0c      	cmp	r3, #12
 80086b2:	f200 809f 	bhi.w	80087f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80086b6:	a201      	add	r2, pc, #4	@ (adr r2, 80086bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086bc:	080086f1 	.word	0x080086f1
 80086c0:	080087f5 	.word	0x080087f5
 80086c4:	080087f5 	.word	0x080087f5
 80086c8:	080087f5 	.word	0x080087f5
 80086cc:	08008731 	.word	0x08008731
 80086d0:	080087f5 	.word	0x080087f5
 80086d4:	080087f5 	.word	0x080087f5
 80086d8:	080087f5 	.word	0x080087f5
 80086dc:	08008773 	.word	0x08008773
 80086e0:	080087f5 	.word	0x080087f5
 80086e4:	080087f5 	.word	0x080087f5
 80086e8:	080087f5 	.word	0x080087f5
 80086ec:	080087b3 	.word	0x080087b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68b9      	ldr	r1, [r7, #8]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 fa08 	bl	8008b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699a      	ldr	r2, [r3, #24]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0208 	orr.w	r2, r2, #8
 800870a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	699a      	ldr	r2, [r3, #24]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0204 	bic.w	r2, r2, #4
 800871a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6999      	ldr	r1, [r3, #24]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	691a      	ldr	r2, [r3, #16]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	619a      	str	r2, [r3, #24]
      break;
 800872e:	e064      	b.n	80087fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fa4e 	bl	8008bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699a      	ldr	r2, [r3, #24]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800874a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	699a      	ldr	r2, [r3, #24]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800875a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6999      	ldr	r1, [r3, #24]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	021a      	lsls	r2, r3, #8
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	619a      	str	r2, [r3, #24]
      break;
 8008770:	e043      	b.n	80087fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68b9      	ldr	r1, [r7, #8]
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fa99 	bl	8008cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69da      	ldr	r2, [r3, #28]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f042 0208 	orr.w	r2, r2, #8
 800878c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69da      	ldr	r2, [r3, #28]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0204 	bic.w	r2, r2, #4
 800879c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69d9      	ldr	r1, [r3, #28]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	691a      	ldr	r2, [r3, #16]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	61da      	str	r2, [r3, #28]
      break;
 80087b0:	e023      	b.n	80087fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fae3 	bl	8008d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69da      	ldr	r2, [r3, #28]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69da      	ldr	r2, [r3, #28]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69d9      	ldr	r1, [r3, #28]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	021a      	lsls	r2, r3, #8
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	61da      	str	r2, [r3, #28]
      break;
 80087f2:	e002      	b.n	80087fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	75fb      	strb	r3, [r7, #23]
      break;
 80087f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <HAL_TIM_ConfigClockSource+0x1c>
 8008824:	2302      	movs	r3, #2
 8008826:	e0b4      	b.n	8008992 <HAL_TIM_ConfigClockSource+0x186>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800884e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008860:	d03e      	beq.n	80088e0 <HAL_TIM_ConfigClockSource+0xd4>
 8008862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008866:	f200 8087 	bhi.w	8008978 <HAL_TIM_ConfigClockSource+0x16c>
 800886a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800886e:	f000 8086 	beq.w	800897e <HAL_TIM_ConfigClockSource+0x172>
 8008872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008876:	d87f      	bhi.n	8008978 <HAL_TIM_ConfigClockSource+0x16c>
 8008878:	2b70      	cmp	r3, #112	@ 0x70
 800887a:	d01a      	beq.n	80088b2 <HAL_TIM_ConfigClockSource+0xa6>
 800887c:	2b70      	cmp	r3, #112	@ 0x70
 800887e:	d87b      	bhi.n	8008978 <HAL_TIM_ConfigClockSource+0x16c>
 8008880:	2b60      	cmp	r3, #96	@ 0x60
 8008882:	d050      	beq.n	8008926 <HAL_TIM_ConfigClockSource+0x11a>
 8008884:	2b60      	cmp	r3, #96	@ 0x60
 8008886:	d877      	bhi.n	8008978 <HAL_TIM_ConfigClockSource+0x16c>
 8008888:	2b50      	cmp	r3, #80	@ 0x50
 800888a:	d03c      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0xfa>
 800888c:	2b50      	cmp	r3, #80	@ 0x50
 800888e:	d873      	bhi.n	8008978 <HAL_TIM_ConfigClockSource+0x16c>
 8008890:	2b40      	cmp	r3, #64	@ 0x40
 8008892:	d058      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0x13a>
 8008894:	2b40      	cmp	r3, #64	@ 0x40
 8008896:	d86f      	bhi.n	8008978 <HAL_TIM_ConfigClockSource+0x16c>
 8008898:	2b30      	cmp	r3, #48	@ 0x30
 800889a:	d064      	beq.n	8008966 <HAL_TIM_ConfigClockSource+0x15a>
 800889c:	2b30      	cmp	r3, #48	@ 0x30
 800889e:	d86b      	bhi.n	8008978 <HAL_TIM_ConfigClockSource+0x16c>
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	d060      	beq.n	8008966 <HAL_TIM_ConfigClockSource+0x15a>
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d867      	bhi.n	8008978 <HAL_TIM_ConfigClockSource+0x16c>
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d05c      	beq.n	8008966 <HAL_TIM_ConfigClockSource+0x15a>
 80088ac:	2b10      	cmp	r3, #16
 80088ae:	d05a      	beq.n	8008966 <HAL_TIM_ConfigClockSource+0x15a>
 80088b0:	e062      	b.n	8008978 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088c2:	f000 fb29 	bl	8008f18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80088d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	609a      	str	r2, [r3, #8]
      break;
 80088de:	e04f      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088f0:	f000 fb12 	bl	8008f18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689a      	ldr	r2, [r3, #8]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008902:	609a      	str	r2, [r3, #8]
      break;
 8008904:	e03c      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008912:	461a      	mov	r2, r3
 8008914:	f000 fa86 	bl	8008e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2150      	movs	r1, #80	@ 0x50
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fadf 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008924:	e02c      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008932:	461a      	mov	r2, r3
 8008934:	f000 faa5 	bl	8008e82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2160      	movs	r1, #96	@ 0x60
 800893e:	4618      	mov	r0, r3
 8008940:	f000 facf 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008944:	e01c      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008952:	461a      	mov	r2, r3
 8008954:	f000 fa66 	bl	8008e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2140      	movs	r1, #64	@ 0x40
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fabf 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008964:	e00c      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f000 fab6 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008976:	e003      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	73fb      	strb	r3, [r7, #15]
      break;
 800897c:	e000      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800897e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089f2:	bf00      	nop
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
	...

08008a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a37      	ldr	r2, [pc, #220]	@ (8008af0 <TIM_Base_SetConfig+0xf0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d00f      	beq.n	8008a38 <TIM_Base_SetConfig+0x38>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a1e:	d00b      	beq.n	8008a38 <TIM_Base_SetConfig+0x38>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a34      	ldr	r2, [pc, #208]	@ (8008af4 <TIM_Base_SetConfig+0xf4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d007      	beq.n	8008a38 <TIM_Base_SetConfig+0x38>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a33      	ldr	r2, [pc, #204]	@ (8008af8 <TIM_Base_SetConfig+0xf8>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d003      	beq.n	8008a38 <TIM_Base_SetConfig+0x38>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a32      	ldr	r2, [pc, #200]	@ (8008afc <TIM_Base_SetConfig+0xfc>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d108      	bne.n	8008a4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a28      	ldr	r2, [pc, #160]	@ (8008af0 <TIM_Base_SetConfig+0xf0>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d01b      	beq.n	8008a8a <TIM_Base_SetConfig+0x8a>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a58:	d017      	beq.n	8008a8a <TIM_Base_SetConfig+0x8a>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a25      	ldr	r2, [pc, #148]	@ (8008af4 <TIM_Base_SetConfig+0xf4>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d013      	beq.n	8008a8a <TIM_Base_SetConfig+0x8a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a24      	ldr	r2, [pc, #144]	@ (8008af8 <TIM_Base_SetConfig+0xf8>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00f      	beq.n	8008a8a <TIM_Base_SetConfig+0x8a>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a23      	ldr	r2, [pc, #140]	@ (8008afc <TIM_Base_SetConfig+0xfc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00b      	beq.n	8008a8a <TIM_Base_SetConfig+0x8a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a22      	ldr	r2, [pc, #136]	@ (8008b00 <TIM_Base_SetConfig+0x100>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d007      	beq.n	8008a8a <TIM_Base_SetConfig+0x8a>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a21      	ldr	r2, [pc, #132]	@ (8008b04 <TIM_Base_SetConfig+0x104>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d003      	beq.n	8008a8a <TIM_Base_SetConfig+0x8a>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a20      	ldr	r2, [pc, #128]	@ (8008b08 <TIM_Base_SetConfig+0x108>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d108      	bne.n	8008a9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	689a      	ldr	r2, [r3, #8]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a0c      	ldr	r2, [pc, #48]	@ (8008af0 <TIM_Base_SetConfig+0xf0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d103      	bne.n	8008aca <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	691a      	ldr	r2, [r3, #16]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f043 0204 	orr.w	r2, r3, #4
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	601a      	str	r2, [r3, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	40010000 	.word	0x40010000
 8008af4:	40000400 	.word	0x40000400
 8008af8:	40000800 	.word	0x40000800
 8008afc:	40000c00 	.word	0x40000c00
 8008b00:	40014000 	.word	0x40014000
 8008b04:	40014400 	.word	0x40014400
 8008b08:	40014800 	.word	0x40014800

08008b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
 8008b20:	f023 0201 	bic.w	r2, r3, #1
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 0303 	bic.w	r3, r3, #3
 8008b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f023 0302 	bic.w	r3, r3, #2
 8008b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd4 <TIM_OC1_SetConfig+0xc8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d10c      	bne.n	8008b82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f023 0308 	bic.w	r3, r3, #8
 8008b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f023 0304 	bic.w	r3, r3, #4
 8008b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a13      	ldr	r2, [pc, #76]	@ (8008bd4 <TIM_OC1_SetConfig+0xc8>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d111      	bne.n	8008bae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	621a      	str	r2, [r3, #32]
}
 8008bc8:	bf00      	nop
 8008bca:	371c      	adds	r7, #28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	40010000 	.word	0x40010000

08008bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	f023 0210 	bic.w	r2, r3, #16
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	021b      	lsls	r3, r3, #8
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f023 0320 	bic.w	r3, r3, #32
 8008c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	011b      	lsls	r3, r3, #4
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a1e      	ldr	r2, [pc, #120]	@ (8008cac <TIM_OC2_SetConfig+0xd4>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d10d      	bne.n	8008c54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a15      	ldr	r2, [pc, #84]	@ (8008cac <TIM_OC2_SetConfig+0xd4>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d113      	bne.n	8008c84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	621a      	str	r2, [r3, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	40010000 	.word	0x40010000

08008cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f023 0303 	bic.w	r3, r3, #3
 8008ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	021b      	lsls	r3, r3, #8
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a1d      	ldr	r2, [pc, #116]	@ (8008d80 <TIM_OC3_SetConfig+0xd0>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d10d      	bne.n	8008d2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a14      	ldr	r2, [pc, #80]	@ (8008d80 <TIM_OC3_SetConfig+0xd0>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d113      	bne.n	8008d5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	011b      	lsls	r3, r3, #4
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	011b      	lsls	r3, r3, #4
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	621a      	str	r2, [r3, #32]
}
 8008d74:	bf00      	nop
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	40010000 	.word	0x40010000

08008d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	031b      	lsls	r3, r3, #12
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a10      	ldr	r2, [pc, #64]	@ (8008e20 <TIM_OC4_SetConfig+0x9c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d109      	bne.n	8008df8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	019b      	lsls	r3, r3, #6
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	621a      	str	r2, [r3, #32]
}
 8008e12:	bf00      	nop
 8008e14:	371c      	adds	r7, #28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	40010000 	.word	0x40010000

08008e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f023 0201 	bic.w	r2, r3, #1
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f023 030a 	bic.w	r3, r3, #10
 8008e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	621a      	str	r2, [r3, #32]
}
 8008e76:	bf00      	nop
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b087      	sub	sp, #28
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	f023 0210 	bic.w	r2, r3, #16
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	031b      	lsls	r3, r3, #12
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	011b      	lsls	r3, r3, #4
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	621a      	str	r2, [r3, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b085      	sub	sp, #20
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f043 0307 	orr.w	r3, r3, #7
 8008f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	609a      	str	r2, [r3, #8]
}
 8008f0c:	bf00      	nop
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	021a      	lsls	r2, r3, #8
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	609a      	str	r2, [r3, #8]
}
 8008f4c:	bf00      	nop
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f003 031f 	and.w	r3, r3, #31
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a1a      	ldr	r2, [r3, #32]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	43db      	mvns	r3, r3
 8008f7a:	401a      	ands	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6a1a      	ldr	r2, [r3, #32]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f003 031f 	and.w	r3, r3, #31
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f90:	431a      	orrs	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
	...

08008fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d101      	bne.n	8008fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e050      	b.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800906c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d018      	beq.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009008:	d013      	beq.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a18      	ldr	r2, [pc, #96]	@ (8009070 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d00e      	beq.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a16      	ldr	r2, [pc, #88]	@ (8009074 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d009      	beq.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a15      	ldr	r2, [pc, #84]	@ (8009078 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d004      	beq.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a13      	ldr	r2, [pc, #76]	@ (800907c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d10c      	bne.n	800904c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	4313      	orrs	r3, r2
 8009042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	40010000 	.word	0x40010000
 8009070:	40000400 	.word	0x40000400
 8009074:	40000800 	.word	0x40000800
 8009078:	40000c00 	.word	0x40000c00
 800907c:	40014000 	.word	0x40014000

08009080 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009098:	2302      	movs	r3, #2
 800909a:	e03d      	b.n	8009118 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e042      	b.n	80091e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d106      	bne.n	8009178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7fb fd88 	bl	8004c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2224      	movs	r2, #36	@ 0x24
 800917c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800918e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fd7f 	bl	8009c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	691a      	ldr	r2, [r3, #16]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	695a      	ldr	r2, [r3, #20]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2220      	movs	r2, #32
 80091d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08a      	sub	sp, #40	@ 0x28
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b20      	cmp	r3, #32
 800920a:	d175      	bne.n	80092f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <HAL_UART_Transmit+0x2c>
 8009212:	88fb      	ldrh	r3, [r7, #6]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e06e      	b.n	80092fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2221      	movs	r2, #33	@ 0x21
 8009226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800922a:	f7fc fc8d 	bl	8005b48 <HAL_GetTick>
 800922e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	88fa      	ldrh	r2, [r7, #6]
 8009234:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	88fa      	ldrh	r2, [r7, #6]
 800923a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009244:	d108      	bne.n	8009258 <HAL_UART_Transmit+0x6c>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	e003      	b.n	8009260 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800925c:	2300      	movs	r3, #0
 800925e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009260:	e02e      	b.n	80092c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2200      	movs	r2, #0
 800926a:	2180      	movs	r1, #128	@ 0x80
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fb1d 	bl	80098ac <UART_WaitOnFlagUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e03a      	b.n	80092fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10b      	bne.n	80092a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	881b      	ldrh	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	3302      	adds	r3, #2
 800929e:	61bb      	str	r3, [r7, #24]
 80092a0:	e007      	b.n	80092b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	781a      	ldrb	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	3301      	adds	r3, #1
 80092b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1cb      	bne.n	8009262 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2200      	movs	r2, #0
 80092d2:	2140      	movs	r1, #64	@ 0x40
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 fae9 	bl	80098ac <UART_WaitOnFlagUntilTimeout>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d005      	beq.n	80092ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e006      	b.n	80092fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	e000      	b.n	80092fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80092f8:	2302      	movs	r3, #2
  }
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3720      	adds	r7, #32
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b0ba      	sub	sp, #232	@ 0xe8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800932a:	2300      	movs	r3, #0
 800932c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009330:	2300      	movs	r3, #0
 8009332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800933a:	f003 030f 	and.w	r3, r3, #15
 800933e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10f      	bne.n	800936a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800934a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b00      	cmp	r3, #0
 8009354:	d009      	beq.n	800936a <HAL_UART_IRQHandler+0x66>
 8009356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fbd7 	bl	8009b16 <UART_Receive_IT>
      return;
 8009368:	e273      	b.n	8009852 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800936a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 80de 	beq.w	8009530 <HAL_UART_IRQHandler+0x22c>
 8009374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b00      	cmp	r3, #0
 800937e:	d106      	bne.n	800938e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009384:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80d1 	beq.w	8009530 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800938e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00b      	beq.n	80093b2 <HAL_UART_IRQHandler+0xae>
 800939a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800939e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d005      	beq.n	80093b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093aa:	f043 0201 	orr.w	r2, r3, #1
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b6:	f003 0304 	and.w	r3, r3, #4
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00b      	beq.n	80093d6 <HAL_UART_IRQHandler+0xd2>
 80093be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d005      	beq.n	80093d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ce:	f043 0202 	orr.w	r2, r3, #2
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00b      	beq.n	80093fa <HAL_UART_IRQHandler+0xf6>
 80093e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d005      	beq.n	80093fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f2:	f043 0204 	orr.w	r2, r3, #4
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093fe:	f003 0308 	and.w	r3, r3, #8
 8009402:	2b00      	cmp	r3, #0
 8009404:	d011      	beq.n	800942a <HAL_UART_IRQHandler+0x126>
 8009406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800940a:	f003 0320 	and.w	r3, r3, #32
 800940e:	2b00      	cmp	r3, #0
 8009410:	d105      	bne.n	800941e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009422:	f043 0208 	orr.w	r2, r3, #8
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 820a 	beq.w	8009848 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009438:	f003 0320 	and.w	r3, r3, #32
 800943c:	2b00      	cmp	r3, #0
 800943e:	d008      	beq.n	8009452 <HAL_UART_IRQHandler+0x14e>
 8009440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fb62 	bl	8009b16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800945c:	2b40      	cmp	r3, #64	@ 0x40
 800945e:	bf0c      	ite	eq
 8009460:	2301      	moveq	r3, #1
 8009462:	2300      	movne	r3, #0
 8009464:	b2db      	uxtb	r3, r3
 8009466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800946e:	f003 0308 	and.w	r3, r3, #8
 8009472:	2b00      	cmp	r3, #0
 8009474:	d103      	bne.n	800947e <HAL_UART_IRQHandler+0x17a>
 8009476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800947a:	2b00      	cmp	r3, #0
 800947c:	d04f      	beq.n	800951e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fa6d 	bl	800995e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800948e:	2b40      	cmp	r3, #64	@ 0x40
 8009490:	d141      	bne.n	8009516 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3314      	adds	r3, #20
 8009498:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80094a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3314      	adds	r3, #20
 80094ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80094be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80094c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80094ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80094d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1d9      	bne.n	8009492 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d013      	beq.n	800950e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ea:	4a8a      	ldr	r2, [pc, #552]	@ (8009714 <HAL_UART_IRQHandler+0x410>)
 80094ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fd f8cb 	bl	800668e <HAL_DMA_Abort_IT>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d016      	beq.n	800952c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009508:	4610      	mov	r0, r2
 800950a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800950c:	e00e      	b.n	800952c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f9b6 	bl	8009880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009514:	e00a      	b.n	800952c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f9b2 	bl	8009880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800951c:	e006      	b.n	800952c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f9ae 	bl	8009880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800952a:	e18d      	b.n	8009848 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952c:	bf00      	nop
    return;
 800952e:	e18b      	b.n	8009848 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009534:	2b01      	cmp	r3, #1
 8009536:	f040 8167 	bne.w	8009808 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800953a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800953e:	f003 0310 	and.w	r3, r3, #16
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 8160 	beq.w	8009808 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800954c:	f003 0310 	and.w	r3, r3, #16
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 8159 	beq.w	8009808 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009556:	2300      	movs	r3, #0
 8009558:	60bb      	str	r3, [r7, #8]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60bb      	str	r3, [r7, #8]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	60bb      	str	r3, [r7, #8]
 800956a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009576:	2b40      	cmp	r3, #64	@ 0x40
 8009578:	f040 80ce 	bne.w	8009718 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009588:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80a9 	beq.w	80096e4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800959a:	429a      	cmp	r2, r3
 800959c:	f080 80a2 	bcs.w	80096e4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095b2:	f000 8088 	beq.w	80096c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	330c      	adds	r3, #12
 80095bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80095cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	330c      	adds	r3, #12
 80095de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80095e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80095e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80095ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80095f2:	e841 2300 	strex	r3, r2, [r1]
 80095f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80095fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1d9      	bne.n	80095b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3314      	adds	r3, #20
 8009608:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009612:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009614:	f023 0301 	bic.w	r3, r3, #1
 8009618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3314      	adds	r3, #20
 8009622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009626:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800962a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800962e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009632:	e841 2300 	strex	r3, r2, [r1]
 8009636:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e1      	bne.n	8009602 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3314      	adds	r3, #20
 8009644:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800964e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3314      	adds	r3, #20
 800965e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009662:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009664:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009668:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e3      	bne.n	800963e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2220      	movs	r2, #32
 800967a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	330c      	adds	r3, #12
 800968a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009696:	f023 0310 	bic.w	r3, r3, #16
 800969a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	330c      	adds	r3, #12
 80096a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80096a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80096aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e3      	bne.n	8009684 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fc ff74 	bl	80065ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2202      	movs	r2, #2
 80096ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	b29b      	uxth	r3, r3
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f8d9 	bl	8009894 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80096e2:	e0b3      	b.n	800984c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80096e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096ec:	429a      	cmp	r2, r3
 80096ee:	f040 80ad 	bne.w	800984c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096fc:	f040 80a6 	bne.w	800984c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f8c1 	bl	8009894 <HAL_UARTEx_RxEventCallback>
      return;
 8009712:	e09b      	b.n	800984c <HAL_UART_IRQHandler+0x548>
 8009714:	08009a25 	.word	0x08009a25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009720:	b29b      	uxth	r3, r3
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800972c:	b29b      	uxth	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 808e 	beq.w	8009850 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 8089 	beq.w	8009850 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	330c      	adds	r3, #12
 8009744:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800974e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	330c      	adds	r3, #12
 800975e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009762:	647a      	str	r2, [r7, #68]	@ 0x44
 8009764:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e3      	bne.n	800973e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3314      	adds	r3, #20
 800977c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	623b      	str	r3, [r7, #32]
   return(result);
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	f023 0301 	bic.w	r3, r3, #1
 800978c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3314      	adds	r3, #20
 8009796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800979a:	633a      	str	r2, [r7, #48]	@ 0x30
 800979c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a2:	e841 2300 	strex	r3, r2, [r1]
 80097a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1e3      	bne.n	8009776 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	330c      	adds	r3, #12
 80097c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	e853 3f00 	ldrex	r3, [r3]
 80097ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 0310 	bic.w	r3, r3, #16
 80097d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	330c      	adds	r3, #12
 80097dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80097e0:	61fa      	str	r2, [r7, #28]
 80097e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	69b9      	ldr	r1, [r7, #24]
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	617b      	str	r3, [r7, #20]
   return(result);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e3      	bne.n	80097bc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2202      	movs	r2, #2
 80097f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f847 	bl	8009894 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009806:	e023      	b.n	8009850 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800980c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009810:	2b00      	cmp	r3, #0
 8009812:	d009      	beq.n	8009828 <HAL_UART_IRQHandler+0x524>
 8009814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800981c:	2b00      	cmp	r3, #0
 800981e:	d003      	beq.n	8009828 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f910 	bl	8009a46 <UART_Transmit_IT>
    return;
 8009826:	e014      	b.n	8009852 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800982c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00e      	beq.n	8009852 <HAL_UART_IRQHandler+0x54e>
 8009834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d008      	beq.n	8009852 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f950 	bl	8009ae6 <UART_EndTransmit_IT>
    return;
 8009846:	e004      	b.n	8009852 <HAL_UART_IRQHandler+0x54e>
    return;
 8009848:	bf00      	nop
 800984a:	e002      	b.n	8009852 <HAL_UART_IRQHandler+0x54e>
      return;
 800984c:	bf00      	nop
 800984e:	e000      	b.n	8009852 <HAL_UART_IRQHandler+0x54e>
      return;
 8009850:	bf00      	nop
  }
}
 8009852:	37e8      	adds	r7, #232	@ 0xe8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	4613      	mov	r3, r2
 80098ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098bc:	e03b      	b.n	8009936 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c4:	d037      	beq.n	8009936 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098c6:	f7fc f93f 	bl	8005b48 <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	6a3a      	ldr	r2, [r7, #32]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d302      	bcc.n	80098dc <UART_WaitOnFlagUntilTimeout+0x30>
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e03a      	b.n	8009956 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f003 0304 	and.w	r3, r3, #4
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d023      	beq.n	8009936 <UART_WaitOnFlagUntilTimeout+0x8a>
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b80      	cmp	r3, #128	@ 0x80
 80098f2:	d020      	beq.n	8009936 <UART_WaitOnFlagUntilTimeout+0x8a>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b40      	cmp	r3, #64	@ 0x40
 80098f8:	d01d      	beq.n	8009936 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0308 	and.w	r3, r3, #8
 8009904:	2b08      	cmp	r3, #8
 8009906:	d116      	bne.n	8009936 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009908:	2300      	movs	r3, #0
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	617b      	str	r3, [r7, #20]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	617b      	str	r3, [r7, #20]
 800991c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 f81d 	bl	800995e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2208      	movs	r2, #8
 8009928:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e00f      	b.n	8009956 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4013      	ands	r3, r2
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	429a      	cmp	r2, r3
 8009944:	bf0c      	ite	eq
 8009946:	2301      	moveq	r3, #1
 8009948:	2300      	movne	r3, #0
 800994a:	b2db      	uxtb	r3, r3
 800994c:	461a      	mov	r2, r3
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	429a      	cmp	r2, r3
 8009952:	d0b4      	beq.n	80098be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800995e:	b480      	push	{r7}
 8009960:	b095      	sub	sp, #84	@ 0x54
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	330c      	adds	r3, #12
 800996c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009970:	e853 3f00 	ldrex	r3, [r3]
 8009974:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800997c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	330c      	adds	r3, #12
 8009984:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009986:	643a      	str	r2, [r7, #64]	@ 0x40
 8009988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800998c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e5      	bne.n	8009966 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3314      	adds	r3, #20
 80099a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	f023 0301 	bic.w	r3, r3, #1
 80099b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	3314      	adds	r3, #20
 80099b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099c2:	e841 2300 	strex	r3, r2, [r1]
 80099c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1e5      	bne.n	800999a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d119      	bne.n	8009a0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	330c      	adds	r3, #12
 80099dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	e853 3f00 	ldrex	r3, [r3]
 80099e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f023 0310 	bic.w	r3, r3, #16
 80099ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	330c      	adds	r3, #12
 80099f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099f6:	61ba      	str	r2, [r7, #24]
 80099f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	6979      	ldr	r1, [r7, #20]
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	e841 2300 	strex	r3, r2, [r1]
 8009a02:	613b      	str	r3, [r7, #16]
   return(result);
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e5      	bne.n	80099d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009a18:	bf00      	nop
 8009a1a:	3754      	adds	r7, #84	@ 0x54
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f7ff ff21 	bl	8009880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b21      	cmp	r3, #33	@ 0x21
 8009a58:	d13e      	bne.n	8009ad8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a62:	d114      	bne.n	8009a8e <UART_Transmit_IT+0x48>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d110      	bne.n	8009a8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	1c9a      	adds	r2, r3, #2
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	621a      	str	r2, [r3, #32]
 8009a8c:	e008      	b.n	8009aa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	1c59      	adds	r1, r3, #1
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6211      	str	r1, [r2, #32]
 8009a98:	781a      	ldrb	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	4619      	mov	r1, r3
 8009aae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10f      	bne.n	8009ad4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ac2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ad2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	e000      	b.n	8009ada <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ad8:	2302      	movs	r3, #2
  }
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009afc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2220      	movs	r2, #32
 8009b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7ff fea6 	bl	8009858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b08c      	sub	sp, #48	@ 0x30
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b22      	cmp	r3, #34	@ 0x22
 8009b30:	f040 80aa 	bne.w	8009c88 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b3c:	d115      	bne.n	8009b6a <UART_Receive_IT+0x54>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d111      	bne.n	8009b6a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b62:	1c9a      	adds	r2, r3, #2
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	629a      	str	r2, [r3, #40]	@ 0x28
 8009b68:	e024      	b.n	8009bb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b78:	d007      	beq.n	8009b8a <UART_Receive_IT+0x74>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10a      	bne.n	8009b98 <UART_Receive_IT+0x82>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b94:	701a      	strb	r2, [r3, #0]
 8009b96:	e008      	b.n	8009baa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d15d      	bne.n	8009c84 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0220 	bic.w	r2, r2, #32
 8009bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	695a      	ldr	r2, [r3, #20]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f022 0201 	bic.w	r2, r2, #1
 8009bf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d135      	bne.n	8009c7a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	330c      	adds	r3, #12
 8009c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	e853 3f00 	ldrex	r3, [r3]
 8009c22:	613b      	str	r3, [r7, #16]
   return(result);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	f023 0310 	bic.w	r3, r3, #16
 8009c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	330c      	adds	r3, #12
 8009c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c34:	623a      	str	r2, [r7, #32]
 8009c36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c38:	69f9      	ldr	r1, [r7, #28]
 8009c3a:	6a3a      	ldr	r2, [r7, #32]
 8009c3c:	e841 2300 	strex	r3, r2, [r1]
 8009c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1e5      	bne.n	8009c14 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0310 	and.w	r3, r3, #16
 8009c52:	2b10      	cmp	r3, #16
 8009c54:	d10a      	bne.n	8009c6c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fe0e 	bl	8009894 <HAL_UARTEx_RxEventCallback>
 8009c78:	e002      	b.n	8009c80 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7ff fdf6 	bl	800986c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e002      	b.n	8009c8a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	e000      	b.n	8009c8a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009c88:	2302      	movs	r3, #2
  }
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3730      	adds	r7, #48	@ 0x30
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c98:	b0c0      	sub	sp, #256	@ 0x100
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb0:	68d9      	ldr	r1, [r3, #12]
 8009cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	ea40 0301 	orr.w	r3, r0, r1
 8009cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	431a      	orrs	r2, r3
 8009cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009cec:	f021 010c 	bic.w	r1, r1, #12
 8009cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d0e:	6999      	ldr	r1, [r3, #24]
 8009d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	ea40 0301 	orr.w	r3, r0, r1
 8009d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	4b8f      	ldr	r3, [pc, #572]	@ (8009f60 <UART_SetConfig+0x2cc>)
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d005      	beq.n	8009d34 <UART_SetConfig+0xa0>
 8009d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8009f64 <UART_SetConfig+0x2d0>)
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d104      	bne.n	8009d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d34:	f7fd fae2 	bl	80072fc <HAL_RCC_GetPCLK2Freq>
 8009d38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009d3c:	e003      	b.n	8009d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d3e:	f7fd fac9 	bl	80072d4 <HAL_RCC_GetPCLK1Freq>
 8009d42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d50:	f040 810c 	bne.w	8009f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009d66:	4622      	mov	r2, r4
 8009d68:	462b      	mov	r3, r5
 8009d6a:	1891      	adds	r1, r2, r2
 8009d6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009d6e:	415b      	adcs	r3, r3
 8009d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009d76:	4621      	mov	r1, r4
 8009d78:	eb12 0801 	adds.w	r8, r2, r1
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	eb43 0901 	adc.w	r9, r3, r1
 8009d82:	f04f 0200 	mov.w	r2, #0
 8009d86:	f04f 0300 	mov.w	r3, #0
 8009d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d96:	4690      	mov	r8, r2
 8009d98:	4699      	mov	r9, r3
 8009d9a:	4623      	mov	r3, r4
 8009d9c:	eb18 0303 	adds.w	r3, r8, r3
 8009da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009da4:	462b      	mov	r3, r5
 8009da6:	eb49 0303 	adc.w	r3, r9, r3
 8009daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009dba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	18db      	adds	r3, r3, r3
 8009dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dc8:	4613      	mov	r3, r2
 8009dca:	eb42 0303 	adc.w	r3, r2, r3
 8009dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009dd8:	f7f6 feee 	bl	8000bb8 <__aeabi_uldivmod>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4b61      	ldr	r3, [pc, #388]	@ (8009f68 <UART_SetConfig+0x2d4>)
 8009de2:	fba3 2302 	umull	r2, r3, r3, r2
 8009de6:	095b      	lsrs	r3, r3, #5
 8009de8:	011c      	lsls	r4, r3, #4
 8009dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009df4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009dfc:	4642      	mov	r2, r8
 8009dfe:	464b      	mov	r3, r9
 8009e00:	1891      	adds	r1, r2, r2
 8009e02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009e04:	415b      	adcs	r3, r3
 8009e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009e0c:	4641      	mov	r1, r8
 8009e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8009e12:	4649      	mov	r1, r9
 8009e14:	eb43 0b01 	adc.w	fp, r3, r1
 8009e18:	f04f 0200 	mov.w	r2, #0
 8009e1c:	f04f 0300 	mov.w	r3, #0
 8009e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e2c:	4692      	mov	sl, r2
 8009e2e:	469b      	mov	fp, r3
 8009e30:	4643      	mov	r3, r8
 8009e32:	eb1a 0303 	adds.w	r3, sl, r3
 8009e36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8009e40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	18db      	adds	r3, r3, r3
 8009e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e5e:	4613      	mov	r3, r2
 8009e60:	eb42 0303 	adc.w	r3, r2, r3
 8009e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009e6e:	f7f6 fea3 	bl	8000bb8 <__aeabi_uldivmod>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	4611      	mov	r1, r2
 8009e78:	4b3b      	ldr	r3, [pc, #236]	@ (8009f68 <UART_SetConfig+0x2d4>)
 8009e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8009e7e:	095b      	lsrs	r3, r3, #5
 8009e80:	2264      	movs	r2, #100	@ 0x64
 8009e82:	fb02 f303 	mul.w	r3, r2, r3
 8009e86:	1acb      	subs	r3, r1, r3
 8009e88:	00db      	lsls	r3, r3, #3
 8009e8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009e8e:	4b36      	ldr	r3, [pc, #216]	@ (8009f68 <UART_SetConfig+0x2d4>)
 8009e90:	fba3 2302 	umull	r2, r3, r3, r2
 8009e94:	095b      	lsrs	r3, r3, #5
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009e9c:	441c      	add	r4, r3
 8009e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009eb0:	4642      	mov	r2, r8
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	1891      	adds	r1, r2, r2
 8009eb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009eb8:	415b      	adcs	r3, r3
 8009eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009ec0:	4641      	mov	r1, r8
 8009ec2:	1851      	adds	r1, r2, r1
 8009ec4:	6339      	str	r1, [r7, #48]	@ 0x30
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	414b      	adcs	r3, r1
 8009eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ecc:	f04f 0200 	mov.w	r2, #0
 8009ed0:	f04f 0300 	mov.w	r3, #0
 8009ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ed8:	4659      	mov	r1, fp
 8009eda:	00cb      	lsls	r3, r1, #3
 8009edc:	4651      	mov	r1, sl
 8009ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ee2:	4651      	mov	r1, sl
 8009ee4:	00ca      	lsls	r2, r1, #3
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4603      	mov	r3, r0
 8009eec:	4642      	mov	r2, r8
 8009eee:	189b      	adds	r3, r3, r2
 8009ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ef4:	464b      	mov	r3, r9
 8009ef6:	460a      	mov	r2, r1
 8009ef8:	eb42 0303 	adc.w	r3, r2, r3
 8009efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f14:	460b      	mov	r3, r1
 8009f16:	18db      	adds	r3, r3, r3
 8009f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	eb42 0303 	adc.w	r3, r2, r3
 8009f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009f2a:	f7f6 fe45 	bl	8000bb8 <__aeabi_uldivmod>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	460b      	mov	r3, r1
 8009f32:	4b0d      	ldr	r3, [pc, #52]	@ (8009f68 <UART_SetConfig+0x2d4>)
 8009f34:	fba3 1302 	umull	r1, r3, r3, r2
 8009f38:	095b      	lsrs	r3, r3, #5
 8009f3a:	2164      	movs	r1, #100	@ 0x64
 8009f3c:	fb01 f303 	mul.w	r3, r1, r3
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	3332      	adds	r3, #50	@ 0x32
 8009f46:	4a08      	ldr	r2, [pc, #32]	@ (8009f68 <UART_SetConfig+0x2d4>)
 8009f48:	fba2 2303 	umull	r2, r3, r2, r3
 8009f4c:	095b      	lsrs	r3, r3, #5
 8009f4e:	f003 0207 	and.w	r2, r3, #7
 8009f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4422      	add	r2, r4
 8009f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f5c:	e106      	b.n	800a16c <UART_SetConfig+0x4d8>
 8009f5e:	bf00      	nop
 8009f60:	40011000 	.word	0x40011000
 8009f64:	40011400 	.word	0x40011400
 8009f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f70:	2200      	movs	r2, #0
 8009f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009f7e:	4642      	mov	r2, r8
 8009f80:	464b      	mov	r3, r9
 8009f82:	1891      	adds	r1, r2, r2
 8009f84:	6239      	str	r1, [r7, #32]
 8009f86:	415b      	adcs	r3, r3
 8009f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f8e:	4641      	mov	r1, r8
 8009f90:	1854      	adds	r4, r2, r1
 8009f92:	4649      	mov	r1, r9
 8009f94:	eb43 0501 	adc.w	r5, r3, r1
 8009f98:	f04f 0200 	mov.w	r2, #0
 8009f9c:	f04f 0300 	mov.w	r3, #0
 8009fa0:	00eb      	lsls	r3, r5, #3
 8009fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009fa6:	00e2      	lsls	r2, r4, #3
 8009fa8:	4614      	mov	r4, r2
 8009faa:	461d      	mov	r5, r3
 8009fac:	4643      	mov	r3, r8
 8009fae:	18e3      	adds	r3, r4, r3
 8009fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009fb4:	464b      	mov	r3, r9
 8009fb6:	eb45 0303 	adc.w	r3, r5, r3
 8009fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009fce:	f04f 0200 	mov.w	r2, #0
 8009fd2:	f04f 0300 	mov.w	r3, #0
 8009fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009fda:	4629      	mov	r1, r5
 8009fdc:	008b      	lsls	r3, r1, #2
 8009fde:	4621      	mov	r1, r4
 8009fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	008a      	lsls	r2, r1, #2
 8009fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009fec:	f7f6 fde4 	bl	8000bb8 <__aeabi_uldivmod>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4b60      	ldr	r3, [pc, #384]	@ (800a178 <UART_SetConfig+0x4e4>)
 8009ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8009ffa:	095b      	lsrs	r3, r3, #5
 8009ffc:	011c      	lsls	r4, r3, #4
 8009ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a002:	2200      	movs	r2, #0
 800a004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a008:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a00c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a010:	4642      	mov	r2, r8
 800a012:	464b      	mov	r3, r9
 800a014:	1891      	adds	r1, r2, r2
 800a016:	61b9      	str	r1, [r7, #24]
 800a018:	415b      	adcs	r3, r3
 800a01a:	61fb      	str	r3, [r7, #28]
 800a01c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a020:	4641      	mov	r1, r8
 800a022:	1851      	adds	r1, r2, r1
 800a024:	6139      	str	r1, [r7, #16]
 800a026:	4649      	mov	r1, r9
 800a028:	414b      	adcs	r3, r1
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	f04f 0200 	mov.w	r2, #0
 800a030:	f04f 0300 	mov.w	r3, #0
 800a034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a038:	4659      	mov	r1, fp
 800a03a:	00cb      	lsls	r3, r1, #3
 800a03c:	4651      	mov	r1, sl
 800a03e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a042:	4651      	mov	r1, sl
 800a044:	00ca      	lsls	r2, r1, #3
 800a046:	4610      	mov	r0, r2
 800a048:	4619      	mov	r1, r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	4642      	mov	r2, r8
 800a04e:	189b      	adds	r3, r3, r2
 800a050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a054:	464b      	mov	r3, r9
 800a056:	460a      	mov	r2, r1
 800a058:	eb42 0303 	adc.w	r3, r2, r3
 800a05c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a06a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a06c:	f04f 0200 	mov.w	r2, #0
 800a070:	f04f 0300 	mov.w	r3, #0
 800a074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a078:	4649      	mov	r1, r9
 800a07a:	008b      	lsls	r3, r1, #2
 800a07c:	4641      	mov	r1, r8
 800a07e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a082:	4641      	mov	r1, r8
 800a084:	008a      	lsls	r2, r1, #2
 800a086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a08a:	f7f6 fd95 	bl	8000bb8 <__aeabi_uldivmod>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	4611      	mov	r1, r2
 800a094:	4b38      	ldr	r3, [pc, #224]	@ (800a178 <UART_SetConfig+0x4e4>)
 800a096:	fba3 2301 	umull	r2, r3, r3, r1
 800a09a:	095b      	lsrs	r3, r3, #5
 800a09c:	2264      	movs	r2, #100	@ 0x64
 800a09e:	fb02 f303 	mul.w	r3, r2, r3
 800a0a2:	1acb      	subs	r3, r1, r3
 800a0a4:	011b      	lsls	r3, r3, #4
 800a0a6:	3332      	adds	r3, #50	@ 0x32
 800a0a8:	4a33      	ldr	r2, [pc, #204]	@ (800a178 <UART_SetConfig+0x4e4>)
 800a0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ae:	095b      	lsrs	r3, r3, #5
 800a0b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a0b4:	441c      	add	r4, r3
 800a0b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0be:	677a      	str	r2, [r7, #116]	@ 0x74
 800a0c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	464b      	mov	r3, r9
 800a0c8:	1891      	adds	r1, r2, r2
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	415b      	adcs	r3, r3
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0d4:	4641      	mov	r1, r8
 800a0d6:	1851      	adds	r1, r2, r1
 800a0d8:	6039      	str	r1, [r7, #0]
 800a0da:	4649      	mov	r1, r9
 800a0dc:	414b      	adcs	r3, r1
 800a0de:	607b      	str	r3, [r7, #4]
 800a0e0:	f04f 0200 	mov.w	r2, #0
 800a0e4:	f04f 0300 	mov.w	r3, #0
 800a0e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0ec:	4659      	mov	r1, fp
 800a0ee:	00cb      	lsls	r3, r1, #3
 800a0f0:	4651      	mov	r1, sl
 800a0f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0f6:	4651      	mov	r1, sl
 800a0f8:	00ca      	lsls	r2, r1, #3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4603      	mov	r3, r0
 800a100:	4642      	mov	r2, r8
 800a102:	189b      	adds	r3, r3, r2
 800a104:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a106:	464b      	mov	r3, r9
 800a108:	460a      	mov	r2, r1
 800a10a:	eb42 0303 	adc.w	r3, r2, r3
 800a10e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	663b      	str	r3, [r7, #96]	@ 0x60
 800a11a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	f04f 0300 	mov.w	r3, #0
 800a124:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a128:	4649      	mov	r1, r9
 800a12a:	008b      	lsls	r3, r1, #2
 800a12c:	4641      	mov	r1, r8
 800a12e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a132:	4641      	mov	r1, r8
 800a134:	008a      	lsls	r2, r1, #2
 800a136:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a13a:	f7f6 fd3d 	bl	8000bb8 <__aeabi_uldivmod>
 800a13e:	4602      	mov	r2, r0
 800a140:	460b      	mov	r3, r1
 800a142:	4b0d      	ldr	r3, [pc, #52]	@ (800a178 <UART_SetConfig+0x4e4>)
 800a144:	fba3 1302 	umull	r1, r3, r3, r2
 800a148:	095b      	lsrs	r3, r3, #5
 800a14a:	2164      	movs	r1, #100	@ 0x64
 800a14c:	fb01 f303 	mul.w	r3, r1, r3
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	011b      	lsls	r3, r3, #4
 800a154:	3332      	adds	r3, #50	@ 0x32
 800a156:	4a08      	ldr	r2, [pc, #32]	@ (800a178 <UART_SetConfig+0x4e4>)
 800a158:	fba2 2303 	umull	r2, r3, r2, r3
 800a15c:	095b      	lsrs	r3, r3, #5
 800a15e:	f003 020f 	and.w	r2, r3, #15
 800a162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4422      	add	r2, r4
 800a16a:	609a      	str	r2, [r3, #8]
}
 800a16c:	bf00      	nop
 800a16e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a172:	46bd      	mov	sp, r7
 800a174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a178:	51eb851f 	.word	0x51eb851f

0800a17c <__cvt>:
 800a17c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a180:	ec57 6b10 	vmov	r6, r7, d0
 800a184:	2f00      	cmp	r7, #0
 800a186:	460c      	mov	r4, r1
 800a188:	4619      	mov	r1, r3
 800a18a:	463b      	mov	r3, r7
 800a18c:	bfbb      	ittet	lt
 800a18e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a192:	461f      	movlt	r7, r3
 800a194:	2300      	movge	r3, #0
 800a196:	232d      	movlt	r3, #45	@ 0x2d
 800a198:	700b      	strb	r3, [r1, #0]
 800a19a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a19c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a1a0:	4691      	mov	r9, r2
 800a1a2:	f023 0820 	bic.w	r8, r3, #32
 800a1a6:	bfbc      	itt	lt
 800a1a8:	4632      	movlt	r2, r6
 800a1aa:	4616      	movlt	r6, r2
 800a1ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1b0:	d005      	beq.n	800a1be <__cvt+0x42>
 800a1b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a1b6:	d100      	bne.n	800a1ba <__cvt+0x3e>
 800a1b8:	3401      	adds	r4, #1
 800a1ba:	2102      	movs	r1, #2
 800a1bc:	e000      	b.n	800a1c0 <__cvt+0x44>
 800a1be:	2103      	movs	r1, #3
 800a1c0:	ab03      	add	r3, sp, #12
 800a1c2:	9301      	str	r3, [sp, #4]
 800a1c4:	ab02      	add	r3, sp, #8
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	ec47 6b10 	vmov	d0, r6, r7
 800a1cc:	4653      	mov	r3, sl
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	f000 fea6 	bl	800af20 <_dtoa_r>
 800a1d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a1d8:	4605      	mov	r5, r0
 800a1da:	d119      	bne.n	800a210 <__cvt+0x94>
 800a1dc:	f019 0f01 	tst.w	r9, #1
 800a1e0:	d00e      	beq.n	800a200 <__cvt+0x84>
 800a1e2:	eb00 0904 	add.w	r9, r0, r4
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	4639      	mov	r1, r7
 800a1ee:	f7f6 fc73 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1f2:	b108      	cbz	r0, 800a1f8 <__cvt+0x7c>
 800a1f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1f8:	2230      	movs	r2, #48	@ 0x30
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	454b      	cmp	r3, r9
 800a1fe:	d31e      	bcc.n	800a23e <__cvt+0xc2>
 800a200:	9b03      	ldr	r3, [sp, #12]
 800a202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a204:	1b5b      	subs	r3, r3, r5
 800a206:	4628      	mov	r0, r5
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	b004      	add	sp, #16
 800a20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a210:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a214:	eb00 0904 	add.w	r9, r0, r4
 800a218:	d1e5      	bne.n	800a1e6 <__cvt+0x6a>
 800a21a:	7803      	ldrb	r3, [r0, #0]
 800a21c:	2b30      	cmp	r3, #48	@ 0x30
 800a21e:	d10a      	bne.n	800a236 <__cvt+0xba>
 800a220:	2200      	movs	r2, #0
 800a222:	2300      	movs	r3, #0
 800a224:	4630      	mov	r0, r6
 800a226:	4639      	mov	r1, r7
 800a228:	f7f6 fc56 	bl	8000ad8 <__aeabi_dcmpeq>
 800a22c:	b918      	cbnz	r0, 800a236 <__cvt+0xba>
 800a22e:	f1c4 0401 	rsb	r4, r4, #1
 800a232:	f8ca 4000 	str.w	r4, [sl]
 800a236:	f8da 3000 	ldr.w	r3, [sl]
 800a23a:	4499      	add	r9, r3
 800a23c:	e7d3      	b.n	800a1e6 <__cvt+0x6a>
 800a23e:	1c59      	adds	r1, r3, #1
 800a240:	9103      	str	r1, [sp, #12]
 800a242:	701a      	strb	r2, [r3, #0]
 800a244:	e7d9      	b.n	800a1fa <__cvt+0x7e>

0800a246 <__exponent>:
 800a246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a248:	2900      	cmp	r1, #0
 800a24a:	bfba      	itte	lt
 800a24c:	4249      	neglt	r1, r1
 800a24e:	232d      	movlt	r3, #45	@ 0x2d
 800a250:	232b      	movge	r3, #43	@ 0x2b
 800a252:	2909      	cmp	r1, #9
 800a254:	7002      	strb	r2, [r0, #0]
 800a256:	7043      	strb	r3, [r0, #1]
 800a258:	dd29      	ble.n	800a2ae <__exponent+0x68>
 800a25a:	f10d 0307 	add.w	r3, sp, #7
 800a25e:	461d      	mov	r5, r3
 800a260:	270a      	movs	r7, #10
 800a262:	461a      	mov	r2, r3
 800a264:	fbb1 f6f7 	udiv	r6, r1, r7
 800a268:	fb07 1416 	mls	r4, r7, r6, r1
 800a26c:	3430      	adds	r4, #48	@ 0x30
 800a26e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a272:	460c      	mov	r4, r1
 800a274:	2c63      	cmp	r4, #99	@ 0x63
 800a276:	f103 33ff 	add.w	r3, r3, #4294967295
 800a27a:	4631      	mov	r1, r6
 800a27c:	dcf1      	bgt.n	800a262 <__exponent+0x1c>
 800a27e:	3130      	adds	r1, #48	@ 0x30
 800a280:	1e94      	subs	r4, r2, #2
 800a282:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a286:	1c41      	adds	r1, r0, #1
 800a288:	4623      	mov	r3, r4
 800a28a:	42ab      	cmp	r3, r5
 800a28c:	d30a      	bcc.n	800a2a4 <__exponent+0x5e>
 800a28e:	f10d 0309 	add.w	r3, sp, #9
 800a292:	1a9b      	subs	r3, r3, r2
 800a294:	42ac      	cmp	r4, r5
 800a296:	bf88      	it	hi
 800a298:	2300      	movhi	r3, #0
 800a29a:	3302      	adds	r3, #2
 800a29c:	4403      	add	r3, r0
 800a29e:	1a18      	subs	r0, r3, r0
 800a2a0:	b003      	add	sp, #12
 800a2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a2a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a2ac:	e7ed      	b.n	800a28a <__exponent+0x44>
 800a2ae:	2330      	movs	r3, #48	@ 0x30
 800a2b0:	3130      	adds	r1, #48	@ 0x30
 800a2b2:	7083      	strb	r3, [r0, #2]
 800a2b4:	70c1      	strb	r1, [r0, #3]
 800a2b6:	1d03      	adds	r3, r0, #4
 800a2b8:	e7f1      	b.n	800a29e <__exponent+0x58>
	...

0800a2bc <_printf_float>:
 800a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	b08d      	sub	sp, #52	@ 0x34
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	461f      	mov	r7, r3
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	f000 fd27 	bl	800ad20 <_localeconv_r>
 800a2d2:	6803      	ldr	r3, [r0, #0]
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7f5 ffd2 	bl	8000280 <strlen>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a2e4:	9005      	str	r0, [sp, #20]
 800a2e6:	3307      	adds	r3, #7
 800a2e8:	f023 0307 	bic.w	r3, r3, #7
 800a2ec:	f103 0208 	add.w	r2, r3, #8
 800a2f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2f4:	f8d4 b000 	ldr.w	fp, [r4]
 800a2f8:	f8c8 2000 	str.w	r2, [r8]
 800a2fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a300:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a304:	9307      	str	r3, [sp, #28]
 800a306:	f8cd 8018 	str.w	r8, [sp, #24]
 800a30a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a30e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a312:	4b9c      	ldr	r3, [pc, #624]	@ (800a584 <_printf_float+0x2c8>)
 800a314:	f04f 32ff 	mov.w	r2, #4294967295
 800a318:	f7f6 fc10 	bl	8000b3c <__aeabi_dcmpun>
 800a31c:	bb70      	cbnz	r0, 800a37c <_printf_float+0xc0>
 800a31e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a322:	4b98      	ldr	r3, [pc, #608]	@ (800a584 <_printf_float+0x2c8>)
 800a324:	f04f 32ff 	mov.w	r2, #4294967295
 800a328:	f7f6 fbea 	bl	8000b00 <__aeabi_dcmple>
 800a32c:	bb30      	cbnz	r0, 800a37c <_printf_float+0xc0>
 800a32e:	2200      	movs	r2, #0
 800a330:	2300      	movs	r3, #0
 800a332:	4640      	mov	r0, r8
 800a334:	4649      	mov	r1, r9
 800a336:	f7f6 fbd9 	bl	8000aec <__aeabi_dcmplt>
 800a33a:	b110      	cbz	r0, 800a342 <_printf_float+0x86>
 800a33c:	232d      	movs	r3, #45	@ 0x2d
 800a33e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a342:	4a91      	ldr	r2, [pc, #580]	@ (800a588 <_printf_float+0x2cc>)
 800a344:	4b91      	ldr	r3, [pc, #580]	@ (800a58c <_printf_float+0x2d0>)
 800a346:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a34a:	bf8c      	ite	hi
 800a34c:	4690      	movhi	r8, r2
 800a34e:	4698      	movls	r8, r3
 800a350:	2303      	movs	r3, #3
 800a352:	6123      	str	r3, [r4, #16]
 800a354:	f02b 0304 	bic.w	r3, fp, #4
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	f04f 0900 	mov.w	r9, #0
 800a35e:	9700      	str	r7, [sp, #0]
 800a360:	4633      	mov	r3, r6
 800a362:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a364:	4621      	mov	r1, r4
 800a366:	4628      	mov	r0, r5
 800a368:	f000 f9d2 	bl	800a710 <_printf_common>
 800a36c:	3001      	adds	r0, #1
 800a36e:	f040 808d 	bne.w	800a48c <_printf_float+0x1d0>
 800a372:	f04f 30ff 	mov.w	r0, #4294967295
 800a376:	b00d      	add	sp, #52	@ 0x34
 800a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37c:	4642      	mov	r2, r8
 800a37e:	464b      	mov	r3, r9
 800a380:	4640      	mov	r0, r8
 800a382:	4649      	mov	r1, r9
 800a384:	f7f6 fbda 	bl	8000b3c <__aeabi_dcmpun>
 800a388:	b140      	cbz	r0, 800a39c <_printf_float+0xe0>
 800a38a:	464b      	mov	r3, r9
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	bfbc      	itt	lt
 800a390:	232d      	movlt	r3, #45	@ 0x2d
 800a392:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a396:	4a7e      	ldr	r2, [pc, #504]	@ (800a590 <_printf_float+0x2d4>)
 800a398:	4b7e      	ldr	r3, [pc, #504]	@ (800a594 <_printf_float+0x2d8>)
 800a39a:	e7d4      	b.n	800a346 <_printf_float+0x8a>
 800a39c:	6863      	ldr	r3, [r4, #4]
 800a39e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a3a2:	9206      	str	r2, [sp, #24]
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	d13b      	bne.n	800a420 <_printf_float+0x164>
 800a3a8:	2306      	movs	r3, #6
 800a3aa:	6063      	str	r3, [r4, #4]
 800a3ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	6022      	str	r2, [r4, #0]
 800a3b4:	9303      	str	r3, [sp, #12]
 800a3b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a3b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a3bc:	ab09      	add	r3, sp, #36	@ 0x24
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	6861      	ldr	r1, [r4, #4]
 800a3c2:	ec49 8b10 	vmov	d0, r8, r9
 800a3c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f7ff fed6 	bl	800a17c <__cvt>
 800a3d0:	9b06      	ldr	r3, [sp, #24]
 800a3d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3d4:	2b47      	cmp	r3, #71	@ 0x47
 800a3d6:	4680      	mov	r8, r0
 800a3d8:	d129      	bne.n	800a42e <_printf_float+0x172>
 800a3da:	1cc8      	adds	r0, r1, #3
 800a3dc:	db02      	blt.n	800a3e4 <_printf_float+0x128>
 800a3de:	6863      	ldr	r3, [r4, #4]
 800a3e0:	4299      	cmp	r1, r3
 800a3e2:	dd41      	ble.n	800a468 <_printf_float+0x1ac>
 800a3e4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a3e8:	fa5f fa8a 	uxtb.w	sl, sl
 800a3ec:	3901      	subs	r1, #1
 800a3ee:	4652      	mov	r2, sl
 800a3f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a3f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3f6:	f7ff ff26 	bl	800a246 <__exponent>
 800a3fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3fc:	1813      	adds	r3, r2, r0
 800a3fe:	2a01      	cmp	r2, #1
 800a400:	4681      	mov	r9, r0
 800a402:	6123      	str	r3, [r4, #16]
 800a404:	dc02      	bgt.n	800a40c <_printf_float+0x150>
 800a406:	6822      	ldr	r2, [r4, #0]
 800a408:	07d2      	lsls	r2, r2, #31
 800a40a:	d501      	bpl.n	800a410 <_printf_float+0x154>
 800a40c:	3301      	adds	r3, #1
 800a40e:	6123      	str	r3, [r4, #16]
 800a410:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0a2      	beq.n	800a35e <_printf_float+0xa2>
 800a418:	232d      	movs	r3, #45	@ 0x2d
 800a41a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a41e:	e79e      	b.n	800a35e <_printf_float+0xa2>
 800a420:	9a06      	ldr	r2, [sp, #24]
 800a422:	2a47      	cmp	r2, #71	@ 0x47
 800a424:	d1c2      	bne.n	800a3ac <_printf_float+0xf0>
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1c0      	bne.n	800a3ac <_printf_float+0xf0>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e7bd      	b.n	800a3aa <_printf_float+0xee>
 800a42e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a432:	d9db      	bls.n	800a3ec <_printf_float+0x130>
 800a434:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a438:	d118      	bne.n	800a46c <_printf_float+0x1b0>
 800a43a:	2900      	cmp	r1, #0
 800a43c:	6863      	ldr	r3, [r4, #4]
 800a43e:	dd0b      	ble.n	800a458 <_printf_float+0x19c>
 800a440:	6121      	str	r1, [r4, #16]
 800a442:	b913      	cbnz	r3, 800a44a <_printf_float+0x18e>
 800a444:	6822      	ldr	r2, [r4, #0]
 800a446:	07d0      	lsls	r0, r2, #31
 800a448:	d502      	bpl.n	800a450 <_printf_float+0x194>
 800a44a:	3301      	adds	r3, #1
 800a44c:	440b      	add	r3, r1
 800a44e:	6123      	str	r3, [r4, #16]
 800a450:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a452:	f04f 0900 	mov.w	r9, #0
 800a456:	e7db      	b.n	800a410 <_printf_float+0x154>
 800a458:	b913      	cbnz	r3, 800a460 <_printf_float+0x1a4>
 800a45a:	6822      	ldr	r2, [r4, #0]
 800a45c:	07d2      	lsls	r2, r2, #31
 800a45e:	d501      	bpl.n	800a464 <_printf_float+0x1a8>
 800a460:	3302      	adds	r3, #2
 800a462:	e7f4      	b.n	800a44e <_printf_float+0x192>
 800a464:	2301      	movs	r3, #1
 800a466:	e7f2      	b.n	800a44e <_printf_float+0x192>
 800a468:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a46c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a46e:	4299      	cmp	r1, r3
 800a470:	db05      	blt.n	800a47e <_printf_float+0x1c2>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	6121      	str	r1, [r4, #16]
 800a476:	07d8      	lsls	r0, r3, #31
 800a478:	d5ea      	bpl.n	800a450 <_printf_float+0x194>
 800a47a:	1c4b      	adds	r3, r1, #1
 800a47c:	e7e7      	b.n	800a44e <_printf_float+0x192>
 800a47e:	2900      	cmp	r1, #0
 800a480:	bfd4      	ite	le
 800a482:	f1c1 0202 	rsble	r2, r1, #2
 800a486:	2201      	movgt	r2, #1
 800a488:	4413      	add	r3, r2
 800a48a:	e7e0      	b.n	800a44e <_printf_float+0x192>
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	055a      	lsls	r2, r3, #21
 800a490:	d407      	bmi.n	800a4a2 <_printf_float+0x1e6>
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	4642      	mov	r2, r8
 800a496:	4631      	mov	r1, r6
 800a498:	4628      	mov	r0, r5
 800a49a:	47b8      	blx	r7
 800a49c:	3001      	adds	r0, #1
 800a49e:	d12b      	bne.n	800a4f8 <_printf_float+0x23c>
 800a4a0:	e767      	b.n	800a372 <_printf_float+0xb6>
 800a4a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a4a6:	f240 80dd 	bls.w	800a664 <_printf_float+0x3a8>
 800a4aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f7f6 fb11 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d033      	beq.n	800a522 <_printf_float+0x266>
 800a4ba:	4a37      	ldr	r2, [pc, #220]	@ (800a598 <_printf_float+0x2dc>)
 800a4bc:	2301      	movs	r3, #1
 800a4be:	4631      	mov	r1, r6
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b8      	blx	r7
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	f43f af54 	beq.w	800a372 <_printf_float+0xb6>
 800a4ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a4ce:	4543      	cmp	r3, r8
 800a4d0:	db02      	blt.n	800a4d8 <_printf_float+0x21c>
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	07d8      	lsls	r0, r3, #31
 800a4d6:	d50f      	bpl.n	800a4f8 <_printf_float+0x23c>
 800a4d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4628      	mov	r0, r5
 800a4e0:	47b8      	blx	r7
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	f43f af45 	beq.w	800a372 <_printf_float+0xb6>
 800a4e8:	f04f 0900 	mov.w	r9, #0
 800a4ec:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4f0:	f104 0a1a 	add.w	sl, r4, #26
 800a4f4:	45c8      	cmp	r8, r9
 800a4f6:	dc09      	bgt.n	800a50c <_printf_float+0x250>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	079b      	lsls	r3, r3, #30
 800a4fc:	f100 8103 	bmi.w	800a706 <_printf_float+0x44a>
 800a500:	68e0      	ldr	r0, [r4, #12]
 800a502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a504:	4298      	cmp	r0, r3
 800a506:	bfb8      	it	lt
 800a508:	4618      	movlt	r0, r3
 800a50a:	e734      	b.n	800a376 <_printf_float+0xba>
 800a50c:	2301      	movs	r3, #1
 800a50e:	4652      	mov	r2, sl
 800a510:	4631      	mov	r1, r6
 800a512:	4628      	mov	r0, r5
 800a514:	47b8      	blx	r7
 800a516:	3001      	adds	r0, #1
 800a518:	f43f af2b 	beq.w	800a372 <_printf_float+0xb6>
 800a51c:	f109 0901 	add.w	r9, r9, #1
 800a520:	e7e8      	b.n	800a4f4 <_printf_float+0x238>
 800a522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	dc39      	bgt.n	800a59c <_printf_float+0x2e0>
 800a528:	4a1b      	ldr	r2, [pc, #108]	@ (800a598 <_printf_float+0x2dc>)
 800a52a:	2301      	movs	r3, #1
 800a52c:	4631      	mov	r1, r6
 800a52e:	4628      	mov	r0, r5
 800a530:	47b8      	blx	r7
 800a532:	3001      	adds	r0, #1
 800a534:	f43f af1d 	beq.w	800a372 <_printf_float+0xb6>
 800a538:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a53c:	ea59 0303 	orrs.w	r3, r9, r3
 800a540:	d102      	bne.n	800a548 <_printf_float+0x28c>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	07d9      	lsls	r1, r3, #31
 800a546:	d5d7      	bpl.n	800a4f8 <_printf_float+0x23c>
 800a548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	f43f af0d 	beq.w	800a372 <_printf_float+0xb6>
 800a558:	f04f 0a00 	mov.w	sl, #0
 800a55c:	f104 0b1a 	add.w	fp, r4, #26
 800a560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a562:	425b      	negs	r3, r3
 800a564:	4553      	cmp	r3, sl
 800a566:	dc01      	bgt.n	800a56c <_printf_float+0x2b0>
 800a568:	464b      	mov	r3, r9
 800a56a:	e793      	b.n	800a494 <_printf_float+0x1d8>
 800a56c:	2301      	movs	r3, #1
 800a56e:	465a      	mov	r2, fp
 800a570:	4631      	mov	r1, r6
 800a572:	4628      	mov	r0, r5
 800a574:	47b8      	blx	r7
 800a576:	3001      	adds	r0, #1
 800a578:	f43f aefb 	beq.w	800a372 <_printf_float+0xb6>
 800a57c:	f10a 0a01 	add.w	sl, sl, #1
 800a580:	e7ee      	b.n	800a560 <_printf_float+0x2a4>
 800a582:	bf00      	nop
 800a584:	7fefffff 	.word	0x7fefffff
 800a588:	0800ee60 	.word	0x0800ee60
 800a58c:	0800ee5c 	.word	0x0800ee5c
 800a590:	0800ee68 	.word	0x0800ee68
 800a594:	0800ee64 	.word	0x0800ee64
 800a598:	0800ee6c 	.word	0x0800ee6c
 800a59c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a59e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a5a2:	4553      	cmp	r3, sl
 800a5a4:	bfa8      	it	ge
 800a5a6:	4653      	movge	r3, sl
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	4699      	mov	r9, r3
 800a5ac:	dc36      	bgt.n	800a61c <_printf_float+0x360>
 800a5ae:	f04f 0b00 	mov.w	fp, #0
 800a5b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5b6:	f104 021a 	add.w	r2, r4, #26
 800a5ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5bc:	9306      	str	r3, [sp, #24]
 800a5be:	eba3 0309 	sub.w	r3, r3, r9
 800a5c2:	455b      	cmp	r3, fp
 800a5c4:	dc31      	bgt.n	800a62a <_printf_float+0x36e>
 800a5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c8:	459a      	cmp	sl, r3
 800a5ca:	dc3a      	bgt.n	800a642 <_printf_float+0x386>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	07da      	lsls	r2, r3, #31
 800a5d0:	d437      	bmi.n	800a642 <_printf_float+0x386>
 800a5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5d4:	ebaa 0903 	sub.w	r9, sl, r3
 800a5d8:	9b06      	ldr	r3, [sp, #24]
 800a5da:	ebaa 0303 	sub.w	r3, sl, r3
 800a5de:	4599      	cmp	r9, r3
 800a5e0:	bfa8      	it	ge
 800a5e2:	4699      	movge	r9, r3
 800a5e4:	f1b9 0f00 	cmp.w	r9, #0
 800a5e8:	dc33      	bgt.n	800a652 <_printf_float+0x396>
 800a5ea:	f04f 0800 	mov.w	r8, #0
 800a5ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5f2:	f104 0b1a 	add.w	fp, r4, #26
 800a5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a5fc:	eba3 0309 	sub.w	r3, r3, r9
 800a600:	4543      	cmp	r3, r8
 800a602:	f77f af79 	ble.w	800a4f8 <_printf_float+0x23c>
 800a606:	2301      	movs	r3, #1
 800a608:	465a      	mov	r2, fp
 800a60a:	4631      	mov	r1, r6
 800a60c:	4628      	mov	r0, r5
 800a60e:	47b8      	blx	r7
 800a610:	3001      	adds	r0, #1
 800a612:	f43f aeae 	beq.w	800a372 <_printf_float+0xb6>
 800a616:	f108 0801 	add.w	r8, r8, #1
 800a61a:	e7ec      	b.n	800a5f6 <_printf_float+0x33a>
 800a61c:	4642      	mov	r2, r8
 800a61e:	4631      	mov	r1, r6
 800a620:	4628      	mov	r0, r5
 800a622:	47b8      	blx	r7
 800a624:	3001      	adds	r0, #1
 800a626:	d1c2      	bne.n	800a5ae <_printf_float+0x2f2>
 800a628:	e6a3      	b.n	800a372 <_printf_float+0xb6>
 800a62a:	2301      	movs	r3, #1
 800a62c:	4631      	mov	r1, r6
 800a62e:	4628      	mov	r0, r5
 800a630:	9206      	str	r2, [sp, #24]
 800a632:	47b8      	blx	r7
 800a634:	3001      	adds	r0, #1
 800a636:	f43f ae9c 	beq.w	800a372 <_printf_float+0xb6>
 800a63a:	9a06      	ldr	r2, [sp, #24]
 800a63c:	f10b 0b01 	add.w	fp, fp, #1
 800a640:	e7bb      	b.n	800a5ba <_printf_float+0x2fe>
 800a642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a646:	4631      	mov	r1, r6
 800a648:	4628      	mov	r0, r5
 800a64a:	47b8      	blx	r7
 800a64c:	3001      	adds	r0, #1
 800a64e:	d1c0      	bne.n	800a5d2 <_printf_float+0x316>
 800a650:	e68f      	b.n	800a372 <_printf_float+0xb6>
 800a652:	9a06      	ldr	r2, [sp, #24]
 800a654:	464b      	mov	r3, r9
 800a656:	4442      	add	r2, r8
 800a658:	4631      	mov	r1, r6
 800a65a:	4628      	mov	r0, r5
 800a65c:	47b8      	blx	r7
 800a65e:	3001      	adds	r0, #1
 800a660:	d1c3      	bne.n	800a5ea <_printf_float+0x32e>
 800a662:	e686      	b.n	800a372 <_printf_float+0xb6>
 800a664:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a668:	f1ba 0f01 	cmp.w	sl, #1
 800a66c:	dc01      	bgt.n	800a672 <_printf_float+0x3b6>
 800a66e:	07db      	lsls	r3, r3, #31
 800a670:	d536      	bpl.n	800a6e0 <_printf_float+0x424>
 800a672:	2301      	movs	r3, #1
 800a674:	4642      	mov	r2, r8
 800a676:	4631      	mov	r1, r6
 800a678:	4628      	mov	r0, r5
 800a67a:	47b8      	blx	r7
 800a67c:	3001      	adds	r0, #1
 800a67e:	f43f ae78 	beq.w	800a372 <_printf_float+0xb6>
 800a682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a686:	4631      	mov	r1, r6
 800a688:	4628      	mov	r0, r5
 800a68a:	47b8      	blx	r7
 800a68c:	3001      	adds	r0, #1
 800a68e:	f43f ae70 	beq.w	800a372 <_printf_float+0xb6>
 800a692:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a696:	2200      	movs	r2, #0
 800a698:	2300      	movs	r3, #0
 800a69a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a69e:	f7f6 fa1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6a2:	b9c0      	cbnz	r0, 800a6d6 <_printf_float+0x41a>
 800a6a4:	4653      	mov	r3, sl
 800a6a6:	f108 0201 	add.w	r2, r8, #1
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	47b8      	blx	r7
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d10c      	bne.n	800a6ce <_printf_float+0x412>
 800a6b4:	e65d      	b.n	800a372 <_printf_float+0xb6>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	465a      	mov	r2, fp
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4628      	mov	r0, r5
 800a6be:	47b8      	blx	r7
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	f43f ae56 	beq.w	800a372 <_printf_float+0xb6>
 800a6c6:	f108 0801 	add.w	r8, r8, #1
 800a6ca:	45d0      	cmp	r8, sl
 800a6cc:	dbf3      	blt.n	800a6b6 <_printf_float+0x3fa>
 800a6ce:	464b      	mov	r3, r9
 800a6d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a6d4:	e6df      	b.n	800a496 <_printf_float+0x1da>
 800a6d6:	f04f 0800 	mov.w	r8, #0
 800a6da:	f104 0b1a 	add.w	fp, r4, #26
 800a6de:	e7f4      	b.n	800a6ca <_printf_float+0x40e>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	4642      	mov	r2, r8
 800a6e4:	e7e1      	b.n	800a6aa <_printf_float+0x3ee>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	464a      	mov	r2, r9
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	47b8      	blx	r7
 800a6f0:	3001      	adds	r0, #1
 800a6f2:	f43f ae3e 	beq.w	800a372 <_printf_float+0xb6>
 800a6f6:	f108 0801 	add.w	r8, r8, #1
 800a6fa:	68e3      	ldr	r3, [r4, #12]
 800a6fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6fe:	1a5b      	subs	r3, r3, r1
 800a700:	4543      	cmp	r3, r8
 800a702:	dcf0      	bgt.n	800a6e6 <_printf_float+0x42a>
 800a704:	e6fc      	b.n	800a500 <_printf_float+0x244>
 800a706:	f04f 0800 	mov.w	r8, #0
 800a70a:	f104 0919 	add.w	r9, r4, #25
 800a70e:	e7f4      	b.n	800a6fa <_printf_float+0x43e>

0800a710 <_printf_common>:
 800a710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a714:	4616      	mov	r6, r2
 800a716:	4698      	mov	r8, r3
 800a718:	688a      	ldr	r2, [r1, #8]
 800a71a:	690b      	ldr	r3, [r1, #16]
 800a71c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a720:	4293      	cmp	r3, r2
 800a722:	bfb8      	it	lt
 800a724:	4613      	movlt	r3, r2
 800a726:	6033      	str	r3, [r6, #0]
 800a728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a72c:	4607      	mov	r7, r0
 800a72e:	460c      	mov	r4, r1
 800a730:	b10a      	cbz	r2, 800a736 <_printf_common+0x26>
 800a732:	3301      	adds	r3, #1
 800a734:	6033      	str	r3, [r6, #0]
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	0699      	lsls	r1, r3, #26
 800a73a:	bf42      	ittt	mi
 800a73c:	6833      	ldrmi	r3, [r6, #0]
 800a73e:	3302      	addmi	r3, #2
 800a740:	6033      	strmi	r3, [r6, #0]
 800a742:	6825      	ldr	r5, [r4, #0]
 800a744:	f015 0506 	ands.w	r5, r5, #6
 800a748:	d106      	bne.n	800a758 <_printf_common+0x48>
 800a74a:	f104 0a19 	add.w	sl, r4, #25
 800a74e:	68e3      	ldr	r3, [r4, #12]
 800a750:	6832      	ldr	r2, [r6, #0]
 800a752:	1a9b      	subs	r3, r3, r2
 800a754:	42ab      	cmp	r3, r5
 800a756:	dc26      	bgt.n	800a7a6 <_printf_common+0x96>
 800a758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a75c:	6822      	ldr	r2, [r4, #0]
 800a75e:	3b00      	subs	r3, #0
 800a760:	bf18      	it	ne
 800a762:	2301      	movne	r3, #1
 800a764:	0692      	lsls	r2, r2, #26
 800a766:	d42b      	bmi.n	800a7c0 <_printf_common+0xb0>
 800a768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a76c:	4641      	mov	r1, r8
 800a76e:	4638      	mov	r0, r7
 800a770:	47c8      	blx	r9
 800a772:	3001      	adds	r0, #1
 800a774:	d01e      	beq.n	800a7b4 <_printf_common+0xa4>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	6922      	ldr	r2, [r4, #16]
 800a77a:	f003 0306 	and.w	r3, r3, #6
 800a77e:	2b04      	cmp	r3, #4
 800a780:	bf02      	ittt	eq
 800a782:	68e5      	ldreq	r5, [r4, #12]
 800a784:	6833      	ldreq	r3, [r6, #0]
 800a786:	1aed      	subeq	r5, r5, r3
 800a788:	68a3      	ldr	r3, [r4, #8]
 800a78a:	bf0c      	ite	eq
 800a78c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a790:	2500      	movne	r5, #0
 800a792:	4293      	cmp	r3, r2
 800a794:	bfc4      	itt	gt
 800a796:	1a9b      	subgt	r3, r3, r2
 800a798:	18ed      	addgt	r5, r5, r3
 800a79a:	2600      	movs	r6, #0
 800a79c:	341a      	adds	r4, #26
 800a79e:	42b5      	cmp	r5, r6
 800a7a0:	d11a      	bne.n	800a7d8 <_printf_common+0xc8>
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	e008      	b.n	800a7b8 <_printf_common+0xa8>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	4652      	mov	r2, sl
 800a7aa:	4641      	mov	r1, r8
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	47c8      	blx	r9
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	d103      	bne.n	800a7bc <_printf_common+0xac>
 800a7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7bc:	3501      	adds	r5, #1
 800a7be:	e7c6      	b.n	800a74e <_printf_common+0x3e>
 800a7c0:	18e1      	adds	r1, r4, r3
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	2030      	movs	r0, #48	@ 0x30
 800a7c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7ca:	4422      	add	r2, r4
 800a7cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7d4:	3302      	adds	r3, #2
 800a7d6:	e7c7      	b.n	800a768 <_printf_common+0x58>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	4622      	mov	r2, r4
 800a7dc:	4641      	mov	r1, r8
 800a7de:	4638      	mov	r0, r7
 800a7e0:	47c8      	blx	r9
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	d0e6      	beq.n	800a7b4 <_printf_common+0xa4>
 800a7e6:	3601      	adds	r6, #1
 800a7e8:	e7d9      	b.n	800a79e <_printf_common+0x8e>
	...

0800a7ec <_printf_i>:
 800a7ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f0:	7e0f      	ldrb	r7, [r1, #24]
 800a7f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7f4:	2f78      	cmp	r7, #120	@ 0x78
 800a7f6:	4691      	mov	r9, r2
 800a7f8:	4680      	mov	r8, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	469a      	mov	sl, r3
 800a7fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a802:	d807      	bhi.n	800a814 <_printf_i+0x28>
 800a804:	2f62      	cmp	r7, #98	@ 0x62
 800a806:	d80a      	bhi.n	800a81e <_printf_i+0x32>
 800a808:	2f00      	cmp	r7, #0
 800a80a:	f000 80d1 	beq.w	800a9b0 <_printf_i+0x1c4>
 800a80e:	2f58      	cmp	r7, #88	@ 0x58
 800a810:	f000 80b8 	beq.w	800a984 <_printf_i+0x198>
 800a814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a81c:	e03a      	b.n	800a894 <_printf_i+0xa8>
 800a81e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a822:	2b15      	cmp	r3, #21
 800a824:	d8f6      	bhi.n	800a814 <_printf_i+0x28>
 800a826:	a101      	add	r1, pc, #4	@ (adr r1, 800a82c <_printf_i+0x40>)
 800a828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a82c:	0800a885 	.word	0x0800a885
 800a830:	0800a899 	.word	0x0800a899
 800a834:	0800a815 	.word	0x0800a815
 800a838:	0800a815 	.word	0x0800a815
 800a83c:	0800a815 	.word	0x0800a815
 800a840:	0800a815 	.word	0x0800a815
 800a844:	0800a899 	.word	0x0800a899
 800a848:	0800a815 	.word	0x0800a815
 800a84c:	0800a815 	.word	0x0800a815
 800a850:	0800a815 	.word	0x0800a815
 800a854:	0800a815 	.word	0x0800a815
 800a858:	0800a997 	.word	0x0800a997
 800a85c:	0800a8c3 	.word	0x0800a8c3
 800a860:	0800a951 	.word	0x0800a951
 800a864:	0800a815 	.word	0x0800a815
 800a868:	0800a815 	.word	0x0800a815
 800a86c:	0800a9b9 	.word	0x0800a9b9
 800a870:	0800a815 	.word	0x0800a815
 800a874:	0800a8c3 	.word	0x0800a8c3
 800a878:	0800a815 	.word	0x0800a815
 800a87c:	0800a815 	.word	0x0800a815
 800a880:	0800a959 	.word	0x0800a959
 800a884:	6833      	ldr	r3, [r6, #0]
 800a886:	1d1a      	adds	r2, r3, #4
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6032      	str	r2, [r6, #0]
 800a88c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a894:	2301      	movs	r3, #1
 800a896:	e09c      	b.n	800a9d2 <_printf_i+0x1e6>
 800a898:	6833      	ldr	r3, [r6, #0]
 800a89a:	6820      	ldr	r0, [r4, #0]
 800a89c:	1d19      	adds	r1, r3, #4
 800a89e:	6031      	str	r1, [r6, #0]
 800a8a0:	0606      	lsls	r6, r0, #24
 800a8a2:	d501      	bpl.n	800a8a8 <_printf_i+0xbc>
 800a8a4:	681d      	ldr	r5, [r3, #0]
 800a8a6:	e003      	b.n	800a8b0 <_printf_i+0xc4>
 800a8a8:	0645      	lsls	r5, r0, #25
 800a8aa:	d5fb      	bpl.n	800a8a4 <_printf_i+0xb8>
 800a8ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8b0:	2d00      	cmp	r5, #0
 800a8b2:	da03      	bge.n	800a8bc <_printf_i+0xd0>
 800a8b4:	232d      	movs	r3, #45	@ 0x2d
 800a8b6:	426d      	negs	r5, r5
 800a8b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8bc:	4858      	ldr	r0, [pc, #352]	@ (800aa20 <_printf_i+0x234>)
 800a8be:	230a      	movs	r3, #10
 800a8c0:	e011      	b.n	800a8e6 <_printf_i+0xfa>
 800a8c2:	6821      	ldr	r1, [r4, #0]
 800a8c4:	6833      	ldr	r3, [r6, #0]
 800a8c6:	0608      	lsls	r0, r1, #24
 800a8c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8cc:	d402      	bmi.n	800a8d4 <_printf_i+0xe8>
 800a8ce:	0649      	lsls	r1, r1, #25
 800a8d0:	bf48      	it	mi
 800a8d2:	b2ad      	uxthmi	r5, r5
 800a8d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8d6:	4852      	ldr	r0, [pc, #328]	@ (800aa20 <_printf_i+0x234>)
 800a8d8:	6033      	str	r3, [r6, #0]
 800a8da:	bf14      	ite	ne
 800a8dc:	230a      	movne	r3, #10
 800a8de:	2308      	moveq	r3, #8
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8e6:	6866      	ldr	r6, [r4, #4]
 800a8e8:	60a6      	str	r6, [r4, #8]
 800a8ea:	2e00      	cmp	r6, #0
 800a8ec:	db05      	blt.n	800a8fa <_printf_i+0x10e>
 800a8ee:	6821      	ldr	r1, [r4, #0]
 800a8f0:	432e      	orrs	r6, r5
 800a8f2:	f021 0104 	bic.w	r1, r1, #4
 800a8f6:	6021      	str	r1, [r4, #0]
 800a8f8:	d04b      	beq.n	800a992 <_printf_i+0x1a6>
 800a8fa:	4616      	mov	r6, r2
 800a8fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a900:	fb03 5711 	mls	r7, r3, r1, r5
 800a904:	5dc7      	ldrb	r7, [r0, r7]
 800a906:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a90a:	462f      	mov	r7, r5
 800a90c:	42bb      	cmp	r3, r7
 800a90e:	460d      	mov	r5, r1
 800a910:	d9f4      	bls.n	800a8fc <_printf_i+0x110>
 800a912:	2b08      	cmp	r3, #8
 800a914:	d10b      	bne.n	800a92e <_printf_i+0x142>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	07df      	lsls	r7, r3, #31
 800a91a:	d508      	bpl.n	800a92e <_printf_i+0x142>
 800a91c:	6923      	ldr	r3, [r4, #16]
 800a91e:	6861      	ldr	r1, [r4, #4]
 800a920:	4299      	cmp	r1, r3
 800a922:	bfde      	ittt	le
 800a924:	2330      	movle	r3, #48	@ 0x30
 800a926:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a92a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a92e:	1b92      	subs	r2, r2, r6
 800a930:	6122      	str	r2, [r4, #16]
 800a932:	f8cd a000 	str.w	sl, [sp]
 800a936:	464b      	mov	r3, r9
 800a938:	aa03      	add	r2, sp, #12
 800a93a:	4621      	mov	r1, r4
 800a93c:	4640      	mov	r0, r8
 800a93e:	f7ff fee7 	bl	800a710 <_printf_common>
 800a942:	3001      	adds	r0, #1
 800a944:	d14a      	bne.n	800a9dc <_printf_i+0x1f0>
 800a946:	f04f 30ff 	mov.w	r0, #4294967295
 800a94a:	b004      	add	sp, #16
 800a94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	f043 0320 	orr.w	r3, r3, #32
 800a956:	6023      	str	r3, [r4, #0]
 800a958:	4832      	ldr	r0, [pc, #200]	@ (800aa24 <_printf_i+0x238>)
 800a95a:	2778      	movs	r7, #120	@ 0x78
 800a95c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	6831      	ldr	r1, [r6, #0]
 800a964:	061f      	lsls	r7, r3, #24
 800a966:	f851 5b04 	ldr.w	r5, [r1], #4
 800a96a:	d402      	bmi.n	800a972 <_printf_i+0x186>
 800a96c:	065f      	lsls	r7, r3, #25
 800a96e:	bf48      	it	mi
 800a970:	b2ad      	uxthmi	r5, r5
 800a972:	6031      	str	r1, [r6, #0]
 800a974:	07d9      	lsls	r1, r3, #31
 800a976:	bf44      	itt	mi
 800a978:	f043 0320 	orrmi.w	r3, r3, #32
 800a97c:	6023      	strmi	r3, [r4, #0]
 800a97e:	b11d      	cbz	r5, 800a988 <_printf_i+0x19c>
 800a980:	2310      	movs	r3, #16
 800a982:	e7ad      	b.n	800a8e0 <_printf_i+0xf4>
 800a984:	4826      	ldr	r0, [pc, #152]	@ (800aa20 <_printf_i+0x234>)
 800a986:	e7e9      	b.n	800a95c <_printf_i+0x170>
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	f023 0320 	bic.w	r3, r3, #32
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	e7f6      	b.n	800a980 <_printf_i+0x194>
 800a992:	4616      	mov	r6, r2
 800a994:	e7bd      	b.n	800a912 <_printf_i+0x126>
 800a996:	6833      	ldr	r3, [r6, #0]
 800a998:	6825      	ldr	r5, [r4, #0]
 800a99a:	6961      	ldr	r1, [r4, #20]
 800a99c:	1d18      	adds	r0, r3, #4
 800a99e:	6030      	str	r0, [r6, #0]
 800a9a0:	062e      	lsls	r6, r5, #24
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	d501      	bpl.n	800a9aa <_printf_i+0x1be>
 800a9a6:	6019      	str	r1, [r3, #0]
 800a9a8:	e002      	b.n	800a9b0 <_printf_i+0x1c4>
 800a9aa:	0668      	lsls	r0, r5, #25
 800a9ac:	d5fb      	bpl.n	800a9a6 <_printf_i+0x1ba>
 800a9ae:	8019      	strh	r1, [r3, #0]
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	6123      	str	r3, [r4, #16]
 800a9b4:	4616      	mov	r6, r2
 800a9b6:	e7bc      	b.n	800a932 <_printf_i+0x146>
 800a9b8:	6833      	ldr	r3, [r6, #0]
 800a9ba:	1d1a      	adds	r2, r3, #4
 800a9bc:	6032      	str	r2, [r6, #0]
 800a9be:	681e      	ldr	r6, [r3, #0]
 800a9c0:	6862      	ldr	r2, [r4, #4]
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7f5 fc0b 	bl	80001e0 <memchr>
 800a9ca:	b108      	cbz	r0, 800a9d0 <_printf_i+0x1e4>
 800a9cc:	1b80      	subs	r0, r0, r6
 800a9ce:	6060      	str	r0, [r4, #4]
 800a9d0:	6863      	ldr	r3, [r4, #4]
 800a9d2:	6123      	str	r3, [r4, #16]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9da:	e7aa      	b.n	800a932 <_printf_i+0x146>
 800a9dc:	6923      	ldr	r3, [r4, #16]
 800a9de:	4632      	mov	r2, r6
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	47d0      	blx	sl
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d0ad      	beq.n	800a946 <_printf_i+0x15a>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	079b      	lsls	r3, r3, #30
 800a9ee:	d413      	bmi.n	800aa18 <_printf_i+0x22c>
 800a9f0:	68e0      	ldr	r0, [r4, #12]
 800a9f2:	9b03      	ldr	r3, [sp, #12]
 800a9f4:	4298      	cmp	r0, r3
 800a9f6:	bfb8      	it	lt
 800a9f8:	4618      	movlt	r0, r3
 800a9fa:	e7a6      	b.n	800a94a <_printf_i+0x15e>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	4632      	mov	r2, r6
 800aa00:	4649      	mov	r1, r9
 800aa02:	4640      	mov	r0, r8
 800aa04:	47d0      	blx	sl
 800aa06:	3001      	adds	r0, #1
 800aa08:	d09d      	beq.n	800a946 <_printf_i+0x15a>
 800aa0a:	3501      	adds	r5, #1
 800aa0c:	68e3      	ldr	r3, [r4, #12]
 800aa0e:	9903      	ldr	r1, [sp, #12]
 800aa10:	1a5b      	subs	r3, r3, r1
 800aa12:	42ab      	cmp	r3, r5
 800aa14:	dcf2      	bgt.n	800a9fc <_printf_i+0x210>
 800aa16:	e7eb      	b.n	800a9f0 <_printf_i+0x204>
 800aa18:	2500      	movs	r5, #0
 800aa1a:	f104 0619 	add.w	r6, r4, #25
 800aa1e:	e7f5      	b.n	800aa0c <_printf_i+0x220>
 800aa20:	0800ee6e 	.word	0x0800ee6e
 800aa24:	0800ee7f 	.word	0x0800ee7f

0800aa28 <std>:
 800aa28:	2300      	movs	r3, #0
 800aa2a:	b510      	push	{r4, lr}
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa36:	6083      	str	r3, [r0, #8]
 800aa38:	8181      	strh	r1, [r0, #12]
 800aa3a:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa3c:	81c2      	strh	r2, [r0, #14]
 800aa3e:	6183      	str	r3, [r0, #24]
 800aa40:	4619      	mov	r1, r3
 800aa42:	2208      	movs	r2, #8
 800aa44:	305c      	adds	r0, #92	@ 0x5c
 800aa46:	f000 f953 	bl	800acf0 <memset>
 800aa4a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa80 <std+0x58>)
 800aa4c:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa4e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa84 <std+0x5c>)
 800aa50:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa52:	4b0d      	ldr	r3, [pc, #52]	@ (800aa88 <std+0x60>)
 800aa54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa56:	4b0d      	ldr	r3, [pc, #52]	@ (800aa8c <std+0x64>)
 800aa58:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa5a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa90 <std+0x68>)
 800aa5c:	6224      	str	r4, [r4, #32]
 800aa5e:	429c      	cmp	r4, r3
 800aa60:	d006      	beq.n	800aa70 <std+0x48>
 800aa62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa66:	4294      	cmp	r4, r2
 800aa68:	d002      	beq.n	800aa70 <std+0x48>
 800aa6a:	33d0      	adds	r3, #208	@ 0xd0
 800aa6c:	429c      	cmp	r4, r3
 800aa6e:	d105      	bne.n	800aa7c <std+0x54>
 800aa70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa78:	f000 b9c6 	b.w	800ae08 <__retarget_lock_init_recursive>
 800aa7c:	bd10      	pop	{r4, pc}
 800aa7e:	bf00      	nop
 800aa80:	0800abf1 	.word	0x0800abf1
 800aa84:	0800ac13 	.word	0x0800ac13
 800aa88:	0800ac4b 	.word	0x0800ac4b
 800aa8c:	0800ac6f 	.word	0x0800ac6f
 800aa90:	20001da8 	.word	0x20001da8

0800aa94 <stdio_exit_handler>:
 800aa94:	4a02      	ldr	r2, [pc, #8]	@ (800aaa0 <stdio_exit_handler+0xc>)
 800aa96:	4903      	ldr	r1, [pc, #12]	@ (800aaa4 <stdio_exit_handler+0x10>)
 800aa98:	4803      	ldr	r0, [pc, #12]	@ (800aaa8 <stdio_exit_handler+0x14>)
 800aa9a:	f000 b869 	b.w	800ab70 <_fwalk_sglue>
 800aa9e:	bf00      	nop
 800aaa0:	20000060 	.word	0x20000060
 800aaa4:	0800c76d 	.word	0x0800c76d
 800aaa8:	20000070 	.word	0x20000070

0800aaac <cleanup_stdio>:
 800aaac:	6841      	ldr	r1, [r0, #4]
 800aaae:	4b0c      	ldr	r3, [pc, #48]	@ (800aae0 <cleanup_stdio+0x34>)
 800aab0:	4299      	cmp	r1, r3
 800aab2:	b510      	push	{r4, lr}
 800aab4:	4604      	mov	r4, r0
 800aab6:	d001      	beq.n	800aabc <cleanup_stdio+0x10>
 800aab8:	f001 fe58 	bl	800c76c <_fflush_r>
 800aabc:	68a1      	ldr	r1, [r4, #8]
 800aabe:	4b09      	ldr	r3, [pc, #36]	@ (800aae4 <cleanup_stdio+0x38>)
 800aac0:	4299      	cmp	r1, r3
 800aac2:	d002      	beq.n	800aaca <cleanup_stdio+0x1e>
 800aac4:	4620      	mov	r0, r4
 800aac6:	f001 fe51 	bl	800c76c <_fflush_r>
 800aaca:	68e1      	ldr	r1, [r4, #12]
 800aacc:	4b06      	ldr	r3, [pc, #24]	@ (800aae8 <cleanup_stdio+0x3c>)
 800aace:	4299      	cmp	r1, r3
 800aad0:	d004      	beq.n	800aadc <cleanup_stdio+0x30>
 800aad2:	4620      	mov	r0, r4
 800aad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad8:	f001 be48 	b.w	800c76c <_fflush_r>
 800aadc:	bd10      	pop	{r4, pc}
 800aade:	bf00      	nop
 800aae0:	20001da8 	.word	0x20001da8
 800aae4:	20001e10 	.word	0x20001e10
 800aae8:	20001e78 	.word	0x20001e78

0800aaec <global_stdio_init.part.0>:
 800aaec:	b510      	push	{r4, lr}
 800aaee:	4b0b      	ldr	r3, [pc, #44]	@ (800ab1c <global_stdio_init.part.0+0x30>)
 800aaf0:	4c0b      	ldr	r4, [pc, #44]	@ (800ab20 <global_stdio_init.part.0+0x34>)
 800aaf2:	4a0c      	ldr	r2, [pc, #48]	@ (800ab24 <global_stdio_init.part.0+0x38>)
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	2200      	movs	r2, #0
 800aafa:	2104      	movs	r1, #4
 800aafc:	f7ff ff94 	bl	800aa28 <std>
 800ab00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab04:	2201      	movs	r2, #1
 800ab06:	2109      	movs	r1, #9
 800ab08:	f7ff ff8e 	bl	800aa28 <std>
 800ab0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab10:	2202      	movs	r2, #2
 800ab12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab16:	2112      	movs	r1, #18
 800ab18:	f7ff bf86 	b.w	800aa28 <std>
 800ab1c:	20001ee0 	.word	0x20001ee0
 800ab20:	20001da8 	.word	0x20001da8
 800ab24:	0800aa95 	.word	0x0800aa95

0800ab28 <__sfp_lock_acquire>:
 800ab28:	4801      	ldr	r0, [pc, #4]	@ (800ab30 <__sfp_lock_acquire+0x8>)
 800ab2a:	f000 b96e 	b.w	800ae0a <__retarget_lock_acquire_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20001ee9 	.word	0x20001ee9

0800ab34 <__sfp_lock_release>:
 800ab34:	4801      	ldr	r0, [pc, #4]	@ (800ab3c <__sfp_lock_release+0x8>)
 800ab36:	f000 b969 	b.w	800ae0c <__retarget_lock_release_recursive>
 800ab3a:	bf00      	nop
 800ab3c:	20001ee9 	.word	0x20001ee9

0800ab40 <__sinit>:
 800ab40:	b510      	push	{r4, lr}
 800ab42:	4604      	mov	r4, r0
 800ab44:	f7ff fff0 	bl	800ab28 <__sfp_lock_acquire>
 800ab48:	6a23      	ldr	r3, [r4, #32]
 800ab4a:	b11b      	cbz	r3, 800ab54 <__sinit+0x14>
 800ab4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab50:	f7ff bff0 	b.w	800ab34 <__sfp_lock_release>
 800ab54:	4b04      	ldr	r3, [pc, #16]	@ (800ab68 <__sinit+0x28>)
 800ab56:	6223      	str	r3, [r4, #32]
 800ab58:	4b04      	ldr	r3, [pc, #16]	@ (800ab6c <__sinit+0x2c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1f5      	bne.n	800ab4c <__sinit+0xc>
 800ab60:	f7ff ffc4 	bl	800aaec <global_stdio_init.part.0>
 800ab64:	e7f2      	b.n	800ab4c <__sinit+0xc>
 800ab66:	bf00      	nop
 800ab68:	0800aaad 	.word	0x0800aaad
 800ab6c:	20001ee0 	.word	0x20001ee0

0800ab70 <_fwalk_sglue>:
 800ab70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab74:	4607      	mov	r7, r0
 800ab76:	4688      	mov	r8, r1
 800ab78:	4614      	mov	r4, r2
 800ab7a:	2600      	movs	r6, #0
 800ab7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab80:	f1b9 0901 	subs.w	r9, r9, #1
 800ab84:	d505      	bpl.n	800ab92 <_fwalk_sglue+0x22>
 800ab86:	6824      	ldr	r4, [r4, #0]
 800ab88:	2c00      	cmp	r4, #0
 800ab8a:	d1f7      	bne.n	800ab7c <_fwalk_sglue+0xc>
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab92:	89ab      	ldrh	r3, [r5, #12]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d907      	bls.n	800aba8 <_fwalk_sglue+0x38>
 800ab98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	d003      	beq.n	800aba8 <_fwalk_sglue+0x38>
 800aba0:	4629      	mov	r1, r5
 800aba2:	4638      	mov	r0, r7
 800aba4:	47c0      	blx	r8
 800aba6:	4306      	orrs	r6, r0
 800aba8:	3568      	adds	r5, #104	@ 0x68
 800abaa:	e7e9      	b.n	800ab80 <_fwalk_sglue+0x10>

0800abac <siprintf>:
 800abac:	b40e      	push	{r1, r2, r3}
 800abae:	b510      	push	{r4, lr}
 800abb0:	b09d      	sub	sp, #116	@ 0x74
 800abb2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800abb4:	9002      	str	r0, [sp, #8]
 800abb6:	9006      	str	r0, [sp, #24]
 800abb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800abbc:	480a      	ldr	r0, [pc, #40]	@ (800abe8 <siprintf+0x3c>)
 800abbe:	9107      	str	r1, [sp, #28]
 800abc0:	9104      	str	r1, [sp, #16]
 800abc2:	490a      	ldr	r1, [pc, #40]	@ (800abec <siprintf+0x40>)
 800abc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc8:	9105      	str	r1, [sp, #20]
 800abca:	2400      	movs	r4, #0
 800abcc:	a902      	add	r1, sp, #8
 800abce:	6800      	ldr	r0, [r0, #0]
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800abd4:	f001 fc4a 	bl	800c46c <_svfiprintf_r>
 800abd8:	9b02      	ldr	r3, [sp, #8]
 800abda:	701c      	strb	r4, [r3, #0]
 800abdc:	b01d      	add	sp, #116	@ 0x74
 800abde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abe2:	b003      	add	sp, #12
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	2000006c 	.word	0x2000006c
 800abec:	ffff0208 	.word	0xffff0208

0800abf0 <__sread>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	460c      	mov	r4, r1
 800abf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf8:	f000 f8b8 	bl	800ad6c <_read_r>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	bfab      	itete	ge
 800ac00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac02:	89a3      	ldrhlt	r3, [r4, #12]
 800ac04:	181b      	addge	r3, r3, r0
 800ac06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac0a:	bfac      	ite	ge
 800ac0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac0e:	81a3      	strhlt	r3, [r4, #12]
 800ac10:	bd10      	pop	{r4, pc}

0800ac12 <__swrite>:
 800ac12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac16:	461f      	mov	r7, r3
 800ac18:	898b      	ldrh	r3, [r1, #12]
 800ac1a:	05db      	lsls	r3, r3, #23
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	460c      	mov	r4, r1
 800ac20:	4616      	mov	r6, r2
 800ac22:	d505      	bpl.n	800ac30 <__swrite+0x1e>
 800ac24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac28:	2302      	movs	r3, #2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f000 f88c 	bl	800ad48 <_lseek_r>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac3a:	81a3      	strh	r3, [r4, #12]
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	463b      	mov	r3, r7
 800ac40:	4628      	mov	r0, r5
 800ac42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac46:	f000 b8a3 	b.w	800ad90 <_write_r>

0800ac4a <__sseek>:
 800ac4a:	b510      	push	{r4, lr}
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac52:	f000 f879 	bl	800ad48 <_lseek_r>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	bf15      	itete	ne
 800ac5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac66:	81a3      	strheq	r3, [r4, #12]
 800ac68:	bf18      	it	ne
 800ac6a:	81a3      	strhne	r3, [r4, #12]
 800ac6c:	bd10      	pop	{r4, pc}

0800ac6e <__sclose>:
 800ac6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac72:	f000 b859 	b.w	800ad28 <_close_r>

0800ac76 <_vsniprintf_r>:
 800ac76:	b530      	push	{r4, r5, lr}
 800ac78:	4614      	mov	r4, r2
 800ac7a:	2c00      	cmp	r4, #0
 800ac7c:	b09b      	sub	sp, #108	@ 0x6c
 800ac7e:	4605      	mov	r5, r0
 800ac80:	461a      	mov	r2, r3
 800ac82:	da05      	bge.n	800ac90 <_vsniprintf_r+0x1a>
 800ac84:	238b      	movs	r3, #139	@ 0x8b
 800ac86:	6003      	str	r3, [r0, #0]
 800ac88:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8c:	b01b      	add	sp, #108	@ 0x6c
 800ac8e:	bd30      	pop	{r4, r5, pc}
 800ac90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ac94:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ac98:	f04f 0300 	mov.w	r3, #0
 800ac9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac9e:	bf14      	ite	ne
 800aca0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aca4:	4623      	moveq	r3, r4
 800aca6:	9302      	str	r3, [sp, #8]
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acae:	9100      	str	r1, [sp, #0]
 800acb0:	9104      	str	r1, [sp, #16]
 800acb2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800acb6:	4669      	mov	r1, sp
 800acb8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800acba:	f001 fbd7 	bl	800c46c <_svfiprintf_r>
 800acbe:	1c43      	adds	r3, r0, #1
 800acc0:	bfbc      	itt	lt
 800acc2:	238b      	movlt	r3, #139	@ 0x8b
 800acc4:	602b      	strlt	r3, [r5, #0]
 800acc6:	2c00      	cmp	r4, #0
 800acc8:	d0e0      	beq.n	800ac8c <_vsniprintf_r+0x16>
 800acca:	9b00      	ldr	r3, [sp, #0]
 800accc:	2200      	movs	r2, #0
 800acce:	701a      	strb	r2, [r3, #0]
 800acd0:	e7dc      	b.n	800ac8c <_vsniprintf_r+0x16>
	...

0800acd4 <vsniprintf>:
 800acd4:	b507      	push	{r0, r1, r2, lr}
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	4613      	mov	r3, r2
 800acda:	460a      	mov	r2, r1
 800acdc:	4601      	mov	r1, r0
 800acde:	4803      	ldr	r0, [pc, #12]	@ (800acec <vsniprintf+0x18>)
 800ace0:	6800      	ldr	r0, [r0, #0]
 800ace2:	f7ff ffc8 	bl	800ac76 <_vsniprintf_r>
 800ace6:	b003      	add	sp, #12
 800ace8:	f85d fb04 	ldr.w	pc, [sp], #4
 800acec:	2000006c 	.word	0x2000006c

0800acf0 <memset>:
 800acf0:	4402      	add	r2, r0
 800acf2:	4603      	mov	r3, r0
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d100      	bne.n	800acfa <memset+0xa>
 800acf8:	4770      	bx	lr
 800acfa:	f803 1b01 	strb.w	r1, [r3], #1
 800acfe:	e7f9      	b.n	800acf4 <memset+0x4>

0800ad00 <strcat>:
 800ad00:	b510      	push	{r4, lr}
 800ad02:	4602      	mov	r2, r0
 800ad04:	7814      	ldrb	r4, [r2, #0]
 800ad06:	4613      	mov	r3, r2
 800ad08:	3201      	adds	r2, #1
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	d1fa      	bne.n	800ad04 <strcat+0x4>
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad14:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	d1f9      	bne.n	800ad10 <strcat+0x10>
 800ad1c:	bd10      	pop	{r4, pc}
	...

0800ad20 <_localeconv_r>:
 800ad20:	4800      	ldr	r0, [pc, #0]	@ (800ad24 <_localeconv_r+0x4>)
 800ad22:	4770      	bx	lr
 800ad24:	200001ac 	.word	0x200001ac

0800ad28 <_close_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d06      	ldr	r5, [pc, #24]	@ (800ad44 <_close_r+0x1c>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4604      	mov	r4, r0
 800ad30:	4608      	mov	r0, r1
 800ad32:	602b      	str	r3, [r5, #0]
 800ad34:	f7fa f8a6 	bl	8004e84 <_close>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_close_r+0x1a>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_close_r+0x1a>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	20001ee4 	.word	0x20001ee4

0800ad48 <_lseek_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4d07      	ldr	r5, [pc, #28]	@ (800ad68 <_lseek_r+0x20>)
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	4608      	mov	r0, r1
 800ad50:	4611      	mov	r1, r2
 800ad52:	2200      	movs	r2, #0
 800ad54:	602a      	str	r2, [r5, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f7fa f8bb 	bl	8004ed2 <_lseek>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_lseek_r+0x1e>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_lseek_r+0x1e>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	20001ee4 	.word	0x20001ee4

0800ad6c <_read_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	@ (800ad8c <_read_r+0x20>)
 800ad70:	4604      	mov	r4, r0
 800ad72:	4608      	mov	r0, r1
 800ad74:	4611      	mov	r1, r2
 800ad76:	2200      	movs	r2, #0
 800ad78:	602a      	str	r2, [r5, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f7fa f849 	bl	8004e12 <_read>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d102      	bne.n	800ad8a <_read_r+0x1e>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	b103      	cbz	r3, 800ad8a <_read_r+0x1e>
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	20001ee4 	.word	0x20001ee4

0800ad90 <_write_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d07      	ldr	r5, [pc, #28]	@ (800adb0 <_write_r+0x20>)
 800ad94:	4604      	mov	r4, r0
 800ad96:	4608      	mov	r0, r1
 800ad98:	4611      	mov	r1, r2
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	602a      	str	r2, [r5, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f7fa f854 	bl	8004e4c <_write>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_write_r+0x1e>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	b103      	cbz	r3, 800adae <_write_r+0x1e>
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	20001ee4 	.word	0x20001ee4

0800adb4 <__errno>:
 800adb4:	4b01      	ldr	r3, [pc, #4]	@ (800adbc <__errno+0x8>)
 800adb6:	6818      	ldr	r0, [r3, #0]
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	2000006c 	.word	0x2000006c

0800adc0 <__libc_init_array>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	4d0d      	ldr	r5, [pc, #52]	@ (800adf8 <__libc_init_array+0x38>)
 800adc4:	4c0d      	ldr	r4, [pc, #52]	@ (800adfc <__libc_init_array+0x3c>)
 800adc6:	1b64      	subs	r4, r4, r5
 800adc8:	10a4      	asrs	r4, r4, #2
 800adca:	2600      	movs	r6, #0
 800adcc:	42a6      	cmp	r6, r4
 800adce:	d109      	bne.n	800ade4 <__libc_init_array+0x24>
 800add0:	4d0b      	ldr	r5, [pc, #44]	@ (800ae00 <__libc_init_array+0x40>)
 800add2:	4c0c      	ldr	r4, [pc, #48]	@ (800ae04 <__libc_init_array+0x44>)
 800add4:	f002 f914 	bl	800d000 <_init>
 800add8:	1b64      	subs	r4, r4, r5
 800adda:	10a4      	asrs	r4, r4, #2
 800addc:	2600      	movs	r6, #0
 800adde:	42a6      	cmp	r6, r4
 800ade0:	d105      	bne.n	800adee <__libc_init_array+0x2e>
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade8:	4798      	blx	r3
 800adea:	3601      	adds	r6, #1
 800adec:	e7ee      	b.n	800adcc <__libc_init_array+0xc>
 800adee:	f855 3b04 	ldr.w	r3, [r5], #4
 800adf2:	4798      	blx	r3
 800adf4:	3601      	adds	r6, #1
 800adf6:	e7f2      	b.n	800adde <__libc_init_array+0x1e>
 800adf8:	0800f1dc 	.word	0x0800f1dc
 800adfc:	0800f1dc 	.word	0x0800f1dc
 800ae00:	0800f1dc 	.word	0x0800f1dc
 800ae04:	0800f1e0 	.word	0x0800f1e0

0800ae08 <__retarget_lock_init_recursive>:
 800ae08:	4770      	bx	lr

0800ae0a <__retarget_lock_acquire_recursive>:
 800ae0a:	4770      	bx	lr

0800ae0c <__retarget_lock_release_recursive>:
 800ae0c:	4770      	bx	lr

0800ae0e <quorem>:
 800ae0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae12:	6903      	ldr	r3, [r0, #16]
 800ae14:	690c      	ldr	r4, [r1, #16]
 800ae16:	42a3      	cmp	r3, r4
 800ae18:	4607      	mov	r7, r0
 800ae1a:	db7e      	blt.n	800af1a <quorem+0x10c>
 800ae1c:	3c01      	subs	r4, #1
 800ae1e:	f101 0814 	add.w	r8, r1, #20
 800ae22:	00a3      	lsls	r3, r4, #2
 800ae24:	f100 0514 	add.w	r5, r0, #20
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae40:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae44:	d32e      	bcc.n	800aea4 <quorem+0x96>
 800ae46:	f04f 0a00 	mov.w	sl, #0
 800ae4a:	46c4      	mov	ip, r8
 800ae4c:	46ae      	mov	lr, r5
 800ae4e:	46d3      	mov	fp, sl
 800ae50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae54:	b298      	uxth	r0, r3
 800ae56:	fb06 a000 	mla	r0, r6, r0, sl
 800ae5a:	0c02      	lsrs	r2, r0, #16
 800ae5c:	0c1b      	lsrs	r3, r3, #16
 800ae5e:	fb06 2303 	mla	r3, r6, r3, r2
 800ae62:	f8de 2000 	ldr.w	r2, [lr]
 800ae66:	b280      	uxth	r0, r0
 800ae68:	b292      	uxth	r2, r2
 800ae6a:	1a12      	subs	r2, r2, r0
 800ae6c:	445a      	add	r2, fp
 800ae6e:	f8de 0000 	ldr.w	r0, [lr]
 800ae72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ae7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ae80:	b292      	uxth	r2, r2
 800ae82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ae86:	45e1      	cmp	r9, ip
 800ae88:	f84e 2b04 	str.w	r2, [lr], #4
 800ae8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ae90:	d2de      	bcs.n	800ae50 <quorem+0x42>
 800ae92:	9b00      	ldr	r3, [sp, #0]
 800ae94:	58eb      	ldr	r3, [r5, r3]
 800ae96:	b92b      	cbnz	r3, 800aea4 <quorem+0x96>
 800ae98:	9b01      	ldr	r3, [sp, #4]
 800ae9a:	3b04      	subs	r3, #4
 800ae9c:	429d      	cmp	r5, r3
 800ae9e:	461a      	mov	r2, r3
 800aea0:	d32f      	bcc.n	800af02 <quorem+0xf4>
 800aea2:	613c      	str	r4, [r7, #16]
 800aea4:	4638      	mov	r0, r7
 800aea6:	f001 f97d 	bl	800c1a4 <__mcmp>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	db25      	blt.n	800aefa <quorem+0xec>
 800aeae:	4629      	mov	r1, r5
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	f858 2b04 	ldr.w	r2, [r8], #4
 800aeb6:	f8d1 c000 	ldr.w	ip, [r1]
 800aeba:	fa1f fe82 	uxth.w	lr, r2
 800aebe:	fa1f f38c 	uxth.w	r3, ip
 800aec2:	eba3 030e 	sub.w	r3, r3, lr
 800aec6:	4403      	add	r3, r0
 800aec8:	0c12      	lsrs	r2, r2, #16
 800aeca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aece:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aed8:	45c1      	cmp	r9, r8
 800aeda:	f841 3b04 	str.w	r3, [r1], #4
 800aede:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aee2:	d2e6      	bcs.n	800aeb2 <quorem+0xa4>
 800aee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aee8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeec:	b922      	cbnz	r2, 800aef8 <quorem+0xea>
 800aeee:	3b04      	subs	r3, #4
 800aef0:	429d      	cmp	r5, r3
 800aef2:	461a      	mov	r2, r3
 800aef4:	d30b      	bcc.n	800af0e <quorem+0x100>
 800aef6:	613c      	str	r4, [r7, #16]
 800aef8:	3601      	adds	r6, #1
 800aefa:	4630      	mov	r0, r6
 800aefc:	b003      	add	sp, #12
 800aefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af02:	6812      	ldr	r2, [r2, #0]
 800af04:	3b04      	subs	r3, #4
 800af06:	2a00      	cmp	r2, #0
 800af08:	d1cb      	bne.n	800aea2 <quorem+0x94>
 800af0a:	3c01      	subs	r4, #1
 800af0c:	e7c6      	b.n	800ae9c <quorem+0x8e>
 800af0e:	6812      	ldr	r2, [r2, #0]
 800af10:	3b04      	subs	r3, #4
 800af12:	2a00      	cmp	r2, #0
 800af14:	d1ef      	bne.n	800aef6 <quorem+0xe8>
 800af16:	3c01      	subs	r4, #1
 800af18:	e7ea      	b.n	800aef0 <quorem+0xe2>
 800af1a:	2000      	movs	r0, #0
 800af1c:	e7ee      	b.n	800aefc <quorem+0xee>
	...

0800af20 <_dtoa_r>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	69c7      	ldr	r7, [r0, #28]
 800af26:	b097      	sub	sp, #92	@ 0x5c
 800af28:	ed8d 0b04 	vstr	d0, [sp, #16]
 800af2c:	ec55 4b10 	vmov	r4, r5, d0
 800af30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800af32:	9107      	str	r1, [sp, #28]
 800af34:	4681      	mov	r9, r0
 800af36:	920c      	str	r2, [sp, #48]	@ 0x30
 800af38:	9311      	str	r3, [sp, #68]	@ 0x44
 800af3a:	b97f      	cbnz	r7, 800af5c <_dtoa_r+0x3c>
 800af3c:	2010      	movs	r0, #16
 800af3e:	f000 fe09 	bl	800bb54 <malloc>
 800af42:	4602      	mov	r2, r0
 800af44:	f8c9 001c 	str.w	r0, [r9, #28]
 800af48:	b920      	cbnz	r0, 800af54 <_dtoa_r+0x34>
 800af4a:	4ba9      	ldr	r3, [pc, #676]	@ (800b1f0 <_dtoa_r+0x2d0>)
 800af4c:	21ef      	movs	r1, #239	@ 0xef
 800af4e:	48a9      	ldr	r0, [pc, #676]	@ (800b1f4 <_dtoa_r+0x2d4>)
 800af50:	f001 fc6c 	bl	800c82c <__assert_func>
 800af54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800af58:	6007      	str	r7, [r0, #0]
 800af5a:	60c7      	str	r7, [r0, #12]
 800af5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800af60:	6819      	ldr	r1, [r3, #0]
 800af62:	b159      	cbz	r1, 800af7c <_dtoa_r+0x5c>
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	604a      	str	r2, [r1, #4]
 800af68:	2301      	movs	r3, #1
 800af6a:	4093      	lsls	r3, r2
 800af6c:	608b      	str	r3, [r1, #8]
 800af6e:	4648      	mov	r0, r9
 800af70:	f000 fee6 	bl	800bd40 <_Bfree>
 800af74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800af78:	2200      	movs	r2, #0
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	1e2b      	subs	r3, r5, #0
 800af7e:	bfb9      	ittee	lt
 800af80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800af84:	9305      	strlt	r3, [sp, #20]
 800af86:	2300      	movge	r3, #0
 800af88:	6033      	strge	r3, [r6, #0]
 800af8a:	9f05      	ldr	r7, [sp, #20]
 800af8c:	4b9a      	ldr	r3, [pc, #616]	@ (800b1f8 <_dtoa_r+0x2d8>)
 800af8e:	bfbc      	itt	lt
 800af90:	2201      	movlt	r2, #1
 800af92:	6032      	strlt	r2, [r6, #0]
 800af94:	43bb      	bics	r3, r7
 800af96:	d112      	bne.n	800afbe <_dtoa_r+0x9e>
 800af98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800af9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afa4:	4323      	orrs	r3, r4
 800afa6:	f000 855a 	beq.w	800ba5e <_dtoa_r+0xb3e>
 800afaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800afac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b20c <_dtoa_r+0x2ec>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 855c 	beq.w	800ba6e <_dtoa_r+0xb4e>
 800afb6:	f10a 0303 	add.w	r3, sl, #3
 800afba:	f000 bd56 	b.w	800ba6a <_dtoa_r+0xb4a>
 800afbe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800afc2:	2200      	movs	r2, #0
 800afc4:	ec51 0b17 	vmov	r0, r1, d7
 800afc8:	2300      	movs	r3, #0
 800afca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800afce:	f7f5 fd83 	bl	8000ad8 <__aeabi_dcmpeq>
 800afd2:	4680      	mov	r8, r0
 800afd4:	b158      	cbz	r0, 800afee <_dtoa_r+0xce>
 800afd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800afd8:	2301      	movs	r3, #1
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800afde:	b113      	cbz	r3, 800afe6 <_dtoa_r+0xc6>
 800afe0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800afe2:	4b86      	ldr	r3, [pc, #536]	@ (800b1fc <_dtoa_r+0x2dc>)
 800afe4:	6013      	str	r3, [r2, #0]
 800afe6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b210 <_dtoa_r+0x2f0>
 800afea:	f000 bd40 	b.w	800ba6e <_dtoa_r+0xb4e>
 800afee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800aff2:	aa14      	add	r2, sp, #80	@ 0x50
 800aff4:	a915      	add	r1, sp, #84	@ 0x54
 800aff6:	4648      	mov	r0, r9
 800aff8:	f001 f984 	bl	800c304 <__d2b>
 800affc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b000:	9002      	str	r0, [sp, #8]
 800b002:	2e00      	cmp	r6, #0
 800b004:	d078      	beq.n	800b0f8 <_dtoa_r+0x1d8>
 800b006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b008:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b00c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b014:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b018:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b01c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b020:	4619      	mov	r1, r3
 800b022:	2200      	movs	r2, #0
 800b024:	4b76      	ldr	r3, [pc, #472]	@ (800b200 <_dtoa_r+0x2e0>)
 800b026:	f7f5 f937 	bl	8000298 <__aeabi_dsub>
 800b02a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b1d8 <_dtoa_r+0x2b8>)
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	f7f5 faea 	bl	8000608 <__aeabi_dmul>
 800b034:	a36a      	add	r3, pc, #424	@ (adr r3, 800b1e0 <_dtoa_r+0x2c0>)
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	f7f5 f92f 	bl	800029c <__adddf3>
 800b03e:	4604      	mov	r4, r0
 800b040:	4630      	mov	r0, r6
 800b042:	460d      	mov	r5, r1
 800b044:	f7f5 fa76 	bl	8000534 <__aeabi_i2d>
 800b048:	a367      	add	r3, pc, #412	@ (adr r3, 800b1e8 <_dtoa_r+0x2c8>)
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	f7f5 fadb 	bl	8000608 <__aeabi_dmul>
 800b052:	4602      	mov	r2, r0
 800b054:	460b      	mov	r3, r1
 800b056:	4620      	mov	r0, r4
 800b058:	4629      	mov	r1, r5
 800b05a:	f7f5 f91f 	bl	800029c <__adddf3>
 800b05e:	4604      	mov	r4, r0
 800b060:	460d      	mov	r5, r1
 800b062:	f7f5 fd81 	bl	8000b68 <__aeabi_d2iz>
 800b066:	2200      	movs	r2, #0
 800b068:	4607      	mov	r7, r0
 800b06a:	2300      	movs	r3, #0
 800b06c:	4620      	mov	r0, r4
 800b06e:	4629      	mov	r1, r5
 800b070:	f7f5 fd3c 	bl	8000aec <__aeabi_dcmplt>
 800b074:	b140      	cbz	r0, 800b088 <_dtoa_r+0x168>
 800b076:	4638      	mov	r0, r7
 800b078:	f7f5 fa5c 	bl	8000534 <__aeabi_i2d>
 800b07c:	4622      	mov	r2, r4
 800b07e:	462b      	mov	r3, r5
 800b080:	f7f5 fd2a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b084:	b900      	cbnz	r0, 800b088 <_dtoa_r+0x168>
 800b086:	3f01      	subs	r7, #1
 800b088:	2f16      	cmp	r7, #22
 800b08a:	d852      	bhi.n	800b132 <_dtoa_r+0x212>
 800b08c:	4b5d      	ldr	r3, [pc, #372]	@ (800b204 <_dtoa_r+0x2e4>)
 800b08e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b09a:	f7f5 fd27 	bl	8000aec <__aeabi_dcmplt>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d049      	beq.n	800b136 <_dtoa_r+0x216>
 800b0a2:	3f01      	subs	r7, #1
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0aa:	1b9b      	subs	r3, r3, r6
 800b0ac:	1e5a      	subs	r2, r3, #1
 800b0ae:	bf45      	ittet	mi
 800b0b0:	f1c3 0301 	rsbmi	r3, r3, #1
 800b0b4:	9300      	strmi	r3, [sp, #0]
 800b0b6:	2300      	movpl	r3, #0
 800b0b8:	2300      	movmi	r3, #0
 800b0ba:	9206      	str	r2, [sp, #24]
 800b0bc:	bf54      	ite	pl
 800b0be:	9300      	strpl	r3, [sp, #0]
 800b0c0:	9306      	strmi	r3, [sp, #24]
 800b0c2:	2f00      	cmp	r7, #0
 800b0c4:	db39      	blt.n	800b13a <_dtoa_r+0x21a>
 800b0c6:	9b06      	ldr	r3, [sp, #24]
 800b0c8:	970d      	str	r7, [sp, #52]	@ 0x34
 800b0ca:	443b      	add	r3, r7
 800b0cc:	9306      	str	r3, [sp, #24]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9308      	str	r3, [sp, #32]
 800b0d2:	9b07      	ldr	r3, [sp, #28]
 800b0d4:	2b09      	cmp	r3, #9
 800b0d6:	d863      	bhi.n	800b1a0 <_dtoa_r+0x280>
 800b0d8:	2b05      	cmp	r3, #5
 800b0da:	bfc4      	itt	gt
 800b0dc:	3b04      	subgt	r3, #4
 800b0de:	9307      	strgt	r3, [sp, #28]
 800b0e0:	9b07      	ldr	r3, [sp, #28]
 800b0e2:	f1a3 0302 	sub.w	r3, r3, #2
 800b0e6:	bfcc      	ite	gt
 800b0e8:	2400      	movgt	r4, #0
 800b0ea:	2401      	movle	r4, #1
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d863      	bhi.n	800b1b8 <_dtoa_r+0x298>
 800b0f0:	e8df f003 	tbb	[pc, r3]
 800b0f4:	2b375452 	.word	0x2b375452
 800b0f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b0fc:	441e      	add	r6, r3
 800b0fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b102:	2b20      	cmp	r3, #32
 800b104:	bfc1      	itttt	gt
 800b106:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b10a:	409f      	lslgt	r7, r3
 800b10c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b110:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b114:	bfd6      	itet	le
 800b116:	f1c3 0320 	rsble	r3, r3, #32
 800b11a:	ea47 0003 	orrgt.w	r0, r7, r3
 800b11e:	fa04 f003 	lslle.w	r0, r4, r3
 800b122:	f7f5 f9f7 	bl	8000514 <__aeabi_ui2d>
 800b126:	2201      	movs	r2, #1
 800b128:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b12c:	3e01      	subs	r6, #1
 800b12e:	9212      	str	r2, [sp, #72]	@ 0x48
 800b130:	e776      	b.n	800b020 <_dtoa_r+0x100>
 800b132:	2301      	movs	r3, #1
 800b134:	e7b7      	b.n	800b0a6 <_dtoa_r+0x186>
 800b136:	9010      	str	r0, [sp, #64]	@ 0x40
 800b138:	e7b6      	b.n	800b0a8 <_dtoa_r+0x188>
 800b13a:	9b00      	ldr	r3, [sp, #0]
 800b13c:	1bdb      	subs	r3, r3, r7
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	427b      	negs	r3, r7
 800b142:	9308      	str	r3, [sp, #32]
 800b144:	2300      	movs	r3, #0
 800b146:	930d      	str	r3, [sp, #52]	@ 0x34
 800b148:	e7c3      	b.n	800b0d2 <_dtoa_r+0x1b2>
 800b14a:	2301      	movs	r3, #1
 800b14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b14e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b150:	eb07 0b03 	add.w	fp, r7, r3
 800b154:	f10b 0301 	add.w	r3, fp, #1
 800b158:	2b01      	cmp	r3, #1
 800b15a:	9303      	str	r3, [sp, #12]
 800b15c:	bfb8      	it	lt
 800b15e:	2301      	movlt	r3, #1
 800b160:	e006      	b.n	800b170 <_dtoa_r+0x250>
 800b162:	2301      	movs	r3, #1
 800b164:	9309      	str	r3, [sp, #36]	@ 0x24
 800b166:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b168:	2b00      	cmp	r3, #0
 800b16a:	dd28      	ble.n	800b1be <_dtoa_r+0x29e>
 800b16c:	469b      	mov	fp, r3
 800b16e:	9303      	str	r3, [sp, #12]
 800b170:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b174:	2100      	movs	r1, #0
 800b176:	2204      	movs	r2, #4
 800b178:	f102 0514 	add.w	r5, r2, #20
 800b17c:	429d      	cmp	r5, r3
 800b17e:	d926      	bls.n	800b1ce <_dtoa_r+0x2ae>
 800b180:	6041      	str	r1, [r0, #4]
 800b182:	4648      	mov	r0, r9
 800b184:	f000 fd9c 	bl	800bcc0 <_Balloc>
 800b188:	4682      	mov	sl, r0
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d142      	bne.n	800b214 <_dtoa_r+0x2f4>
 800b18e:	4b1e      	ldr	r3, [pc, #120]	@ (800b208 <_dtoa_r+0x2e8>)
 800b190:	4602      	mov	r2, r0
 800b192:	f240 11af 	movw	r1, #431	@ 0x1af
 800b196:	e6da      	b.n	800af4e <_dtoa_r+0x2e>
 800b198:	2300      	movs	r3, #0
 800b19a:	e7e3      	b.n	800b164 <_dtoa_r+0x244>
 800b19c:	2300      	movs	r3, #0
 800b19e:	e7d5      	b.n	800b14c <_dtoa_r+0x22c>
 800b1a0:	2401      	movs	r4, #1
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	9307      	str	r3, [sp, #28]
 800b1a6:	9409      	str	r4, [sp, #36]	@ 0x24
 800b1a8:	f04f 3bff 	mov.w	fp, #4294967295
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f8cd b00c 	str.w	fp, [sp, #12]
 800b1b2:	2312      	movs	r3, #18
 800b1b4:	920c      	str	r2, [sp, #48]	@ 0x30
 800b1b6:	e7db      	b.n	800b170 <_dtoa_r+0x250>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1bc:	e7f4      	b.n	800b1a8 <_dtoa_r+0x288>
 800b1be:	f04f 0b01 	mov.w	fp, #1
 800b1c2:	f8cd b00c 	str.w	fp, [sp, #12]
 800b1c6:	465b      	mov	r3, fp
 800b1c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b1cc:	e7d0      	b.n	800b170 <_dtoa_r+0x250>
 800b1ce:	3101      	adds	r1, #1
 800b1d0:	0052      	lsls	r2, r2, #1
 800b1d2:	e7d1      	b.n	800b178 <_dtoa_r+0x258>
 800b1d4:	f3af 8000 	nop.w
 800b1d8:	636f4361 	.word	0x636f4361
 800b1dc:	3fd287a7 	.word	0x3fd287a7
 800b1e0:	8b60c8b3 	.word	0x8b60c8b3
 800b1e4:	3fc68a28 	.word	0x3fc68a28
 800b1e8:	509f79fb 	.word	0x509f79fb
 800b1ec:	3fd34413 	.word	0x3fd34413
 800b1f0:	0800ee9d 	.word	0x0800ee9d
 800b1f4:	0800eeb4 	.word	0x0800eeb4
 800b1f8:	7ff00000 	.word	0x7ff00000
 800b1fc:	0800ee6d 	.word	0x0800ee6d
 800b200:	3ff80000 	.word	0x3ff80000
 800b204:	0800f008 	.word	0x0800f008
 800b208:	0800ef0c 	.word	0x0800ef0c
 800b20c:	0800ee99 	.word	0x0800ee99
 800b210:	0800ee6c 	.word	0x0800ee6c
 800b214:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b218:	6018      	str	r0, [r3, #0]
 800b21a:	9b03      	ldr	r3, [sp, #12]
 800b21c:	2b0e      	cmp	r3, #14
 800b21e:	f200 80a1 	bhi.w	800b364 <_dtoa_r+0x444>
 800b222:	2c00      	cmp	r4, #0
 800b224:	f000 809e 	beq.w	800b364 <_dtoa_r+0x444>
 800b228:	2f00      	cmp	r7, #0
 800b22a:	dd33      	ble.n	800b294 <_dtoa_r+0x374>
 800b22c:	4b9c      	ldr	r3, [pc, #624]	@ (800b4a0 <_dtoa_r+0x580>)
 800b22e:	f007 020f 	and.w	r2, r7, #15
 800b232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b236:	ed93 7b00 	vldr	d7, [r3]
 800b23a:	05f8      	lsls	r0, r7, #23
 800b23c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b240:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b244:	d516      	bpl.n	800b274 <_dtoa_r+0x354>
 800b246:	4b97      	ldr	r3, [pc, #604]	@ (800b4a4 <_dtoa_r+0x584>)
 800b248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b24c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b250:	f7f5 fb04 	bl	800085c <__aeabi_ddiv>
 800b254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b258:	f004 040f 	and.w	r4, r4, #15
 800b25c:	2603      	movs	r6, #3
 800b25e:	4d91      	ldr	r5, [pc, #580]	@ (800b4a4 <_dtoa_r+0x584>)
 800b260:	b954      	cbnz	r4, 800b278 <_dtoa_r+0x358>
 800b262:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b266:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b26a:	f7f5 faf7 	bl	800085c <__aeabi_ddiv>
 800b26e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b272:	e028      	b.n	800b2c6 <_dtoa_r+0x3a6>
 800b274:	2602      	movs	r6, #2
 800b276:	e7f2      	b.n	800b25e <_dtoa_r+0x33e>
 800b278:	07e1      	lsls	r1, r4, #31
 800b27a:	d508      	bpl.n	800b28e <_dtoa_r+0x36e>
 800b27c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b280:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b284:	f7f5 f9c0 	bl	8000608 <__aeabi_dmul>
 800b288:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b28c:	3601      	adds	r6, #1
 800b28e:	1064      	asrs	r4, r4, #1
 800b290:	3508      	adds	r5, #8
 800b292:	e7e5      	b.n	800b260 <_dtoa_r+0x340>
 800b294:	f000 80af 	beq.w	800b3f6 <_dtoa_r+0x4d6>
 800b298:	427c      	negs	r4, r7
 800b29a:	4b81      	ldr	r3, [pc, #516]	@ (800b4a0 <_dtoa_r+0x580>)
 800b29c:	4d81      	ldr	r5, [pc, #516]	@ (800b4a4 <_dtoa_r+0x584>)
 800b29e:	f004 020f 	and.w	r2, r4, #15
 800b2a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b2ae:	f7f5 f9ab 	bl	8000608 <__aeabi_dmul>
 800b2b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2b6:	1124      	asrs	r4, r4, #4
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	2602      	movs	r6, #2
 800b2bc:	2c00      	cmp	r4, #0
 800b2be:	f040 808f 	bne.w	800b3e0 <_dtoa_r+0x4c0>
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1d3      	bne.n	800b26e <_dtoa_r+0x34e>
 800b2c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 8094 	beq.w	800b3fa <_dtoa_r+0x4da>
 800b2d2:	4b75      	ldr	r3, [pc, #468]	@ (800b4a8 <_dtoa_r+0x588>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	4629      	mov	r1, r5
 800b2da:	f7f5 fc07 	bl	8000aec <__aeabi_dcmplt>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	f000 808b 	beq.w	800b3fa <_dtoa_r+0x4da>
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 8087 	beq.w	800b3fa <_dtoa_r+0x4da>
 800b2ec:	f1bb 0f00 	cmp.w	fp, #0
 800b2f0:	dd34      	ble.n	800b35c <_dtoa_r+0x43c>
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	4b6d      	ldr	r3, [pc, #436]	@ (800b4ac <_dtoa_r+0x58c>)
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	f7f5 f985 	bl	8000608 <__aeabi_dmul>
 800b2fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b302:	f107 38ff 	add.w	r8, r7, #4294967295
 800b306:	3601      	adds	r6, #1
 800b308:	465c      	mov	r4, fp
 800b30a:	4630      	mov	r0, r6
 800b30c:	f7f5 f912 	bl	8000534 <__aeabi_i2d>
 800b310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b314:	f7f5 f978 	bl	8000608 <__aeabi_dmul>
 800b318:	4b65      	ldr	r3, [pc, #404]	@ (800b4b0 <_dtoa_r+0x590>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	f7f4 ffbe 	bl	800029c <__adddf3>
 800b320:	4605      	mov	r5, r0
 800b322:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b326:	2c00      	cmp	r4, #0
 800b328:	d16a      	bne.n	800b400 <_dtoa_r+0x4e0>
 800b32a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b32e:	4b61      	ldr	r3, [pc, #388]	@ (800b4b4 <_dtoa_r+0x594>)
 800b330:	2200      	movs	r2, #0
 800b332:	f7f4 ffb1 	bl	8000298 <__aeabi_dsub>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b33e:	462a      	mov	r2, r5
 800b340:	4633      	mov	r3, r6
 800b342:	f7f5 fbf1 	bl	8000b28 <__aeabi_dcmpgt>
 800b346:	2800      	cmp	r0, #0
 800b348:	f040 8298 	bne.w	800b87c <_dtoa_r+0x95c>
 800b34c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b350:	462a      	mov	r2, r5
 800b352:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b356:	f7f5 fbc9 	bl	8000aec <__aeabi_dcmplt>
 800b35a:	bb38      	cbnz	r0, 800b3ac <_dtoa_r+0x48c>
 800b35c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b360:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b364:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b366:	2b00      	cmp	r3, #0
 800b368:	f2c0 8157 	blt.w	800b61a <_dtoa_r+0x6fa>
 800b36c:	2f0e      	cmp	r7, #14
 800b36e:	f300 8154 	bgt.w	800b61a <_dtoa_r+0x6fa>
 800b372:	4b4b      	ldr	r3, [pc, #300]	@ (800b4a0 <_dtoa_r+0x580>)
 800b374:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b378:	ed93 7b00 	vldr	d7, [r3]
 800b37c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b37e:	2b00      	cmp	r3, #0
 800b380:	ed8d 7b00 	vstr	d7, [sp]
 800b384:	f280 80e5 	bge.w	800b552 <_dtoa_r+0x632>
 800b388:	9b03      	ldr	r3, [sp, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f300 80e1 	bgt.w	800b552 <_dtoa_r+0x632>
 800b390:	d10c      	bne.n	800b3ac <_dtoa_r+0x48c>
 800b392:	4b48      	ldr	r3, [pc, #288]	@ (800b4b4 <_dtoa_r+0x594>)
 800b394:	2200      	movs	r2, #0
 800b396:	ec51 0b17 	vmov	r0, r1, d7
 800b39a:	f7f5 f935 	bl	8000608 <__aeabi_dmul>
 800b39e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3a2:	f7f5 fbb7 	bl	8000b14 <__aeabi_dcmpge>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f000 8266 	beq.w	800b878 <_dtoa_r+0x958>
 800b3ac:	2400      	movs	r4, #0
 800b3ae:	4625      	mov	r5, r4
 800b3b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3b2:	4656      	mov	r6, sl
 800b3b4:	ea6f 0803 	mvn.w	r8, r3
 800b3b8:	2700      	movs	r7, #0
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	4648      	mov	r0, r9
 800b3be:	f000 fcbf 	bl	800bd40 <_Bfree>
 800b3c2:	2d00      	cmp	r5, #0
 800b3c4:	f000 80bd 	beq.w	800b542 <_dtoa_r+0x622>
 800b3c8:	b12f      	cbz	r7, 800b3d6 <_dtoa_r+0x4b6>
 800b3ca:	42af      	cmp	r7, r5
 800b3cc:	d003      	beq.n	800b3d6 <_dtoa_r+0x4b6>
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	4648      	mov	r0, r9
 800b3d2:	f000 fcb5 	bl	800bd40 <_Bfree>
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	4648      	mov	r0, r9
 800b3da:	f000 fcb1 	bl	800bd40 <_Bfree>
 800b3de:	e0b0      	b.n	800b542 <_dtoa_r+0x622>
 800b3e0:	07e2      	lsls	r2, r4, #31
 800b3e2:	d505      	bpl.n	800b3f0 <_dtoa_r+0x4d0>
 800b3e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3e8:	f7f5 f90e 	bl	8000608 <__aeabi_dmul>
 800b3ec:	3601      	adds	r6, #1
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	1064      	asrs	r4, r4, #1
 800b3f2:	3508      	adds	r5, #8
 800b3f4:	e762      	b.n	800b2bc <_dtoa_r+0x39c>
 800b3f6:	2602      	movs	r6, #2
 800b3f8:	e765      	b.n	800b2c6 <_dtoa_r+0x3a6>
 800b3fa:	9c03      	ldr	r4, [sp, #12]
 800b3fc:	46b8      	mov	r8, r7
 800b3fe:	e784      	b.n	800b30a <_dtoa_r+0x3ea>
 800b400:	4b27      	ldr	r3, [pc, #156]	@ (800b4a0 <_dtoa_r+0x580>)
 800b402:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b404:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b408:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b40c:	4454      	add	r4, sl
 800b40e:	2900      	cmp	r1, #0
 800b410:	d054      	beq.n	800b4bc <_dtoa_r+0x59c>
 800b412:	4929      	ldr	r1, [pc, #164]	@ (800b4b8 <_dtoa_r+0x598>)
 800b414:	2000      	movs	r0, #0
 800b416:	f7f5 fa21 	bl	800085c <__aeabi_ddiv>
 800b41a:	4633      	mov	r3, r6
 800b41c:	462a      	mov	r2, r5
 800b41e:	f7f4 ff3b 	bl	8000298 <__aeabi_dsub>
 800b422:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b426:	4656      	mov	r6, sl
 800b428:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b42c:	f7f5 fb9c 	bl	8000b68 <__aeabi_d2iz>
 800b430:	4605      	mov	r5, r0
 800b432:	f7f5 f87f 	bl	8000534 <__aeabi_i2d>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b43e:	f7f4 ff2b 	bl	8000298 <__aeabi_dsub>
 800b442:	3530      	adds	r5, #48	@ 0x30
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b44c:	f806 5b01 	strb.w	r5, [r6], #1
 800b450:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b454:	f7f5 fb4a 	bl	8000aec <__aeabi_dcmplt>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d172      	bne.n	800b542 <_dtoa_r+0x622>
 800b45c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b460:	4911      	ldr	r1, [pc, #68]	@ (800b4a8 <_dtoa_r+0x588>)
 800b462:	2000      	movs	r0, #0
 800b464:	f7f4 ff18 	bl	8000298 <__aeabi_dsub>
 800b468:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b46c:	f7f5 fb3e 	bl	8000aec <__aeabi_dcmplt>
 800b470:	2800      	cmp	r0, #0
 800b472:	f040 80b4 	bne.w	800b5de <_dtoa_r+0x6be>
 800b476:	42a6      	cmp	r6, r4
 800b478:	f43f af70 	beq.w	800b35c <_dtoa_r+0x43c>
 800b47c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b480:	4b0a      	ldr	r3, [pc, #40]	@ (800b4ac <_dtoa_r+0x58c>)
 800b482:	2200      	movs	r2, #0
 800b484:	f7f5 f8c0 	bl	8000608 <__aeabi_dmul>
 800b488:	4b08      	ldr	r3, [pc, #32]	@ (800b4ac <_dtoa_r+0x58c>)
 800b48a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b48e:	2200      	movs	r2, #0
 800b490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b494:	f7f5 f8b8 	bl	8000608 <__aeabi_dmul>
 800b498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b49c:	e7c4      	b.n	800b428 <_dtoa_r+0x508>
 800b49e:	bf00      	nop
 800b4a0:	0800f008 	.word	0x0800f008
 800b4a4:	0800efe0 	.word	0x0800efe0
 800b4a8:	3ff00000 	.word	0x3ff00000
 800b4ac:	40240000 	.word	0x40240000
 800b4b0:	401c0000 	.word	0x401c0000
 800b4b4:	40140000 	.word	0x40140000
 800b4b8:	3fe00000 	.word	0x3fe00000
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f7f5 f8a2 	bl	8000608 <__aeabi_dmul>
 800b4c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b4c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b4ca:	4656      	mov	r6, sl
 800b4cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4d0:	f7f5 fb4a 	bl	8000b68 <__aeabi_d2iz>
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	f7f5 f82d 	bl	8000534 <__aeabi_i2d>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4e2:	f7f4 fed9 	bl	8000298 <__aeabi_dsub>
 800b4e6:	3530      	adds	r5, #48	@ 0x30
 800b4e8:	f806 5b01 	strb.w	r5, [r6], #1
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	42a6      	cmp	r6, r4
 800b4f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4f6:	f04f 0200 	mov.w	r2, #0
 800b4fa:	d124      	bne.n	800b546 <_dtoa_r+0x626>
 800b4fc:	4baf      	ldr	r3, [pc, #700]	@ (800b7bc <_dtoa_r+0x89c>)
 800b4fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b502:	f7f4 fecb 	bl	800029c <__adddf3>
 800b506:	4602      	mov	r2, r0
 800b508:	460b      	mov	r3, r1
 800b50a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b50e:	f7f5 fb0b 	bl	8000b28 <__aeabi_dcmpgt>
 800b512:	2800      	cmp	r0, #0
 800b514:	d163      	bne.n	800b5de <_dtoa_r+0x6be>
 800b516:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b51a:	49a8      	ldr	r1, [pc, #672]	@ (800b7bc <_dtoa_r+0x89c>)
 800b51c:	2000      	movs	r0, #0
 800b51e:	f7f4 febb 	bl	8000298 <__aeabi_dsub>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b52a:	f7f5 fadf 	bl	8000aec <__aeabi_dcmplt>
 800b52e:	2800      	cmp	r0, #0
 800b530:	f43f af14 	beq.w	800b35c <_dtoa_r+0x43c>
 800b534:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b536:	1e73      	subs	r3, r6, #1
 800b538:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b53a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b53e:	2b30      	cmp	r3, #48	@ 0x30
 800b540:	d0f8      	beq.n	800b534 <_dtoa_r+0x614>
 800b542:	4647      	mov	r7, r8
 800b544:	e03b      	b.n	800b5be <_dtoa_r+0x69e>
 800b546:	4b9e      	ldr	r3, [pc, #632]	@ (800b7c0 <_dtoa_r+0x8a0>)
 800b548:	f7f5 f85e 	bl	8000608 <__aeabi_dmul>
 800b54c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b550:	e7bc      	b.n	800b4cc <_dtoa_r+0x5ac>
 800b552:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b556:	4656      	mov	r6, sl
 800b558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b55c:	4620      	mov	r0, r4
 800b55e:	4629      	mov	r1, r5
 800b560:	f7f5 f97c 	bl	800085c <__aeabi_ddiv>
 800b564:	f7f5 fb00 	bl	8000b68 <__aeabi_d2iz>
 800b568:	4680      	mov	r8, r0
 800b56a:	f7f4 ffe3 	bl	8000534 <__aeabi_i2d>
 800b56e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b572:	f7f5 f849 	bl	8000608 <__aeabi_dmul>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4620      	mov	r0, r4
 800b57c:	4629      	mov	r1, r5
 800b57e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b582:	f7f4 fe89 	bl	8000298 <__aeabi_dsub>
 800b586:	f806 4b01 	strb.w	r4, [r6], #1
 800b58a:	9d03      	ldr	r5, [sp, #12]
 800b58c:	eba6 040a 	sub.w	r4, r6, sl
 800b590:	42a5      	cmp	r5, r4
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	d133      	bne.n	800b600 <_dtoa_r+0x6e0>
 800b598:	f7f4 fe80 	bl	800029c <__adddf3>
 800b59c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	f7f5 fac0 	bl	8000b28 <__aeabi_dcmpgt>
 800b5a8:	b9c0      	cbnz	r0, 800b5dc <_dtoa_r+0x6bc>
 800b5aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	f7f5 fa91 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5b6:	b110      	cbz	r0, 800b5be <_dtoa_r+0x69e>
 800b5b8:	f018 0f01 	tst.w	r8, #1
 800b5bc:	d10e      	bne.n	800b5dc <_dtoa_r+0x6bc>
 800b5be:	9902      	ldr	r1, [sp, #8]
 800b5c0:	4648      	mov	r0, r9
 800b5c2:	f000 fbbd 	bl	800bd40 <_Bfree>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	7033      	strb	r3, [r6, #0]
 800b5ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b5cc:	3701      	adds	r7, #1
 800b5ce:	601f      	str	r7, [r3, #0]
 800b5d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 824b 	beq.w	800ba6e <_dtoa_r+0xb4e>
 800b5d8:	601e      	str	r6, [r3, #0]
 800b5da:	e248      	b.n	800ba6e <_dtoa_r+0xb4e>
 800b5dc:	46b8      	mov	r8, r7
 800b5de:	4633      	mov	r3, r6
 800b5e0:	461e      	mov	r6, r3
 800b5e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5e6:	2a39      	cmp	r2, #57	@ 0x39
 800b5e8:	d106      	bne.n	800b5f8 <_dtoa_r+0x6d8>
 800b5ea:	459a      	cmp	sl, r3
 800b5ec:	d1f8      	bne.n	800b5e0 <_dtoa_r+0x6c0>
 800b5ee:	2230      	movs	r2, #48	@ 0x30
 800b5f0:	f108 0801 	add.w	r8, r8, #1
 800b5f4:	f88a 2000 	strb.w	r2, [sl]
 800b5f8:	781a      	ldrb	r2, [r3, #0]
 800b5fa:	3201      	adds	r2, #1
 800b5fc:	701a      	strb	r2, [r3, #0]
 800b5fe:	e7a0      	b.n	800b542 <_dtoa_r+0x622>
 800b600:	4b6f      	ldr	r3, [pc, #444]	@ (800b7c0 <_dtoa_r+0x8a0>)
 800b602:	2200      	movs	r2, #0
 800b604:	f7f5 f800 	bl	8000608 <__aeabi_dmul>
 800b608:	2200      	movs	r2, #0
 800b60a:	2300      	movs	r3, #0
 800b60c:	4604      	mov	r4, r0
 800b60e:	460d      	mov	r5, r1
 800b610:	f7f5 fa62 	bl	8000ad8 <__aeabi_dcmpeq>
 800b614:	2800      	cmp	r0, #0
 800b616:	d09f      	beq.n	800b558 <_dtoa_r+0x638>
 800b618:	e7d1      	b.n	800b5be <_dtoa_r+0x69e>
 800b61a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b61c:	2a00      	cmp	r2, #0
 800b61e:	f000 80ea 	beq.w	800b7f6 <_dtoa_r+0x8d6>
 800b622:	9a07      	ldr	r2, [sp, #28]
 800b624:	2a01      	cmp	r2, #1
 800b626:	f300 80cd 	bgt.w	800b7c4 <_dtoa_r+0x8a4>
 800b62a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b62c:	2a00      	cmp	r2, #0
 800b62e:	f000 80c1 	beq.w	800b7b4 <_dtoa_r+0x894>
 800b632:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b636:	9c08      	ldr	r4, [sp, #32]
 800b638:	9e00      	ldr	r6, [sp, #0]
 800b63a:	9a00      	ldr	r2, [sp, #0]
 800b63c:	441a      	add	r2, r3
 800b63e:	9200      	str	r2, [sp, #0]
 800b640:	9a06      	ldr	r2, [sp, #24]
 800b642:	2101      	movs	r1, #1
 800b644:	441a      	add	r2, r3
 800b646:	4648      	mov	r0, r9
 800b648:	9206      	str	r2, [sp, #24]
 800b64a:	f000 fc2d 	bl	800bea8 <__i2b>
 800b64e:	4605      	mov	r5, r0
 800b650:	b166      	cbz	r6, 800b66c <_dtoa_r+0x74c>
 800b652:	9b06      	ldr	r3, [sp, #24]
 800b654:	2b00      	cmp	r3, #0
 800b656:	dd09      	ble.n	800b66c <_dtoa_r+0x74c>
 800b658:	42b3      	cmp	r3, r6
 800b65a:	9a00      	ldr	r2, [sp, #0]
 800b65c:	bfa8      	it	ge
 800b65e:	4633      	movge	r3, r6
 800b660:	1ad2      	subs	r2, r2, r3
 800b662:	9200      	str	r2, [sp, #0]
 800b664:	9a06      	ldr	r2, [sp, #24]
 800b666:	1af6      	subs	r6, r6, r3
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	9306      	str	r3, [sp, #24]
 800b66c:	9b08      	ldr	r3, [sp, #32]
 800b66e:	b30b      	cbz	r3, 800b6b4 <_dtoa_r+0x794>
 800b670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 80c6 	beq.w	800b804 <_dtoa_r+0x8e4>
 800b678:	2c00      	cmp	r4, #0
 800b67a:	f000 80c0 	beq.w	800b7fe <_dtoa_r+0x8de>
 800b67e:	4629      	mov	r1, r5
 800b680:	4622      	mov	r2, r4
 800b682:	4648      	mov	r0, r9
 800b684:	f000 fcc8 	bl	800c018 <__pow5mult>
 800b688:	9a02      	ldr	r2, [sp, #8]
 800b68a:	4601      	mov	r1, r0
 800b68c:	4605      	mov	r5, r0
 800b68e:	4648      	mov	r0, r9
 800b690:	f000 fc20 	bl	800bed4 <__multiply>
 800b694:	9902      	ldr	r1, [sp, #8]
 800b696:	4680      	mov	r8, r0
 800b698:	4648      	mov	r0, r9
 800b69a:	f000 fb51 	bl	800bd40 <_Bfree>
 800b69e:	9b08      	ldr	r3, [sp, #32]
 800b6a0:	1b1b      	subs	r3, r3, r4
 800b6a2:	9308      	str	r3, [sp, #32]
 800b6a4:	f000 80b1 	beq.w	800b80a <_dtoa_r+0x8ea>
 800b6a8:	9a08      	ldr	r2, [sp, #32]
 800b6aa:	4641      	mov	r1, r8
 800b6ac:	4648      	mov	r0, r9
 800b6ae:	f000 fcb3 	bl	800c018 <__pow5mult>
 800b6b2:	9002      	str	r0, [sp, #8]
 800b6b4:	2101      	movs	r1, #1
 800b6b6:	4648      	mov	r0, r9
 800b6b8:	f000 fbf6 	bl	800bea8 <__i2b>
 800b6bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6be:	4604      	mov	r4, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 81d8 	beq.w	800ba76 <_dtoa_r+0xb56>
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	4601      	mov	r1, r0
 800b6ca:	4648      	mov	r0, r9
 800b6cc:	f000 fca4 	bl	800c018 <__pow5mult>
 800b6d0:	9b07      	ldr	r3, [sp, #28]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	f300 809f 	bgt.w	800b818 <_dtoa_r+0x8f8>
 800b6da:	9b04      	ldr	r3, [sp, #16]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f040 8097 	bne.w	800b810 <_dtoa_r+0x8f0>
 800b6e2:	9b05      	ldr	r3, [sp, #20]
 800b6e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f040 8093 	bne.w	800b814 <_dtoa_r+0x8f4>
 800b6ee:	9b05      	ldr	r3, [sp, #20]
 800b6f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6f4:	0d1b      	lsrs	r3, r3, #20
 800b6f6:	051b      	lsls	r3, r3, #20
 800b6f8:	b133      	cbz	r3, 800b708 <_dtoa_r+0x7e8>
 800b6fa:	9b00      	ldr	r3, [sp, #0]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	9b06      	ldr	r3, [sp, #24]
 800b702:	3301      	adds	r3, #1
 800b704:	9306      	str	r3, [sp, #24]
 800b706:	2301      	movs	r3, #1
 800b708:	9308      	str	r3, [sp, #32]
 800b70a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f000 81b8 	beq.w	800ba82 <_dtoa_r+0xb62>
 800b712:	6923      	ldr	r3, [r4, #16]
 800b714:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b718:	6918      	ldr	r0, [r3, #16]
 800b71a:	f000 fb79 	bl	800be10 <__hi0bits>
 800b71e:	f1c0 0020 	rsb	r0, r0, #32
 800b722:	9b06      	ldr	r3, [sp, #24]
 800b724:	4418      	add	r0, r3
 800b726:	f010 001f 	ands.w	r0, r0, #31
 800b72a:	f000 8082 	beq.w	800b832 <_dtoa_r+0x912>
 800b72e:	f1c0 0320 	rsb	r3, r0, #32
 800b732:	2b04      	cmp	r3, #4
 800b734:	dd73      	ble.n	800b81e <_dtoa_r+0x8fe>
 800b736:	9b00      	ldr	r3, [sp, #0]
 800b738:	f1c0 001c 	rsb	r0, r0, #28
 800b73c:	4403      	add	r3, r0
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	9b06      	ldr	r3, [sp, #24]
 800b742:	4403      	add	r3, r0
 800b744:	4406      	add	r6, r0
 800b746:	9306      	str	r3, [sp, #24]
 800b748:	9b00      	ldr	r3, [sp, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	dd05      	ble.n	800b75a <_dtoa_r+0x83a>
 800b74e:	9902      	ldr	r1, [sp, #8]
 800b750:	461a      	mov	r2, r3
 800b752:	4648      	mov	r0, r9
 800b754:	f000 fcba 	bl	800c0cc <__lshift>
 800b758:	9002      	str	r0, [sp, #8]
 800b75a:	9b06      	ldr	r3, [sp, #24]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dd05      	ble.n	800b76c <_dtoa_r+0x84c>
 800b760:	4621      	mov	r1, r4
 800b762:	461a      	mov	r2, r3
 800b764:	4648      	mov	r0, r9
 800b766:	f000 fcb1 	bl	800c0cc <__lshift>
 800b76a:	4604      	mov	r4, r0
 800b76c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d061      	beq.n	800b836 <_dtoa_r+0x916>
 800b772:	9802      	ldr	r0, [sp, #8]
 800b774:	4621      	mov	r1, r4
 800b776:	f000 fd15 	bl	800c1a4 <__mcmp>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	da5b      	bge.n	800b836 <_dtoa_r+0x916>
 800b77e:	2300      	movs	r3, #0
 800b780:	9902      	ldr	r1, [sp, #8]
 800b782:	220a      	movs	r2, #10
 800b784:	4648      	mov	r0, r9
 800b786:	f000 fafd 	bl	800bd84 <__multadd>
 800b78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b78c:	9002      	str	r0, [sp, #8]
 800b78e:	f107 38ff 	add.w	r8, r7, #4294967295
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 8177 	beq.w	800ba86 <_dtoa_r+0xb66>
 800b798:	4629      	mov	r1, r5
 800b79a:	2300      	movs	r3, #0
 800b79c:	220a      	movs	r2, #10
 800b79e:	4648      	mov	r0, r9
 800b7a0:	f000 faf0 	bl	800bd84 <__multadd>
 800b7a4:	f1bb 0f00 	cmp.w	fp, #0
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	dc6f      	bgt.n	800b88c <_dtoa_r+0x96c>
 800b7ac:	9b07      	ldr	r3, [sp, #28]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	dc49      	bgt.n	800b846 <_dtoa_r+0x926>
 800b7b2:	e06b      	b.n	800b88c <_dtoa_r+0x96c>
 800b7b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b7ba:	e73c      	b.n	800b636 <_dtoa_r+0x716>
 800b7bc:	3fe00000 	.word	0x3fe00000
 800b7c0:	40240000 	.word	0x40240000
 800b7c4:	9b03      	ldr	r3, [sp, #12]
 800b7c6:	1e5c      	subs	r4, r3, #1
 800b7c8:	9b08      	ldr	r3, [sp, #32]
 800b7ca:	42a3      	cmp	r3, r4
 800b7cc:	db09      	blt.n	800b7e2 <_dtoa_r+0x8c2>
 800b7ce:	1b1c      	subs	r4, r3, r4
 800b7d0:	9b03      	ldr	r3, [sp, #12]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f6bf af30 	bge.w	800b638 <_dtoa_r+0x718>
 800b7d8:	9b00      	ldr	r3, [sp, #0]
 800b7da:	9a03      	ldr	r2, [sp, #12]
 800b7dc:	1a9e      	subs	r6, r3, r2
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e72b      	b.n	800b63a <_dtoa_r+0x71a>
 800b7e2:	9b08      	ldr	r3, [sp, #32]
 800b7e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b7e6:	9408      	str	r4, [sp, #32]
 800b7e8:	1ae3      	subs	r3, r4, r3
 800b7ea:	441a      	add	r2, r3
 800b7ec:	9e00      	ldr	r6, [sp, #0]
 800b7ee:	9b03      	ldr	r3, [sp, #12]
 800b7f0:	920d      	str	r2, [sp, #52]	@ 0x34
 800b7f2:	2400      	movs	r4, #0
 800b7f4:	e721      	b.n	800b63a <_dtoa_r+0x71a>
 800b7f6:	9c08      	ldr	r4, [sp, #32]
 800b7f8:	9e00      	ldr	r6, [sp, #0]
 800b7fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b7fc:	e728      	b.n	800b650 <_dtoa_r+0x730>
 800b7fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b802:	e751      	b.n	800b6a8 <_dtoa_r+0x788>
 800b804:	9a08      	ldr	r2, [sp, #32]
 800b806:	9902      	ldr	r1, [sp, #8]
 800b808:	e750      	b.n	800b6ac <_dtoa_r+0x78c>
 800b80a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b80e:	e751      	b.n	800b6b4 <_dtoa_r+0x794>
 800b810:	2300      	movs	r3, #0
 800b812:	e779      	b.n	800b708 <_dtoa_r+0x7e8>
 800b814:	9b04      	ldr	r3, [sp, #16]
 800b816:	e777      	b.n	800b708 <_dtoa_r+0x7e8>
 800b818:	2300      	movs	r3, #0
 800b81a:	9308      	str	r3, [sp, #32]
 800b81c:	e779      	b.n	800b712 <_dtoa_r+0x7f2>
 800b81e:	d093      	beq.n	800b748 <_dtoa_r+0x828>
 800b820:	9a00      	ldr	r2, [sp, #0]
 800b822:	331c      	adds	r3, #28
 800b824:	441a      	add	r2, r3
 800b826:	9200      	str	r2, [sp, #0]
 800b828:	9a06      	ldr	r2, [sp, #24]
 800b82a:	441a      	add	r2, r3
 800b82c:	441e      	add	r6, r3
 800b82e:	9206      	str	r2, [sp, #24]
 800b830:	e78a      	b.n	800b748 <_dtoa_r+0x828>
 800b832:	4603      	mov	r3, r0
 800b834:	e7f4      	b.n	800b820 <_dtoa_r+0x900>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	46b8      	mov	r8, r7
 800b83c:	dc20      	bgt.n	800b880 <_dtoa_r+0x960>
 800b83e:	469b      	mov	fp, r3
 800b840:	9b07      	ldr	r3, [sp, #28]
 800b842:	2b02      	cmp	r3, #2
 800b844:	dd1e      	ble.n	800b884 <_dtoa_r+0x964>
 800b846:	f1bb 0f00 	cmp.w	fp, #0
 800b84a:	f47f adb1 	bne.w	800b3b0 <_dtoa_r+0x490>
 800b84e:	4621      	mov	r1, r4
 800b850:	465b      	mov	r3, fp
 800b852:	2205      	movs	r2, #5
 800b854:	4648      	mov	r0, r9
 800b856:	f000 fa95 	bl	800bd84 <__multadd>
 800b85a:	4601      	mov	r1, r0
 800b85c:	4604      	mov	r4, r0
 800b85e:	9802      	ldr	r0, [sp, #8]
 800b860:	f000 fca0 	bl	800c1a4 <__mcmp>
 800b864:	2800      	cmp	r0, #0
 800b866:	f77f ada3 	ble.w	800b3b0 <_dtoa_r+0x490>
 800b86a:	4656      	mov	r6, sl
 800b86c:	2331      	movs	r3, #49	@ 0x31
 800b86e:	f806 3b01 	strb.w	r3, [r6], #1
 800b872:	f108 0801 	add.w	r8, r8, #1
 800b876:	e59f      	b.n	800b3b8 <_dtoa_r+0x498>
 800b878:	9c03      	ldr	r4, [sp, #12]
 800b87a:	46b8      	mov	r8, r7
 800b87c:	4625      	mov	r5, r4
 800b87e:	e7f4      	b.n	800b86a <_dtoa_r+0x94a>
 800b880:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 8101 	beq.w	800ba8e <_dtoa_r+0xb6e>
 800b88c:	2e00      	cmp	r6, #0
 800b88e:	dd05      	ble.n	800b89c <_dtoa_r+0x97c>
 800b890:	4629      	mov	r1, r5
 800b892:	4632      	mov	r2, r6
 800b894:	4648      	mov	r0, r9
 800b896:	f000 fc19 	bl	800c0cc <__lshift>
 800b89a:	4605      	mov	r5, r0
 800b89c:	9b08      	ldr	r3, [sp, #32]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d05c      	beq.n	800b95c <_dtoa_r+0xa3c>
 800b8a2:	6869      	ldr	r1, [r5, #4]
 800b8a4:	4648      	mov	r0, r9
 800b8a6:	f000 fa0b 	bl	800bcc0 <_Balloc>
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	b928      	cbnz	r0, 800b8ba <_dtoa_r+0x99a>
 800b8ae:	4b82      	ldr	r3, [pc, #520]	@ (800bab8 <_dtoa_r+0xb98>)
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b8b6:	f7ff bb4a 	b.w	800af4e <_dtoa_r+0x2e>
 800b8ba:	692a      	ldr	r2, [r5, #16]
 800b8bc:	3202      	adds	r2, #2
 800b8be:	0092      	lsls	r2, r2, #2
 800b8c0:	f105 010c 	add.w	r1, r5, #12
 800b8c4:	300c      	adds	r0, #12
 800b8c6:	f000 ffa3 	bl	800c810 <memcpy>
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	4631      	mov	r1, r6
 800b8ce:	4648      	mov	r0, r9
 800b8d0:	f000 fbfc 	bl	800c0cc <__lshift>
 800b8d4:	f10a 0301 	add.w	r3, sl, #1
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	eb0a 030b 	add.w	r3, sl, fp
 800b8de:	9308      	str	r3, [sp, #32]
 800b8e0:	9b04      	ldr	r3, [sp, #16]
 800b8e2:	f003 0301 	and.w	r3, r3, #1
 800b8e6:	462f      	mov	r7, r5
 800b8e8:	9306      	str	r3, [sp, #24]
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	9b00      	ldr	r3, [sp, #0]
 800b8ee:	9802      	ldr	r0, [sp, #8]
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	f103 3bff 	add.w	fp, r3, #4294967295
 800b8f6:	f7ff fa8a 	bl	800ae0e <quorem>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	3330      	adds	r3, #48	@ 0x30
 800b8fe:	9003      	str	r0, [sp, #12]
 800b900:	4639      	mov	r1, r7
 800b902:	9802      	ldr	r0, [sp, #8]
 800b904:	9309      	str	r3, [sp, #36]	@ 0x24
 800b906:	f000 fc4d 	bl	800c1a4 <__mcmp>
 800b90a:	462a      	mov	r2, r5
 800b90c:	9004      	str	r0, [sp, #16]
 800b90e:	4621      	mov	r1, r4
 800b910:	4648      	mov	r0, r9
 800b912:	f000 fc63 	bl	800c1dc <__mdiff>
 800b916:	68c2      	ldr	r2, [r0, #12]
 800b918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b91a:	4606      	mov	r6, r0
 800b91c:	bb02      	cbnz	r2, 800b960 <_dtoa_r+0xa40>
 800b91e:	4601      	mov	r1, r0
 800b920:	9802      	ldr	r0, [sp, #8]
 800b922:	f000 fc3f 	bl	800c1a4 <__mcmp>
 800b926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b928:	4602      	mov	r2, r0
 800b92a:	4631      	mov	r1, r6
 800b92c:	4648      	mov	r0, r9
 800b92e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b930:	9309      	str	r3, [sp, #36]	@ 0x24
 800b932:	f000 fa05 	bl	800bd40 <_Bfree>
 800b936:	9b07      	ldr	r3, [sp, #28]
 800b938:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b93a:	9e00      	ldr	r6, [sp, #0]
 800b93c:	ea42 0103 	orr.w	r1, r2, r3
 800b940:	9b06      	ldr	r3, [sp, #24]
 800b942:	4319      	orrs	r1, r3
 800b944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b946:	d10d      	bne.n	800b964 <_dtoa_r+0xa44>
 800b948:	2b39      	cmp	r3, #57	@ 0x39
 800b94a:	d027      	beq.n	800b99c <_dtoa_r+0xa7c>
 800b94c:	9a04      	ldr	r2, [sp, #16]
 800b94e:	2a00      	cmp	r2, #0
 800b950:	dd01      	ble.n	800b956 <_dtoa_r+0xa36>
 800b952:	9b03      	ldr	r3, [sp, #12]
 800b954:	3331      	adds	r3, #49	@ 0x31
 800b956:	f88b 3000 	strb.w	r3, [fp]
 800b95a:	e52e      	b.n	800b3ba <_dtoa_r+0x49a>
 800b95c:	4628      	mov	r0, r5
 800b95e:	e7b9      	b.n	800b8d4 <_dtoa_r+0x9b4>
 800b960:	2201      	movs	r2, #1
 800b962:	e7e2      	b.n	800b92a <_dtoa_r+0xa0a>
 800b964:	9904      	ldr	r1, [sp, #16]
 800b966:	2900      	cmp	r1, #0
 800b968:	db04      	blt.n	800b974 <_dtoa_r+0xa54>
 800b96a:	9807      	ldr	r0, [sp, #28]
 800b96c:	4301      	orrs	r1, r0
 800b96e:	9806      	ldr	r0, [sp, #24]
 800b970:	4301      	orrs	r1, r0
 800b972:	d120      	bne.n	800b9b6 <_dtoa_r+0xa96>
 800b974:	2a00      	cmp	r2, #0
 800b976:	ddee      	ble.n	800b956 <_dtoa_r+0xa36>
 800b978:	9902      	ldr	r1, [sp, #8]
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	2201      	movs	r2, #1
 800b97e:	4648      	mov	r0, r9
 800b980:	f000 fba4 	bl	800c0cc <__lshift>
 800b984:	4621      	mov	r1, r4
 800b986:	9002      	str	r0, [sp, #8]
 800b988:	f000 fc0c 	bl	800c1a4 <__mcmp>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	9b00      	ldr	r3, [sp, #0]
 800b990:	dc02      	bgt.n	800b998 <_dtoa_r+0xa78>
 800b992:	d1e0      	bne.n	800b956 <_dtoa_r+0xa36>
 800b994:	07da      	lsls	r2, r3, #31
 800b996:	d5de      	bpl.n	800b956 <_dtoa_r+0xa36>
 800b998:	2b39      	cmp	r3, #57	@ 0x39
 800b99a:	d1da      	bne.n	800b952 <_dtoa_r+0xa32>
 800b99c:	2339      	movs	r3, #57	@ 0x39
 800b99e:	f88b 3000 	strb.w	r3, [fp]
 800b9a2:	4633      	mov	r3, r6
 800b9a4:	461e      	mov	r6, r3
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b9ac:	2a39      	cmp	r2, #57	@ 0x39
 800b9ae:	d04e      	beq.n	800ba4e <_dtoa_r+0xb2e>
 800b9b0:	3201      	adds	r2, #1
 800b9b2:	701a      	strb	r2, [r3, #0]
 800b9b4:	e501      	b.n	800b3ba <_dtoa_r+0x49a>
 800b9b6:	2a00      	cmp	r2, #0
 800b9b8:	dd03      	ble.n	800b9c2 <_dtoa_r+0xaa2>
 800b9ba:	2b39      	cmp	r3, #57	@ 0x39
 800b9bc:	d0ee      	beq.n	800b99c <_dtoa_r+0xa7c>
 800b9be:	3301      	adds	r3, #1
 800b9c0:	e7c9      	b.n	800b956 <_dtoa_r+0xa36>
 800b9c2:	9a00      	ldr	r2, [sp, #0]
 800b9c4:	9908      	ldr	r1, [sp, #32]
 800b9c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b9ca:	428a      	cmp	r2, r1
 800b9cc:	d028      	beq.n	800ba20 <_dtoa_r+0xb00>
 800b9ce:	9902      	ldr	r1, [sp, #8]
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	220a      	movs	r2, #10
 800b9d4:	4648      	mov	r0, r9
 800b9d6:	f000 f9d5 	bl	800bd84 <__multadd>
 800b9da:	42af      	cmp	r7, r5
 800b9dc:	9002      	str	r0, [sp, #8]
 800b9de:	f04f 0300 	mov.w	r3, #0
 800b9e2:	f04f 020a 	mov.w	r2, #10
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	4648      	mov	r0, r9
 800b9ea:	d107      	bne.n	800b9fc <_dtoa_r+0xadc>
 800b9ec:	f000 f9ca 	bl	800bd84 <__multadd>
 800b9f0:	4607      	mov	r7, r0
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	9b00      	ldr	r3, [sp, #0]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	e777      	b.n	800b8ec <_dtoa_r+0x9cc>
 800b9fc:	f000 f9c2 	bl	800bd84 <__multadd>
 800ba00:	4629      	mov	r1, r5
 800ba02:	4607      	mov	r7, r0
 800ba04:	2300      	movs	r3, #0
 800ba06:	220a      	movs	r2, #10
 800ba08:	4648      	mov	r0, r9
 800ba0a:	f000 f9bb 	bl	800bd84 <__multadd>
 800ba0e:	4605      	mov	r5, r0
 800ba10:	e7f0      	b.n	800b9f4 <_dtoa_r+0xad4>
 800ba12:	f1bb 0f00 	cmp.w	fp, #0
 800ba16:	bfcc      	ite	gt
 800ba18:	465e      	movgt	r6, fp
 800ba1a:	2601      	movle	r6, #1
 800ba1c:	4456      	add	r6, sl
 800ba1e:	2700      	movs	r7, #0
 800ba20:	9902      	ldr	r1, [sp, #8]
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	2201      	movs	r2, #1
 800ba26:	4648      	mov	r0, r9
 800ba28:	f000 fb50 	bl	800c0cc <__lshift>
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	9002      	str	r0, [sp, #8]
 800ba30:	f000 fbb8 	bl	800c1a4 <__mcmp>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	dcb4      	bgt.n	800b9a2 <_dtoa_r+0xa82>
 800ba38:	d102      	bne.n	800ba40 <_dtoa_r+0xb20>
 800ba3a:	9b00      	ldr	r3, [sp, #0]
 800ba3c:	07db      	lsls	r3, r3, #31
 800ba3e:	d4b0      	bmi.n	800b9a2 <_dtoa_r+0xa82>
 800ba40:	4633      	mov	r3, r6
 800ba42:	461e      	mov	r6, r3
 800ba44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba48:	2a30      	cmp	r2, #48	@ 0x30
 800ba4a:	d0fa      	beq.n	800ba42 <_dtoa_r+0xb22>
 800ba4c:	e4b5      	b.n	800b3ba <_dtoa_r+0x49a>
 800ba4e:	459a      	cmp	sl, r3
 800ba50:	d1a8      	bne.n	800b9a4 <_dtoa_r+0xa84>
 800ba52:	2331      	movs	r3, #49	@ 0x31
 800ba54:	f108 0801 	add.w	r8, r8, #1
 800ba58:	f88a 3000 	strb.w	r3, [sl]
 800ba5c:	e4ad      	b.n	800b3ba <_dtoa_r+0x49a>
 800ba5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800babc <_dtoa_r+0xb9c>
 800ba64:	b11b      	cbz	r3, 800ba6e <_dtoa_r+0xb4e>
 800ba66:	f10a 0308 	add.w	r3, sl, #8
 800ba6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	4650      	mov	r0, sl
 800ba70:	b017      	add	sp, #92	@ 0x5c
 800ba72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba76:	9b07      	ldr	r3, [sp, #28]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	f77f ae2e 	ble.w	800b6da <_dtoa_r+0x7ba>
 800ba7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba80:	9308      	str	r3, [sp, #32]
 800ba82:	2001      	movs	r0, #1
 800ba84:	e64d      	b.n	800b722 <_dtoa_r+0x802>
 800ba86:	f1bb 0f00 	cmp.w	fp, #0
 800ba8a:	f77f aed9 	ble.w	800b840 <_dtoa_r+0x920>
 800ba8e:	4656      	mov	r6, sl
 800ba90:	9802      	ldr	r0, [sp, #8]
 800ba92:	4621      	mov	r1, r4
 800ba94:	f7ff f9bb 	bl	800ae0e <quorem>
 800ba98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ba9c:	f806 3b01 	strb.w	r3, [r6], #1
 800baa0:	eba6 020a 	sub.w	r2, r6, sl
 800baa4:	4593      	cmp	fp, r2
 800baa6:	ddb4      	ble.n	800ba12 <_dtoa_r+0xaf2>
 800baa8:	9902      	ldr	r1, [sp, #8]
 800baaa:	2300      	movs	r3, #0
 800baac:	220a      	movs	r2, #10
 800baae:	4648      	mov	r0, r9
 800bab0:	f000 f968 	bl	800bd84 <__multadd>
 800bab4:	9002      	str	r0, [sp, #8]
 800bab6:	e7eb      	b.n	800ba90 <_dtoa_r+0xb70>
 800bab8:	0800ef0c 	.word	0x0800ef0c
 800babc:	0800ee90 	.word	0x0800ee90

0800bac0 <_free_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4605      	mov	r5, r0
 800bac4:	2900      	cmp	r1, #0
 800bac6:	d041      	beq.n	800bb4c <_free_r+0x8c>
 800bac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bacc:	1f0c      	subs	r4, r1, #4
 800bace:	2b00      	cmp	r3, #0
 800bad0:	bfb8      	it	lt
 800bad2:	18e4      	addlt	r4, r4, r3
 800bad4:	f000 f8e8 	bl	800bca8 <__malloc_lock>
 800bad8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb50 <_free_r+0x90>)
 800bada:	6813      	ldr	r3, [r2, #0]
 800badc:	b933      	cbnz	r3, 800baec <_free_r+0x2c>
 800bade:	6063      	str	r3, [r4, #4]
 800bae0:	6014      	str	r4, [r2, #0]
 800bae2:	4628      	mov	r0, r5
 800bae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bae8:	f000 b8e4 	b.w	800bcb4 <__malloc_unlock>
 800baec:	42a3      	cmp	r3, r4
 800baee:	d908      	bls.n	800bb02 <_free_r+0x42>
 800baf0:	6820      	ldr	r0, [r4, #0]
 800baf2:	1821      	adds	r1, r4, r0
 800baf4:	428b      	cmp	r3, r1
 800baf6:	bf01      	itttt	eq
 800baf8:	6819      	ldreq	r1, [r3, #0]
 800bafa:	685b      	ldreq	r3, [r3, #4]
 800bafc:	1809      	addeq	r1, r1, r0
 800bafe:	6021      	streq	r1, [r4, #0]
 800bb00:	e7ed      	b.n	800bade <_free_r+0x1e>
 800bb02:	461a      	mov	r2, r3
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	b10b      	cbz	r3, 800bb0c <_free_r+0x4c>
 800bb08:	42a3      	cmp	r3, r4
 800bb0a:	d9fa      	bls.n	800bb02 <_free_r+0x42>
 800bb0c:	6811      	ldr	r1, [r2, #0]
 800bb0e:	1850      	adds	r0, r2, r1
 800bb10:	42a0      	cmp	r0, r4
 800bb12:	d10b      	bne.n	800bb2c <_free_r+0x6c>
 800bb14:	6820      	ldr	r0, [r4, #0]
 800bb16:	4401      	add	r1, r0
 800bb18:	1850      	adds	r0, r2, r1
 800bb1a:	4283      	cmp	r3, r0
 800bb1c:	6011      	str	r1, [r2, #0]
 800bb1e:	d1e0      	bne.n	800bae2 <_free_r+0x22>
 800bb20:	6818      	ldr	r0, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	6053      	str	r3, [r2, #4]
 800bb26:	4408      	add	r0, r1
 800bb28:	6010      	str	r0, [r2, #0]
 800bb2a:	e7da      	b.n	800bae2 <_free_r+0x22>
 800bb2c:	d902      	bls.n	800bb34 <_free_r+0x74>
 800bb2e:	230c      	movs	r3, #12
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	e7d6      	b.n	800bae2 <_free_r+0x22>
 800bb34:	6820      	ldr	r0, [r4, #0]
 800bb36:	1821      	adds	r1, r4, r0
 800bb38:	428b      	cmp	r3, r1
 800bb3a:	bf04      	itt	eq
 800bb3c:	6819      	ldreq	r1, [r3, #0]
 800bb3e:	685b      	ldreq	r3, [r3, #4]
 800bb40:	6063      	str	r3, [r4, #4]
 800bb42:	bf04      	itt	eq
 800bb44:	1809      	addeq	r1, r1, r0
 800bb46:	6021      	streq	r1, [r4, #0]
 800bb48:	6054      	str	r4, [r2, #4]
 800bb4a:	e7ca      	b.n	800bae2 <_free_r+0x22>
 800bb4c:	bd38      	pop	{r3, r4, r5, pc}
 800bb4e:	bf00      	nop
 800bb50:	20001ef0 	.word	0x20001ef0

0800bb54 <malloc>:
 800bb54:	4b02      	ldr	r3, [pc, #8]	@ (800bb60 <malloc+0xc>)
 800bb56:	4601      	mov	r1, r0
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	f000 b825 	b.w	800bba8 <_malloc_r>
 800bb5e:	bf00      	nop
 800bb60:	2000006c 	.word	0x2000006c

0800bb64 <sbrk_aligned>:
 800bb64:	b570      	push	{r4, r5, r6, lr}
 800bb66:	4e0f      	ldr	r6, [pc, #60]	@ (800bba4 <sbrk_aligned+0x40>)
 800bb68:	460c      	mov	r4, r1
 800bb6a:	6831      	ldr	r1, [r6, #0]
 800bb6c:	4605      	mov	r5, r0
 800bb6e:	b911      	cbnz	r1, 800bb76 <sbrk_aligned+0x12>
 800bb70:	f000 fe3e 	bl	800c7f0 <_sbrk_r>
 800bb74:	6030      	str	r0, [r6, #0]
 800bb76:	4621      	mov	r1, r4
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f000 fe39 	bl	800c7f0 <_sbrk_r>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	d103      	bne.n	800bb8a <sbrk_aligned+0x26>
 800bb82:	f04f 34ff 	mov.w	r4, #4294967295
 800bb86:	4620      	mov	r0, r4
 800bb88:	bd70      	pop	{r4, r5, r6, pc}
 800bb8a:	1cc4      	adds	r4, r0, #3
 800bb8c:	f024 0403 	bic.w	r4, r4, #3
 800bb90:	42a0      	cmp	r0, r4
 800bb92:	d0f8      	beq.n	800bb86 <sbrk_aligned+0x22>
 800bb94:	1a21      	subs	r1, r4, r0
 800bb96:	4628      	mov	r0, r5
 800bb98:	f000 fe2a 	bl	800c7f0 <_sbrk_r>
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d1f2      	bne.n	800bb86 <sbrk_aligned+0x22>
 800bba0:	e7ef      	b.n	800bb82 <sbrk_aligned+0x1e>
 800bba2:	bf00      	nop
 800bba4:	20001eec 	.word	0x20001eec

0800bba8 <_malloc_r>:
 800bba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbac:	1ccd      	adds	r5, r1, #3
 800bbae:	f025 0503 	bic.w	r5, r5, #3
 800bbb2:	3508      	adds	r5, #8
 800bbb4:	2d0c      	cmp	r5, #12
 800bbb6:	bf38      	it	cc
 800bbb8:	250c      	movcc	r5, #12
 800bbba:	2d00      	cmp	r5, #0
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	db01      	blt.n	800bbc4 <_malloc_r+0x1c>
 800bbc0:	42a9      	cmp	r1, r5
 800bbc2:	d904      	bls.n	800bbce <_malloc_r+0x26>
 800bbc4:	230c      	movs	r3, #12
 800bbc6:	6033      	str	r3, [r6, #0]
 800bbc8:	2000      	movs	r0, #0
 800bbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bca4 <_malloc_r+0xfc>
 800bbd2:	f000 f869 	bl	800bca8 <__malloc_lock>
 800bbd6:	f8d8 3000 	ldr.w	r3, [r8]
 800bbda:	461c      	mov	r4, r3
 800bbdc:	bb44      	cbnz	r4, 800bc30 <_malloc_r+0x88>
 800bbde:	4629      	mov	r1, r5
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f7ff ffbf 	bl	800bb64 <sbrk_aligned>
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	4604      	mov	r4, r0
 800bbea:	d158      	bne.n	800bc9e <_malloc_r+0xf6>
 800bbec:	f8d8 4000 	ldr.w	r4, [r8]
 800bbf0:	4627      	mov	r7, r4
 800bbf2:	2f00      	cmp	r7, #0
 800bbf4:	d143      	bne.n	800bc7e <_malloc_r+0xd6>
 800bbf6:	2c00      	cmp	r4, #0
 800bbf8:	d04b      	beq.n	800bc92 <_malloc_r+0xea>
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	4639      	mov	r1, r7
 800bbfe:	4630      	mov	r0, r6
 800bc00:	eb04 0903 	add.w	r9, r4, r3
 800bc04:	f000 fdf4 	bl	800c7f0 <_sbrk_r>
 800bc08:	4581      	cmp	r9, r0
 800bc0a:	d142      	bne.n	800bc92 <_malloc_r+0xea>
 800bc0c:	6821      	ldr	r1, [r4, #0]
 800bc0e:	1a6d      	subs	r5, r5, r1
 800bc10:	4629      	mov	r1, r5
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7ff ffa6 	bl	800bb64 <sbrk_aligned>
 800bc18:	3001      	adds	r0, #1
 800bc1a:	d03a      	beq.n	800bc92 <_malloc_r+0xea>
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	442b      	add	r3, r5
 800bc20:	6023      	str	r3, [r4, #0]
 800bc22:	f8d8 3000 	ldr.w	r3, [r8]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	bb62      	cbnz	r2, 800bc84 <_malloc_r+0xdc>
 800bc2a:	f8c8 7000 	str.w	r7, [r8]
 800bc2e:	e00f      	b.n	800bc50 <_malloc_r+0xa8>
 800bc30:	6822      	ldr	r2, [r4, #0]
 800bc32:	1b52      	subs	r2, r2, r5
 800bc34:	d420      	bmi.n	800bc78 <_malloc_r+0xd0>
 800bc36:	2a0b      	cmp	r2, #11
 800bc38:	d917      	bls.n	800bc6a <_malloc_r+0xc2>
 800bc3a:	1961      	adds	r1, r4, r5
 800bc3c:	42a3      	cmp	r3, r4
 800bc3e:	6025      	str	r5, [r4, #0]
 800bc40:	bf18      	it	ne
 800bc42:	6059      	strne	r1, [r3, #4]
 800bc44:	6863      	ldr	r3, [r4, #4]
 800bc46:	bf08      	it	eq
 800bc48:	f8c8 1000 	streq.w	r1, [r8]
 800bc4c:	5162      	str	r2, [r4, r5]
 800bc4e:	604b      	str	r3, [r1, #4]
 800bc50:	4630      	mov	r0, r6
 800bc52:	f000 f82f 	bl	800bcb4 <__malloc_unlock>
 800bc56:	f104 000b 	add.w	r0, r4, #11
 800bc5a:	1d23      	adds	r3, r4, #4
 800bc5c:	f020 0007 	bic.w	r0, r0, #7
 800bc60:	1ac2      	subs	r2, r0, r3
 800bc62:	bf1c      	itt	ne
 800bc64:	1a1b      	subne	r3, r3, r0
 800bc66:	50a3      	strne	r3, [r4, r2]
 800bc68:	e7af      	b.n	800bbca <_malloc_r+0x22>
 800bc6a:	6862      	ldr	r2, [r4, #4]
 800bc6c:	42a3      	cmp	r3, r4
 800bc6e:	bf0c      	ite	eq
 800bc70:	f8c8 2000 	streq.w	r2, [r8]
 800bc74:	605a      	strne	r2, [r3, #4]
 800bc76:	e7eb      	b.n	800bc50 <_malloc_r+0xa8>
 800bc78:	4623      	mov	r3, r4
 800bc7a:	6864      	ldr	r4, [r4, #4]
 800bc7c:	e7ae      	b.n	800bbdc <_malloc_r+0x34>
 800bc7e:	463c      	mov	r4, r7
 800bc80:	687f      	ldr	r7, [r7, #4]
 800bc82:	e7b6      	b.n	800bbf2 <_malloc_r+0x4a>
 800bc84:	461a      	mov	r2, r3
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	42a3      	cmp	r3, r4
 800bc8a:	d1fb      	bne.n	800bc84 <_malloc_r+0xdc>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	6053      	str	r3, [r2, #4]
 800bc90:	e7de      	b.n	800bc50 <_malloc_r+0xa8>
 800bc92:	230c      	movs	r3, #12
 800bc94:	6033      	str	r3, [r6, #0]
 800bc96:	4630      	mov	r0, r6
 800bc98:	f000 f80c 	bl	800bcb4 <__malloc_unlock>
 800bc9c:	e794      	b.n	800bbc8 <_malloc_r+0x20>
 800bc9e:	6005      	str	r5, [r0, #0]
 800bca0:	e7d6      	b.n	800bc50 <_malloc_r+0xa8>
 800bca2:	bf00      	nop
 800bca4:	20001ef0 	.word	0x20001ef0

0800bca8 <__malloc_lock>:
 800bca8:	4801      	ldr	r0, [pc, #4]	@ (800bcb0 <__malloc_lock+0x8>)
 800bcaa:	f7ff b8ae 	b.w	800ae0a <__retarget_lock_acquire_recursive>
 800bcae:	bf00      	nop
 800bcb0:	20001ee8 	.word	0x20001ee8

0800bcb4 <__malloc_unlock>:
 800bcb4:	4801      	ldr	r0, [pc, #4]	@ (800bcbc <__malloc_unlock+0x8>)
 800bcb6:	f7ff b8a9 	b.w	800ae0c <__retarget_lock_release_recursive>
 800bcba:	bf00      	nop
 800bcbc:	20001ee8 	.word	0x20001ee8

0800bcc0 <_Balloc>:
 800bcc0:	b570      	push	{r4, r5, r6, lr}
 800bcc2:	69c6      	ldr	r6, [r0, #28]
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	460d      	mov	r5, r1
 800bcc8:	b976      	cbnz	r6, 800bce8 <_Balloc+0x28>
 800bcca:	2010      	movs	r0, #16
 800bccc:	f7ff ff42 	bl	800bb54 <malloc>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	61e0      	str	r0, [r4, #28]
 800bcd4:	b920      	cbnz	r0, 800bce0 <_Balloc+0x20>
 800bcd6:	4b18      	ldr	r3, [pc, #96]	@ (800bd38 <_Balloc+0x78>)
 800bcd8:	4818      	ldr	r0, [pc, #96]	@ (800bd3c <_Balloc+0x7c>)
 800bcda:	216b      	movs	r1, #107	@ 0x6b
 800bcdc:	f000 fda6 	bl	800c82c <__assert_func>
 800bce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bce4:	6006      	str	r6, [r0, #0]
 800bce6:	60c6      	str	r6, [r0, #12]
 800bce8:	69e6      	ldr	r6, [r4, #28]
 800bcea:	68f3      	ldr	r3, [r6, #12]
 800bcec:	b183      	cbz	r3, 800bd10 <_Balloc+0x50>
 800bcee:	69e3      	ldr	r3, [r4, #28]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bcf6:	b9b8      	cbnz	r0, 800bd28 <_Balloc+0x68>
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	fa01 f605 	lsl.w	r6, r1, r5
 800bcfe:	1d72      	adds	r2, r6, #5
 800bd00:	0092      	lsls	r2, r2, #2
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 fdb0 	bl	800c868 <_calloc_r>
 800bd08:	b160      	cbz	r0, 800bd24 <_Balloc+0x64>
 800bd0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd0e:	e00e      	b.n	800bd2e <_Balloc+0x6e>
 800bd10:	2221      	movs	r2, #33	@ 0x21
 800bd12:	2104      	movs	r1, #4
 800bd14:	4620      	mov	r0, r4
 800bd16:	f000 fda7 	bl	800c868 <_calloc_r>
 800bd1a:	69e3      	ldr	r3, [r4, #28]
 800bd1c:	60f0      	str	r0, [r6, #12]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1e4      	bne.n	800bcee <_Balloc+0x2e>
 800bd24:	2000      	movs	r0, #0
 800bd26:	bd70      	pop	{r4, r5, r6, pc}
 800bd28:	6802      	ldr	r2, [r0, #0]
 800bd2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd2e:	2300      	movs	r3, #0
 800bd30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd34:	e7f7      	b.n	800bd26 <_Balloc+0x66>
 800bd36:	bf00      	nop
 800bd38:	0800ee9d 	.word	0x0800ee9d
 800bd3c:	0800ef1d 	.word	0x0800ef1d

0800bd40 <_Bfree>:
 800bd40:	b570      	push	{r4, r5, r6, lr}
 800bd42:	69c6      	ldr	r6, [r0, #28]
 800bd44:	4605      	mov	r5, r0
 800bd46:	460c      	mov	r4, r1
 800bd48:	b976      	cbnz	r6, 800bd68 <_Bfree+0x28>
 800bd4a:	2010      	movs	r0, #16
 800bd4c:	f7ff ff02 	bl	800bb54 <malloc>
 800bd50:	4602      	mov	r2, r0
 800bd52:	61e8      	str	r0, [r5, #28]
 800bd54:	b920      	cbnz	r0, 800bd60 <_Bfree+0x20>
 800bd56:	4b09      	ldr	r3, [pc, #36]	@ (800bd7c <_Bfree+0x3c>)
 800bd58:	4809      	ldr	r0, [pc, #36]	@ (800bd80 <_Bfree+0x40>)
 800bd5a:	218f      	movs	r1, #143	@ 0x8f
 800bd5c:	f000 fd66 	bl	800c82c <__assert_func>
 800bd60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd64:	6006      	str	r6, [r0, #0]
 800bd66:	60c6      	str	r6, [r0, #12]
 800bd68:	b13c      	cbz	r4, 800bd7a <_Bfree+0x3a>
 800bd6a:	69eb      	ldr	r3, [r5, #28]
 800bd6c:	6862      	ldr	r2, [r4, #4]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd74:	6021      	str	r1, [r4, #0]
 800bd76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd7a:	bd70      	pop	{r4, r5, r6, pc}
 800bd7c:	0800ee9d 	.word	0x0800ee9d
 800bd80:	0800ef1d 	.word	0x0800ef1d

0800bd84 <__multadd>:
 800bd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd88:	690d      	ldr	r5, [r1, #16]
 800bd8a:	4607      	mov	r7, r0
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	461e      	mov	r6, r3
 800bd90:	f101 0c14 	add.w	ip, r1, #20
 800bd94:	2000      	movs	r0, #0
 800bd96:	f8dc 3000 	ldr.w	r3, [ip]
 800bd9a:	b299      	uxth	r1, r3
 800bd9c:	fb02 6101 	mla	r1, r2, r1, r6
 800bda0:	0c1e      	lsrs	r6, r3, #16
 800bda2:	0c0b      	lsrs	r3, r1, #16
 800bda4:	fb02 3306 	mla	r3, r2, r6, r3
 800bda8:	b289      	uxth	r1, r1
 800bdaa:	3001      	adds	r0, #1
 800bdac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdb0:	4285      	cmp	r5, r0
 800bdb2:	f84c 1b04 	str.w	r1, [ip], #4
 800bdb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdba:	dcec      	bgt.n	800bd96 <__multadd+0x12>
 800bdbc:	b30e      	cbz	r6, 800be02 <__multadd+0x7e>
 800bdbe:	68a3      	ldr	r3, [r4, #8]
 800bdc0:	42ab      	cmp	r3, r5
 800bdc2:	dc19      	bgt.n	800bdf8 <__multadd+0x74>
 800bdc4:	6861      	ldr	r1, [r4, #4]
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	3101      	adds	r1, #1
 800bdca:	f7ff ff79 	bl	800bcc0 <_Balloc>
 800bdce:	4680      	mov	r8, r0
 800bdd0:	b928      	cbnz	r0, 800bdde <__multadd+0x5a>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	4b0c      	ldr	r3, [pc, #48]	@ (800be08 <__multadd+0x84>)
 800bdd6:	480d      	ldr	r0, [pc, #52]	@ (800be0c <__multadd+0x88>)
 800bdd8:	21ba      	movs	r1, #186	@ 0xba
 800bdda:	f000 fd27 	bl	800c82c <__assert_func>
 800bdde:	6922      	ldr	r2, [r4, #16]
 800bde0:	3202      	adds	r2, #2
 800bde2:	f104 010c 	add.w	r1, r4, #12
 800bde6:	0092      	lsls	r2, r2, #2
 800bde8:	300c      	adds	r0, #12
 800bdea:	f000 fd11 	bl	800c810 <memcpy>
 800bdee:	4621      	mov	r1, r4
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	f7ff ffa5 	bl	800bd40 <_Bfree>
 800bdf6:	4644      	mov	r4, r8
 800bdf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bdfc:	3501      	adds	r5, #1
 800bdfe:	615e      	str	r6, [r3, #20]
 800be00:	6125      	str	r5, [r4, #16]
 800be02:	4620      	mov	r0, r4
 800be04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be08:	0800ef0c 	.word	0x0800ef0c
 800be0c:	0800ef1d 	.word	0x0800ef1d

0800be10 <__hi0bits>:
 800be10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be14:	4603      	mov	r3, r0
 800be16:	bf36      	itet	cc
 800be18:	0403      	lslcc	r3, r0, #16
 800be1a:	2000      	movcs	r0, #0
 800be1c:	2010      	movcc	r0, #16
 800be1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be22:	bf3c      	itt	cc
 800be24:	021b      	lslcc	r3, r3, #8
 800be26:	3008      	addcc	r0, #8
 800be28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be2c:	bf3c      	itt	cc
 800be2e:	011b      	lslcc	r3, r3, #4
 800be30:	3004      	addcc	r0, #4
 800be32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be36:	bf3c      	itt	cc
 800be38:	009b      	lslcc	r3, r3, #2
 800be3a:	3002      	addcc	r0, #2
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	db05      	blt.n	800be4c <__hi0bits+0x3c>
 800be40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be44:	f100 0001 	add.w	r0, r0, #1
 800be48:	bf08      	it	eq
 800be4a:	2020      	moveq	r0, #32
 800be4c:	4770      	bx	lr

0800be4e <__lo0bits>:
 800be4e:	6803      	ldr	r3, [r0, #0]
 800be50:	4602      	mov	r2, r0
 800be52:	f013 0007 	ands.w	r0, r3, #7
 800be56:	d00b      	beq.n	800be70 <__lo0bits+0x22>
 800be58:	07d9      	lsls	r1, r3, #31
 800be5a:	d421      	bmi.n	800bea0 <__lo0bits+0x52>
 800be5c:	0798      	lsls	r0, r3, #30
 800be5e:	bf49      	itett	mi
 800be60:	085b      	lsrmi	r3, r3, #1
 800be62:	089b      	lsrpl	r3, r3, #2
 800be64:	2001      	movmi	r0, #1
 800be66:	6013      	strmi	r3, [r2, #0]
 800be68:	bf5c      	itt	pl
 800be6a:	6013      	strpl	r3, [r2, #0]
 800be6c:	2002      	movpl	r0, #2
 800be6e:	4770      	bx	lr
 800be70:	b299      	uxth	r1, r3
 800be72:	b909      	cbnz	r1, 800be78 <__lo0bits+0x2a>
 800be74:	0c1b      	lsrs	r3, r3, #16
 800be76:	2010      	movs	r0, #16
 800be78:	b2d9      	uxtb	r1, r3
 800be7a:	b909      	cbnz	r1, 800be80 <__lo0bits+0x32>
 800be7c:	3008      	adds	r0, #8
 800be7e:	0a1b      	lsrs	r3, r3, #8
 800be80:	0719      	lsls	r1, r3, #28
 800be82:	bf04      	itt	eq
 800be84:	091b      	lsreq	r3, r3, #4
 800be86:	3004      	addeq	r0, #4
 800be88:	0799      	lsls	r1, r3, #30
 800be8a:	bf04      	itt	eq
 800be8c:	089b      	lsreq	r3, r3, #2
 800be8e:	3002      	addeq	r0, #2
 800be90:	07d9      	lsls	r1, r3, #31
 800be92:	d403      	bmi.n	800be9c <__lo0bits+0x4e>
 800be94:	085b      	lsrs	r3, r3, #1
 800be96:	f100 0001 	add.w	r0, r0, #1
 800be9a:	d003      	beq.n	800bea4 <__lo0bits+0x56>
 800be9c:	6013      	str	r3, [r2, #0]
 800be9e:	4770      	bx	lr
 800bea0:	2000      	movs	r0, #0
 800bea2:	4770      	bx	lr
 800bea4:	2020      	movs	r0, #32
 800bea6:	4770      	bx	lr

0800bea8 <__i2b>:
 800bea8:	b510      	push	{r4, lr}
 800beaa:	460c      	mov	r4, r1
 800beac:	2101      	movs	r1, #1
 800beae:	f7ff ff07 	bl	800bcc0 <_Balloc>
 800beb2:	4602      	mov	r2, r0
 800beb4:	b928      	cbnz	r0, 800bec2 <__i2b+0x1a>
 800beb6:	4b05      	ldr	r3, [pc, #20]	@ (800becc <__i2b+0x24>)
 800beb8:	4805      	ldr	r0, [pc, #20]	@ (800bed0 <__i2b+0x28>)
 800beba:	f240 1145 	movw	r1, #325	@ 0x145
 800bebe:	f000 fcb5 	bl	800c82c <__assert_func>
 800bec2:	2301      	movs	r3, #1
 800bec4:	6144      	str	r4, [r0, #20]
 800bec6:	6103      	str	r3, [r0, #16]
 800bec8:	bd10      	pop	{r4, pc}
 800beca:	bf00      	nop
 800becc:	0800ef0c 	.word	0x0800ef0c
 800bed0:	0800ef1d 	.word	0x0800ef1d

0800bed4 <__multiply>:
 800bed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed8:	4617      	mov	r7, r2
 800beda:	690a      	ldr	r2, [r1, #16]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	429a      	cmp	r2, r3
 800bee0:	bfa8      	it	ge
 800bee2:	463b      	movge	r3, r7
 800bee4:	4689      	mov	r9, r1
 800bee6:	bfa4      	itt	ge
 800bee8:	460f      	movge	r7, r1
 800beea:	4699      	movge	r9, r3
 800beec:	693d      	ldr	r5, [r7, #16]
 800beee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	6879      	ldr	r1, [r7, #4]
 800bef6:	eb05 060a 	add.w	r6, r5, sl
 800befa:	42b3      	cmp	r3, r6
 800befc:	b085      	sub	sp, #20
 800befe:	bfb8      	it	lt
 800bf00:	3101      	addlt	r1, #1
 800bf02:	f7ff fedd 	bl	800bcc0 <_Balloc>
 800bf06:	b930      	cbnz	r0, 800bf16 <__multiply+0x42>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	4b41      	ldr	r3, [pc, #260]	@ (800c010 <__multiply+0x13c>)
 800bf0c:	4841      	ldr	r0, [pc, #260]	@ (800c014 <__multiply+0x140>)
 800bf0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf12:	f000 fc8b 	bl	800c82c <__assert_func>
 800bf16:	f100 0414 	add.w	r4, r0, #20
 800bf1a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bf1e:	4623      	mov	r3, r4
 800bf20:	2200      	movs	r2, #0
 800bf22:	4573      	cmp	r3, lr
 800bf24:	d320      	bcc.n	800bf68 <__multiply+0x94>
 800bf26:	f107 0814 	add.w	r8, r7, #20
 800bf2a:	f109 0114 	add.w	r1, r9, #20
 800bf2e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bf32:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bf36:	9302      	str	r3, [sp, #8]
 800bf38:	1beb      	subs	r3, r5, r7
 800bf3a:	3b15      	subs	r3, #21
 800bf3c:	f023 0303 	bic.w	r3, r3, #3
 800bf40:	3304      	adds	r3, #4
 800bf42:	3715      	adds	r7, #21
 800bf44:	42bd      	cmp	r5, r7
 800bf46:	bf38      	it	cc
 800bf48:	2304      	movcc	r3, #4
 800bf4a:	9301      	str	r3, [sp, #4]
 800bf4c:	9b02      	ldr	r3, [sp, #8]
 800bf4e:	9103      	str	r1, [sp, #12]
 800bf50:	428b      	cmp	r3, r1
 800bf52:	d80c      	bhi.n	800bf6e <__multiply+0x9a>
 800bf54:	2e00      	cmp	r6, #0
 800bf56:	dd03      	ble.n	800bf60 <__multiply+0x8c>
 800bf58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d055      	beq.n	800c00c <__multiply+0x138>
 800bf60:	6106      	str	r6, [r0, #16]
 800bf62:	b005      	add	sp, #20
 800bf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf68:	f843 2b04 	str.w	r2, [r3], #4
 800bf6c:	e7d9      	b.n	800bf22 <__multiply+0x4e>
 800bf6e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bf72:	f1ba 0f00 	cmp.w	sl, #0
 800bf76:	d01f      	beq.n	800bfb8 <__multiply+0xe4>
 800bf78:	46c4      	mov	ip, r8
 800bf7a:	46a1      	mov	r9, r4
 800bf7c:	2700      	movs	r7, #0
 800bf7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf82:	f8d9 3000 	ldr.w	r3, [r9]
 800bf86:	fa1f fb82 	uxth.w	fp, r2
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bf90:	443b      	add	r3, r7
 800bf92:	f8d9 7000 	ldr.w	r7, [r9]
 800bf96:	0c12      	lsrs	r2, r2, #16
 800bf98:	0c3f      	lsrs	r7, r7, #16
 800bf9a:	fb0a 7202 	mla	r2, sl, r2, r7
 800bf9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfa8:	4565      	cmp	r5, ip
 800bfaa:	f849 3b04 	str.w	r3, [r9], #4
 800bfae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bfb2:	d8e4      	bhi.n	800bf7e <__multiply+0xaa>
 800bfb4:	9b01      	ldr	r3, [sp, #4]
 800bfb6:	50e7      	str	r7, [r4, r3]
 800bfb8:	9b03      	ldr	r3, [sp, #12]
 800bfba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bfbe:	3104      	adds	r1, #4
 800bfc0:	f1b9 0f00 	cmp.w	r9, #0
 800bfc4:	d020      	beq.n	800c008 <__multiply+0x134>
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	4647      	mov	r7, r8
 800bfca:	46a4      	mov	ip, r4
 800bfcc:	f04f 0a00 	mov.w	sl, #0
 800bfd0:	f8b7 b000 	ldrh.w	fp, [r7]
 800bfd4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bfd8:	fb09 220b 	mla	r2, r9, fp, r2
 800bfdc:	4452      	add	r2, sl
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfe4:	f84c 3b04 	str.w	r3, [ip], #4
 800bfe8:	f857 3b04 	ldr.w	r3, [r7], #4
 800bfec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bff0:	f8bc 3000 	ldrh.w	r3, [ip]
 800bff4:	fb09 330a 	mla	r3, r9, sl, r3
 800bff8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bffc:	42bd      	cmp	r5, r7
 800bffe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c002:	d8e5      	bhi.n	800bfd0 <__multiply+0xfc>
 800c004:	9a01      	ldr	r2, [sp, #4]
 800c006:	50a3      	str	r3, [r4, r2]
 800c008:	3404      	adds	r4, #4
 800c00a:	e79f      	b.n	800bf4c <__multiply+0x78>
 800c00c:	3e01      	subs	r6, #1
 800c00e:	e7a1      	b.n	800bf54 <__multiply+0x80>
 800c010:	0800ef0c 	.word	0x0800ef0c
 800c014:	0800ef1d 	.word	0x0800ef1d

0800c018 <__pow5mult>:
 800c018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c01c:	4615      	mov	r5, r2
 800c01e:	f012 0203 	ands.w	r2, r2, #3
 800c022:	4607      	mov	r7, r0
 800c024:	460e      	mov	r6, r1
 800c026:	d007      	beq.n	800c038 <__pow5mult+0x20>
 800c028:	4c25      	ldr	r4, [pc, #148]	@ (800c0c0 <__pow5mult+0xa8>)
 800c02a:	3a01      	subs	r2, #1
 800c02c:	2300      	movs	r3, #0
 800c02e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c032:	f7ff fea7 	bl	800bd84 <__multadd>
 800c036:	4606      	mov	r6, r0
 800c038:	10ad      	asrs	r5, r5, #2
 800c03a:	d03d      	beq.n	800c0b8 <__pow5mult+0xa0>
 800c03c:	69fc      	ldr	r4, [r7, #28]
 800c03e:	b97c      	cbnz	r4, 800c060 <__pow5mult+0x48>
 800c040:	2010      	movs	r0, #16
 800c042:	f7ff fd87 	bl	800bb54 <malloc>
 800c046:	4602      	mov	r2, r0
 800c048:	61f8      	str	r0, [r7, #28]
 800c04a:	b928      	cbnz	r0, 800c058 <__pow5mult+0x40>
 800c04c:	4b1d      	ldr	r3, [pc, #116]	@ (800c0c4 <__pow5mult+0xac>)
 800c04e:	481e      	ldr	r0, [pc, #120]	@ (800c0c8 <__pow5mult+0xb0>)
 800c050:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c054:	f000 fbea 	bl	800c82c <__assert_func>
 800c058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c05c:	6004      	str	r4, [r0, #0]
 800c05e:	60c4      	str	r4, [r0, #12]
 800c060:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c068:	b94c      	cbnz	r4, 800c07e <__pow5mult+0x66>
 800c06a:	f240 2171 	movw	r1, #625	@ 0x271
 800c06e:	4638      	mov	r0, r7
 800c070:	f7ff ff1a 	bl	800bea8 <__i2b>
 800c074:	2300      	movs	r3, #0
 800c076:	f8c8 0008 	str.w	r0, [r8, #8]
 800c07a:	4604      	mov	r4, r0
 800c07c:	6003      	str	r3, [r0, #0]
 800c07e:	f04f 0900 	mov.w	r9, #0
 800c082:	07eb      	lsls	r3, r5, #31
 800c084:	d50a      	bpl.n	800c09c <__pow5mult+0x84>
 800c086:	4631      	mov	r1, r6
 800c088:	4622      	mov	r2, r4
 800c08a:	4638      	mov	r0, r7
 800c08c:	f7ff ff22 	bl	800bed4 <__multiply>
 800c090:	4631      	mov	r1, r6
 800c092:	4680      	mov	r8, r0
 800c094:	4638      	mov	r0, r7
 800c096:	f7ff fe53 	bl	800bd40 <_Bfree>
 800c09a:	4646      	mov	r6, r8
 800c09c:	106d      	asrs	r5, r5, #1
 800c09e:	d00b      	beq.n	800c0b8 <__pow5mult+0xa0>
 800c0a0:	6820      	ldr	r0, [r4, #0]
 800c0a2:	b938      	cbnz	r0, 800c0b4 <__pow5mult+0x9c>
 800c0a4:	4622      	mov	r2, r4
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	f7ff ff13 	bl	800bed4 <__multiply>
 800c0ae:	6020      	str	r0, [r4, #0]
 800c0b0:	f8c0 9000 	str.w	r9, [r0]
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	e7e4      	b.n	800c082 <__pow5mult+0x6a>
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0be:	bf00      	nop
 800c0c0:	0800efd0 	.word	0x0800efd0
 800c0c4:	0800ee9d 	.word	0x0800ee9d
 800c0c8:	0800ef1d 	.word	0x0800ef1d

0800c0cc <__lshift>:
 800c0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	6849      	ldr	r1, [r1, #4]
 800c0d4:	6923      	ldr	r3, [r4, #16]
 800c0d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c0da:	68a3      	ldr	r3, [r4, #8]
 800c0dc:	4607      	mov	r7, r0
 800c0de:	4691      	mov	r9, r2
 800c0e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0e4:	f108 0601 	add.w	r6, r8, #1
 800c0e8:	42b3      	cmp	r3, r6
 800c0ea:	db0b      	blt.n	800c104 <__lshift+0x38>
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	f7ff fde7 	bl	800bcc0 <_Balloc>
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	b948      	cbnz	r0, 800c10a <__lshift+0x3e>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	4b28      	ldr	r3, [pc, #160]	@ (800c19c <__lshift+0xd0>)
 800c0fa:	4829      	ldr	r0, [pc, #164]	@ (800c1a0 <__lshift+0xd4>)
 800c0fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c100:	f000 fb94 	bl	800c82c <__assert_func>
 800c104:	3101      	adds	r1, #1
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	e7ee      	b.n	800c0e8 <__lshift+0x1c>
 800c10a:	2300      	movs	r3, #0
 800c10c:	f100 0114 	add.w	r1, r0, #20
 800c110:	f100 0210 	add.w	r2, r0, #16
 800c114:	4618      	mov	r0, r3
 800c116:	4553      	cmp	r3, sl
 800c118:	db33      	blt.n	800c182 <__lshift+0xb6>
 800c11a:	6920      	ldr	r0, [r4, #16]
 800c11c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c120:	f104 0314 	add.w	r3, r4, #20
 800c124:	f019 091f 	ands.w	r9, r9, #31
 800c128:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c12c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c130:	d02b      	beq.n	800c18a <__lshift+0xbe>
 800c132:	f1c9 0e20 	rsb	lr, r9, #32
 800c136:	468a      	mov	sl, r1
 800c138:	2200      	movs	r2, #0
 800c13a:	6818      	ldr	r0, [r3, #0]
 800c13c:	fa00 f009 	lsl.w	r0, r0, r9
 800c140:	4310      	orrs	r0, r2
 800c142:	f84a 0b04 	str.w	r0, [sl], #4
 800c146:	f853 2b04 	ldr.w	r2, [r3], #4
 800c14a:	459c      	cmp	ip, r3
 800c14c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c150:	d8f3      	bhi.n	800c13a <__lshift+0x6e>
 800c152:	ebac 0304 	sub.w	r3, ip, r4
 800c156:	3b15      	subs	r3, #21
 800c158:	f023 0303 	bic.w	r3, r3, #3
 800c15c:	3304      	adds	r3, #4
 800c15e:	f104 0015 	add.w	r0, r4, #21
 800c162:	4560      	cmp	r0, ip
 800c164:	bf88      	it	hi
 800c166:	2304      	movhi	r3, #4
 800c168:	50ca      	str	r2, [r1, r3]
 800c16a:	b10a      	cbz	r2, 800c170 <__lshift+0xa4>
 800c16c:	f108 0602 	add.w	r6, r8, #2
 800c170:	3e01      	subs	r6, #1
 800c172:	4638      	mov	r0, r7
 800c174:	612e      	str	r6, [r5, #16]
 800c176:	4621      	mov	r1, r4
 800c178:	f7ff fde2 	bl	800bd40 <_Bfree>
 800c17c:	4628      	mov	r0, r5
 800c17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c182:	f842 0f04 	str.w	r0, [r2, #4]!
 800c186:	3301      	adds	r3, #1
 800c188:	e7c5      	b.n	800c116 <__lshift+0x4a>
 800c18a:	3904      	subs	r1, #4
 800c18c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c190:	f841 2f04 	str.w	r2, [r1, #4]!
 800c194:	459c      	cmp	ip, r3
 800c196:	d8f9      	bhi.n	800c18c <__lshift+0xc0>
 800c198:	e7ea      	b.n	800c170 <__lshift+0xa4>
 800c19a:	bf00      	nop
 800c19c:	0800ef0c 	.word	0x0800ef0c
 800c1a0:	0800ef1d 	.word	0x0800ef1d

0800c1a4 <__mcmp>:
 800c1a4:	690a      	ldr	r2, [r1, #16]
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	6900      	ldr	r0, [r0, #16]
 800c1aa:	1a80      	subs	r0, r0, r2
 800c1ac:	b530      	push	{r4, r5, lr}
 800c1ae:	d10e      	bne.n	800c1ce <__mcmp+0x2a>
 800c1b0:	3314      	adds	r3, #20
 800c1b2:	3114      	adds	r1, #20
 800c1b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c1b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c1bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c1c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c1c4:	4295      	cmp	r5, r2
 800c1c6:	d003      	beq.n	800c1d0 <__mcmp+0x2c>
 800c1c8:	d205      	bcs.n	800c1d6 <__mcmp+0x32>
 800c1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ce:	bd30      	pop	{r4, r5, pc}
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	d3f3      	bcc.n	800c1bc <__mcmp+0x18>
 800c1d4:	e7fb      	b.n	800c1ce <__mcmp+0x2a>
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	e7f9      	b.n	800c1ce <__mcmp+0x2a>
	...

0800c1dc <__mdiff>:
 800c1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e0:	4689      	mov	r9, r1
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	4648      	mov	r0, r9
 800c1e8:	4614      	mov	r4, r2
 800c1ea:	f7ff ffdb 	bl	800c1a4 <__mcmp>
 800c1ee:	1e05      	subs	r5, r0, #0
 800c1f0:	d112      	bne.n	800c218 <__mdiff+0x3c>
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f7ff fd63 	bl	800bcc0 <_Balloc>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	b928      	cbnz	r0, 800c20a <__mdiff+0x2e>
 800c1fe:	4b3f      	ldr	r3, [pc, #252]	@ (800c2fc <__mdiff+0x120>)
 800c200:	f240 2137 	movw	r1, #567	@ 0x237
 800c204:	483e      	ldr	r0, [pc, #248]	@ (800c300 <__mdiff+0x124>)
 800c206:	f000 fb11 	bl	800c82c <__assert_func>
 800c20a:	2301      	movs	r3, #1
 800c20c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c210:	4610      	mov	r0, r2
 800c212:	b003      	add	sp, #12
 800c214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c218:	bfbc      	itt	lt
 800c21a:	464b      	movlt	r3, r9
 800c21c:	46a1      	movlt	r9, r4
 800c21e:	4630      	mov	r0, r6
 800c220:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c224:	bfba      	itte	lt
 800c226:	461c      	movlt	r4, r3
 800c228:	2501      	movlt	r5, #1
 800c22a:	2500      	movge	r5, #0
 800c22c:	f7ff fd48 	bl	800bcc0 <_Balloc>
 800c230:	4602      	mov	r2, r0
 800c232:	b918      	cbnz	r0, 800c23c <__mdiff+0x60>
 800c234:	4b31      	ldr	r3, [pc, #196]	@ (800c2fc <__mdiff+0x120>)
 800c236:	f240 2145 	movw	r1, #581	@ 0x245
 800c23a:	e7e3      	b.n	800c204 <__mdiff+0x28>
 800c23c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c240:	6926      	ldr	r6, [r4, #16]
 800c242:	60c5      	str	r5, [r0, #12]
 800c244:	f109 0310 	add.w	r3, r9, #16
 800c248:	f109 0514 	add.w	r5, r9, #20
 800c24c:	f104 0e14 	add.w	lr, r4, #20
 800c250:	f100 0b14 	add.w	fp, r0, #20
 800c254:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c258:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c25c:	9301      	str	r3, [sp, #4]
 800c25e:	46d9      	mov	r9, fp
 800c260:	f04f 0c00 	mov.w	ip, #0
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c26a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c26e:	9301      	str	r3, [sp, #4]
 800c270:	fa1f f38a 	uxth.w	r3, sl
 800c274:	4619      	mov	r1, r3
 800c276:	b283      	uxth	r3, r0
 800c278:	1acb      	subs	r3, r1, r3
 800c27a:	0c00      	lsrs	r0, r0, #16
 800c27c:	4463      	add	r3, ip
 800c27e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c282:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c286:	b29b      	uxth	r3, r3
 800c288:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c28c:	4576      	cmp	r6, lr
 800c28e:	f849 3b04 	str.w	r3, [r9], #4
 800c292:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c296:	d8e5      	bhi.n	800c264 <__mdiff+0x88>
 800c298:	1b33      	subs	r3, r6, r4
 800c29a:	3b15      	subs	r3, #21
 800c29c:	f023 0303 	bic.w	r3, r3, #3
 800c2a0:	3415      	adds	r4, #21
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	42a6      	cmp	r6, r4
 800c2a6:	bf38      	it	cc
 800c2a8:	2304      	movcc	r3, #4
 800c2aa:	441d      	add	r5, r3
 800c2ac:	445b      	add	r3, fp
 800c2ae:	461e      	mov	r6, r3
 800c2b0:	462c      	mov	r4, r5
 800c2b2:	4544      	cmp	r4, r8
 800c2b4:	d30e      	bcc.n	800c2d4 <__mdiff+0xf8>
 800c2b6:	f108 0103 	add.w	r1, r8, #3
 800c2ba:	1b49      	subs	r1, r1, r5
 800c2bc:	f021 0103 	bic.w	r1, r1, #3
 800c2c0:	3d03      	subs	r5, #3
 800c2c2:	45a8      	cmp	r8, r5
 800c2c4:	bf38      	it	cc
 800c2c6:	2100      	movcc	r1, #0
 800c2c8:	440b      	add	r3, r1
 800c2ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c2ce:	b191      	cbz	r1, 800c2f6 <__mdiff+0x11a>
 800c2d0:	6117      	str	r7, [r2, #16]
 800c2d2:	e79d      	b.n	800c210 <__mdiff+0x34>
 800c2d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c2d8:	46e6      	mov	lr, ip
 800c2da:	0c08      	lsrs	r0, r1, #16
 800c2dc:	fa1c fc81 	uxtah	ip, ip, r1
 800c2e0:	4471      	add	r1, lr
 800c2e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c2e6:	b289      	uxth	r1, r1
 800c2e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c2ec:	f846 1b04 	str.w	r1, [r6], #4
 800c2f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2f4:	e7dd      	b.n	800c2b2 <__mdiff+0xd6>
 800c2f6:	3f01      	subs	r7, #1
 800c2f8:	e7e7      	b.n	800c2ca <__mdiff+0xee>
 800c2fa:	bf00      	nop
 800c2fc:	0800ef0c 	.word	0x0800ef0c
 800c300:	0800ef1d 	.word	0x0800ef1d

0800c304 <__d2b>:
 800c304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c308:	460f      	mov	r7, r1
 800c30a:	2101      	movs	r1, #1
 800c30c:	ec59 8b10 	vmov	r8, r9, d0
 800c310:	4616      	mov	r6, r2
 800c312:	f7ff fcd5 	bl	800bcc0 <_Balloc>
 800c316:	4604      	mov	r4, r0
 800c318:	b930      	cbnz	r0, 800c328 <__d2b+0x24>
 800c31a:	4602      	mov	r2, r0
 800c31c:	4b23      	ldr	r3, [pc, #140]	@ (800c3ac <__d2b+0xa8>)
 800c31e:	4824      	ldr	r0, [pc, #144]	@ (800c3b0 <__d2b+0xac>)
 800c320:	f240 310f 	movw	r1, #783	@ 0x30f
 800c324:	f000 fa82 	bl	800c82c <__assert_func>
 800c328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c32c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c330:	b10d      	cbz	r5, 800c336 <__d2b+0x32>
 800c332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c336:	9301      	str	r3, [sp, #4]
 800c338:	f1b8 0300 	subs.w	r3, r8, #0
 800c33c:	d023      	beq.n	800c386 <__d2b+0x82>
 800c33e:	4668      	mov	r0, sp
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	f7ff fd84 	bl	800be4e <__lo0bits>
 800c346:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c34a:	b1d0      	cbz	r0, 800c382 <__d2b+0x7e>
 800c34c:	f1c0 0320 	rsb	r3, r0, #32
 800c350:	fa02 f303 	lsl.w	r3, r2, r3
 800c354:	430b      	orrs	r3, r1
 800c356:	40c2      	lsrs	r2, r0
 800c358:	6163      	str	r3, [r4, #20]
 800c35a:	9201      	str	r2, [sp, #4]
 800c35c:	9b01      	ldr	r3, [sp, #4]
 800c35e:	61a3      	str	r3, [r4, #24]
 800c360:	2b00      	cmp	r3, #0
 800c362:	bf0c      	ite	eq
 800c364:	2201      	moveq	r2, #1
 800c366:	2202      	movne	r2, #2
 800c368:	6122      	str	r2, [r4, #16]
 800c36a:	b1a5      	cbz	r5, 800c396 <__d2b+0x92>
 800c36c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c370:	4405      	add	r5, r0
 800c372:	603d      	str	r5, [r7, #0]
 800c374:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c378:	6030      	str	r0, [r6, #0]
 800c37a:	4620      	mov	r0, r4
 800c37c:	b003      	add	sp, #12
 800c37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c382:	6161      	str	r1, [r4, #20]
 800c384:	e7ea      	b.n	800c35c <__d2b+0x58>
 800c386:	a801      	add	r0, sp, #4
 800c388:	f7ff fd61 	bl	800be4e <__lo0bits>
 800c38c:	9b01      	ldr	r3, [sp, #4]
 800c38e:	6163      	str	r3, [r4, #20]
 800c390:	3020      	adds	r0, #32
 800c392:	2201      	movs	r2, #1
 800c394:	e7e8      	b.n	800c368 <__d2b+0x64>
 800c396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c39a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c39e:	6038      	str	r0, [r7, #0]
 800c3a0:	6918      	ldr	r0, [r3, #16]
 800c3a2:	f7ff fd35 	bl	800be10 <__hi0bits>
 800c3a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3aa:	e7e5      	b.n	800c378 <__d2b+0x74>
 800c3ac:	0800ef0c 	.word	0x0800ef0c
 800c3b0:	0800ef1d 	.word	0x0800ef1d

0800c3b4 <__ssputs_r>:
 800c3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b8:	688e      	ldr	r6, [r1, #8]
 800c3ba:	461f      	mov	r7, r3
 800c3bc:	42be      	cmp	r6, r7
 800c3be:	680b      	ldr	r3, [r1, #0]
 800c3c0:	4682      	mov	sl, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	4690      	mov	r8, r2
 800c3c6:	d82d      	bhi.n	800c424 <__ssputs_r+0x70>
 800c3c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c3d0:	d026      	beq.n	800c420 <__ssputs_r+0x6c>
 800c3d2:	6965      	ldr	r5, [r4, #20]
 800c3d4:	6909      	ldr	r1, [r1, #16]
 800c3d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3da:	eba3 0901 	sub.w	r9, r3, r1
 800c3de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3e2:	1c7b      	adds	r3, r7, #1
 800c3e4:	444b      	add	r3, r9
 800c3e6:	106d      	asrs	r5, r5, #1
 800c3e8:	429d      	cmp	r5, r3
 800c3ea:	bf38      	it	cc
 800c3ec:	461d      	movcc	r5, r3
 800c3ee:	0553      	lsls	r3, r2, #21
 800c3f0:	d527      	bpl.n	800c442 <__ssputs_r+0x8e>
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	f7ff fbd8 	bl	800bba8 <_malloc_r>
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	b360      	cbz	r0, 800c456 <__ssputs_r+0xa2>
 800c3fc:	6921      	ldr	r1, [r4, #16]
 800c3fe:	464a      	mov	r2, r9
 800c400:	f000 fa06 	bl	800c810 <memcpy>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	6126      	str	r6, [r4, #16]
 800c412:	6165      	str	r5, [r4, #20]
 800c414:	444e      	add	r6, r9
 800c416:	eba5 0509 	sub.w	r5, r5, r9
 800c41a:	6026      	str	r6, [r4, #0]
 800c41c:	60a5      	str	r5, [r4, #8]
 800c41e:	463e      	mov	r6, r7
 800c420:	42be      	cmp	r6, r7
 800c422:	d900      	bls.n	800c426 <__ssputs_r+0x72>
 800c424:	463e      	mov	r6, r7
 800c426:	6820      	ldr	r0, [r4, #0]
 800c428:	4632      	mov	r2, r6
 800c42a:	4641      	mov	r1, r8
 800c42c:	f000 f9c6 	bl	800c7bc <memmove>
 800c430:	68a3      	ldr	r3, [r4, #8]
 800c432:	1b9b      	subs	r3, r3, r6
 800c434:	60a3      	str	r3, [r4, #8]
 800c436:	6823      	ldr	r3, [r4, #0]
 800c438:	4433      	add	r3, r6
 800c43a:	6023      	str	r3, [r4, #0]
 800c43c:	2000      	movs	r0, #0
 800c43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c442:	462a      	mov	r2, r5
 800c444:	f000 fa36 	bl	800c8b4 <_realloc_r>
 800c448:	4606      	mov	r6, r0
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d1e0      	bne.n	800c410 <__ssputs_r+0x5c>
 800c44e:	6921      	ldr	r1, [r4, #16]
 800c450:	4650      	mov	r0, sl
 800c452:	f7ff fb35 	bl	800bac0 <_free_r>
 800c456:	230c      	movs	r3, #12
 800c458:	f8ca 3000 	str.w	r3, [sl]
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	f04f 30ff 	mov.w	r0, #4294967295
 800c468:	e7e9      	b.n	800c43e <__ssputs_r+0x8a>
	...

0800c46c <_svfiprintf_r>:
 800c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c470:	4698      	mov	r8, r3
 800c472:	898b      	ldrh	r3, [r1, #12]
 800c474:	061b      	lsls	r3, r3, #24
 800c476:	b09d      	sub	sp, #116	@ 0x74
 800c478:	4607      	mov	r7, r0
 800c47a:	460d      	mov	r5, r1
 800c47c:	4614      	mov	r4, r2
 800c47e:	d510      	bpl.n	800c4a2 <_svfiprintf_r+0x36>
 800c480:	690b      	ldr	r3, [r1, #16]
 800c482:	b973      	cbnz	r3, 800c4a2 <_svfiprintf_r+0x36>
 800c484:	2140      	movs	r1, #64	@ 0x40
 800c486:	f7ff fb8f 	bl	800bba8 <_malloc_r>
 800c48a:	6028      	str	r0, [r5, #0]
 800c48c:	6128      	str	r0, [r5, #16]
 800c48e:	b930      	cbnz	r0, 800c49e <_svfiprintf_r+0x32>
 800c490:	230c      	movs	r3, #12
 800c492:	603b      	str	r3, [r7, #0]
 800c494:	f04f 30ff 	mov.w	r0, #4294967295
 800c498:	b01d      	add	sp, #116	@ 0x74
 800c49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c49e:	2340      	movs	r3, #64	@ 0x40
 800c4a0:	616b      	str	r3, [r5, #20]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4a6:	2320      	movs	r3, #32
 800c4a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4b0:	2330      	movs	r3, #48	@ 0x30
 800c4b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c650 <_svfiprintf_r+0x1e4>
 800c4b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4ba:	f04f 0901 	mov.w	r9, #1
 800c4be:	4623      	mov	r3, r4
 800c4c0:	469a      	mov	sl, r3
 800c4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c6:	b10a      	cbz	r2, 800c4cc <_svfiprintf_r+0x60>
 800c4c8:	2a25      	cmp	r2, #37	@ 0x25
 800c4ca:	d1f9      	bne.n	800c4c0 <_svfiprintf_r+0x54>
 800c4cc:	ebba 0b04 	subs.w	fp, sl, r4
 800c4d0:	d00b      	beq.n	800c4ea <_svfiprintf_r+0x7e>
 800c4d2:	465b      	mov	r3, fp
 800c4d4:	4622      	mov	r2, r4
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4638      	mov	r0, r7
 800c4da:	f7ff ff6b 	bl	800c3b4 <__ssputs_r>
 800c4de:	3001      	adds	r0, #1
 800c4e0:	f000 80a7 	beq.w	800c632 <_svfiprintf_r+0x1c6>
 800c4e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4e6:	445a      	add	r2, fp
 800c4e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f000 809f 	beq.w	800c632 <_svfiprintf_r+0x1c6>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4fe:	f10a 0a01 	add.w	sl, sl, #1
 800c502:	9304      	str	r3, [sp, #16]
 800c504:	9307      	str	r3, [sp, #28]
 800c506:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c50a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c50c:	4654      	mov	r4, sl
 800c50e:	2205      	movs	r2, #5
 800c510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c514:	484e      	ldr	r0, [pc, #312]	@ (800c650 <_svfiprintf_r+0x1e4>)
 800c516:	f7f3 fe63 	bl	80001e0 <memchr>
 800c51a:	9a04      	ldr	r2, [sp, #16]
 800c51c:	b9d8      	cbnz	r0, 800c556 <_svfiprintf_r+0xea>
 800c51e:	06d0      	lsls	r0, r2, #27
 800c520:	bf44      	itt	mi
 800c522:	2320      	movmi	r3, #32
 800c524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c528:	0711      	lsls	r1, r2, #28
 800c52a:	bf44      	itt	mi
 800c52c:	232b      	movmi	r3, #43	@ 0x2b
 800c52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c532:	f89a 3000 	ldrb.w	r3, [sl]
 800c536:	2b2a      	cmp	r3, #42	@ 0x2a
 800c538:	d015      	beq.n	800c566 <_svfiprintf_r+0xfa>
 800c53a:	9a07      	ldr	r2, [sp, #28]
 800c53c:	4654      	mov	r4, sl
 800c53e:	2000      	movs	r0, #0
 800c540:	f04f 0c0a 	mov.w	ip, #10
 800c544:	4621      	mov	r1, r4
 800c546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c54a:	3b30      	subs	r3, #48	@ 0x30
 800c54c:	2b09      	cmp	r3, #9
 800c54e:	d94b      	bls.n	800c5e8 <_svfiprintf_r+0x17c>
 800c550:	b1b0      	cbz	r0, 800c580 <_svfiprintf_r+0x114>
 800c552:	9207      	str	r2, [sp, #28]
 800c554:	e014      	b.n	800c580 <_svfiprintf_r+0x114>
 800c556:	eba0 0308 	sub.w	r3, r0, r8
 800c55a:	fa09 f303 	lsl.w	r3, r9, r3
 800c55e:	4313      	orrs	r3, r2
 800c560:	9304      	str	r3, [sp, #16]
 800c562:	46a2      	mov	sl, r4
 800c564:	e7d2      	b.n	800c50c <_svfiprintf_r+0xa0>
 800c566:	9b03      	ldr	r3, [sp, #12]
 800c568:	1d19      	adds	r1, r3, #4
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	9103      	str	r1, [sp, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	bfbb      	ittet	lt
 800c572:	425b      	neglt	r3, r3
 800c574:	f042 0202 	orrlt.w	r2, r2, #2
 800c578:	9307      	strge	r3, [sp, #28]
 800c57a:	9307      	strlt	r3, [sp, #28]
 800c57c:	bfb8      	it	lt
 800c57e:	9204      	strlt	r2, [sp, #16]
 800c580:	7823      	ldrb	r3, [r4, #0]
 800c582:	2b2e      	cmp	r3, #46	@ 0x2e
 800c584:	d10a      	bne.n	800c59c <_svfiprintf_r+0x130>
 800c586:	7863      	ldrb	r3, [r4, #1]
 800c588:	2b2a      	cmp	r3, #42	@ 0x2a
 800c58a:	d132      	bne.n	800c5f2 <_svfiprintf_r+0x186>
 800c58c:	9b03      	ldr	r3, [sp, #12]
 800c58e:	1d1a      	adds	r2, r3, #4
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	9203      	str	r2, [sp, #12]
 800c594:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c598:	3402      	adds	r4, #2
 800c59a:	9305      	str	r3, [sp, #20]
 800c59c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c660 <_svfiprintf_r+0x1f4>
 800c5a0:	7821      	ldrb	r1, [r4, #0]
 800c5a2:	2203      	movs	r2, #3
 800c5a4:	4650      	mov	r0, sl
 800c5a6:	f7f3 fe1b 	bl	80001e0 <memchr>
 800c5aa:	b138      	cbz	r0, 800c5bc <_svfiprintf_r+0x150>
 800c5ac:	9b04      	ldr	r3, [sp, #16]
 800c5ae:	eba0 000a 	sub.w	r0, r0, sl
 800c5b2:	2240      	movs	r2, #64	@ 0x40
 800c5b4:	4082      	lsls	r2, r0
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	3401      	adds	r4, #1
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c0:	4824      	ldr	r0, [pc, #144]	@ (800c654 <_svfiprintf_r+0x1e8>)
 800c5c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5c6:	2206      	movs	r2, #6
 800c5c8:	f7f3 fe0a 	bl	80001e0 <memchr>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d036      	beq.n	800c63e <_svfiprintf_r+0x1d2>
 800c5d0:	4b21      	ldr	r3, [pc, #132]	@ (800c658 <_svfiprintf_r+0x1ec>)
 800c5d2:	bb1b      	cbnz	r3, 800c61c <_svfiprintf_r+0x1b0>
 800c5d4:	9b03      	ldr	r3, [sp, #12]
 800c5d6:	3307      	adds	r3, #7
 800c5d8:	f023 0307 	bic.w	r3, r3, #7
 800c5dc:	3308      	adds	r3, #8
 800c5de:	9303      	str	r3, [sp, #12]
 800c5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e2:	4433      	add	r3, r6
 800c5e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5e6:	e76a      	b.n	800c4be <_svfiprintf_r+0x52>
 800c5e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	e7a8      	b.n	800c544 <_svfiprintf_r+0xd8>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	3401      	adds	r4, #1
 800c5f6:	9305      	str	r3, [sp, #20]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	f04f 0c0a 	mov.w	ip, #10
 800c5fe:	4620      	mov	r0, r4
 800c600:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c604:	3a30      	subs	r2, #48	@ 0x30
 800c606:	2a09      	cmp	r2, #9
 800c608:	d903      	bls.n	800c612 <_svfiprintf_r+0x1a6>
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d0c6      	beq.n	800c59c <_svfiprintf_r+0x130>
 800c60e:	9105      	str	r1, [sp, #20]
 800c610:	e7c4      	b.n	800c59c <_svfiprintf_r+0x130>
 800c612:	fb0c 2101 	mla	r1, ip, r1, r2
 800c616:	4604      	mov	r4, r0
 800c618:	2301      	movs	r3, #1
 800c61a:	e7f0      	b.n	800c5fe <_svfiprintf_r+0x192>
 800c61c:	ab03      	add	r3, sp, #12
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	462a      	mov	r2, r5
 800c622:	4b0e      	ldr	r3, [pc, #56]	@ (800c65c <_svfiprintf_r+0x1f0>)
 800c624:	a904      	add	r1, sp, #16
 800c626:	4638      	mov	r0, r7
 800c628:	f7fd fe48 	bl	800a2bc <_printf_float>
 800c62c:	1c42      	adds	r2, r0, #1
 800c62e:	4606      	mov	r6, r0
 800c630:	d1d6      	bne.n	800c5e0 <_svfiprintf_r+0x174>
 800c632:	89ab      	ldrh	r3, [r5, #12]
 800c634:	065b      	lsls	r3, r3, #25
 800c636:	f53f af2d 	bmi.w	800c494 <_svfiprintf_r+0x28>
 800c63a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c63c:	e72c      	b.n	800c498 <_svfiprintf_r+0x2c>
 800c63e:	ab03      	add	r3, sp, #12
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	462a      	mov	r2, r5
 800c644:	4b05      	ldr	r3, [pc, #20]	@ (800c65c <_svfiprintf_r+0x1f0>)
 800c646:	a904      	add	r1, sp, #16
 800c648:	4638      	mov	r0, r7
 800c64a:	f7fe f8cf 	bl	800a7ec <_printf_i>
 800c64e:	e7ed      	b.n	800c62c <_svfiprintf_r+0x1c0>
 800c650:	0800ef76 	.word	0x0800ef76
 800c654:	0800ef80 	.word	0x0800ef80
 800c658:	0800a2bd 	.word	0x0800a2bd
 800c65c:	0800c3b5 	.word	0x0800c3b5
 800c660:	0800ef7c 	.word	0x0800ef7c

0800c664 <__sflush_r>:
 800c664:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c66c:	0716      	lsls	r6, r2, #28
 800c66e:	4605      	mov	r5, r0
 800c670:	460c      	mov	r4, r1
 800c672:	d454      	bmi.n	800c71e <__sflush_r+0xba>
 800c674:	684b      	ldr	r3, [r1, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	dc02      	bgt.n	800c680 <__sflush_r+0x1c>
 800c67a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	dd48      	ble.n	800c712 <__sflush_r+0xae>
 800c680:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c682:	2e00      	cmp	r6, #0
 800c684:	d045      	beq.n	800c712 <__sflush_r+0xae>
 800c686:	2300      	movs	r3, #0
 800c688:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c68c:	682f      	ldr	r7, [r5, #0]
 800c68e:	6a21      	ldr	r1, [r4, #32]
 800c690:	602b      	str	r3, [r5, #0]
 800c692:	d030      	beq.n	800c6f6 <__sflush_r+0x92>
 800c694:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c696:	89a3      	ldrh	r3, [r4, #12]
 800c698:	0759      	lsls	r1, r3, #29
 800c69a:	d505      	bpl.n	800c6a8 <__sflush_r+0x44>
 800c69c:	6863      	ldr	r3, [r4, #4]
 800c69e:	1ad2      	subs	r2, r2, r3
 800c6a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6a2:	b10b      	cbz	r3, 800c6a8 <__sflush_r+0x44>
 800c6a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6a6:	1ad2      	subs	r2, r2, r3
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6ac:	6a21      	ldr	r1, [r4, #32]
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	47b0      	blx	r6
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	d106      	bne.n	800c6c6 <__sflush_r+0x62>
 800c6b8:	6829      	ldr	r1, [r5, #0]
 800c6ba:	291d      	cmp	r1, #29
 800c6bc:	d82b      	bhi.n	800c716 <__sflush_r+0xb2>
 800c6be:	4a2a      	ldr	r2, [pc, #168]	@ (800c768 <__sflush_r+0x104>)
 800c6c0:	40ca      	lsrs	r2, r1
 800c6c2:	07d6      	lsls	r6, r2, #31
 800c6c4:	d527      	bpl.n	800c716 <__sflush_r+0xb2>
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	6062      	str	r2, [r4, #4]
 800c6ca:	04d9      	lsls	r1, r3, #19
 800c6cc:	6922      	ldr	r2, [r4, #16]
 800c6ce:	6022      	str	r2, [r4, #0]
 800c6d0:	d504      	bpl.n	800c6dc <__sflush_r+0x78>
 800c6d2:	1c42      	adds	r2, r0, #1
 800c6d4:	d101      	bne.n	800c6da <__sflush_r+0x76>
 800c6d6:	682b      	ldr	r3, [r5, #0]
 800c6d8:	b903      	cbnz	r3, 800c6dc <__sflush_r+0x78>
 800c6da:	6560      	str	r0, [r4, #84]	@ 0x54
 800c6dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6de:	602f      	str	r7, [r5, #0]
 800c6e0:	b1b9      	cbz	r1, 800c712 <__sflush_r+0xae>
 800c6e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	d002      	beq.n	800c6f0 <__sflush_r+0x8c>
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	f7ff f9e8 	bl	800bac0 <_free_r>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6f4:	e00d      	b.n	800c712 <__sflush_r+0xae>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	47b0      	blx	r6
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	1c50      	adds	r0, r2, #1
 800c700:	d1c9      	bne.n	800c696 <__sflush_r+0x32>
 800c702:	682b      	ldr	r3, [r5, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d0c6      	beq.n	800c696 <__sflush_r+0x32>
 800c708:	2b1d      	cmp	r3, #29
 800c70a:	d001      	beq.n	800c710 <__sflush_r+0xac>
 800c70c:	2b16      	cmp	r3, #22
 800c70e:	d11e      	bne.n	800c74e <__sflush_r+0xea>
 800c710:	602f      	str	r7, [r5, #0]
 800c712:	2000      	movs	r0, #0
 800c714:	e022      	b.n	800c75c <__sflush_r+0xf8>
 800c716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c71a:	b21b      	sxth	r3, r3
 800c71c:	e01b      	b.n	800c756 <__sflush_r+0xf2>
 800c71e:	690f      	ldr	r7, [r1, #16]
 800c720:	2f00      	cmp	r7, #0
 800c722:	d0f6      	beq.n	800c712 <__sflush_r+0xae>
 800c724:	0793      	lsls	r3, r2, #30
 800c726:	680e      	ldr	r6, [r1, #0]
 800c728:	bf08      	it	eq
 800c72a:	694b      	ldreq	r3, [r1, #20]
 800c72c:	600f      	str	r7, [r1, #0]
 800c72e:	bf18      	it	ne
 800c730:	2300      	movne	r3, #0
 800c732:	eba6 0807 	sub.w	r8, r6, r7
 800c736:	608b      	str	r3, [r1, #8]
 800c738:	f1b8 0f00 	cmp.w	r8, #0
 800c73c:	dde9      	ble.n	800c712 <__sflush_r+0xae>
 800c73e:	6a21      	ldr	r1, [r4, #32]
 800c740:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c742:	4643      	mov	r3, r8
 800c744:	463a      	mov	r2, r7
 800c746:	4628      	mov	r0, r5
 800c748:	47b0      	blx	r6
 800c74a:	2800      	cmp	r0, #0
 800c74c:	dc08      	bgt.n	800c760 <__sflush_r+0xfc>
 800c74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	f04f 30ff 	mov.w	r0, #4294967295
 800c75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c760:	4407      	add	r7, r0
 800c762:	eba8 0800 	sub.w	r8, r8, r0
 800c766:	e7e7      	b.n	800c738 <__sflush_r+0xd4>
 800c768:	20400001 	.word	0x20400001

0800c76c <_fflush_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	690b      	ldr	r3, [r1, #16]
 800c770:	4605      	mov	r5, r0
 800c772:	460c      	mov	r4, r1
 800c774:	b913      	cbnz	r3, 800c77c <_fflush_r+0x10>
 800c776:	2500      	movs	r5, #0
 800c778:	4628      	mov	r0, r5
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	b118      	cbz	r0, 800c786 <_fflush_r+0x1a>
 800c77e:	6a03      	ldr	r3, [r0, #32]
 800c780:	b90b      	cbnz	r3, 800c786 <_fflush_r+0x1a>
 800c782:	f7fe f9dd 	bl	800ab40 <__sinit>
 800c786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d0f3      	beq.n	800c776 <_fflush_r+0xa>
 800c78e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c790:	07d0      	lsls	r0, r2, #31
 800c792:	d404      	bmi.n	800c79e <_fflush_r+0x32>
 800c794:	0599      	lsls	r1, r3, #22
 800c796:	d402      	bmi.n	800c79e <_fflush_r+0x32>
 800c798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c79a:	f7fe fb36 	bl	800ae0a <__retarget_lock_acquire_recursive>
 800c79e:	4628      	mov	r0, r5
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	f7ff ff5f 	bl	800c664 <__sflush_r>
 800c7a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7a8:	07da      	lsls	r2, r3, #31
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	d4e4      	bmi.n	800c778 <_fflush_r+0xc>
 800c7ae:	89a3      	ldrh	r3, [r4, #12]
 800c7b0:	059b      	lsls	r3, r3, #22
 800c7b2:	d4e1      	bmi.n	800c778 <_fflush_r+0xc>
 800c7b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7b6:	f7fe fb29 	bl	800ae0c <__retarget_lock_release_recursive>
 800c7ba:	e7dd      	b.n	800c778 <_fflush_r+0xc>

0800c7bc <memmove>:
 800c7bc:	4288      	cmp	r0, r1
 800c7be:	b510      	push	{r4, lr}
 800c7c0:	eb01 0402 	add.w	r4, r1, r2
 800c7c4:	d902      	bls.n	800c7cc <memmove+0x10>
 800c7c6:	4284      	cmp	r4, r0
 800c7c8:	4623      	mov	r3, r4
 800c7ca:	d807      	bhi.n	800c7dc <memmove+0x20>
 800c7cc:	1e43      	subs	r3, r0, #1
 800c7ce:	42a1      	cmp	r1, r4
 800c7d0:	d008      	beq.n	800c7e4 <memmove+0x28>
 800c7d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7da:	e7f8      	b.n	800c7ce <memmove+0x12>
 800c7dc:	4402      	add	r2, r0
 800c7de:	4601      	mov	r1, r0
 800c7e0:	428a      	cmp	r2, r1
 800c7e2:	d100      	bne.n	800c7e6 <memmove+0x2a>
 800c7e4:	bd10      	pop	{r4, pc}
 800c7e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7ee:	e7f7      	b.n	800c7e0 <memmove+0x24>

0800c7f0 <_sbrk_r>:
 800c7f0:	b538      	push	{r3, r4, r5, lr}
 800c7f2:	4d06      	ldr	r5, [pc, #24]	@ (800c80c <_sbrk_r+0x1c>)
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	4608      	mov	r0, r1
 800c7fa:	602b      	str	r3, [r5, #0]
 800c7fc:	f7f8 fb76 	bl	8004eec <_sbrk>
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d102      	bne.n	800c80a <_sbrk_r+0x1a>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	b103      	cbz	r3, 800c80a <_sbrk_r+0x1a>
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	bd38      	pop	{r3, r4, r5, pc}
 800c80c:	20001ee4 	.word	0x20001ee4

0800c810 <memcpy>:
 800c810:	440a      	add	r2, r1
 800c812:	4291      	cmp	r1, r2
 800c814:	f100 33ff 	add.w	r3, r0, #4294967295
 800c818:	d100      	bne.n	800c81c <memcpy+0xc>
 800c81a:	4770      	bx	lr
 800c81c:	b510      	push	{r4, lr}
 800c81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c822:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c826:	4291      	cmp	r1, r2
 800c828:	d1f9      	bne.n	800c81e <memcpy+0xe>
 800c82a:	bd10      	pop	{r4, pc}

0800c82c <__assert_func>:
 800c82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c82e:	4614      	mov	r4, r2
 800c830:	461a      	mov	r2, r3
 800c832:	4b09      	ldr	r3, [pc, #36]	@ (800c858 <__assert_func+0x2c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4605      	mov	r5, r0
 800c838:	68d8      	ldr	r0, [r3, #12]
 800c83a:	b14c      	cbz	r4, 800c850 <__assert_func+0x24>
 800c83c:	4b07      	ldr	r3, [pc, #28]	@ (800c85c <__assert_func+0x30>)
 800c83e:	9100      	str	r1, [sp, #0]
 800c840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c844:	4906      	ldr	r1, [pc, #24]	@ (800c860 <__assert_func+0x34>)
 800c846:	462b      	mov	r3, r5
 800c848:	f000 f870 	bl	800c92c <fiprintf>
 800c84c:	f000 f880 	bl	800c950 <abort>
 800c850:	4b04      	ldr	r3, [pc, #16]	@ (800c864 <__assert_func+0x38>)
 800c852:	461c      	mov	r4, r3
 800c854:	e7f3      	b.n	800c83e <__assert_func+0x12>
 800c856:	bf00      	nop
 800c858:	2000006c 	.word	0x2000006c
 800c85c:	0800ef91 	.word	0x0800ef91
 800c860:	0800ef9e 	.word	0x0800ef9e
 800c864:	0800efcc 	.word	0x0800efcc

0800c868 <_calloc_r>:
 800c868:	b570      	push	{r4, r5, r6, lr}
 800c86a:	fba1 5402 	umull	r5, r4, r1, r2
 800c86e:	b934      	cbnz	r4, 800c87e <_calloc_r+0x16>
 800c870:	4629      	mov	r1, r5
 800c872:	f7ff f999 	bl	800bba8 <_malloc_r>
 800c876:	4606      	mov	r6, r0
 800c878:	b928      	cbnz	r0, 800c886 <_calloc_r+0x1e>
 800c87a:	4630      	mov	r0, r6
 800c87c:	bd70      	pop	{r4, r5, r6, pc}
 800c87e:	220c      	movs	r2, #12
 800c880:	6002      	str	r2, [r0, #0]
 800c882:	2600      	movs	r6, #0
 800c884:	e7f9      	b.n	800c87a <_calloc_r+0x12>
 800c886:	462a      	mov	r2, r5
 800c888:	4621      	mov	r1, r4
 800c88a:	f7fe fa31 	bl	800acf0 <memset>
 800c88e:	e7f4      	b.n	800c87a <_calloc_r+0x12>

0800c890 <__ascii_mbtowc>:
 800c890:	b082      	sub	sp, #8
 800c892:	b901      	cbnz	r1, 800c896 <__ascii_mbtowc+0x6>
 800c894:	a901      	add	r1, sp, #4
 800c896:	b142      	cbz	r2, 800c8aa <__ascii_mbtowc+0x1a>
 800c898:	b14b      	cbz	r3, 800c8ae <__ascii_mbtowc+0x1e>
 800c89a:	7813      	ldrb	r3, [r2, #0]
 800c89c:	600b      	str	r3, [r1, #0]
 800c89e:	7812      	ldrb	r2, [r2, #0]
 800c8a0:	1e10      	subs	r0, r2, #0
 800c8a2:	bf18      	it	ne
 800c8a4:	2001      	movne	r0, #1
 800c8a6:	b002      	add	sp, #8
 800c8a8:	4770      	bx	lr
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	e7fb      	b.n	800c8a6 <__ascii_mbtowc+0x16>
 800c8ae:	f06f 0001 	mvn.w	r0, #1
 800c8b2:	e7f8      	b.n	800c8a6 <__ascii_mbtowc+0x16>

0800c8b4 <_realloc_r>:
 800c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	4614      	mov	r4, r2
 800c8bc:	460d      	mov	r5, r1
 800c8be:	b921      	cbnz	r1, 800c8ca <_realloc_r+0x16>
 800c8c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c4:	4611      	mov	r1, r2
 800c8c6:	f7ff b96f 	b.w	800bba8 <_malloc_r>
 800c8ca:	b92a      	cbnz	r2, 800c8d8 <_realloc_r+0x24>
 800c8cc:	f7ff f8f8 	bl	800bac0 <_free_r>
 800c8d0:	4625      	mov	r5, r4
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d8:	f000 f841 	bl	800c95e <_malloc_usable_size_r>
 800c8dc:	4284      	cmp	r4, r0
 800c8de:	4606      	mov	r6, r0
 800c8e0:	d802      	bhi.n	800c8e8 <_realloc_r+0x34>
 800c8e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8e6:	d8f4      	bhi.n	800c8d2 <_realloc_r+0x1e>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	f7ff f95c 	bl	800bba8 <_malloc_r>
 800c8f0:	4680      	mov	r8, r0
 800c8f2:	b908      	cbnz	r0, 800c8f8 <_realloc_r+0x44>
 800c8f4:	4645      	mov	r5, r8
 800c8f6:	e7ec      	b.n	800c8d2 <_realloc_r+0x1e>
 800c8f8:	42b4      	cmp	r4, r6
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	bf28      	it	cs
 800c900:	4632      	movcs	r2, r6
 800c902:	f7ff ff85 	bl	800c810 <memcpy>
 800c906:	4629      	mov	r1, r5
 800c908:	4638      	mov	r0, r7
 800c90a:	f7ff f8d9 	bl	800bac0 <_free_r>
 800c90e:	e7f1      	b.n	800c8f4 <_realloc_r+0x40>

0800c910 <__ascii_wctomb>:
 800c910:	4603      	mov	r3, r0
 800c912:	4608      	mov	r0, r1
 800c914:	b141      	cbz	r1, 800c928 <__ascii_wctomb+0x18>
 800c916:	2aff      	cmp	r2, #255	@ 0xff
 800c918:	d904      	bls.n	800c924 <__ascii_wctomb+0x14>
 800c91a:	228a      	movs	r2, #138	@ 0x8a
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	f04f 30ff 	mov.w	r0, #4294967295
 800c922:	4770      	bx	lr
 800c924:	700a      	strb	r2, [r1, #0]
 800c926:	2001      	movs	r0, #1
 800c928:	4770      	bx	lr
	...

0800c92c <fiprintf>:
 800c92c:	b40e      	push	{r1, r2, r3}
 800c92e:	b503      	push	{r0, r1, lr}
 800c930:	4601      	mov	r1, r0
 800c932:	ab03      	add	r3, sp, #12
 800c934:	4805      	ldr	r0, [pc, #20]	@ (800c94c <fiprintf+0x20>)
 800c936:	f853 2b04 	ldr.w	r2, [r3], #4
 800c93a:	6800      	ldr	r0, [r0, #0]
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	f000 f83f 	bl	800c9c0 <_vfiprintf_r>
 800c942:	b002      	add	sp, #8
 800c944:	f85d eb04 	ldr.w	lr, [sp], #4
 800c948:	b003      	add	sp, #12
 800c94a:	4770      	bx	lr
 800c94c:	2000006c 	.word	0x2000006c

0800c950 <abort>:
 800c950:	b508      	push	{r3, lr}
 800c952:	2006      	movs	r0, #6
 800c954:	f000 fa08 	bl	800cd68 <raise>
 800c958:	2001      	movs	r0, #1
 800c95a:	f7f8 fa4f 	bl	8004dfc <_exit>

0800c95e <_malloc_usable_size_r>:
 800c95e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c962:	1f18      	subs	r0, r3, #4
 800c964:	2b00      	cmp	r3, #0
 800c966:	bfbc      	itt	lt
 800c968:	580b      	ldrlt	r3, [r1, r0]
 800c96a:	18c0      	addlt	r0, r0, r3
 800c96c:	4770      	bx	lr

0800c96e <__sfputc_r>:
 800c96e:	6893      	ldr	r3, [r2, #8]
 800c970:	3b01      	subs	r3, #1
 800c972:	2b00      	cmp	r3, #0
 800c974:	b410      	push	{r4}
 800c976:	6093      	str	r3, [r2, #8]
 800c978:	da08      	bge.n	800c98c <__sfputc_r+0x1e>
 800c97a:	6994      	ldr	r4, [r2, #24]
 800c97c:	42a3      	cmp	r3, r4
 800c97e:	db01      	blt.n	800c984 <__sfputc_r+0x16>
 800c980:	290a      	cmp	r1, #10
 800c982:	d103      	bne.n	800c98c <__sfputc_r+0x1e>
 800c984:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c988:	f000 b932 	b.w	800cbf0 <__swbuf_r>
 800c98c:	6813      	ldr	r3, [r2, #0]
 800c98e:	1c58      	adds	r0, r3, #1
 800c990:	6010      	str	r0, [r2, #0]
 800c992:	7019      	strb	r1, [r3, #0]
 800c994:	4608      	mov	r0, r1
 800c996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <__sfputs_r>:
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99e:	4606      	mov	r6, r0
 800c9a0:	460f      	mov	r7, r1
 800c9a2:	4614      	mov	r4, r2
 800c9a4:	18d5      	adds	r5, r2, r3
 800c9a6:	42ac      	cmp	r4, r5
 800c9a8:	d101      	bne.n	800c9ae <__sfputs_r+0x12>
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	e007      	b.n	800c9be <__sfputs_r+0x22>
 800c9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b2:	463a      	mov	r2, r7
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	f7ff ffda 	bl	800c96e <__sfputc_r>
 800c9ba:	1c43      	adds	r3, r0, #1
 800c9bc:	d1f3      	bne.n	800c9a6 <__sfputs_r+0xa>
 800c9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9c0 <_vfiprintf_r>:
 800c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	460d      	mov	r5, r1
 800c9c6:	b09d      	sub	sp, #116	@ 0x74
 800c9c8:	4614      	mov	r4, r2
 800c9ca:	4698      	mov	r8, r3
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	b118      	cbz	r0, 800c9d8 <_vfiprintf_r+0x18>
 800c9d0:	6a03      	ldr	r3, [r0, #32]
 800c9d2:	b90b      	cbnz	r3, 800c9d8 <_vfiprintf_r+0x18>
 800c9d4:	f7fe f8b4 	bl	800ab40 <__sinit>
 800c9d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9da:	07d9      	lsls	r1, r3, #31
 800c9dc:	d405      	bmi.n	800c9ea <_vfiprintf_r+0x2a>
 800c9de:	89ab      	ldrh	r3, [r5, #12]
 800c9e0:	059a      	lsls	r2, r3, #22
 800c9e2:	d402      	bmi.n	800c9ea <_vfiprintf_r+0x2a>
 800c9e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9e6:	f7fe fa10 	bl	800ae0a <__retarget_lock_acquire_recursive>
 800c9ea:	89ab      	ldrh	r3, [r5, #12]
 800c9ec:	071b      	lsls	r3, r3, #28
 800c9ee:	d501      	bpl.n	800c9f4 <_vfiprintf_r+0x34>
 800c9f0:	692b      	ldr	r3, [r5, #16]
 800c9f2:	b99b      	cbnz	r3, 800ca1c <_vfiprintf_r+0x5c>
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f000 f938 	bl	800cc6c <__swsetup_r>
 800c9fc:	b170      	cbz	r0, 800ca1c <_vfiprintf_r+0x5c>
 800c9fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca00:	07dc      	lsls	r4, r3, #31
 800ca02:	d504      	bpl.n	800ca0e <_vfiprintf_r+0x4e>
 800ca04:	f04f 30ff 	mov.w	r0, #4294967295
 800ca08:	b01d      	add	sp, #116	@ 0x74
 800ca0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0e:	89ab      	ldrh	r3, [r5, #12]
 800ca10:	0598      	lsls	r0, r3, #22
 800ca12:	d4f7      	bmi.n	800ca04 <_vfiprintf_r+0x44>
 800ca14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca16:	f7fe f9f9 	bl	800ae0c <__retarget_lock_release_recursive>
 800ca1a:	e7f3      	b.n	800ca04 <_vfiprintf_r+0x44>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca20:	2320      	movs	r3, #32
 800ca22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca26:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca2a:	2330      	movs	r3, #48	@ 0x30
 800ca2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cbdc <_vfiprintf_r+0x21c>
 800ca30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca34:	f04f 0901 	mov.w	r9, #1
 800ca38:	4623      	mov	r3, r4
 800ca3a:	469a      	mov	sl, r3
 800ca3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca40:	b10a      	cbz	r2, 800ca46 <_vfiprintf_r+0x86>
 800ca42:	2a25      	cmp	r2, #37	@ 0x25
 800ca44:	d1f9      	bne.n	800ca3a <_vfiprintf_r+0x7a>
 800ca46:	ebba 0b04 	subs.w	fp, sl, r4
 800ca4a:	d00b      	beq.n	800ca64 <_vfiprintf_r+0xa4>
 800ca4c:	465b      	mov	r3, fp
 800ca4e:	4622      	mov	r2, r4
 800ca50:	4629      	mov	r1, r5
 800ca52:	4630      	mov	r0, r6
 800ca54:	f7ff ffa2 	bl	800c99c <__sfputs_r>
 800ca58:	3001      	adds	r0, #1
 800ca5a:	f000 80a7 	beq.w	800cbac <_vfiprintf_r+0x1ec>
 800ca5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca60:	445a      	add	r2, fp
 800ca62:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca64:	f89a 3000 	ldrb.w	r3, [sl]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f000 809f 	beq.w	800cbac <_vfiprintf_r+0x1ec>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f04f 32ff 	mov.w	r2, #4294967295
 800ca74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca78:	f10a 0a01 	add.w	sl, sl, #1
 800ca7c:	9304      	str	r3, [sp, #16]
 800ca7e:	9307      	str	r3, [sp, #28]
 800ca80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca84:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca86:	4654      	mov	r4, sl
 800ca88:	2205      	movs	r2, #5
 800ca8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca8e:	4853      	ldr	r0, [pc, #332]	@ (800cbdc <_vfiprintf_r+0x21c>)
 800ca90:	f7f3 fba6 	bl	80001e0 <memchr>
 800ca94:	9a04      	ldr	r2, [sp, #16]
 800ca96:	b9d8      	cbnz	r0, 800cad0 <_vfiprintf_r+0x110>
 800ca98:	06d1      	lsls	r1, r2, #27
 800ca9a:	bf44      	itt	mi
 800ca9c:	2320      	movmi	r3, #32
 800ca9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caa2:	0713      	lsls	r3, r2, #28
 800caa4:	bf44      	itt	mi
 800caa6:	232b      	movmi	r3, #43	@ 0x2b
 800caa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caac:	f89a 3000 	ldrb.w	r3, [sl]
 800cab0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cab2:	d015      	beq.n	800cae0 <_vfiprintf_r+0x120>
 800cab4:	9a07      	ldr	r2, [sp, #28]
 800cab6:	4654      	mov	r4, sl
 800cab8:	2000      	movs	r0, #0
 800caba:	f04f 0c0a 	mov.w	ip, #10
 800cabe:	4621      	mov	r1, r4
 800cac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cac4:	3b30      	subs	r3, #48	@ 0x30
 800cac6:	2b09      	cmp	r3, #9
 800cac8:	d94b      	bls.n	800cb62 <_vfiprintf_r+0x1a2>
 800caca:	b1b0      	cbz	r0, 800cafa <_vfiprintf_r+0x13a>
 800cacc:	9207      	str	r2, [sp, #28]
 800cace:	e014      	b.n	800cafa <_vfiprintf_r+0x13a>
 800cad0:	eba0 0308 	sub.w	r3, r0, r8
 800cad4:	fa09 f303 	lsl.w	r3, r9, r3
 800cad8:	4313      	orrs	r3, r2
 800cada:	9304      	str	r3, [sp, #16]
 800cadc:	46a2      	mov	sl, r4
 800cade:	e7d2      	b.n	800ca86 <_vfiprintf_r+0xc6>
 800cae0:	9b03      	ldr	r3, [sp, #12]
 800cae2:	1d19      	adds	r1, r3, #4
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	9103      	str	r1, [sp, #12]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	bfbb      	ittet	lt
 800caec:	425b      	neglt	r3, r3
 800caee:	f042 0202 	orrlt.w	r2, r2, #2
 800caf2:	9307      	strge	r3, [sp, #28]
 800caf4:	9307      	strlt	r3, [sp, #28]
 800caf6:	bfb8      	it	lt
 800caf8:	9204      	strlt	r2, [sp, #16]
 800cafa:	7823      	ldrb	r3, [r4, #0]
 800cafc:	2b2e      	cmp	r3, #46	@ 0x2e
 800cafe:	d10a      	bne.n	800cb16 <_vfiprintf_r+0x156>
 800cb00:	7863      	ldrb	r3, [r4, #1]
 800cb02:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb04:	d132      	bne.n	800cb6c <_vfiprintf_r+0x1ac>
 800cb06:	9b03      	ldr	r3, [sp, #12]
 800cb08:	1d1a      	adds	r2, r3, #4
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	9203      	str	r2, [sp, #12]
 800cb0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb12:	3402      	adds	r4, #2
 800cb14:	9305      	str	r3, [sp, #20]
 800cb16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbec <_vfiprintf_r+0x22c>
 800cb1a:	7821      	ldrb	r1, [r4, #0]
 800cb1c:	2203      	movs	r2, #3
 800cb1e:	4650      	mov	r0, sl
 800cb20:	f7f3 fb5e 	bl	80001e0 <memchr>
 800cb24:	b138      	cbz	r0, 800cb36 <_vfiprintf_r+0x176>
 800cb26:	9b04      	ldr	r3, [sp, #16]
 800cb28:	eba0 000a 	sub.w	r0, r0, sl
 800cb2c:	2240      	movs	r2, #64	@ 0x40
 800cb2e:	4082      	lsls	r2, r0
 800cb30:	4313      	orrs	r3, r2
 800cb32:	3401      	adds	r4, #1
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb3a:	4829      	ldr	r0, [pc, #164]	@ (800cbe0 <_vfiprintf_r+0x220>)
 800cb3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb40:	2206      	movs	r2, #6
 800cb42:	f7f3 fb4d 	bl	80001e0 <memchr>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d03f      	beq.n	800cbca <_vfiprintf_r+0x20a>
 800cb4a:	4b26      	ldr	r3, [pc, #152]	@ (800cbe4 <_vfiprintf_r+0x224>)
 800cb4c:	bb1b      	cbnz	r3, 800cb96 <_vfiprintf_r+0x1d6>
 800cb4e:	9b03      	ldr	r3, [sp, #12]
 800cb50:	3307      	adds	r3, #7
 800cb52:	f023 0307 	bic.w	r3, r3, #7
 800cb56:	3308      	adds	r3, #8
 800cb58:	9303      	str	r3, [sp, #12]
 800cb5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb5c:	443b      	add	r3, r7
 800cb5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb60:	e76a      	b.n	800ca38 <_vfiprintf_r+0x78>
 800cb62:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb66:	460c      	mov	r4, r1
 800cb68:	2001      	movs	r0, #1
 800cb6a:	e7a8      	b.n	800cabe <_vfiprintf_r+0xfe>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	3401      	adds	r4, #1
 800cb70:	9305      	str	r3, [sp, #20]
 800cb72:	4619      	mov	r1, r3
 800cb74:	f04f 0c0a 	mov.w	ip, #10
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb7e:	3a30      	subs	r2, #48	@ 0x30
 800cb80:	2a09      	cmp	r2, #9
 800cb82:	d903      	bls.n	800cb8c <_vfiprintf_r+0x1cc>
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d0c6      	beq.n	800cb16 <_vfiprintf_r+0x156>
 800cb88:	9105      	str	r1, [sp, #20]
 800cb8a:	e7c4      	b.n	800cb16 <_vfiprintf_r+0x156>
 800cb8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb90:	4604      	mov	r4, r0
 800cb92:	2301      	movs	r3, #1
 800cb94:	e7f0      	b.n	800cb78 <_vfiprintf_r+0x1b8>
 800cb96:	ab03      	add	r3, sp, #12
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	4b12      	ldr	r3, [pc, #72]	@ (800cbe8 <_vfiprintf_r+0x228>)
 800cb9e:	a904      	add	r1, sp, #16
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7fd fb8b 	bl	800a2bc <_printf_float>
 800cba6:	4607      	mov	r7, r0
 800cba8:	1c78      	adds	r0, r7, #1
 800cbaa:	d1d6      	bne.n	800cb5a <_vfiprintf_r+0x19a>
 800cbac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbae:	07d9      	lsls	r1, r3, #31
 800cbb0:	d405      	bmi.n	800cbbe <_vfiprintf_r+0x1fe>
 800cbb2:	89ab      	ldrh	r3, [r5, #12]
 800cbb4:	059a      	lsls	r2, r3, #22
 800cbb6:	d402      	bmi.n	800cbbe <_vfiprintf_r+0x1fe>
 800cbb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbba:	f7fe f927 	bl	800ae0c <__retarget_lock_release_recursive>
 800cbbe:	89ab      	ldrh	r3, [r5, #12]
 800cbc0:	065b      	lsls	r3, r3, #25
 800cbc2:	f53f af1f 	bmi.w	800ca04 <_vfiprintf_r+0x44>
 800cbc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbc8:	e71e      	b.n	800ca08 <_vfiprintf_r+0x48>
 800cbca:	ab03      	add	r3, sp, #12
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	462a      	mov	r2, r5
 800cbd0:	4b05      	ldr	r3, [pc, #20]	@ (800cbe8 <_vfiprintf_r+0x228>)
 800cbd2:	a904      	add	r1, sp, #16
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f7fd fe09 	bl	800a7ec <_printf_i>
 800cbda:	e7e4      	b.n	800cba6 <_vfiprintf_r+0x1e6>
 800cbdc:	0800ef76 	.word	0x0800ef76
 800cbe0:	0800ef80 	.word	0x0800ef80
 800cbe4:	0800a2bd 	.word	0x0800a2bd
 800cbe8:	0800c99d 	.word	0x0800c99d
 800cbec:	0800ef7c 	.word	0x0800ef7c

0800cbf0 <__swbuf_r>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	460e      	mov	r6, r1
 800cbf4:	4614      	mov	r4, r2
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	b118      	cbz	r0, 800cc02 <__swbuf_r+0x12>
 800cbfa:	6a03      	ldr	r3, [r0, #32]
 800cbfc:	b90b      	cbnz	r3, 800cc02 <__swbuf_r+0x12>
 800cbfe:	f7fd ff9f 	bl	800ab40 <__sinit>
 800cc02:	69a3      	ldr	r3, [r4, #24]
 800cc04:	60a3      	str	r3, [r4, #8]
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	071a      	lsls	r2, r3, #28
 800cc0a:	d501      	bpl.n	800cc10 <__swbuf_r+0x20>
 800cc0c:	6923      	ldr	r3, [r4, #16]
 800cc0e:	b943      	cbnz	r3, 800cc22 <__swbuf_r+0x32>
 800cc10:	4621      	mov	r1, r4
 800cc12:	4628      	mov	r0, r5
 800cc14:	f000 f82a 	bl	800cc6c <__swsetup_r>
 800cc18:	b118      	cbz	r0, 800cc22 <__swbuf_r+0x32>
 800cc1a:	f04f 37ff 	mov.w	r7, #4294967295
 800cc1e:	4638      	mov	r0, r7
 800cc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc22:	6823      	ldr	r3, [r4, #0]
 800cc24:	6922      	ldr	r2, [r4, #16]
 800cc26:	1a98      	subs	r0, r3, r2
 800cc28:	6963      	ldr	r3, [r4, #20]
 800cc2a:	b2f6      	uxtb	r6, r6
 800cc2c:	4283      	cmp	r3, r0
 800cc2e:	4637      	mov	r7, r6
 800cc30:	dc05      	bgt.n	800cc3e <__swbuf_r+0x4e>
 800cc32:	4621      	mov	r1, r4
 800cc34:	4628      	mov	r0, r5
 800cc36:	f7ff fd99 	bl	800c76c <_fflush_r>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d1ed      	bne.n	800cc1a <__swbuf_r+0x2a>
 800cc3e:	68a3      	ldr	r3, [r4, #8]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	60a3      	str	r3, [r4, #8]
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	1c5a      	adds	r2, r3, #1
 800cc48:	6022      	str	r2, [r4, #0]
 800cc4a:	701e      	strb	r6, [r3, #0]
 800cc4c:	6962      	ldr	r2, [r4, #20]
 800cc4e:	1c43      	adds	r3, r0, #1
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d004      	beq.n	800cc5e <__swbuf_r+0x6e>
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	07db      	lsls	r3, r3, #31
 800cc58:	d5e1      	bpl.n	800cc1e <__swbuf_r+0x2e>
 800cc5a:	2e0a      	cmp	r6, #10
 800cc5c:	d1df      	bne.n	800cc1e <__swbuf_r+0x2e>
 800cc5e:	4621      	mov	r1, r4
 800cc60:	4628      	mov	r0, r5
 800cc62:	f7ff fd83 	bl	800c76c <_fflush_r>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d0d9      	beq.n	800cc1e <__swbuf_r+0x2e>
 800cc6a:	e7d6      	b.n	800cc1a <__swbuf_r+0x2a>

0800cc6c <__swsetup_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4b29      	ldr	r3, [pc, #164]	@ (800cd14 <__swsetup_r+0xa8>)
 800cc70:	4605      	mov	r5, r0
 800cc72:	6818      	ldr	r0, [r3, #0]
 800cc74:	460c      	mov	r4, r1
 800cc76:	b118      	cbz	r0, 800cc80 <__swsetup_r+0x14>
 800cc78:	6a03      	ldr	r3, [r0, #32]
 800cc7a:	b90b      	cbnz	r3, 800cc80 <__swsetup_r+0x14>
 800cc7c:	f7fd ff60 	bl	800ab40 <__sinit>
 800cc80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc84:	0719      	lsls	r1, r3, #28
 800cc86:	d422      	bmi.n	800ccce <__swsetup_r+0x62>
 800cc88:	06da      	lsls	r2, r3, #27
 800cc8a:	d407      	bmi.n	800cc9c <__swsetup_r+0x30>
 800cc8c:	2209      	movs	r2, #9
 800cc8e:	602a      	str	r2, [r5, #0]
 800cc90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc94:	81a3      	strh	r3, [r4, #12]
 800cc96:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9a:	e033      	b.n	800cd04 <__swsetup_r+0x98>
 800cc9c:	0758      	lsls	r0, r3, #29
 800cc9e:	d512      	bpl.n	800ccc6 <__swsetup_r+0x5a>
 800cca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cca2:	b141      	cbz	r1, 800ccb6 <__swsetup_r+0x4a>
 800cca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cca8:	4299      	cmp	r1, r3
 800ccaa:	d002      	beq.n	800ccb2 <__swsetup_r+0x46>
 800ccac:	4628      	mov	r0, r5
 800ccae:	f7fe ff07 	bl	800bac0 <_free_r>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccb6:	89a3      	ldrh	r3, [r4, #12]
 800ccb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccbc:	81a3      	strh	r3, [r4, #12]
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	6063      	str	r3, [r4, #4]
 800ccc2:	6923      	ldr	r3, [r4, #16]
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	89a3      	ldrh	r3, [r4, #12]
 800ccc8:	f043 0308 	orr.w	r3, r3, #8
 800cccc:	81a3      	strh	r3, [r4, #12]
 800ccce:	6923      	ldr	r3, [r4, #16]
 800ccd0:	b94b      	cbnz	r3, 800cce6 <__swsetup_r+0x7a>
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ccd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccdc:	d003      	beq.n	800cce6 <__swsetup_r+0x7a>
 800ccde:	4621      	mov	r1, r4
 800cce0:	4628      	mov	r0, r5
 800cce2:	f000 f883 	bl	800cdec <__smakebuf_r>
 800cce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccea:	f013 0201 	ands.w	r2, r3, #1
 800ccee:	d00a      	beq.n	800cd06 <__swsetup_r+0x9a>
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	60a2      	str	r2, [r4, #8]
 800ccf4:	6962      	ldr	r2, [r4, #20]
 800ccf6:	4252      	negs	r2, r2
 800ccf8:	61a2      	str	r2, [r4, #24]
 800ccfa:	6922      	ldr	r2, [r4, #16]
 800ccfc:	b942      	cbnz	r2, 800cd10 <__swsetup_r+0xa4>
 800ccfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd02:	d1c5      	bne.n	800cc90 <__swsetup_r+0x24>
 800cd04:	bd38      	pop	{r3, r4, r5, pc}
 800cd06:	0799      	lsls	r1, r3, #30
 800cd08:	bf58      	it	pl
 800cd0a:	6962      	ldrpl	r2, [r4, #20]
 800cd0c:	60a2      	str	r2, [r4, #8]
 800cd0e:	e7f4      	b.n	800ccfa <__swsetup_r+0x8e>
 800cd10:	2000      	movs	r0, #0
 800cd12:	e7f7      	b.n	800cd04 <__swsetup_r+0x98>
 800cd14:	2000006c 	.word	0x2000006c

0800cd18 <_raise_r>:
 800cd18:	291f      	cmp	r1, #31
 800cd1a:	b538      	push	{r3, r4, r5, lr}
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	460c      	mov	r4, r1
 800cd20:	d904      	bls.n	800cd2c <_raise_r+0x14>
 800cd22:	2316      	movs	r3, #22
 800cd24:	6003      	str	r3, [r0, #0]
 800cd26:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2a:	bd38      	pop	{r3, r4, r5, pc}
 800cd2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cd2e:	b112      	cbz	r2, 800cd36 <_raise_r+0x1e>
 800cd30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd34:	b94b      	cbnz	r3, 800cd4a <_raise_r+0x32>
 800cd36:	4628      	mov	r0, r5
 800cd38:	f000 f830 	bl	800cd9c <_getpid_r>
 800cd3c:	4622      	mov	r2, r4
 800cd3e:	4601      	mov	r1, r0
 800cd40:	4628      	mov	r0, r5
 800cd42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd46:	f000 b817 	b.w	800cd78 <_kill_r>
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d00a      	beq.n	800cd64 <_raise_r+0x4c>
 800cd4e:	1c59      	adds	r1, r3, #1
 800cd50:	d103      	bne.n	800cd5a <_raise_r+0x42>
 800cd52:	2316      	movs	r3, #22
 800cd54:	6003      	str	r3, [r0, #0]
 800cd56:	2001      	movs	r0, #1
 800cd58:	e7e7      	b.n	800cd2a <_raise_r+0x12>
 800cd5a:	2100      	movs	r1, #0
 800cd5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cd60:	4620      	mov	r0, r4
 800cd62:	4798      	blx	r3
 800cd64:	2000      	movs	r0, #0
 800cd66:	e7e0      	b.n	800cd2a <_raise_r+0x12>

0800cd68 <raise>:
 800cd68:	4b02      	ldr	r3, [pc, #8]	@ (800cd74 <raise+0xc>)
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	6818      	ldr	r0, [r3, #0]
 800cd6e:	f7ff bfd3 	b.w	800cd18 <_raise_r>
 800cd72:	bf00      	nop
 800cd74:	2000006c 	.word	0x2000006c

0800cd78 <_kill_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	4d07      	ldr	r5, [pc, #28]	@ (800cd98 <_kill_r+0x20>)
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	4604      	mov	r4, r0
 800cd80:	4608      	mov	r0, r1
 800cd82:	4611      	mov	r1, r2
 800cd84:	602b      	str	r3, [r5, #0]
 800cd86:	f7f8 f829 	bl	8004ddc <_kill>
 800cd8a:	1c43      	adds	r3, r0, #1
 800cd8c:	d102      	bne.n	800cd94 <_kill_r+0x1c>
 800cd8e:	682b      	ldr	r3, [r5, #0]
 800cd90:	b103      	cbz	r3, 800cd94 <_kill_r+0x1c>
 800cd92:	6023      	str	r3, [r4, #0]
 800cd94:	bd38      	pop	{r3, r4, r5, pc}
 800cd96:	bf00      	nop
 800cd98:	20001ee4 	.word	0x20001ee4

0800cd9c <_getpid_r>:
 800cd9c:	f7f8 b816 	b.w	8004dcc <_getpid>

0800cda0 <__swhatbuf_r>:
 800cda0:	b570      	push	{r4, r5, r6, lr}
 800cda2:	460c      	mov	r4, r1
 800cda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda8:	2900      	cmp	r1, #0
 800cdaa:	b096      	sub	sp, #88	@ 0x58
 800cdac:	4615      	mov	r5, r2
 800cdae:	461e      	mov	r6, r3
 800cdb0:	da0d      	bge.n	800cdce <__swhatbuf_r+0x2e>
 800cdb2:	89a3      	ldrh	r3, [r4, #12]
 800cdb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cdb8:	f04f 0100 	mov.w	r1, #0
 800cdbc:	bf14      	ite	ne
 800cdbe:	2340      	movne	r3, #64	@ 0x40
 800cdc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	6031      	str	r1, [r6, #0]
 800cdc8:	602b      	str	r3, [r5, #0]
 800cdca:	b016      	add	sp, #88	@ 0x58
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
 800cdce:	466a      	mov	r2, sp
 800cdd0:	f000 f848 	bl	800ce64 <_fstat_r>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	dbec      	blt.n	800cdb2 <__swhatbuf_r+0x12>
 800cdd8:	9901      	ldr	r1, [sp, #4]
 800cdda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cdde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cde2:	4259      	negs	r1, r3
 800cde4:	4159      	adcs	r1, r3
 800cde6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdea:	e7eb      	b.n	800cdc4 <__swhatbuf_r+0x24>

0800cdec <__smakebuf_r>:
 800cdec:	898b      	ldrh	r3, [r1, #12]
 800cdee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdf0:	079d      	lsls	r5, r3, #30
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	460c      	mov	r4, r1
 800cdf6:	d507      	bpl.n	800ce08 <__smakebuf_r+0x1c>
 800cdf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	6123      	str	r3, [r4, #16]
 800ce00:	2301      	movs	r3, #1
 800ce02:	6163      	str	r3, [r4, #20]
 800ce04:	b003      	add	sp, #12
 800ce06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce08:	ab01      	add	r3, sp, #4
 800ce0a:	466a      	mov	r2, sp
 800ce0c:	f7ff ffc8 	bl	800cda0 <__swhatbuf_r>
 800ce10:	9f00      	ldr	r7, [sp, #0]
 800ce12:	4605      	mov	r5, r0
 800ce14:	4639      	mov	r1, r7
 800ce16:	4630      	mov	r0, r6
 800ce18:	f7fe fec6 	bl	800bba8 <_malloc_r>
 800ce1c:	b948      	cbnz	r0, 800ce32 <__smakebuf_r+0x46>
 800ce1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce22:	059a      	lsls	r2, r3, #22
 800ce24:	d4ee      	bmi.n	800ce04 <__smakebuf_r+0x18>
 800ce26:	f023 0303 	bic.w	r3, r3, #3
 800ce2a:	f043 0302 	orr.w	r3, r3, #2
 800ce2e:	81a3      	strh	r3, [r4, #12]
 800ce30:	e7e2      	b.n	800cdf8 <__smakebuf_r+0xc>
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	6020      	str	r0, [r4, #0]
 800ce36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce3a:	81a3      	strh	r3, [r4, #12]
 800ce3c:	9b01      	ldr	r3, [sp, #4]
 800ce3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce42:	b15b      	cbz	r3, 800ce5c <__smakebuf_r+0x70>
 800ce44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f000 f81d 	bl	800ce88 <_isatty_r>
 800ce4e:	b128      	cbz	r0, 800ce5c <__smakebuf_r+0x70>
 800ce50:	89a3      	ldrh	r3, [r4, #12]
 800ce52:	f023 0303 	bic.w	r3, r3, #3
 800ce56:	f043 0301 	orr.w	r3, r3, #1
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	431d      	orrs	r5, r3
 800ce60:	81a5      	strh	r5, [r4, #12]
 800ce62:	e7cf      	b.n	800ce04 <__smakebuf_r+0x18>

0800ce64 <_fstat_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	4d07      	ldr	r5, [pc, #28]	@ (800ce84 <_fstat_r+0x20>)
 800ce68:	2300      	movs	r3, #0
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	4608      	mov	r0, r1
 800ce6e:	4611      	mov	r1, r2
 800ce70:	602b      	str	r3, [r5, #0]
 800ce72:	f7f8 f813 	bl	8004e9c <_fstat>
 800ce76:	1c43      	adds	r3, r0, #1
 800ce78:	d102      	bne.n	800ce80 <_fstat_r+0x1c>
 800ce7a:	682b      	ldr	r3, [r5, #0]
 800ce7c:	b103      	cbz	r3, 800ce80 <_fstat_r+0x1c>
 800ce7e:	6023      	str	r3, [r4, #0]
 800ce80:	bd38      	pop	{r3, r4, r5, pc}
 800ce82:	bf00      	nop
 800ce84:	20001ee4 	.word	0x20001ee4

0800ce88 <_isatty_r>:
 800ce88:	b538      	push	{r3, r4, r5, lr}
 800ce8a:	4d06      	ldr	r5, [pc, #24]	@ (800cea4 <_isatty_r+0x1c>)
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	4604      	mov	r4, r0
 800ce90:	4608      	mov	r0, r1
 800ce92:	602b      	str	r3, [r5, #0]
 800ce94:	f7f8 f812 	bl	8004ebc <_isatty>
 800ce98:	1c43      	adds	r3, r0, #1
 800ce9a:	d102      	bne.n	800cea2 <_isatty_r+0x1a>
 800ce9c:	682b      	ldr	r3, [r5, #0]
 800ce9e:	b103      	cbz	r3, 800cea2 <_isatty_r+0x1a>
 800cea0:	6023      	str	r3, [r4, #0]
 800cea2:	bd38      	pop	{r3, r4, r5, pc}
 800cea4:	20001ee4 	.word	0x20001ee4

0800cea8 <sqrtf>:
 800cea8:	b508      	push	{r3, lr}
 800ceaa:	ed2d 8b02 	vpush	{d8}
 800ceae:	eeb0 8a40 	vmov.f32	s16, s0
 800ceb2:	f000 f87e 	bl	800cfb2 <__ieee754_sqrtf>
 800ceb6:	eeb4 8a48 	vcmp.f32	s16, s16
 800ceba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cebe:	d60c      	bvs.n	800ceda <sqrtf+0x32>
 800cec0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cee0 <sqrtf+0x38>
 800cec4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cecc:	d505      	bpl.n	800ceda <sqrtf+0x32>
 800cece:	f7fd ff71 	bl	800adb4 <__errno>
 800ced2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ced6:	2321      	movs	r3, #33	@ 0x21
 800ced8:	6003      	str	r3, [r0, #0]
 800ceda:	ecbd 8b02 	vpop	{d8}
 800cede:	bd08      	pop	{r3, pc}
 800cee0:	00000000 	.word	0x00000000

0800cee4 <fmaxf>:
 800cee4:	b508      	push	{r3, lr}
 800cee6:	ed2d 8b02 	vpush	{d8}
 800ceea:	eeb0 8a40 	vmov.f32	s16, s0
 800ceee:	eef0 8a60 	vmov.f32	s17, s1
 800cef2:	f000 f815 	bl	800cf20 <__fpclassifyf>
 800cef6:	b930      	cbnz	r0, 800cf06 <fmaxf+0x22>
 800cef8:	eeb0 8a68 	vmov.f32	s16, s17
 800cefc:	eeb0 0a48 	vmov.f32	s0, s16
 800cf00:	ecbd 8b02 	vpop	{d8}
 800cf04:	bd08      	pop	{r3, pc}
 800cf06:	eeb0 0a68 	vmov.f32	s0, s17
 800cf0a:	f000 f809 	bl	800cf20 <__fpclassifyf>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d0f4      	beq.n	800cefc <fmaxf+0x18>
 800cf12:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1a:	dded      	ble.n	800cef8 <fmaxf+0x14>
 800cf1c:	e7ee      	b.n	800cefc <fmaxf+0x18>
	...

0800cf20 <__fpclassifyf>:
 800cf20:	ee10 3a10 	vmov	r3, s0
 800cf24:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800cf28:	d00d      	beq.n	800cf46 <__fpclassifyf+0x26>
 800cf2a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800cf2e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800cf32:	d30a      	bcc.n	800cf4a <__fpclassifyf+0x2a>
 800cf34:	4b07      	ldr	r3, [pc, #28]	@ (800cf54 <__fpclassifyf+0x34>)
 800cf36:	1e42      	subs	r2, r0, #1
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d908      	bls.n	800cf4e <__fpclassifyf+0x2e>
 800cf3c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800cf40:	4258      	negs	r0, r3
 800cf42:	4158      	adcs	r0, r3
 800cf44:	4770      	bx	lr
 800cf46:	2002      	movs	r0, #2
 800cf48:	4770      	bx	lr
 800cf4a:	2004      	movs	r0, #4
 800cf4c:	4770      	bx	lr
 800cf4e:	2003      	movs	r0, #3
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	007ffffe 	.word	0x007ffffe

0800cf58 <lroundf>:
 800cf58:	ee10 1a10 	vmov	r1, s0
 800cf5c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800cf60:	2900      	cmp	r1, #0
 800cf62:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 800cf66:	bfac      	ite	ge
 800cf68:	2001      	movge	r0, #1
 800cf6a:	f04f 30ff 	movlt.w	r0, #4294967295
 800cf6e:	2a1e      	cmp	r2, #30
 800cf70:	dc1a      	bgt.n	800cfa8 <lroundf+0x50>
 800cf72:	2a00      	cmp	r2, #0
 800cf74:	da03      	bge.n	800cf7e <lroundf+0x26>
 800cf76:	3201      	adds	r2, #1
 800cf78:	bf18      	it	ne
 800cf7a:	2000      	movne	r0, #0
 800cf7c:	4770      	bx	lr
 800cf7e:	2a16      	cmp	r2, #22
 800cf80:	bfd8      	it	le
 800cf82:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 800cf86:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800cf8a:	bfd8      	it	le
 800cf8c:	4113      	asrle	r3, r2
 800cf8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800cf92:	bfcd      	iteet	gt
 800cf94:	3b96      	subgt	r3, #150	@ 0x96
 800cf96:	185b      	addle	r3, r3, r1
 800cf98:	f1c2 0217 	rsble	r2, r2, #23
 800cf9c:	fa01 f303 	lslgt.w	r3, r1, r3
 800cfa0:	bfd8      	it	le
 800cfa2:	40d3      	lsrle	r3, r2
 800cfa4:	4358      	muls	r0, r3
 800cfa6:	4770      	bx	lr
 800cfa8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cfac:	ee17 0a90 	vmov	r0, s15
 800cfb0:	4770      	bx	lr

0800cfb2 <__ieee754_sqrtf>:
 800cfb2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cfb6:	4770      	bx	lr

0800cfb8 <roundf>:
 800cfb8:	ee10 0a10 	vmov	r0, s0
 800cfbc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800cfc0:	3a7f      	subs	r2, #127	@ 0x7f
 800cfc2:	2a16      	cmp	r2, #22
 800cfc4:	dc15      	bgt.n	800cff2 <roundf+0x3a>
 800cfc6:	2a00      	cmp	r2, #0
 800cfc8:	da08      	bge.n	800cfdc <roundf+0x24>
 800cfca:	3201      	adds	r2, #1
 800cfcc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800cfd0:	d101      	bne.n	800cfd6 <roundf+0x1e>
 800cfd2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800cfd6:	ee00 3a10 	vmov	s0, r3
 800cfda:	4770      	bx	lr
 800cfdc:	4907      	ldr	r1, [pc, #28]	@ (800cffc <roundf+0x44>)
 800cfde:	4111      	asrs	r1, r2
 800cfe0:	4201      	tst	r1, r0
 800cfe2:	d0fa      	beq.n	800cfda <roundf+0x22>
 800cfe4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cfe8:	4113      	asrs	r3, r2
 800cfea:	4403      	add	r3, r0
 800cfec:	ea23 0301 	bic.w	r3, r3, r1
 800cff0:	e7f1      	b.n	800cfd6 <roundf+0x1e>
 800cff2:	2a80      	cmp	r2, #128	@ 0x80
 800cff4:	d1f1      	bne.n	800cfda <roundf+0x22>
 800cff6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cffa:	4770      	bx	lr
 800cffc:	007fffff 	.word	0x007fffff

0800d000 <_init>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	bf00      	nop
 800d004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d006:	bc08      	pop	{r3}
 800d008:	469e      	mov	lr, r3
 800d00a:	4770      	bx	lr

0800d00c <_fini>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	bf00      	nop
 800d010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d012:	bc08      	pop	{r3}
 800d014:	469e      	mov	lr, r3
 800d016:	4770      	bx	lr
